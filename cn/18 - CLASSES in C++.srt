1
00:00:00,000 --> 00:00:07,030
Hey 大家好 欢迎回到C++系列，今天谈谈C++中的类

2
00:00:07,030 --> 00:00:10,279
我们还得从面向对象程序设计说起

3
00:00:10,279 --> 00:00:12,320
这是一种非常流行的编程思想

4
00:00:12,419 --> 00:00:18,100
面向对象编程只是你在编写代码时采用的一种编程风格

5
00:00:18,230 --> 00:00:22,500
其他的语言比如JAVA，C#本质上也是面向对象的语言

6
00:00:22,600 --> 00:00:27,600
使用这两种语言来说最好不要使用其他编码风格，除非你非要这样做

7
00:00:27,750 --> 00:00:31,500
但最终来讲这些语言只适合面向对象编程

8
00:00:31,500 --> 00:00:36,500
然而C++不同的地方在于它不仅仅支持面向对象编程
（事实上Ｃ＋＋支持，面向过程，基于对象，面向对象，泛型编程四种）

9
00:00:36,500 --> 00:00:39,729
Ｃ语言就不支持面向对象编程了

10
00:00:39,729 --> 00:00:45,270
因为面向对象程序设计需要诸如类和对象这样的概念

11
00:00:45,270 --> 00:00:47,079
这些C语言里是没有的

12
00:00:47,149 --> 00:00:53,809
好在C++增加了这些功能，一般来说C++里使用面向对象编程是再好不过了

13
00:00:53,829 --> 00:00:56,000
所以我们会在这个视频中讨论什么是类

14
00:00:56,000 --> 00:01:02,130
简而言之，类是一种将数据和函数组织在一起的方式

15
00:01:02,130 --> 00:01:07,719
举个例子，设想在一个游戏中，我们可能希望以某种方式代表玩家

16
00:01:07,719 --> 00:01:11,599
所以我们要怎样做去表示一个玩家呢

17
00:01:11,599 --> 00:01:16,219
当然我们会需要一些表示玩家的数据，例如：玩家在游戏里的位置

18
00:01:16,329 --> 00:01:21,250
可能还需要其他属性比如 移动的速度

19
00:01:21,299 --> 00:01:25,030
我们可能还需要３Ｄ模型来在屏幕上显示玩家

20
00:01:25,420 --> 00:01:27,579
所有的数据都需要存在某个地方

21
00:01:27,579 --> 00:01:30,450
当然我们可以为这些数据创建变量

22
00:01:30,450 --> 00:01:32,079
让我们看看这样做会怎样

23
00:01:32,079 --> 00:01:34,829
我们先在代码中创建一个玩家

24
00:01:34,829 --> 00:01:38,750
我们可能希望有一个位置，假如就x，y吧

25
00:01:38,750 --> 00:01:41,500
然后可能有速度，就让他等于２好了　

26
00:01:41,670 --> 00:01:46,670
这就是所有的数据了，这看起来有点乱

27
00:01:46,670 --> 00:01:53,549
而且这些名字太普通了，你可能想用PlayerX，PlayerY来代替X,Y

28
00:01:53,549 --> 00:01:55,629
然后用PlayerSpeed代表速度

29
00:01:55,629 --> 00:01:57,579
这确实看起来整洁了一点

30
00:01:57,579 --> 00:02:02,579
假如我们游戏中需要两个玩家，那么你将不得不重复这些

31
00:02:02,579 --> 00:02:06,250
你也许会这样做，player0代表一个玩家，player1代表一个玩家

32
00:02:06,250 --> 00:02:09,219
当然了你可以用数组取代这些

33
00:02:09,219 --> 00:02:18,300
但重点是这还是一堆无组织的变量充斥在代码中，显然这不是一个好主意

34
00:02:18,300 --> 00:02:21,250
另一个不好的点在于

35
00:02:21,280 --> 00:02:26,280
如果我想编写一个函数用来移动游戏角色

36
00:02:26,419 --> 00:02:29,930
显然我需要将三个整数作为函数的参数

37
00:02:30,240 --> 00:02:33,629
[coiding]

38
00:02:33,629 --> 00:02:37,930
这样会产生很多代码，并且难以维护和继续下去

39
00:02:37,930 --> 00:02:40,449
反正就是很乱！！！

40
00:02:40,689 --> 00:02:42,930
我们可以用类来简化这一步

41
00:02:42,930 --> 00:02:46,300
我们可以为玩家创建一个类，叫做player

42
00:02:46,300 --> 00:02:50,699
一次性包含所有想要的数据，最终作为一个类型

43
00:02:50,699 --> 00:02:54,599
要实现这一切，我们只需要创建一个类叫做player

44
00:02:54,599 --> 00:02:58,319
【coding】就像这样

45
00:02:58,319 --> 00:03:03,319
这必须是唯一的类型名，因为类基本上就是我们创建一个新的变量类型

46
00:03:03,319 --> 00:03:06,819
类使用花括号括起来的，就好像是一个函数

47
00:03:06,819 --> 00:03:11,379
但是请注意，实际上结尾的时候还有一个分号

48
00:03:11,379 --> 00:03:20,180
括号里面我们可以定义下面这些变量，例如表示位置的X,Y, 和speed；

49
00:03:20,180 --> 00:03:25,319
非常好，我们创建了一个全新的类叫做player，他本质上是一种自制类型

50
00:03:25,479 --> 00:03:30,479
所以当我们开始用这个Player类的时候，我们可以像创建其他任何变量一样

51
00:03:30,479 --> 00:03:34,699
我们只需写类型名-Player，然后可以随便叫什么，这里就叫player好了

52
00:03:34,699 --> 00:03:38,969
以上，我们就成功的创建了一个类型为Player的player对象

53
00:03:38,969 --> 00:03:41,379
当然了，类型的定义这在里

54
00:03:41,379 --> 00:03:46,379
由类类型制成的变量叫做对象，新创建对象的过程叫做实例化

55
00:03:46,379 --> 00:03:52,150
所以我们这里做的，就是实例化了一个Player对象

56
00:03:52,150 --> 00:03:57,900
现在假如我们要设置这些变量，我们可以简单地写player.(成员访问运算符)，然后变量名称（比如X）

57
00:03:57,900 --> 00:04:00,680
然后尝试将其赋值为5

58
00:04:00,789 --> 00:04:03,949
如果我们立即编译代码，我们会得到一个错误

59
00:04:03,949 --> 00:04:07,849
告诉我们player对象无法访问类中的私有成员

60
00:04:07,849 --> 00:04:10,250
这是因为有种东西叫访问控制

61
00:04:10,250 --> 00:04:13,099
当你创建一个类时，你可以指定类中属性的可见性

62
00:04:13,099 --> 00:04:18,100
默认情况下，类中的成员的访问控制都是私有的

63
00:04:18,100 --> 00:04:21,019
意味着只有类内部的函数才能访问这些变量

64
00:04:21,050 --> 00:04:24,730
但是我们希望从main函数访问这些变量

65
00:04:24,730 --> 00:04:27,879
所以我们真正要做的是在这里定义为共有的

66
00:04:27,879 --> 00:04:32,879
公有表示我们可以在类外任何地方去访问这些变量

67
00:04:33,069 --> 00:04:38,069
在未来的视频中我们会讨论的更多，现在我不想过多的涉及

68
00:04:38,069 --> 00:04:41,399
所以你可以看到如果我们编译代码，外部可以成功的访问

69
00:04:41,399 --> 00:04:43,680
OK!  很完美 ，我们实现了第一个目标

70
00:04:43,680 --> 00:04:48,230
我们已经彻底的将代码变得整洁，通过将数据组织在一起

71
00:04:48,230 --> 00:04:51,750
得益于将所有的变量收集起来代表player，我们可以很好地进行管理

72
00:04:51,750 --> 00:04:55,980
我们现在有了所有的数据，假设我们想做点什么事情，比如移动到什么地方

73
00:04:55,980 --> 00:04:59,819
所以我们要编写一个函数来改变X,Y变量

74
00:04:59,819 --> 00:05:01,269
要怎样做呢？

75
00:05:01,269 --> 00:05:02,800
我们可以将其编写成独立的函数

76
00:05:02,800 --> 00:05:07,800
所以我写void,叫做move，然后接收我想要移动的Player

77
00:05:07,800 --> 00:05:12,800
我不得不通过引用传递，因为这实际上将修改玩家的值

78
00:05:12,800 --> 00:05:17,800
然后我还将传入Xa,Ya,代表偏移量

79
00:05:17,800 --> 00:05:29,550
然后我需要做的就是[coding]，

80
00:05:30,180 --> 00:05:37,750
如果我们想调用它，我们只是写Move(player,)
然后是要移动的距离，可能是（1，-1）

81
00:05:37,750 --> 00:05:41,600
我们构建了一个函数可以移动player，但是我们可以做的更好一点，

82
00:05:41,600 --> 00:05:49,550
我们前面说过类内可以包含函数，这意味我们可以移动Move函数到类内

83
00:05:49,550 --> 00:05:52,480
类内的函数称作method（方法）

84
00:05:52,480 --> 00:05:54,769
因此我可以回到我的代码中

85
00:05:54,769 --> 00:05:58,500
然后将Move函数移到类中

86
00:05:58,500 --> 00:06:00,899
然后继续，现在我们已经在类里面了

87
00:06:00,899 --> 00:06:08,250
所以现在我们访问这些变量时就不需要传player对象
因为我们已经在Player类内了

88
00:06:08,250 --> 00:06:11,925
如果我删除这些，还有这些

89
00:06:11,925 --> 00:06:17,069
现在的X,Y,还有Speed指的就是当前对象的变量

90
00:06:17,069 --> 00:06:23,629
现在我回到下面，就只用写player.move(),简化很多

91
00:06:23,819 --> 00:06:26,699
每个对象都拥有自己的move函数，

92
00:06:26,750 --> 00:06:31,750
当我们为特定的类调用Move函数时就是调用他自己的

93
00:06:31,750 --> 00:06:36,750
这和类外的Move函数没有什么不同

94
00:06:36,750 --> 00:06:40,449
但他确实让我们的代码看起来简洁了不少

95
00:06:40,449 --> 00:06:42,899
当你处理大量代码时，这会是一个巨大的优势

96
00:06:42,899 --> 00:06:49,000
因为你拥有的代码越多，就会越复杂，变得越难维护

97
00:06:49,000 --> 00:06:52,379
所以有这样的办法让代码变得简洁是很棒的一件事

98
00:06:52,379 --> 00:07:00,019
以上，本质上讲类就是能使我们能对变量进行组织，变成一个类型

99
00:07:00,019 --> 00:07:02,870
还为这些变量添加了函数，

100
00:07:02,870 --> 00:07:10,000
如果你再看一遍代码，我们真正做的就是在一个类类型里定义了三个变量

101
00:07:10,000 --> 00:07:13,949
还有一个函数用来操纵这些变量

102
00:07:13,949 --> 00:07:20,629
当然了，函数可以做任何事情，但重点是我们有数据和操作这些数据的函数

103
00:07:20,629 --> 00:07:22,449
这就是类的全部了

104
00:07:22,449 --> 00:07:31,180
我们将来会涉及更多关于类的用法，目前只是关于类的基础知识

105
00:07:31,180 --> 00:07:37,569
我们还可以用类做更多的事，接下来的几个视频还会介绍更多细节

106
00:07:37,569 --> 00:07:42,569
我希望你能记住，尽管类很有用，能使你的代码看起来简洁

107
00:07:42,569 --> 00:07:47,930
但类也不是万能的，能用类完成的同样也能不用类，

108
00:07:48,000 --> 00:07:52,730
而且类也没有提供什么特有的功能

109
00:07:52,730 --> 00:08:00,129
能用类完成的同样也能不用类，这就是为什么C这样的语言还会存在，并且挺好用

110
00:08:00,129 --> 00:08:03,550
他们没有类，我们仍然可以编写代码

111
00:08:03,550 --> 00:08:07,230
类的存在只是让程序员更轻松

112
00:08:07,230 --> 00:08:13,430
他只是糖衣语法让你更好的组织更好的维护代码，仅此而已

113
00:08:13,899 --> 00:08:23,769
如果你喜欢这个视频，请点赞，你也可以在Twitter和Instagram上关注我...

114
00:08:23,769 --> 00:08:24,699
再见

