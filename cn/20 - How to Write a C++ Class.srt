1
00:00:00,070 --> 00:00:04,080
Hey，大家好！我是Cherno，欢迎回到我的C++系列课程

2
00:00:04,080 --> 00:00:08,676
今天我们将用目前所学到的关于类的知识从头开始编写一个类

3
00:00:08,699 --> 00:00:12,500
今天我不会讲得太深入，也不会写一些非常复杂的类

4
00:00:12,519 --> 00:00:17,289
我们只编写一个基本的Log类，来演示到目前为止我们学过的一些基本特性

5
00:00:17,289 --> 00:00:21,949
在接下来的几集里，我们将继续学习这门课，慢慢地介绍一些新的概念。

6
00:00:21,949 --> 00:00:27,449
所以你会看到从一个类的基本版本到一个更高级版本的过程和区别

7
00:00:27,480 --> 00:00:30,519
高级版本可以做同样的事情，但可以被认为是更好的代码

8
00:00:30,550 --> 00:00:35,549
（广告时间）

9
00:00:35,579 --> 00:00:39,899
（amazon music）

10
00:00:39,950 --> 00:00:57,170
...

11
00:00:57,170 --> 00:00:59,350
好了，让我们来看下接下来要写的log类

12
00:00:59,350 --> 00:01:04,150
这个log类是做什么的? 这个log类是用来管理日志信息的一种方式

13
00:01:04,359 --> 00:01:08,750
也就是把我们想要的程序信息打印到控制台上。

14
00:01:08,750 --> 00:01:13,299
这一般在调试程序时很有用，在我们的程序应用中

15
00:01:13,299 --> 00:01:17,829
如果你想知道发生了什么，只需要把事物的状态打印到控制台就行了

16
00:01:17,900 --> 00:01:25,000
因为应用程序的控制台就像一个信息转储的地方，我们可以用它来显示发生了什么

17
00:01:25,150 --> 00:01:28,650
这也是几乎可以保证程序正确运行的方式

18
00:01:28,730 --> 00:01:35,129
在游戏应用中如果我们要显示一个图形或者其他东西，这有时候会出问题。

19
00:01:35,239 --> 00:01:40,719
比如说图形渲染系统出问题了，或者其他的问题，我们就没法得到这些信息了

20
00:01:40,799 --> 00:01:44,670
然而控制台是内置在操作系统的程序

21
00:01:44,709 --> 00:01:48,079
所以我们几乎可以保证它总是能正常工作的

22
00:01:48,099 --> 00:01:56,799
我非常喜欢用log类来举例子，因为它可以根据需求写的很简单，也同样可以很复杂。

23
00:01:56,890 --> 00:02:03,829
有些日志系统确实很复杂，几千行代码只是为了实现把信息打印到控制台的功能。

24
00:02:03,879 --> 00:02:09,629
但它对开发和调试很重要，所以在上面花时间是绝对值得的。

25
00:02:09,729 --> 00:02:12,379
日志系统不止可以把信息打印到控制台

26
00:02:12,379 --> 00:02:19,129
也可以打印不同的颜色，或者把日志输出到文件，网络等

27
00:02:19,129 --> 00:02:25,530
有很多事情可以做， 你可以用十行甚至一万行代码来实现你的log类

28
00:02:25,810 --> 00:02:30,300
这就是为什么log类是一个很好的例子

29
00:02:30,340 --> 00:02:32,930
好了，我们从一个很简单的log类开始

30
00:02:32,930 --> 00:02:36,219
它只实现了向控制台发送文本的功能

31
00:02:36,310 --> 00:02:42,949
而且可以控制我们发送给控制台日志信息的级别

32
00:02:43,030 --> 00:02:48,469
最开始我们有三个级别. 有 error, warning 和 message(或者叫trace.)

33
00:02:48,569 --> 00:02:52,129
简单来说，如果我们把日志级别设置为warning

34
00:02:52,129 --> 00:02:56,800
那么只有 warning 和 error 级别的日志信息能打印出来，trace(message) 级别的不行

35
00:02:57,000 --> 00:03:02,930
如果你只想看程序报了什么错或者有什么警告，这样设置是很有用的，不用看到一大堆无用的信息

36
00:03:03,129 --> 00:03:07,569
通过过滤发送和打印的内容这样可以让控制台很清爽

37
00:03:07,710 --> 00:03:09,900
让我们来看看他是什么样子

38
00:03:09,900 --> 00:03:14,000
首先第一步先创建一个log类

39
00:03:14,050 --> 00:03:15,449
...

40
00:03:15,449 --> 00:03:22,719
现在你先想一下log类是如何工作的 创建一个类或者设计一个api一个很好的方式是研究它的使用情况

41
00:03:22,830 --> 00:03:28,219
接下来进入main函数，开始编写我如何使用log类

42
00:03:28,219 --> 00:03:30,719
首先，实例化一个log类

43
00:03:30,789 --> 00:03:37,150
我可能要指定一个log级别作为他的实参，先跳过这一步

44
00:03:37,150 --> 00:03:44,949
肯定要设置一个log级别，所以要有一个SetLevel方法，参数为LogLevelWarning指warning级别

45
00:03:44,949 --> 00:03:51,400
这意味着只有警告(warning)或者错误(error)信息才会打印出来，跟踪(trace)信息不会

46
00:03:51,550 --> 00:03:57,099
然后我要打印一个warning信息，log.Warn("Hello!")...

47
00:03:57,150 --> 00:04:02,150
现在我知道我的log类需要哪些功能了，让我们回过头去实现它门。

48
00:04:02,219 --> 00:04:07,949
在这里我先实现所有的public方法，显示一个SetLevel函数

49
00:04:08,099 --> 00:04:11,719
用一个整数来代表log级别，这样比较简单

50
00:04:11,750 --> 00:04:14,930
这个函数会做一些事情，然后是Warn函数

51
00:04:14,930 --> 00:04:20,879
Warn函数有一个字符串指针， 是我们要打印的消息

52
00:04:20,930 --> 00:04:26,629
const char* 就是字符串的意思， 我会专门做一期关于C++中字符串的视频

53
00:04:26,629 --> 00:04:30,730
先不用想的太复杂，现在用const char*

54
00:04:30,730 --> 00:04:34,100
对我们的程序没什么影响

55
00:04:34,189 --> 00:04:37,649
现在代码有以下错误，虽然这些函数定义了

56
00:04:37,680 --> 00:04:41,600
但是 LogLevelWarning 是不存在的. 让我们声明log level 变量

57
00:04:41,699 --> 00:04:47,949
我们将创建一些私有变量成员，代表我们设置的log级别

58
00:04:47,980 --> 00:04:50,930
它是整数形(int)的, 变量名教 m_LogLevel

59
00:04:51,060 --> 00:04:58,050
这里我用了m前缀，一般表明这是一个私有的类成员变量

60
00:04:58,129 --> 00:05:03,129
当我在函数内部写代码时，我这样引用成员变量

61
00:05:03,240 --> 00:05:09,350
我就知道那些是成员变量，那些是局部变量

62
00:05:09,379 --> 00:05:15,569
这样的写法不是必须的，但是它对你保持代码整洁是很有帮助的。

63
00:05:15,600 --> 00:05:19,730
特别是当你处理大型代码或者复杂类库的时候

64
00:05:20,019 --> 00:05:24,019
这真的很有帮助，所以我建议你遵循这样的惯例

65
00:05:24,019 --> 00:05:29,629
这就是SetLevel函数的写法, 你可以看到它就是用一个参数赋值给我们的成员变量

66
00:05:29,649 --> 00:05:35,019
我们调用SetLevel函数并传入2， 它会把2赋值给我们的成员变量.

67
00:05:35,129 --> 00:05:38,980
让我们回到 LogLevelWarning, 开始设置这些整形参数.

68
00:05:39,000 --> 00:05:43,449
设置2为 trace 级别, 1代表 wanting, 0 代表 error.

69
00:05:43,449 --> 00:05:47,399
当然这会让代码很难读， 如果我这样写代码： SetLevel(1)

70
00:05:47,399 --> 00:05:53,600
那么1是什么？我不知道它是什么意思，只能靠记忆记住它的意思：1是 warning

71
00:05:53,600 --> 00:05:59,180
如果有人这样写代码，他们会发现很难理解1是什么意思

72
00:05:59,259 --> 00:06:04,129
因此我们创建一些变量，它们的值代表我们要表示的东西

73
00:06:04,180 --> 00:06:11,199
这种情况下它是LogLevelWarning. 我可以把他们设置为公有变量

74
00:06:11,279 --> 00:06:17,649
在这里你可以看到我用了两次public, 因为我要把这两部分分开来

75
00:06:17,649 --> 00:06:20,819
换句话说，public方法放在一部分

76
00:06:20,819 --> 00:06:26,199
public变量放在另一部分 public static 变量放在另一部分

77
00:06:26,269 --> 00:06:30,069
这只是我的代码风格，你不一定要和我保持一致，但这是一种推荐写法。

78
00:06:30,180 --> 00:06:35,879
这些都是常数， 我要写const int 然后 LogLevelWarning 设为1

79
00:06:35,949 --> 00:06:39,769
LogLevelError 设为 0

80
00:06:39,870 --> 00:06:45,519
LogLevelTrace或者叫LogLevelInfo 设为 2

81
00:06:45,550 --> 00:06:50,550
我们有三种log信息， 有errors, warnings 还有 messages.

82
00:06:50,610 --> 00:06:56,019
默认情况下日志级别设置为LogLevelInfo, 意味着所有的日志信息都要被打印。

83
00:06:56,180 --> 00:07:02,069
最后来写Warn函数, 我当然希望 Warn 函数能打印信息到控制台

84
00:07:02,069 --> 00:07:06,129
使用cout 输出这个 message

85
00:07:06,250 --> 00:07:10,269
另外一件事就是我要打印这条消息是什么类型的消息

86
00:07:10,300 --> 00:07:15,379
换句话说如果是 warning, 我可能要在消息的前面加上warning

87
00:07:15,449 --> 00:07:19,230
如果是info, 就在前面加上info

88
00:07:19,250 --> 00:07:23,750
因此，我想这样打印：先是 “[WARNING]:” 然后跟着message

89
00:07:23,879 --> 00:07:28,879
看起来不错 复制这段代码，创建一个error版本

90
00:07:28,879 --> 00:07:35,430
还有info版本, 函数名是info, 这里也是[INFO]

91
00:07:35,500 --> 00:07:40,500
然后是error版本，这就是我的error函数

92
00:07:40,500 --> 00:07:44,629
好了. 我们可以设置 level级别, 还有 Error, Warning 和 Info方法.

93
00:07:44,629 --> 00:07:49,480
然而，现在我们所有的消息都会被打印出来，因为我们没办法做到

94
00:07:49,569 --> 00:07:53,480
说“Hey, 如果 LogLevel是warning, 不要打印info级别的消息”

95
00:07:53,480 --> 00:07:57,399
我们可以添加if语句来解决

96
00:07:57,399 --> 00:08:05,449
(coding...)

97
00:08:05,680 --> 00:08:07,680
That is fine.

98
00:08:07,750 --> 00:08:11,350
我们知道这种情况下LogLevelError 设置为0,

99
00:08:11,350 --> 00:08:19,149
这意味着如果日志级别是0或者更高就会打印消息， 复制这些代码到Warn和Info

100
00:08:19,240 --> 00:08:24,399
当然，把这个改成LogLevelWarning, 这个改成LogLevelInfo.

101
00:08:24,480 --> 00:08:30,949
在这里如果我们传入LogLevelWarning, 也就是会把Log级别设为1.

102
00:08:31,019 --> 00:08:37,450
如果我们要打印info, 这里就是1和2做比较

103
00:08:37,519 --> 00:08:43,649
1 当然不比2大，所以这里的if条件是FALSE,这条消息也不会打印出来。

104
00:08:43,700 --> 00:08:50,149
我们还有一个错误是：LogLevelWarning没有定义，因为LogLevelWarning定义在类内部

105
00:08:50,250 --> 00:08:56,350
要解决这个问题，只要改成log.LogLevelWarning就好了. 我们把log级别设置为warning了

106
00:08:56,399 --> 00:09:00,080
按Ctrl+F7进行编译, 确保一切正常

107
00:09:00,080 --> 00:09:02,769
按F5运行代码

108
00:09:02,799 --> 00:09:07,649
好了，看吧 我们打印出了warning信息：[Warning]: hello

109
00:09:07,840 --> 00:09:10,330
我们试着打印Info("Hello!")

110
00:09:10,480 --> 00:09:15,480
还有Error("Hello!")

111
00:09:16,549 --> 00:09:21,600
我们打印了三种不同的日志消息，相同的内容，不同的日志级别

112
00:09:21,720 --> 00:09:27,379
你可以看到只有warning和error消息被打出来了，因为日志级别被设置为warning所以info消息没有被打印

113
00:09:27,519 --> 00:09:32,649
如果不设置日志级别，默认会设为info

114
00:09:32,779 --> 00:09:36,649
如果运行代码，三种消息都会被打印出来

115
00:09:36,649 --> 00:09:40,100
最后把日志级别设为error：log.LogLevelError

116
00:09:40,129 --> 00:09:45,850
按F5运行. 你看，只有error消息被打印出来

117
00:09:45,970 --> 00:09:49,879
好了，我们实现了所有目标，创建了一个非常非常简单的log类

118
00:09:49,899 --> 00:09:54,899
我想说，正常情况下我不是这么创建log类的，绝对不是啊~

119
00:09:55,019 --> 00:09:58,000
这是很糟糕的代码

120
00:09:58,049 --> 00:10:04,799
但是它很简单而且也很符合一个人编写log类的逻辑

121
00:10:05,000 --> 00:10:08,519
经验丰富的程序员不会这样写的

122
00:10:08,600 --> 00:10:12,980
很多看视频的人肯定在说这代码太糟糕了

123
00:10:12,980 --> 00:10:16,230
这不是一段好代码，但是它很简单

124
00:10:16,250 --> 00:10:20,169
如果你是一个新手，希望你能听懂这些

125
00:10:20,240 --> 00:10:27,269
这也给我一些很好的理由给你们展示怎样用一些不同的概念来改进这个类，以及这样写为什么是不好的

126
00:10:27,320 --> 00:10:31,830
在接下来的几个视频，我们要对C++的类做更深入的了解

127
00:10:31,879 --> 00:10:37,649
学习如何改进我们的代码，让它能达到专业生产级的水平

128
00:10:37,649 --> 00:10:41,830
无论如何, 感谢你观看这个视频, 希望你们喜欢这个视频，如果你喜欢的话，请点赞。

129
00:10:41,830 --> 00:10:45,230
或者你可以在Twitter和Instagram关注我

130
00:10:45,230 --> 00:10:50,879
如果您真的喜欢这些视频，可以在patreon支持我

131
00:10:51,019 --> 00:11:12,629
...

136
00:11:12,669 --> 00:11:15,000
Goodbye.

