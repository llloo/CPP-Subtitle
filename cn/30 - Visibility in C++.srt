1
00:00:00,000 --> 00:00:03,850
Hey 大家好，我是 Cherno，欢迎回到我的 C++ 系列

2
00:00:03,850 --> 00:00:07,075
今天我们来讨论C++中的可见性。

3
00:00:07,163 --> 00:00:17,149
可见性是面向对象中的概念，它是指一个类中的成员或者方法是否可见

4
00:00:17,317 --> 00:00:23,324
可见的意思就是谁能够访问它们，谁能够调用它们，还有谁能够使用它们

5
00:00:23,535 --> 00:00:26,175
在这里我要提醒你们的就是

6
00:00:26,176 --> 00:00:34,075
可见性并不会影响你程序的实际运行状况也不会对程序性能等方面有影响

7
00:00:34,282 --> 00:00:37,674
它只单纯的是语言层面的概念

8
00:00:37,674 --> 00:00:42,075
只是用来帮助你写出更好地代码，帮助你更好地组织代码

9
00:00:42,342 --> 00:00:43,299
就是这样

10
00:00:43,299 --> 00:00:49,250
在C++中有三个基础的可见修饰符(访问修饰符): private，protected，public

11
00:00:49,479 --> 00:00:53,649
在其他的编程语言中(Java或C#)中还会有其他的关键字

12
00:00:53,700 --> 00:00:58,649
比如在Java中你可以不使用访问修饰符，这就是default访问修饰符
(即默认，什么也不写）

13
00:00:58,924 --> 00:01:01,799
在C#中有个叫internal的访问修饰符

14
00:01:01,883 --> 00:01:05,674
在C++中我们只有三个访问修饰符: private，protected，public

15
00:01:05,891 --> 00:01:07,650
让我们来看看它们在类中是什么样子的

16
00:01:07,700 --> 00:01:14,299
如果我们在Entity类内像这样定义两个变量X和Y

17
00:01:14,400 --> 00:01:18,575
因为这是一个类，所以默认的可见性是private

18
00:01:18,650 --> 00:01:24,625
这意味着这里的代码和我显式地加上private是一样的

19
00:01:24,650 --> 00:01:29,424
如果我把它改成struct, 那么它的默认可见性就是public

20
00:01:29,562 --> 00:01:35,075
虽然我没有在这里指定可见性，但这并不是说它就没有可见性

21
00:01:35,232 --> 00:01:39,474
它其实是有的，如果它是一个struct这里会隐式地给它一个public

22
00:01:39,510 --> 00:01:40,974
或者如果它是一个class，那默认就是private的

23
00:01:41,085 --> 00:01:44,674
如果你想了解更多关于struct和class的区别的话

24
00:01:44,795 --> 00:01:47,650
去之前的视频找找看，我之前有个视频说过这些(p19)

25
00:01:47,674 --> 00:01:49,224
...

26
00:01:49,431 --> 00:01:51,825
让我们回到这里加上private

27
00:01:51,870 --> 00:01:52,750
private是什么意思？

28
00:01:52,877 --> 00:01:57,150
private的意思就是只有这个Entity类可以访问到这些变量

29
00:01:57,150 --> 00:01:59,325
也就是可以读取和更改它们

30
00:01:59,507 --> 00:02:05,375
其实only要加星号，因为C++中还有个叫友元(friend)的东西

31
00:02:05,600 --> 00:02:14,724
friend是一个关键字，它可以把其他类或者函数标记为当前类的友元(friend)

32
00:02:14,724 --> 00:02:19,250
友元的意思就是可以允许你访问这个类的私有成员

33
00:02:19,504 --> 00:02:22,750
以后我们会有一整节关于友元的视频，所以现在先不要着急

34
00:02:22,973 --> 00:02:30,449
所以如果我在这里定义一个构造函数，我可以把X赋值为0

35
00:02:30,750 --> 00:02:34,824
然后如果我在main函数里实例化Entity

36
00:02:35,093 --> 00:02:42,800
因为现在是在class的作用域外，所以不能做e.X=2等类似操作，因为它是私有的

37
00:02:43,002 --> 00:02:46,750
如果我们有一个Entity的子类Player

38
00:02:46,959 --> 00:02:52,500
player里也有一个构造函数，在这里我也不能访问到X

39
00:02:52,517 --> 00:02:59,349
因为它是私有的，就是说只有Entity类或者它的友元才能访问到这些变量

40
00:02:59,580 --> 00:03:01,000
这对函数来说也是一样的

41
00:03:01,118 --> 00:03:02,849
如果我在这里添加一个Print函数

42
00:03:03,060 --> 00:03:09,699
同样地，我可以在Entity内部像这样调用这个函数，这没啥问题。

43
00:03:09,869 --> 00:03:19,750
但是如果我在它的子类或者其他地方，我是没办法调用的，还是因为这个函数是私有的

44
00:03:19,824 --> 00:03:21,875
好了，下一步我们要说protected

45
00:03:21,999 --> 00:03:29,550
说下一步是因为protected的可见性比private更高，但要低于public

46
00:03:29,625 --> 00:03:38,875
protected的意思是这个类以及它的所有派生类都可以访问到这些成员

47
00:03:39,000 --> 00:03:43,525
所以你可以看到在Player内部我现在可以给X赋值并且调用Print函数

48
00:03:43,525 --> 00:03:45,275
因为Player是Entity的子类

49
00:03:45,386 --> 00:03:48,425
但是我还是不能在main函数里这么做

50
00:03:48,638 --> 00:03:55,699
因为它是一个完全不同的函数，它在类的外面，而且也不是子类的一部分

51
00:03:55,824 --> 00:04:00,824
最后是public, public的意思当然就是任何人都可以访问它

52
00:04:00,849 --> 00:04:08,550
我可以在Entity类中访问，可以在Player中访问，也可以在main函数中访问

53
00:04:08,750 --> 00:04:10,575
好了，这些就是可见性的简短内容

54
00:04:10,750 --> 00:04:14,150
TL;DR TL;DW (Too long; Didn't read（太长，所以没有看）)

55
00:04:14,281 --> 00:04:16,750
简单来说这些就是C++中的可见性

56
00:04:16,850 --> 00:04:21,550
现在我们来讨论为什么要用可见性？用在哪里？

57
00:04:21,550 --> 00:04:25,824
为什么不把一切都设置为public呢？这是怎么回事呢？

58
00:04:25,824 --> 00:04:33,899
首先，对开发者来说一切都设置为public绝对是个很糟糕的想法

59
00:04:34,108 --> 00:04:38,875
这是代码风格问题，决定我们如何写好代码

60
00:04:38,875 --> 00:04:45,824
可见性让人更容易维护，理解和扩展代码

61
00:04:45,949 --> 00:04:51,824
这和程序性能无关，没有可见性也不会产生不同的代码

62
00:04:52,049 --> 00:04:57,550
可见性并不是CPU需要理解的东西，也不是你的电脑要知道的东西

63
00:04:57,750 --> 00:05:02,100
它们只是人们发明出来帮助自己和其他人的

64
00:05:02,300 --> 00:05:05,774
当我说帮助其他人时，我的意思是

65
00:05:06,018 --> 00:05:11,425
如果你把什么标记为private，本质上就是在告诉其他人包括你自己

66
00:05:11,524 --> 00:05:14,649
“Hey, 你不应该从其他类来访问这个”

67
00:05:14,889 --> 00:05:21,225
很简单对吧！你只能从这个类内部访问到这个

68
00:05:21,432 --> 00:05:26,625
这意味着如果我之前从来没用过这个类，然后我想看它包含了什么

69
00:05:26,776 --> 00:05:34,774
我应该知道，我只能接触到这个类public部分，这就是我应该使用这个类的方式

70
00:05:34,800 --> 00:05:40,074
这个类的正确用法就是去调用共有的方法

71
00:05:40,225 --> 00:05:46,250
如果我正在用一个类，这是API的一部分，我看着它
然后我找到了我想调用的私有函数

72
00:05:46,350 --> 00:05:49,050
我知道我不应该调用那个私有函数

73
00:05:49,247 --> 00:05:54,824
类的作者可能提供了一些其他方法来实现相同目的

74
00:05:55,047 --> 00:06:01,675
因为如果我调用那个私有函数，也许并不能得到期望的结果或者会破坏其他东西

75
00:06:01,824 --> 00:06:06,149
代码就像一个很复杂的网

76
00:06:06,402 --> 00:06:15,125
指定可见性我们可以确保别人不会调用他们不应该的代码，造成一些破坏

77
00:06:15,300 --> 00:06:20,649
一个很好的例子就是假如有个UI界面,我们想要移动它上面按钮的位置

78
00:06:20,750 --> 00:06:25,750
如果我只是访问按钮位置的X和Y变量，然后改变它们的值

79
00:06:25,925 --> 00:06:27,625
这个按钮实际上可能并不会移动

80
00:06:27,625 --> 00:06:30,225
我的意思是X和Y的位置可能不同(?)

81
00:06:30,300 --> 00:06:33,949
想让这个按钮移动，我们可能需要去刷新界面

82
00:06:34,229 --> 00:06:39,949
如果我只是把X设置为5或者其他，X变量是被改变了

83
00:06:40,172 --> 00:06:46,175
但是显示界面并不知道要从内存获取新的值，它还使用那个旧的值

84
00:06:46,500 --> 00:06:50,550
但是如果我在哪个类里创建一个叫SetPosition或SetX的方法

85
00:06:50,699 --> 00:06:53,824
我可以做的不仅仅只是给X赋值

86
00:06:53,824 --> 00:06:58,824
我还可以调用另一个Refresh的方法或者相似的方法做它需要的事

87
00:06:58,894 --> 00:07:05,899
我可以把那个X变量设置为private, 那个SetPosition或SetX方法为public

88
00:07:06,074 --> 00:07:09,975
然后很显然任何读到这段代码或者想要用这段代码的人可以明白这些：

89
00:07:09,975 --> 00:07:16,125
“ok，我不应该直接给X赋值，我应该调用SetX或SetPosition方法”

90
00:07:16,381 --> 00:07:22,050
这个例子说明了为什么要用可见性来帮助其他开发者和你自己

91
00:07:22,312 --> 00:07:25,750
你很容易忘记你之前写的代码是什么意思

92
00:07:26,042 --> 00:07:31,750
所以不要认为你从来不参与团队开发就不需要使用代码可见性，然后把一切都设置为public

93
00:07:31,925 --> 00:07:39,225
No! 如果你去看你几个月或者几周甚至几天前的代码，你可能都会忘记它们是用来干啥的了。

94
00:07:39,495 --> 00:07:49,925
你应该使用可见性这样简单的东西，根据可见性这样你可能就会明白你实际上想要去访问和使用这个类的方式

95
00:07:50,074 --> 00:07:55,074
在网上有很多对可见性的争论，我不想参与这些争论

96
00:07:55,350 --> 00:07:59,500
哪里应该用private, 哪里应该用public,我有自己的想法和观点

97
00:07:59,776 --> 00:08:06,475
一些人总是把所有变量设为private, 然后设置公有方法getter和setter

98
00:08:06,475 --> 00:08:09,274
我强烈反对这种做法，尤其是总是这么做

99
00:08:09,577 --> 00:08:13,925
因为编程里没有什么是永远不变的

100
00:08:14,196 --> 00:08:20,149
几乎总会有些事你需要用特定的方式来处理

101
00:08:20,475 --> 00:08:22,925
我要把这些争论留到以后的视频中

102
00:08:23,050 --> 00:08:28,050
让我知道你是怎么看可见性的，为什么用，用在哪里...

103
00:08:28,250 --> 00:08:29,625
写在下面的评论区

104
00:08:29,850 --> 00:08:32,250
下次见 GoodBye!

