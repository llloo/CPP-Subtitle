1
00:00:00,000 --> 00:00:03,825
Hey 大家好 我是cherno，欢迎回到我的c++系列

2
00:00:03,850 --> 00:00:07,150
今天我们将要学到编译器是怎么工作的

3
00:00:07,150 --> 00:00:12,029
我们退后一步，想一下大的蓝图是什么

4
00:00:12,029 --> 00:00:14,160
c++编译器到底负责什么

5
00:00:14,160 --> 00:00:19,199
我们用文本来写c++，就是文本(text)而已

6
00:00:19,399 --> 00:00:25,000
我们需要某种方法将文本转化成应用，从而在计算机运行

7
00:00:25,070 --> 00:00:32,229
从text到可执行binary，基本上有两个主要操作需要发生

8
00:00:32,350 --> 00:00:35,270
一个是compiling(编译)，一个是linking（链接）

9
00:00:35,450 --> 00:00:43,729
本视频我们只讨论compiling，我另有一个专门的视频讲linking，你可能也需要去看看，连接在下方描述里

10
00:00:44,049 --> 00:00:53,420
所以，c++编译器唯一要做的就是把文本变为中继格式——obj

11
00:00:53,630 --> 00:00:57,179
然后obj们会传入linker，linker会做所有linking的事

12
00:00:57,179 --> 00:01:02,979
总之，我们在谈compiling，在compiler产出这些obj时，其实它有做好几件事

13
00:01:02,979 --> 00:01:09,849
首先，它需要pre-process（预处理）我们的代码，也就是所有preprocessor语句会在那时被评估

14
00:01:09,879 --> 00:01:14,450
被预处理后，我们会进入tokenizing(标记解释)和parsing（解析）阶段

15
00:01:14,549 --> 00:01:21,650
基本就是把这"英文"C++文本处理成编译器能懂和处理的语言

16
00:01:21,700 --> 00:01:29,549
基本上结果就是创建某种叫做abstract syntax tree（抽象语法树），也就是我们代码的表达，但是是以抽象语法树的形式

17
00:01:29,549 --> 00:01:37,530
说到底编译器的工作也就是把代码转化成要么是constant data（常数资料），要么是instructions（指令）

18
00:01:37,780 --> 00:01:47,719
当编译器创建了这颗抽象语法树后，就可以开始产生代码了，这个代码是真正的cpu会执行的机器码

19
00:01:47,829 --> 00:01:53,000
同时，我们也会得到一些其他数据，比如某个地方存储着我们所有的constant variables(常数变量)

20
00:01:53,000 --> 00:02:01,099
这基本就是编译器的工作了，并不非常复杂，当然你的代码越来越复杂它也越来越复杂

21
00:02:01,450 --> 00:02:11,300
但这就是它的要点了，我们将继续深究，看看每个阶段具体都在做什么，好让你们弄懂

22
00:02:11,300 --> 00:02:17,400
这里，我们这个简单的hello world程序，之前在关于c++工作原理的视频写的

23
00:02:17,530 --> 00:02:24,650
我们有这个main函数，调用了被定义在log.cpp里的log函数，它仅仅打印我们的message到屏幕

24
00:02:24,849 --> 00:02:28,050
这就是我们的简单程序——打印hello world了

25
00:02:28,129 --> 00:02:32,469
如果我们进入output目录，debug下你可以看到它生成了一个exe

26
00:02:32,469 --> 00:02:38,650
回到项目目录，debug下它生成了main.obj,log.obj，

27
00:02:38,900 --> 00:02:44,280
也就是编译器给每个cpp，也就是每个translation unit，生成了obj

28
00:02:44,379 --> 00:02:57,199
项目里的每个cpp，都会被编译器编译成一个obj
这些cpp文件也叫translation unity（编译单元）

29
00:02:57,199 --> 00:03:04,280
本质上你得意识到c++根本不在乎文件，文件这种东西在c++里不存在

30
00:03:04,280 --> 00:03:10,500
举例说，java里，你的class(类)名必须跟文件名相同，而你的文件夹结构也得跟package一样

31
00:03:10,569 --> 00:03:15,900
之所以如此是因为java需要某些文件存在，c++完全不是这回事

32
00:03:15,969 --> 00:03:22,150
没有文件这种东西，文件只是用来给编译器提供源码的某种方法

33
00:03:22,250 --> 00:03:27,699
你需要告诉编译器文件类型和编译器该如何处理它

34
00:03:27,750 --> 00:03:37,530
当然，你建个.cpp文件，编译器就会把它当c++文件，同样的，如果我建个.c文件或者.h

35
00:03:37,650 --> 00:03:44,250
它会把它.c当c file，而非c++文件.h当header file

36
00:03:44,360 --> 00:03:47,819
这些只是默认的既成习惯，你可以改变它们

37
00:03:47,969 --> 00:03:52,000
这只是说如果你不告诉编译器怎么处理，编译器就会这么处理它们

38
00:03:52,150 --> 00:03:56,219
我可以去新建个.cherno文件让编译器去编译，完全没问题

39
00:03:56,379 --> 00:04:01,780
只要我告诉编译器这是个c++文件，请按c++编译

40
00:04:02,150 --> 00:04:07,319
你只要记住，文件不代表任何东西，记住哈，很重要

41
00:04:07,319 --> 00:04:13,569
话说回来，我们传给编译器的每个c++文件，我们告诉它这是c++，请按c++编译

42
00:04:13,569 --> 00:04:18,250
它就会把它当成一个translation unit，然后translation unit会得到一个obj

43
00:04:18,269 --> 00:04:23,649
在cpp文件include其他cpp有时候其实是很常见的作法

44
00:04:23,649 --> 00:04:27,449
基本上就是创建一个大的cpp文件，里面有很多cpp文件

45
00:04:27,519 --> 00:04:34,850
然后你只编译那一个cpp文件，也就是只有一个translation unit，也就只有一个obj

46
00:04:34,930 --> 00:04:40,980
这也就是为啥会有这两个术语，一个是translation unit，一个是cpp文件

47
00:04:41,050 --> 00:04:44,600
因为一个cpp不一定等于一个translation unit

48
00:04:44,750 --> 00:04:48,879
但如果你的项目里都是独立的cpp文件，从来不互相include的话

49
00:04:48,980 --> 00:04:54,930
那每个cpp就是一个translation unit，每个也都会产生一个obj文件

50
00:04:55,129 --> 00:04:59,269
这两个其实挺大的，你看一个是30kb一个是46kb

51
00:04:59,379 --> 00:05:03,600
之所以如此是因为我们include了iostream，它里面有相当多东西

52
00:05:03,680 --> 00:05:09,480
这就是为啥我们的文件这么大了，它们其实很复杂，所以在我们去看它们里面到底有啥之前

53
00:05:09,600 --> 00:05:19,199
我们创建一个比较简单点的，我现在右击source file，选add new item->cpp，取名math.cpp

54
00:05:19,300 --> 00:05:23,930
这里我们就写个简单的乘法函数，就是两数相乘

55
00:05:23,980 --> 00:05:28,769
我不打算include任何东西，就是一个简单的函数

56
00:05:28,800 --> 00:05:34,725
它会返回一个整数，函数名叫multiply，有两个参数int a和b

57
00:05:35,524 --> 00:05:44,689
然后新建一个叫result的变量，存放a乘以b的结果，然后返回这个结果，很简单

58
00:05:44,689 --> 00:05:48,980
我们按control+F7来build该文件，你看这里，build好了

59
00:05:49,069 --> 00:05:54,769
实际上我要把vs的字体放大一点，你们好看见，现在你可以看到output窗口了

60
00:05:54,829 --> 00:06:00,350
如果我们回到output目录，你会看到我们有了这个math.obj，只有4kb

61
00:06:00,379 --> 00:06:06,610
在我们查看这个文件到底有什么之前，我们来讲一下之前提到的编译第一阶段

62
00:06:06,610 --> 00:06:13,930
preprocessing，在这期间，编译器就是检查所有pre-processing语句并评估

63
00:06:14,149 --> 00:06:18,230
常见的有include, define, if和ifdef

64
00:06:18,230 --> 00:06:22,569
它们同样也是pragma语句，就是告诉编译器具体要做什么，不过今后视频再说

65
00:06:22,699 --> 00:06:28,399
那我们来看看我们这边最常见的preprocessor语句
#include，到底是如何工作的

66
00:06:28,480 --> 00:06:33,199
#include其实非常简单，你只要指定你要include哪个文件

67
00:06:33,199 --> 00:06:38,949
然后preprocessor会打开该文件，读取所有内容
然后粘贴进你写include的那个文档

68
00:06:38,949 --> 00:06:44,430
这就是全部了，非常非常简单，现在我将证明它有多简单

69
00:06:44,519 --> 00:06:51,949
回到这里，我来创建一个header文档，右击，add，new item, header file,我们命名它EndBrace，添加

70
00:06:52,100 --> 00:07:02,129
我们删除它里面的内容，然后就打一个 "}"（closing curly brace)，仅此而已

71
00:07:02,180 --> 00:07:08,629
回到math.cpp，你可以看到我们为Multiply函数写了一个"}"

72
00:07:08,629 --> 00:07:11,800
我们把它删掉，如果我们现在按ctrl+F7编译

73
00:07:11,899 --> 00:07:17,800
编译器会提示左大括号(left curly brace)在文件的最后没有对应的括号

74
00:07:17,800 --> 00:07:24,500
我们就不像正常人一样更正它加个括号，而是去include我们的EndBrace.h

75
00:07:24,500 --> 00:07:31,899
输入#include "EndBrace.h"，就行了，按ctrl+F7来编译

76
00:07:32,000 --> 00:07:37,939
成功了，当然会成功了，因为编译器所做的就是打开这个文档

77
00:07:37,939 --> 00:07:44,399
把里面的所有内容copy到这，仅此而已

78
00:07:44,399 --> 00:07:49,319
header文件解决了，你现在应该完全明白了如何应用它了

79
00:07:49,319 --> 00:07:56,319
其实有办法让编译器输出一个文档，里面包含所有这些preprocessor评估的结果

80
00:07:56,319 --> 00:08:01,730
如果我们恢复include "endbrace.h"，然后右击项目，点properties

81
00:08:01,730 --> 00:08:07,899
在C++底下，选Preprocessor，将preprocessor to a file改成yes

82
00:08:07,899 --> 00:08:12,350
确保你改的是你目前所应用的configuration和platform，以免改动不生效

83
00:08:12,350 --> 00:08:16,550
点ok，然后ctrl+F7重新build

84
00:08:16,550 --> 00:08:23,240
打开output目录，你可以看到这个新的".i"文档，也就是预处理过的c++代码

85
00:08:23,240 --> 00:08:26,050
在文本编辑器里打开它，看看里面有什么

86
00:08:26,100 --> 00:08:28,879
ok，可以看到preprocessor到底生产了啥

87
00:08:28,879 --> 00:08:37,769
我们源码里有这句 #include EndBrace.h
而preprocessor代码里只是将文件里的内容“}”插进来了

88
00:08:37,919 --> 00:08:43,250
挺简单的东西，我们来添加更多的preprocessor语句，来看看它都做什么

89
00:08:43,379 --> 00:08:48,090
回到文件，我先恢复括号，因为看着那个include有点烦

90
00:08:48,090 --> 00:08:54,169
在这上面，我要define一些东西，我们将define INTEGER 作为int

91
00:08:54,200 --> 00:08:57,730
永远别问我为什么要这么做，这只是个例子

92
00:08:57,830 --> 00:09:03,149
define这个预处理语句就是会去搜索这个词，然后替换成后面的东西

93
00:09:03,250 --> 00:09:14,450
所以我把int改成Integer，这里也一样，按ctrl+F7，回到这个文件，看发生了什么

94
00:09:14,450 --> 00:09:22,080
看起来一如平常，如果我们在这干点蠢事，比如说改成cherno，按ctrlF7

95
00:09:22,139 --> 00:09:26,330
回到文件，它上面写着cherno multiply和cherno result

96
00:09:26,330 --> 00:09:34,100
挺酷的，我们继续玩一玩，我们恢复int，删掉define

97
00:09:34,100 --> 00:09:43,230
相反的，我要用一个叫if的东西，if预处理语句可以让我们依据特定条件包含或者剔除代码

98
00:09:43,299 --> 00:09:52,980
在这里写if 1，也就是true，后面加#endif，ctrl+F7，回到预处理过的文件

99
00:09:52,980 --> 00:09:59,200
可以看到跟之前没有if语句一模一样，如果回到这边改成if 0

100
00:09:59,299 --> 00:10:06,100
vs会将我们的代码变成灰色，也就是禁用状态，按ctrl+F7再来看.i文件，里面没有代码

101
00:10:06,169 --> 00:10:10,350
这是另一个关于预处理语句的好例子。最后一个，来看看include

102
00:10:10,350 --> 00:10:18,769
我们删掉if 0，然后写include iostream，巨大巨大的iostream

103
00:10:18,990 --> 00:10:28,519
按ctrl+F7，回到这边，wow，看看它，我们这里有50,623行

104
00:10:28,519 --> 00:10:33,850
我们的函数在最底下，看，这么多都是include iostream干的

105
00:10:33,850 --> 00:10:39,779
当然了，iostream也会include其他文件，就跟从山上往下滚雪球一样

106
00:10:39,779 --> 00:10:45,090
你现在可以知道为什么那些obj那么大了，因为include了iostream，那是相当多的代码

107
00:10:45,090 --> 00:10:53,200
ok，好了， 这就是preprocessor了，当它结束后，我们就可以将c++代码编译成机器码了

108
00:10:53,200 --> 00:10:57,480
如果我们回到项目，我们先删掉这句include，因为我们不需要

109
00:10:57,480 --> 00:11:01,269
按ctrl+F7,你会看到preprocessor文件回到正常了

110
00:11:01,269 --> 00:11:06,600
实际上，我要去hello world项目，点properties，禁用preprocessor to a file

111
00:11:06,600 --> 00:11:12,019
如果你看一眼preprocessor to a file会做什么，会发现它其实就不产生obj了

112
00:11:12,019 --> 00:11:18,509
所以我们得禁用它，从而build我们的项目，点ok，按ctrl+F7build cpp文件

113
00:11:18,509 --> 00:11:23,100
你可以看到我们得到了更新后的math.obj

114
00:11:23,100 --> 00:11:26,100
我们来看看obj文件里到底有什么

115
00:11:26,169 --> 00:11:30,840
如果我们用文本编辑器打开它，会发现是二进制，看不出名堂

116
00:11:30,840 --> 00:11:37,259
但其中的一部分就是我们这个multiply函数在被调用时，cpu会运行的机器码

117
00:11:37,259 --> 00:11:43,850
由于这是二进制，而且完全不可读，我们来将它转换成一种稍微可读一点的格式

118
00:11:43,850 --> 00:11:47,100
有几种方法可以实现，但我就打算用vs

119
00:11:47,100 --> 00:11:51,450
右击hello world，点properties，在c/c++下，output files

120
00:11:51,450 --> 00:11:58,379
我将assembla output设置为assembly-only listing，点ok，按ctrl+F7

121
00:11:58,379 --> 00:12:02,500
在output目录下，你应该可以看到一个math.asm文件

122
00:12:02,519 --> 00:12:08,700
我们用一个文本编辑器打开它，这基本就是刚才那个obj所包含内容的一个可读版本

123
00:12:08,700 --> 00:12:15,100
如果我们下拉到这里，会看到这个叫multiply的函数，然后有一堆汇编指令

124
00:12:15,100 --> 00:12:18,919
这些是我们运行函数时cpu会执行的真正指令

125
00:12:18,919 --> 00:12:24,169
我目前不打算细讲所有这些汇编代码，也许之后会出一个视频讲

126
00:12:24,169 --> 00:12:28,669
但如果你看这边，我们的乘法运算其实发生在这里

127
00:12:28,669 --> 00:12:37,919
基本上就是，我们载入变量a到eax寄存器（register），然后在b和a上执行一个imul指令也就是乘法指令

128
00:12:38,080 --> 00:12:43,000
然后把结果存放在一个叫result的变量，并把它move回eax并返回它

129
00:12:43,000 --> 00:12:50,769
之所以有两次move是因为我其实有创造一个叫result的变量然后再返回它，而非直接返回a * b

130
00:12:50,950 --> 00:12:57,019
这就是为啥先会把eax move到result，然后又把result move回eax

131
00:12:57,250 --> 00:13:03,169
而这是完全不必要的，这是另一个非常好的例子来显示如果你设置编译器不要优化，那么你将获得运行缓慢的代码

132
00:13:03,360 --> 00:13:05,840
因为它在做这种毫无道理的事情

133
00:13:05,840 --> 00:13:11,629
如果我回到代码把这个result变量删掉，而直接返回a*b，然后编译

134
00:13:11,690 --> 00:13:18,649
你会看到汇编码有点不一样了，因为我们只是在b和eax上做一个imul而已

135
00:13:18,649 --> 00:13:21,299
eax其实会存放我们要返回的值

136
00:13:21,399 --> 00:13:25,269
现在，所有这些看起来像是很多代码，这是因为我们在debug环境下编译

137
00:13:25,399 --> 00:13:32,649
而debug是不会做任何优化的，而且会有很多额外的东西，以确保我们的代码尽可能冗长以及尽可能易于debug

138
00:13:32,649 --> 00:13:41,179
如果我们回到项目，右击->properties，来optimization这里，在debug配置下

139
00:13:41,179 --> 00:13:46,269
选择maximize speed，如果我们现在再来编译，会得到一个错误~

140
00:13:46,480 --> 00:13:53,149
因为可以看到O2和RTC其实是不兼容的，所以我们得回到这里，进入code generation

141
00:13:53,149 --> 00:13:58,230
确保basic runtime checks设置为default，也就是不会运行行时检查(runtime checks)

142
00:13:58,299 --> 00:14:01,549
其实就是编译器会插入的一些代码来帮助我们debugging

143
00:14:01,549 --> 00:14:06,350
按ctrl+F7，再来看汇编文件，wow，看起来小了很多

144
00:14:06,419 --> 00:14:11,600
我们基本上就是把变量载入一个寄存器，然后做乘法，仅此而已

145
00:14:11,769 --> 00:14:18,600
挺简单的东西，你现在应该对编译器优化有个大概的概念了

146
00:14:18,649 --> 00:14:22,009
这只是个简单的例子，我们来看看稍微高级点的

147
00:14:22,009 --> 00:14:29,629
我们来个不一样的例子，在这里我们不接受任何参数，但我决定写比如说5*2

148
00:14:29,629 --> 00:14:36,899
保存一下，然后去properties确认我禁用了优化，再次编译并查看文件

149
00:14:37,100 --> 00:14:45,700
可以看到它所做的也很简单，只是move 10到eax寄存器，也就是会存放返回值的寄存器

150
00:14:45,769 --> 00:14:51,519
再看看我们的代码，就是直接把5*2简化成了10

151
00:14:51,649 --> 00:14:59,350
因为没有必要对5*2两个常数去在运行时计算，这就是所谓的constant folding(常量折叠)

152
00:14:59,600 --> 00:15:03,350
也就是任何常量都可以在编译时计算出来

153
00:15:03,519 --> 00:15:06,730
让我们添加一个函数，让事情变得更有意思

154
00:15:06,799 --> 00:15:12,289
比如，我将写一个log函数，它会log一条信息

155
00:15:12,289 --> 00:15:19,080
当然我没打算真的log任何东西，因为那样还得include iostream，那会极大复杂化本例子

156
00:15:19,080 --> 00:15:25,549
我就让它返回这条传进来的信息，在multiply里，调用log

157
00:15:25,549 --> 00:15:37,149
这里改回a, b，返回a*b,按ctrl+F7,ok，来看看编译器生成了什么

158
00:15:37,149 --> 00:15:44,340
往下拉一些，可以看到这个log函数，并没有真的做什么，只是返回message

159
00:15:44,340 --> 00:15:49,769
可以看到它在把message指针move到eax，也就是我们讲过到返回寄存器

160
00:15:49,860 --> 00:15:53,519
这是log函数，往上翻一点，可以看到multiply函数

161
00:15:53,600 --> 00:16:03,500
这里主要就是在我们做乘法之前call（调用) log

162
00:16:03,750 --> 00:16:09,669
你可能会好奇为什么这个log函数会被装饰成带有随机字符和@符号的样子

163
00:16:09,669 --> 00:16:14,019
这其实是函数签名，它需要独一无二的定义你的函数

164
00:16:14,019 --> 00:16:20,750
我们会在linking视频中更多的讲它，但根本上，当我们有多个obj，我们的函数会在多个obj中被定义

165
00:16:20,750 --> 00:16:26,700
linker会负责将它们联系起来，它怎么做呢，就是会查找这个函数签名

166
00:16:26,750 --> 00:16:30,080
你现在要知道的就是我们在调用这个log函数

167
00:16:30,169 --> 00:16:34,250
当你调用函数时，编译器就会生成一个call指令

168
00:16:34,379 --> 00:16:43,250
我们这种情况，可能有点蠢，我们都没存放返回值，基本上会被优化很多

169
00:16:43,379 --> 00:16:53,049
如果我们回到这打开优化到最大速度，编译，你会看到它完全消失了

170
00:16:53,149 --> 00:16:57,980
是的，编译器看它什么也没做，就决定移除这段代码

171
00:16:58,320 --> 00:17:01,000
但现在你应该基本上了解了编译器是怎么工作的了

172
00:17:01,225 --> 00:17:07,099
它根据我们的源代码文件(source file)生成包含机器码和我们定义的常量数据的二机制文件(object file)

173
00:17:07,099 --> 00:17:08,874
大致过程就是这样

174
00:17:08,874 --> 00:17:14,974
有了这些object文件之后，我们把这些文件链接到一个包含所有我们最终要执行的机器码的可执行文件

175
00:17:14,974 --> 00:17:17,299
这就是我们如何用C++编写一个程序的过程

176
00:17:17,299 --> 00:17:17,799
很简单吧！

177
00:17:17,799 --> 00:17:21,125
一定要看我接下来的视频，主要内容是讲链接器如何工作

178
00:17:21,125 --> 00:17:24,349
除此之外，希望你会喜欢这个视频和学习到新的知识

179
00:17:24,424 --> 00:17:28,200
现在你应该对编译器怎样编译有了基础的了解

180
00:17:28,200 --> 00:17:32,974
这对调试代码和我们接下来学习的进阶内容是很重要的

181
00:17:32,974 --> 00:17:37,974
...

