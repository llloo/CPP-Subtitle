1
00:00:00,000 --> 00:00:03,450
Hey 大家好，我是Cherno，欢迎回到我的 C++ 系列

2
00:00:03,450 --> 00:00:08,130
我在一个看着像酒店的奇怪地方...

3
00:00:08,130 --> 00:00:09,630
我们今天来讨论在 class 或者 struct 内部的 static

4
00:00:09,630 --> 00:00:18,809
上次我们讨论了在 class 或者 struct 外部的 static 关键字的含义

5
00:00:18,809 --> 00:00:23,460
那个视频在p21...

6
00:00:23,460 --> 00:00:28,620
好了，现在我们来讨论下在 class 或者 struct 内部的 static 是什么意思

7
00:00:28,620 --> 00:00:30,179
几乎在所有的面向对象的编程语言中

8
00:00:30,179 --> 00:00:33,030
class 内部的 static 代表一个特定的东西

9
00:00:33,030 --> 00:00:34,649
如果你在类内定义一个 static 变量

10
00:00:34,649 --> 00:00:40,740
这意味着这个类的所有实例中，这个变量只有一个实例

11
00:00:40,740 --> 00:00:43,079
如果我新建一个叫 Entity 的类

12
00:00:43,079 --> 00:00:45,689
然后我不断地创建这个 Entity 类的实例

13
00:00:45,689 --> 00:00:47,399
但是那个 static 变量仍然只会有一个

14
00:00:47,399 --> 00:00:56,039
这意味着如果一个实例改变了这个 static 变量

15
00:00:56,039 --> 00:00:57,899
这个改变会体现在所有的类实例中

16
00:00:57,899 --> 00:00:59,700
因为这个变量只有一个

17
00:00:59,700 --> 00:01:01,200
即使我创建了很多个类的实例

18
00:01:01,200 --> 00:01:03,030
正因为这样

19
00:01:03,030 --> 00:01:06,810
通过类实例来引用静态变量是没意义的

20
00:01:06,810 --> 00:01:11,430
因为这就像是这个类的全局实例

21
00:01:11,430 --> 00:01:13,500
静态方法也是一样的

22
00:01:13,500 --> 00:01:16,260
静态方法不能访问类的实例

23
00:01:16,260 --> 00:01:18,780
静态方法不通过类的实例就可以调用(使用类名加范围解析运算符 :: 就可以访问)

24
00:01:20,609 --> 00:01:25,890
在静态方法的内部也无法访问到类的实例

25
00:01:25,890 --> 00:01:27,689
你不能写引用类的实例的代码

26
00:01:27,689 --> 00:01:30,930
让我们来看一些例子

27
00:01:30,930 --> 00:01:32,909
在这里我们新建一个叫 Entity 的struce

28
00:01:32,909 --> 00:01:34,680
然后增加两个整形变量 x, y

29
00:01:34,680 --> 00:01:37,290
这里用的是 struct

30
00:01:37,290 --> 00:01:39,510
但是你用 class 也没关系

31
00:01:39,510 --> 00:01:40,920
我选择 struct 的原因是

32
00:01:40,920 --> 00:01:45,239
我想让 x, y 默认就是共有的(public)

33
00:01:45,239 --> 00:01:46,739
struct 的成员变量默认就是 public 的

34
00:01:46,739 --> 00:01:49,140
我之前的视频有介绍过 class 和 struct 的区别(p19)

35
00:01:49,140 --> 00:01:52,799
如果你还没看，快点去看吧(p19)

36
00:01:52,799 --> 00:01:55,769
现在我们有一个非常简单的类

37
00:01:55,769 --> 00:02:01,200
先把它实例化，然后把变量设置为 2和3

38
00:02:01,200 --> 00:02:05,069
做完这些， 我们再创建另一个实例

39
00:02:05,069 --> 00:02:08,580
我可以使用初始化器来进行初始化

40
00:02:08,580 --> 00:02:10,560
把成员变量设置为 5和8

41
00:02:10,560 --> 00:02:12,569
然后在Entity结构体里添加一个print方法

42
00:02:12,569 --> 00:02:17,099
用标准库的cout方法打印一些信息到控制台

43
00:02:17,099 --> 00:02:25,650
好了， 如果我在下面这里打印 e 和 e1

44
00:02:25,650 --> 00:02:28,680
操作很简单，结果也显而易见

45
00:02:28,680 --> 00:02:32,250
我们会打印出 2和3，5和8

46
00:02:32,250 --> 00:02:36,030
然而，如果我把变量改为静态的(static), 情况就不一样了

47
00:02:36,030 --> 00:02:38,689
在这里把 x, y 改成静态的

48
00:02:38,689 --> 00:02:41,189
首先初始化器这里就会报错

49
00:02:41,189 --> 00:02:43,949
因为 x, y 不再是类成员

50
00:02:43,949 --> 00:02:47,669
所以我们换种写法：e1.x = 5, e1.y = 8

51
00:02:47,669 --> 00:02:52,169
严格来说这样写也不对，当然 只是举个例子倒也无妨

52
00:02:52,169 --> 00:02:53,969
这里改成e1

53
00:02:53,969 --> 00:02:58,349
这里你可以看到我引用了两个不同的类实例

54
00:02:58,349 --> 00:03:00,599
至少看起来是这样，如果我们运行代码

55
00:03:00,599 --> 00:03:02,400
会出现 ”unresolved external symbols“ 的报错

56
00:03:02,400 --> 00:03:07,379
因为我们必须要定义那些静态变量

57
00:03:07,379 --> 00:03:13,199
在这里对它们进行定义 int Entity::x, 先是静态变量的作用域，然后是变量名

58
00:03:13,199 --> 00:03:19,159
如果我们想的话，可以先不用给他们进行赋值，先像这样写

59
00:03:19,159 --> 00:03:21,875
现在这些变量已经定义了

60
00:03:21,875 --> 00:03:23,275
运行代码

61
00:03:23,275 --> 00:03:28,650
这样做你会看到 我们打印了两次 5,8 这有点奇怪

62
00:03:28,650 --> 00:03:29,759
你看在代码里

63
00:03:29,800 --> 00:03:33,625
我们在第一个实例处把 x,y 分别设置为 2和3

64
00:03:33,625 --> 00:03:36,150
在第二个实例把 x,y 设置为 5和8

65
00:03:36,150 --> 00:03:39,270
然而，当我们把 x,y 设置为静态变量的时候

66
00:03:39,650 --> 00:03:45,960
我们就把这两个变量变成在所有Entity类的实例中只有一个副本

67
00:03:47,000 --> 00:03:53,099
这意味着我改变了第二个Entity实例的 x和y, 第一个也会变

68
00:03:53,099 --> 00:03:55,199
他们指向的是同一个内存空间

69
00:03:55,199 --> 00:04:00,925
想象下两个不同的实例的x,y变量指向的是同一个共享空间

70
00:04:00,925 --> 00:04:02,729
他们指向相同的 x和y

71
00:04:02,729 --> 00:04:06,525
我们像这样引用变量也是没意义的

72
00:04:06,525 --> 00:04:09,960
可以像这样引用

73
00:04:09,960 --> 00:04:12,324
就像实在Entity内部

74
00:04:12,324 --> 00:04:19,074
因为就像是我们在名叫Entity的命名空间里创建了两个变量

75
00:04:19,074 --> 00:04:21,475
他们实际上并不属于类

76
00:04:21,475 --> 00:04:24,240
从这个意义上来说 他们可以是 private 的，或者是 public 的

77
00:04:24,240 --> 00:04:28,680
它们仍是类的一部分，而不是命名空间

78
00:04:28,680 --> 00:04:34,050
但是这样来看 它们大致上和在命名空间里一样

79
00:04:34,050 --> 00:04:39,475
当你新建类的实例或者类似的东西时 它们并不会重新分配内存

80
00:04:39,475 --> 00:04:43,920
把代码改正

81
00:04:43,920 --> 00:04:47,430
这样写就可以看出，为什么我们之前打印的都是 5和8

82
00:04:47,430 --> 00:04:50,925
因为我们修改的是相同的变量

83
00:04:50,925 --> 00:04:55,149
当你想要跨类使用变量的时候，这会很有用

84
00:04:55,149 --> 00:05:02,000
你可以只建一个全局变量，或者用一个静态全局变量代替全局变量

85
00:05:02,000 --> 00:05:06,475
它会在单元内部进行链接，而不会变成在整个项目中都是全局可见的

86
00:05:06,475 --> 00:05:09,660
这样做有相同的效果

87
00:05:09,660 --> 00:05:11,069
那为什么还要这么做(在类内部使用static)?

88
00:05:11,069 --> 00:05:14,824
是因为把它们放在类内是有意义的

89
00:05:14,824 --> 00:05:22,980
如果你有一些东西，比如说你有一条信息想要在所有的实例中共享

90
00:05:22,980 --> 00:05:28,675
那么将这条信息放在类内部是有意义的，因为它是和类相关的

91
00:05:28,675 --> 00:05:34,110
要组织好代码，你最好在这个类中创建一个静态变量

92
00:05:34,110 --> 00:05:37,300
而不是到处创建静态或者全局变量

93
00:05:37,300 --> 00:05:43,074
静态方法也是一样的，如果我把print函数改成 static 它仍然可以工作

94
00:05:43,074 --> 00:05:47,000
因为它引用的 x, y 也是静态的变量

95
00:05:47,024 --> 00:05:51,449
我不用向这样调用，而是可以这样

96
00:05:51,449 --> 00:05:53,399
事实上这样才是正确的调用方式

97
00:05:53,399 --> 00:05:56,699
你也会注意到这回打印出同样的内容

98
00:05:56,699 --> 00:05:59,310
因为我们运行了两次相同的方法

99
00:05:59,310 --> 00:06:03,420
这个例子里我们都用不到类的实例

100
00:06:03,420 --> 00:06:05,850
因为这些全是静态的

101
00:06:05,850 --> 00:06:11,699
但是如果我们把x,y改成非静态的，print函数仍然是静态的，事情就不一样了

102
00:06:11,699 --> 00:06:15,149
因为静态方法不能访问非静态变量

103
00:06:15,149 --> 00:06:17,649
就是这么简单的原因

104
00:06:17,649 --> 00:06:22,649
有时候我们会对静态方法能否访问非静态的东西感到很困惑

105
00:06:22,649 --> 00:06:25,649
这很简单，看代码

106
00:06:25,649 --> 00:06:30,209
回到Entity实例，重写我的代码

107
00:06:30,209 --> 00:06:35,040
我们要做的是让每个Entity的实例都有自己的x,y

108
00:06:35,040 --> 00:06:38,725
print 函数仍然是 static 的

109
00:06:38,725 --> 00:06:40,750
删除掉这些定义

110
00:06:40,750 --> 00:06:43,975
删掉 x,y 前面的 static

111
00:06:43,975 --> 00:06:48,000
如果试着编译，我们会收到一个错误

112
00:06:48,000 --> 00:06:52,560
你可以看到：“illegal reference to non-static member 'Entity::x''”

113
00:06:52,560 --> 00:06:56,319
你没法从静态方法访问到 x

114
00:06:56,319 --> 00:07:01,319
原因就是静态方法没有类实例

115
00:07:01,319 --> 00:07:05,529
我可能会在以后的视频中详细讲解类是如何运作的

116
00:07:05,529 --> 00:07:14,500
但本质上你在类里写的每个非静态方法都会获得当前的类实例作为参数(this指针)

117
00:07:14,500 --> 00:07:16,574
这就是类背后的实际工作方式

118
00:07:16,574 --> 00:07:20,660
在类当中，它们通过隐藏参数发挥作用

119
00:07:21,050 --> 00:07:24,175
静态方法没有那个隐藏参数

120
00:07:24,175 --> 00:07:28,000
静态方法和你在类外部编写的方法是一样的

121
00:07:28,000 --> 00:07:30,430
如果我在类外写一个print函数

122
00:07:30,430 --> 00:07:33,490
这就能说明为什么不能访问 x和y

123
00:07:33,490 --> 00:07:35,079
因为你根本不知道它们是什么

124
00:07:35,079 --> 00:07:41,500
假设你另外有个Print函数, 但是它有个参数是Entity的实例

125
00:07:41,500 --> 00:07:44,449
代码改成这样就好了

126
00:07:44,449 --> 00:07:54,949
我们刚刚写的方法，本质上就是一个类的非静态方法在编译时的真正样子

127
00:07:54,949 --> 00:08:02,800
如果我把Entity实例去掉，就是把 static 关键字加到类方法时所做的

128
00:08:02,800 --> 00:08:05,000
出错了，这就是为什么会出错

129
00:08:05,000 --> 00:08:11,000
他不知道要怎么访问Entity的x,y 因为你没有给他一个Entity的引用

130
00:08:11,000 --> 00:08:13,800
我希望这些内容我都讲清楚了

131
00:08:13,800 --> 00:08:19,600
下次我们会看看如何把我们学到的static的知识，添加到我们正在研究的log类里

132
00:08:19,600 --> 00:08:24,250
如果你想知道那是什么，去看那个如何写一个C++类的视频(p20)

133
00:08:24,250 --> 00:08:31,800
随着这个系列的进行，我们会继续增加log类的内容，并在学习新概念的时候不断改进它。

134
00:08:31,800 --> 00:08:37,524
static 对那些静态数据非常有用，这些数据不会在类实例见发生变化

135
00:08:37,524 --> 00:08:40,299
但实际上我们又想在类里使用它

136
00:08:40,299 --> 00:08:45,340
感谢你们的观看 你可以在Twitter和Instagram上关注我...

137
00:08:45,340 --> 00:08:50,950
...

