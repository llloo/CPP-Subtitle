1
00:00:00,000 --> 00:00:03,575
Hey 大家好，我是 Cherno，欢迎回到我的 C++ 系列

2
00:00:03,653 --> 00:00:07,349
今天我们要讨论mutable关键字以及如何使用它

3
00:00:07,525 --> 00:00:12,750
mutable实际上有两种不同的用法，一种是和const一起使用

4
00:00:12,915 --> 00:00:18,774
如果你不知道在C++中const是怎样工作的，你可以看下我昨天做的关于const的视频

5
00:00:19,044 --> 00:00:21,875
只要点击卡片或者下面视频描述里的链接就好了

6
00:00:22,034 --> 00:00:25,550
另一种用法是用在lambda表达式里，或者同时包含这两种情况

7
00:00:25,550 --> 00:00:32,424
我知道我还没讲过lambda，你们可能也不知道我在说什么，但是以后肯定会讲到

8
00:00:32,424 --> 00:00:35,524
这里我只是想制作一个视频来快速介绍mutable的实际含义

9
00:00:35,791 --> 00:00:39,375
因为这是两种区别很大的情况

10
00:00:39,519 --> 00:00:45,200
英文单词mutable,意思是很容易改变的东西，可以改变的东西

11
00:00:45,450 --> 00:00:49,450
你以前可能听过不可变immutabel,意识是不可以改变的东西

12
00:00:49,595 --> 00:00:52,450
mutable是它的反义词，意思是可以改变的

13
00:00:52,510 --> 00:00:59,750
所以当我们在const的语境下讨论mutable时，很明显我们是在讨论某种不可变的东西

14
00:00:59,939 --> 00:01:04,575
但是实际上又是可以改变的，这就像是mutable反转了const的意思

15
00:01:04,575 --> 00:01:09,349
我们有一个在这种情况下在类方法中应用mutable的程序

16
00:01:09,349 --> 00:01:16,450
来看下这个，我要在这里创建一个Entity类，给它一个私有成员m_Name

17
00:01:16,599 --> 00:01:24,150
我要写一个getter函数 const std::string& GeName(),它要被标记为const

18
00:01:24,373 --> 00:01:28,924
如果你还不知道const是什么意思，去看我昨天做的关于C++ const的视频

19
00:01:29,119 --> 00:01:34,119
这个函数返回m_Name, ok, 我们有了一个非常简单的getter函数

20
00:01:34,154 --> 00:01:40,200
把这个移到下面来，这里的const表示我们不能去更改实际的类成员

21
00:01:40,467 --> 00:01:45,799
所以我不能像这样给m_Name重新赋值，而且这作用于每一个变量

22
00:01:46,117 --> 00:01:51,117
一开始就把这个方法标记为const的主要原因是，做出承诺你不会去更改这个类

23
00:01:51,480 --> 00:01:59,025
因为如果我们真的有一些const Entity对象，我们可以调用const方法

24
00:01:59,248 --> 00:02:03,049
不过如果它们没有被标记为const，那就不能调用了

25
00:02:03,119 --> 00:02:06,099
因此这就是为什么我们把这些方法标记为const

26
00:02:06,301 --> 00:02:13,750
但是有些情况下，我们还是想要把方法标记为const，因为他的目的就是为了保持不变

27
00:02:13,824 --> 00:02:23,300
它不会去改变对象，但是有可能，它需要去修改对象里某个变量，这在技术上来说是可行的

28
00:02:23,324 --> 00:02:25,675
但实际上没有人会这么做

29
00:02:25,675 --> 00:02:32,574
给你们举个例子，假设为了调试我们想要计算这个函数在程序里被调用了多少次

30
00:02:32,684 --> 00:02:38,750
我们可能需要一个叫m_DebugCount的整形，初始化为0

31
00:02:38,974 --> 00:02:43,974
然后每次我们调用这个函数时都想要这个计数自增，但现在不能这么做

32
00:02:44,124 --> 00:02:51,650
解决方法是去掉const就好了，这里没问题了， 但是这里又没法调用了

33
00:02:51,798 --> 00:03:01,574
这个方法只是用来获取name的(应该加上const)
但是我们又不能在有const的时候让这个变量自增

34
00:03:01,574 --> 00:03:06,125
当然我们可以把它移动到其他地方，这是没问题的

35
00:03:06,125 --> 00:03:11,125
但是这会很乱，因为这个变量是在这个类的这个函数中使用的

36
00:03:11,125 --> 00:03:16,419
我们可以这么做，先回复这里的const，然后把这个变量标记为mutable

37
00:03:16,419 --> 00:03:20,775
意思是允许const方法去更改它，现在所有都好了

38
00:03:20,775 --> 00:03:27,699
这里可以写const Entity了，我们还有了一个很好的const方法可以用来修改这个特定的类成员

39
00:03:27,916 --> 00:03:34,250
所以把类成员标记为mutable，意味着类中的const方法可以修改这个成员

40
00:03:34,444 --> 00:03:41,175
这是mutable最常见的用法，绝大部分都是这种情况

41
00:03:41,175 --> 00:03:47,150
老实说，在类的成员上使用mutable可能是你唯一会用到它的地方了

42
00:03:47,442 --> 00:03:52,442
但是还有一个用到mutable的地方，我要说的就是lambda

43
00:03:52,642 --> 00:03:57,375
我不会讲的太复杂，因为我还没讲到labmda

44
00:03:57,375 --> 00:04:01,474
假如这里有个变量x，让它等于8 (我咋听到了zero？)

45
00:04:01,699 --> 00:04:06,250
然后我想声明一个lambda，就叫它f，然后在这里写一些代码

46
00:04:06,250 --> 00:04:11,250
也许是打印Hello到控制台什么的，这就是一个lambda

47
00:04:11,668 --> 00:04:17,600
基本上来说，lambda就像一个一次性的小函数，你可以写出来并赋值给一个变量，就像我们这里做的

48
00:04:17,763 --> 00:04:23,274
我们可以像通过名字调用其他函数一样去调用它， 如果有参数的话像这样指定它的参数

49
00:04:23,666 --> 00:04:28,875
假如我想要在这里使用变量x，不打印Hello,改成打印x

50
00:04:28,993 --> 00:04:33,993
这很好，我想把x传过去，但是我需要定义一些捕获函数

51
00:04:33,993 --> 00:04:41,324
我可以像这样通过引用传递这个歌变量，或者直接传值，
或者通过=对变量进行传值传递

52
00:04:41,324 --> 00:04:44,475
或者通过引用符号对所有的便令进行引用传递

53
00:04:44,630 --> 00:04:48,574
假设我要在这个lambda中写些其他的东西，比如 x++

54
00:04:48,574 --> 00:04:51,274
但是我们还是想按值来传递

55
00:04:51,274 --> 00:04:57,125
你会看到如果我改成值传递，如果我做 x++ 这样的运算，就会报错

56
00:04:57,506 --> 00:05:06,649
实际上这种情况下我要创建另一个变量然后把x赋值给它，然后再修改这个新变量

57
00:05:06,896 --> 00:05:13,600
我必须要创建一个局部变量，然后从这个变量获取值传递到这里

58
00:05:13,743 --> 00:05:17,875
这有点乱，所以我应该用mutable关键字

59
00:05:18,103 --> 00:05:24,649
回到上面，我要所得就是把这个lambda设为mutable, 只要把mutalbe写在这里

60
00:05:25,100 --> 00:05:30,350
这意味着，像刚才x变量那样通过值传递的变量，你可以更改它们

61
00:05:30,583 --> 00:05:35,875
当然这样做和刚才的局部变量y做的是一样的，它会创建一个局部变量

62
00:05:36,077 --> 00:05:38,875
但是在代码里会看起来干净很多

63
00:05:39,051 --> 00:05:47,024
当然，如果我在外面调用这个f，那么x的值仍然是8，它并不会自增为9

64
00:05:47,210 --> 00:05:52,210
因为你不是通过引用来传递他的，你是通过值传递的

65
00:05:52,352 --> 00:05:56,875
所以这里的值仍然是8，因为你只是赋值了8这个值传递进了lambda

66
00:05:56,875 --> 00:05:59,350
好了，这就是mutable关键字的内容了

67
00:05:59,350 --> 00:06:04,350
还是像我之前说的，90%的情况下，mutable时和类与const一起使用的

68
00:06:04,470 --> 00:06:08,949
实话实说，我从来没有在labmda中使用过mutable

69
00:06:08,949 --> 00:06:13,949
实际情况下并不会这么用，我甚至都没有见过这种用法

70
00:06:13,949 --> 00:06:18,949
如果你有任何关于mutable和const的问题，请在下面留言

71
00:06:18,949 --> 00:06:21,824
我会尽可能回复

72
00:06:21,824 --> 00:06:24,600
如果你喜欢这个视频，请点赞

73
00:06:24,814 --> 00:06:29,814
...

