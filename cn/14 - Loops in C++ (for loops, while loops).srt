1
00:00:00,000 --> 00:00:04,570
Hey 大家好 我是Cherno 欢迎回到我的C++系列

2
00:00:04,570 --> 00:00:07,410
今天我们讲循环

3
00:00:07,410 --> 00:00:11,490
这里讲的循环是for循环和while循环

4
00:00:11,490 --> 00:00:18,559
简单来讲，循环就是多次执行同样的代码

5
00:00:18,559 --> 00:00:23,800
举个例子，我们怎么打印hello world五次？

6
00:00:23,800 --> 00:00:33,159
我们可以把那行代码复制5次，或者写个函数调用5次

7
00:00:33,159 --> 00:00:39,920
这么做有点蠢吧？其实可以写循环重复执行代码5次

8
00:00:39,920 --> 00:00:44,460
循环在大项目中也很有用，比如游戏

9
00:00:44,460 --> 00:00:48,409
写游戏的话，要让游戏持续运行，对吧？

10
00:00:48,409 --> 00:00:52,280
你不想渲染一帧就退出游戏，对吧？

11
00:00:52,280 --> 00:00:56,539
结束了，渲染了一帧就游戏结束了

12
00:00:56,539 --> 00:01:00,079
奇怪吧？所以你会想要游戏持续运行

13
00:01:00,079 --> 00:01:02,799
这样你就要用游戏循环

14
00:01:02,799 --> 00:01:11,040
游戏循环其实就是说，当游戏还在运行，玩家还没退出

15
00:01:11,040 --> 00:01:17,530
持续刷新游戏，渲染画面，移动角色以及其他的事

16
00:01:17,530 --> 00:01:19,739
一遍遍，一帧帧的重复

17
00:01:19,739 --> 00:01:23,530
所以循环很重要，每个程序里都有

18
00:01:23,530 --> 00:01:27,890
就跟12P里面的条件语句一样重要

19
00:01:27,890 --> 00:01:37,329
掌握它！因为你写程序来主要就靠它

20
00:01:37,329 --> 00:01:39,129
先从for循环讲起

21
00:01:39,129 --> 00:01:42,079
前面举了打印Hello World5次的例子

22
00:01:42,079 --> 00:01:46,590
我们是可以复制，然后调用log函数5次

23
00:01:46,590 --> 00:01:51,819
运行一下，的确是在命令行里打印了5次

24
00:01:51,819 --> 00:01:55,799
其实更简单的写法是使用for循环

25
00:01:55,799 --> 00:01:57,799
for循环以关键字for开始

26
00:01:57,799 --> 00:02:00,819
后面跟着的括号里有三部分

27
00:02:00,819 --> 00:02:03,959
每部分以英文分号;隔开

28
00:02:03,959 --> 00:02:06,290
第一部分是一个变量声明

29
00:02:06,290 --> 00:02:08,900
一般会在这里声明临时变量

30
00:02:08,900 --> 00:02:11,409
这里声明一个int类型的变量i等于0

31
00:02:11,409 --> 00:02:14,569
变量名为i是传统了

32
00:02:14,569 --> 00:02:19,080
有说法是i代表迭代器(iterator)，因为i标志了迭代

33
00:02:19,080 --> 00:02:24,669
其实变量名无所谓，甚至不用是int，也不用的等于0

34
00:02:24,669 --> 00:02:29,310
我先写个简单的for循环，然后再细细的讲

35
00:02:29,310 --> 00:02:34,139
for循环很灵活，可以做很多事情

36
00:02:34,139 --> 00:02:35,819
第二部分是条件

37
00:02:35,819 --> 00:02:41,939
满足条件的时候，一直执行for循环里的代码

38
00:02:41,939 --> 00:02:48,719
这里我们想执行log()打印5次

39
00:02:48,719 --> 00:02:53,340
所以写i<5，等下解释意思

40
00:02:53,340 --> 00:02:59,449
第三部分是下一次for循环前会执行的代码

41
00:02:59,449 --> 00:03:02,270
这里输入i++

42
00:03:02,270 --> 00:03:07,629
或者i+=1或者i=i+1都一样

43
00:03:07,629 --> 00:03:18,669
意思是从前面赋予的0开始，i每次循环加1

44
00:03:18,669 --> 00:03:20,479
底下当然是循环体了

45
00:03:20,479 --> 00:03:26,159
循环体里就是for循环会重复执行的代码

46
00:03:26,159 --> 00:03:28,810
这里的代码会多次执行

47
00:03:28,810 --> 00:03:34,539
虽说多次，但是是由条件决定的，可能根本不执行

48
00:03:34,539 --> 00:03:37,280
可能是1次，可能是100次

49
00:03:37,280 --> 00:03:38,919
次数是由条件决定的

50
00:03:38,919 --> 00:03:42,129
贴一个log函数的调用进去

51
00:03:42,129 --> 00:03:44,539
然后删掉外面多余的

52
00:03:44,539 --> 00:03:47,599
按F5执行，可以看到结果是一样的

53
00:03:47,599 --> 00:03:49,259
Hello World出现5次

54
00:03:49,259 --> 00:03:51,219
好，我们来细讲

55
00:03:51,219 --> 00:03:57,000
这个声明是for这行第一个被执行的

56
00:03:57,000 --> 00:04:00,270
执行到这行，就会运行声明部分里的代码

57
00:04:00,270 --> 00:04:02,849
所以这里我们会创造一个变量i

58
00:04:02,849 --> 00:04:07,129
下一步是检查条件是否为真

59
00:04:07,129 --> 00:04:13,159
假如条件为真，就跳进循环体，执行里面的代码

60
00:04:13,159 --> 00:04:17,720
当运行到右大括号}的时候

61
00:04:17,720 --> 00:04:23,709
就会回到上面，执行第三部分，这里i会增加1

62
00:04:23,709 --> 00:04:28,110
然后会跳到第二部分，检查条件是否为真

63
00:04:28,110 --> 00:04:31,939
这里i原来是0，加了1之后是1

64
00:04:31,939 --> 00:04:33,980
所以这里是检查1<5

65
00:04:33,980 --> 00:04:37,600
1<5为真，所以会继续执行循环体里面的代码

66
00:04:37,600 --> 00:04:46,689
这个循环直到i等于4，然后在第三部分加1变成5

67
00:04:46,689 --> 00:04:52,019
接着检查5<5，结果为假，因为5等于5，不小于5

68
00:04:52,019 --> 00:04:55,769
所以条件为假，结束循环，跳到第10行

69
00:04:55,769 --> 00:04:57,290
执行std::cin.get()

70
00:04:57,290 --> 00:05:00,990
以上就是for循环如何执行5次的

71
00:05:00,990 --> 00:05:05,600
强调一下，for循环的三部分

72
00:05:05,600 --> 00:05:12,350
就是我说的那样，第一部分在for循环之前执行一次

73
00:05:12,350 --> 00:05:19,850
第二部分是一个比较或布尔值，执行每一次循环前会检验

74
00:05:19,850 --> 00:05:26,819
第三部分是每次循环结束后执行的代码

75
00:05:26,819 --> 00:05:32,620
其实我们可以拆分开来，把声明放在for前

76
00:05:32,620 --> 00:05:36,680
然后空着第一部分，这样也绝对没问题

77
00:05:36,680 --> 00:05:42,680
把第三部分放在循环体的最后，结果也会一样

78
00:05:42,680 --> 00:05:45,100
这看起来奇怪，但运行起来

79
00:05:45,100 --> 00:05:49,810
可以看到结果一样，因为代码做的事是一样的

80
00:05:49,810 --> 00:05:51,389
只是我们移动了代码的位置而已

81
00:05:51,389 --> 00:05:56,269
同样的，我们可以在前面声明一个布尔变量，赋值为真

82
00:05:56,269 --> 00:06:00,410
以它作为我的第二部分

83
00:06:00,410 --> 00:06:04,350
然后在i++下面加个if

84
00:06:04,350 --> 00:06:11,439
假如i不小于5，condition就等于假

85
00:06:11,439 --> 00:06:18,029
运行看一下，结果也是一样的，因为代码做的事没变

86
00:06:18,029 --> 00:06:20,480
只是写的代码不一样了

87
00:06:20,480 --> 00:06:24,529
这就告诉我们for循环可以很灵活

88
00:06:24,529 --> 00:06:28,699
不必拘泥于for(int i=0;i<5;i++)

89
00:06:28,699 --> 00:06:31,720
for循环里可以是任何东西

90
00:06:31,720 --> 00:06:35,329
你甚至可以在for循环的三部分里面调用函数

91
00:06:35,329 --> 00:06:38,360
发挥你的想象力吧

92
00:06:38,360 --> 00:06:42,420
你还可以把第二部分去掉，就跟写真(true)的结果一样

93
00:06:42,420 --> 00:06:49,480
这个循环就变成了死循环，永不结束

94
00:06:49,480 --> 00:06:51,560
假如运行的话就可以看到

95
00:06:51,560 --> 00:06:57,079
程序会一直输出Hello World直到我们手动结束

96
00:06:57,079 --> 00:06:58,430
for循环差不多就这样

97
00:06:58,430 --> 00:07:05,680
它可以很方便地多次执行代码，比如打印Hello World5次

98
00:07:05,680 --> 00:07:08,110
做起来很简单

99
00:07:08,110 --> 00:07:15,399
它在遍历数组的时候也很有用，可以一个个地看过去

100
00:07:15,399 --> 00:07:18,100
现在来讲while循环

101
00:07:18,100 --> 00:07:20,519
while循环和for循环挺像的

102
00:07:20,519 --> 00:07:24,910
没有开头第一部分的声明和结尾第三部分的代码

103
00:07:24,910 --> 00:07:26,160
它只有第二部分的条件

104
00:07:26,160 --> 00:07:31,860
所以写while循环先写关键字while，然后加上条件

105
00:07:31,860 --> 00:07:34,839
比如i<5

106
00:07:34,839 --> 00:07:37,730
当然，i在前面声明了

107
00:07:37,730 --> 00:07:43,600
运行的时候，只要i<5就会不断重复执行循环体

108
00:07:43,600 --> 00:07:46,029
假如我们像写刚刚的for循环

109
00:07:46,029 --> 00:07:49,069
先让我还原一下for循环

110
00:07:49,069 --> 00:07:52,829
想跟for循环一样的效果

111
00:07:52,829 --> 00:07:56,970
我们先要在外面声明int i=0

112
00:07:56,970 --> 00:08:01,360
然后在循环结尾执行i++

113
00:08:01,360 --> 00:08:04,649
现在这两就一样了

114
00:08:04,649 --> 00:08:10,540
这两个循环之间我打印一些等号做分割线

115
00:08:10,540 --> 00:08:16,220
可以看到两个循环运行的结果都是打印Hello World5次

116
00:08:16,220 --> 00:08:21,519
那什么时候用for什么时候用while

117
00:08:21,519 --> 00:08:24,879
主要取决于是否需要新变量

118
00:08:24,879 --> 00:08:28,360
因为这两一模一样，可以互换

119
00:08:28,360 --> 00:08:34,559
这更像一种习惯或者风格，而不是一种规定

120
00:08:34,559 --> 00:08:41,860
因为这两者没有什么实质性的不同，做的事也一模一样

121
00:08:41,860 --> 00:08:48,090
但习惯上来说，假如你已经有确定的条件，只是想用来比较

122
00:08:48,090 --> 00:08:52,659
像之前讲的游戏循环 假如里面就有个变量running

123
00:08:52,659 --> 00:08:57,159
然后在那个值为真的时候，意味着程序需要一直

124
00:08:57,159 --> 00:09:00,899
因为布尔值运行 意味着程序需要一直运行

125
00:09:00,899 --> 00:09:07,659
这种情况下我会选while，因为只要条件而不用每次循环都改变条件

126
00:09:07,659 --> 00:09:10,059
循环前不用声明变量

127
00:09:10,059 --> 00:09:13,309
因为条件布尔值已经声明好了

128
00:09:13,309 --> 00:09:21,330
while就好了，因为不用之前声明变量或每次更新值

129
00:09:21,330 --> 00:09:23,330
而遍历数组的时候

130
00:09:23,330 --> 00:09:27,559
数组大小确定，比如10

131
00:09:27,559 --> 00:09:32,029
我会选for，因为一样的代码跑10遍的时候

132
00:09:32,029 --> 00:09:36,009
在这10遍中我要有变量

133
00:09:36,009 --> 00:09:41,039
这个变量在访问数组的时候有用

134
00:09:41,039 --> 00:09:44,320
在操作10个元素的数组时

135
00:09:44,320 --> 00:09:50,700
访问里面每个元素的时候要有偏移量或者索引

136
00:09:50,700 --> 00:09:52,700
我们之后会讲数组

137
00:09:52,700 --> 00:10:01,120
但那个i在循环中从0变成5，正好可以用作索引

138
00:10:01,120 --> 00:10:05,879
这里有for和while循环了，其实还有do...while循环

139
00:10:05,879 --> 00:10:07,580
do...while不太有用

140
00:10:07,580 --> 00:10:10,490
我不太常用

141
00:10:10,490 --> 00:10:13,200
但是有do...while的

142
00:10:13,200 --> 00:10:18,269
尽管它不像for和while循环那么常见

143
00:10:18,269 --> 00:10:20,269
我们先写关键字do

144
00:10:20,269 --> 00:10:21,440
然后是循环体

145
00:10:21,440 --> 00:10:24,740
最后是while和条件

146
00:10:24,740 --> 00:10:27,379
比如像i<5

147
00:10:27,379 --> 00:10:31,019
do...while和while之前的区别是

148
00:10:31,019 --> 00:10:35,000
do...while的循环至少会被执行一次

149
00:10:35,000 --> 00:10:39,169
比如我们把这个int i改下

150
00:10:39,169 --> 00:10:41,809
改成一个条件布尔值

151
00:10:41,809 --> 00:10:43,809
赋值为假

152
00:10:43,809 --> 00:10:46,080
假如把它放到while里

153
00:10:46,080 --> 00:10:50,429
这个while其实就跟if很像了

154
00:10:50,429 --> 00:10:53,000
本质上说，假如这是假

155
00:10:53,000 --> 00:10:55,580
循环体里面就永远不会被执行

156
00:10:55,580 --> 00:11:01,340
而do..while即使条件为假

157
00:11:01,399 --> 00:11:04,350
也会先运行一下里面的代码，而不是跟循环一样跳过

158
00:11:04,350 --> 00:11:07,500
然后运行到最后while的条件，发现为假

159
00:11:07,500 --> 00:11:08,700
循环结束

160
00:11:08,700 --> 00:11:11,149
do...while就这样

161
00:11:11,149 --> 00:11:12,929
今天的视频就这样

162
00:11:12,929 --> 00:11:15,200
希望你们听循环听地尽兴

163
00:11:15,200 --> 00:11:17,610
这个系列里面会经常用到循环

164
00:11:17,610 --> 00:11:21,250
基本上你能想到的算法里面都会有它

165
00:11:21,250 --> 00:11:24,029
碰上数组也会有它

166
00:11:24,029 --> 00:11:27,440
我们也会讲用for循环遍历数组

167
00:11:27,440 --> 00:11:29,440
这样我们写起来就很优雅

168
00:11:29,440 --> 00:11:34,990
之后可能会从汇编语言看循环

169
00:11:34,990 --> 00:11:39,309
看看循环生成的cpu指令

170
00:11:39,309 --> 00:11:41,309
我不想把这个视频说的

171
00:11:41,309 --> 00:11:46,059
之后的视频会附上链接

172
00:11:46,059 --> 00:11:49,174
 如果你喜欢这个视频请点赞

173
00:11:49,174 --> 00:11:54,174
记得在推特和Ins上关注我

174
00:11:54,223 --> 00:11:57,750
...

