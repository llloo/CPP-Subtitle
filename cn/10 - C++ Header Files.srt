1
00:00:00,910 --> 00:00:02,830
我们今天去个有意思的地方

2
00:00:15,089 --> 00:00:20,949
好了，试点新的东西，大家好，我是Cherno，欢迎回到cpp系列

3
00:00:21,230 --> 00:00:24,100
所以今天，Head Files，我们真的在外面了！

4
00:00:24,179 --> 00:00:30,050
早上天气很好，然后开始下雨，但我决定出城，因为。。。

5
00:00:30,550 --> 00:00:34,899
所以我们在这，澳大利亚的某个地方，而且我们要讨论C++

6
00:00:35,380 --> 00:00:41,000
希望你们不要以为是我觉得头文件太无聊了，以至于我觉得有必要跑出城去才能压过这份无聊

7
00:00:41,130 --> 00:00:42,850
没有！我只是想出来而已！

8
00:00:43,130 --> 00:00:48,520
好了，头文件，它是什么，为什么我们需要他们，甚至为什么他们在C++中存在

9
00:00:48,729 --> 00:00:51,850
许多你或许已经习惯了的其他语言,比如java或者c#

10
00:00:52,079 --> 00:00:57,250
他们实际上没有头文件这个概念，也没有存在两种不同的文件类型的概念

11
00:00:57,329 --> 00:01:00,420
一种是我们的编译文件，比如说cpp文件

12
00:01:00,659 --> 00:01:05,780
也就是一个翻译单元，然后还有一种就是头文件，一个奇怪的文件

13
00:01:05,879 --> 00:01:08,549
我们经常到处include它们，为什么它会存在

14
00:01:08,730 --> 00:01:16,920
头文件实际上很有用，而且它们的用途不只是声明某种声明，以供你在多个CPP中使用而已

15
00:01:17,079 --> 00:01:22,829
随着该系列的继续下去，我们将要学习很多新概念，都需要头文件才能正常工作 

16
00:01:22,920 --> 00:01:24,469
所以请不要马上就跳过了

17
00:01:24,700 --> 00:01:33,150
在c++基础中，头文件传统上是用来声明某些函数类型，以便可以用于整个程序中

18
00:01:33,200 --> 00:01:35,650
如果你回想一下我的c++编译器和链接器视频

19
00:01:35,859 --> 00:01:43,219
我谈到了为了让我们知道什么函数和类型存在，我们需要某种声明

20
00:01:43,450 --> 00:01:47,650
比如说，我们在一个文件中创建函数，然后想要在另一个文件中使用

21
00:01:47,829 --> 00:01:52,829
当我们尝试编译时那个文件时，C++甚至都不会知道它的存在

22
00:01:53,209 --> 00:01:56,629
所以我们需要一个共同的地方来存放声明，而非定义

23
00:01:57,010 --> 00:01:58,950
因为，记住，我们只能定义函数一次

24
00:01:59,099 --> 00:02:05,219
我们需要这么一个共同的地方存放函数声明，只是声明，而没有实际的定义，没有函数的主体

25
00:02:05,379 --> 00:02:08,969
只是一个地方说“嘿，这个函数存在!" 

26
00:02:09,050 --> 00:02:16,050
假设我有个函数叫log，它将打印信息到控制台

27
00:02:16,120 --> 00:02:21,120
它接受一个const char “message”，然后单纯cout该信息

28
00:02:23,469 --> 00:02:27,550
然后，如果我继续创建另一个文件，我们将命名为log.cpp

29
00:02:27,780 --> 00:02:32,949
然后也许这个文件有个什么初始化我们到Log的，并且会log一句话到控制台

30
00:02:32,990 --> 00:02:39,430
我们拿到了一个错误，这个log函数并不存在于该文件，该文件不知道log函数的存在

31
00:02:39,530 --> 00:02:47,030
当然回到main，它在这里，log函数存在，我们可以把这里换成Log

32
00:02:47,150 --> 00:02:53,349
如果如果我按CTRL加f7试图编译我们的程序，可以看到可以正常工作，没有错误

33
00:02:53,469 --> 00:02:56,930
然后回到log文件，如果我们试图编译这个文件，我们获得一个错误

34
00:02:56,990 --> 00:03:00,069
因为显然就这个文件来说，log不存在

35
00:03:00,219 --> 00:03:03,650
所以log.cpp到底需要什么东西才能不会有错误？

36
00:03:03,669 --> 00:03:08,430
我们该如何告诉它，log这个函数存在，只是它定义于别的什么地方，

37
00:03:08,479 --> 00:03:10,800
这就是函数声明用的用武之地

38
00:03:10,889 --> 00:03:16,219
如果我们回到我们的代码这里，我只需要简单的声明，log函数存在，

39
00:03:16,250 --> 00:03:19,250
如果我们回到main函数，然后看一下这个实际的签名，

40
00:03:19,379 --> 00:03:24,379
可以看到log是一个返回void、接受一个参数—也就是一个const char*的函数，

41
00:03:24,599 --> 00:03:30,000
有小孩在追袋鼠，真搞笑，

42
00:03:30,069 --> 00:03:37,319
所以这是函数签名，我们可以直接复制这个，回到log.cpp，粘贴进来，然后用一个分号结束它，

43
00:03:37,379 --> 00:03:42,379
啊，这个函数没有主体的事实呢，说明这是一个函数的声明，

44
00:03:42,500 --> 00:03:45,650
我们还没有定义这个函数到底是什么样子，这个函数到底做什么

45
00:03:45,810 --> 00:03:52,349
我们只是说嘿，这边有一个函数叫log，返回类型是void，接受一个const char*，这个函数存在

46
00:03:52,550 --> 00:03:56,500
你可以看到我们的Intellisence的错误已经消失了，如果我按control加f7，我们可以编译，

47
00:03:56,599 --> 00:04:00,050
如果我们右击hello world，然后点build来build我们的程序，

48
00:04:00,099 --> 00:04:03,319
可以看到他也链接成功，因为这是可以的，他找到了那个log函数，

49
00:04:03,550 --> 00:04:10,900
好的非常好，我们找到了一个告诉log.cpp那个log函数存在于某处的办法，

50
00:04:10,930 --> 00:04:15,930
那如果我创建另外一个文件呢？如果我创建了一个别的文件，然后需要用这个log函数呢？

51
00:04:16,100 --> 00:04:21,100
这意味着我也需要把这个void log声明到处复制粘贴吗？

52
00:04:21,329 --> 00:04:26,329
嗯，答案是是的，你确实需要这么做，但是呢，有一个办法可以让这一切简单一点，

53
00:04:26,459 --> 00:04:34,649
头文件，什么是头文件？我其实应该说头文件到底是什么？
因为这是C++，你可以做任何事情，

54
00:04:34,750 --> 00:04:39,180
所以头文件一般是那种被include到cpp文件里的，基本上我们做的就是，

55
00:04:39,350 --> 00:04:42,550
把头文件里的内容copy and paste到cpp文件里，

56
00:04:42,699 --> 00:04:46,300
我们通过#include这个pre processor语句来实现，

57
00:04:46,449 --> 00:04:50,319
所以#Include有从文件复制粘贴到其他文件的能力，

58
00:04:50,360 --> 00:04:52,649
这看起来正是我们需要在这里做的，

59
00:04:52,730 --> 00:04:57,269
我们需要把这个log的声明，复制粘贴到任何我们需要用这个log函数的地方，

60
00:04:57,420 --> 00:05:00,649
所以让我们去创建一个头文件，我将右击header files

61
00:05:00,750 --> 00:05:04,449
请注意这些文件夹其实是过滤器，它们不是真的文件夹，

62
00:05:04,490 --> 00:05:06,569
我也可以在source files底下创建一个头文件，

63
00:05:06,720 --> 00:05:09,519
将来我们也会有一些视频，关于visual studio是怎么工作的，

64
00:05:09,689 --> 00:05:14,100
但现在你要知道的就是，你无论在什么地方右击创建头文件都没关系，

65
00:05:14,199 --> 00:05:18,250
我将在头文件上面创建，因为这更合理一点，但实际上其实无所谓，

66
00:05:18,350 --> 00:05:24,019
我将创建一个头文件叫log.h，你会意识到它自动给你插入了一些代码，

67
00:05:24,149 --> 00:05:26,730
叫#pragma once，我们等会很快会介绍他，

68
00:05:26,850 --> 00:05:31,850
在这里我将存放我们的声明，我将从log.cpp把这个Log函数剪切，

69
00:05:31,899 --> 00:05:35,480
放入这里，放入我们的头文件，现在呢，

70
00:05:35,509 --> 00:05:40,509
我们的头文件log.h，我可以在任何想用log函数的地方include它，

71
00:05:40,519 --> 00:05:43,750
然后显然他会帮我们做那些我们不想人工做的事情，

72
00:05:43,800 --> 00:05:48,250
也就是复制粘贴这个到任何我们需要它的所有文件里

73
00:05:48,300 --> 00:05:53,949
我不想自己去做这个复制粘贴的工作，所以就找了一个某种程度上让它看起来整洁一点，自动化一点的办法，

74
00:05:54,000 --> 00:05:59,000
回到log.cpp，你会看到我们也获得一个错误，因为我们其实没有声明这个函数，

75
00:05:59,129 --> 00:06:02,230
但如果我输入#include “log.h"，

76
00:06:02,300 --> 00:06:06,680
看哪，我们没有任何错误，然后我们的文件可以编译，非常好

77
00:06:06,769 --> 00:06:10,149
我们其实还可以做的是把它include到main.cpp，

78
00:06:10,250 --> 00:06:15,819
main.cpp包含实际的函数定义，所以其实他并不需要他，我们反正都可以调用log

79
00:06:15,980 --> 00:06:20,430
只是为了让你知道，呃，我们把它include进来也不会造成什么伤害，

80
00:06:20,449 --> 00:06:22,319
然后编译，这是完全没有问题的，

81
00:06:22,389 --> 00:06:26,680
好了，回到log.cpp，你可以看到我们定义了这个超屌的函数initlog，

82
00:06:26,689 --> 00:06:29,649
然后除了log点cpp，没人知道它，

83
00:06:29,709 --> 00:06:32,949
如果想从main里面使用它，我需要拿到它的声明，

84
00:06:32,990 --> 00:06:35,930
如果我在这里调用init log，我们会获得一个错误，

85
00:06:35,990 --> 00:06:41,980
这是因为他没有在任何地方被声明，所以让我们去log头文件把它的函数签名加进来

86
00:06:42,050 --> 00:06:47,819
就像这样非常好，只是要确保它和cpp文件里的实际签名一致，

87
00:06:47,949 --> 00:06:53,680
所以现在一切都看起来很好，然后我要去把这个log函数拿到这个log.cpp来，

88
00:06:53,769 --> 00:06:57,949
因为这样看起来更合理一点，我们这边会有一个错误告诉我cout没有被找到，

89
00:06:58,199 --> 00:07:00,449
没关系，我可以include iostream，很好，

90
00:07:00,550 --> 00:07:06,449
回到main，如果运行我们的程序，看我们实际上初始化了log并打印了，hello，world到控制台，

91
00:07:06,519 --> 00:07:13,019
非常好，我们回到那个头文件，看一下那个pragma once到底是什么

92
00:07:13,269 --> 00:07:18,050
所以这里我们有一个语句是看起来是visual studio给我们生成的，叫#pragma once，

93
00:07:18,149 --> 00:07:24,100
这是什么? 任何以一个井号开头的语句都被称为预处理命令，或者叫预处理指令

94
00:07:24,180 --> 00:07:30,100
也就意味着他将在这个文件被编译之前被c++的pre processor评估，

95
00:07:30,199 --> 00:07:34,399
pragma其实是一个被输入到编译器或者说预处理器的指令，

96
00:07:34,430 --> 00:07:39,430
pragma once其实意思就是说只include这个文件一次，

97
00:07:39,560 --> 00:07:41,569
Pragma once, 是一种被称为header guard(头文件保护符）

98
00:07:41,629 --> 00:07:48,069
他所做的就是防止我们把单个头文件多次include到一个单一翻译单元里，

99
00:07:48,129 --> 00:07:56,949
现在我说话其实很小心的，你得明白，他其实不会防止我们把头文件include到程序的各处，

100
00:07:56,980 --> 00:08:01,379
只是防止include到一个翻译单元里，也就是一个单独的cpp文件，

101
00:08:01,420 --> 00:08:06,649
原因是如果我们不小心把一个文件多次include到一个翻译单元里，

102
00:08:06,680 --> 00:08:11,430
我们会得到一个重复的错误，因为我们会多次复制和粘贴那个头文件

103
00:08:11,449 --> 00:08:15,019
一个比较好的办法来示意这种情况是我们创建一个struct.

104
00:08:15,149 --> 00:08:19,069
比如说如果我在这里创建一个struct叫做player.我可以就让他空着，没关系，

105
00:08:19,089 --> 00:08:24,769
如果我把这个文件，两次应付得到一个翻译单元，并且没有头文件保护符，

106
00:08:24,930 --> 00:08:30,519
他会真的include这个文件两次，也就是我会有两个structs, 他们有相同的名字，player，

107
00:08:30,600 --> 00:08:33,519
我们可以通过把这个pragma once评论掉来看一下这个例子

108
00:08:33,570 --> 00:08:36,600
然后回到log，我会include log.h两次，

109
00:08:36,730 --> 00:08:40,350
如果我试图编译我的文件，你可以看到我们拿到了一个player structure重复定义的错误，

110
00:08:40,419 --> 00:08:46,299
因为我们在重新定义这个player struct,而我们只能定义一个叫player的struct，Struct的需要唯一的名字

111
00:08:46,399 --> 00:08:50,480
所以你会问”cherno我为什么要这样做，我不是个傻程序员 

112
00:08:50,500 --> 00:08:53,700
我没你想象到那么傻，我为什么要include一个文件两次？”

113
00:08:53,769 --> 00:08:57,250
唉年轻人，这又回到了include到底是怎么工作的

114
00:08:57,269 --> 00:09:00,149
记得吗，include的工作方法就是从一个文件复制粘贴到另一个文件，

115
00:09:00,230 --> 00:09:03,019
也就是说你可能会有一个一连串的include

116
00:09:03,100 --> 00:09:07,299
所以你可能有一个头文件叫player，他会include log，然后player又被include到其他的文件，

117
00:09:07,350 --> 00:09:10,730
然后可能那第3个文件会包含所有的include，

118
00:09:10,809 --> 00:09:14,019
所以如果我创建一个新的头文件，叫common，

119
00:09:14,080 --> 00:09:19,080
Common将会包含一些常用的 includes，比如它会include log

120
00:09:19,179 --> 00:09:22,580
如果我回到log.h，确保program once被评论掉了，

121
00:09:22,580 --> 00:09:26,450
然后在log.cpp，我include log.h和common.h，

122
00:09:26,470 --> 00:09:29,299
如果我编译我的文件，猜猜会怎样？我仍然拿到那个错误，

123
00:09:29,340 --> 00:09:31,879
因为那个struct player被重新定义了，

124
00:09:31,980 --> 00:09:37,580
如果我们要解析预处理器到底做了什么,你可以看到他其实有把log include两次，

125
00:09:37,649 --> 00:09:42,169
然而回到log.h，如果我们把评论去掉，并试图编译我们的文件，

126
00:09:42,230 --> 00:09:47,230
我们没有任何错误，因为它认识到log已经被include了，他不会第2次再include它，

127
00:09:47,379 --> 00:09:52,269
还有另外一种方式来添加一个头文件保护符，作为教学目的来说，我其实更喜欢它

128
00:09:52,299 --> 00:09:57,299
因为它看上去比#pragma once更有意义一点，虽然pragma once看起来更干净

129
00:09:57,429 --> 00:10:00,600
传统的办法添加头文件保护符，其实是通过 #ifdef

130
00:10:00,639 --> 00:10:07,019
我们可以做的就是输入#ifndef，然后我们可以来检查某种符号，比如说_log_h，

131
00:10:07,080 --> 00:10:13,100
然后我们会定义_log_h，然后在我们文章的最后，输入 endif

132
00:10:13,149 --> 00:10:18,149
这个将要做的就是首先他会检查这个log h这个符号是否存在，

133
00:10:18,220 --> 00:10:23,000
如果没有被定义，他将把以下代码include到编译里，

134
00:10:23,049 --> 00:10:27,899
如果这个被定义了，那这些都不会被include，会全部被禁用，

135
00:10:28,000 --> 00:10:31,480
当我们通过了，第1个条件检查，我们会定义log h，

136
00:10:31,500 --> 00:10:36,879
也就是说下一次我们运行这段代码时，它是已经被定义的状态，所以不会再重复，

137
00:10:36,919 --> 00:10:44,049
最简单的办法来描述这个东西就是复制粘贴整个文件，到我们的log.cpp文件，

138
00:10:44,149 --> 00:10:53,100
如果我们看一下它，我也把log.h注释掉，以及common.h

139
00:10:53,230 --> 00:10:58,230
所以你们看在这里，第1次时，这一切都OK，他include了这个文件，一切正常

140
00:10:58,279 --> 00:11:02,919
但第2次，他都是灰色，因为log_h已经被定义了，

141
00:11:02,980 --> 00:11:12,100
所以这种形式的头文件保护符在过去经常使用，然而我们现在有这个新的预处理语句叫pragma once，所以我们现在大多数用它，

142
00:11:12,149 --> 00:11:15,769
从某种意义上来说，其实你用哪种都无所谓，虽然pragma once看起来更干净，

143
00:11:15,860 --> 00:11:20,149
所以我更青睐于用它，而且在行业里这也是绝大部分人所用的，

144
00:11:20,210 --> 00:11:25,210
基本上现在所有的编辑器都支持pragma once，所以并不是只是适用于vs

145
00:11:25,279 --> 00:11:31,080
gcc、clang、msbc，它们都支持pragma once，所以别怕用它

146
00:11:31,149 --> 00:11:40,019
话说回来，如果你有看到老代码，或者别人写过到不同风格的代码，你会碰到这个ifndef头文件保护符，所以就知道一下它是啥

147
00:11:40,080 --> 00:11:43,379
不过我永远不会写ifndef，我会写pragma once

148
00:11:43,429 --> 00:11:48,200
我想给你展示的最后一件事是，在头文件保护符一起，我们在include语句间有一些差异

149
00:11:48,230 --> 00:11:54,049
有些include语句用引号，有些include语句用方括号，所以到底啥情况？

150
00:11:54,129 --> 00:11:58,299
其实很简单，他们代表两件事，当我们编译我们的程序时

151
00:11:58,350 --> 00:12:06,980
我们有办法告诉编译器某些include路径，这基本上就是在我们电脑里通往文件夹的路径，它们包含include文件

152
00:12:07,019 --> 00:12:11,399
如果我们想要include的那个文件，在这些文件夹其中之一的话，

153
00:12:11,460 --> 00:12:16,460
我们可以用方括号去让编译器在所有include路径里，去搜索这个文件，

154
00:12:16,580 --> 00:12:21,899
而引号用于include文件存在于该文件的相对位置，

155
00:12:22,149 --> 00:12:27,769
举例来说，如果我有一个文件叫做log.h，它存在于目前这个log.cpp文件的上一级目录

156
00:12:27,879 --> 00:12:34,799
我可以用../来返回，而这会返回上一级目录，因为这是相对于本文件的位置，

157
00:12:34,879 --> 00:12:41,399
而对于方括号来说，永远没有说这个文件的相对位置，他们必须存在于所有include目录的某一个里，

158
00:12:41,480 --> 00:12:47,000
我们会在以后的视频里讲怎么设置include目录和这所有东西，我不想现在把事情搞得太复杂，但这基本上就是他的工作原理，

159
00:12:47,019 --> 00:12:54,330
现在引号也可以用于include目录的位置，通过编译器

160
00:12:54,490 --> 00:13:01,629
所以你其实可以在任何地方用引号，我可以把iostream这个换成引号，将完全没问题

161
00:13:01,730 --> 00:13:05,919
所以方括号只用于编译器的include路径，引号用于所有

162
00:13:05,960 --> 00:13:10,960
但我一般喜欢只将它用于相对位置，还不如把方括号用起来

163
00:13:11,039 --> 00:13:17,019
ok，今天最后一件事，你可能发现这个iostream看起来不像个文件

164
00:13:17,100 --> 00:13:21,600
因为它没有扩展名，就叫iostream，这是怎么一回事呢

165
00:13:21,720 --> 00:13:28,850
其实，它是个文件，只是没有扩展名，写标准库的人决定这么干的

166
00:13:28,980 --> 00:13:41,500
为了区分c的标准库和c++标准库，c标准库里的头文件一般都有.h扩展名，而c++没有

167
00:13:41,649 --> 00:13:48,669
所以这也是一个区分哪些属于c标准库，哪些属于c++标准库的办法，就是是否有.h扩展名

168
00:13:48,700 --> 00:13:54,549
iostream跟其他东西一样，就是个文件，其实，在vs里，右击它，点击打开文件

169
00:13:54,669 --> 00:13:57,330
你可以看到它带领我们来到这个iostream头文件

170
00:13:57,389 --> 00:14:01,269
如果我们在这个标签上右击，选择打开包含文件夹

171
00:14:01,299 --> 00:14:06,980
可以看到它其实位于我们的计算机，在这个目录下，在这里，iostream文件

172
00:14:07,000 --> 00:14:12,000
ok，这就是了，头文件，很简单，我们在该系列会大量运用它

173
00:14:12,190 --> 00:14:17,190
所以会有很多的例子，你可以看我是怎么用它的，你会看到你该如何使用它

174
00:14:17,259 --> 00:14:20,049
但你现在应该懂了它们如何工作，以及它们被用于何处

175
00:14:20,090 --> 00:14:23,399
不管怎样，我得走了，真的越来越冷了

176
00:14:23,399 --> 00:14:25,124
希望你们能喜欢这个视频

177
00:14:25,124 --> 00:14:30,625
如你们所见，在外面做事情是很有趣的

178
00:14:30,625 --> 00:14:34,575
我喜欢旅行，相比宅在家里，这对我来说更有趣，特别是周六的下午。

179
00:14:34,575 --> 00:14:37,299
尽管今天的天气很糟糕，其实我应该在家里

180
00:14:37,299 --> 00:14:41,774
不管怎样，我现在在这里了，你可以在推个和Ins上关注我。

181
00:14:41,774 --> 00:14:50,000
...

182
00:14:50,000 --> 00:14:53,350
下个视频见，Good Bye!

