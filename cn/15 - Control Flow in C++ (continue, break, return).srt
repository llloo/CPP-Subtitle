1
00:00:00,000 --> 00:00:01,879
Hey 大家好 我是cherno

2
00:00:01,879 --> 00:00:04,330
欢迎大家收看C++系列的视频

3
00:00:04,330 --> 00:00:06,629
今天我们要来讲一讲有关控制流语句的知识

4
00:00:06,629 --> 00:00:09,400
这是上一期视频的续集

5
00:00:09,400 --> 00:00:12,179
如果你们还没看过上周那期关于循环的视频

6
00:00:12,179 --> 00:00:13,179
你们快去看看那期视频

7
00:00:13,179 --> 00:00:14,150
链接应该就在页面的附近

8
00:00:14,150 --> 00:00:16,929
控制流语句通常是和循环一起使用的

9
00:00:16,929 --> 00:00:21,230
也就是说，它让我们可以更好地控制循环了

10
00:00:21,230 --> 00:00:26,230
有三个主要的控制流语句 Continue\break\return 

11
00:00:26,230 --> 00:00:27,750
它们的功能有所不同

12
00:00:27,750 --> 00:00:30,000
continue只能用在循环内部

13
00:00:30,000 --> 00:00:36,979
简单来说continue的意思是：如果还能进行迭代的话 直接进行下一次的迭代.否则，就会结束循环。

14
00:00:36,979 --> 00:00:41,200
break主要是用在循环里的 但是它也经常出现在switch语句中

15
00:00:41,200 --> 00:00:44,399
它的功能是，直接跳出循环

16
00:00:44,399 --> 00:00:50,229
最后，return可以说是功能最强大的一个了

17
00:00:50,229 --> 00:00:53,130
因为return会直接完全地退出函数

18
00:00:53,130 --> 00:00:56,549
如果你在函数内 执行到了return命令

19
00:00:56,549 --> 00:00:58,100
你会直接退出这个函数

20
00:00:58,100 --> 00:01:00,549
这个函数当然也需要一个返回值

21
00:01:00,549 --> 00:01:02,729
当你只有个return，就会return它自己

22
00:01:02,729 --> 00:01:04,599
只有void是可以直接用return的

23
00:01:04,599 --> 00:01:08,900
如果你的函数需要返回值 你在输入return的时候就必须要提供值

24
00:01:08,900 --> 00:01:12,420
别的不多说了 直接来看看我们的例子

25
00:01:12,420 --> 00:01:16,900
这是我们上期视频留下来的程序 直接运行它

26
00:01:16,900 --> 00:01:18,900
你会看到在屏幕上输出了很多次的hello world

27
00:01:18,900 --> 00:01:22,719
下面还有两个没有包含内容的while循环 和do-while循环

28
00:01:22,719 --> 00:01:24,829
我可以把他们直接删除 因为我们根本不需要他们

29
00:01:24,849 --> 00:01:29,299
我会从上次的程序中保存下来的东西只有只有这个for循环

30
00:01:29,299 --> 00:01:32,219
第一个上场的控制流语句是 continue

31
00:01:32,219 --> 00:01:35,200
continue语句会让我们直接跳到下一个循环的迭代

32
00:01:35,200 --> 00:01:41,650
如果我们在这儿写了continue 这根本不会影响到循环

33
00:01:41,650 --> 00:01:44,219
因为这已经是在循环的最后

34
00:01:44,219 --> 00:01:47,450
到了这行之后就直接进行下一次的循环

35
00:01:47,450 --> 00:01:49,530
这并不能修改循环的工作

36
00:01:49,530 --> 00:01:57,079
如果我输入if(i%2==0) continue;

37
00:01:57,079 --> 00:02:01,150
然后再运行我的程序 你就会看见

38
00:02:01,150 --> 00:02:04,750
发生的是它跳过了从第一次之后，每个第二次的迭代

39
00:02:04,750 --> 00:02:09,750
为了更好地说明发生了什么 我们在这引入数字

40
00:02:09,750 --> 00:02:14,750
所以我让程序不仅输入hello world 还输出每次循环 i的值

41
00:02:14,750 --> 00:02:20,599
如果我这么写 按F5你可以看到我们的hello world只在奇数次的迭代中

42
00:02:20,599 --> 00:02:23,500
也就是说当i为0时 就不会输出hello world

43
00:02:23,500 --> 00:02:25,500
因为0对2求余结果是0

44
00:02:25,500 --> 00:02:28,430
if后的语句就为真 就执行continue操作

45
00:02:28,430 --> 00:02:31,000
当i等于1时 我们就要执行log函数了

46
00:02:31,000 --> 00:02:32,000
当i等于2时 不执行

47
00:02:32,000 --> 00:02:33,780
当i等于3时 我们又要执行log函数了

48
00:02:33,780 --> 00:02:35,219
当i等于4时 不执行

49
00:02:35,219 --> 00:02:36,500
当然i等于5的情况不用考虑

50
00:02:36,500 --> 00:02:39,050
因为当i等于5时，我们就跳出了这个for循环

51
00:02:39,050 --> 00:02:42,199
因为这句，说明i必须小于5

52
00:02:42,199 --> 00:02:47,199
我们可以把这个条件改得稍微简单一点 比如 if(i>2)

53
00:02:47,199 --> 00:02:49,949
所以在这个情况下，应该发生的是

54
00:02:49,949 --> 00:02:55,849
当i是0、1或者2时 log函数会执行，在那次迭代情况下i的数值就应该被打印出来

55
00:02:55,849 --> 00:02:58,550
然而当i是3或者4的时候 就不会有这种情况

56
00:02:58,550 --> 00:03:01,449
如果我们运行这个程序 你可以看到 三次的hello world

57
00:03:01,449 --> 00:03:03,680
对于continue已经讲得足够多了

58
00:03:03,680 --> 00:03:08,680
我的意思是 只要运行到continue 就开始了下一次循环的迭代

59
00:03:08,680 --> 00:03:10,469
在第8行放置一个断点来debug这段代码

60
00:03:10,469 --> 00:03:11,819
这能让你了解得更深入

61
00:03:11,819 --> 00:03:15,069
所以你可以看到 在这 i等于0 所以不会触发 continue

62
00:03:15,069 --> 00:03:17,879
所以就继续往下走去执行log

63
00:03:17,879 --> 00:03:20,379
当i等于1和i等于2时都是一样的

64
00:03:20,379 --> 00:03:25,379
当i等于3时，3>2我们就要执行continue

65
00:03:25,379 --> 00:03:28,300
这意味着如果我现在按下F10 它不会向下去执行Log

66
00:03:28,300 --> 00:03:33,300
你可以看到它直接跳转回到开始的地方，然后它会执行i++

67
00:03:33,300 --> 00:03:36,199
再判断循环条件 然后再跳回到这里

68
00:03:36,199 --> 00:03:38,379
在本例中，现在将会执行一模一样的操作

69
00:03:38,487 --> 00:03:40,530
好的，cotinue 语句就说到这里

70
00:03:40,530 --> 00:03:42,180
我们现在来看一下break

71
00:03:42,180 --> 00:03:45,129
如果我现在就仅仅是把这个continue改成break

72
00:03:45,129 --> 00:03:46,699
还是会得到和前面一样的结果

73
00:03:46,699 --> 00:03:50,780
你可以看到  我们得到了0 1 2没有别的

74
00:03:50,780 --> 00:03:53,500
如果我们重新回到我们的第一个例子

75
00:03:53,500 --> 00:03:58,719
If(i%2==0)然后按F5，你可以看到现在什么也没得到

76
00:03:58,719 --> 00:04:01,180
举个稍微好一点的例子

77
00:04:01,180 --> 00:04:05,449
把条件改成if((i+1)%2==0)

78
00:04:05,449 --> 00:04:07,129
如果我现在再把它改回continue

79
00:04:07,129 --> 00:04:11,250
你可以看到现在得到的不是奇数 而是偶数

80
00:04:11,250 --> 00:04:13,180
而是偶数 所以现在我们输出了 0 2 4

81
00:04:13,180 --> 00:04:22,399
如果我现在把这个continue替换成break 就会发生 只打印了第一行 

82
00:04:22,399 --> 00:04:26,269
因为每当它运行到break的时候 意味着 循环结束了

83
00:04:26,269 --> 00:04:31,980
我们在这里设置断点，然后运行程序

84
00:04:31,980 --> 00:04:34,730
然后第一次运行时，这个条件不为真

85
00:04:34,730 --> 00:04:35,769
所以不运行break语句

86
00:04:35,769 --> 00:04:41,379
第二次循环的时候，我们就会运行到break语句 因为这次判断条件是真

87
00:04:41,379 --> 00:04:44,980
如果我现在按下F10我们就会马上跳出循环，跳到代码的下一行

88
00:04:44,980 --> 00:04:47,769
这就是break他会完全break掉我们的for循环

89
00:04:47,769 --> 00:04:51,500
当然这种在循环中的控制流语句适用于所有的循环

90
00:04:51,500 --> 00:04:54,800
所以for循环、while循环、do-while循环他们的工作原理是一样的

91
00:04:54,800 --> 00:04:58,050
好，最后一个是return

92
00:04:58,050 --> 00:05:02,129
这是一个需要整数作为返回值的函数

93
00:05:02,129 --> 00:05:04,819
所以我们可以输入return我们必须要返回一些东西

94
00:05:04,819 --> 00:05:09,399
我们可以试着这样写 然后按下F7 接着运行失败了

95
00:05:09,399 --> 00:05:13,680
因为，你可以看这，这里提醒我们main函数需要一个返回值

96
00:05:13,680 --> 00:05:16,569
因为声明的时候就已经做了规定

97
00:05:16,569 --> 00:05:18,629
所以我可以输入 return 0

98
00:05:18,629 --> 00:05:20,250
当然 0 是一个有效的整数

99
00:05:20,250 --> 00:05:25,899
如果我运行这段代码，在return处就会直接关闭我们的程序

100
00:05:25,899 --> 00:05:29,730
因为我的程序没有运行到 std::cin.get();这行代码

101
00:05:29,800 --> 00:05:32,399
这行代码可以保持运行窗口是打开的

102
00:05:32,399 --> 00:05:34,199
因为这行代码让电脑期待我们去提供输入

103
00:05:34,199 --> 00:05:36,850
所以我再次设置好断点然后运行我的程序

104
00:05:36,850 --> 00:05:41,129
你就可以看到 第一次，运行得很好，输出了hello，world

105
00:05:41,129 --> 00:05:47,519
第二次循环 当我运行到return 0；的时候直接就跳到了最后的}

106
00:05:47,519 --> 00:05:49,250
因为这个函数结束了

107
00:05:49,250 --> 00:05:56,350
还有一个关于return要注意是，你不用像break和continue那样在循环内使用

108
00:05:56,350 --> 00:06:02,750
return可以被写在任何地方 所以我们可以写if(5>8) return0;

109
00:06:02,750 --> 00:06:06,129
在这里我必须提供一个值，因为这个函数需要返回一个整数

110
00:06:06,129 --> 00:06:10,850
所以return没必要在一个循环内，可以在代码的任何地方

111
00:06:10,850 --> 00:06:13,819
你甚至可以不要有if语句，你可以写成这样

112
00:06:13,819 --> 00:06:18,819
当然，在本例中最后一行代码在任何情况下都不会被运行

113
00:06:18,819 --> 00:06:20,199
所以这行就是一个”死“代码

114
00:06:20,199 --> 00:06:24,769
有些编译器，尤其是在其他编程语言的情况下，将会严格地限制你写这种代码

115
00:06:24,850 --> 00:06:27,899
因为在这种情况下，删除这行也没事，反正永远都不会被调用。

116
00:06:27,899 --> 00:06:30,629
关于控制流语句已经讲了足够多了

117
00:06:30,629 --> 00:06:33,949
return可以在任何地方使用 它会退出当前的函数

118
00:06:33,949 --> 00:06:39,399
当然，请你记住，如果你的函数需要返回一个值 那就必须要输入一个返回的值

119
00:06:39,399 --> 00:06:44,399
这些控制流语句就控制了 程序的运行

120
00:06:44,399 --> 00:06:50,649
这些循环、控制流、if语句就是逻辑编程的本质

121
00:06:50,649 --> 00:06:54,800
这些是你来控制程序运行的的工具

122
00:06:54,800 --> 00:06:57,350
比如 哪些语句接下来要执行之类的问题

123
00:06:57,350 --> 00:07:07,699
if语句、条件语句、循环、控制流语句是可以用来修改程序运行情况的唯一工具

124
00:07:07,699 --> 00:07:11,519
除非你想直接把地址写入指令指针(IP)，别这么做

125
00:07:11,519 --> 00:07:14,180
这个系列视频逐渐进行下去之后

126
00:07:14,180 --> 00:07:19,850
我可能会开始写一些应用，届时会经常使用到这些控制流语句

127
00:07:19,850 --> 00:07:22,680
到时候会给大家展示该在何处使用，还有如何去使用它

128
00:07:22,680 --> 00:07:28,430
也可能会给大家展示如何写代码不去用它，或者用别的语句来完成

129
00:07:28,430 --> 00:07:32,680
如果你想看到一些更有说明力的视频的话，就等着看我之后的视频吧

130
00:07:32,680 --> 00:07:37,350
当我们开始写真正的代码的时候，肯定会讲到包含这一块的事

131
00:07:37,350 --> 00:07:40,375
因为这些都是编写一个应用的基础

132
00:07:40,375 --> 00:07:44,983
最后我希望大家都能喜欢这个视频，请记得点赞

133
00:07:45,330 --> 00:07:50,330
记得在推特和Ins上关注我

134
00:07:50,816 --> 00:07:55,816
...

