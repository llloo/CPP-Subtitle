1
00:00:00,000 --> 00:00:04,639
Hey 大家好！我是Cherno！欢迎回到我的C++系列

2
00:00:04,639 --> 00:00:07,910
所以你想用Linux写C++

3
00:00:08,300 --> 00:00:09,509
是大佬！

4
00:00:09,529 --> 00:00:13,949
那就来看看怎么在Linux上搭好写C++的环境

5
00:00:13,949 --> 00:00:16,839
当然，在Linux上写C++有很多的工具

6
00:00:16,839 --> 00:00:19,890
很多写代码、编译代码的方法

7
00:00:19,980 --> 00:00:23,129
我就讲一种我个人最喜欢的

8
00:00:23,129 --> 00:00:25,129
希望你已经准备好对付麻烦了

9
00:00:25,129 --> 00:00:26,510
你可是用Linux的！

10
00:00:26,510 --> 00:00:29,670
所以你应该做好了准备

11
00:00:29,670 --> 00:00:34,500
总的来说，我们用cmake生成项目文件给CodeLite用

12
00:00:34,500 --> 00:00:36,549
CodeLite是一个挺好用的轻量级IDE

13
00:00:36,549 --> 00:00:40,979
想要的功能基本都有，也不复杂

14
00:00:40,979 --> 00:00:42,979
正适合我们

15
00:00:42,979 --> 00:00:44,829
那就让我们开始设置吧

16
00:00:44,920 --> 00:00:48,250
我现在在Virtual Box的虚拟机里面运行Mint 18.1

17
00:00:48,250 --> 00:00:50,250
GUI用的是KDE

18
00:00:50,250 --> 00:00:52,490
打开一个终端

19
00:00:53,490 --> 00:00:54,159
就可以开始了

20
00:00:54,250 --> 00:00:56,520
最开始我们先设置好文件夹

21
00:00:56,520 --> 00:01:00,500
创建一个dev文件夹存所有的开发文件

22
00:01:00,700 --> 00:01:05,400
里面每个项目对应一个文件夹

23
00:01:05,790 --> 00:01:08,140
所以我在dev里面创建一个Helloworld的文件夹

24
00:01:08,140 --> 00:01:12,700
我们这里做的Helloworld项目都放里面

25
00:01:12,700 --> 00:01:15,599
因为我们还得装软件

26
00:01:15,599 --> 00:01:21,120
我们要一个编译器cmake和CodeLite

27
00:01:21,170 --> 00:01:25,810
安装软件之前先sudo apt-get update

28
00:01:25,819 --> 00:01:33,849
输入root账户密码，就可以更新软件列表

29
00:01:33,849 --> 00:01:37,659
搞定了就可以直接安装了

30
00:01:37,659 --> 00:01:43,659
输入sudo apt-get install

31
00:01:43,659 --> 00:01:47,000
在终端里编辑文本我喜欢用vim

32
00:01:47,000 --> 00:01:50,989
我们还要g++作为编译器

33
00:01:50,989 --> 00:01:52,670
CodeLite作为IDE

34
00:01:52,670 --> 00:01:55,650
还有cmake

35
00:01:55,650 --> 00:01:57,650
回车

36
00:01:57,650 --> 00:01:59,420
可以看到它要198M

37
00:01:59,420 --> 00:02:01,719
输入y确认继续，然后等一会

38
00:02:01,719 --> 00:02:05,180
成功以后，clear一下终端

39
00:02:05,180 --> 00:02:07,609
现在目录里什么也没有

40
00:02:07,890 --> 00:02:11,840
我喜欢建个src文件夹放所有的源码

41
00:02:12,300 --> 00:02:15,889
在src里新建一个文件main.cpp

42
00:02:15,889 --> 00:02:18,979
先不写东西，就建个空文件

43
00:02:18,979 --> 00:02:21,979
等CodeLite帮我们处理

44
00:02:21,979 --> 00:02:23,870
我们要建个cmake文件

45
00:02:23,870 --> 00:02:27,750
还有构建脚本来生成项目文件

46
00:02:27,750 --> 00:02:31,879
先弄cmake的，我这里用了vim，你随便用什么都行

47
00:02:31,900 --> 00:02:35,250
文件名叫CMakeLists.txt

48
00:02:35,250 --> 00:02:40,860
这个文件是告诉cmake怎么生成CodeLite项目文件

49
00:02:40,860 --> 00:02:45,460
先保证cmake的最低版本

50
00:02:45,460 --> 00:02:50,270
按照经验，我喜欢3.5以上的

51
00:02:51,530 --> 00:02:54,539
然后给项目个名字，这里起了HelloWorld

52
00:02:55,870 --> 00:02:58,509
然后设置一些变量

53
00:02:58,780 --> 00:03:11,349
编译选项我们用现有的CMAKE_CXX_FLAGS

54
00:03:11,349 --> 00:03:17,789
参数我们要显示所有的错误和警告

55
00:03:17,789 --> 00:03:25,550
至于标准库std的版本这里用C++11还是14不重要

56
00:03:25,550 --> 00:03:28,189
毕竟我们就打印个Hello World

57
00:03:28,520 --> 00:03:31,550
这里用C++14显得更高级

58
00:03:32,469 --> 00:03:46,479
再设置一个source_dir变量指向这个项目下的src目录

59
00:03:46,479 --> 00:03:49,199
PROJECT_SOURCE_DIR是当前目录

60
00:03:49,349 --> 00:03:54,460
根目录下有刚建的src文件夹，里面是我们所有的代码，所以这样就好了

61
00:03:54,460 --> 00:04:02,750
我们刚设置好了两个变量，编译选项和源码目录

62
00:04:03,599 --> 00:04:07,300
现在我们要告诉编译器编译那个文件

63
00:04:07,300 --> 00:04:11,400
一样的，我们用cmake现有的glob

64
00:04:11,400 --> 00:04:17,370
指明源码都在source_dir里面

65
00:04:17,370 --> 00:04:20,399
source_dir就是上面的那个变量

66
00:04:20,399 --> 00:04:25,610
然后里面所有以cpp结尾的文件都要编译

67
00:04:25,610 --> 00:04:30,230
假如有其他的包含目录，也要在设置，但是这里没有

68
00:04:30,230 --> 00:04:33,319
我们这里指明一下生成的目标可执行文件

69
00:04:33,319 --> 00:04:38,779
项目名HelloWorld，然后要传入的源码

70
00:04:38,779 --> 00:04:41,850
假如有其他的包含目录也要在这里添加

71
00:04:41,850 --> 00:04:43,610
这里就这样了

72
00:04:44,910 --> 00:04:48,110
整个cmakelists就写好了。保存，然后退出(vim命令 :wq)

73
00:04:48,110 --> 00:04:51,100
现在来写运行cmake的脚本

74
00:04:51,100 --> 00:04:53,399
创建build.sh

75
00:04:53,399 --> 00:04:55,399
这其实不是构建程序的

76
00:04:55,399 --> 00:04:58,750
它其实就生成项目文件

77
00:04:58,750 --> 00:05:03,160
首先我们确定bash能正常运行脚本

78
00:05:03,180 --> 00:05:08,970
第一行写#!/bin/sh

79
00:05:08,970 --> 00:05:13,980
然后输入cmake -G

80
00:05:14,000 --> 00:05:18,399
生成目标是CodeLite-unix makefile

81
00:05:18,399 --> 00:05:20,399
你也可以用ninja

82
00:05:20,399 --> 00:05:24,899
应该比这个好，但这就是个测试环境的项目

83
00:05:24,899 --> 00:05:30,699
cmake构建模式这里设置为debug

84
00:05:30,699 --> 00:05:36,129
毕竟大部分时间我们都会在debug

85
00:05:36,129 --> 00:05:39,000
然后CodeLite的L是大写的

86
00:05:39,000 --> 00:05:44,540
好了，保存退出，脚本就这么简单

87
00:05:44,540 --> 00:05:49,740
我们可以运行脚本了，Linux里面运行脚本要先标记为可执行文件

88
00:05:49,740 --> 00:05:57,199
在终端运行chmod +x build.sh来添加可执行权限

89
00:05:57,199 --> 00:05:59,980
现在我们可以运行了

90
00:06:00,160 --> 00:06:04,329
假如一切顺利，你就可以看到它生成了一些构建文件

91
00:06:04,329 --> 00:06:07,850
看下目录，可以发现很多新文件

92
00:06:07,850 --> 00:06:11,889
主要的文件是helloworld.project和helloworld.workspace

93
00:06:11,889 --> 00:06:16,720
另外的makefile文件可以忽略

94
00:06:16,720 --> 00:06:21,620
现在怎么在CodeLite里面打开呢？我一般从终端打开

95
00:06:21,620 --> 00:06:25,889
运行CodeLite helloworld.workspace

96
00:06:29,649 --> 00:06:32,100
确认，然后CodeLite就应该打开了

97
00:06:32,100 --> 00:06:36,490
你可能会要设置一遍，我就先跳过了

98
00:06:36,490 --> 00:06:39,579
可以看到我们的项目和目标在这里

99
00:06:40,740 --> 00:06:41,819
放大点窗口

100
00:06:41,819 --> 00:06:45,500
这里是包含目录，外部头文件都在里面

101
00:06:45,500 --> 00:06:46,740
源码应该在这里

102
00:06:46,740 --> 00:06:48,740
双击打开

103
00:06:49,240 --> 00:07:05,024
写一个简单的helloworld程序

104
00:07:05,050 --> 00:07:06,930
写好了保存

105
00:07:06,930 --> 00:07:10,100
假如你想构建程序，点构建-构建项目

106
00:07:11,790 --> 00:07:16,759
输出在下面，0错误0警告，可以起飞了

107
00:07:17,500 --> 00:07:27,649
回到终端，列出目录ls，可以看到helloworld的程序文件，它是可执行文件

108
00:07:27,649 --> 00:07:29,649
运行一下

109
00:07:29,649 --> 00:07:31,459
我们就向世界问了个好

110
00:07:31,649 --> 00:07:34,500
我们写好了第一个程序

111
00:07:34,500 --> 00:07:40,600
想在CodeLite里运行的话，在首选项里勾上使用内置终端

112
00:07:41,100 --> 00:07:43,740
然后构建运行

113
00:07:43,740 --> 00:07:48,800
就可以看到在CodeLite里面运行了

114
00:07:48,800 --> 00:07:54,500
Linux环境搭建就这样，我们可以开始学C++写C++了

115
00:07:54,500 --> 00:07:56,850
接下来的几个视频讲的是C++的原理

116
00:07:56,850 --> 00:08:00,180
因为那是写好C++的关键

