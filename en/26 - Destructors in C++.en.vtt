WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.730 align:start position:0%
 
Hey<00:00:00.120><c> look</c><00:00:00.359><c> guys</c><00:00:00.539><c> my</c><00:00:00.840><c> name</c><00:00:01.020><c> is</c><00:00:01.050><c> the</c><00:00:01.290><c> Cherno</c><00:00:01.530><c> and</c>

00:00:01.730 --> 00:00:01.740 align:start position:0%
Hey look guys my name is the Cherno and
 

00:00:01.740 --> 00:00:03.290 align:start position:0%
Hey look guys my name is the Cherno and
welcome<00:00:01.979><c> back</c><00:00:02.010><c> to</c><00:00:02.310><c> my</c><00:00:02.429><c> stay</c><00:00:02.639><c> plus</c><00:00:02.820><c> plus</c><00:00:03.060><c> series</c>

00:00:03.290 --> 00:00:03.300 align:start position:0%
welcome back to my stay plus plus series
 

00:00:03.300 --> 00:00:04.309 align:start position:0%
welcome back to my stay plus plus series
a<00:00:03.629><c> lot</c><00:00:03.780><c> of</c><00:00:03.840><c> time</c><00:00:03.959><c> we</c><00:00:04.049><c> talked</c><00:00:04.200><c> about</c>

00:00:04.309 --> 00:00:04.319 align:start position:0%
a lot of time we talked about
 

00:00:04.319 --> 00:00:06.410 align:start position:0%
a lot of time we talked about
constructors<00:00:04.950><c> in</c><00:00:05.069><c> C++</c><00:00:05.640><c> and</c><00:00:05.940><c> what</c><00:00:06.089><c> they</c><00:00:06.240><c> are</c>

00:00:06.410 --> 00:00:06.420 align:start position:0%
constructors in C++ and what they are
 

00:00:06.420 --> 00:00:07.820 align:start position:0%
constructors in C++ and what they are
and<00:00:06.569><c> how</c><00:00:06.690><c> to</c><00:00:06.720><c> use</c><00:00:06.839><c> them</c><00:00:07.230><c> definitely</c><00:00:07.440><c> check</c><00:00:07.740><c> out</c>

00:00:07.820 --> 00:00:07.830 align:start position:0%
and how to use them definitely check out
 

00:00:07.830 --> 00:00:09.830 align:start position:0%
and how to use them definitely check out
that<00:00:08.010><c> video</c><00:00:08.189><c> if</c><00:00:08.370><c> you</c><00:00:08.639><c> haven't</c><00:00:09.030><c> already</c><00:00:09.150><c> and</c>

00:00:09.830 --> 00:00:09.840 align:start position:0%
that video if you haven't already and
 

00:00:09.840 --> 00:00:10.790 align:start position:0%
that video if you haven't already and
today<00:00:10.110><c> we're</c><00:00:10.230><c> going</c><00:00:10.320><c> to</c><00:00:10.410><c> talk</c><00:00:10.500><c> about</c><00:00:10.530><c> that</c>

00:00:10.790 --> 00:00:10.800 align:start position:0%
today we're going to talk about that
 

00:00:10.800 --> 00:00:13.070 align:start position:0%
today we're going to talk about that
evil<00:00:11.130><c> twin</c><00:00:11.400><c> B</c><00:00:11.639><c> destructor</c><00:00:12.300><c> so</c><00:00:12.660><c> it's</c><00:00:12.840><c> the</c><00:00:12.900><c> only</c>

00:00:13.070 --> 00:00:13.080 align:start position:0%
evil twin B destructor so it's the only
 

00:00:13.080 --> 00:00:14.600 align:start position:0%
evil twin B destructor so it's the only
how<00:00:13.259><c> a</c><00:00:13.290><c> constructor</c><00:00:13.980><c> runs</c><00:00:14.160><c> when</c><00:00:14.309><c> you</c><00:00:14.370><c> create</c><00:00:14.580><c> a</c>

00:00:14.600 --> 00:00:14.610 align:start position:0%
how a constructor runs when you create a
 

00:00:14.610 --> 00:00:16.640 align:start position:0%
how a constructor runs when you create a
new<00:00:14.639><c> instance</c><00:00:14.969><c> of</c><00:00:15.330><c> an</c><00:00:15.480><c> object</c><00:00:15.599><c> a</c><00:00:16.080><c> destructor</c>

00:00:16.640 --> 00:00:16.650 align:start position:0%
new instance of an object a destructor
 

00:00:16.650 --> 00:00:19.130 align:start position:0%
new instance of an object a destructor
runs<00:00:17.039><c> when</c><00:00:17.250><c> you</c><00:00:17.369><c> destroy</c><00:00:17.910><c> an</c><00:00:18.210><c> object</c><00:00:18.720><c> so</c><00:00:18.990><c> any</c>

00:00:19.130 --> 00:00:19.140 align:start position:0%
runs when you destroy an object so any
 

00:00:19.140 --> 00:00:20.929 align:start position:0%
runs when you destroy an object so any
time<00:00:19.380><c> an</c><00:00:19.500><c> object</c><00:00:19.619><c> gets</c><00:00:20.070><c> destroyed</c><00:00:20.550><c> the</c>

00:00:20.929 --> 00:00:20.939 align:start position:0%
time an object gets destroyed the
 

00:00:20.939 --> 00:00:22.580 align:start position:0%
time an object gets destroyed the
destruction<00:00:21.359><c> method</c><00:00:21.660><c> will</c><00:00:21.869><c> get</c><00:00:22.109><c> called</c><00:00:22.350><c> the</c>

00:00:22.580 --> 00:00:22.590 align:start position:0%
destruction method will get called the
 

00:00:22.590 --> 00:00:24.769 align:start position:0%
destruction method will get called the
constructor<00:00:23.340><c> is</c><00:00:23.519><c> usually</c><00:00:23.880><c> we</c><00:00:24.029><c> set</c><00:00:24.300><c> variables</c>

00:00:24.769 --> 00:00:24.779 align:start position:0%
constructor is usually we set variables
 

00:00:24.779 --> 00:00:26.599 align:start position:0%
constructor is usually we set variables
up<00:00:24.960><c> or</c><00:00:25.199><c> do</c><00:00:25.320><c> any</c><00:00:25.470><c> kind</c><00:00:25.710><c> of</c><00:00:25.740><c> initialization</c><00:00:26.580><c> that</c>

00:00:26.599 --> 00:00:26.609 align:start position:0%
up or do any kind of initialization that
 

00:00:26.609 --> 00:00:28.099 align:start position:0%
up or do any kind of initialization that
you<00:00:26.820><c> need</c><00:00:27.000><c> to</c><00:00:27.150><c> do</c><00:00:27.330><c> and</c><00:00:27.599><c> similarly</c><00:00:27.990><c> the</c>

00:00:28.099 --> 00:00:28.109 align:start position:0%
you need to do and similarly the
 

00:00:28.109 --> 00:00:30.230 align:start position:0%
you need to do and similarly the
destructor<00:00:28.680><c> is</c><00:00:28.890><c> where</c><00:00:29.189><c> you</c><00:00:29.369><c> uninitialized</c>

00:00:30.230 --> 00:00:30.240 align:start position:0%
destructor is where you uninitialized
 

00:00:30.240 --> 00:00:31.910 align:start position:0%
destructor is where you uninitialized
anything<00:00:30.720><c> that</c><00:00:30.869><c> you</c><00:00:30.929><c> might</c><00:00:31.080><c> have</c><00:00:31.320><c> to</c><00:00:31.529><c> or</c><00:00:31.650><c> clean</c>

00:00:31.910 --> 00:00:31.920 align:start position:0%
anything that you might have to or clean
 

00:00:31.920 --> 00:00:33.440 align:start position:0%
anything that you might have to or clean
any<00:00:32.070><c> memory</c><00:00:32.430><c> that</c><00:00:32.640><c> you've</c><00:00:32.790><c> used</c><00:00:33.090><c> the</c>

00:00:33.440 --> 00:00:33.450 align:start position:0%
any memory that you've used the
 

00:00:33.450 --> 00:00:34.850 align:start position:0%
any memory that you've used the
destructor<00:00:33.809><c> applies</c><00:00:34.020><c> to</c><00:00:34.170><c> both</c><00:00:34.290><c> stack</c><00:00:34.620><c> and</c>

00:00:34.850 --> 00:00:34.860 align:start position:0%
destructor applies to both stack and
 

00:00:34.860 --> 00:00:36.650 align:start position:0%
destructor applies to both stack and
heap<00:00:34.920><c> allocated</c><00:00:35.700><c> objects</c><00:00:36.210><c> so</c><00:00:36.420><c> if</c><00:00:36.540><c> you</c>

00:00:36.650 --> 00:00:36.660 align:start position:0%
heap allocated objects so if you
 

00:00:36.660 --> 00:00:38.600 align:start position:0%
heap allocated objects so if you
allocate<00:00:36.809><c> an</c><00:00:37.110><c> object</c><00:00:37.440><c> using</c><00:00:37.590><c> new</c><00:00:37.770><c> when</c><00:00:38.520><c> you</c>

00:00:38.600 --> 00:00:38.610 align:start position:0%
allocate an object using new when you
 

00:00:38.610 --> 00:00:40.160 align:start position:0%
allocate an object using new when you
call<00:00:38.820><c> delete</c><00:00:39.180><c> the</c><00:00:39.420><c> destructor</c><00:00:39.870><c> will</c><00:00:40.020><c> get</c>

00:00:40.160 --> 00:00:40.170 align:start position:0%
call delete the destructor will get
 

00:00:40.170 --> 00:00:41.840 align:start position:0%
call delete the destructor will get
called<00:00:40.440><c> if</c><00:00:40.829><c> you</c><00:00:40.950><c> just</c><00:00:41.100><c> have</c><00:00:41.219><c> a</c><00:00:41.250><c> stack-based</c>

00:00:41.840 --> 00:00:41.850 align:start position:0%
called if you just have a stack-based
 

00:00:41.850 --> 00:00:43.700 align:start position:0%
called if you just have a stack-based
object<00:00:42.210><c> and</c><00:00:42.360><c> when</c><00:00:42.480><c> the</c><00:00:42.570><c> scope</c><00:00:42.750><c> and</c><00:00:42.960><c> the</c><00:00:43.379><c> object</c>

00:00:43.700 --> 00:00:43.710 align:start position:0%
object and when the scope and the object
 

00:00:43.710 --> 00:00:45.560 align:start position:0%
object and when the scope and the object
will<00:00:43.829><c> get</c><00:00:43.980><c> deleted</c><00:00:44.340><c> and</c><00:00:44.610><c> thus</c><00:00:44.940><c> the</c><00:00:45.180><c> destructor</c>

00:00:45.560 --> 00:00:45.570 align:start position:0%
will get deleted and thus the destructor
 

00:00:45.570 --> 00:00:47.540 align:start position:0%
will get deleted and thus the destructor
will<00:00:45.690><c> get</c><00:00:45.840><c> called</c><00:00:46.050><c> let's</c><00:00:46.950><c> dive</c><00:00:47.100><c> in</c><00:00:47.280><c> and</c><00:00:47.309><c> take</c><00:00:47.489><c> a</c>

00:00:47.540 --> 00:00:47.550 align:start position:0%
will get called let's dive in and take a
 

00:00:47.550 --> 00:00:48.830 align:start position:0%
will get called let's dive in and take a
look<00:00:47.579><c> at</c><00:00:47.760><c> some</c><00:00:47.879><c> examples</c><00:00:48.300><c> so</c><00:00:48.450><c> in</c><00:00:48.750><c> the</c>

00:00:48.830 --> 00:00:48.840 align:start position:0%
look at some examples so in the
 

00:00:48.840 --> 00:00:49.970 align:start position:0%
look at some examples so in the
constructor<00:00:49.289><c> video</c><00:00:49.500><c> we</c><00:00:49.649><c> created</c><00:00:49.739><c> this</c>

00:00:49.970 --> 00:00:49.980 align:start position:0%
constructor video we created this
 

00:00:49.980 --> 00:00:51.680 align:start position:0%
constructor video we created this
wonderful<00:00:50.340><c> entity</c><00:00:50.910><c> class</c><00:00:51.149><c> which</c><00:00:51.449><c> had</c>

00:00:51.680 --> 00:00:51.690 align:start position:0%
wonderful entity class which had
 

00:00:51.690 --> 00:00:53.600 align:start position:0%
wonderful entity class which had
multiple<00:00:52.230><c> constructors</c><00:00:52.829><c> here</c><00:00:53.070><c> let's</c><00:00:53.460><c> go</c>

00:00:53.600 --> 00:00:53.610 align:start position:0%
multiple constructors here let's go
 

00:00:53.610 --> 00:00:55.279 align:start position:0%
multiple constructors here let's go
ahead<00:00:53.730><c> and</c><00:00:54.000><c> add</c><00:00:54.120><c> a</c><00:00:54.149><c> destructor</c><00:00:54.690><c> and</c><00:00:55.140><c> these</c>

00:00:55.279 --> 00:00:55.289 align:start position:0%
ahead and add a destructor and these
 

00:00:55.289 --> 00:00:57.080 align:start position:0%
ahead and add a destructor and these
structure<00:00:55.590><c> begins</c><00:00:55.800><c> with</c><00:00:56.039><c> a</c><00:00:56.070><c> tilde</c><00:00:56.550><c> and</c><00:00:56.730><c> then</c>

00:00:57.080 --> 00:00:57.090 align:start position:0%
structure begins with a tilde and then
 

00:00:57.090 --> 00:00:58.849 align:start position:0%
structure begins with a tilde and then
the<00:00:57.239><c> name</c><00:00:57.510><c> of</c><00:00:57.690><c> our</c><00:00:57.780><c> class</c><00:00:57.989><c> so</c><00:00:58.469><c> basically</c><00:00:58.739><c> the</c>

00:00:58.849 --> 00:00:58.859 align:start position:0%
the name of our class so basically the
 

00:00:58.859 --> 00:01:00.139 align:start position:0%
the name of our class so basically the
only<00:00:59.010><c> difference</c><00:00:59.280><c> between</c><00:00:59.340><c> an</c><00:00:59.550><c> constructor</c>

00:01:00.139 --> 00:01:00.149 align:start position:0%
only difference between an constructor
 

00:01:00.149 --> 00:01:01.939 align:start position:0%
only difference between an constructor
and<00:01:00.359><c> destructor</c><00:01:00.539><c> in</c><00:01:01.050><c> terms</c><00:01:01.230><c> of</c><00:01:01.320><c> declaration</c>

00:01:01.939 --> 00:01:01.949 align:start position:0%
and destructor in terms of declaration
 

00:01:01.949 --> 00:01:04.579 align:start position:0%
and destructor in terms of declaration
and<00:01:02.129><c> definition</c><00:01:02.730><c> is</c><00:01:02.910><c> the</c><00:01:03.629><c> actual</c><00:01:04.049><c> tilde</c><00:01:04.559><c> that</c>

00:01:04.579 --> 00:01:04.589 align:start position:0%
and definition is the actual tilde that
 

00:01:04.589 --> 00:01:06.920 align:start position:0%
and definition is the actual tilde that
you<00:01:04.799><c> put</c><00:01:04.979><c> out</c><00:01:05.159><c> the</c><00:01:05.280><c> front</c><00:01:05.580><c> of</c><00:01:05.790><c> the</c><00:01:06.299><c> destructor</c>

00:01:06.920 --> 00:01:06.930 align:start position:0%
you put out the front of the destructor
 

00:01:06.930 --> 00:01:08.810 align:start position:0%
you put out the front of the destructor
now<00:01:07.260><c> you</c><00:01:07.530><c> know</c><00:01:07.680><c> at</c><00:01:07.799><c> the</c><00:01:07.890><c> destructor</c><00:01:08.430><c> in</c><00:01:08.610><c> this</c>

00:01:08.810 --> 00:01:08.820 align:start position:0%
now you know at the destructor in this
 

00:01:08.820 --> 00:01:10.250 align:start position:0%
now you know at the destructor in this
case<00:01:09.030><c> we</c><00:01:09.180><c> just</c><00:01:09.360><c> have</c><00:01:09.450><c> a</c><00:01:09.479><c> single</c><00:01:09.659><c> class</c><00:01:09.960><c> with</c>

00:01:10.250 --> 00:01:10.260 align:start position:0%
case we just have a single class with
 

00:01:10.260 --> 00:01:12.649 align:start position:0%
case we just have a single class with
two<00:01:10.619><c> members</c><00:01:11.220><c> x</c><00:01:11.460><c> and</c><00:01:11.670><c> y</c><00:01:11.790><c> there</c><00:01:12.030><c> is</c><00:01:12.150><c> absolutely</c>

00:01:12.649 --> 00:01:12.659 align:start position:0%
two members x and y there is absolutely
 

00:01:12.659 --> 00:01:14.450 align:start position:0%
two members x and y there is absolutely
no<00:01:13.020><c> cleaner</c><00:01:13.350><c> when</c><00:01:13.619><c> you</c><00:01:13.680><c> do</c><00:01:13.830><c> some</c><00:01:14.070><c> memories</c>

00:01:14.450 --> 00:01:14.460 align:start position:0%
no cleaner when you do some memories
 

00:01:14.460 --> 00:01:16.490 align:start position:0%
no cleaner when you do some memories
here<00:01:14.670><c> at</c><00:01:14.909><c> all</c><00:01:15.240><c> since</c><00:01:15.540><c> these</c><00:01:15.689><c> two</c><00:01:15.930><c> floats</c><00:01:16.229><c> are</c>

00:01:16.490 --> 00:01:16.500 align:start position:0%
here at all since these two floats are
 

00:01:16.500 --> 00:01:19.039 align:start position:0%
here at all since these two floats are
allocated<00:01:17.130><c> in</c><00:01:17.250><c> place</c><00:01:17.549><c> where</c><00:01:18.000><c> our</c><00:01:18.119><c> class</c><00:01:18.360><c> will</c>

00:01:19.039 --> 00:01:19.049 align:start position:0%
allocated in place where our class will
 

00:01:19.049 --> 00:01:21.350 align:start position:0%
allocated in place where our class will
talk<00:01:19.229><c> more</c><00:01:19.799><c> about</c><00:01:19.860><c> memory</c><00:01:20.430><c> allocations</c><00:01:21.180><c> and</c>

00:01:21.350 --> 00:01:21.360 align:start position:0%
talk more about memory allocations and
 

00:01:21.360 --> 00:01:22.760 align:start position:0%
talk more about memory allocations and
all<00:01:21.540><c> of</c><00:01:21.689><c> our</c><00:01:21.869><c> complicated</c><00:01:22.229><c> stuff</c><00:01:22.560><c> in</c><00:01:22.710><c> the</c>

00:01:22.760 --> 00:01:22.770 align:start position:0%
all of our complicated stuff in the
 

00:01:22.770 --> 00:01:24.620 align:start position:0%
all of our complicated stuff in the
future<00:01:22.920><c> so</c><00:01:23.250><c> don't</c><00:01:23.280><c> you</c><00:01:23.610><c> worry</c><00:01:23.820><c> but</c><00:01:24.390><c> for</c>

00:01:24.620 --> 00:01:24.630 align:start position:0%
future so don't you worry but for
 

00:01:24.630 --> 00:01:26.390 align:start position:0%
future so don't you worry but for
example<00:01:24.750><c> let's</c><00:01:25.320><c> go</c><00:01:25.409><c> ahead</c><00:01:25.500><c> and</c><00:01:25.770><c> add</c><00:01:25.920><c> a</c><00:01:26.100><c> message</c>

00:01:26.390 --> 00:01:26.400 align:start position:0%
example let's go ahead and add a message
 

00:01:26.400 --> 00:01:28.130 align:start position:0%
example let's go ahead and add a message
which<00:01:26.880><c> tells</c><00:01:27.210><c> us</c><00:01:27.360><c> that</c><00:01:27.390><c> the</c><00:01:27.659><c> object</c><00:01:28.020><c> has</c><00:01:28.049><c> been</c>

00:01:28.130 --> 00:01:28.140 align:start position:0%
which tells us that the object has been
 

00:01:28.140 --> 00:01:29.719 align:start position:0%
which tells us that the object has been
deleted<00:01:28.770><c> so</c><00:01:28.920><c> I</c><00:01:28.950><c> might</c><00:01:29.159><c> write</c><00:01:29.369><c> something</c><00:01:29.700><c> like</c>

00:01:29.719 --> 00:01:29.729 align:start position:0%
deleted so I might write something like
 

00:01:29.729 --> 00:01:34.190 align:start position:0%
deleted so I might write something like
destroyed<00:01:30.479><c> empty</c><00:01:31.250><c> and</c><00:01:32.600><c> that's</c><00:01:33.600><c> a</c><00:01:33.720><c> fine</c><00:01:33.930><c> in</c><00:01:34.079><c> our</c>

00:01:34.190 --> 00:01:34.200 align:start position:0%
destroyed empty and that's a fine in our
 

00:01:34.200 --> 00:01:36.580 align:start position:0%
destroyed empty and that's a fine in our
constructor<00:01:34.799><c> here</c><00:01:35.040><c> I'm</c><00:01:35.220><c> going</c><00:01:35.490><c> to</c><00:01:35.700><c> write</c>

00:01:36.580 --> 00:01:36.590 align:start position:0%
constructor here I'm going to write
 

00:01:36.590 --> 00:01:41.060 align:start position:0%
constructor here I'm going to write
constructor<00:01:37.590><c> and</c><00:01:37.829><c> T</c><00:01:39.229><c> or</c><00:01:40.229><c> I</c><00:01:40.290><c> guess</c><00:01:40.770><c> we</c><00:01:40.920><c> should</c>

00:01:41.060 --> 00:01:41.070 align:start position:0%
constructor and T or I guess we should
 

00:01:41.070 --> 00:01:42.530 align:start position:0%
constructor and T or I guess we should
call<00:01:41.100><c> it</c><00:01:41.369><c> created</c><00:01:41.850><c> since</c><00:01:42.060><c> the</c><00:01:42.150><c> cult</c><00:01:42.420><c> is</c>

00:01:42.530 --> 00:01:42.540 align:start position:0%
call it created since the cult is
 

00:01:42.540 --> 00:01:44.179 align:start position:0%
call it created since the cult is
destroyed<00:01:42.960><c> and</c><00:01:43.079><c> not</c><00:01:43.140><c> disrupted</c><00:01:43.680><c> I</c><00:01:43.860><c> want</c><00:01:44.130><c> to</c>

00:01:44.179 --> 00:01:44.189 align:start position:0%
destroyed and not disrupted I want to
 

00:01:44.189 --> 00:01:46.010 align:start position:0%
destroyed and not disrupted I want to
get<00:01:44.280><c> rid</c><00:01:44.430><c> of</c><00:01:44.460><c> is</c><00:01:44.579><c> constructed</c><00:01:45.119><c> it's</c><00:01:45.299><c> okay</c><00:01:45.869><c> to</c>

00:01:46.010 --> 00:01:46.020 align:start position:0%
get rid of is constructed it's okay to
 

00:01:46.020 --> 00:01:48.889 align:start position:0%
get rid of is constructed it's okay to
confused<00:01:46.530><c> I'll</c><00:01:46.799><c> initialize</c><00:01:47.100><c> X</c><00:01:47.549><c> and</c><00:01:47.909><c> Y</c><00:01:48.149><c> is</c><00:01:48.210><c> 0</c><00:01:48.720><c> as</c>

00:01:48.889 --> 00:01:48.899 align:start position:0%
confused I'll initialize X and Y is 0 as
 

00:01:48.899 --> 00:01:51.109 align:start position:0%
confused I'll initialize X and Y is 0 as
well<00:01:49.079><c> just</c><00:01:49.439><c> so</c><00:01:49.619><c> we're</c><00:01:49.860><c> not</c><00:01:49.890><c> crazy</c><00:01:50.220><c> I'll</c><00:01:50.850><c> get</c>

00:01:51.109 --> 00:01:51.119 align:start position:0%
well just so we're not crazy I'll get
 

00:01:51.119 --> 00:01:52.069 align:start position:0%
well just so we're not crazy I'll get
rid<00:01:51.210><c> of</c><00:01:51.299><c> this</c><00:01:51.479><c> as</c><00:01:51.600><c> well</c>

00:01:52.069 --> 00:01:52.079 align:start position:0%
rid of this as well
 

00:01:52.079 --> 00:01:54.950 align:start position:0%
rid of this as well
now<00:01:53.070><c> since</c><00:01:53.399><c> this</c><00:01:53.549><c> is</c><00:01:53.610><c> duck</c><00:01:54.119><c> allocated</c><00:01:54.689><c> we</c><00:01:54.810><c> will</c>

00:01:54.950 --> 00:01:54.960 align:start position:0%
now since this is duck allocated we will
 

00:01:54.960 --> 00:01:56.539 align:start position:0%
now since this is duck allocated we will
only<00:01:55.140><c> see</c><00:01:55.290><c> the</c><00:01:55.619><c> destructor</c><00:01:56.070><c> getting</c><00:01:56.310><c> called</c>

00:01:56.539 --> 00:01:56.549 align:start position:0%
only see the destructor getting called
 

00:01:56.549 --> 00:01:58.789 align:start position:0%
only see the destructor getting called
when<00:01:56.939><c> the</c><00:01:57.060><c> main</c><00:01:57.299><c> function</c><00:01:57.750><c> exits</c><00:01:58.229><c> which</c><00:01:58.560><c> we're</c>

00:01:58.789 --> 00:01:58.799 align:start position:0%
when the main function exits which we're
 

00:01:58.799 --> 00:02:00.020 align:start position:0%
when the main function exits which we're
not<00:01:58.860><c> really</c><00:01:59.159><c> going</c><00:01:59.369><c> to</c><00:01:59.490><c> see</c><00:01:59.640><c> because</c><00:01:59.790><c> our</c>

00:02:00.020 --> 00:02:00.030 align:start position:0%
not really going to see because our
 

00:02:00.030 --> 00:02:01.399 align:start position:0%
not really going to see because our
program<00:02:00.420><c> will</c><00:02:00.570><c> close</c><00:02:00.659><c> immediately</c><00:02:00.960><c> after</c>

00:02:01.399 --> 00:02:01.409 align:start position:0%
program will close immediately after
 

00:02:01.409 --> 00:02:02.600 align:start position:0%
program will close immediately after
that<00:02:01.439><c> so</c><00:02:01.860><c> I'm</c><00:02:01.950><c> going</c><00:02:02.159><c> to</c><00:02:02.219><c> just</c><00:02:02.430><c> write</c><00:02:02.549><c> a</c>

00:02:02.600 --> 00:02:02.610 align:start position:0%
that so I'm going to just write a
 

00:02:02.610 --> 00:02:04.969 align:start position:0%
that so I'm going to just write a
function<00:02:02.880><c> here</c><00:02:03.299><c> which</c><00:02:03.750><c> will</c><00:02:04.140><c> perform</c><00:02:04.350><c> all</c><00:02:04.920><c> of</c>

00:02:04.969 --> 00:02:04.979 align:start position:0%
function here which will perform all of
 

00:02:04.979 --> 00:02:07.580 align:start position:0%
function here which will perform all of
our<00:02:05.159><c> entity</c><00:02:05.579><c> operations</c><00:02:06.119><c> I'll</c><00:02:07.079><c> move</c><00:02:07.380><c> all</c><00:02:07.469><c> this</c>

00:02:07.580 --> 00:02:07.590 align:start position:0%
our entity operations I'll move all this
 

00:02:07.590 --> 00:02:10.190 align:start position:0%
our entity operations I'll move all this
code<00:02:07.829><c> over</c><00:02:07.979><c> here</c><00:02:08.250><c> and</c><00:02:08.520><c> I</c><00:02:08.700><c> will</c><00:02:08.940><c> call</c><00:02:09.149><c> function</c>

00:02:10.190 --> 00:02:10.200 align:start position:0%
code over here and I will call function
 

00:02:10.200 --> 00:02:12.380 align:start position:0%
code over here and I will call function
now<00:02:10.259><c> if</c><00:02:10.410><c> I</c><00:02:10.530><c> run</c><00:02:10.770><c> my</c><00:02:10.830><c> code</c><00:02:11.220><c> just</c><00:02:11.550><c> like</c><00:02:11.700><c> this</c><00:02:11.879><c> you</c>

00:02:12.380 --> 00:02:12.390 align:start position:0%
now if I run my code just like this you
 

00:02:12.390 --> 00:02:14.780 align:start position:0%
now if I run my code just like this you
should<00:02:12.569><c> be</c><00:02:12.599><c> created</c><00:02:13.080><c> entity</c><00:02:13.200><c> then</c><00:02:13.770><c> our</c><00:02:14.069><c> print</c>

00:02:14.780 --> 00:02:14.790 align:start position:0%
should be created entity then our print
 

00:02:14.790 --> 00:02:16.640 align:start position:0%
should be created entity then our print
function<00:02:15.330><c> running</c><00:02:15.599><c> which</c><00:02:15.750><c> prints</c><00:02:16.110><c> x</c><00:02:16.319><c> and</c><00:02:16.500><c> y</c>

00:02:16.640 --> 00:02:16.650 align:start position:0%
function running which prints x and y
 

00:02:16.650 --> 00:02:18.860 align:start position:0%
function running which prints x and y
and<00:02:16.890><c> then</c><00:02:17.010><c> finally</c><00:02:17.340><c> destroyed</c><00:02:17.730><c> entity</c><00:02:18.180><c> let's</c>

00:02:18.860 --> 00:02:18.870 align:start position:0%
and then finally destroyed entity let's
 

00:02:18.870 --> 00:02:20.449 align:start position:0%
and then finally destroyed entity let's
take<00:02:19.050><c> a</c><00:02:19.080><c> deeper</c><00:02:19.500><c> look</c><00:02:19.530><c> at</c><00:02:19.769><c> the</c><00:02:19.890><c> how</c><00:02:20.010><c> this</c><00:02:20.160><c> works</c>

00:02:20.449 --> 00:02:20.459 align:start position:0%
take a deeper look at the how this works
 

00:02:20.459 --> 00:02:22.640 align:start position:0%
take a deeper look at the how this works
I'm<00:02:20.730><c> going</c><00:02:20.910><c> to</c><00:02:21.000><c> put</c><00:02:21.090><c> a</c><00:02:21.150><c> breakpoint</c><00:02:21.420><c> on</c><00:02:21.870><c> line</c><00:02:21.959><c> 28</c>

00:02:22.640 --> 00:02:22.650 align:start position:0%
I'm going to put a breakpoint on line 28
 

00:02:22.650 --> 00:02:24.949 align:start position:0%
I'm going to put a breakpoint on line 28
here<00:02:22.980><c> next</c><00:02:23.280><c> to</c><00:02:23.340><c> our</c><00:02:23.430><c> entity</c><00:02:23.879><c> and</c><00:02:24.090><c> here</c><00:02:24.569><c> f5</c>

00:02:24.949 --> 00:02:24.959 align:start position:0%
here next to our entity and here f5
 

00:02:24.959 --> 00:02:26.540 align:start position:0%
here next to our entity and here f5
currently<00:02:25.560><c> about</c><00:02:25.709><c> absolutely</c><00:02:26.069><c> nothing</c><00:02:26.190><c> in</c><00:02:26.489><c> a</c>

00:02:26.540 --> 00:02:26.550 align:start position:0%
currently about absolutely nothing in a
 

00:02:26.550 --> 00:02:29.120 align:start position:0%
currently about absolutely nothing in a
console<00:02:26.940><c> if</c><00:02:27.150><c> I</c><00:02:27.750><c> hit</c><00:02:27.959><c> f10</c><00:02:28.380><c> here</c><00:02:28.680><c> and</c><00:02:28.830><c> look</c><00:02:28.950><c> back</c>

00:02:29.120 --> 00:02:29.130 align:start position:0%
console if I hit f10 here and look back
 

00:02:29.130 --> 00:02:30.860 align:start position:0%
console if I hit f10 here and look back
you<00:02:29.580><c> can</c><00:02:29.640><c> say</c><00:02:29.880><c> that</c><00:02:30.030><c> my</c><00:02:30.150><c> entity</c><00:02:30.450><c> has</c><00:02:30.630><c> been</c>

00:02:30.860 --> 00:02:30.870 align:start position:0%
you can say that my entity has been
 

00:02:30.870 --> 00:02:32.540 align:start position:0%
you can say that my entity has been
created<00:02:31.380><c> I'm</c><00:02:31.590><c> now</c><00:02:31.800><c> going</c><00:02:31.950><c> to</c><00:02:32.040><c> hit</c><00:02:32.160><c> f10</c><00:02:32.489><c> to</c>

00:02:32.540 --> 00:02:32.550 align:start position:0%
created I'm now going to hit f10 to
 

00:02:32.550 --> 00:02:34.850 align:start position:0%
created I'm now going to hit f10 to
print<00:02:33.060><c> and</c><00:02:33.300><c> you</c><00:02:33.630><c> can</c><00:02:33.660><c> see</c><00:02:33.930><c> that</c><00:02:34.110><c> my</c><00:02:34.319><c> x</c><00:02:34.590><c> and</c><00:02:34.769><c> y</c>

00:02:34.850 --> 00:02:34.860 align:start position:0%
print and you can see that my x and y
 

00:02:34.860 --> 00:02:36.830 align:start position:0%
print and you can see that my x and y
position<00:02:35.250><c> gets</c><00:02:35.430><c> printed</c><00:02:35.790><c> and</c><00:02:35.910><c> finally</c><00:02:36.450><c> the</c>

00:02:36.830 --> 00:02:36.840 align:start position:0%
position gets printed and finally the
 

00:02:36.840 --> 00:02:38.630 align:start position:0%
position gets printed and finally the
end<00:02:37.049><c> of</c><00:02:37.230><c> the</c><00:02:37.319><c> scope</c><00:02:37.590><c> is</c><00:02:37.830><c> reached</c><00:02:38.160><c> here</c><00:02:38.430><c> we're</c>

00:02:38.630 --> 00:02:38.640 align:start position:0%
end of the scope is reached here we're
 

00:02:38.640 --> 00:02:40.910 align:start position:0%
end of the scope is reached here we're
about<00:02:38.790><c> a</c><00:02:38.849><c> jump</c><00:02:39.180><c> back</c><00:02:39.390><c> to</c><00:02:39.810><c> line</c><00:02:40.019><c> 34</c><00:02:40.590><c> which</c><00:02:40.769><c> is</c>

00:02:40.910 --> 00:02:40.920 align:start position:0%
about a jump back to line 34 which is
 

00:02:40.920 --> 00:02:43.220 align:start position:0%
about a jump back to line 34 which is
our<00:02:41.160><c> return</c><00:02:41.610><c> address</c><00:02:42.000><c> since</c><00:02:42.420><c> this</c><00:02:42.569><c> object</c><00:02:42.750><c> was</c>

00:02:43.220 --> 00:02:43.230 align:start position:0%
our return address since this object was
 

00:02:43.230 --> 00:02:45.170 align:start position:0%
our return address since this object was
created<00:02:43.260><c> on</c><00:02:43.980><c> the</c><00:02:44.190><c> stack</c><00:02:44.549><c> it</c><00:02:44.790><c> should</c><00:02:45.060><c> get</c>

00:02:45.170 --> 00:02:45.180 align:start position:0%
created on the stack it should get
 

00:02:45.180 --> 00:02:47.000 align:start position:0%
created on the stack it should get
automatically<00:02:45.870><c> destroyed</c><00:02:46.260><c> when</c><00:02:46.620><c> it</c><00:02:46.709><c> goes</c><00:02:46.890><c> out</c>

00:02:47.000 --> 00:02:47.010 align:start position:0%
automatically destroyed when it goes out
 

00:02:47.010 --> 00:02:49.490 align:start position:0%
automatically destroyed when it goes out
of<00:02:47.069><c> scope</c><00:02:47.310><c> which</c><00:02:47.730><c> is</c><00:02:47.760><c> right</c><00:02:48.090><c> over</c><00:02:48.239><c> here</c><00:02:48.360><c> so</c><00:02:49.230><c> if</c>

00:02:49.490 --> 00:02:49.500 align:start position:0%
of scope which is right over here so if
 

00:02:49.500 --> 00:02:51.530 align:start position:0%
of scope which is right over here so if
I<00:02:49.590><c> hit</c><00:02:49.739><c> f10</c><00:02:50.130><c> you</c><00:02:50.640><c> can</c><00:02:50.819><c> see</c><00:02:50.970><c> that</c><00:02:51.150><c> destroyed</c>

00:02:51.530 --> 00:02:51.540 align:start position:0%
I hit f10 you can see that destroyed
 

00:02:51.540 --> 00:02:53.180 align:start position:0%
I hit f10 you can see that destroyed
entity<00:02:51.989><c> gets</c><00:02:52.349><c> printed</c><00:02:52.620><c> to</c><00:02:52.769><c> the</c><00:02:52.860><c> console</c>

00:02:53.180 --> 00:02:53.190 align:start position:0%
entity gets printed to the console
 

00:02:53.190 --> 00:02:55.699 align:start position:0%
entity gets printed to the console
because<00:02:53.400><c> the</c><00:02:53.760><c> destructor</c><00:02:54.360><c> is</c><00:02:54.630><c> called</c><00:02:55.049><c> we</c><00:02:55.440><c> jump</c>

00:02:55.699 --> 00:02:55.709 align:start position:0%
because the destructor is called we jump
 

00:02:55.709 --> 00:02:56.990 align:start position:0%
because the destructor is called we jump
back<00:02:55.920><c> to</c><00:02:55.950><c> our</c><00:02:56.130><c> return</c><00:02:56.459><c> address</c><00:02:56.790><c> and</c>

00:02:56.990 --> 00:02:57.000 align:start position:0%
back to our return address and
 

00:02:57.000 --> 00:02:58.759 align:start position:0%
back to our return address and
everything<00:02:57.269><c> is</c><00:02:57.810><c> good</c><00:02:58.200><c> so</c><00:02:58.530><c> that</c><00:02:58.560><c> is</c>

00:02:58.759 --> 00:02:58.769 align:start position:0%
everything is good so that is
 

00:02:58.769 --> 00:03:00.229 align:start position:0%
everything is good so that is
essentially<00:02:59.220><c> what</c><00:02:59.250><c> a</c><00:02:59.400><c> destructor</c><00:02:59.849><c> is</c><00:03:00.000><c> it's</c>

00:03:00.229 --> 00:03:00.239 align:start position:0%
essentially what a destructor is it's
 

00:03:00.239 --> 00:03:01.670 align:start position:0%
essentially what a destructor is it's
just<00:03:00.269><c> a</c><00:03:00.450><c> special</c><00:03:00.840><c> function</c><00:03:01.110><c> and</c><00:03:01.440><c> special</c>

00:03:01.670 --> 00:03:01.680 align:start position:0%
just a special function and special
 

00:03:01.680 --> 00:03:03.830 align:start position:0%
just a special function and special
method<00:03:02.069><c> which</c><00:03:02.549><c> gets</c><00:03:02.790><c> called</c><00:03:03.060><c> when</c><00:03:03.329><c> an</c><00:03:03.420><c> object</c>

00:03:03.830 --> 00:03:03.840 align:start position:0%
method which gets called when an object
 

00:03:03.840 --> 00:03:05.509 align:start position:0%
method which gets called when an object
gets<00:03:04.110><c> destroyed</c><00:03:04.590><c> after</c><00:03:05.160><c> some</c><00:03:05.310><c> real-world</c>

00:03:05.509 --> 00:03:05.519 align:start position:0%
gets destroyed after some real-world
 

00:03:05.519 --> 00:03:07.880 align:start position:0%
gets destroyed after some real-world
examples<00:03:05.790><c> as</c><00:03:06.360><c> to</c><00:03:06.390><c> why</c><00:03:06.870><c> you</c><00:03:06.930><c> would</c><00:03:07.349><c> ever</c><00:03:07.620><c> write</c>

00:03:07.880 --> 00:03:07.890 align:start position:0%
examples as to why you would ever write
 

00:03:07.890 --> 00:03:09.710 align:start position:0%
examples as to why you would ever write
a<00:03:07.950><c> destructor</c><00:03:08.610><c> well</c><00:03:09.000><c> again</c><00:03:09.209><c> if</c><00:03:09.420><c> there</c><00:03:09.599><c> is</c>

00:03:09.710 --> 00:03:09.720 align:start position:0%
a destructor well again if there is
 

00:03:09.720 --> 00:03:11.420 align:start position:0%
a destructor well again if there is
certain<00:03:10.079><c> initialization</c><00:03:10.980><c> code</c><00:03:11.130><c> that</c><00:03:11.340><c> you</c>

00:03:11.420 --> 00:03:11.430 align:start position:0%
certain initialization code that you
 

00:03:11.430 --> 00:03:13.640 align:start position:0%
certain initialization code that you
call<00:03:12.030><c> it</c><00:03:12.239><c> in</c><00:03:12.329><c> the</c><00:03:12.510><c> constructor</c><00:03:12.900><c> you</c><00:03:13.470><c> would</c>

00:03:13.640 --> 00:03:13.650 align:start position:0%
call it in the constructor you would
 

00:03:13.650 --> 00:03:16.129 align:start position:0%
call it in the constructor you would
likely<00:03:13.860><c> want</c><00:03:14.250><c> to</c><00:03:14.450><c> uninitialized</c><00:03:15.450><c> or</c><00:03:15.660><c> destroy</c>

00:03:16.129 --> 00:03:16.139 align:start position:0%
likely want to uninitialized or destroy
 

00:03:16.139 --> 00:03:17.569 align:start position:0%
likely want to uninitialized or destroy
all<00:03:16.319><c> that</c><00:03:16.530><c> starts</c><00:03:16.889><c> in</c><00:03:17.040><c> the</c><00:03:17.069><c> destructor</c>

00:03:17.569 --> 00:03:17.579 align:start position:0%
all that starts in the destructor
 

00:03:17.579 --> 00:03:19.099 align:start position:0%
all that starts in the destructor
because<00:03:18.000><c> if</c><00:03:18.090><c> you</c><00:03:18.180><c> don't</c><00:03:18.420><c> you</c><00:03:18.510><c> can</c><00:03:18.630><c> get</c><00:03:18.750><c> memory</c>

00:03:19.099 --> 00:03:19.109 align:start position:0%
because if you don't you can get memory
 

00:03:19.109 --> 00:03:20.780 align:start position:0%
because if you don't you can get memory
leaks<00:03:19.350><c> a</c><00:03:19.500><c> good</c><00:03:19.709><c> example</c><00:03:19.980><c> of</c><00:03:20.130><c> that</c><00:03:20.190><c> is</c><00:03:20.489><c> heap</c>

00:03:20.780 --> 00:03:20.790 align:start position:0%
leaks a good example of that is heap
 

00:03:20.790 --> 00:03:22.069 align:start position:0%
leaks a good example of that is heap
allocated<00:03:21.239><c> objects</c><00:03:21.660><c> if</c><00:03:21.780><c> you've</c><00:03:21.900><c> allocated</c>

00:03:22.069 --> 00:03:22.079 align:start position:0%
allocated objects if you've allocated
 

00:03:22.079 --> 00:03:24.470 align:start position:0%
allocated objects if you've allocated
any<00:03:22.530><c> kind</c><00:03:22.829><c> of</c><00:03:22.889><c> memory</c><00:03:23.069><c> on</c><00:03:23.400><c> the</c><00:03:23.549><c> heap</c><00:03:23.579><c> manually</c>

00:03:24.470 --> 00:03:24.480 align:start position:0%
any kind of memory on the heap manually
 

00:03:24.480 --> 00:03:26.930 align:start position:0%
any kind of memory on the heap manually
and<00:03:24.959><c> you</c><00:03:25.109><c> need</c><00:03:25.260><c> to</c><00:03:25.380><c> manually</c><00:03:25.980><c> clean</c><00:03:26.340><c> it</c><00:03:26.459><c> up</c><00:03:26.700><c> if</c>

00:03:26.930 --> 00:03:26.940 align:start position:0%
and you need to manually clean it up if
 

00:03:26.940 --> 00:03:29.539 align:start position:0%
and you need to manually clean it up if
it<00:03:27.420><c> was</c><00:03:27.540><c> allocated</c><00:03:27.959><c> throughout</c><00:03:28.739><c> the</c><00:03:28.889><c> usage</c><00:03:29.340><c> of</c>

00:03:29.539 --> 00:03:29.549 align:start position:0%
it was allocated throughout the usage of
 

00:03:29.549 --> 00:03:31.520 align:start position:0%
it was allocated throughout the usage of
the<00:03:29.670><c> MTR</c><00:03:30.060><c> in</c><00:03:30.269><c> the</c><00:03:30.359><c> entity</c><00:03:30.630><c> constructor</c><00:03:31.290><c> you'll</c>

00:03:31.520 --> 00:03:31.530 align:start position:0%
the MTR in the entity constructor you'll
 

00:03:31.530 --> 00:03:32.750 align:start position:0%
the MTR in the entity constructor you'll
actually<00:03:31.709><c> going</c><00:03:31.950><c> to</c><00:03:32.040><c> want</c><00:03:32.160><c> to</c><00:03:32.220><c> get</c><00:03:32.370><c> rid</c><00:03:32.549><c> of</c><00:03:32.639><c> it</c>

00:03:32.750 --> 00:03:32.760 align:start position:0%
actually going to want to get rid of it
 

00:03:32.760 --> 00:03:34.640 align:start position:0%
actually going to want to get rid of it
in<00:03:32.940><c> the</c><00:03:33.060><c> destructor</c><00:03:33.540><c> because</c><00:03:34.019><c> when</c><00:03:34.290><c> they</c><00:03:34.470><c> try</c>

00:03:34.640 --> 00:03:34.650 align:start position:0%
in the destructor because when they try
 

00:03:34.650 --> 00:03:37.819 align:start position:0%
in the destructor because when they try
to<00:03:34.680><c> get</c><00:03:34.920><c> called</c><00:03:35.220><c> that</c><00:03:36.060><c> entity</c><00:03:36.510><c> is</c><00:03:36.870><c> gone</c><00:03:37.380><c> you</c>

00:03:37.819 --> 00:03:37.829 align:start position:0%
to get called that entity is gone you
 

00:03:37.829 --> 00:03:39.740 align:start position:0%
to get called that entity is gone you
can<00:03:37.950><c> also</c><00:03:38.069><c> call</c><00:03:38.400><c> the</c><00:03:38.519><c> destructor</c><00:03:38.940><c> manually</c>

00:03:39.740 --> 00:03:39.750 align:start position:0%
can also call the destructor manually
 

00:03:39.750 --> 00:03:42.020 align:start position:0%
can also call the destructor manually
not<00:03:39.959><c> something</c><00:03:40.350><c> that</c><00:03:40.500><c> I</c><00:03:40.650><c> see</c><00:03:40.950><c> a</c><00:03:40.980><c> lot</c><00:03:41.459><c> of</c><00:03:41.639><c> people</c>

00:03:42.020 --> 00:03:42.030 align:start position:0%
not something that I see a lot of people
 

00:03:42.030 --> 00:03:45.349 align:start position:0%
not something that I see a lot of people
doing<00:03:42.769><c> rightly</c><00:03:43.769><c> so</c><00:03:44.069><c> it's</c><00:03:44.340><c> a</c><00:03:44.430><c> bit</c><00:03:44.730><c> weird</c><00:03:45.120><c> if</c><00:03:45.329><c> you</c>

00:03:45.349 --> 00:03:45.359 align:start position:0%
doing rightly so it's a bit weird if you
 

00:03:45.359 --> 00:03:47.180 align:start position:0%
doing rightly so it's a bit weird if you
end<00:03:45.600><c> up</c><00:03:45.720><c> doing</c><00:03:45.989><c> something</c><00:03:46.200><c> like</c><00:03:46.350><c> that</c><00:03:46.680><c> the</c>

00:03:47.180 --> 00:03:47.190 align:start position:0%
end up doing something like that the
 

00:03:47.190 --> 00:03:48.740 align:start position:0%
end up doing something like that the
only<00:03:47.310><c> reason</c><00:03:47.700><c> I</c><00:03:47.760><c> can</c><00:03:47.910><c> only</c><00:03:48.030><c> think</c><00:03:48.180><c> of</c><00:03:48.359><c> doing</c>

00:03:48.740 --> 00:03:48.750 align:start position:0%
only reason I can only think of doing
 

00:03:48.750 --> 00:03:50.300 align:start position:0%
only reason I can only think of doing
that<00:03:49.019><c> is</c><00:03:49.200><c> maybe</c><00:03:49.410><c> if</c><00:03:49.560><c> you've</c><00:03:49.709><c> allocated</c><00:03:49.829><c> using</c>

00:03:50.300 --> 00:03:50.310 align:start position:0%
that is maybe if you've allocated using
 

00:03:50.310 --> 00:03:52.729 align:start position:0%
that is maybe if you've allocated using
new<00:03:50.700><c> however</c><00:03:51.090><c> when</c><00:03:51.569><c> you</c><00:03:51.750><c> delete</c><00:03:52.500><c> it</c><00:03:52.530><c> you</c>

00:03:52.729 --> 00:03:52.739 align:start position:0%
new however when you delete it you
 

00:03:52.739 --> 00:03:54.259 align:start position:0%
new however when you delete it you
decide<00:03:53.010><c> to</c><00:03:53.130><c> use</c><00:03:53.250><c> something</c><00:03:53.519><c> like</c><00:03:53.790><c> the</c><00:03:54.030><c> free</c>

00:03:54.259 --> 00:03:54.269 align:start position:0%
decide to use something like the free
 

00:03:54.269 --> 00:03:56.300 align:start position:0%
decide to use something like the free
function<00:03:54.750><c> and</c><00:03:55.019><c> then</c><00:03:55.410><c> you</c><00:03:55.620><c> also</c><00:03:55.769><c> want</c><00:03:56.099><c> to</c><00:03:56.130><c> call</c>

00:03:56.300 --> 00:03:56.310 align:start position:0%
function and then you also want to call
 

00:03:56.310 --> 00:03:58.309 align:start position:0%
function and then you also want to call
disrupt<00:03:56.700><c> and</c><00:03:56.819><c> manually</c><00:03:57.180><c> make</c><00:03:57.389><c> it</c><00:03:57.569><c> I</c><00:03:57.780><c> don't</c>

00:03:58.309 --> 00:03:58.319 align:start position:0%
disrupt and manually make it I don't
 

00:03:58.319 --> 00:04:00.470 align:start position:0%
disrupt and manually make it I don't
know<00:03:58.650><c> not</c><00:03:59.069><c> really</c><00:03:59.340><c> use</c><00:03:59.489><c> that</c><00:03:59.700><c> often</c><00:04:00.030><c> but</c><00:04:00.269><c> you</c>

00:04:00.470 --> 00:04:00.480 align:start position:0%
know not really use that often but you
 

00:04:00.480 --> 00:04:03.890 align:start position:0%
know not really use that often but you
can<00:04:00.660><c> do</c><00:04:00.840><c> so</c><00:04:01.079><c> by</c><00:04:01.380><c> just</c><00:04:01.680><c> calling</c><00:04:01.920><c> e</c><00:04:02.370><c> dot</c><00:04:02.849><c> and</c><00:04:03.120><c> see</c>

00:04:03.890 --> 00:04:03.900 align:start position:0%
can do so by just calling e dot and see
 

00:04:03.900 --> 00:04:04.699 align:start position:0%
can do so by just calling e dot and see
you<00:04:04.019><c> like</c><00:04:04.230><c> this</c>

00:04:04.699 --> 00:04:04.709 align:start position:0%
you like this
 

00:04:04.709 --> 00:04:06.740 align:start position:0%
you like this
as<00:04:04.769><c> if</c><00:04:04.980><c> it</c><00:04:05.130><c> was</c><00:04:05.280><c> any</c><00:04:05.549><c> other</c><00:04:05.670><c> function</c><00:04:06.359><c> and</c><00:04:06.569><c> that</c>

00:04:06.740 --> 00:04:06.750 align:start position:0%
as if it was any other function and that
 

00:04:06.750 --> 00:04:08.809 align:start position:0%
as if it was any other function and that
will<00:04:06.810><c> actually</c><00:04:07.349><c> call</c><00:04:07.530><c> the</c><00:04:07.620><c> destructor</c><00:04:08.190><c> if</c><00:04:08.340><c> I</c>

00:04:08.809 --> 00:04:08.819 align:start position:0%
will actually call the destructor if I
 

00:04:08.819 --> 00:04:11.930 align:start position:0%
will actually call the destructor if I
run<00:04:09.060><c> this</c><00:04:09.239><c> code</c><00:04:10.190><c> which</c><00:04:11.190><c> is</c><00:04:11.340><c> innocent</c><00:04:11.730><c> enough</c>

00:04:11.930 --> 00:04:11.940 align:start position:0%
run this code which is innocent enough
 

00:04:11.940 --> 00:04:13.490 align:start position:0%
run this code which is innocent enough
you<00:04:12.150><c> can</c><00:04:12.329><c> see</c><00:04:12.450><c> that</c><00:04:12.599><c> it</c><00:04:12.690><c> destroys</c><00:04:13.019><c> the</c><00:04:13.169><c> entity</c>

00:04:13.490 --> 00:04:13.500 align:start position:0%
you can see that it destroys the entity
 

00:04:13.500 --> 00:04:15.080 align:start position:0%
you can see that it destroys the entity
twice<00:04:13.709><c> seemingly</c><00:04:14.250><c> we're</c><00:04:14.639><c> not</c><00:04:14.730><c> actually</c>

00:04:15.080 --> 00:04:15.090 align:start position:0%
twice seemingly we're not actually
 

00:04:15.090 --> 00:04:16.699 align:start position:0%
twice seemingly we're not actually
releasing<00:04:15.450><c> any</c><00:04:15.569><c> resources</c><00:04:16.109><c> here</c><00:04:16.410><c> so</c><00:04:16.650><c> it</c>

00:04:16.699 --> 00:04:16.709 align:start position:0%
releasing any resources here so it
 

00:04:16.709 --> 00:04:18.080 align:start position:0%
releasing any resources here so it
doesn't<00:04:16.829><c> crash</c><00:04:17.310><c> it</c><00:04:17.519><c> just</c><00:04:17.700><c> prints</c><00:04:18.000><c> this</c>

00:04:18.080 --> 00:04:18.090 align:start position:0%
doesn't crash it just prints this
 

00:04:18.090 --> 00:04:20.509 align:start position:0%
doesn't crash it just prints this
message<00:04:18.419><c> twice</c><00:04:18.659><c> again</c><00:04:19.560><c> not</c><00:04:19.979><c> something</c><00:04:20.370><c> I</c>

00:04:20.509 --> 00:04:20.519 align:start position:0%
message twice again not something I
 

00:04:20.519 --> 00:04:22.350 align:start position:0%
message twice again not something I
would<00:04:20.669><c> recommend</c><00:04:20.700><c> or</c><00:04:21.269><c> not</c><00:04:21.510><c> something</c>

00:04:22.350 --> 00:04:22.360 align:start position:0%
would recommend or not something
 

00:04:22.360 --> 00:04:25.080 align:start position:0%
would recommend or not something
often<00:04:22.719><c> at</c><00:04:22.900><c> all</c><00:04:23.039><c> very</c><00:04:24.039><c> very</c><00:04:24.310><c> rarely</c><00:04:24.639><c> asking</c>

00:04:25.080 --> 00:04:25.090 align:start position:0%
often at all very very rarely asking
 

00:04:25.090 --> 00:04:27.149 align:start position:0%
often at all very very rarely asking
something<00:04:25.300><c> like</c><00:04:25.569><c> this</c><00:04:25.750><c> so</c><00:04:26.080><c> yeah</c><00:04:26.259><c> destructors</c>

00:04:27.149 --> 00:04:27.159 align:start position:0%
something like this so yeah destructors
 

00:04:27.159 --> 00:04:29.249 align:start position:0%
something like this so yeah destructors
sorted<00:04:27.849><c> I'll</c><00:04:28.090><c> see</c><00:04:28.389><c> you</c><00:04:28.449><c> guys</c><00:04:28.509><c> next</c><00:04:28.689><c> time</c><00:04:28.810><c> good</c>

00:04:29.249 --> 00:04:29.259 align:start position:0%
sorted I'll see you guys next time good
 

00:04:29.259 --> 00:04:30.070 align:start position:0%
sorted I'll see you guys next time good
bye

00:04:30.070 --> 00:04:30.080 align:start position:0%
bye
 

00:04:30.080 --> 00:04:38.570 align:start position:0%
bye
[Music]

00:04:38.570 --> 00:04:38.580 align:start position:0%
 
 

00:04:38.580 --> 00:04:45.610 align:start position:0%
 
[Music]

