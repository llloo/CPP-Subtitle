WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.579 align:start position:0%
 
hey<00:00:00.179><c> what's</c><00:00:00.390><c> up</c><00:00:00.450><c> guys</c><00:00:00.599><c> my</c><00:00:00.930><c> name</c><00:00:01.079><c> is</c><00:00:01.110><c> a</c><00:00:01.230><c> channel</c>

00:00:01.579 --> 00:00:01.589 align:start position:0%
hey what's up guys my name is a channel
 

00:00:01.589 --> 00:00:02.810 align:start position:0%
hey what's up guys my name is a channel
welcome<00:00:01.740><c> back</c><00:00:01.979><c> to</c><00:00:02.129><c> my</c><00:00:02.220><c> state</c><00:00:02.460><c> boss</c><00:00:02.580><c> last</c>

00:00:02.810 --> 00:00:02.820 align:start position:0%
welcome back to my state boss last
 

00:00:02.820 --> 00:00:04.100 align:start position:0%
welcome back to my state boss last
series<00:00:03.210><c> today</c><00:00:03.449><c> we're</c><00:00:03.570><c> gonna</c><00:00:03.659><c> be</c><00:00:03.750><c> talking</c><00:00:03.870><c> all</c>

00:00:04.100 --> 00:00:04.110 align:start position:0%
series today we're gonna be talking all
 

00:00:04.110 --> 00:00:06.410 align:start position:0%
series today we're gonna be talking all
about<00:00:04.140><c> smart</c><00:00:04.620><c> pointers</c><00:00:05.160><c> in</c><00:00:05.460><c> C++</c>

00:00:06.410 --> 00:00:06.420 align:start position:0%
about smart pointers in C++
 

00:00:06.420 --> 00:00:07.730 align:start position:0%
about smart pointers in C++
so<00:00:06.540><c> as</c><00:00:06.629><c> my</c><00:00:06.750><c> pointers</c><00:00:07.109><c> are</c><00:00:07.230><c> a</c><00:00:07.290><c> topic</c><00:00:07.470><c> that</c><00:00:07.589><c> has</c>

00:00:07.730 --> 00:00:07.740 align:start position:0%
so as my pointers are a topic that has
 

00:00:07.740 --> 00:00:10.400 align:start position:0%
so as my pointers are a topic that has
come<00:00:08.189><c> up</c><00:00:08.309><c> a</c><00:00:08.519><c> lot</c><00:00:08.760><c> recently</c><00:00:09.300><c> in</c><00:00:09.719><c> my</c><00:00:09.840><c> videos</c><00:00:10.110><c> and</c>

00:00:10.400 --> 00:00:10.410 align:start position:0%
come up a lot recently in my videos and
 

00:00:10.410 --> 00:00:12.110 align:start position:0%
come up a lot recently in my videos and
people<00:00:10.650><c> requesting</c><00:00:11.190><c> this</c><00:00:11.400><c> and</c><00:00:11.639><c> what</c><00:00:12.000><c> is</c><00:00:12.090><c> a</c>

00:00:12.110 --> 00:00:12.120 align:start position:0%
people requesting this and what is a
 

00:00:12.120 --> 00:00:13.580 align:start position:0%
people requesting this and what is a
smart<00:00:12.360><c> pointer</c><00:00:12.690><c> should</c><00:00:12.870><c> I</c><00:00:12.900><c> be</c><00:00:13.049><c> using</c><00:00:13.320><c> smart</c>

00:00:13.580 --> 00:00:13.590 align:start position:0%
smart pointer should I be using smart
 

00:00:13.590 --> 00:00:15.620 align:start position:0%
smart pointer should I be using smart
pointers<00:00:13.889><c> and</c><00:00:14.009><c> all</c><00:00:14.070><c> that</c><00:00:14.250><c> today</c><00:00:15.150><c> we</c><00:00:15.360><c> just</c><00:00:15.450><c> goes</c>

00:00:15.620 --> 00:00:15.630 align:start position:0%
pointers and all that today we just goes
 

00:00:15.630 --> 00:00:17.000 align:start position:0%
pointers and all that today we just goes
over<00:00:15.750><c> what</c><00:00:16.049><c> they</c><00:00:16.170><c> are</c><00:00:16.320><c> we're</c><00:00:16.680><c> not</c><00:00:16.710><c> really</c>

00:00:17.000 --> 00:00:17.010 align:start position:0%
over what they are we're not really
 

00:00:17.010 --> 00:00:18.680 align:start position:0%
over what they are we're not really
going<00:00:17.220><c> to</c><00:00:17.310><c> get</c><00:00:17.400><c> into</c><00:00:17.580><c> depth</c><00:00:17.789><c> about</c><00:00:18.180><c> what</c><00:00:18.240><c> why</c><00:00:18.660><c> I</c>

00:00:18.680 --> 00:00:18.690 align:start position:0%
going to get into depth about what why I
 

00:00:18.690 --> 00:00:20.510 align:start position:0%
going to get into depth about what why I
think<00:00:18.900><c> you</c><00:00:19.320><c> should</c><00:00:19.350><c> or</c><00:00:19.770><c> shouldn't</c><00:00:20.010><c> be</c><00:00:20.130><c> using</c>

00:00:20.510 --> 00:00:20.520 align:start position:0%
think you should or shouldn't be using
 

00:00:20.520 --> 00:00:22.220 align:start position:0%
think you should or shouldn't be using
them<00:00:20.640><c> and</c><00:00:20.789><c> all</c><00:00:20.880><c> that</c><00:00:20.910><c> stuff</c><00:00:21.359><c> and</c><00:00:21.630><c> my</c><00:00:21.779><c> opinions</c>

00:00:22.220 --> 00:00:22.230 align:start position:0%
them and all that stuff and my opinions
 

00:00:22.230 --> 00:00:24.170 align:start position:0%
them and all that stuff and my opinions
about<00:00:22.320><c> smart</c><00:00:22.769><c> pointers</c><00:00:23.160><c> in</c><00:00:23.250><c> general</c><00:00:23.670><c> I'm</c>

00:00:24.170 --> 00:00:24.180 align:start position:0%
about smart pointers in general I'm
 

00:00:24.180 --> 00:00:25.550 align:start position:0%
about smart pointers in general I'm
gonna<00:00:24.359><c> save</c><00:00:24.480><c> that</c><00:00:24.510><c> for</c><00:00:24.689><c> another</c><00:00:24.869><c> video</c><00:00:25.289><c> today</c>

00:00:25.550 --> 00:00:25.560 align:start position:0%
gonna save that for another video today
 

00:00:25.560 --> 00:00:27.080 align:start position:0%
gonna save that for another video today
we're<00:00:25.740><c> just</c><00:00:25.800><c> gonna</c><00:00:25.980><c> focus</c><00:00:26.189><c> on</c><00:00:26.490><c> what</c><00:00:26.730><c> a</c><00:00:26.760><c> smart</c>

00:00:27.080 --> 00:00:27.090 align:start position:0%
we're just gonna focus on what a smart
 

00:00:27.090 --> 00:00:29.000 align:start position:0%
we're just gonna focus on what a smart
pointer<00:00:27.449><c> is</c><00:00:27.630><c> and</c><00:00:27.869><c> what</c><00:00:28.050><c> it</c><00:00:28.140><c> can</c><00:00:28.260><c> do</c><00:00:28.439><c> for</c><00:00:28.650><c> you</c><00:00:28.769><c> so</c>

00:00:29.000 --> 00:00:29.010 align:start position:0%
pointer is and what it can do for you so
 

00:00:29.010 --> 00:00:30.140 align:start position:0%
pointer is and what it can do for you so
earlier<00:00:29.279><c> we</c><00:00:29.369><c> talked</c><00:00:29.519><c> about</c><00:00:29.609><c> what</c><00:00:29.820><c> new</c><00:00:30.000><c> and</c>

00:00:30.140 --> 00:00:30.150 align:start position:0%
earlier we talked about what new and
 

00:00:30.150 --> 00:00:31.849 align:start position:0%
earlier we talked about what new and
delete<00:00:30.359><c> does</c><00:00:30.599><c> new</c><00:00:30.810><c> allocates</c><00:00:31.260><c> memory</c><00:00:31.439><c> on</c><00:00:31.740><c> the</c>

00:00:31.849 --> 00:00:31.859 align:start position:0%
delete does new allocates memory on the
 

00:00:31.859 --> 00:00:33.620 align:start position:0%
delete does new allocates memory on the
heap<00:00:31.890><c> and</c><00:00:32.250><c> delete</c><00:00:32.520><c> is</c><00:00:32.669><c> needed</c><00:00:32.940><c> to</c><00:00:33.030><c> delete</c><00:00:33.390><c> that</c>

00:00:33.620 --> 00:00:33.630 align:start position:0%
heap and delete is needed to delete that
 

00:00:33.630 --> 00:00:35.060 align:start position:0%
heap and delete is needed to delete that
memory<00:00:33.930><c> to</c><00:00:33.960><c> free</c><00:00:34.170><c> that</c><00:00:34.410><c> memory</c><00:00:34.559><c> because</c><00:00:34.950><c> it</c>

00:00:35.060 --> 00:00:35.070 align:start position:0%
memory to free that memory because it
 

00:00:35.070 --> 00:00:36.770 align:start position:0%
memory to free that memory because it
won't<00:00:35.309><c> be</c><00:00:35.489><c> freed</c><00:00:35.760><c> automatically</c><00:00:36.420><c> smart</c>

00:00:36.770 --> 00:00:36.780 align:start position:0%
won't be freed automatically smart
 

00:00:36.780 --> 00:00:39.049 align:start position:0%
won't be freed automatically smart
pointers<00:00:37.260><c> are</c><00:00:37.590><c> a</c><00:00:37.649><c> way</c><00:00:38.010><c> to</c><00:00:38.040><c> automate</c><00:00:38.910><c> that</c>

00:00:39.049 --> 00:00:39.059 align:start position:0%
pointers are a way to automate that
 

00:00:39.059 --> 00:00:41.750 align:start position:0%
pointers are a way to automate that
process<00:00:39.120><c> that's</c><00:00:40.020><c> all</c><00:00:40.200><c> they</c><00:00:40.440><c> are</c><00:00:40.469><c> right</c><00:00:41.190><c> smart</c>

00:00:41.750 --> 00:00:41.760 align:start position:0%
process that's all they are right smart
 

00:00:41.760 --> 00:00:44.479 align:start position:0%
process that's all they are right smart
pointers<00:00:42.210><c> mean</c><00:00:42.690><c> that</c><00:00:42.930><c> when</c><00:00:43.140><c> you</c><00:00:43.260><c> call</c><00:00:43.530><c> new</c><00:00:43.829><c> you</c>

00:00:44.479 --> 00:00:44.489 align:start position:0%
pointers mean that when you call new you
 

00:00:44.489 --> 00:00:46.639 align:start position:0%
pointers mean that when you call new you
don't<00:00:44.700><c> have</c><00:00:45.030><c> to</c><00:00:45.270><c> call</c><00:00:45.450><c> delete</c><00:00:45.780><c> and</c><00:00:46.020><c> in</c><00:00:46.350><c> fact</c><00:00:46.500><c> in</c>

00:00:46.639 --> 00:00:46.649 align:start position:0%
don't have to call delete and in fact in
 

00:00:46.649 --> 00:00:48.020 align:start position:0%
don't have to call delete and in fact in
many<00:00:46.739><c> cases</c><00:00:46.860><c> with</c><00:00:47.309><c> smart</c><00:00:47.520><c> pointers</c><00:00:47.850><c> we</c><00:00:47.910><c> don't</c>

00:00:48.020 --> 00:00:48.030 align:start position:0%
many cases with smart pointers we don't
 

00:00:48.030 --> 00:00:50.569 align:start position:0%
many cases with smart pointers we don't
even<00:00:48.149><c> have</c><00:00:48.329><c> to</c><00:00:48.570><c> call</c><00:00:48.780><c> new</c><00:00:49.079><c> so</c><00:00:49.649><c> a</c><00:00:49.980><c> lot</c><00:00:50.190><c> of</c><00:00:50.219><c> people</c>

00:00:50.569 --> 00:00:50.579 align:start position:0%
even have to call new so a lot of people
 

00:00:50.579 --> 00:00:52.729 align:start position:0%
even have to call new so a lot of people
tend<00:00:51.149><c> to</c><00:00:51.300><c> have</c><00:00:51.510><c> this</c><00:00:51.690><c> kind</c><00:00:51.960><c> of</c><00:00:52.110><c> programming</c>

00:00:52.729 --> 00:00:52.739 align:start position:0%
tend to have this kind of programming
 

00:00:52.739 --> 00:00:54.260 align:start position:0%
tend to have this kind of programming
style<00:00:53.039><c> and</c><00:00:53.190><c> safe</c><00:00:53.340><c> as</c><00:00:53.460><c> possible</c><00:00:53.610><c> they</c><00:00:53.910><c> never</c>

00:00:54.260 --> 00:00:54.270 align:start position:0%
style and safe as possible they never
 

00:00:54.270 --> 00:00:56.840 align:start position:0%
style and safe as possible they never
ever<00:00:54.539><c> call</c><00:00:54.989><c> new</c><00:00:55.320><c> or</c><00:00:55.680><c> delete</c><00:00:56.190><c> and</c><00:00:56.430><c> smart</c>

00:00:56.840 --> 00:00:56.850 align:start position:0%
ever call new or delete and smart
 

00:00:56.850 --> 00:00:59.029 align:start position:0%
ever call new or delete and smart
pointers<00:00:57.239><c> are</c><00:00:57.390><c> best</c><00:00:57.690><c> their</c><00:00:57.960><c> way</c><00:00:58.109><c> to</c><00:00:58.170><c> make</c><00:00:58.859><c> that</c>

00:00:59.029 --> 00:00:59.039 align:start position:0%
pointers are best their way to make that
 

00:00:59.039 --> 00:01:00.740 align:start position:0%
pointers are best their way to make that
happen<00:00:59.100><c> so</c><00:00:59.640><c> smart</c><00:00:59.940><c> pointers</c><00:01:00.300><c> are</c><00:01:00.390><c> essentially</c>

00:01:00.740 --> 00:01:00.750 align:start position:0%
happen so smart pointers are essentially
 

00:01:00.750 --> 00:01:03.680 align:start position:0%
happen so smart pointers are essentially
a<00:01:00.780><c> wrapper</c><00:01:01.170><c> around</c><00:01:01.440><c> a</c><00:01:01.980><c> real</c><00:01:02.340><c> raw</c><00:01:02.760><c> pointer</c><00:01:03.359><c> when</c>

00:01:03.680 --> 00:01:03.690 align:start position:0%
a wrapper around a real raw pointer when
 

00:01:03.690 --> 00:01:05.420 align:start position:0%
a wrapper around a real raw pointer when
you<00:01:03.780><c> create</c><00:01:04.049><c> a</c><00:01:04.080><c> smart</c><00:01:04.350><c> pointer</c><00:01:04.769><c> and</c><00:01:04.979><c> you</c><00:01:05.129><c> make</c>

00:01:05.420 --> 00:01:05.430 align:start position:0%
you create a smart pointer and you make
 

00:01:05.430 --> 00:01:07.520 align:start position:0%
you create a smart pointer and you make
it<00:01:05.670><c> it</c><00:01:06.000><c> will</c><00:01:06.210><c> call</c><00:01:06.479><c> new</c><00:01:06.780><c> and</c><00:01:07.020><c> allocate</c><00:01:07.409><c> your</c>

00:01:07.520 --> 00:01:07.530 align:start position:0%
it it will call new and allocate your
 

00:01:07.530 --> 00:01:09.649 align:start position:0%
it it will call new and allocate your
memory<00:01:07.920><c> for</c><00:01:08.159><c> you</c><00:01:08.310><c> and</c><00:01:08.520><c> then</c><00:01:08.790><c> based</c><00:01:09.180><c> on</c><00:01:09.360><c> which</c>

00:01:09.649 --> 00:01:09.659 align:start position:0%
memory for you and then based on which
 

00:01:09.659 --> 00:01:12.080 align:start position:0%
memory for you and then based on which
my<00:01:09.960><c> pointer</c><00:01:10.350><c> you</c><00:01:10.470><c> use</c><00:01:10.799><c> that</c><00:01:11.310><c> memory</c><00:01:11.549><c> will</c><00:01:11.909><c> at</c>

00:01:12.080 --> 00:01:12.090 align:start position:0%
my pointer you use that memory will at
 

00:01:12.090 --> 00:01:13.910 align:start position:0%
my pointer you use that memory will at
some<00:01:12.119><c> point</c><00:01:12.390><c> be</c><00:01:12.689><c> automatically</c><00:01:13.290><c> free</c><00:01:13.590><c> so</c>

00:01:13.910 --> 00:01:13.920 align:start position:0%
some point be automatically free so
 

00:01:13.920 --> 00:01:15.260 align:start position:0%
some point be automatically free so
let's<00:01:14.070><c> take</c><00:01:14.220><c> a</c><00:01:14.250><c> look</c><00:01:14.400><c> at</c><00:01:14.520><c> the</c><00:01:14.610><c> first</c><00:01:14.850><c> kind</c><00:01:15.180><c> of</c>

00:01:15.260 --> 00:01:15.270 align:start position:0%
let's take a look at the first kind of
 

00:01:15.270 --> 00:01:16.700 align:start position:0%
let's take a look at the first kind of
an<00:01:15.360><c> simplest</c><00:01:15.810><c> smart</c><00:01:16.020><c> border</c><00:01:16.290><c> that</c><00:01:16.409><c> we</c><00:01:16.530><c> have</c>

00:01:16.700 --> 00:01:16.710 align:start position:0%
an simplest smart border that we have
 

00:01:16.710 --> 00:01:18.859 align:start position:0%
an simplest smart border that we have
unique<00:01:17.220><c> pointers</c><00:01:17.700><c> so</c><00:01:17.880><c> a</c><00:01:17.909><c> unique</c><00:01:18.270><c> pointer</c><00:01:18.689><c> is</c><00:01:18.840><c> a</c>

00:01:18.859 --> 00:01:18.869 align:start position:0%
unique pointers so a unique pointer is a
 

00:01:18.869 --> 00:01:20.960 align:start position:0%
unique pointers so a unique pointer is a
script<00:01:19.290><c> pointer</c><00:01:19.770><c> meaning</c><00:01:20.040><c> that</c><00:01:20.159><c> when</c><00:01:20.549><c> that</c>

00:01:20.960 --> 00:01:20.970 align:start position:0%
script pointer meaning that when that
 

00:01:20.970 --> 00:01:23.780 align:start position:0%
script pointer meaning that when that
pointer<00:01:21.479><c> goes</c><00:01:21.689><c> out</c><00:01:21.900><c> of</c><00:01:22.020><c> scope</c><00:01:22.350><c> it</c><00:01:23.009><c> will</c><00:01:23.220><c> it</c>

00:01:23.780 --> 00:01:23.790 align:start position:0%
pointer goes out of scope it will it
 

00:01:23.790 --> 00:01:25.070 align:start position:0%
pointer goes out of scope it will it
will<00:01:23.880><c> get</c><00:01:24.060><c> destroyed</c><00:01:24.450><c> and</c><00:01:24.509><c> it</c><00:01:24.750><c> will</c><00:01:24.869><c> call</c>

00:01:25.070 --> 00:01:25.080 align:start position:0%
will get destroyed and it will call
 

00:01:25.080 --> 00:01:26.420 align:start position:0%
will get destroyed and it will call
delete<00:01:25.409><c> we</c><00:01:25.710><c> actually</c><00:01:25.950><c> talked</c><00:01:26.100><c> about</c><00:01:26.280><c> how</c>

00:01:26.420 --> 00:01:26.430 align:start position:0%
delete we actually talked about how
 

00:01:26.430 --> 00:01:28.310 align:start position:0%
delete we actually talked about how
object<00:01:26.850><c> lifetimes</c><00:01:27.330><c> work</c><00:01:27.659><c> and</c><00:01:27.930><c> how</c><00:01:28.049><c> you</c><00:01:28.080><c> can</c>

00:01:28.310 --> 00:01:28.320 align:start position:0%
object lifetimes work and how you can
 

00:01:28.320 --> 00:01:30.440 align:start position:0%
object lifetimes work and how you can
leverage<00:01:28.650><c> the</c><00:01:29.040><c> power</c><00:01:29.250><c> of</c><00:01:29.460><c> stack</c><00:01:29.939><c> allocation</c>

00:01:30.440 --> 00:01:30.450 align:start position:0%
leverage the power of stack allocation
 

00:01:30.450 --> 00:01:31.969 align:start position:0%
leverage the power of stack allocation
all<00:01:30.689><c> that</c><00:01:30.930><c> in</c><00:01:31.079><c> the</c><00:01:31.140><c> last</c><00:01:31.320><c> video</c><00:01:31.590><c> so</c><00:01:31.650><c> definitely</c>

00:01:31.969 --> 00:01:31.979 align:start position:0%
all that in the last video so definitely
 

00:01:31.979 --> 00:01:32.929 align:start position:0%
all that in the last video so definitely
check<00:01:32.070><c> that</c><00:01:32.189><c> out</c><00:01:32.340><c> if</c><00:01:32.430><c> you</c><00:01:32.610><c> haven't</c><00:01:32.850><c> already</c>

00:01:32.929 --> 00:01:32.939 align:start position:0%
check that out if you haven't already
 

00:01:32.939 --> 00:01:34.969 align:start position:0%
check that out if you haven't already
but<00:01:33.390><c> that</c><00:01:33.509><c> is</c><00:01:33.630><c> basically</c><00:01:33.900><c> our</c><00:01:34.110><c> script</c><00:01:34.619><c> points</c>

00:01:34.969 --> 00:01:34.979 align:start position:0%
but that is basically our script points
 

00:01:34.979 --> 00:01:36.770 align:start position:0%
but that is basically our script points
work<00:01:35.130><c> or</c><00:01:35.310><c> unique</c><00:01:35.909><c> pointers</c><00:01:36.299><c> there</c><00:01:36.570><c> isn't</c>

00:01:36.770 --> 00:01:36.780 align:start position:0%
work or unique pointers there isn't
 

00:01:36.780 --> 00:01:37.760 align:start position:0%
work or unique pointers there isn't
they're<00:01:36.869><c> called</c><00:01:37.049><c> unique</c><00:01:37.259><c> pointers</c><00:01:37.650><c> it</c>

00:01:37.760 --> 00:01:37.770 align:start position:0%
they're called unique pointers it
 

00:01:37.770 --> 00:01:39.590 align:start position:0%
they're called unique pointers it
because<00:01:38.040><c> they</c><00:01:38.280><c> have</c><00:01:38.460><c> to</c><00:01:38.490><c> be</c><00:01:38.759><c> unique</c><00:01:39.119><c> you</c><00:01:39.180><c> can't</c>

00:01:39.590 --> 00:01:39.600 align:start position:0%
because they have to be unique you can't
 

00:01:39.600 --> 00:01:41.870 align:start position:0%
because they have to be unique you can't
copy<00:01:39.990><c> a</c><00:01:40.200><c> unique</c><00:01:40.650><c> pointer</c><00:01:41.130><c> because</c><00:01:41.460><c> if</c><00:01:41.729><c> you</c>

00:01:41.870 --> 00:01:41.880 align:start position:0%
copy a unique pointer because if you
 

00:01:41.880 --> 00:01:44.120 align:start position:0%
copy a unique pointer because if you
copy<00:01:42.119><c> a</c><00:01:42.299><c> unique</c><00:01:42.750><c> pointer</c><00:01:43.229><c> the</c><00:01:43.619><c> memory</c><00:01:43.979><c> that</c>

00:01:44.120 --> 00:01:44.130 align:start position:0%
copy a unique pointer the memory that
 

00:01:44.130 --> 00:01:45.469 align:start position:0%
copy a unique pointer the memory that
it's<00:01:44.280><c> pointing</c><00:01:44.670><c> to</c><00:01:44.820><c> they'll</c><00:01:45.119><c> basically</c>

00:01:45.469 --> 00:01:45.479 align:start position:0%
it's pointing to they'll basically
 

00:01:45.479 --> 00:01:47.030 align:start position:0%
it's pointing to they'll basically
you'll<00:01:45.780><c> have</c><00:01:45.930><c> two</c><00:01:46.170><c> pointers</c><00:01:46.560><c> two</c><00:01:46.799><c> unique</c>

00:01:47.030 --> 00:01:47.040 align:start position:0%
you'll have two pointers two unique
 

00:01:47.040 --> 00:01:48.289 align:start position:0%
you'll have two pointers two unique
pointers<00:01:47.430><c> pointing</c><00:01:47.670><c> to</c><00:01:47.759><c> the</c><00:01:47.850><c> same</c><00:01:47.970><c> block</c><00:01:48.180><c> of</c>

00:01:48.289 --> 00:01:48.299 align:start position:0%
pointers pointing to the same block of
 

00:01:48.299 --> 00:01:50.270 align:start position:0%
pointers pointing to the same block of
memory<00:01:48.450><c> and</c><00:01:48.780><c> when</c><00:01:49.170><c> one</c><00:01:49.409><c> of</c><00:01:49.439><c> them</c><00:01:49.680><c> dies</c><00:01:49.710><c> it</c><00:01:50.250><c> will</c>

00:01:50.270 --> 00:01:50.280 align:start position:0%
memory and when one of them dies it will
 

00:01:50.280 --> 00:01:52.370 align:start position:0%
memory and when one of them dies it will
free<00:01:50.700><c> that</c><00:01:50.909><c> memory</c><00:01:51.090><c> meaning</c><00:01:51.869><c> that</c><00:01:52.079><c> suddenly</c>

00:01:52.370 --> 00:01:52.380 align:start position:0%
free that memory meaning that suddenly
 

00:01:52.380 --> 00:01:53.840 align:start position:0%
free that memory meaning that suddenly
that<00:01:52.590><c> second</c><00:01:53.009><c> unique</c><00:01:53.220><c> pointer</c><00:01:53.579><c> you</c><00:01:53.670><c> had</c>

00:01:53.840 --> 00:01:53.850 align:start position:0%
that second unique pointer you had
 

00:01:53.850 --> 00:01:55.310 align:start position:0%
that second unique pointer you had
pointed<00:01:54.270><c> to</c><00:01:54.360><c> the</c><00:01:54.450><c> same</c><00:01:54.600><c> book</c><00:01:54.750><c> of</c><00:01:54.869><c> memory</c><00:01:55.140><c> is</c>

00:01:55.310 --> 00:01:55.320 align:start position:0%
pointed to the same book of memory is
 

00:01:55.320 --> 00:01:57.410 align:start position:0%
pointed to the same book of memory is
pointing<00:01:55.979><c> to</c><00:01:56.130><c> memory</c><00:01:56.549><c> that's</c><00:01:56.700><c> been</c><00:01:56.759><c> freed</c><00:01:57.119><c> so</c>

00:01:57.410 --> 00:01:57.420 align:start position:0%
pointing to memory that's been freed so
 

00:01:57.420 --> 00:01:59.420 align:start position:0%
pointing to memory that's been freed so
you<00:01:57.509><c> cannot</c><00:01:57.899><c> copy</c><00:01:58.290><c> unique</c><00:01:58.799><c> pointers</c><00:01:59.189><c> you</c><00:01:59.219><c> need</c>

00:01:59.420 --> 00:01:59.430 align:start position:0%
you cannot copy unique pointers you need
 

00:01:59.430 --> 00:02:00.920 align:start position:0%
you cannot copy unique pointers you need
pointers<00:01:59.820><c> are</c><00:01:59.939><c> for</c><00:02:00.090><c> when</c><00:02:00.240><c> you</c><00:02:00.360><c> want</c><00:02:00.570><c> a</c><00:02:00.659><c> skrub</c>

00:02:00.920 --> 00:02:00.930 align:start position:0%
pointers are for when you want a skrub
 

00:02:00.930 --> 00:02:03.350 align:start position:0%
pointers are for when you want a skrub
pointer<00:02:01.380><c> and</c><00:02:01.610><c> that</c><00:02:02.610><c> is</c><00:02:02.729><c> the</c><00:02:02.850><c> only</c><00:02:03.030><c> reference</c>

00:02:03.350 --> 00:02:03.360 align:start position:0%
pointer and that is the only reference
 

00:02:03.360 --> 00:02:05.060 align:start position:0%
pointer and that is the only reference
to<00:02:03.659><c> that</c><00:02:03.780><c> pointer</c><00:02:04.170><c> you</c><00:02:04.259><c> actually</c><00:02:04.619><c> want</c><00:02:04.829><c> let's</c>

00:02:05.060 --> 00:02:05.070 align:start position:0%
to that pointer you actually want let's
 

00:02:05.070 --> 00:02:05.950 align:start position:0%
to that pointer you actually want let's
take<00:02:05.189><c> a</c><00:02:05.250><c> look</c><00:02:05.369><c> at</c><00:02:05.430><c> an</c><00:02:05.549><c> example</c>

00:02:05.950 --> 00:02:05.960 align:start position:0%
take a look at an example
 

00:02:05.960 --> 00:02:07.330 align:start position:0%
take a look at an example
a<00:02:05.990><c> unique</c><00:02:06.260><c> pointer</c><00:02:06.650><c> so</c><00:02:06.890><c> the</c><00:02:06.979><c> first</c><00:02:07.190><c> thing</c>

00:02:07.330 --> 00:02:07.340 align:start position:0%
a unique pointer so the first thing
 

00:02:07.340 --> 00:02:08.559 align:start position:0%
a unique pointer so the first thing
you'll<00:02:07.460><c> need</c><00:02:07.549><c> to</c><00:02:07.610><c> do</c><00:02:07.760><c> to</c><00:02:07.880><c> get</c><00:02:07.970><c> access</c><00:02:08.179><c> to</c><00:02:08.390><c> all</c>

00:02:08.559 --> 00:02:08.569 align:start position:0%
you'll need to do to get access to all
 

00:02:08.569 --> 00:02:10.840 align:start position:0%
you'll need to do to get access to all
these<00:02:08.750><c> smart</c><00:02:08.990><c> pointers</c><00:02:09.500><c> is</c><00:02:09.709><c> include</c><00:02:10.310><c> memory</c>

00:02:10.840 --> 00:02:10.850 align:start position:0%
these smart pointers is include memory
 

00:02:10.850 --> 00:02:12.940 align:start position:0%
these smart pointers is include memory
now<00:02:11.390><c> we</c><00:02:11.450><c> have</c><00:02:11.660><c> this</c><00:02:11.810><c> entity</c><00:02:12.110><c> class</c><00:02:12.440><c> here</c><00:02:12.740><c> or</c>

00:02:12.940 --> 00:02:12.950 align:start position:0%
now we have this entity class here or
 

00:02:12.950 --> 00:02:14.230 align:start position:0%
now we have this entity class here or
what<00:02:13.130><c> is</c><00:02:13.280><c> is</c><00:02:13.459><c> the</c><00:02:13.550><c> constructor</c><00:02:14.090><c> on</c><00:02:14.180><c> a</c>

00:02:14.230 --> 00:02:14.240 align:start position:0%
what is is the constructor on a
 

00:02:14.240 --> 00:02:16.090 align:start position:0%
what is is the constructor on a
destructor<00:02:14.810><c> with</c><00:02:15.110><c> print</c><00:02:15.350><c> when</c><00:02:15.470><c> we</c><00:02:15.560><c> create</c><00:02:15.860><c> the</c>

00:02:16.090 --> 00:02:16.100 align:start position:0%
destructor with print when we create the
 

00:02:16.100 --> 00:02:17.650 align:start position:0%
destructor with print when we create the
entity<00:02:16.430><c> R</c><00:02:16.459><c> when</c><00:02:16.640><c> we</c><00:02:16.730><c> destroy</c><00:02:17.060><c> the</c><00:02:17.209><c> entity</c><00:02:17.480><c> just</c>

00:02:17.650 --> 00:02:17.660 align:start position:0%
entity R when we destroy the entity just
 

00:02:17.660 --> 00:02:18.790 align:start position:0%
entity R when we destroy the entity just
so<00:02:17.720><c> that</c><00:02:17.840><c> we</c><00:02:17.930><c> can</c><00:02:18.050><c> kind</c><00:02:18.170><c> of</c><00:02:18.290><c> look</c><00:02:18.440><c> into</c><00:02:18.709><c> the</c>

00:02:18.790 --> 00:02:18.800 align:start position:0%
so that we can kind of look into the
 

00:02:18.800 --> 00:02:20.830 align:start position:0%
so that we can kind of look into the
behavior<00:02:19.220><c> of</c><00:02:19.250><c> these</c><00:02:19.640><c> smart</c><00:02:19.880><c> pointers</c><00:02:20.300><c> so</c><00:02:20.630><c> over</c>

00:02:20.830 --> 00:02:20.840 align:start position:0%
behavior of these smart pointers so over
 

00:02:20.840 --> 00:02:22.120 align:start position:0%
behavior of these smart pointers so over
here<00:02:20.990><c> in</c><00:02:21.050><c> main</c><00:02:21.230><c> if</c><00:02:21.410><c> I</c><00:02:21.500><c> want</c><00:02:21.709><c> to</c><00:02:21.770><c> create</c><00:02:22.010><c> a</c>

00:02:22.120 --> 00:02:22.130 align:start position:0%
here in main if I want to create a
 

00:02:22.130 --> 00:02:24.070 align:start position:0%
here in main if I want to create a
unique<00:02:22.400><c> pointer</c><00:02:22.940><c> which</c><00:02:23.090><c> lasts</c><00:02:23.510><c> in</c><00:02:23.720><c> a</c><00:02:23.810><c> certain</c>

00:02:24.070 --> 00:02:24.080 align:start position:0%
unique pointer which lasts in a certain
 

00:02:24.080 --> 00:02:25.809 align:start position:0%
unique pointer which lasts in a certain
scope<00:02:24.350><c> so</c><00:02:24.560><c> I've</c><00:02:24.650><c> made</c><00:02:24.800><c> a</c><00:02:24.830><c> new</c><00:02:25.040><c> scope</c><00:02:25.370><c> you</c><00:02:25.610><c> an</c>

00:02:25.809 --> 00:02:25.819 align:start position:0%
scope so I've made a new scope you an
 

00:02:25.819 --> 00:02:27.729 align:start position:0%
scope so I've made a new scope you an
empty<00:02:26.270><c> scope</c><00:02:26.569><c> inside</c><00:02:26.840><c> here</c><00:02:27.260><c> I'm</c><00:02:27.410><c> going</c><00:02:27.620><c> to</c>

00:02:27.729 --> 00:02:27.739 align:start position:0%
empty scope inside here I'm going to
 

00:02:27.739 --> 00:02:29.680 align:start position:0%
empty scope inside here I'm going to
allocate<00:02:28.069><c> my</c><00:02:28.430><c> entity</c><00:02:28.880><c> using</c><00:02:29.420><c> a</c><00:02:29.480><c> unique</c>

00:02:29.680 --> 00:02:29.690 align:start position:0%
allocate my entity using a unique
 

00:02:29.690 --> 00:02:31.270 align:start position:0%
allocate my entity using a unique
pointer<00:02:30.110><c> the</c><00:02:30.590><c> way</c><00:02:30.680><c> I'll</c><00:02:30.800><c> do</c><00:02:30.920><c> that</c><00:02:31.040><c> is</c><00:02:31.190><c> I'll</c>

00:02:31.270 --> 00:02:31.280 align:start position:0%
pointer the way I'll do that is I'll
 

00:02:31.280 --> 00:02:34.449 align:start position:0%
pointer the way I'll do that is I'll
type<00:02:31.459><c> in</c><00:02:31.640><c> SV</c><00:02:32.050><c> unique</c><00:02:33.050><c> pointer</c><00:02:33.830><c> I'll</c><00:02:33.980><c> give</c><00:02:34.310><c> it</c><00:02:34.340><c> a</c>

00:02:34.449 --> 00:02:34.459 align:start position:0%
type in SV unique pointer I'll give it a
 

00:02:34.459 --> 00:02:37.000 align:start position:0%
type in SV unique pointer I'll give it a
template<00:02:34.790><c> argument</c><00:02:35.270><c> of</c><00:02:35.420><c> entity</c><00:02:36.170><c> and</c><00:02:36.530><c> then</c>

00:02:37.000 --> 00:02:37.010 align:start position:0%
template argument of entity and then
 

00:02:37.010 --> 00:02:38.740 align:start position:0%
template argument of entity and then
I'll<00:02:37.100><c> give</c><00:02:37.340><c> it</c><00:02:37.430><c> a</c><00:02:37.459><c> name</c><00:02:37.640><c> such</c><00:02:37.880><c> as</c><00:02:37.940><c> entity</c><00:02:38.360><c> and</c>

00:02:38.740 --> 00:02:38.750 align:start position:0%
I'll give it a name such as entity and
 

00:02:38.750 --> 00:02:40.000 align:start position:0%
I'll give it a name such as entity and
then<00:02:39.050><c> I've</c><00:02:39.140><c> kind</c><00:02:39.230><c> of</c><00:02:39.320><c> got</c><00:02:39.440><c> two</c><00:02:39.620><c> options</c><00:02:39.769><c> I</c>

00:02:40.000 --> 00:02:40.010 align:start position:0%
then I've kind of got two options I
 

00:02:40.010 --> 00:02:41.229 align:start position:0%
then I've kind of got two options I
could<00:02:40.160><c> either</c><00:02:40.250><c> call</c><00:02:40.489><c> the</c><00:02:40.580><c> constructor</c><00:02:40.820><c> here</c>

00:02:41.229 --> 00:02:41.239 align:start position:0%
could either call the constructor here
 

00:02:41.239 --> 00:02:44.140 align:start position:0%
could either call the constructor here
and<00:02:41.480><c> type</c><00:02:42.019><c> in</c><00:02:42.140><c> new</c><00:02:42.320><c> entity</c><00:02:42.709><c> like</c><00:02:43.160><c> this</c><00:02:43.400><c> note</c>

00:02:44.140 --> 00:02:44.150 align:start position:0%
and type in new entity like this note
 

00:02:44.150 --> 00:02:45.850 align:start position:0%
and type in new entity like this note
that<00:02:44.180><c> you</c><00:02:44.420><c> actually</c><00:02:44.570><c> won't</c><00:02:44.959><c> be</c><00:02:45.140><c> able</c><00:02:45.320><c> to</c><00:02:45.470><c> do</c>

00:02:45.850 --> 00:02:45.860 align:start position:0%
that you actually won't be able to do
 

00:02:45.860 --> 00:02:49.449 align:start position:0%
that you actually won't be able to do
this<00:02:46.400><c> kind</c><00:02:46.730><c> of</c><00:02:47.080><c> construction</c><00:02:48.100><c> because</c><00:02:49.100><c> if</c><00:02:49.370><c> you</c>

00:02:49.449 --> 00:02:49.459 align:start position:0%
this kind of construction because if you
 

00:02:49.459 --> 00:02:51.280 align:start position:0%
this kind of construction because if you
look<00:02:49.580><c> at</c><00:02:49.700><c> unique</c><00:02:49.910><c> pointer</c><00:02:50.300><c> the</c><00:02:50.780><c> constructor</c>

00:02:51.280 --> 00:02:51.290 align:start position:0%
look at unique pointer the constructor
 

00:02:51.290 --> 00:02:53.259 align:start position:0%
look at unique pointer the constructor
is<00:02:51.410><c> actually</c><00:02:51.709><c> explicit</c><00:02:52.430><c> meaning</c><00:02:52.880><c> that</c><00:02:52.970><c> you</c><00:02:53.090><c> do</c>

00:02:53.259 --> 00:02:53.269 align:start position:0%
is actually explicit meaning that you do
 

00:02:53.269 --> 00:02:54.880 align:start position:0%
is actually explicit meaning that you do
have<00:02:53.480><c> to</c><00:02:53.600><c> call</c><00:02:53.780><c> the</c><00:02:53.959><c> constructor</c><00:02:54.170><c> explicitly</c>

00:02:54.880 --> 00:02:54.890 align:start position:0%
have to call the constructor explicitly
 

00:02:54.890 --> 00:02:56.680 align:start position:0%
have to call the constructor explicitly
there's<00:02:55.100><c> no</c><00:02:55.250><c> implicit</c><00:02:55.760><c> kind</c><00:02:56.090><c> of</c><00:02:56.180><c> conversion</c>

00:02:56.680 --> 00:02:56.690 align:start position:0%
there's no implicit kind of conversion
 

00:02:56.690 --> 00:02:58.570 align:start position:0%
there's no implicit kind of conversion
or<00:02:56.930><c> converting</c><00:02:57.380><c> constructor</c><00:02:57.890><c> so</c><00:02:58.160><c> that's</c><00:02:58.310><c> one</c>

00:02:58.570 --> 00:02:58.580 align:start position:0%
or converting constructor so that's one
 

00:02:58.580 --> 00:02:59.830 align:start position:0%
or converting constructor so that's one
way<00:02:58.730><c> to</c><00:02:58.760><c> make</c><00:02:58.940><c> unique</c><00:02:59.239><c> point</c><00:02:59.510><c> and</c><00:02:59.660><c> then</c><00:02:59.750><c> you</c>

00:02:59.830 --> 00:02:59.840 align:start position:0%
way to make unique point and then you
 

00:02:59.840 --> 00:03:01.420 align:start position:0%
way to make unique point and then you
can<00:02:59.870><c> kind</c><00:03:00.140><c> of</c><00:03:00.200><c> access</c><00:03:00.560><c> it</c><00:03:00.739><c> like</c><00:03:00.980><c> you</c><00:03:01.220><c> would</c>

00:03:01.420 --> 00:03:01.430 align:start position:0%
can kind of access it like you would
 

00:03:01.430 --> 00:03:03.340 align:start position:0%
can kind of access it like you would
anything<00:03:02.120><c> else</c><00:03:02.330><c> if</c><00:03:02.600><c> I</c><00:03:02.720><c> wanted</c><00:03:02.959><c> to</c><00:03:03.080><c> call</c><00:03:03.320><c> a</c>

00:03:03.340 --> 00:03:03.350 align:start position:0%
anything else if I wanted to call a
 

00:03:03.350 --> 00:03:04.690 align:start position:0%
anything else if I wanted to call a
function<00:03:03.739><c> here</c><00:03:04.069><c> we</c><00:03:04.190><c> don't</c><00:03:04.250><c> even</c><00:03:04.400><c> have</c><00:03:04.519><c> any</c>

00:03:04.690 --> 00:03:04.700 align:start position:0%
function here we don't even have any
 

00:03:04.700 --> 00:03:06.160 align:start position:0%
function here we don't even have any
functions<00:03:05.120><c> but</c><00:03:05.269><c> if</c><00:03:05.360><c> I</c><00:03:05.480><c> were</c><00:03:05.840><c> to</c><00:03:05.900><c> call</c><00:03:06.110><c> a</c>

00:03:06.160 --> 00:03:06.170 align:start position:0%
functions but if I were to call a
 

00:03:06.170 --> 00:03:08.050 align:start position:0%
functions but if I were to call a
function<00:03:06.380><c> here</c><00:03:06.769><c> I</c><00:03:07.010><c> would</c><00:03:07.489><c> just</c><00:03:07.610><c> access</c><00:03:07.940><c> it</c>

00:03:08.050 --> 00:03:08.060 align:start position:0%
function here I would just access it
 

00:03:08.060 --> 00:03:09.280 align:start position:0%
function here I would just access it
through<00:03:08.180><c> the</c><00:03:08.300><c> arrow</c><00:03:08.480><c> operator</c><00:03:08.690><c> and</c>

00:03:09.280 --> 00:03:09.290 align:start position:0%
through the arrow operator and
 

00:03:09.290 --> 00:03:11.080 align:start position:0%
through the arrow operator and
everything<00:03:09.739><c> would</c><00:03:09.920><c> be</c><00:03:10.250><c> exactly</c><00:03:10.549><c> the</c><00:03:10.700><c> same</c><00:03:10.910><c> as</c>

00:03:11.080 --> 00:03:11.090 align:start position:0%
everything would be exactly the same as
 

00:03:11.090 --> 00:03:12.490 align:start position:0%
everything would be exactly the same as
if<00:03:11.180><c> this</c><00:03:11.299><c> was</c><00:03:11.480><c> just</c><00:03:11.510><c> a</c><00:03:11.750><c> roll</c><00:03:11.900><c> pointer</c><00:03:12.320><c> the</c>

00:03:12.490 --> 00:03:12.500 align:start position:0%
if this was just a roll pointer the
 

00:03:12.500 --> 00:03:14.110 align:start position:0%
if this was just a roll pointer the
preferred<00:03:12.860><c> way</c><00:03:13.100><c> though</c><00:03:13.340><c> to</c><00:03:13.549><c> construct</c><00:03:13.970><c> this</c>

00:03:14.110 --> 00:03:14.120 align:start position:0%
preferred way though to construct this
 

00:03:14.120 --> 00:03:16.180 align:start position:0%
preferred way though to construct this
would<00:03:14.420><c> actually</c><00:03:14.690><c> be</c><00:03:14.840><c> to</c><00:03:14.870><c> assign</c><00:03:15.260><c> it</c><00:03:15.410><c> to</c><00:03:15.440><c> STD</c>

00:03:16.180 --> 00:03:16.190 align:start position:0%
would actually be to assign it to STD
 

00:03:16.190 --> 00:03:18.940 align:start position:0%
would actually be to assign it to STD
make<00:03:16.519><c> unique</c><00:03:16.940><c> with</c><00:03:17.690><c> that</c><00:03:17.930><c> entity</c><00:03:18.290><c> there</c><00:03:18.590><c> the</c>

00:03:18.940 --> 00:03:18.950 align:start position:0%
make unique with that entity there the
 

00:03:18.950 --> 00:03:20.500 align:start position:0%
make unique with that entity there the
primary<00:03:19.370><c> reason</c><00:03:19.640><c> that</c><00:03:19.730><c> that's</c><00:03:19.850><c> important</c><00:03:20.360><c> for</c>

00:03:20.500 --> 00:03:20.510 align:start position:0%
primary reason that that's important for
 

00:03:20.510 --> 00:03:22.090 align:start position:0%
primary reason that that's important for
unique<00:03:20.959><c> pointers</c><00:03:21.500><c> is</c><00:03:21.620><c> actually</c><00:03:21.950><c> due</c><00:03:22.070><c> to</c>

00:03:22.090 --> 00:03:22.100 align:start position:0%
unique pointers is actually due to
 

00:03:22.100 --> 00:03:23.620 align:start position:0%
unique pointers is actually due to
exception<00:03:22.610><c> safety</c><00:03:23.000><c> we'll</c><00:03:23.420><c> talk</c><00:03:23.540><c> about</c>

00:03:23.620 --> 00:03:23.630 align:start position:0%
exception safety we'll talk about
 

00:03:23.630 --> 00:03:25.750 align:start position:0%
exception safety we'll talk about
exceptions<00:03:24.019><c> at</c><00:03:24.410><c> some</c><00:03:24.890><c> point</c><00:03:25.100><c> in</c><00:03:25.190><c> this</c><00:03:25.310><c> series</c>

00:03:25.750 --> 00:03:25.760 align:start position:0%
exceptions at some point in this series
 

00:03:25.760 --> 00:03:28.270 align:start position:0%
exceptions at some point in this series
I<00:03:25.790><c> don't</c><00:03:26.090><c> like</c><00:03:26.360><c> exceptions</c><00:03:26.959><c> at</c><00:03:27.200><c> all</c><00:03:27.350><c> so</c><00:03:27.920><c> that's</c>

00:03:28.270 --> 00:03:28.280 align:start position:0%
I don't like exceptions at all so that's
 

00:03:28.280 --> 00:03:29.560 align:start position:0%
I don't like exceptions at all so that's
gonna<00:03:28.489><c> be</c><00:03:28.640><c> an</c><00:03:28.730><c> interesting</c><00:03:28.910><c> episode</c><00:03:29.150><c> whenever</c>

00:03:29.560 --> 00:03:29.570 align:start position:0%
gonna be an interesting episode whenever
 

00:03:29.570 --> 00:03:31.750 align:start position:0%
gonna be an interesting episode whenever
that<00:03:29.690><c> happens</c><00:03:30.110><c> but</c><00:03:30.320><c> anyway</c><00:03:30.739><c> the</c><00:03:31.430><c> preferred</c>

00:03:31.750 --> 00:03:31.760 align:start position:0%
that happens but anyway the preferred
 

00:03:31.760 --> 00:03:33.670 align:start position:0%
that happens but anyway the preferred
way<00:03:31.940><c> to</c><00:03:32.000><c> make</c><00:03:32.239><c> this</c><00:03:32.420><c> is</c><00:03:32.720><c> to</c><00:03:32.900><c> call</c><00:03:33.079><c> make</c><00:03:33.350><c> unique</c>

00:03:33.670 --> 00:03:33.680 align:start position:0%
way to make this is to call make unique
 

00:03:33.680 --> 00:03:36.310 align:start position:0%
way to make this is to call make unique
because<00:03:34.160><c> it</c><00:03:34.310><c> is</c><00:03:34.430><c> slightly</c><00:03:34.850><c> safer</c><00:03:35.090><c> if</c><00:03:35.510><c> if</c><00:03:36.049><c> the</c>

00:03:36.310 --> 00:03:36.320 align:start position:0%
because it is slightly safer if if the
 

00:03:36.320 --> 00:03:37.449 align:start position:0%
because it is slightly safer if if the
constructor<00:03:36.829><c> happens</c><00:03:37.100><c> to</c><00:03:37.250><c> throw</c><00:03:37.400><c> an</c>

00:03:37.449 --> 00:03:37.459 align:start position:0%
constructor happens to throw an
 

00:03:37.459 --> 00:03:39.699 align:start position:0%
constructor happens to throw an
exception<00:03:37.970><c> you</c><00:03:38.390><c> weren't</c><00:03:38.570><c> end</c><00:03:38.840><c> up</c><00:03:39.019><c> having</c><00:03:39.650><c> a</c>

00:03:39.699 --> 00:03:39.709 align:start position:0%
exception you weren't end up having a
 

00:03:39.709 --> 00:03:41.530 align:start position:0%
exception you weren't end up having a
dangling<00:03:40.130><c> pointer</c><00:03:40.579><c> with</c><00:03:40.730><c> no</c><00:03:40.880><c> reference</c><00:03:41.299><c> and</c>

00:03:41.530 --> 00:03:41.540 align:start position:0%
dangling pointer with no reference and
 

00:03:41.540 --> 00:03:43.780 align:start position:0%
dangling pointer with no reference and
that's<00:03:41.900><c> a</c><00:03:42.019><c> memory</c><00:03:42.200><c> leak</c><00:03:42.440><c> anyway</c><00:03:42.950><c> the</c><00:03:43.340><c> idea</c><00:03:43.370><c> is</c>

00:03:43.780 --> 00:03:43.790 align:start position:0%
that's a memory leak anyway the idea is
 

00:03:43.790 --> 00:03:45.610 align:start position:0%
that's a memory leak anyway the idea is
that<00:03:43.970><c> once</c><00:03:44.420><c> we</c><00:03:44.630><c> make</c><00:03:44.750><c> this</c><00:03:44.870><c> unique</c><00:03:45.110><c> pointer</c><00:03:45.530><c> we</c>

00:03:45.610 --> 00:03:45.620 align:start position:0%
that once we make this unique pointer we
 

00:03:45.620 --> 00:03:46.900 align:start position:0%
that once we make this unique pointer we
can<00:03:45.739><c> call</c><00:03:45.860><c> whatever</c><00:03:46.040><c> method</c><00:03:46.400><c> we</c><00:03:46.489><c> want</c><00:03:46.640><c> and</c>

00:03:46.900 --> 00:03:46.910 align:start position:0%
can call whatever method we want and
 

00:03:46.910 --> 00:03:48.880 align:start position:0%
can call whatever method we want and
you'll<00:03:47.180><c> see</c><00:03:47.390><c> that</c><00:03:47.570><c> if</c><00:03:47.690><c> I</c><00:03:47.840><c> hit</c><00:03:48.049><c> f5</c><00:03:48.440><c> to</c><00:03:48.500><c> run</c><00:03:48.769><c> my</c>

00:03:48.880 --> 00:03:48.890 align:start position:0%
you'll see that if I hit f5 to run my
 

00:03:48.890 --> 00:03:51.160 align:start position:0%
you'll see that if I hit f5 to run my
program<00:03:49.070><c> our</c><00:03:49.730><c> entity</c><00:03:50.150><c> gets</c><00:03:50.269><c> created</c><00:03:50.750><c> here</c><00:03:50.989><c> and</c>

00:03:51.160 --> 00:03:51.170 align:start position:0%
program our entity gets created here and
 

00:03:51.170 --> 00:03:52.870 align:start position:0%
program our entity gets created here and
then<00:03:51.350><c> if</c><00:03:51.440><c> I</c><00:03:51.530><c> hit</c><00:03:51.650><c> f10</c><00:03:52.070><c> to</c><00:03:52.340><c> get</c><00:03:52.609><c> out</c><00:03:52.700><c> of</c><00:03:52.790><c> this</c>

00:03:52.870 --> 00:03:52.880 align:start position:0%
then if I hit f10 to get out of this
 

00:03:52.880 --> 00:03:54.940 align:start position:0%
then if I hit f10 to get out of this
scope<00:03:53.150><c> our</c><00:03:53.420><c> entity</c><00:03:53.900><c> is</c><00:03:54.109><c> destroyed</c><00:03:54.560><c> now</c>

00:03:54.940 --> 00:03:54.950 align:start position:0%
scope our entity is destroyed now
 

00:03:54.950 --> 00:03:56.500 align:start position:0%
scope our entity is destroyed now
okay<00:03:55.220><c> so</c><00:03:55.280><c> automatically</c><00:03:55.970><c> when</c><00:03:56.150><c> this</c><00:03:56.269><c> code</c>

00:03:56.500 --> 00:03:56.510 align:start position:0%
okay so automatically when this code
 

00:03:56.510 --> 00:03:58.539 align:start position:0%
okay so automatically when this code
ends<00:03:56.870><c> our</c><00:03:57.079><c> entity</c><00:03:57.440><c> gets</c><00:03:57.620><c> destroyed</c><00:03:58.100><c> that's</c>

00:03:58.539 --> 00:03:58.549 align:start position:0%
ends our entity gets destroyed that's
 

00:03:58.549 --> 00:03:59.890 align:start position:0%
ends our entity gets destroyed that's
the<00:03:58.700><c> simplest</c><00:03:59.000><c> my</c><00:03:59.180><c> pointer</c><00:03:59.510><c> that</c><00:03:59.600><c> we</c><00:03:59.720><c> have</c>

00:03:59.890 --> 00:03:59.900 align:start position:0%
the simplest my pointer that we have
 

00:03:59.900 --> 00:04:01.330 align:start position:0%
the simplest my pointer that we have
it's<00:04:00.109><c> very</c><00:04:00.290><c> useful</c><00:04:00.709><c> it's</c><00:04:00.799><c> got</c><00:04:00.920><c> a</c><00:04:00.950><c> very</c><00:04:01.100><c> low</c>

00:04:01.330 --> 00:04:01.340 align:start position:0%
it's very useful it's got a very low
 

00:04:01.340 --> 00:04:03.400 align:start position:0%
it's very useful it's got a very low
overhead<00:04:01.850><c> it</c><00:04:02.209><c> doesn't</c><00:04:02.450><c> really</c><00:04:02.690><c> even</c><00:04:03.049><c> have</c><00:04:03.230><c> an</c>

00:04:03.400 --> 00:04:03.410 align:start position:0%
overhead it doesn't really even have an
 

00:04:03.410 --> 00:04:05.470 align:start position:0%
overhead it doesn't really even have an
overhead<00:04:03.680><c> it's</c><00:04:04.489><c> just</c><00:04:04.760><c> a</c><00:04:04.850><c> stack</c><00:04:05.060><c> allocated</c>

00:04:05.470 --> 00:04:05.480 align:start position:0%
overhead it's just a stack allocated
 

00:04:05.480 --> 00:04:07.210 align:start position:0%
overhead it's just a stack allocated
object<00:04:05.959><c> and</c><00:04:06.109><c> when</c><00:04:06.290><c> when</c><00:04:06.709><c> that</c><00:04:06.890><c> stack</c>

00:04:07.210 --> 00:04:07.220 align:start position:0%
object and when when that stack
 

00:04:07.220 --> 00:04:08.860 align:start position:0%
object and when when that stack
allocated<00:04:07.609><c> object</c><00:04:08.000><c> eyes</c><00:04:08.150><c> it</c><00:04:08.480><c> will</c><00:04:08.630><c> call</c>

00:04:08.860 --> 00:04:08.870 align:start position:0%
allocated object eyes it will call
 

00:04:08.870 --> 00:04:10.840 align:start position:0%
allocated object eyes it will call
delete<00:04:09.200><c> on</c><00:04:09.440><c> your</c><00:04:09.650><c> pointer</c><00:04:10.100><c> and</c><00:04:10.340><c> free</c><00:04:10.670><c> that</c>

00:04:10.840 --> 00:04:10.850 align:start position:0%
delete on your pointer and free that
 

00:04:10.850 --> 00:04:12.430 align:start position:0%
delete on your pointer and free that
memory<00:04:11.030><c> the</c><00:04:11.359><c> problem</c><00:04:11.630><c> with</c><00:04:11.750><c> this</c><00:04:11.870><c> is</c><00:04:12.109><c> as</c><00:04:12.320><c> I</c>

00:04:12.430 --> 00:04:12.440 align:start position:0%
memory the problem with this is as I
 

00:04:12.440 --> 00:04:12.700 align:start position:0%
memory the problem with this is as I
meant

00:04:12.700 --> 00:04:12.710 align:start position:0%
meant
 

00:04:12.710 --> 00:04:14.590 align:start position:0%
meant
if<00:04:12.830><c> you</c><00:04:12.920><c> want</c><00:04:13.070><c> to</c><00:04:13.130><c> copy</c><00:04:13.370><c> that</c><00:04:13.760><c> at</c><00:04:14.210><c> that</c><00:04:14.330><c> point</c>

00:04:14.590 --> 00:04:14.600 align:start position:0%
if you want to copy that at that point
 

00:04:14.600 --> 00:04:15.970 align:start position:0%
if you want to copy that at that point
if<00:04:14.780><c> you</c><00:04:14.840><c> want</c><00:04:14.960><c> to</c><00:04:15.020><c> kind</c><00:04:15.080><c> of</c><00:04:15.170><c> share</c><00:04:15.500><c> that</c><00:04:15.770><c> point</c>

00:04:15.970 --> 00:04:15.980 align:start position:0%
if you want to kind of share that point
 

00:04:15.980 --> 00:04:17.830 align:start position:0%
if you want to kind of share that point
and<00:04:16.220><c> maybe</c><00:04:16.310><c> pass</c><00:04:16.580><c> it</c><00:04:16.730><c> into</c><00:04:16.850><c> a</c><00:04:16.940><c> function</c><00:04:17.480><c> or</c>

00:04:17.830 --> 00:04:17.840 align:start position:0%
and maybe pass it into a function or
 

00:04:17.840 --> 00:04:20.380 align:start position:0%
and maybe pass it into a function or
have<00:04:18.050><c> another</c><00:04:18.290><c> class</c><00:04:18.530><c> story</c><00:04:19.240><c> you're</c><00:04:20.240><c> gonna</c>

00:04:20.380 --> 00:04:20.390 align:start position:0%
have another class story you're gonna
 

00:04:20.390 --> 00:04:22.210 align:start position:0%
have another class story you're gonna
run<00:04:20.540><c> into</c><00:04:20.690><c> a</c><00:04:20.720><c> problem</c><00:04:20.870><c> because</c><00:04:21.410><c> you</c><00:04:21.920><c> can't</c>

00:04:22.210 --> 00:04:22.220 align:start position:0%
run into a problem because you can't
 

00:04:22.220 --> 00:04:23.800 align:start position:0%
run into a problem because you can't
copy<00:04:22.490><c> it</c><00:04:22.670><c> and</c><00:04:22.910><c> if</c><00:04:23.060><c> you</c><00:04:23.150><c> take</c><00:04:23.300><c> a</c><00:04:23.360><c> look</c><00:04:23.510><c> at</c><00:04:23.660><c> this</c>

00:04:23.800 --> 00:04:23.810 align:start position:0%
copy it and if you take a look at this
 

00:04:23.810 --> 00:04:26.800 align:start position:0%
copy it and if you take a look at this
if<00:04:24.050><c> I</c><00:04:24.260><c> was</c><00:04:24.500><c> to</c><00:04:24.770><c> try</c><00:04:25.040><c> and</c><00:04:25.070><c> make</c><00:04:26.030><c> another</c><00:04:26.420><c> unique</c>

00:04:26.800 --> 00:04:26.810 align:start position:0%
if I was to try and make another unique
 

00:04:26.810 --> 00:04:29.440 align:start position:0%
if I was to try and make another unique
pointer<00:04:27.230><c> here</c><00:04:27.530><c> called</c><00:04:28.340><c> easy</c><00:04:29.150><c> row</c><00:04:29.240><c> or</c>

00:04:29.440 --> 00:04:29.450 align:start position:0%
pointer here called easy row or
 

00:04:29.450 --> 00:04:30.430 align:start position:0%
pointer here called easy row or
something<00:04:29.480><c> like</c><00:04:29.780><c> that</c><00:04:29.930><c> and</c><00:04:30.080><c> assign</c><00:04:30.320><c> it</c><00:04:30.410><c> to</c>

00:04:30.430 --> 00:04:30.440 align:start position:0%
something like that and assign it to
 

00:04:30.440 --> 00:04:32.530 align:start position:0%
something like that and assign it to
entity<00:04:30.920><c> I</c><00:04:31.160><c> actually</c><00:04:31.640><c> can't</c><00:04:32.030><c> do</c><00:04:32.180><c> that</c><00:04:32.360><c> and</c>

00:04:32.530 --> 00:04:32.540 align:start position:0%
entity I actually can't do that and
 

00:04:32.540 --> 00:04:33.760 align:start position:0%
entity I actually can't do that and
you'll<00:04:32.660><c> get</c><00:04:32.810><c> kind</c><00:04:32.990><c> of</c><00:04:33.110><c> an</c><00:04:33.200><c> error</c><00:04:33.350><c> message</c><00:04:33.590><c> here</c>

00:04:33.760 --> 00:04:33.770 align:start position:0%
you'll get kind of an error message here
 

00:04:33.770 --> 00:04:35.410 align:start position:0%
you'll get kind of an error message here
which<00:04:34.070><c> looks</c><00:04:34.160><c> a</c><00:04:34.310><c> bit</c><00:04:34.340><c> weird</c><00:04:34.490><c> if</c><00:04:34.910><c> you</c><00:04:34.970><c> go</c><00:04:35.330><c> to</c>

00:04:35.410 --> 00:04:35.420 align:start position:0%
which looks a bit weird if you go to
 

00:04:35.420 --> 00:04:36.970 align:start position:0%
which looks a bit weird if you go to
this<00:04:35.600><c> unique</c><00:04:35.900><c> point</c><00:04:36.170><c> of</c><00:04:36.230><c> definition</c><00:04:36.380><c> and</c><00:04:36.890><c> you</c>

00:04:36.970 --> 00:04:36.980 align:start position:0%
this unique point of definition and you
 

00:04:36.980 --> 00:04:38.890 align:start position:0%
this unique point of definition and you
actually<00:04:37.130><c> scroll</c><00:04:37.850><c> down</c><00:04:38.030><c> a</c><00:04:38.060><c> bit</c><00:04:38.150><c> you'll</c><00:04:38.720><c> see</c>

00:04:38.890 --> 00:04:38.900 align:start position:0%
actually scroll down a bit you'll see
 

00:04:38.900 --> 00:04:40.360 align:start position:0%
actually scroll down a bit you'll see
that<00:04:39.020><c> the</c><00:04:39.140><c> copy</c><00:04:39.350><c> constructor</c><00:04:40.010><c> and</c><00:04:40.100><c> the</c><00:04:40.160><c> copy</c>

00:04:40.360 --> 00:04:40.370 align:start position:0%
that the copy constructor and the copy
 

00:04:40.370 --> 00:04:42.400 align:start position:0%
that the copy constructor and the copy
assignment<00:04:40.910><c> operator</c><00:04:41.240><c> are</c><00:04:41.480><c> actually</c><00:04:41.870><c> deleted</c>

00:04:42.400 --> 00:04:42.410 align:start position:0%
assignment operator are actually deleted
 

00:04:42.410 --> 00:04:44.170 align:start position:0%
assignment operator are actually deleted
which<00:04:42.590><c> is</c><00:04:42.740><c> why</c><00:04:42.920><c> you</c><00:04:42.980><c> get</c><00:04:43.250><c> a</c><00:04:43.280><c> compile</c><00:04:43.670><c> error</c><00:04:43.700><c> if</c>

00:04:44.170 --> 00:04:44.180 align:start position:0%
which is why you get a compile error if
 

00:04:44.180 --> 00:04:45.730 align:start position:0%
which is why you get a compile error if
you<00:04:44.540><c> try</c><00:04:44.750><c> and</c><00:04:44.810><c> do</c><00:04:44.930><c> something</c><00:04:45.200><c> like</c><00:04:45.260><c> this</c><00:04:45.500><c> and</c>

00:04:45.730 --> 00:04:45.740 align:start position:0%
you try and do something like this and
 

00:04:45.740 --> 00:04:47.230 align:start position:0%
you try and do something like this and
that's<00:04:45.830><c> that's</c><00:04:46.250><c> there</c><00:04:46.520><c> specifically</c><00:04:47.120><c> to</c>

00:04:47.230 --> 00:04:47.240 align:start position:0%
that's that's there specifically to
 

00:04:47.240 --> 00:04:49.270 align:start position:0%
that's that's there specifically to
prevent<00:04:47.540><c> you</c><00:04:47.780><c> from</c><00:04:48.020><c> digging</c><00:04:48.560><c> yourself</c><00:04:48.770><c> into</c><00:04:49.250><c> a</c>

00:04:49.270 --> 00:04:49.280 align:start position:0%
prevent you from digging yourself into a
 

00:04:49.280 --> 00:04:50.680 align:start position:0%
prevent you from digging yourself into a
grave<00:04:49.520><c> because</c><00:04:49.730><c> you</c><00:04:49.940><c> cannot</c><00:04:50.180><c> copy</c><00:04:50.450><c> this</c>

00:04:50.680 --> 00:04:50.690 align:start position:0%
grave because you cannot copy this
 

00:04:50.690 --> 00:04:52.450 align:start position:0%
grave because you cannot copy this
because<00:04:51.410><c> because</c><00:04:51.710><c> again</c><00:04:51.920><c> as</c><00:04:52.040><c> soon</c><00:04:52.160><c> as</c><00:04:52.250><c> one</c><00:04:52.400><c> of</c>

00:04:52.450 --> 00:04:52.460 align:start position:0%
because because again as soon as one of
 

00:04:52.460 --> 00:04:54.040 align:start position:0%
because because again as soon as one of
these<00:04:52.640><c> unique</c><00:04:52.850><c> pointers</c><00:04:53.180><c> dies</c><00:04:53.360><c> they</c><00:04:53.900><c> all</c>

00:04:54.040 --> 00:04:54.050 align:start position:0%
these unique pointers dies they all
 

00:04:54.050 --> 00:04:55.930 align:start position:0%
these unique pointers dies they all
essentially<00:04:54.620><c> kind</c><00:04:54.890><c> of</c><00:04:54.950><c> die</c><00:04:55.160><c> because</c><00:04:55.520><c> the</c>

00:04:55.930 --> 00:04:55.940 align:start position:0%
essentially kind of die because the
 

00:04:55.940 --> 00:04:57.580 align:start position:0%
essentially kind of die because the
memory<00:04:56.390><c> the</c><00:04:56.570><c> underlying</c><00:04:56.900><c> memory</c><00:04:57.290><c> of</c><00:04:57.440><c> that</c>

00:04:57.580 --> 00:04:57.590 align:start position:0%
memory the underlying memory of that
 

00:04:57.590 --> 00:05:00.550 align:start position:0%
memory the underlying memory of that
peepal<00:04:58.220><c> gated</c><00:04:58.490><c> object</c><00:04:58.820><c> gets</c><00:04:59.270><c> freed</c><00:04:59.630><c> so</c><00:04:59.990><c> if</c><00:05:00.320><c> you</c>

00:05:00.550 --> 00:05:00.560 align:start position:0%
peepal gated object gets freed so if you
 

00:05:00.560 --> 00:05:02.590 align:start position:0%
peepal gated object gets freed so if you
like<00:05:00.740><c> sharing</c><00:05:01.280><c> that's</c><00:05:01.820><c> where</c><00:05:02.030><c> shared</c><00:05:02.270><c> pointer</c>

00:05:02.590 --> 00:05:02.600 align:start position:0%
like sharing that's where shared pointer
 

00:05:02.600 --> 00:05:04.480 align:start position:0%
like sharing that's where shared pointer
comes<00:05:02.780><c> in</c><00:05:02.960><c> and</c><00:05:03.110><c> share</c><00:05:03.290><c> pointer</c><00:05:03.680><c> kind</c><00:05:04.250><c> of</c><00:05:04.310><c> works</c>

00:05:04.480 --> 00:05:04.490 align:start position:0%
comes in and share pointer kind of works
 

00:05:04.490 --> 00:05:06.070 align:start position:0%
comes in and share pointer kind of works
a<00:05:04.610><c> bit</c><00:05:04.760><c> a</c><00:05:04.940><c> bit</c><00:05:05.270><c> differently</c><00:05:05.630><c> it's</c><00:05:05.780><c> a</c><00:05:05.840><c> bit</c><00:05:05.930><c> more</c>

00:05:06.070 --> 00:05:06.080 align:start position:0%
a bit a bit differently it's a bit more
 

00:05:06.080 --> 00:05:07.720 align:start position:0%
a bit a bit differently it's a bit more
hardcore<00:05:06.380><c> if</c><00:05:06.890><c> you</c><00:05:07.040><c> will</c><00:05:07.250><c> because</c><00:05:07.520><c> it</c><00:05:07.610><c> does</c><00:05:07.700><c> a</c>

00:05:07.720 --> 00:05:07.730 align:start position:0%
hardcore if you will because it does a
 

00:05:07.730 --> 00:05:09.490 align:start position:0%
hardcore if you will because it does a
lot<00:05:07.850><c> of</c><00:05:07.910><c> other</c><00:05:08.300><c> stuff</c><00:05:08.660><c> under</c><00:05:09.020><c> the</c><00:05:09.110><c> hood</c><00:05:09.230><c> the</c>

00:05:09.490 --> 00:05:09.500 align:start position:0%
lot of other stuff under the hood the
 

00:05:09.500 --> 00:05:11.110 align:start position:0%
lot of other stuff under the hood the
way<00:05:09.620><c> that</c><00:05:09.830><c> a</c><00:05:09.860><c> shared</c><00:05:10.070><c> pointer</c><00:05:10.460><c> is</c><00:05:10.610><c> implemented</c>

00:05:11.110 --> 00:05:11.120 align:start position:0%
way that a shared pointer is implemented
 

00:05:11.120 --> 00:05:12.340 align:start position:0%
way that a shared pointer is implemented
is<00:05:11.210><c> actually</c><00:05:11.480><c> kind</c><00:05:11.660><c> of</c><00:05:11.720><c> up</c><00:05:11.810><c> to</c><00:05:11.840><c> the</c><00:05:11.990><c> compiler</c>

00:05:12.340 --> 00:05:12.350 align:start position:0%
is actually kind of up to the compiler
 

00:05:12.350 --> 00:05:13.810 align:start position:0%
is actually kind of up to the compiler
and<00:05:12.620><c> the</c><00:05:12.800><c> standard</c><00:05:13.220><c> library</c><00:05:13.550><c> that</c><00:05:13.610><c> you're</c>

00:05:13.810 --> 00:05:13.820 align:start position:0%
and the standard library that you're
 

00:05:13.820 --> 00:05:16.090 align:start position:0%
and the standard library that you're
using<00:05:14.060><c> with</c><00:05:14.420><c> your</c><00:05:14.690><c> compiler</c><00:05:15.260><c> however</c><00:05:15.830><c> in</c>

00:05:16.090 --> 00:05:16.100 align:start position:0%
using with your compiler however in
 

00:05:16.100 --> 00:05:17.530 align:start position:0%
using with your compiler however in
pretty<00:05:16.370><c> much</c><00:05:16.400><c> all</c><00:05:16.640><c> systems</c><00:05:17.060><c> that</c><00:05:17.210><c> I've</c><00:05:17.300><c> seen</c>

00:05:17.530 --> 00:05:17.540 align:start position:0%
pretty much all systems that I've seen
 

00:05:17.540 --> 00:05:18.940 align:start position:0%
pretty much all systems that I've seen
it's<00:05:17.870><c> it's</c><00:05:18.380><c> using</c><00:05:18.710><c> something</c><00:05:18.860><c> called</c>

00:05:18.940 --> 00:05:18.950 align:start position:0%
it's it's using something called
 

00:05:18.950 --> 00:05:20.590 align:start position:0%
it's it's using something called
reference<00:05:19.430><c> counting</c><00:05:19.880><c> we're</c><00:05:20.300><c> gonna</c><00:05:20.450><c> have</c><00:05:20.540><c> a</c>

00:05:20.590 --> 00:05:20.600 align:start position:0%
reference counting we're gonna have a
 

00:05:20.600 --> 00:05:22.120 align:start position:0%
reference counting we're gonna have a
specific<00:05:20.930><c> video</c><00:05:21.110><c> about</c><00:05:21.380><c> reference</c><00:05:21.740><c> counting</c>

00:05:22.120 --> 00:05:22.130 align:start position:0%
specific video about reference counting
 

00:05:22.130 --> 00:05:23.680 align:start position:0%
specific video about reference counting
and<00:05:22.220><c> in</c><00:05:22.280><c> fact</c><00:05:22.460><c> a</c><00:05:22.550><c> lot</c><00:05:22.730><c> of</c><00:05:22.850><c> these</c><00:05:22.940><c> things</c><00:05:23.240><c> in</c><00:05:23.540><c> the</c>

00:05:23.680 --> 00:05:23.690 align:start position:0%
and in fact a lot of these things in the
 

00:05:23.690 --> 00:05:25.150 align:start position:0%
and in fact a lot of these things in the
standard<00:05:24.020><c> library</c><00:05:24.140><c> we're</c><00:05:24.860><c> actually</c><00:05:24.950><c> gonna</c>

00:05:25.150 --> 00:05:25.160 align:start position:0%
standard library we're actually gonna
 

00:05:25.160 --> 00:05:26.530 align:start position:0%
standard library we're actually gonna
have<00:05:25.220><c> videos</c><00:05:25.640><c> where</c><00:05:25.850><c> we</c><00:05:25.970><c> implement</c><00:05:26.420><c> them</c>

00:05:26.530 --> 00:05:26.540 align:start position:0%
have videos where we implement them
 

00:05:26.540 --> 00:05:28.390 align:start position:0%
have videos where we implement them
ourselves<00:05:26.780><c> because</c><00:05:27.470><c> they're</c><00:05:27.620><c> great</c><00:05:27.830><c> examples</c>

00:05:28.390 --> 00:05:28.400 align:start position:0%
ourselves because they're great examples
 

00:05:28.400 --> 00:05:30.550 align:start position:0%
ourselves because they're great examples
of<00:05:28.580><c> how</c><00:05:28.970><c> C++</c><00:05:29.450><c> works</c><00:05:29.690><c> and</c><00:05:29.960><c> how</c><00:05:30.080><c> we</c><00:05:30.110><c> can</c><00:05:30.320><c> kind</c><00:05:30.500><c> of</c>

00:05:30.550 --> 00:05:30.560 align:start position:0%
of how C++ works and how we can kind of
 

00:05:30.560 --> 00:05:32.680 align:start position:0%
of how C++ works and how we can kind of
use<00:05:30.740><c> C++</c><00:05:31.310><c> so</c><00:05:31.850><c> we're</c><00:05:32.240><c> going</c><00:05:32.420><c> to</c><00:05:32.540><c> definitely</c>

00:05:32.680 --> 00:05:32.690 align:start position:0%
use C++ so we're going to definitely
 

00:05:32.690 --> 00:05:34.750 align:start position:0%
use C++ so we're going to definitely
write<00:05:33.110><c> our</c><00:05:33.260><c> own</c><00:05:33.290><c> unique</c><00:05:33.800><c> bonus</c><00:05:34.010><c> montoya</c>

00:05:34.750 --> 00:05:34.760 align:start position:0%
write our own unique bonus montoya
 

00:05:34.760 --> 00:05:36.340 align:start position:0%
write our own unique bonus montoya
shared<00:05:35.210><c> point</c><00:05:35.480><c> all</c><00:05:35.600><c> of</c><00:05:35.720><c> that</c><00:05:35.900><c> kind</c><00:05:36.110><c> of</c><00:05:36.170><c> stuff</c>

00:05:36.340 --> 00:05:36.350 align:start position:0%
shared point all of that kind of stuff
 

00:05:36.350 --> 00:05:38.230 align:start position:0%
shared point all of that kind of stuff
in<00:05:36.470><c> the</c><00:05:36.560><c> future</c><00:05:36.890><c> as</c><00:05:36.950><c> well</c><00:05:37.130><c> as</c><00:05:37.220><c> other</c><00:05:37.640><c> kind</c><00:05:38.150><c> of</c>

00:05:38.230 --> 00:05:38.240 align:start position:0%
in the future as well as other kind of
 

00:05:38.240 --> 00:05:40.630 align:start position:0%
in the future as well as other kind of
satellite<00:05:38.660><c> bury</c><00:05:38.960><c> features</c><00:05:39.350><c> so</c><00:05:39.620><c> if</c><00:05:39.920><c> you</c><00:05:40.100><c> if</c><00:05:40.520><c> you</c>

00:05:40.630 --> 00:05:40.640 align:start position:0%
satellite bury features so if you if you
 

00:05:40.640 --> 00:05:42.190 align:start position:0%
satellite bury features so if you if you
want<00:05:40.910><c> that</c><00:05:41.120><c> that's</c><00:05:41.390><c> coming</c><00:05:41.810><c> but</c><00:05:41.900><c> the</c><00:05:41.990><c> way</c><00:05:42.080><c> the</c>

00:05:42.190 --> 00:05:42.200 align:start position:0%
want that that's coming but the way the
 

00:05:42.200 --> 00:05:44.110 align:start position:0%
want that that's coming but the way the
shared<00:05:42.440><c> pointer</c><00:05:42.740><c> works</c><00:05:42.980><c> is</c><00:05:43.340><c> via</c><00:05:43.640><c> reference</c>

00:05:44.110 --> 00:05:44.120 align:start position:0%
shared pointer works is via reference
 

00:05:44.120 --> 00:05:45.400 align:start position:0%
shared pointer works is via reference
counting<00:05:44.540><c> and</c><00:05:44.690><c> reference</c><00:05:44.990><c> counting</c><00:05:45.320><c> is</c>

00:05:45.400 --> 00:05:45.410 align:start position:0%
counting and reference counting is
 

00:05:45.410 --> 00:05:46.720 align:start position:0%
counting and reference counting is
basically<00:05:45.680><c> a</c><00:05:45.770><c> practice</c><00:05:46.070><c> where</c><00:05:46.220><c> you</c><00:05:46.460><c> keep</c>

00:05:46.720 --> 00:05:46.730 align:start position:0%
basically a practice where you keep
 

00:05:46.730 --> 00:05:49.450 align:start position:0%
basically a practice where you keep
track<00:05:47.030><c> of</c><00:05:47.240><c> how</c><00:05:47.450><c> many</c><00:05:47.510><c> references</c><00:05:48.080><c> you</c><00:05:48.560><c> have</c><00:05:48.590><c> to</c>

00:05:49.450 --> 00:05:49.460 align:start position:0%
track of how many references you have to
 

00:05:49.460 --> 00:05:50.980 align:start position:0%
track of how many references you have to
your<00:05:49.640><c> pointer</c><00:05:50.120><c> and</c><00:05:50.240><c> as</c><00:05:50.630><c> soon</c><00:05:50.750><c> as</c><00:05:50.840><c> that</c>

00:05:50.980 --> 00:05:50.990 align:start position:0%
your pointer and as soon as that
 

00:05:50.990 --> 00:05:52.660 align:start position:0%
your pointer and as soon as that
reference<00:05:51.350><c> count</c><00:05:51.560><c> reaches</c><00:05:51.920><c> zero</c><00:05:52.190><c> that's</c><00:05:52.580><c> when</c>

00:05:52.660 --> 00:05:52.670 align:start position:0%
reference count reaches zero that's when
 

00:05:52.670 --> 00:05:54.880 align:start position:0%
reference count reaches zero that's when
it<00:05:52.820><c> gets</c><00:05:52.940><c> deleted</c><00:05:53.240><c> so</c><00:05:53.840><c> as</c><00:05:54.140><c> an</c><00:05:54.230><c> example</c><00:05:54.350><c> I</c>

00:05:54.880 --> 00:05:54.890 align:start position:0%
it gets deleted so as an example I
 

00:05:54.890 --> 00:05:57.250 align:start position:0%
it gets deleted so as an example I
create<00:05:55.250><c> one</c><00:05:55.520><c> shared</c><00:05:55.880><c> pointer</c><00:05:56.300><c> I</c><00:05:56.480><c> then</c><00:05:56.900><c> create</c>

00:05:57.250 --> 00:05:57.260 align:start position:0%
create one shared pointer I then create
 

00:05:57.260 --> 00:05:58.630 align:start position:0%
create one shared pointer I then create
another<00:05:57.290><c> shed</c><00:05:57.650><c> pointer</c><00:05:57.950><c> and</c><00:05:58.040><c> copy</c><00:05:58.220><c> that</c><00:05:58.460><c> my</c>

00:05:58.630 --> 00:05:58.640 align:start position:0%
another shed pointer and copy that my
 

00:05:58.640 --> 00:06:00.190 align:start position:0%
another shed pointer and copy that my
ref<00:05:58.820><c> count</c><00:05:59.030><c> is</c><00:05:59.120><c> now</c><00:05:59.240><c> two</c><00:05:59.300><c> so</c><00:05:59.750><c> one</c><00:05:59.960><c> for</c><00:06:00.140><c> the</c>

00:06:00.190 --> 00:06:00.200 align:start position:0%
ref count is now two so one for the
 

00:06:00.200 --> 00:06:01.720 align:start position:0%
ref count is now two so one for the
first<00:06:00.410><c> one</c><00:06:00.590><c> once</c><00:06:00.800><c> the</c><00:06:00.950><c> second</c><00:06:01.220><c> one</c><00:06:01.340><c> that's</c><00:06:01.460><c> two</c>

00:06:01.720 --> 00:06:01.730 align:start position:0%
first one once the second one that's two
 

00:06:01.730 --> 00:06:03.640 align:start position:0%
first one once the second one that's two
when<00:06:02.210><c> the</c><00:06:02.300><c> first</c><00:06:02.510><c> one</c><00:06:02.690><c> dies</c><00:06:02.900><c> my</c><00:06:03.290><c> reference</c>

00:06:03.640 --> 00:06:03.650 align:start position:0%
when the first one dies my reference
 

00:06:03.650 --> 00:06:05.290 align:start position:0%
when the first one dies my reference
count<00:06:03.860><c> goes</c><00:06:04.010><c> down</c><00:06:04.100><c> one</c><00:06:04.460><c> so</c><00:06:04.610><c> I'm</c><00:06:04.730><c> on</c><00:06:04.850><c> one</c><00:06:05.060><c> now</c>

00:06:05.290 --> 00:06:05.300 align:start position:0%
count goes down one so I'm on one now
 

00:06:05.300 --> 00:06:07.000 align:start position:0%
count goes down one so I'm on one now
and<00:06:05.660><c> then</c><00:06:05.840><c> when</c><00:06:05.990><c> the</c><00:06:06.080><c> last</c><00:06:06.230><c> one</c><00:06:06.440><c> dies</c><00:06:06.620><c> my</c>

00:06:07.000 --> 00:06:07.010 align:start position:0%
and then when the last one dies my
 

00:06:07.010 --> 00:06:08.470 align:start position:0%
and then when the last one dies my
reference<00:06:07.280><c> count</c><00:06:07.490><c> goes</c><00:06:07.670><c> back</c><00:06:07.850><c> to</c><00:06:07.970><c> zero</c><00:06:08.180><c> and</c>

00:06:08.470 --> 00:06:08.480 align:start position:0%
reference count goes back to zero and
 

00:06:08.480 --> 00:06:09.310 align:start position:0%
reference count goes back to zero and
I'm<00:06:08.870><c> dead</c>

00:06:09.310 --> 00:06:09.320 align:start position:0%
I'm dead
 

00:06:09.320 --> 00:06:11.410 align:start position:0%
I'm dead
so<00:06:09.650><c> the</c><00:06:10.220><c> memory</c><00:06:10.490><c> gets</c><00:06:10.610><c> freed</c><00:06:10.880><c> so</c><00:06:11.150><c> to</c><00:06:11.210><c> use</c><00:06:11.390><c> a</c>

00:06:11.410 --> 00:06:11.420 align:start position:0%
so the memory gets freed so to use a
 

00:06:11.420 --> 00:06:13.720 align:start position:0%
so the memory gets freed so to use a
shared<00:06:11.720><c> pointer</c><00:06:12.200><c> you</c><00:06:12.650><c> just</c><00:06:12.860><c> type</c><00:06:13.040><c> in</c><00:06:13.220><c> STD</c>

00:06:13.720 --> 00:06:13.730 align:start position:0%
shared pointer you just type in STD
 

00:06:13.730 --> 00:06:15.280 align:start position:0%
shared pointer you just type in STD
shared<00:06:14.240><c> point</c><00:06:14.510><c> I'll</c><00:06:14.690><c> I'm</c><00:06:14.780><c> just</c><00:06:14.960><c> get</c><00:06:15.080><c> rid</c><00:06:15.200><c> of</c>

00:06:15.280 --> 00:06:15.290 align:start position:0%
shared point I'll I'm just get rid of
 

00:06:15.290 --> 00:06:18.340 align:start position:0%
shared point I'll I'm just get rid of
this<00:06:15.770><c> compile</c><00:06:16.280><c> error</c><00:06:16.460><c> will</c><00:06:16.940><c> do</c><00:06:17.120><c> NC</c><00:06:17.780><c> over</c><00:06:18.110><c> here</c>

00:06:18.340 --> 00:06:18.350 align:start position:0%
this compile error will do NC over here
 

00:06:18.350 --> 00:06:19.660 align:start position:0%
this compile error will do NC over here
as<00:06:18.560><c> the</c><00:06:18.740><c> template</c><00:06:19.220><c> parameter</c>

00:06:19.660 --> 00:06:19.670 align:start position:0%
as the template parameter
 

00:06:19.670 --> 00:06:22.690 align:start position:0%
as the template parameter
I'll<00:06:20.330><c> do</c><00:06:20.600><c> shared</c><00:06:20.930><c> entity</c><00:06:21.380><c> as</c><00:06:21.590><c> the</c>

00:06:22.690 --> 00:06:22.700 align:start position:0%
I'll do shared entity as the
 

00:06:22.700 --> 00:06:24.850 align:start position:0%
I'll do shared entity as the
and<00:06:23.060><c> I'll</c><00:06:23.300><c> set</c><00:06:23.510><c> this</c><00:06:23.570><c> equal</c><00:06:23.840><c> to</c><00:06:23.900><c> STV</c><00:06:24.560><c> make</c>

00:06:24.850 --> 00:06:24.860 align:start position:0%
and I'll set this equal to STV make
 

00:06:24.860 --> 00:06:27.880 align:start position:0%
and I'll set this equal to STV make
shared<00:06:25.190><c> MT</c><00:06:25.670><c> now</c><00:06:25.970><c> in</c><00:06:26.360><c> this</c><00:06:26.900><c> case</c><00:06:27.200><c> you</c><00:06:27.680><c> could</c>

00:06:27.880 --> 00:06:27.890 align:start position:0%
shared MT now in this case you could
 

00:06:27.890 --> 00:06:30.280 align:start position:0%
shared MT now in this case you could
have<00:06:28.040><c> also</c><00:06:28.190><c> done</c><00:06:28.400><c> a</c><00:06:29.060><c> new</c><00:06:29.480><c> entity</c><00:06:29.780><c> like</c><00:06:30.080><c> this</c>

00:06:30.280 --> 00:06:30.290 align:start position:0%
have also done a new entity like this
 

00:06:30.290 --> 00:06:32.050 align:start position:0%
have also done a new entity like this
and<00:06:30.770><c> you</c><00:06:31.070><c> can</c><00:06:31.190><c> see</c><00:06:31.310><c> if</c><00:06:31.370><c> that</c><00:06:31.490><c> compiles</c><00:06:31.880><c> fine</c>

00:06:32.050 --> 00:06:32.060 align:start position:0%
and you can see if that compiles fine
 

00:06:32.060 --> 00:06:33.790 align:start position:0%
and you can see if that compiles fine
except<00:06:32.390><c> you</c><00:06:32.510><c> definitely</c><00:06:33.050><c> don't</c><00:06:33.260><c> want</c><00:06:33.560><c> to</c><00:06:33.620><c> do</c>

00:06:33.790 --> 00:06:33.800 align:start position:0%
except you definitely don't want to do
 

00:06:33.800 --> 00:06:35.290 align:start position:0%
except you definitely don't want to do
that<00:06:33.950><c> with</c><00:06:34.160><c> shared</c><00:06:34.460><c> pointer</c><00:06:34.820><c> with</c><00:06:35.060><c> unique</c>

00:06:35.290 --> 00:06:35.300 align:start position:0%
that with shared pointer with unique
 

00:06:35.300 --> 00:06:36.670 align:start position:0%
that with shared pointer with unique
points<00:06:35.600><c> are</c><00:06:35.660><c> really</c><00:06:35.780><c> the</c><00:06:35.930><c> only</c><00:06:36.200><c> reason</c><00:06:36.470><c> not</c><00:06:36.620><c> to</c>

00:06:36.670 --> 00:06:36.680 align:start position:0%
points are really the only reason not to
 

00:06:36.680 --> 00:06:38.350 align:start position:0%
points are really the only reason not to
call<00:06:36.950><c> new</c><00:06:37.190><c> directly</c><00:06:37.640><c> is</c><00:06:37.820><c> because</c><00:06:38.210><c> of</c>

00:06:38.350 --> 00:06:38.360 align:start position:0%
call new directly is because of
 

00:06:38.360 --> 00:06:39.730 align:start position:0%
call new directly is because of
exception<00:06:38.840><c> safety</c><00:06:39.170><c> built</c><00:06:39.380><c> with</c><00:06:39.500><c> shared</c>

00:06:39.730 --> 00:06:39.740 align:start position:0%
exception safety built with shared
 

00:06:39.740 --> 00:06:40.810 align:start position:0%
exception safety built with shared
pointer<00:06:40.130><c> there's</c><00:06:40.310><c> actually</c><00:06:40.520><c> going</c><00:06:40.610><c> to</c><00:06:40.700><c> be</c><00:06:40.790><c> a</c>

00:06:40.810 --> 00:06:40.820 align:start position:0%
pointer there's actually going to be a
 

00:06:40.820 --> 00:06:42.790 align:start position:0%
pointer there's actually going to be a
difference<00:06:41.240><c> because</c><00:06:41.420><c> shared</c><00:06:41.810><c> pointer</c><00:06:42.230><c> has</c><00:06:42.650><c> to</c>

00:06:42.790 --> 00:06:42.800 align:start position:0%
difference because shared pointer has to
 

00:06:42.800 --> 00:06:44.260 align:start position:0%
difference because shared pointer has to
allocate<00:06:43.190><c> another</c><00:06:43.400><c> block</c><00:06:43.610><c> of</c><00:06:43.730><c> memory</c><00:06:43.910><c> called</c>

00:06:44.260 --> 00:06:44.270 align:start position:0%
allocate another block of memory called
 

00:06:44.270 --> 00:06:45.910 align:start position:0%
allocate another block of memory called
the<00:06:44.390><c> control</c><00:06:44.660><c> block</c><00:06:44.930><c> where</c><00:06:45.410><c> it</c><00:06:45.500><c> stores</c><00:06:45.830><c> that</c>

00:06:45.910 --> 00:06:45.920 align:start position:0%
the control block where it stores that
 

00:06:45.920 --> 00:06:48.970 align:start position:0%
the control block where it stores that
reference<00:06:46.490><c> count</c><00:06:46.730><c> and</c><00:06:47.020><c> if</c><00:06:48.020><c> you</c><00:06:48.350><c> create</c><00:06:48.740><c> if</c><00:06:48.890><c> you</c>

00:06:48.970 --> 00:06:48.980 align:start position:0%
reference count and if you create if you
 

00:06:48.980 --> 00:06:51.070 align:start position:0%
reference count and if you create if you
first<00:06:49.250><c> created</c><00:06:49.640><c> a</c><00:06:49.670><c> new</c><00:06:49.880><c> entity</c><00:06:50.300><c> and</c><00:06:50.540><c> then</c><00:06:50.780><c> pass</c>

00:06:51.070 --> 00:06:51.080 align:start position:0%
first created a new entity and then pass
 

00:06:51.080 --> 00:06:52.990 align:start position:0%
first created a new entity and then pass
it<00:06:51.230><c> into</c><00:06:51.470><c> the</c><00:06:51.920><c> shared</c><00:06:52.160><c> pointer</c><00:06:52.460><c> constructor</c>

00:06:52.990 --> 00:06:53.000 align:start position:0%
it into the shared pointer constructor
 

00:06:53.000 --> 00:06:54.850 align:start position:0%
it into the shared pointer constructor
it<00:06:53.360><c> has</c><00:06:53.540><c> to</c><00:06:53.660><c> allocate</c><00:06:54.050><c> that's</c><00:06:54.260><c> test2</c>

00:06:54.850 --> 00:06:54.860 align:start position:0%
it has to allocate that's test2
 

00:06:54.860 --> 00:06:56.140 align:start position:0%
it has to allocate that's test2
allocation<00:06:55.400><c> that's</c><00:06:55.520><c> right</c><00:06:55.730><c> because</c><00:06:56.030><c> you</c>

00:06:56.140 --> 00:06:56.150 align:start position:0%
allocation that's right because you
 

00:06:56.150 --> 00:06:57.940 align:start position:0%
allocation that's right because you
constructing<00:06:56.540><c> the</c><00:06:56.630><c> entity</c><00:06:56.930><c> first</c><00:06:57.170><c> and</c><00:06:57.410><c> then</c>

00:06:57.940 --> 00:06:57.950 align:start position:0%
constructing the entity first and then
 

00:06:57.950 --> 00:06:59.680 align:start position:0%
constructing the entity first and then
be<00:06:58.310><c> shared</c><00:06:58.550><c> pointer</c><00:06:58.880><c> has</c><00:06:58.970><c> the</c><00:06:59.150><c> controller</c><00:06:59.480><c> cut</c>

00:06:59.680 --> 00:06:59.690 align:start position:0%
be shared pointer has the controller cut
 

00:06:59.690 --> 00:07:01.090 align:start position:0%
be shared pointer has the controller cut
it<00:06:59.780><c> has</c><00:06:59.900><c> to</c><00:07:00.020><c> construct</c><00:07:00.380><c> its</c><00:07:00.530><c> control</c><00:07:00.860><c> block</c>

00:07:01.090 --> 00:07:01.100 align:start position:0%
it has to construct its control block
 

00:07:01.100 --> 00:07:02.740 align:start position:0%
it has to construct its control block
whereas<00:07:01.850><c> if</c><00:07:01.910><c> you</c><00:07:02.000><c> do</c><00:07:02.120><c> make</c><00:07:02.300><c> share</c><00:07:02.540><c> it</c><00:07:02.630><c> can</c>

00:07:02.740 --> 00:07:02.750 align:start position:0%
whereas if you do make share it can
 

00:07:02.750 --> 00:07:04.780 align:start position:0%
whereas if you do make share it can
actually<00:07:03.020><c> construct</c><00:07:03.530><c> them</c><00:07:03.830><c> together</c><00:07:04.250><c> which</c>

00:07:04.780 --> 00:07:04.790 align:start position:0%
actually construct them together which
 

00:07:04.790 --> 00:07:07.750 align:start position:0%
actually construct them together which
is<00:07:04.940><c> a</c><00:07:05.200><c> lot</c><00:07:06.200><c> more</c><00:07:06.410><c> efficient</c><00:07:06.860><c> and</c><00:07:06.980><c> also</c><00:07:07.370><c> for</c>

00:07:07.750 --> 00:07:07.760 align:start position:0%
is a lot more efficient and also for
 

00:07:07.760 --> 00:07:09.460 align:start position:0%
is a lot more efficient and also for
those<00:07:07.850><c> of</c><00:07:07.970><c> you</c><00:07:08.060><c> people</c><00:07:08.360><c> who</c><00:07:08.540><c> hate</c><00:07:08.870><c> new</c><00:07:09.290><c> and</c>

00:07:09.460 --> 00:07:09.470 align:start position:0%
those of you people who hate new and
 

00:07:09.470 --> 00:07:11.110 align:start position:0%
those of you people who hate new and
delete<00:07:09.740><c> this</c><00:07:10.070><c> obviously</c><00:07:10.580><c> gets</c><00:07:10.820><c> rid</c><00:07:10.970><c> of</c><00:07:11.030><c> the</c>

00:07:11.110 --> 00:07:11.120 align:start position:0%
delete this obviously gets rid of the
 

00:07:11.120 --> 00:07:12.670 align:start position:0%
delete this obviously gets rid of the
new<00:07:11.300><c> keyword</c><00:07:11.690><c> from</c><00:07:11.810><c> your</c><00:07:11.960><c> codebase</c><00:07:12.290><c> because</c>

00:07:12.670 --> 00:07:12.680 align:start position:0%
new keyword from your codebase because
 

00:07:12.680 --> 00:07:14.080 align:start position:0%
new keyword from your codebase because
you're<00:07:12.800><c> just</c><00:07:12.950><c> calling</c><00:07:13.130><c> a</c><00:07:13.340><c> city</c><00:07:13.550><c> make</c><00:07:13.790><c> shared</c>

00:07:14.080 --> 00:07:14.090 align:start position:0%
you're just calling a city make shared
 

00:07:14.090 --> 00:07:16.120 align:start position:0%
you're just calling a city make shared
instead<00:07:14.630><c> of</c><00:07:14.720><c> new</c><00:07:14.900><c> entity</c><00:07:15.320><c> so</c><00:07:15.560><c> I</c><00:07:15.590><c> bet</c><00:07:15.830><c> you</c><00:07:15.950><c> guys</c>

00:07:16.120 --> 00:07:16.130 align:start position:0%
instead of new entity so I bet you guys
 

00:07:16.130 --> 00:07:16.900 align:start position:0%
instead of new entity so I bet you guys
love<00:07:16.430><c> that</c>

00:07:16.900 --> 00:07:16.910 align:start position:0%
love that
 

00:07:16.910 --> 00:07:19.450 align:start position:0%
love that
so<00:07:17.840><c> with</c><00:07:18.020><c> shared</c><00:07:18.290><c> pointer</c><00:07:18.770><c> you</c><00:07:19.040><c> can</c><00:07:19.310><c> of</c><00:07:19.430><c> course</c>

00:07:19.450 --> 00:07:19.460 align:start position:0%
so with shared pointer you can of course
 

00:07:19.460 --> 00:07:23.080 align:start position:0%
so with shared pointer you can of course
copy<00:07:20.240><c> it</c><00:07:20.480><c> and</c><00:07:20.860><c> yeah</c><00:07:21.860><c> I</c><00:07:22.100><c> mean</c><00:07:22.340><c> if</c><00:07:22.640><c> I</c><00:07:22.790><c> type</c><00:07:23.000><c> in</c>

00:07:23.080 --> 00:07:23.090 align:start position:0%
copy it and yeah I mean if I type in
 

00:07:23.090 --> 00:07:24.490 align:start position:0%
copy it and yeah I mean if I type in
code<00:07:23.270><c> like</c><00:07:23.450><c> this</c><00:07:23.600><c> it's</c><00:07:23.780><c> gonna</c><00:07:23.900><c> work</c><00:07:24.110><c> perfectly</c>

00:07:24.490 --> 00:07:24.500 align:start position:0%
code like this it's gonna work perfectly
 

00:07:24.500 --> 00:07:26.320 align:start position:0%
code like this it's gonna work perfectly
fine<00:07:24.800><c> I</c><00:07:24.980><c> could</c><00:07:25.220><c> also</c><00:07:25.340><c> move</c><00:07:25.610><c> this</c><00:07:25.700><c> outside</c><00:07:26.120><c> to</c>

00:07:26.320 --> 00:07:26.330 align:start position:0%
fine I could also move this outside to
 

00:07:26.330 --> 00:07:28.600 align:start position:0%
fine I could also move this outside to
here<00:07:26.630><c> and</c><00:07:26.870><c> just</c><00:07:27.140><c> have</c><00:07:27.290><c> this</c><00:07:27.410><c> over</c><00:07:27.680><c> here</c><00:07:27.830><c> let's</c>

00:07:28.600 --> 00:07:28.610 align:start position:0%
here and just have this over here let's
 

00:07:28.610 --> 00:07:30.430 align:start position:0%
here and just have this over here let's
let's<00:07:28.940><c> make</c><00:07:29.060><c> another</c><00:07:29.210><c> scope</c><00:07:29.750><c> for</c><00:07:29.990><c> fun</c><00:07:30.170><c> so</c><00:07:30.380><c> I</c>

00:07:30.430 --> 00:07:30.440 align:start position:0%
let's make another scope for fun so I
 

00:07:30.440 --> 00:07:31.480 align:start position:0%
let's make another scope for fun so I
can<00:07:30.590><c> kind</c><00:07:30.740><c> of</c><00:07:30.800><c> demonstrate</c><00:07:31.190><c> how</c><00:07:31.310><c> this</c><00:07:31.430><c> works</c>

00:07:31.480 --> 00:07:31.490 align:start position:0%
can kind of demonstrate how this works
 

00:07:31.490 --> 00:07:34.000 align:start position:0%
can kind of demonstrate how this works
and<00:07:32.210><c> you</c><00:07:32.270><c> drag</c><00:07:32.540><c> this</c><00:07:32.690><c> over</c><00:07:32.840><c> here</c><00:07:32.990><c> alright</c><00:07:33.950><c> so</c>

00:07:34.000 --> 00:07:34.010 align:start position:0%
and you drag this over here alright so
 

00:07:34.010 --> 00:07:35.590 align:start position:0%
and you drag this over here alright so
I've<00:07:34.250><c> got</c><00:07:34.280><c> kind</c><00:07:34.520><c> of</c><00:07:34.610><c> two</c><00:07:34.820><c> scopes</c><00:07:35.120><c> again</c><00:07:35.450><c> the</c>

00:07:35.590 --> 00:07:35.600 align:start position:0%
I've got kind of two scopes again the
 

00:07:35.600 --> 00:07:37.720 align:start position:0%
I've got kind of two scopes again the
first<00:07:35.780><c> one</c><00:07:35.870><c> I've</c><00:07:36.050><c> got</c><00:07:36.080><c> is</c><00:07:36.680><c> 0</c><00:07:37.070><c> that's</c><00:07:37.340><c> it</c><00:07:37.520><c> and</c>

00:07:37.720 --> 00:07:37.730 align:start position:0%
first one I've got is 0 that's it and
 

00:07:37.730 --> 00:07:39.040 align:start position:0%
first one I've got is 0 that's it and
then<00:07:37.790><c> in</c><00:07:37.940><c> this</c><00:07:38.000><c> one</c><00:07:38.150><c> I</c><00:07:38.210><c> have</c><00:07:38.360><c> my</c><00:07:38.480><c> shed</c><00:07:38.690><c> entity</c>

00:07:39.040 --> 00:07:39.050 align:start position:0%
then in this one I have my shed entity
 

00:07:39.050 --> 00:07:41.530 align:start position:0%
then in this one I have my shed entity
I'm<00:07:39.140><c> going</c><00:07:39.350><c> to</c><00:07:39.440><c> assign</c><00:07:39.770><c> easier</c><00:07:40.550><c> with</c><00:07:40.940><c> my</c><00:07:41.330><c> shed</c>

00:07:41.530 --> 00:07:41.540 align:start position:0%
I'm going to assign easier with my shed
 

00:07:41.540 --> 00:07:44.170 align:start position:0%
I'm going to assign easier with my shed
entity<00:07:41.900><c> I'm</c><00:07:42.020><c> just</c><00:07:42.200><c> going</c><00:07:42.350><c> to</c><00:07:42.530><c> comment</c><00:07:42.950><c> out</c><00:07:43.250><c> all</c>

00:07:44.170 --> 00:07:44.180 align:start position:0%
entity I'm just going to comment out all
 

00:07:44.180 --> 00:07:45.700 align:start position:0%
entity I'm just going to comment out all
get<00:07:44.480><c> rid</c><00:07:44.630><c> of</c><00:07:44.750><c> all</c><00:07:44.840><c> that</c><00:07:44.960><c> other</c><00:07:45.110><c> code</c><00:07:45.350><c> with</c><00:07:45.620><c> the</c>

00:07:45.700 --> 00:07:45.710 align:start position:0%
get rid of all that other code with the
 

00:07:45.710 --> 00:07:47.590 align:start position:0%
get rid of all that other code with the
unique<00:07:45.920><c> pointer</c><00:07:46.250><c> so</c><00:07:46.790><c> now</c><00:07:46.970><c> what</c><00:07:47.150><c> will</c><00:07:47.270><c> happen</c>

00:07:47.590 --> 00:07:47.600 align:start position:0%
unique pointer so now what will happen
 

00:07:47.600 --> 00:07:49.960 align:start position:0%
unique pointer so now what will happen
is<00:07:47.990><c> if</c><00:07:48.530><c> I</c><00:07:48.680><c> hit</c><00:07:48.860><c> f5</c><00:07:49.190><c> the</c><00:07:49.550><c> first</c><00:07:49.760><c> thing</c><00:07:49.850><c> that's</c>

00:07:49.960 --> 00:07:49.970 align:start position:0%
is if I hit f5 the first thing that's
 

00:07:49.970 --> 00:07:51.220 align:start position:0%
is if I hit f5 the first thing that's
gonna<00:07:50.030><c> happen</c><00:07:50.240><c> is</c><00:07:50.510><c> I'm</c><00:07:50.690><c> going</c><00:07:50.840><c> to</c><00:07:50.930><c> construct</c>

00:07:51.220 --> 00:07:51.230 align:start position:0%
gonna happen is I'm going to construct
 

00:07:51.230 --> 00:07:53.770 align:start position:0%
gonna happen is I'm going to construct
my<00:07:51.740><c> entity</c><00:07:51.950><c> so</c><00:07:52.550><c> that's</c><00:07:52.730><c> done</c><00:07:52.970><c> good</c><00:07:53.240><c> it's</c>

00:07:53.770 --> 00:07:53.780 align:start position:0%
my entity so that's done good it's
 

00:07:53.780 --> 00:07:55.990 align:start position:0%
my entity so that's done good it's
created<00:07:54.200><c> I'm</c><00:07:54.530><c> going</c><00:07:54.770><c> to</c><00:07:54.830><c> assign</c><00:07:55.100><c> this</c><00:07:55.340><c> when</c>

00:07:55.990 --> 00:07:56.000 align:start position:0%
created I'm going to assign this when
 

00:07:56.000 --> 00:07:57.940 align:start position:0%
created I'm going to assign this when
the<00:07:56.090><c> first</c><00:07:56.330><c> coat</c><00:07:56.570><c> dies</c><00:07:56.780><c> this</c><00:07:57.290><c> challenge</c><00:07:57.740><c> she</c>

00:07:57.940 --> 00:07:57.950 align:start position:0%
the first coat dies this challenge she
 

00:07:57.950 --> 00:08:00.520 align:start position:0%
the first coat dies this challenge she
dies<00:07:58.130><c> however</c><00:07:58.760><c> you</c><00:07:59.420><c> can</c><00:07:59.570><c> see</c><00:07:59.780><c> that</c><00:07:59.810><c> it</c><00:08:00.200><c> hasn't</c>

00:08:00.520 --> 00:08:00.530 align:start position:0%
dies however you can see that it hasn't
 

00:08:00.530 --> 00:08:02.230 align:start position:0%
dies however you can see that it hasn't
destroyed<00:08:00.650><c> my</c><00:08:01.070><c> HT</c><00:08:01.370><c> it</c><00:08:01.490><c> hasn't</c><00:08:01.790><c> deleted</c><00:08:01.970><c> it</c>

00:08:02.230 --> 00:08:02.240 align:start position:0%
destroyed my HT it hasn't deleted it
 

00:08:02.240 --> 00:08:04.570 align:start position:0%
destroyed my HT it hasn't deleted it
because<00:08:02.930><c> a</c><00:08:02.960><c> 0</c><00:08:03.470><c> is</c><00:08:03.650><c> still</c><00:08:03.800><c> alive</c><00:08:04.040><c> at</c><00:08:04.220><c> holding</c><00:08:04.460><c> a</c>

00:08:04.570 --> 00:08:04.580 align:start position:0%
because a 0 is still alive at holding a
 

00:08:04.580 --> 00:08:07.120 align:start position:0%
because a 0 is still alive at holding a
reference<00:08:05.000><c> to</c><00:08:05.240><c> that</c><00:08:05.420><c> entity</c><00:08:05.990><c> now</c><00:08:06.740><c> when</c><00:08:06.920><c> I</c><00:08:06.950><c> have</c>

00:08:07.120 --> 00:08:07.130 align:start position:0%
reference to that entity now when I have
 

00:08:07.130 --> 00:08:09.640 align:start position:0%
reference to that entity now when I have
10<00:08:07.490><c> that's</c><00:08:08.480><c> when</c><00:08:08.720><c> it</c><00:08:08.810><c> dies</c><00:08:08.990><c> when</c><00:08:09.260><c> all</c><00:08:09.470><c> the</c>

00:08:09.640 --> 00:08:09.650 align:start position:0%
10 that's when it dies when all the
 

00:08:09.650 --> 00:08:11.830 align:start position:0%
10 that's when it dies when all the
references<00:08:10.130><c> are</c><00:08:10.400><c> gone</c><00:08:10.700><c> when</c><00:08:11.240><c> all</c><00:08:11.510><c> of</c><00:08:11.750><c> the</c>

00:08:11.830 --> 00:08:11.840 align:start position:0%
references are gone when all of the
 

00:08:11.840 --> 00:08:13.570 align:start position:0%
references are gone when all of the
stack<00:08:12.110><c> allocated</c><00:08:12.590><c> kind</c><00:08:12.890><c> of</c><00:08:12.980><c> objects</c><00:08:13.430><c> that</c>

00:08:13.570 --> 00:08:13.580 align:start position:0%
stack allocated kind of objects that
 

00:08:13.580 --> 00:08:15.640 align:start position:0%
stack allocated kind of objects that
keep<00:08:14.060><c> track</c><00:08:14.300><c> of</c><00:08:14.480><c> all</c><00:08:14.750><c> the</c><00:08:14.990><c> shared</c><00:08:15.230><c> pointers</c>

00:08:15.640 --> 00:08:15.650 align:start position:0%
keep track of all the shared pointers
 

00:08:15.650 --> 00:08:17.530 align:start position:0%
keep track of all the shared pointers
when<00:08:15.770><c> they</c><00:08:16.070><c> die</c><00:08:16.610><c> when</c><00:08:16.850><c> they</c><00:08:17.000><c> get</c><00:08:17.210><c> read</c><00:08:17.420><c> from</c>

00:08:17.530 --> 00:08:17.540 align:start position:0%
when they die when they get read from
 

00:08:17.540 --> 00:08:19.600 align:start position:0%
when they die when they get read from
memory<00:08:17.810><c> all</c><00:08:17.990><c> of</c><00:08:18.170><c> them</c><00:08:18.320><c> that's</c><00:08:18.830><c> when</c><00:08:19.460><c> your</c>

00:08:19.600 --> 00:08:19.610 align:start position:0%
memory all of them that's when your
 

00:08:19.610 --> 00:08:21.430 align:start position:0%
memory all of them that's when your
underlying<00:08:19.970><c> entity</c><00:08:20.420><c> gets</c><00:08:20.540><c> deleted</c><00:08:20.870><c> all</c><00:08:21.230><c> right</c>

00:08:21.430 --> 00:08:21.440 align:start position:0%
underlying entity gets deleted all right
 

00:08:21.440 --> 00:08:22.960 align:start position:0%
underlying entity gets deleted all right
and<00:08:21.620><c> finally</c><00:08:22.130><c> there's</c><00:08:22.310><c> something</c><00:08:22.610><c> else</c><00:08:22.790><c> that</c>

00:08:22.960 --> 00:08:22.970 align:start position:0%
and finally there's something else that
 

00:08:22.970 --> 00:08:24.160 align:start position:0%
and finally there's something else that
you<00:08:23.090><c> can</c><00:08:23.300><c> use</c><00:08:23.420><c> with</c><00:08:23.630><c> shared</c><00:08:23.840><c> points</c><00:08:24.110><c> are</c>

00:08:24.160 --> 00:08:24.170 align:start position:0%
you can use with shared points are
 

00:08:24.170 --> 00:08:24.460 align:start position:0%
you can use with shared points are
called

00:08:24.460 --> 00:08:24.470 align:start position:0%
called
 

00:08:24.470 --> 00:08:26.440 align:start position:0%
called
a<00:08:24.560><c> weight</c><00:08:24.890><c> pointer</c><00:08:25.490><c> and</c><00:08:25.670><c> what</c><00:08:26.120><c> you</c><00:08:26.210><c> can</c><00:08:26.330><c> do</c>

00:08:26.440 --> 00:08:26.450 align:start position:0%
a weight pointer and what you can do
 

00:08:26.450 --> 00:08:28.000 align:start position:0%
a weight pointer and what you can do
with<00:08:26.570><c> that</c><00:08:26.750><c> is</c><00:08:26.930><c> just</c><00:08:27.080><c> declare</c><00:08:27.440><c> it</c><00:08:27.470><c> like</c><00:08:27.770><c> it</c><00:08:27.890><c> was</c>

00:08:28.000 --> 00:08:28.010 align:start position:0%
with that is just declare it like it was
 

00:08:28.010 --> 00:08:28.420 align:start position:0%
with that is just declare it like it was
anything

00:08:28.420 --> 00:08:28.430 align:start position:0%
anything
 

00:08:28.430 --> 00:08:31.630 align:start position:0%
anything
and<00:08:28.670><c> kind</c><00:08:28.850><c> of</c><00:08:28.910><c> give</c><00:08:29.120><c> it</c><00:08:29.150><c> the</c><00:08:29.420><c> value</c><00:08:29.450><c> of</c><00:08:30.020><c> a</c><00:08:30.890><c> share</c>

00:08:31.630 --> 00:08:31.640 align:start position:0%
and kind of give it the value of a share
 

00:08:31.640 --> 00:08:34.120 align:start position:0%
and kind of give it the value of a share
density<00:08:32.210><c> and</c><00:08:32.330><c> what</c><00:08:32.510><c> this</c><00:08:32.720><c> does</c><00:08:33.020><c> what</c><00:08:33.860><c> this</c>

00:08:34.120 --> 00:08:34.130 align:start position:0%
density and what this does what this
 

00:08:34.130 --> 00:08:36.790 align:start position:0%
density and what this does what this
does<00:08:34.430><c> is</c><00:08:34.870><c> kind</c><00:08:35.870><c> of</c><00:08:35.990><c> the</c><00:08:36.080><c> same</c><00:08:36.260><c> as</c><00:08:36.440><c> if</c><00:08:36.560><c> you</c><00:08:36.590><c> were</c>

00:08:36.790 --> 00:08:36.800 align:start position:0%
does is kind of the same as if you were
 

00:08:36.800 --> 00:08:38.290 align:start position:0%
does is kind of the same as if you were
to<00:08:36.890><c> copy</c><00:08:37.100><c> that</c><00:08:37.340><c> share</c><00:08:37.550><c> entity</c><00:08:37.880><c> and</c><00:08:38.030><c> increase</c>

00:08:38.290 --> 00:08:38.300 align:start position:0%
to copy that share entity and increase
 

00:08:38.300 --> 00:08:39.460 align:start position:0%
to copy that share entity and increase
the<00:08:38.390><c> ref</c><00:08:38.540><c> count</c><00:08:38.780><c> except</c><00:08:39.140><c> it</c><00:08:39.320><c> doesn't</c>

00:08:39.460 --> 00:08:39.470 align:start position:0%
the ref count except it doesn't
 

00:08:39.470 --> 00:08:40.750 align:start position:0%
the ref count except it doesn't
including<00:08:39.890><c> it</c><00:08:40.010><c> doesn't</c><00:08:40.250><c> increase</c><00:08:40.430><c> the</c><00:08:40.520><c> ref</c>

00:08:40.750 --> 00:08:40.760 align:start position:0%
including it doesn't increase the ref
 

00:08:40.760 --> 00:08:42.460 align:start position:0%
including it doesn't increase the ref
count<00:08:41.000><c> when</c><00:08:41.330><c> you</c><00:08:41.420><c> assign</c><00:08:41.660><c> a</c><00:08:41.720><c> shared</c><00:08:42.050><c> pointer</c>

00:08:42.460 --> 00:08:42.470 align:start position:0%
count when you assign a shared pointer
 

00:08:42.470 --> 00:08:44.140 align:start position:0%
count when you assign a shared pointer
to<00:08:42.620><c> another</c><00:08:42.650><c> shared</c><00:08:43.130><c> pointer</c><00:08:43.490><c> thus</c><00:08:43.640><c> copying</c>

00:08:44.140 --> 00:08:44.150 align:start position:0%
to another shared pointer thus copying
 

00:08:44.150 --> 00:08:46.030 align:start position:0%
to another shared pointer thus copying
it<00:08:44.300><c> it</c><00:08:44.750><c> will</c><00:08:44.960><c> increase</c><00:08:45.320><c> the</c><00:08:45.470><c> ref</c><00:08:45.620><c> count</c><00:08:45.860><c> but</c>

00:08:46.030 --> 00:08:46.040 align:start position:0%
it it will increase the ref count but
 

00:08:46.040 --> 00:08:47.230 align:start position:0%
it it will increase the ref count but
when<00:08:46.160><c> you</c><00:08:46.250><c> assign</c><00:08:46.460><c> a</c><00:08:46.520><c> shared</c><00:08:46.790><c> pointer</c><00:08:47.090><c> to</c><00:08:47.210><c> a</c>

00:08:47.230 --> 00:08:47.240 align:start position:0%
when you assign a shared pointer to a
 

00:08:47.240 --> 00:08:49.180 align:start position:0%
when you assign a shared pointer to a
weak<00:08:47.600><c> pointer</c><00:08:48.050><c> your</c><00:08:48.380><c> orange</c><00:08:48.800><c> increase</c><00:08:49.070><c> the</c>

00:08:49.180 --> 00:08:49.190 align:start position:0%
weak pointer your orange increase the
 

00:08:49.190 --> 00:08:50.890 align:start position:0%
weak pointer your orange increase the
ref<00:08:49.340><c> count</c><00:08:49.580><c> so</c><00:08:49.820><c> this</c><00:08:49.940><c> is</c><00:08:50.060><c> great</c><00:08:50.330><c> for</c><00:08:50.600><c> if</c><00:08:50.780><c> you</c>

00:08:50.890 --> 00:08:50.900 align:start position:0%
ref count so this is great for if you
 

00:08:50.900 --> 00:08:52.540 align:start position:0%
ref count so this is great for if you
kind<00:08:51.200><c> of</c><00:08:51.290><c> don't</c><00:08:51.440><c> want</c><00:08:51.590><c> to</c><00:08:51.740><c> take</c><00:08:51.950><c> ownership</c><00:08:52.190><c> of</c>

00:08:52.540 --> 00:08:52.550 align:start position:0%
kind of don't want to take ownership of
 

00:08:52.550 --> 00:08:54.640 align:start position:0%
kind of don't want to take ownership of
the<00:08:52.820><c> entity</c><00:08:53.210><c> like</c><00:08:53.630><c> you</c><00:08:53.840><c> might</c><00:08:54.200><c> be</c><00:08:54.230><c> storing</c><00:08:54.590><c> a</c>

00:08:54.640 --> 00:08:54.650 align:start position:0%
the entity like you might be storing a
 

00:08:54.650 --> 00:08:55.870 align:start position:0%
the entity like you might be storing a
list<00:08:54.890><c> of</c><00:08:55.040><c> entities</c><00:08:55.250><c> and</c><00:08:55.430><c> you</c><00:08:55.670><c> don't</c><00:08:55.790><c> really</c>

00:08:55.870 --> 00:08:55.880 align:start position:0%
list of entities and you don't really
 

00:08:55.880 --> 00:08:57.190 align:start position:0%
list of entities and you don't really
care<00:08:55.970><c> if</c><00:08:56.180><c> they're</c><00:08:56.390><c> valid</c><00:08:56.570><c> or</c><00:08:56.810><c> not</c><00:08:56.840><c> but</c><00:08:57.110><c> you</c>

00:08:57.190 --> 00:08:57.200 align:start position:0%
care if they're valid or not but you
 

00:08:57.200 --> 00:08:58.630 align:start position:0%
care if they're valid or not but you
just<00:08:57.320><c> want</c><00:08:57.500><c> to</c><00:08:57.560><c> store</c><00:08:57.740><c> like</c><00:08:57.980><c> a</c><00:08:58.010><c> reference</c><00:08:58.490><c> to</c>

00:08:58.630 --> 00:08:58.640 align:start position:0%
just want to store like a reference to
 

00:08:58.640 --> 00:09:00.310 align:start position:0%
just want to store like a reference to
them<00:08:58.760><c> right</c><00:08:59.120><c> with</c><00:08:59.690><c> weak</c><00:08:59.870><c> pointer</c><00:09:00.200><c> you</c><00:09:00.260><c> can</c>

00:09:00.310 --> 00:09:00.320 align:start position:0%
them right with weak pointer you can
 

00:09:00.320 --> 00:09:02.410 align:start position:0%
them right with weak pointer you can
kind<00:09:00.530><c> of</c><00:09:00.590><c> ask</c><00:09:00.770><c> it</c><00:09:00.980><c> hey</c><00:09:01.190><c> is</c><00:09:01.250><c> this</c><00:09:01.460><c> is</c><00:09:02.060><c> this</c><00:09:02.210><c> still</c>

00:09:02.410 --> 00:09:02.420 align:start position:0%
kind of ask it hey is this is this still
 

00:09:02.420 --> 00:09:03.940 align:start position:0%
kind of ask it hey is this is this still
even<00:09:02.690><c> alive</c><00:09:02.930><c> and</c><00:09:03.320><c> if</c><00:09:03.380><c> it</c><00:09:03.500><c> is</c><00:09:03.590><c> you</c><00:09:03.740><c> can</c><00:09:03.860><c> do</c>

00:09:03.940 --> 00:09:03.950 align:start position:0%
even alive and if it is you can do
 

00:09:03.950 --> 00:09:05.740 align:start position:0%
even alive and if it is you can do
whatever<00:09:04.100><c> you</c><00:09:04.250><c> need</c><00:09:04.370><c> to</c><00:09:04.400><c> do</c><00:09:04.580><c> but</c><00:09:05.210><c> it</c><00:09:05.450><c> won't</c>

00:09:05.740 --> 00:09:05.750 align:start position:0%
whatever you need to do but it won't
 

00:09:05.750 --> 00:09:07.480 align:start position:0%
whatever you need to do but it won't
keep<00:09:06.170><c> it</c><00:09:06.470><c> alive</c><00:09:06.740><c> because</c><00:09:07.070><c> it</c><00:09:07.190><c> doesn't</c>

00:09:07.480 --> 00:09:07.490 align:start position:0%
keep it alive because it doesn't
 

00:09:07.490 --> 00:09:08.860 align:start position:0%
keep it alive because it doesn't
actually<00:09:07.580><c> increase</c><00:09:08.000><c> the</c><00:09:08.120><c> ref</c><00:09:08.270><c> count</c><00:09:08.510><c> meaning</c>

00:09:08.860 --> 00:09:08.870 align:start position:0%
actually increase the ref count meaning
 

00:09:08.870 --> 00:09:10.690 align:start position:0%
actually increase the ref count meaning
that<00:09:08.930><c> if</c><00:09:09.050><c> I</c><00:09:09.110><c> worst</c><00:09:09.440><c> was</c><00:09:09.740><c> to</c><00:09:09.890><c> actually</c><00:09:10.040><c> replace</c>

00:09:10.690 --> 00:09:10.700 align:start position:0%
that if I worst was to actually replace
 

00:09:10.700 --> 00:09:12.850 align:start position:0%
that if I worst was to actually replace
this<00:09:11.030><c> shed</c><00:09:11.360><c> and</c><00:09:11.540><c> see</c><00:09:11.780><c> where</c><00:09:12.080><c> the</c><00:09:12.230><c> weak</c><00:09:12.410><c> pointer</c>

00:09:12.850 --> 00:09:12.860 align:start position:0%
this shed and see where the weak pointer
 

00:09:12.860 --> 00:09:15.010 align:start position:0%
this shed and see where the weak pointer
and<00:09:13.250><c> then</c><00:09:13.700><c> basically</c><00:09:14.390><c> did</c><00:09:14.600><c> the</c><00:09:14.630><c> exact</c><00:09:14.870><c> same</c>

00:09:15.010 --> 00:09:15.020 align:start position:0%
and then basically did the exact same
 

00:09:15.020 --> 00:09:17.170 align:start position:0%
and then basically did the exact same
thing<00:09:15.230><c> that</c><00:09:15.260><c> I</c><00:09:15.410><c> did</c><00:09:15.470><c> before</c><00:09:15.680><c> then</c><00:09:16.580><c> the</c><00:09:17.000><c> entity</c>

00:09:17.170 --> 00:09:17.180 align:start position:0%
thing that I did before then the entity
 

00:09:17.180 --> 00:09:18.160 align:start position:0%
thing that I did before then the entity
will<00:09:17.390><c> get</c><00:09:17.510><c> credit</c><00:09:17.720><c> here</c>

00:09:18.160 --> 00:09:18.170 align:start position:0%
will get credit here
 

00:09:18.170 --> 00:09:19.330 align:start position:0%
will get credit here
it'll<00:09:18.350><c> get</c><00:09:18.440><c> assigned</c><00:09:18.650><c> to</c><00:09:18.800><c> the</c><00:09:18.890><c> shed</c><00:09:19.070><c> and</c><00:09:19.100><c> see</c>

00:09:19.330 --> 00:09:19.340 align:start position:0%
it'll get assigned to the shed and see
 

00:09:19.340 --> 00:09:22.210 align:start position:0%
it'll get assigned to the shed and see
but<00:09:19.520><c> when</c><00:09:19.730><c> I</c><00:09:19.760><c> exit</c><00:09:20.120><c> the</c><00:09:20.210><c> first</c><00:09:20.570><c> car</c><00:09:20.900><c> that</c><00:09:21.220><c> is</c>

00:09:22.210 --> 00:09:22.220 align:start position:0%
but when I exit the first car that is
 

00:09:22.220 --> 00:09:24.190 align:start position:0%
but when I exit the first car that is
what<00:09:22.460><c> it</c><00:09:22.550><c> gets</c><00:09:22.640><c> destroyed</c><00:09:23.090><c> so</c><00:09:23.630><c> this</c><00:09:23.840><c> weight</c>

00:09:24.190 --> 00:09:24.200 align:start position:0%
what it gets destroyed so this weight
 

00:09:24.200 --> 00:09:25.960 align:start position:0%
what it gets destroyed so this weight
pointer<00:09:24.680><c> is</c><00:09:24.800><c> now</c><00:09:24.920><c> pointing</c><00:09:25.310><c> to</c><00:09:25.430><c> an</c><00:09:25.520><c> invalid</c>

00:09:25.960 --> 00:09:25.970 align:start position:0%
pointer is now pointing to an invalid
 

00:09:25.970 --> 00:09:28.330 align:start position:0%
pointer is now pointing to an invalid
and<00:09:26.150><c> T</c><00:09:26.750><c> however</c><00:09:27.050><c> you</c><00:09:27.200><c> can</c><00:09:27.350><c> ask</c><00:09:27.560><c> a</c><00:09:27.770><c> weak</c><00:09:27.920><c> pointer</c>

00:09:28.330 --> 00:09:28.340 align:start position:0%
and T however you can ask a weak pointer
 

00:09:28.340 --> 00:09:29.350 align:start position:0%
and T however you can ask a weak pointer
are<00:09:28.520><c> you</c><00:09:28.640><c> expired</c>

00:09:29.350 --> 00:09:29.360 align:start position:0%
are you expired
 

00:09:29.360 --> 00:09:30.640 align:start position:0%
are you expired
are<00:09:29.480><c> you</c><00:09:29.570><c> still</c><00:09:29.840><c> valid</c><00:09:30.200><c> so</c><00:09:30.320><c> that's</c><00:09:30.470><c> pretty</c>

00:09:30.640 --> 00:09:30.650 align:start position:0%
are you still valid so that's pretty
 

00:09:30.650 --> 00:09:32.950 align:start position:0%
are you still valid so that's pretty
much<00:09:30.740><c> smart</c><00:09:31.070><c> pointers</c><00:09:31.430><c> now</c><00:09:31.820><c> as</c><00:09:32.150><c> for</c><00:09:32.630><c> when</c><00:09:32.840><c> you</c>

00:09:32.950 --> 00:09:32.960 align:start position:0%
much smart pointers now as for when you
 

00:09:32.960 --> 00:09:34.570 align:start position:0%
much smart pointers now as for when you
should<00:09:33.140><c> use</c><00:09:33.320><c> them</c><00:09:33.530><c> you</c><00:09:34.070><c> should</c><00:09:34.190><c> probably</c><00:09:34.340><c> try</c>

00:09:34.570 --> 00:09:34.580 align:start position:0%
should use them you should probably try
 

00:09:34.580 --> 00:09:36.130 align:start position:0%
should use them you should probably try
and<00:09:34.640><c> use</c><00:09:34.760><c> them</c><00:09:34.940><c> all</c><00:09:35.060><c> the</c><00:09:35.150><c> time</c><00:09:35.300><c> if</c><00:09:35.870><c> I'm</c><00:09:35.990><c> being</c>

00:09:36.130 --> 00:09:36.140 align:start position:0%
and use them all the time if I'm being
 

00:09:36.140 --> 00:09:37.450 align:start position:0%
and use them all the time if I'm being
completely<00:09:36.260><c> honest</c><00:09:36.830><c> they</c><00:09:36.950><c> automate</c><00:09:37.310><c> your</c>

00:09:37.450 --> 00:09:37.460 align:start position:0%
completely honest they automate your
 

00:09:37.460 --> 00:09:39.790 align:start position:0%
completely honest they automate your
memory<00:09:37.700><c> management</c><00:09:37.970><c> they</c><00:09:38.300><c> they</c><00:09:38.690><c> they</c><00:09:39.290><c> get</c><00:09:39.620><c> rid</c>

00:09:39.790 --> 00:09:39.800 align:start position:0%
memory management they they they get rid
 

00:09:39.800 --> 00:09:41.050 align:start position:0%
memory management they they they get rid
of<00:09:39.920><c> all</c><00:09:40.070><c> they</c><00:09:40.280><c> did</c><00:09:40.430><c> they</c><00:09:40.550><c> prevent</c><00:09:40.940><c> you</c><00:09:41.030><c> from</c>

00:09:41.050 --> 00:09:41.060 align:start position:0%
of all they did they prevent you from
 

00:09:41.060 --> 00:09:42.700 align:start position:0%
of all they did they prevent you from
accidentally<00:09:41.900><c> leaking</c><00:09:42.260><c> memory</c><00:09:42.380><c> by</c>

00:09:42.700 --> 00:09:42.710 align:start position:0%
accidentally leaking memory by
 

00:09:42.710 --> 00:09:44.530 align:start position:0%
accidentally leaking memory by
forgetting<00:09:43.040><c> to</c><00:09:43.250><c> call</c><00:09:43.430><c> delete</c><00:09:43.790><c> they're</c><00:09:44.300><c> really</c>

00:09:44.530 --> 00:09:44.540 align:start position:0%
forgetting to call delete they're really
 

00:09:44.540 --> 00:09:46.510 align:start position:0%
forgetting to call delete they're really
quite<00:09:44.750><c> useful</c><00:09:44.960><c> shared</c><00:09:45.770><c> pointer</c><00:09:46.040><c> specifically</c>

00:09:46.510 --> 00:09:46.520 align:start position:0%
quite useful shared pointer specifically
 

00:09:46.520 --> 00:09:48.010 align:start position:0%
quite useful shared pointer specifically
has<00:09:46.700><c> a</c><00:09:46.730><c> bit</c><00:09:46.940><c> of</c><00:09:46.970><c> an</c><00:09:47.090><c> overhead</c><00:09:47.480><c> because</c><00:09:47.810><c> of</c><00:09:47.900><c> its</c>

00:09:48.010 --> 00:09:48.020 align:start position:0%
has a bit of an overhead because of its
 

00:09:48.020 --> 00:09:49.720 align:start position:0%
has a bit of an overhead because of its
reference<00:09:48.380><c> counting</c><00:09:48.650><c> systems</c><00:09:49.010><c> but</c><00:09:49.190><c> then</c>

00:09:49.720 --> 00:09:49.730 align:start position:0%
reference counting systems but then
 

00:09:49.730 --> 00:09:50.890 align:start position:0%
reference counting systems but then
again<00:09:49.940><c> a</c><00:09:49.970><c> lot</c><00:09:50.150><c> of</c><00:09:50.240><c> people</c><00:09:50.540><c> a</c><00:09:50.630><c> lot</c><00:09:50.750><c> of</c><00:09:50.780><c> people</c>

00:09:50.890 --> 00:09:50.900 align:start position:0%
again a lot of people a lot of people
 

00:09:50.900 --> 00:09:52.420 align:start position:0%
again a lot of people a lot of people
who<00:09:51.110><c> tend</c><00:09:51.590><c> to</c><00:09:51.650><c> write</c><00:09:51.830><c> their</c><00:09:52.010><c> own</c><00:09:52.040><c> memory</c>

00:09:52.420 --> 00:09:52.430 align:start position:0%
who tend to write their own memory
 

00:09:52.430 --> 00:09:53.740 align:start position:0%
who tend to write their own memory
management<00:09:52.700><c> systems</c><00:09:53.120><c> tend</c><00:09:53.360><c> to</c><00:09:53.450><c> have</c><00:09:53.570><c> a</c><00:09:53.600><c> bit</c><00:09:53.720><c> of</c>

00:09:53.740 --> 00:09:53.750 align:start position:0%
management systems tend to have a bit of
 

00:09:53.750 --> 00:09:56.170 align:start position:0%
management systems tend to have a bit of
an<00:09:53.900><c> overhead</c><00:09:54.170><c> as</c><00:09:54.320><c> well</c><00:09:54.560><c> so</c><00:09:55.160><c> it's</c><00:09:55.280><c> kind</c><00:09:55.490><c> of</c><00:09:55.550><c> it's</c>

00:09:56.170 --> 00:09:56.180 align:start position:0%
an overhead as well so it's kind of it's
 

00:09:56.180 --> 00:09:58.120 align:start position:0%
an overhead as well so it's kind of it's
a<00:09:56.300><c> very</c><00:09:56.480><c> delicate</c><00:09:56.930><c> topic</c><00:09:57.560><c> because</c><00:09:57.800><c> you</c><00:09:57.980><c> have</c>

00:09:58.120 --> 00:09:58.130 align:start position:0%
a very delicate topic because you have
 

00:09:58.130 --> 00:09:59.980 align:start position:0%
a very delicate topic because you have
this<00:09:58.250><c> new</c><00:09:58.460><c> breed</c><00:09:58.730><c> of</c><00:09:58.790><c> C++</c><00:09:59.120><c> programmers</c><00:09:59.840><c> now</c>

00:09:59.980 --> 00:09:59.990 align:start position:0%
this new breed of C++ programmers now
 

00:09:59.990 --> 00:10:01.840 align:start position:0%
this new breed of C++ programmers now
who<00:10:00.230><c> only</c><00:10:00.410><c> use</c><00:10:00.800><c> these</c><00:10:00.980><c> kind</c><00:10:01.250><c> of</c><00:10:01.310><c> features</c><00:10:01.490><c> and</c>

00:10:01.840 --> 00:10:01.850 align:start position:0%
who only use these kind of features and
 

00:10:01.850 --> 00:10:03.220 align:start position:0%
who only use these kind of features and
then<00:10:01.940><c> you</c><00:10:02.090><c> have</c><00:10:02.240><c> like</c><00:10:02.390><c> the</c><00:10:02.540><c> optical</c><00:10:02.900><c> people</c>

00:10:03.220 --> 00:10:03.230 align:start position:0%
then you have like the optical people
 

00:10:03.230 --> 00:10:05.170 align:start position:0%
then you have like the optical people
who<00:10:03.350><c> using</c><00:10:03.710><c> you</c><00:10:03.770><c> and</c><00:10:03.890><c> delete</c><00:10:04.190><c> I'm</c><00:10:04.820><c> kind</c><00:10:05.090><c> of</c><00:10:05.120><c> a</c>

00:10:05.170 --> 00:10:05.180 align:start position:0%
who using you and delete I'm kind of a
 

00:10:05.180 --> 00:10:07.240 align:start position:0%
who using you and delete I'm kind of a
bit<00:10:05.300><c> of</c><00:10:05.330><c> both</c><00:10:05.600><c> because</c><00:10:05.960><c> there</c><00:10:06.380><c> is</c><00:10:06.500><c> a</c><00:10:06.770><c> time</c>

00:10:07.240 --> 00:10:07.250 align:start position:0%
bit of both because there is a time
 

00:10:07.250 --> 00:10:09.580 align:start position:0%
bit of both because there is a time
where<00:10:07.550><c> you</c><00:10:07.580><c> want</c><00:10:07.850><c> to</c><00:10:08.030><c> use</c><00:10:08.110><c> unique</c><00:10:09.110><c> pointer</c><00:10:09.470><c> or</c>

00:10:09.580 --> 00:10:09.590 align:start position:0%
where you want to use unique pointer or
 

00:10:09.590 --> 00:10:11.500 align:start position:0%
where you want to use unique pointer or
shared<00:10:09.890><c> point</c><00:10:10.100><c> two</c><00:10:10.250><c> perhaps</c><00:10:10.400><c> but</c><00:10:11.330><c> there's</c>

00:10:11.500 --> 00:10:11.510 align:start position:0%
shared point two perhaps but there's
 

00:10:11.510 --> 00:10:12.610 align:start position:0%
shared point two perhaps but there's
also<00:10:11.600><c> a</c><00:10:11.720><c> time</c><00:10:11.960><c> where</c><00:10:12.170><c> you</c><00:10:12.260><c> need</c><00:10:12.380><c> new</c><00:10:12.560><c> and</c>

00:10:12.610 --> 00:10:12.620 align:start position:0%
also a time where you need new and
 

00:10:12.620 --> 00:10:14.440 align:start position:0%
also a time where you need new and
delete<00:10:12.890><c> so</c><00:10:13.340><c> don't</c><00:10:13.640><c> think</c><00:10:13.910><c> that</c><00:10:14.120><c> this</c><00:10:14.330><c> has</c>

00:10:14.440 --> 00:10:14.450 align:start position:0%
delete so don't think that this has
 

00:10:14.450 --> 00:10:15.910 align:start position:0%
delete so don't think that this has
completely<00:10:14.840><c> replaced</c><00:10:15.170><c> you</c><00:10:15.320><c> in</c><00:10:15.410><c> delete</c><00:10:15.590><c> in</c><00:10:15.740><c> my</c>

00:10:15.910 --> 00:10:15.920 align:start position:0%
completely replaced you in delete in my
 

00:10:15.920 --> 00:10:17.830 align:start position:0%
completely replaced you in delete in my
opinion<00:10:16.430><c> it</c><00:10:16.550><c> has</c><00:10:16.730><c> absolutely</c><00:10:17.000><c> not</c><00:10:17.510><c> replaced</c>

00:10:17.830 --> 00:10:17.840 align:start position:0%
opinion it has absolutely not replaced
 

00:10:17.840 --> 00:10:19.420 align:start position:0%
opinion it has absolutely not replaced
new<00:10:18.020><c> and</c><00:10:18.170><c> delete</c><00:10:18.320><c> it's</c><00:10:18.950><c> just</c><00:10:19.130><c> something</c><00:10:19.400><c> that</c>

00:10:19.420 --> 00:10:19.430 align:start position:0%
new and delete it's just something that
 

00:10:19.430 --> 00:10:20.830 align:start position:0%
new and delete it's just something that
you<00:10:19.580><c> should</c><00:10:19.700><c> probably</c><00:10:19.880><c> do</c><00:10:20.210><c> when</c><00:10:20.480><c> you</c><00:10:20.660><c> just</c>

00:10:20.830 --> 00:10:20.840 align:start position:0%
you should probably do when you just
 

00:10:20.840 --> 00:10:22.390 align:start position:0%
you should probably do when you just
need<00:10:21.020><c> to</c><00:10:21.140><c> declare</c><00:10:21.410><c> a</c><00:10:21.470><c> heap-allocated</c><00:10:21.830><c> object</c>

00:10:22.390 --> 00:10:22.400 align:start position:0%
need to declare a heap-allocated object
 

00:10:22.400 --> 00:10:23.800 align:start position:0%
need to declare a heap-allocated object
and<00:10:22.820><c> you</c><00:10:22.910><c> don't</c><00:10:23.060><c> particularly</c><00:10:23.300><c> want</c><00:10:23.450><c> to</c><00:10:23.630><c> tidy</c>

00:10:23.800 --> 00:10:23.810 align:start position:0%
and you don't particularly want to tidy
 

00:10:23.810 --> 00:10:25.540 align:start position:0%
and you don't particularly want to tidy
up<00:10:23.900><c> after</c><00:10:24.140><c> yourself</c><00:10:24.560><c> because</c><00:10:24.830><c> you</c><00:10:25.160><c> don't</c><00:10:25.250><c> need</c>

00:10:25.540 --> 00:10:25.550 align:start position:0%
up after yourself because you don't need
 

00:10:25.550 --> 00:10:27.370 align:start position:0%
up after yourself because you don't need
to<00:10:25.700><c> kind</c><00:10:25.910><c> of</c><00:10:25.940><c> explicitly</c><00:10:26.600><c> call</c><00:10:27.050><c> to</c><00:10:27.200><c> later</c>

00:10:27.370 --> 00:10:27.380 align:start position:0%
to kind of explicitly call to later
 

00:10:27.380 --> 00:10:29.290 align:start position:0%
to kind of explicitly call to later
explicitly<00:10:27.950><c> manage</c><00:10:28.190><c> that</c><00:10:28.340><c> memory</c><00:10:28.700><c> in</c><00:10:28.910><c> those</c>

00:10:29.290 --> 00:10:29.300 align:start position:0%
explicitly manage that memory in those
 

00:10:29.300 --> 00:10:30.970 align:start position:0%
explicitly manage that memory in those
cases<00:10:29.600><c> you</c><00:10:30.200><c> should</c><00:10:30.350><c> be</c><00:10:30.470><c> using</c><00:10:30.620><c> a</c><00:10:30.740><c> smart</c>

00:10:30.970 --> 00:10:30.980 align:start position:0%
cases you should be using a smart
 

00:10:30.980 --> 00:10:32.620 align:start position:0%
cases you should be using a smart
pointers<00:10:31.250><c> usually</c><00:10:31.610><c> use</c><00:10:31.880><c> unique</c><00:10:32.180><c> pointer</c>

00:10:32.620 --> 00:10:32.630 align:start position:0%
pointers usually use unique pointer
 

00:10:32.630 --> 00:10:34.120 align:start position:0%
pointers usually use unique pointer
whenever<00:10:32.930><c> you</c><00:10:33.050><c> can</c><00:10:33.290><c> because</c><00:10:33.620><c> it</c><00:10:33.710><c> has</c><00:10:33.830><c> a</c><00:10:33.860><c> lower</c>

00:10:34.120 --> 00:10:34.130 align:start position:0%
whenever you can because it has a lower
 

00:10:34.130 --> 00:10:36.910 align:start position:0%
whenever you can because it has a lower
overhead<00:10:34.520><c> but</c><00:10:35.360><c> if</c><00:10:35.720><c> you</c><00:10:36.110><c> absolutely</c><00:10:36.350><c> need</c><00:10:36.890><c> to</c>

00:10:36.910 --> 00:10:36.920 align:start position:0%
overhead but if you absolutely need to
 

00:10:36.920 --> 00:10:38.770 align:start position:0%
overhead but if you absolutely need to
share<00:10:37.310><c> between</c><00:10:37.730><c> objects</c><00:10:38.150><c> so</c><00:10:38.270><c> you</c><00:10:38.330><c> just</c><00:10:38.510><c> can't</c>

00:10:38.770 --> 00:10:38.780 align:start position:0%
share between objects so you just can't
 

00:10:38.780 --> 00:10:39.530 align:start position:0%
share between objects so you just can't
use<00:10:38.960><c> any</c>

00:10:39.530 --> 00:10:39.540 align:start position:0%
use any
 

00:10:39.540 --> 00:10:41.870 align:start position:0%
use any
just<00:10:39.660><c> can't</c><00:10:39.930><c> use</c><00:10:40.079><c> a</c><00:10:40.110><c> unique</c><00:10:40.380><c> pointer</c><00:10:40.800><c> then</c><00:10:41.310><c> use</c>

00:10:41.870 --> 00:10:41.880 align:start position:0%
just can't use a unique pointer then use
 

00:10:41.880 --> 00:10:43.610 align:start position:0%
just can't use a unique pointer then use
a<00:10:41.910><c> shared</c><00:10:42.389><c> pointer</c><00:10:42.779><c> but</c><00:10:42.959><c> definitely</c><00:10:43.470><c> going</c>

00:10:43.610 --> 00:10:43.620 align:start position:0%
a shared pointer but definitely going
 

00:10:43.620 --> 00:10:44.900 align:start position:0%
a shared pointer but definitely going
that<00:10:43.740><c> order</c><00:10:43.980><c> first</c><00:10:44.160><c> you</c><00:10:44.339><c> think</c><00:10:44.459><c> pointer</c><00:10:44.699><c> first</c>

00:10:44.900 --> 00:10:44.910 align:start position:0%
that order first you think pointer first
 

00:10:44.910 --> 00:10:46.400 align:start position:0%
that order first you think pointer first
preference<00:10:45.180><c> share</c><00:10:45.899><c> point</c><00:10:46.110><c> a</c><00:10:46.139><c> second</c>

00:10:46.400 --> 00:10:46.410 align:start position:0%
preference share point a second
 

00:10:46.410 --> 00:10:47.810 align:start position:0%
preference share point a second
preference<00:10:46.589><c> hope</c><00:10:47.310><c> you</c><00:10:47.430><c> guys</c><00:10:47.550><c> enjoy</c><00:10:47.730><c> this</c>

00:10:47.810 --> 00:10:47.820 align:start position:0%
preference hope you guys enjoy this
 

00:10:47.820 --> 00:10:49.370 align:start position:0%
preference hope you guys enjoy this
video<00:10:48.000><c> if</c><00:10:48.329><c> you</c><00:10:48.690><c> did</c><00:10:48.810><c> even</c><00:10:48.990><c> if</c><00:10:49.110><c> that</c><00:10:49.199><c> like</c>

00:10:49.370 --> 00:10:49.380 align:start position:0%
video if you did even if that like
 

00:10:49.380 --> 00:10:51.110 align:start position:0%
video if you did even if that like
button<00:10:49.620><c> on</c><00:10:49.740><c> our</c><00:10:49.769><c> YouTube</c><00:10:50.100><c> check</c><00:10:50.310><c> I</c><00:10:50.550><c> said</c><00:10:51.029><c> it</c>

00:10:51.110 --> 00:10:51.120 align:start position:0%
button on our YouTube check I said it
 

00:10:51.120 --> 00:10:53.300 align:start position:0%
button on our YouTube check I said it
was<00:10:51.209><c> like</c><00:10:51.360><c> the</c><00:10:51.600><c> said</c><00:10:52.019><c> it</c><00:10:52.110><c> was</c><00:10:52.199><c> there</c><00:10:52.470><c> last</c><00:10:53.160><c> time</c>

00:10:53.300 --> 00:10:53.310 align:start position:0%
was like the said it was there last time
 

00:10:53.310 --> 00:10:54.740 align:start position:0%
was like the said it was there last time
but<00:10:53.699><c> now</c><00:10:53.820><c> it's</c><00:10:54.000><c> like</c><00:10:54.120><c> in</c><00:10:54.269><c> the</c><00:10:54.360><c> middle</c><00:10:54.660><c> it's</c>

00:10:54.740 --> 00:10:54.750 align:start position:0%
but now it's like in the middle it's
 

00:10:54.750 --> 00:10:56.660 align:start position:0%
but now it's like in the middle it's
like<00:10:54.839><c> here</c><00:10:55.199><c> or</c><00:10:55.709><c> something</c><00:10:56.009><c> out</c><00:10:56.100><c> in</c><00:10:56.220><c> our</c><00:10:56.310><c> anyway</c>

00:10:56.660 --> 00:10:56.670 align:start position:0%
like here or something out in our anyway
 

00:10:56.670 --> 00:10:58.189 align:start position:0%
like here or something out in our anyway
you<00:10:57.149><c> can</c><00:10:57.269><c> click</c><00:10:57.449><c> that</c><00:10:57.540><c> like</c><00:10:57.720><c> button</c><00:10:57.990><c> if</c><00:10:58.110><c> you</c>

00:10:58.189 --> 00:10:58.199 align:start position:0%
you can click that like button if you
 

00:10:58.199 --> 00:11:00.110 align:start position:0%
you can click that like button if you
enjoyed<00:10:58.440><c> this</c><00:10:58.529><c> video</c><00:10:58.680><c> leave</c><00:10:59.579><c> any</c><00:10:59.790><c> suggestions</c>

00:11:00.110 --> 00:11:00.120 align:start position:0%
enjoyed this video leave any suggestions
 

00:11:00.120 --> 00:11:01.939 align:start position:0%
enjoyed this video leave any suggestions
you<00:11:00.630><c> have</c><00:11:00.660><c> for</c><00:11:00.870><c> future</c><00:11:01.290><c> videos</c><00:11:01.709><c> and</c><00:11:01.829><c> all</c><00:11:01.920><c> that</c>

00:11:01.939 --> 00:11:01.949 align:start position:0%
you have for future videos and all that
 

00:11:01.949 --> 00:11:03.530 align:start position:0%
you have for future videos and all that
in<00:11:02.310><c> the</c><00:11:02.399><c> comment</c><00:11:02.699><c> section</c><00:11:02.970><c> below</c><00:11:03.000><c> as</c><00:11:03.329><c> well</c><00:11:03.449><c> as</c>

00:11:03.530 --> 00:11:03.540 align:start position:0%
in the comment section below as well as
 

00:11:03.540 --> 00:11:04.790 align:start position:0%
in the comment section below as well as
any<00:11:03.630><c> questions</c><00:11:04.139><c> you</c><00:11:04.259><c> may</c><00:11:04.380><c> have</c>

00:11:04.790 --> 00:11:04.800 align:start position:0%
any questions you may have
 

00:11:04.800 --> 00:11:06.379 align:start position:0%
any questions you may have
I<00:11:04.829><c> have</c><00:11:05.250><c> a</c><00:11:05.279><c> discord</c><00:11:05.759><c> server</c><00:11:06.029><c> where</c><00:11:06.209><c> you</c><00:11:06.300><c> can</c>

00:11:06.379 --> 00:11:06.389 align:start position:0%
I have a discord server where you can
 

00:11:06.389 --> 00:11:07.670 align:start position:0%
I have a discord server where you can
also<00:11:06.509><c> ask</c><00:11:06.630><c> questions</c><00:11:06.839><c> link</c><00:11:07.529><c> in</c><00:11:07.620><c> the</c>

00:11:07.670 --> 00:11:07.680 align:start position:0%
also ask questions link in the
 

00:11:07.680 --> 00:11:09.590 align:start position:0%
also ask questions link in the
description<00:11:08.069><c> below</c><00:11:08.279><c> and</c><00:11:08.519><c> if</c><00:11:09.089><c> you</c><00:11:09.240><c> really</c><00:11:09.449><c> like</c>

00:11:09.590 --> 00:11:09.600 align:start position:0%
description below and if you really like
 

00:11:09.600 --> 00:11:11.059 align:start position:0%
description below and if you really like
this<00:11:09.750><c> video</c><00:11:09.930><c> and</c><00:11:10.290><c> you</c><00:11:10.319><c> like</c><00:11:10.380><c> this</c><00:11:10.649><c> series</c><00:11:10.980><c> and</c>

00:11:11.059 --> 00:11:11.069 align:start position:0%
this video and you like this series and
 

00:11:11.069 --> 00:11:12.110 align:start position:0%
this video and you like this series and
you<00:11:11.160><c> want</c><00:11:11.279><c> to</c><00:11:11.339><c> support</c><00:11:11.610><c> it</c><00:11:11.730><c> you</c><00:11:11.850><c> want</c><00:11:11.970><c> to</c><00:11:12.029><c> see</c>

00:11:12.110 --> 00:11:12.120 align:start position:0%
you want to support it you want to see
 

00:11:12.120 --> 00:11:13.460 align:start position:0%
you want to support it you want to see
more<00:11:12.329><c> videos</c><00:11:12.630><c> then</c><00:11:13.170><c> you</c><00:11:13.230><c> can</c><00:11:13.350><c> go</c><00:11:13.440><c> to</c>

00:11:13.460 --> 00:11:13.470 align:start position:0%
more videos then you can go to
 

00:11:13.470 --> 00:11:15.170 align:start position:0%
more videos then you can go to
patreon.com/scishow<00:11:14.100><c> turner</c><00:11:14.699><c> pick</c><00:11:14.940><c> up</c><00:11:15.029><c> some</c>

00:11:15.170 --> 00:11:15.180 align:start position:0%
patreon.com/scishow turner pick up some
 

00:11:15.180 --> 00:11:17.210 align:start position:0%
patreon.com/scishow turner pick up some
sweet<00:11:15.329><c> rewards</c><00:11:15.870><c> by</c><00:11:16.319><c> helping</c><00:11:16.620><c> to</c><00:11:16.709><c> support</c><00:11:16.829><c> this</c>

00:11:17.210 --> 00:11:17.220 align:start position:0%
sweet rewards by helping to support this
 

00:11:17.220 --> 00:11:19.040 align:start position:0%
sweet rewards by helping to support this
series<00:11:17.579><c> I</c><00:11:17.819><c> will</c><00:11:18.209><c> see</c><00:11:18.360><c> you</c><00:11:18.449><c> guys</c><00:11:18.600><c> next</c><00:11:18.899><c> time</c>

00:11:19.040 --> 00:11:19.050 align:start position:0%
series I will see you guys next time
 

00:11:19.050 --> 00:11:20.390 align:start position:0%
series I will see you guys next time
goodbye

00:11:20.390 --> 00:11:20.400 align:start position:0%
goodbye
 

00:11:20.400 --> 00:11:35.960 align:start position:0%
goodbye
[Music]

