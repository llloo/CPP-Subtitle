WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.790 align:start position:0%
 
hello<00:00:00.179><c> guys</c><00:00:00.450><c> my</c><00:00:00.480><c> name</c><00:00:00.719><c> is</c><00:00:00.870><c> China</c><00:00:01.110><c> welcome</c><00:00:01.620><c> back</c>

00:00:01.790 --> 00:00:01.800 align:start position:0%
hello guys my name is China welcome back
 

00:00:01.800 --> 00:00:03.980 align:start position:0%
hello guys my name is China welcome back
to<00:00:01.979><c> my</c><00:00:02.100><c> say</c><00:00:02.280><c> plus</c><00:00:02.429><c> plus</c><00:00:02.669><c> series</c><00:00:02.970><c> so</c><00:00:03.750><c> today</c>

00:00:03.980 --> 00:00:03.990 align:start position:0%
to my say plus plus series so today
 

00:00:03.990 --> 00:00:05.660 align:start position:0%
to my say plus plus series so today
we're<00:00:04.290><c> going</c><00:00:04.410><c> to</c><00:00:04.470><c> be</c><00:00:04.620><c> talking</c><00:00:05.040><c> about</c><00:00:05.190><c> move</c>

00:00:05.660 --> 00:00:05.670 align:start position:0%
we're going to be talking about move
 

00:00:05.670 --> 00:00:07.190 align:start position:0%
we're going to be talking about move
semantics<00:00:06.299><c> this</c><00:00:06.629><c> is</c><00:00:06.750><c> probably</c><00:00:06.990><c> like</c><00:00:07.170><c> the</c>

00:00:07.190 --> 00:00:07.200 align:start position:0%
semantics this is probably like the
 

00:00:07.200 --> 00:00:09.470 align:start position:0%
semantics this is probably like the
single<00:00:07.740><c> most</c><00:00:07.950><c> requested</c><00:00:08.160><c> topic</c><00:00:08.820><c> so</c><00:00:08.970><c> I'm</c><00:00:09.090><c> happy</c>

00:00:09.470 --> 00:00:09.480 align:start position:0%
single most requested topic so I'm happy
 

00:00:09.480 --> 00:00:10.940 align:start position:0%
single most requested topic so I'm happy
that<00:00:09.510><c> I'm</c><00:00:09.719><c> finally</c><00:00:10.200><c> getting</c><00:00:10.320><c> to</c><00:00:10.500><c> and</c><00:00:10.769><c> today</c>

00:00:10.940 --> 00:00:10.950 align:start position:0%
that I'm finally getting to and today
 

00:00:10.950 --> 00:00:12.530 align:start position:0%
that I'm finally getting to and today
we're<00:00:11.070><c> gonna</c><00:00:11.160><c> be</c><00:00:11.340><c> more</c><00:00:11.550><c> or</c><00:00:11.670><c> less</c><00:00:11.700><c> taking</c><00:00:12.420><c> a</c>

00:00:12.530 --> 00:00:12.540 align:start position:0%
we're gonna be more or less taking a
 

00:00:12.540 --> 00:00:14.270 align:start position:0%
we're gonna be more or less taking a
look<00:00:12.750><c> at</c><00:00:12.870><c> an</c><00:00:12.990><c> introduction</c><00:00:13.559><c> to</c><00:00:13.769><c> what</c><00:00:14.070><c> move</c>

00:00:14.270 --> 00:00:14.280 align:start position:0%
look at an introduction to what move
 

00:00:14.280 --> 00:00:16.160 align:start position:0%
look at an introduction to what move
semantics<00:00:14.820><c> is</c><00:00:14.969><c> because</c><00:00:15.299><c> it's</c><00:00:15.450><c> a</c><00:00:15.509><c> very</c><00:00:15.690><c> complex</c>

00:00:16.160 --> 00:00:16.170 align:start position:0%
semantics is because it's a very complex
 

00:00:16.170 --> 00:00:18.710 align:start position:0%
semantics is because it's a very complex
topic<00:00:16.560><c> the</c><00:00:17.250><c> basics</c><00:00:17.760><c> is</c><00:00:17.910><c> really</c><00:00:18.150><c> simple</c><00:00:18.570><c> but</c>

00:00:18.710 --> 00:00:18.720 align:start position:0%
topic the basics is really simple but
 

00:00:18.720 --> 00:00:20.630 align:start position:0%
topic the basics is really simple but
then<00:00:18.869><c> what</c><00:00:19.140><c> you</c><00:00:19.260><c> can</c><00:00:19.439><c> do</c><00:00:19.650><c> with</c><00:00:19.890><c> it</c><00:00:20.160><c> and</c><00:00:20.369><c> how</c><00:00:20.520><c> it</c>

00:00:20.630 --> 00:00:20.640 align:start position:0%
then what you can do with it and how it
 

00:00:20.640 --> 00:00:23.509 align:start position:0%
then what you can do with it and how it
works<00:00:20.850><c> in</c><00:00:21.029><c> practice</c><00:00:22.100><c> we'll</c><00:00:23.100><c> get</c><00:00:23.250><c> to</c><00:00:23.369><c> that</c>

00:00:23.509 --> 00:00:23.519 align:start position:0%
works in practice we'll get to that
 

00:00:23.519 --> 00:00:25.099 align:start position:0%
works in practice we'll get to that
stuff<00:00:23.789><c> don't</c><00:00:24.029><c> worry</c><00:00:24.090><c> so</c><00:00:24.539><c> first</c><00:00:24.750><c> of</c><00:00:24.869><c> all</c><00:00:24.930><c> make</c>

00:00:25.099 --> 00:00:25.109 align:start position:0%
stuff don't worry so first of all make
 

00:00:25.109 --> 00:00:26.839 align:start position:0%
stuff don't worry so first of all make
sure<00:00:25.170><c> that</c><00:00:25.350><c> you've</c><00:00:25.560><c> seen</c><00:00:25.769><c> my</c><00:00:25.949><c> Elle</c><00:00:26.160><c> values</c><00:00:26.609><c> and</c>

00:00:26.839 --> 00:00:26.849 align:start position:0%
sure that you've seen my Elle values and
 

00:00:26.849 --> 00:00:28.580 align:start position:0%
sure that you've seen my Elle values and
our<00:00:27.060><c> values</c><00:00:27.420><c> video</c><00:00:27.720><c> because</c><00:00:28.019><c> this</c><00:00:28.170><c> is</c><00:00:28.289><c> more</c><00:00:28.470><c> or</c>

00:00:28.580 --> 00:00:28.590 align:start position:0%
our values video because this is more or
 

00:00:28.590 --> 00:00:30.349 align:start position:0%
our values video because this is more or
less<00:00:28.740><c> going</c><00:00:28.920><c> to</c><00:00:29.039><c> be</c><00:00:29.160><c> a</c><00:00:29.279><c> continuation</c><00:00:29.789><c> of</c><00:00:30.269><c> that</c>

00:00:30.349 --> 00:00:30.359 align:start position:0%
less going to be a continuation of that
 

00:00:30.359 --> 00:00:32.659 align:start position:0%
less going to be a continuation of that
video<00:00:30.900><c> now</c><00:00:31.260><c> that</c><00:00:31.500><c> we've</c><00:00:31.619><c> learnt</c><00:00:31.949><c> what</c><00:00:32.430><c> our</c>

00:00:32.659 --> 00:00:32.669 align:start position:0%
video now that we've learnt what our
 

00:00:32.669 --> 00:00:35.000 align:start position:0%
video now that we've learnt what our
values<00:00:33.180><c> actually</c><00:00:33.360><c> are</c><00:00:33.930><c> and</c><00:00:34.290><c> what</c><00:00:34.469><c> our</c><00:00:34.620><c> value</c>

00:00:35.000 --> 00:00:35.010 align:start position:0%
values actually are and what our value
 

00:00:35.010 --> 00:00:37.310 align:start position:0%
values actually are and what our value
references<00:00:35.640><c> actually</c><00:00:36.120><c> are</c><00:00:36.329><c> we</c><00:00:36.960><c> can</c><00:00:37.140><c> take</c><00:00:37.290><c> a</c>

00:00:37.310 --> 00:00:37.320 align:start position:0%
references actually are we can take a
 

00:00:37.320 --> 00:00:39.470 align:start position:0%
references actually are we can take a
look<00:00:37.530><c> at</c><00:00:37.739><c> their</c><00:00:37.980><c> single</c><00:00:38.550><c> biggest</c><00:00:38.969><c> use</c><00:00:39.180><c> case</c>

00:00:39.470 --> 00:00:39.480 align:start position:0%
look at their single biggest use case
 

00:00:39.480 --> 00:00:41.420 align:start position:0%
look at their single biggest use case
move<00:00:40.020><c> semantics</c><00:00:40.620><c> to</c><00:00:40.829><c> keep</c><00:00:40.980><c> things</c><00:00:41.219><c> simple</c>

00:00:41.420 --> 00:00:41.430 align:start position:0%
move semantics to keep things simple
 

00:00:41.430 --> 00:00:43.400 align:start position:0%
move semantics to keep things simple
move<00:00:41.879><c> semantics</c><00:00:42.420><c> essentially</c><00:00:42.989><c> just</c><00:00:43.140><c> allow</c><00:00:43.379><c> us</c>

00:00:43.400 --> 00:00:43.410 align:start position:0%
move semantics essentially just allow us
 

00:00:43.410 --> 00:00:45.619 align:start position:0%
move semantics essentially just allow us
to<00:00:43.800><c> move</c><00:00:44.100><c> objects</c><00:00:44.700><c> around</c><00:00:45.000><c> and</c><00:00:45.329><c> this</c><00:00:45.450><c> wasn't</c>

00:00:45.619 --> 00:00:45.629 align:start position:0%
to move objects around and this wasn't
 

00:00:45.629 --> 00:00:48.729 align:start position:0%
to move objects around and this wasn't
possible<00:00:45.870><c> before</c><00:00:46.200><c> C++</c><00:00:46.980><c> 11</c><00:00:47.460><c> because</c><00:00:47.760><c> C++</c><00:00:48.270><c> 11</c>

00:00:48.729 --> 00:00:48.739 align:start position:0%
possible before C++ 11 because C++ 11
 

00:00:48.739 --> 00:00:51.229 align:start position:0%
possible before C++ 11 because C++ 11
introduced<00:00:49.739><c> our</c><00:00:49.920><c> value</c><00:00:50.460><c> references</c><00:00:51.059><c> which</c>

00:00:51.229 --> 00:00:51.239 align:start position:0%
introduced our value references which
 

00:00:51.239 --> 00:00:53.569 align:start position:0%
introduced our value references which
are<00:00:51.329><c> necessary</c><00:00:51.570><c> for</c><00:00:52.289><c> move</c><00:00:52.770><c> semantics</c><00:00:53.280><c> the</c>

00:00:53.569 --> 00:00:53.579 align:start position:0%
are necessary for move semantics the
 

00:00:53.579 --> 00:00:55.130 align:start position:0%
are necessary for move semantics the
basic<00:00:53.910><c> idea</c><00:00:54.210><c> is</c><00:00:54.360><c> that</c><00:00:54.480><c> when</c><00:00:54.629><c> we're</c><00:00:54.750><c> writing</c><00:00:54.989><c> a</c>

00:00:55.130 --> 00:00:55.140 align:start position:0%
basic idea is that when we're writing a
 

00:00:55.140 --> 00:00:57.590 align:start position:0%
basic idea is that when we're writing a
C++<00:00:55.739><c> code</c><00:00:55.980><c> there</c><00:00:56.280><c> are</c><00:00:56.309><c> a</c><00:00:56.430><c> lot</c><00:00:56.760><c> of</c><00:00:56.789><c> cases</c><00:00:57.180><c> in</c>

00:00:57.590 --> 00:00:57.600 align:start position:0%
C++ code there are a lot of cases in
 

00:00:57.600 --> 00:00:59.750 align:start position:0%
C++ code there are a lot of cases in
which<00:00:57.629><c> we</c><00:00:57.989><c> don't</c><00:00:58.170><c> really</c><00:00:58.469><c> need</c><00:00:58.890><c> to</c><00:00:58.949><c> or</c><00:00:59.340><c> want</c><00:00:59.640><c> to</c>

00:00:59.750 --> 00:00:59.760 align:start position:0%
which we don't really need to or want to
 

00:00:59.760 --> 00:01:01.700 align:start position:0%
which we don't really need to or want to
necessarily<00:00:59.969><c> copy</c><00:01:00.719><c> an</c><00:01:00.989><c> object</c><00:01:01.350><c> from</c><00:01:01.469><c> one</c>

00:01:01.700 --> 00:01:01.710 align:start position:0%
necessarily copy an object from one
 

00:01:01.710 --> 00:01:04.039 align:start position:0%
necessarily copy an object from one
place<00:01:01.949><c> to</c><00:01:02.160><c> another</c><00:01:02.370><c> but</c><00:01:02.760><c> that's</c><00:01:03.449><c> really</c><00:01:03.870><c> the</c>

00:01:04.039 --> 00:01:04.049 align:start position:0%
place to another but that's really the
 

00:01:04.049 --> 00:01:06.260 align:start position:0%
place to another but that's really the
only<00:01:04.080><c> place</c><00:01:04.739><c> that</c><00:01:04.769><c> we</c><00:01:05.280><c> can</c><00:01:05.519><c> get</c><00:01:05.700><c> it</c><00:01:05.880><c> from</c><00:01:06.060><c> one</c>

00:01:06.260 --> 00:01:06.270 align:start position:0%
only place that we can get it from one
 

00:01:06.270 --> 00:01:08.390 align:start position:0%
only place that we can get it from one
place<00:01:06.510><c> to</c><00:01:06.540><c> another</c><00:01:06.750><c> so</c><00:01:07.140><c> for</c><00:01:07.170><c> example</c><00:01:07.799><c> if</c><00:01:07.979><c> I'm</c>

00:01:08.390 --> 00:01:08.400 align:start position:0%
place to another so for example if I'm
 

00:01:08.400 --> 00:01:10.730 align:start position:0%
place to another so for example if I'm
passing<00:01:08.820><c> an</c><00:01:08.939><c> object</c><00:01:09.420><c> into</c><00:01:09.840><c> a</c><00:01:09.869><c> function</c><00:01:10.560><c> that</c>

00:01:10.730 --> 00:01:10.740 align:start position:0%
passing an object into a function that
 

00:01:10.740 --> 00:01:12.469 align:start position:0%
passing an object into a function that
then<00:01:10.920><c> is</c><00:01:11.130><c> going</c><00:01:11.280><c> to</c><00:01:11.400><c> take</c><00:01:11.610><c> ownership</c><00:01:11.850><c> of</c><00:01:12.270><c> that</c>

00:01:12.469 --> 00:01:12.479 align:start position:0%
then is going to take ownership of that
 

00:01:12.479 --> 00:01:15.410 align:start position:0%
then is going to take ownership of that
object<00:01:12.720><c> I</c><00:01:13.320><c> have</c><00:01:14.100><c> no</c><00:01:14.250><c> choice</c><00:01:14.490><c> but</c><00:01:14.549><c> to</c><00:01:14.850><c> copy</c><00:01:15.180><c> it</c>

00:01:15.410 --> 00:01:15.420 align:start position:0%
object I have no choice but to copy it
 

00:01:15.420 --> 00:01:17.060 align:start position:0%
object I have no choice but to copy it
the<00:01:15.600><c> same</c><00:01:15.810><c> goes</c><00:01:16.049><c> for</c><00:01:16.080><c> when</c><00:01:16.290><c> I</c><00:01:16.409><c> want</c><00:01:16.590><c> to</c><00:01:16.740><c> return</c>

00:01:17.060 --> 00:01:17.070 align:start position:0%
the same goes for when I want to return
 

00:01:17.070 --> 00:01:18.740 align:start position:0%
the same goes for when I want to return
an<00:01:17.220><c> object</c><00:01:17.280><c> from</c><00:01:17.759><c> a</c><00:01:17.880><c> function</c><00:01:18.299><c> I</c><00:01:18.390><c> still</c><00:01:18.600><c> have</c>

00:01:18.740 --> 00:01:18.750 align:start position:0%
an object from a function I still have
 

00:01:18.750 --> 00:01:20.810 align:start position:0%
an object from a function I still have
to<00:01:18.900><c> create</c><00:01:19.170><c> that</c><00:01:19.470><c> object</c><00:01:19.950><c> inside</c><00:01:20.310><c> that</c><00:01:20.520><c> actual</c>

00:01:20.810 --> 00:01:20.820 align:start position:0%
to create that object inside that actual
 

00:01:20.820 --> 00:01:23.510 align:start position:0%
to create that object inside that actual
function<00:01:21.299><c> and</c><00:01:21.509><c> then</c><00:01:22.229><c> actually</c><00:01:22.950><c> return</c><00:01:23.310><c> it</c>

00:01:23.510 --> 00:01:23.520 align:start position:0%
function and then actually return it
 

00:01:23.520 --> 00:01:25.219 align:start position:0%
function and then actually return it
which<00:01:23.759><c> means</c><00:01:24.000><c> that</c><00:01:24.180><c> again</c><00:01:24.450><c> I'm</c><00:01:24.600><c> copying</c><00:01:25.080><c> that</c>

00:01:25.219 --> 00:01:25.229 align:start position:0%
which means that again I'm copying that
 

00:01:25.229 --> 00:01:26.870 align:start position:0%
which means that again I'm copying that
data<00:01:25.590><c> now</c><00:01:25.920><c> I</c><00:01:25.950><c> don't</c><00:01:26.189><c> really</c><00:01:26.400><c> like</c><00:01:26.610><c> to</c><00:01:26.729><c> use</c>

00:01:26.870 --> 00:01:26.880 align:start position:0%
data now I don't really like to use
 

00:01:26.880 --> 00:01:28.789 align:start position:0%
data now I don't really like to use
return<00:01:27.240><c> values</c><00:01:27.630><c> as</c><00:01:27.840><c> an</c><00:01:28.049><c> example</c><00:01:28.530><c> for</c><00:01:28.680><c> this</c>

00:01:28.789 --> 00:01:28.799 align:start position:0%
return values as an example for this
 

00:01:28.799 --> 00:01:30.050 align:start position:0%
return values as an example for this
because<00:01:29.040><c> there</c><00:01:29.369><c> is</c><00:01:29.490><c> of</c><00:01:29.610><c> course</c><00:01:29.820><c> something</c>

00:01:30.050 --> 00:01:30.060 align:start position:0%
because there is of course something
 

00:01:30.060 --> 00:01:31.819 align:start position:0%
because there is of course something
called<00:01:30.329><c> return</c><00:01:30.450><c> value</c><00:01:30.930><c> optimization</c><00:01:31.680><c> which</c>

00:01:31.819 --> 00:01:31.829 align:start position:0%
called return value optimization which
 

00:01:31.829 --> 00:01:33.920 align:start position:0%
called return value optimization which
can<00:01:32.009><c> kind</c><00:01:32.189><c> of</c><00:01:32.400><c> optimize</c><00:01:33.000><c> that</c><00:01:33.240><c> part</c><00:01:33.509><c> of</c><00:01:33.630><c> it</c><00:01:33.780><c> and</c>

00:01:33.920 --> 00:01:33.930 align:start position:0%
can kind of optimize that part of it and
 

00:01:33.930 --> 00:01:35.660 align:start position:0%
can kind of optimize that part of it and
make<00:01:34.320><c> it</c><00:01:34.470><c> less</c><00:01:34.619><c> of</c><00:01:34.740><c> a</c><00:01:34.829><c> problem</c><00:01:35.280><c> but</c><00:01:35.460><c> with</c><00:01:35.579><c> the</c>

00:01:35.660 --> 00:01:35.670 align:start position:0%
make it less of a problem but with the
 

00:01:35.670 --> 00:01:37.760 align:start position:0%
make it less of a problem but with the
first<00:01:35.850><c> example</c><00:01:36.060><c> if</c><00:01:36.540><c> I</c><00:01:36.659><c> need</c><00:01:36.900><c> to</c><00:01:37.110><c> pass</c><00:01:37.350><c> in</c><00:01:37.650><c> an</c>

00:01:37.760 --> 00:01:37.770 align:start position:0%
first example if I need to pass in an
 

00:01:37.770 --> 00:01:39.170 align:start position:0%
first example if I need to pass in an
object<00:01:38.009><c> a</c><00:01:38.430><c> new</c><00:01:38.579><c> object</c><00:01:38.790><c> that</c><00:01:39.060><c> I'm</c>

00:01:39.170 --> 00:01:39.180 align:start position:0%
object a new object that I'm
 

00:01:39.180 --> 00:01:40.999 align:start position:0%
object a new object that I'm
constructing<00:01:39.810><c> into</c><00:01:40.079><c> some</c><00:01:40.290><c> kind</c><00:01:40.500><c> of</c><00:01:40.619><c> function</c>

00:01:40.999 --> 00:01:41.009 align:start position:0%
constructing into some kind of function
 

00:01:41.009 --> 00:01:42.649 align:start position:0%
constructing into some kind of function
that<00:01:41.040><c> takes</c><00:01:41.280><c> ownership</c><00:01:41.520><c> of</c><00:01:41.880><c> it</c><00:01:42.030><c> or</c><00:01:42.119><c> whatever</c><00:01:42.420><c> I</c>

00:01:42.649 --> 00:01:42.659 align:start position:0%
that takes ownership of it or whatever I
 

00:01:42.659 --> 00:01:44.749 align:start position:0%
that takes ownership of it or whatever I
still<00:01:43.200><c> need</c><00:01:43.439><c> to</c><00:01:43.530><c> unfortunately</c><00:01:44.159><c> construct</c>

00:01:44.749 --> 00:01:44.759 align:start position:0%
still need to unfortunately construct
 

00:01:44.759 --> 00:01:46.219 align:start position:0%
still need to unfortunately construct
like<00:01:45.000><c> essentially</c><00:01:45.540><c> a</c><00:01:45.689><c> throwaway</c>

00:01:46.219 --> 00:01:46.229 align:start position:0%
like essentially a throwaway
 

00:01:46.229 --> 00:01:47.840 align:start position:0%
like essentially a throwaway
object<00:01:46.680><c> in</c><00:01:46.829><c> the</c><00:01:46.950><c> current</c><00:01:47.280><c> stack</c><00:01:47.520><c> frame</c>

00:01:47.840 --> 00:01:47.850 align:start position:0%
object in the current stack frame
 

00:01:47.850 --> 00:01:51.260 align:start position:0%
object in the current stack frame
wherever<00:01:48.240><c> I</c><00:01:48.360><c> am</c><00:01:48.600><c> and</c><00:01:48.930><c> then</c><00:01:49.560><c> copy</c><00:01:50.220><c> it</c><00:01:50.430><c> into</c><00:01:51.060><c> the</c>

00:01:51.260 --> 00:01:51.270 align:start position:0%
wherever I am and then copy it into the
 

00:01:51.270 --> 00:01:55.520 align:start position:0%
wherever I am and then copy it into the
function<00:01:51.540><c> that</c><00:01:52.049><c> I'm</c><00:01:52.500><c> calling</c><00:01:53.000><c> which</c><00:01:54.500><c> which</c><00:01:55.500><c> is</c>

00:01:55.520 --> 00:01:55.530 align:start position:0%
function that I'm calling which which is
 

00:01:55.530 --> 00:01:57.170 align:start position:0%
function that I'm calling which which is
not<00:01:55.829><c> ideal</c><00:01:55.979><c> because</c><00:01:56.369><c> I</c><00:01:56.520><c> don't</c><00:01:56.729><c> actually</c><00:01:56.880><c> need</c>

00:01:57.170 --> 00:01:57.180 align:start position:0%
not ideal because I don't actually need
 

00:01:57.180 --> 00:01:58.760 align:start position:0%
not ideal because I don't actually need
it<00:01:57.360><c> here</c><00:01:57.570><c> I</c><00:01:57.600><c> need</c><00:01:57.719><c> it</c><00:01:57.930><c> there</c><00:01:58.170><c> but</c><00:01:58.409><c> I</c><00:01:58.439><c> can't</c>

00:01:58.760 --> 00:01:58.770 align:start position:0%
it here I need it there but I can't
 

00:01:58.770 --> 00:02:00.200 align:start position:0%
it here I need it there but I can't
construct<00:01:59.100><c> it</c><00:01:59.369><c> there</c><00:01:59.579><c> because</c><00:01:59.880><c> I</c><00:01:59.969><c> need</c><00:02:00.119><c> to</c>

00:02:00.200 --> 00:02:00.210 align:start position:0%
construct it there because I need to
 

00:02:00.210 --> 00:02:01.639 align:start position:0%
construct it there because I need to
first<00:02:00.360><c> construct</c><00:02:00.780><c> it</c><00:02:00.869><c> here</c><00:02:01.079><c> and</c><00:02:01.170><c> then</c><00:02:01.290><c> pass</c><00:02:01.469><c> it</c>

00:02:01.639 --> 00:02:01.649 align:start position:0%
first construct it here and then pass it
 

00:02:01.649 --> 00:02:04.100 align:start position:0%
first construct it here and then pass it
in<00:02:01.740><c> it</c><00:02:01.920><c> becomes</c><00:02:02.159><c> a</c><00:02:02.430><c> huge</c><00:02:03.030><c> mess</c><00:02:03.270><c> and</c><00:02:03.509><c> sure</c><00:02:03.869><c> if</c>

00:02:04.100 --> 00:02:04.110 align:start position:0%
in it becomes a huge mess and sure if
 

00:02:04.110 --> 00:02:05.569 align:start position:0%
in it becomes a huge mess and sure if
your<00:02:04.259><c> object</c><00:02:04.439><c> just</c><00:02:04.799><c> consists</c><00:02:05.340><c> of</c><00:02:05.399><c> like</c><00:02:05.549><c> a</c>

00:02:05.569 --> 00:02:05.579 align:start position:0%
your object just consists of like a
 

00:02:05.579 --> 00:02:06.920 align:start position:0%
your object just consists of like a
couple<00:02:05.939><c> of</c><00:02:06.030><c> integers</c><00:02:06.390><c> or</c><00:02:06.570><c> something</c><00:02:06.840><c> like</c>

00:02:06.920 --> 00:02:06.930 align:start position:0%
couple of integers or something like
 

00:02:06.930 --> 00:02:08.930 align:start position:0%
couple of integers or something like
that<00:02:07.110><c> then</c><00:02:07.320><c> copying</c><00:02:07.710><c> it</c><00:02:07.829><c> is</c><00:02:08.009><c> no</c><00:02:08.250><c> big</c><00:02:08.459><c> deal</c>

00:02:08.930 --> 00:02:08.940 align:start position:0%
that then copying it is no big deal
 

00:02:08.940 --> 00:02:11.180 align:start position:0%
that then copying it is no big deal
but<00:02:09.300><c> what</c><00:02:09.479><c> if</c><00:02:09.599><c> your</c><00:02:09.750><c> object</c><00:02:09.989><c> needs</c><00:02:10.830><c> to</c><00:02:11.039><c> like</c>

00:02:11.180 --> 00:02:11.190 align:start position:0%
but what if your object needs to like
 

00:02:11.190 --> 00:02:13.100 align:start position:0%
but what if your object needs to like
heap<00:02:11.459><c> allocate</c><00:02:11.940><c> memory</c><00:02:12.150><c> or</c><00:02:12.599><c> something</c><00:02:13.020><c> like</c>

00:02:13.100 --> 00:02:13.110 align:start position:0%
heap allocate memory or something like
 

00:02:13.110 --> 00:02:13.460 align:start position:0%
heap allocate memory or something like
that

00:02:13.460 --> 00:02:13.470 align:start position:0%
that
 

00:02:13.470 --> 00:02:15.290 align:start position:0%
that
what<00:02:13.680><c> if</c><00:02:13.800><c> it's</c><00:02:13.950><c> a</c><00:02:14.040><c> string</c><00:02:14.400><c> and</c><00:02:14.730><c> if</c><00:02:14.910><c> you</c><00:02:15.000><c> need</c><00:02:15.180><c> to</c>

00:02:15.290 --> 00:02:15.300 align:start position:0%
what if it's a string and if you need to
 

00:02:15.300 --> 00:02:16.790 align:start position:0%
what if it's a string and if you need to
copy<00:02:15.510><c> it</c><00:02:15.780><c> well</c><00:02:16.080><c> you</c><00:02:16.230><c> need</c><00:02:16.380><c> to</c><00:02:16.500><c> create</c><00:02:16.740><c> a</c>

00:02:16.790 --> 00:02:16.800 align:start position:0%
copy it well you need to create a
 

00:02:16.800 --> 00:02:19.190 align:start position:0%
copy it well you need to create a
completely<00:02:17.100><c> new</c><00:02:17.190><c> heap</c><00:02:17.460><c> allocation</c><00:02:18.200><c> that's</c>

00:02:19.190 --> 00:02:19.200 align:start position:0%
completely new heap allocation that's
 

00:02:19.200 --> 00:02:21.440 align:start position:0%
completely new heap allocation that's
not<00:02:19.470><c> good</c><00:02:19.710><c> that</c><00:02:20.190><c> becomes</c><00:02:20.520><c> a</c><00:02:20.610><c> heavy</c><00:02:20.820><c> object</c><00:02:20.910><c> to</c>

00:02:21.440 --> 00:02:21.450 align:start position:0%
not good that becomes a heavy object to
 

00:02:21.450 --> 00:02:23.240 align:start position:0%
not good that becomes a heavy object to
copy<00:02:21.630><c> and</c><00:02:21.960><c> that</c><00:02:22.260><c> is</c><00:02:22.470><c> exactly</c><00:02:22.620><c> where</c><00:02:23.070><c> move</c>

00:02:23.240 --> 00:02:23.250 align:start position:0%
copy and that is exactly where move
 

00:02:23.250 --> 00:02:25.280 align:start position:0%
copy and that is exactly where move
semantics<00:02:23.730><c> comes</c><00:02:24.030><c> in</c><00:02:24.210><c> if</c><00:02:24.360><c> we</c><00:02:24.570><c> can</c><00:02:24.780><c> just</c><00:02:24.930><c> move</c>

00:02:25.280 --> 00:02:25.290 align:start position:0%
semantics comes in if we can just move
 

00:02:25.290 --> 00:02:27.260 align:start position:0%
semantics comes in if we can just move
the<00:02:25.470><c> object</c><00:02:25.920><c> instead</c><00:02:26.160><c> of</c><00:02:26.280><c> copying</c><00:02:26.730><c> it</c><00:02:26.880><c> then</c>

00:02:27.260 --> 00:02:27.270 align:start position:0%
the object instead of copying it then
 

00:02:27.270 --> 00:02:29.090 align:start position:0%
the object instead of copying it then
our<00:02:27.420><c> performance</c><00:02:27.960><c> will</c><00:02:28.260><c> be</c><00:02:28.380><c> higher</c><00:02:28.620><c> and</c><00:02:28.950><c> I</c>

00:02:29.090 --> 00:02:29.100 align:start position:0%
our performance will be higher and I
 

00:02:29.100 --> 00:02:30.620 align:start position:0%
our performance will be higher and I
promise<00:02:29.460><c> you</c><00:02:29.610><c> once</c><00:02:29.820><c> we</c><00:02:29.970><c> dive</c><00:02:30.150><c> in</c><00:02:30.330><c> and</c><00:02:30.480><c> take</c><00:02:30.600><c> a</c>

00:02:30.620 --> 00:02:30.630 align:start position:0%
promise you once we dive in and take a
 

00:02:30.630 --> 00:02:31.670 align:start position:0%
promise you once we dive in and take a
look<00:02:30.720><c> in</c><00:02:30.900><c> a</c><00:02:30.960><c> minute</c><00:02:31.200><c> you'll</c><00:02:31.290><c> see</c><00:02:31.440><c> that</c><00:02:31.530><c> this</c><00:02:31.620><c> is</c>

00:02:31.670 --> 00:02:31.680 align:start position:0%
look in a minute you'll see that this is
 

00:02:31.680 --> 00:02:33.620 align:start position:0%
look in a minute you'll see that this is
not<00:02:32.010><c> nearly</c><00:02:32.280><c> as</c><00:02:32.430><c> difficult</c><00:02:32.640><c> as</c><00:02:33.090><c> it</c><00:02:33.270><c> might</c><00:02:33.420><c> seem</c>

00:02:33.620 --> 00:02:33.630 align:start position:0%
not nearly as difficult as it might seem
 

00:02:33.630 --> 00:02:35.770 align:start position:0%
not nearly as difficult as it might seem
but<00:02:33.840><c> first</c><00:02:34.080><c> this</c><00:02:34.620><c> video</c><00:02:34.950><c> is</c><00:02:35.250><c> sponsored</c><00:02:35.370><c> by</c>

00:02:35.770 --> 00:02:35.780 align:start position:0%
but first this video is sponsored by
 

00:02:35.780 --> 00:02:37.550 align:start position:0%
but first this video is sponsored by
Skillshare<00:02:36.840><c> for</c><00:02:37.050><c> those</c><00:02:37.140><c> of</c><00:02:37.230><c> you</c><00:02:37.320><c> who</c><00:02:37.380><c> don't</c>

00:02:37.550 --> 00:02:37.560 align:start position:0%
Skillshare for those of you who don't
 

00:02:37.560 --> 00:02:39.260 align:start position:0%
Skillshare for those of you who don't
know<00:02:37.620><c> what</c><00:02:37.770><c> Skillshare</c><00:02:38.220><c> Skillshare</c><00:02:39.000><c> is</c><00:02:39.120><c> an</c>

00:02:39.260 --> 00:02:39.270 align:start position:0%
know what Skillshare Skillshare is an
 

00:02:39.270 --> 00:02:41.390 align:start position:0%
know what Skillshare Skillshare is an
online<00:02:39.570><c> learning</c><00:02:39.750><c> community</c><00:02:40.380><c> where</c><00:02:40.620><c> millions</c>

00:02:41.390 --> 00:02:41.400 align:start position:0%
online learning community where millions
 

00:02:41.400 --> 00:02:42.830 align:start position:0%
online learning community where millions
of<00:02:41.580><c> creative</c><00:02:41.970><c> and</c><00:02:42.090><c> curious</c><00:02:42.300><c> people</c><00:02:42.360><c> can</c><00:02:42.690><c> come</c>

00:02:42.830 --> 00:02:42.840 align:start position:0%
of creative and curious people can come
 

00:02:42.840 --> 00:02:44.810 align:start position:0%
of creative and curious people can come
together<00:02:43.050><c> to</c><00:02:43.680><c> take</c><00:02:43.800><c> the</c><00:02:43.920><c> next</c><00:02:44.190><c> step</c><00:02:44.400><c> in</c><00:02:44.610><c> their</c>

00:02:44.810 --> 00:02:44.820 align:start position:0%
together to take the next step in their
 

00:02:44.820 --> 00:02:46.790 align:start position:0%
together to take the next step in their
creative<00:02:45.300><c> journey</c><00:02:45.660><c> they've</c><00:02:46.050><c> got</c><00:02:46.230><c> thousands</c>

00:02:46.790 --> 00:02:46.800 align:start position:0%
creative journey they've got thousands
 

00:02:46.800 --> 00:02:48.650 align:start position:0%
creative journey they've got thousands
of<00:02:46.890><c> amazing</c><00:02:47.190><c> classes</c><00:02:47.910><c> for</c><00:02:48.090><c> you</c><00:02:48.150><c> guys</c><00:02:48.300><c> to</c><00:02:48.450><c> check</c>

00:02:48.650 --> 00:02:48.660 align:start position:0%
of amazing classes for you guys to check
 

00:02:48.660 --> 00:02:50.150 align:start position:0%
of amazing classes for you guys to check
out<00:02:48.810><c> and</c><00:02:49.020><c> the</c><00:02:49.080><c> best</c><00:02:49.320><c> thing</c><00:02:49.500><c> is</c><00:02:49.620><c> they're</c><00:02:49.920><c> so</c>

00:02:50.150 --> 00:02:50.160 align:start position:0%
out and the best thing is they're so
 

00:02:50.160 --> 00:02:52.910 align:start position:0%
out and the best thing is they're so
small<00:02:50.610><c> and</c><00:02:50.670><c> bite-sized</c><00:02:51.450><c> and</c><00:02:51.750><c> efficient</c><00:02:52.440><c> that</c>

00:02:52.910 --> 00:02:52.920 align:start position:0%
small and bite-sized and efficient that
 

00:02:52.920 --> 00:02:54.920 align:start position:0%
small and bite-sized and efficient that
even<00:02:53.400><c> if</c><00:02:53.490><c> you're</c><00:02:53.640><c> super</c><00:02:54.090><c> busy</c><00:02:54.120><c> like</c><00:02:54.570><c> I</c><00:02:54.780><c> am</c>

00:02:54.920 --> 00:02:54.930 align:start position:0%
even if you're super busy like I am
 

00:02:54.930 --> 00:02:56.900 align:start position:0%
even if you're super busy like I am
you'll<00:02:55.320><c> still</c><00:02:55.650><c> find</c><00:02:55.860><c> the</c><00:02:56.040><c> time</c><00:02:56.070><c> to</c><00:02:56.730><c> learn</c>

00:02:56.900 --> 00:02:56.910 align:start position:0%
you'll still find the time to learn
 

00:02:56.910 --> 00:02:58.670 align:start position:0%
you'll still find the time to learn
something<00:02:57.390><c> new</c><00:02:57.600><c> which</c><00:02:57.870><c> of</c><00:02:58.020><c> course</c><00:02:58.050><c> is</c><00:02:58.440><c> always</c>

00:02:58.670 --> 00:02:58.680 align:start position:0%
something new which of course is always
 

00:02:58.680 --> 00:03:00.740 align:start position:0%
something new which of course is always
important<00:02:59.430><c> some</c><00:02:59.760><c> of</c><00:02:59.850><c> my</c><00:02:59.970><c> personal</c><00:03:00.360><c> favorite</c>

00:03:00.740 --> 00:03:00.750 align:start position:0%
important some of my personal favorite
 

00:03:00.750 --> 00:03:02.480 align:start position:0%
important some of my personal favorite
classes<00:03:01.140><c> on</c><00:03:01.320><c> Skillshare</c><00:03:01.740><c> are</c><00:03:02.190><c> the</c>

00:03:02.480 --> 00:03:02.490 align:start position:0%
classes on Skillshare are the
 

00:03:02.490 --> 00:03:05.210 align:start position:0%
classes on Skillshare are the
illustration<00:03:03.300><c> and</c><00:03:03.510><c> art</c><00:03:03.780><c> related</c><00:03:04.320><c> classes</c><00:03:05.010><c> but</c>

00:03:05.210 --> 00:03:05.220 align:start position:0%
illustration and art related classes but
 

00:03:05.220 --> 00:03:06.590 align:start position:0%
illustration and art related classes but
recently<00:03:05.550><c> I</c><00:03:05.640><c> found</c><00:03:05.850><c> that</c><00:03:05.970><c> they</c><00:03:06.090><c> also</c><00:03:06.240><c> have</c><00:03:06.570><c> a</c>

00:03:06.590 --> 00:03:06.600 align:start position:0%
recently I found that they also have a
 

00:03:06.600 --> 00:03:08.930 align:start position:0%
recently I found that they also have a
number<00:03:07.110><c> of</c><00:03:07.230><c> excellent</c><00:03:07.650><c> productivity</c><00:03:08.550><c> related</c>

00:03:08.930 --> 00:03:08.940 align:start position:0%
number of excellent productivity related
 

00:03:08.940 --> 00:03:11.090 align:start position:0%
number of excellent productivity related
classes<00:03:09.360><c> and</c><00:03:09.750><c> I</c><00:03:09.810><c> think</c><00:03:10.080><c> that</c><00:03:10.290><c> boosting</c><00:03:11.070><c> your</c>

00:03:11.090 --> 00:03:11.100 align:start position:0%
classes and I think that boosting your
 

00:03:11.100 --> 00:03:13.250 align:start position:0%
classes and I think that boosting your
productivity<00:03:11.640><c> is</c><00:03:11.880><c> both</c><00:03:12.450><c> one</c><00:03:12.690><c> of</c><00:03:12.780><c> the</c><00:03:12.870><c> hardest</c>

00:03:13.250 --> 00:03:13.260 align:start position:0%
productivity is both one of the hardest
 

00:03:13.260 --> 00:03:14.930 align:start position:0%
productivity is both one of the hardest
and<00:03:13.410><c> most</c><00:03:13.680><c> rewarding</c><00:03:14.160><c> things</c><00:03:14.400><c> to</c><00:03:14.550><c> do</c><00:03:14.700><c> so</c>

00:03:14.930 --> 00:03:14.940 align:start position:0%
and most rewarding things to do so
 

00:03:14.940 --> 00:03:16.520 align:start position:0%
and most rewarding things to do so
definitely<00:03:15.240><c> check</c><00:03:15.300><c> them</c><00:03:15.630><c> out</c><00:03:15.720><c> and</c><00:03:16.020><c> starting</c>

00:03:16.520 --> 00:03:16.530 align:start position:0%
definitely check them out and starting
 

00:03:16.530 --> 00:03:18.800 align:start position:0%
definitely check them out and starting
at<00:03:16.709><c> less</c><00:03:17.040><c> than</c><00:03:17.250><c> $10</c><00:03:17.940><c> per</c><00:03:17.970><c> month</c><00:03:18.150><c> for</c><00:03:18.600><c> an</c><00:03:18.660><c> annual</c>

00:03:18.800 --> 00:03:18.810 align:start position:0%
at less than $10 per month for an annual
 

00:03:18.810 --> 00:03:20.720 align:start position:0%
at less than $10 per month for an annual
subscription<00:03:19.530><c> I</c><00:03:19.680><c> think</c><00:03:20.160><c> it's</c><00:03:20.280><c> really</c><00:03:20.459><c> great</c>

00:03:20.720 --> 00:03:20.730 align:start position:0%
subscription I think it's really great
 

00:03:20.730 --> 00:03:22.310 align:start position:0%
subscription I think it's really great
value<00:03:20.970><c> but</c><00:03:21.390><c> if</c><00:03:21.480><c> you</c><00:03:21.570><c> guys</c><00:03:21.720><c> want</c><00:03:21.989><c> to</c><00:03:22.050><c> check</c><00:03:22.080><c> out</c>

00:03:22.310 --> 00:03:22.320 align:start position:0%
value but if you guys want to check out
 

00:03:22.320 --> 00:03:24.440 align:start position:0%
value but if you guys want to check out
a<00:03:22.530><c> two</c><00:03:22.590><c> month</c><00:03:22.980><c> free</c><00:03:23.280><c> trial</c><00:03:23.640><c> then</c><00:03:23.940><c> you</c><00:03:24.060><c> can</c><00:03:24.269><c> by</c>

00:03:24.440 --> 00:03:24.450 align:start position:0%
a two month free trial then you can by
 

00:03:24.450 --> 00:03:25.699 align:start position:0%
a two month free trial then you can by
clicking<00:03:24.510><c> a</c><00:03:24.810><c> link</c><00:03:24.989><c> in</c><00:03:25.200><c> description</c><00:03:25.680><c> below</c>

00:03:25.699 --> 00:03:25.709 align:start position:0%
clicking a link in description below
 

00:03:25.709 --> 00:03:28.070 align:start position:0%
clicking a link in description below
huge<00:03:26.459><c> thank</c><00:03:26.670><c> you</c><00:03:26.730><c> again</c><00:03:26.850><c> to</c><00:03:27.000><c> Skillshare</c><00:03:27.540><c> for</c>

00:03:28.070 --> 00:03:28.080 align:start position:0%
huge thank you again to Skillshare for
 

00:03:28.080 --> 00:03:29.270 align:start position:0%
huge thank you again to Skillshare for
sponsoring<00:03:28.530><c> this</c><00:03:28.890><c> video</c>

00:03:29.270 --> 00:03:29.280 align:start position:0%
sponsoring this video
 

00:03:29.280 --> 00:03:31.100 align:start position:0%
sponsoring this video
sir<00:03:29.550><c> move</c><00:03:29.910><c> semantics</c><00:03:30.450><c> let's</c><00:03:30.690><c> dive</c><00:03:30.900><c> in</c><00:03:31.080><c> and</c>

00:03:31.100 --> 00:03:31.110 align:start position:0%
sir move semantics let's dive in and
 

00:03:31.110 --> 00:03:32.780 align:start position:0%
sir move semantics let's dive in and
take<00:03:31.410><c> a</c><00:03:31.470><c> look</c><00:03:31.769><c> at</c><00:03:31.950><c> what</c><00:03:32.160><c> all</c><00:03:32.370><c> the</c><00:03:32.550><c> fuss</c><00:03:32.730><c> is</c>

00:03:32.780 --> 00:03:32.790 align:start position:0%
take a look at what all the fuss is
 

00:03:32.790 --> 00:03:34.850 align:start position:0%
take a look at what all the fuss is
about<00:03:33.030><c> let's</c><00:03:33.660><c> write</c><00:03:33.840><c> a</c><00:03:33.870><c> class</c><00:03:34.200><c> that's</c><00:03:34.590><c> going</c>

00:03:34.850 --> 00:03:34.860 align:start position:0%
about let's write a class that's going
 

00:03:34.860 --> 00:03:36.970 align:start position:0%
about let's write a class that's going
to<00:03:35.130><c> serve</c><00:03:35.670><c> as</c><00:03:35.940><c> an</c><00:03:36.090><c> example</c><00:03:36.209><c> to</c><00:03:36.840><c> demonstrate</c>

00:03:36.970 --> 00:03:36.980 align:start position:0%
to serve as an example to demonstrate
 

00:03:36.980 --> 00:03:39.560 align:start position:0%
to serve as an example to demonstrate
why<00:03:37.980><c> exactly</c><00:03:38.190><c> we</c><00:03:38.790><c> might</c><00:03:39.030><c> want</c><00:03:39.239><c> to</c><00:03:39.300><c> move</c>

00:03:39.560 --> 00:03:39.570 align:start position:0%
why exactly we might want to move
 

00:03:39.570 --> 00:03:41.120 align:start position:0%
why exactly we might want to move
something<00:03:39.870><c> so</c><00:03:40.200><c> I'm</c><00:03:40.260><c> just</c><00:03:40.410><c> going</c><00:03:40.590><c> to</c><00:03:40.650><c> write</c><00:03:40.920><c> a</c>

00:03:41.120 --> 00:03:41.130 align:start position:0%
something so I'm just going to write a
 

00:03:41.130 --> 00:03:43.460 align:start position:0%
something so I'm just going to write a
very<00:03:41.400><c> basic</c><00:03:42.120><c> string</c><00:03:42.600><c> class</c><00:03:42.780><c> that</c><00:03:43.110><c> might</c><00:03:43.320><c> look</c>

00:03:43.460 --> 00:03:43.470 align:start position:0%
very basic string class that might look
 

00:03:43.470 --> 00:03:44.840 align:start position:0%
very basic string class that might look
something<00:03:43.650><c> like</c><00:03:43.860><c> this</c><00:03:44.130><c> this</c><00:03:44.340><c> is</c><00:03:44.400><c> not</c><00:03:44.519><c> by</c><00:03:44.820><c> any</c>

00:03:44.840 --> 00:03:44.850 align:start position:0%
something like this this is not by any
 

00:03:44.850 --> 00:03:46.970 align:start position:0%
something like this this is not by any
means<00:03:45.090><c> going</c><00:03:45.570><c> to</c><00:03:45.810><c> be</c><00:03:45.959><c> like</c><00:03:46.290><c> a</c><00:03:46.500><c> proper</c><00:03:46.830><c> way</c><00:03:46.950><c> to</c>

00:03:46.970 --> 00:03:46.980 align:start position:0%
means going to be like a proper way to
 

00:03:46.980 --> 00:03:48.229 align:start position:0%
means going to be like a proper way to
write<00:03:47.220><c> a</c><00:03:47.250><c> string</c><00:03:47.459><c> class</c><00:03:47.670><c> in</c><00:03:47.880><c> fact</c><00:03:48.030><c> I</c><00:03:48.120><c> might</c>

00:03:48.229 --> 00:03:48.239 align:start position:0%
write a string class in fact I might
 

00:03:48.239 --> 00:03:49.940 align:start position:0%
write a string class in fact I might
make<00:03:48.390><c> a</c><00:03:48.420><c> video</c><00:03:48.720><c> on</c><00:03:48.780><c> that</c><00:03:48.989><c> sometime</c><00:03:49.709><c> in</c><00:03:49.739><c> the</c>

00:03:49.940 --> 00:03:49.950 align:start position:0%
make a video on that sometime in the
 

00:03:49.950 --> 00:03:51.500 align:start position:0%
make a video on that sometime in the
future<00:03:50.040><c> but</c><00:03:50.430><c> let's</c><00:03:50.820><c> just</c><00:03:50.940><c> say</c><00:03:51.060><c> that</c><00:03:51.090><c> we</c><00:03:51.299><c> have</c><00:03:51.480><c> a</c>

00:03:51.500 --> 00:03:51.510 align:start position:0%
future but let's just say that we have a
 

00:03:51.510 --> 00:03:53.840 align:start position:0%
future but let's just say that we have a
class<00:03:51.810><c> which</c><00:03:52.110><c> has</c><00:03:52.320><c> a</c><00:03:52.530><c> char</c><00:03:53.100><c> pointer</c><00:03:53.459><c> of</c><00:03:53.580><c> data</c>

00:03:53.840 --> 00:03:53.850 align:start position:0%
class which has a char pointer of data
 

00:03:53.850 --> 00:03:55.820 align:start position:0%
class which has a char pointer of data
as<00:03:54.120><c> well</c><00:03:54.299><c> as</c><00:03:54.360><c> some</c><00:03:54.570><c> kind</c><00:03:54.959><c> of</c><00:03:55.049><c> size</c><00:03:55.260><c> this</c><00:03:55.470><c> is</c><00:03:55.530><c> our</c>

00:03:55.820 --> 00:03:55.830 align:start position:0%
as well as some kind of size this is our
 

00:03:55.830 --> 00:03:57.740 align:start position:0%
as well as some kind of size this is our
actual<00:03:56.160><c> string</c><00:03:56.430><c> data</c><00:03:56.640><c> so</c><00:03:57.150><c> what</c><00:03:57.299><c> we</c><00:03:57.390><c> want</c><00:03:57.540><c> to</c><00:03:57.630><c> do</c>

00:03:57.740 --> 00:03:57.750 align:start position:0%
actual string data so what we want to do
 

00:03:57.750 --> 00:03:59.539 align:start position:0%
actual string data so what we want to do
here<00:03:57.989><c> when</c><00:03:58.140><c> we</c><00:03:58.260><c> take</c><00:03:58.470><c> in</c><00:03:58.620><c> a</c><00:03:58.680><c> Const</c><00:03:59.010><c> our</c><00:03:59.190><c> pointer</c>

00:03:59.539 --> 00:03:59.549 align:start position:0%
here when we take in a Const our pointer
 

00:03:59.549 --> 00:04:02.090 align:start position:0%
here when we take in a Const our pointer
like<00:03:59.700><c> this</c><00:03:59.970><c> is</c><00:04:00.510><c> essentially</c><00:04:01.140><c> set</c><00:04:01.380><c> the</c><00:04:01.530><c> size</c><00:04:01.769><c> to</c>

00:04:02.090 --> 00:04:02.100 align:start position:0%
like this is essentially set the size to
 

00:04:02.100 --> 00:04:04.460 align:start position:0%
like this is essentially set the size to
be<00:04:02.670><c> the</c><00:04:02.850><c> string</c><00:04:03.150><c> length</c><00:04:03.360><c> so</c><00:04:03.840><c> whatever</c><00:04:04.170><c> the</c>

00:04:04.460 --> 00:04:04.470 align:start position:0%
be the string length so whatever the
 

00:04:04.470 --> 00:04:06.020 align:start position:0%
be the string length so whatever the
length<00:04:04.620><c> of</c><00:04:04.830><c> this</c><00:04:04.920><c> string</c><00:04:05.070><c> is</c><00:04:05.459><c> that's</c><00:04:05.730><c> how</c><00:04:05.850><c> many</c>

00:04:06.020 --> 00:04:06.030 align:start position:0%
length of this string is that's how many
 

00:04:06.030 --> 00:04:07.759 align:start position:0%
length of this string is that's how many
characters<00:04:06.299><c> we</c><00:04:06.540><c> might</c><00:04:06.720><c> want</c><00:04:06.959><c> we</c><00:04:07.530><c> probably</c>

00:04:07.759 --> 00:04:07.769 align:start position:0%
characters we might want we probably
 

00:04:07.769 --> 00:04:09.289 align:start position:0%
characters we might want we probably
want<00:04:08.130><c> a</c><00:04:08.160><c> null</c><00:04:08.340><c> termination</c><00:04:08.730><c> character</c><00:04:09.209><c> as</c>

00:04:09.289 --> 00:04:09.299 align:start position:0%
want a null termination character as
 

00:04:09.299 --> 00:04:10.729 align:start position:0%
want a null termination character as
well<00:04:09.450><c> but</c><00:04:09.690><c> we'll</c><00:04:09.930><c> just</c><00:04:09.959><c> skip</c><00:04:10.260><c> that</c><00:04:10.500><c> for</c><00:04:10.680><c> the</c>

00:04:10.729 --> 00:04:10.739 align:start position:0%
well but we'll just skip that for the
 

00:04:10.739 --> 00:04:12.410 align:start position:0%
well but we'll just skip that for the
purposes<00:04:11.100><c> of</c><00:04:11.160><c> this</c><00:04:11.370><c> example</c><00:04:11.549><c> because</c><00:04:12.000><c> again</c>

00:04:12.410 --> 00:04:12.420 align:start position:0%
purposes of this example because again
 

00:04:12.420 --> 00:04:14.390 align:start position:0%
purposes of this example because again
this<00:04:12.540><c> is</c><00:04:12.690><c> about</c><00:04:12.840><c> move</c><00:04:13.200><c> semantics</c><00:04:13.709><c> and</c><00:04:14.010><c> not</c>

00:04:14.390 --> 00:04:14.400 align:start position:0%
this is about move semantics and not
 

00:04:14.400 --> 00:04:15.590 align:start position:0%
this is about move semantics and not
necessarily<00:04:14.910><c> about</c><00:04:14.970><c> how</c><00:04:15.150><c> to</c><00:04:15.209><c> write</c><00:04:15.360><c> a</c><00:04:15.420><c> proper</c>

00:04:15.590 --> 00:04:15.600 align:start position:0%
necessarily about how to write a proper
 

00:04:15.600 --> 00:04:17.360 align:start position:0%
necessarily about how to write a proper
string<00:04:15.930><c> class</c><00:04:16.140><c> and</c><00:04:16.530><c> then</c><00:04:16.859><c> into</c><00:04:17.070><c> here</c><00:04:17.250><c> I'll</c>

00:04:17.360 --> 00:04:17.370 align:start position:0%
string class and then into here I'll
 

00:04:17.370 --> 00:04:19.550 align:start position:0%
string class and then into here I'll
just<00:04:17.400><c> do</c><00:04:17.609><c> a</c><00:04:17.640><c> basic</c><00:04:17.910><c> mem</c><00:04:18.209><c> copy</c><00:04:18.390><c> to</c><00:04:19.019><c> move</c><00:04:19.260><c> all</c><00:04:19.530><c> of</c>

00:04:19.550 --> 00:04:19.560 align:start position:0%
just do a basic mem copy to move all of
 

00:04:19.560 --> 00:04:21.320 align:start position:0%
just do a basic mem copy to move all of
the<00:04:19.739><c> data</c><00:04:19.919><c> in</c><00:04:20.190><c> from</c><00:04:20.459><c> the</c><00:04:20.580><c> source</c><00:04:20.850><c> string</c><00:04:21.090><c> here</c>

00:04:21.320 --> 00:04:21.330 align:start position:0%
the data in from the source string here
 

00:04:21.330 --> 00:04:24.529 align:start position:0%
the data in from the source string here
into<00:04:22.289><c> our</c><00:04:22.590><c> data</c><00:04:23.160><c> buffer</c><00:04:23.940><c> so</c><00:04:24.150><c> now</c><00:04:24.270><c> that</c><00:04:24.330><c> we</c><00:04:24.510><c> have</c>

00:04:24.529 --> 00:04:24.539 align:start position:0%
into our data buffer so now that we have
 

00:04:24.539 --> 00:04:26.480 align:start position:0%
into our data buffer so now that we have
that<00:04:24.990><c> and</c><00:04:25.169><c> I'll</c><00:04:25.260><c> actually</c><00:04:25.380><c> just</c><00:04:25.590><c> add</c><00:04:25.830><c> a</c><00:04:25.860><c> printf</c>

00:04:26.480 --> 00:04:26.490 align:start position:0%
that and I'll actually just add a printf
 

00:04:26.490 --> 00:04:27.440 align:start position:0%
that and I'll actually just add a printf
here<00:04:26.820><c> we</c>

00:04:27.440 --> 00:04:27.450 align:start position:0%
here we
 

00:04:27.450 --> 00:04:29.390 align:start position:0%
here we
just<00:04:27.900><c> says</c><00:04:28.140><c> created</c><00:04:28.770><c> just</c><00:04:28.950><c> so</c><00:04:29.040><c> that</c><00:04:29.160><c> we</c><00:04:29.250><c> can</c>

00:04:29.390 --> 00:04:29.400 align:start position:0%
just says created just so that we can
 

00:04:29.400 --> 00:04:32.420 align:start position:0%
just says created just so that we can
later<00:04:29.610><c> visualize</c><00:04:30.180><c> our</c><00:04:30.930><c> kind</c><00:04:31.290><c> of</c><00:04:31.410><c> code</c><00:04:31.860><c> flow</c><00:04:32.130><c> so</c>

00:04:32.420 --> 00:04:32.430 align:start position:0%
later visualize our kind of code flow so
 

00:04:32.430 --> 00:04:34.430 align:start position:0%
later visualize our kind of code flow so
we<00:04:32.460><c> have</c><00:04:32.760><c> a</c><00:04:32.940><c> basic</c><00:04:33.510><c> constructor</c><00:04:34.140><c> here</c><00:04:34.290><c> that</c>

00:04:34.430 --> 00:04:34.440 align:start position:0%
we have a basic constructor here that
 

00:04:34.440 --> 00:04:35.930 align:start position:0%
we have a basic constructor here that
takes<00:04:34.620><c> in</c><00:04:34.770><c> a</c><00:04:34.830><c> string</c><00:04:34.860><c> and</c><00:04:35.340><c> allocates</c><00:04:35.760><c> memory</c>

00:04:35.930 --> 00:04:35.940 align:start position:0%
takes in a string and allocates memory
 

00:04:35.940 --> 00:04:37.700 align:start position:0%
takes in a string and allocates memory
and<00:04:36.330><c> copies</c><00:04:36.630><c> everything</c><00:04:36.870><c> into</c><00:04:37.380><c> that</c><00:04:37.530><c> memory</c>

00:04:37.700 --> 00:04:37.710 align:start position:0%
and copies everything into that memory
 

00:04:37.710 --> 00:04:39.770 align:start position:0%
and copies everything into that memory
buffer<00:04:38.220><c> now</c><00:04:38.430><c> inside</c><00:04:39.030><c> the</c><00:04:39.210><c> destructor</c><00:04:39.660><c> we</c>

00:04:39.770 --> 00:04:39.780 align:start position:0%
buffer now inside the destructor we
 

00:04:39.780 --> 00:04:41.690 align:start position:0%
buffer now inside the destructor we
might<00:04:39.900><c> have</c><00:04:40.080><c> something</c><00:04:40.320><c> fairly</c><00:04:41.130><c> simple</c><00:04:41.550><c> to</c>

00:04:41.690 --> 00:04:41.700 align:start position:0%
might have something fairly simple to
 

00:04:41.700 --> 00:04:43.790 align:start position:0%
might have something fairly simple to
just<00:04:41.730><c> simply</c><00:04:42.240><c> deletes</c><00:04:42.600><c> the</c><00:04:42.810><c> data</c><00:04:43.020><c> and</c><00:04:43.320><c> that's</c>

00:04:43.790 --> 00:04:43.800 align:start position:0%
just simply deletes the data and that's
 

00:04:43.800 --> 00:04:46.100 align:start position:0%
just simply deletes the data and that's
that's<00:04:44.280><c> about</c><00:04:44.460><c> it</c><00:04:44.790><c> that's</c><00:04:45.120><c> our</c><00:04:45.420><c> basic</c><00:04:45.660><c> string</c>

00:04:46.100 --> 00:04:46.110 align:start position:0%
that's about it that's our basic string
 

00:04:46.110 --> 00:04:47.960 align:start position:0%
that's about it that's our basic string
class<00:04:46.320><c> now</c><00:04:46.740><c> let's</c><00:04:46.950><c> write</c><00:04:47.130><c> some</c><00:04:47.460><c> other</c><00:04:47.700><c> class</c>

00:04:47.960 --> 00:04:47.970 align:start position:0%
class now let's write some other class
 

00:04:47.970 --> 00:04:50.330 align:start position:0%
class now let's write some other class
for<00:04:48.360><c> example</c><00:04:48.780><c> maybe</c><00:04:49.320><c> I'll</c><00:04:49.560><c> call</c><00:04:49.740><c> it</c><00:04:49.890><c> entity</c>

00:04:50.330 --> 00:04:50.340 align:start position:0%
for example maybe I'll call it entity
 

00:04:50.340 --> 00:04:52.310 align:start position:0%
for example maybe I'll call it entity
that's<00:04:50.910><c> basically</c><00:04:51.270><c> just</c><00:04:51.480><c> going</c><00:04:51.660><c> to</c><00:04:51.750><c> consume</c>

00:04:52.310 --> 00:04:52.320 align:start position:0%
that's basically just going to consume
 

00:04:52.320 --> 00:04:55.190 align:start position:0%
that's basically just going to consume
our<00:04:52.650><c> string</c><00:04:53.160><c> so</c><00:04:53.850><c> inside</c><00:04:54.150><c> the</c><00:04:54.270><c> entity</c><00:04:54.660><c> class</c><00:04:54.780><c> I</c>

00:04:55.190 --> 00:04:55.200 align:start position:0%
our string so inside the entity class I
 

00:04:55.200 --> 00:04:57.620 align:start position:0%
our string so inside the entity class I
might<00:04:55.590><c> just</c><00:04:55.800><c> have</c><00:04:55.920><c> like</c><00:04:56.100><c> a</c><00:04:56.130><c> standard</c><00:04:57.000><c> kind</c><00:04:57.450><c> of</c>

00:04:57.620 --> 00:04:57.630 align:start position:0%
might just have like a standard kind of
 

00:04:57.630 --> 00:04:59.750 align:start position:0%
might just have like a standard kind of
con<00:04:57.870><c> string</c><00:04:58.500><c> reference</c><00:04:58.920><c> here</c><00:04:59.220><c> maybe</c><00:04:59.580><c> this</c>

00:04:59.750 --> 00:04:59.760 align:start position:0%
con string reference here maybe this
 

00:04:59.760 --> 00:05:01.820 align:start position:0%
con string reference here maybe this
will<00:04:59.910><c> be</c><00:05:00.030><c> like</c><00:05:00.210><c> the</c><00:05:00.390><c> name</c><00:05:00.630><c> of</c><00:05:00.930><c> our</c><00:05:01.080><c> entity</c><00:05:01.590><c> and</c>

00:05:01.820 --> 00:05:01.830 align:start position:0%
will be like the name of our entity and
 

00:05:01.830 --> 00:05:03.260 align:start position:0%
will be like the name of our entity and
then<00:05:01.920><c> obviously</c><00:05:02.040><c> we</c><00:05:02.430><c> will</c><00:05:02.580><c> store</c><00:05:02.880><c> this</c><00:05:03.090><c> so</c>

00:05:03.260 --> 00:05:03.270 align:start position:0%
then obviously we will store this so
 

00:05:03.270 --> 00:05:05.660 align:start position:0%
then obviously we will store this so
I'll<00:05:03.390><c> just</c><00:05:03.510><c> write</c><00:05:03.690><c> string</c><00:05:04.110><c> m</c><00:05:04.440><c> name</c><00:05:04.980><c> here</c><00:05:05.490><c> and</c>

00:05:05.660 --> 00:05:05.670 align:start position:0%
I'll just write string m name here and
 

00:05:05.670 --> 00:05:08.780 align:start position:0%
I'll just write string m name here and
then<00:05:06.060><c> I</c><00:05:06.330><c> will</c><00:05:06.570><c> simply</c><00:05:06.980><c> just</c><00:05:07.980><c> assign</c><00:05:08.490><c> it</c><00:05:08.640><c> like</c>

00:05:08.780 --> 00:05:08.790 align:start position:0%
then I will simply just assign it like
 

00:05:08.790 --> 00:05:10.910 align:start position:0%
then I will simply just assign it like
this<00:05:09.060><c> so</c><00:05:09.660><c> at</c><00:05:09.900><c> the</c><00:05:10.050><c> moment</c><00:05:10.230><c> for</c><00:05:10.590><c> this</c><00:05:10.740><c> to</c>

00:05:10.910 --> 00:05:10.920 align:start position:0%
this so at the moment for this to
 

00:05:10.920 --> 00:05:12.830 align:start position:0%
this so at the moment for this to
actually<00:05:11.040><c> work</c><00:05:11.310><c> properly</c><00:05:11.790><c> we</c><00:05:12.210><c> need</c><00:05:12.240><c> to</c><00:05:12.450><c> write</c>

00:05:12.830 --> 00:05:12.840 align:start position:0%
actually work properly we need to write
 

00:05:12.840 --> 00:05:15.470 align:start position:0%
actually work properly we need to write
a<00:05:13.020><c> copy</c><00:05:13.260><c> constructor</c><00:05:13.920><c> because</c><00:05:14.400><c> if</c><00:05:14.880><c> we</c><00:05:15.060><c> just</c>

00:05:15.470 --> 00:05:15.480 align:start position:0%
a copy constructor because if we just
 

00:05:15.480 --> 00:05:17.690 align:start position:0%
a copy constructor because if we just
simply<00:05:15.960><c> create</c><00:05:16.260><c> a</c><00:05:16.290><c> string</c><00:05:16.620><c> over</c><00:05:16.740><c> here</c><00:05:17.100><c> or</c><00:05:17.550><c> in</c>

00:05:17.690 --> 00:05:17.700 align:start position:0%
simply create a string over here or in
 

00:05:17.700 --> 00:05:19.370 align:start position:0%
simply create a string over here or in
fact<00:05:17.910><c> let's</c><00:05:18.180><c> go</c><00:05:18.330><c> the</c><00:05:18.480><c> easy</c><00:05:18.660><c> whale</c><00:05:18.990><c> to</c><00:05:19.200><c> say</c>

00:05:19.370 --> 00:05:19.380 align:start position:0%
fact let's go the easy whale to say
 

00:05:19.380 --> 00:05:21.500 align:start position:0%
fact let's go the easy whale to say
entity<00:05:19.860><c> entity</c><00:05:20.520><c> and</c><00:05:20.790><c> then</c><00:05:20.910><c> maybe</c><00:05:21.180><c> call</c><00:05:21.480><c> it</c>

00:05:21.500 --> 00:05:21.510 align:start position:0%
entity entity and then maybe call it
 

00:05:21.510 --> 00:05:23.510 align:start position:0%
entity entity and then maybe call it
churner<00:05:21.840><c> like</c><00:05:22.110><c> this</c><00:05:22.410><c> and</c><00:05:22.710><c> we're</c><00:05:23.190><c> using</c><00:05:23.340><c> the</c>

00:05:23.510 --> 00:05:23.520 align:start position:0%
churner like this and we're using the
 

00:05:23.520 --> 00:05:25.160 align:start position:0%
churner like this and we're using the
implicit<00:05:23.850><c> constructor</c><00:05:24.450><c> here</c><00:05:24.630><c> so</c><00:05:24.840><c> really</c>

00:05:25.160 --> 00:05:25.170 align:start position:0%
implicit constructor here so really
 

00:05:25.170 --> 00:05:26.330 align:start position:0%
implicit constructor here so really
what's<00:05:25.320><c> happening</c><00:05:25.680><c> is</c><00:05:25.770><c> that</c><00:05:25.980><c> and</c><00:05:26.160><c> I</c><00:05:26.190><c> might</c>

00:05:26.330 --> 00:05:26.340 align:start position:0%
what's happening is that and I might
 

00:05:26.340 --> 00:05:27.650 align:start position:0%
what's happening is that and I might
leave<00:05:26.520><c> it</c><00:05:26.670><c> like</c><00:05:26.760><c> that</c><00:05:26.790><c> for</c><00:05:26.970><c> clarity</c><00:05:27.240><c> but</c>

00:05:27.650 --> 00:05:27.660 align:start position:0%
leave it like that for clarity but
 

00:05:27.660 --> 00:05:29.510 align:start position:0%
leave it like that for clarity but
basically<00:05:28.500><c> if</c><00:05:28.590><c> we're</c><00:05:28.770><c> if</c><00:05:28.950><c> we</c><00:05:29.070><c> just</c><00:05:29.220><c> have</c><00:05:29.370><c> some</c>

00:05:29.510 --> 00:05:29.520 align:start position:0%
basically if we're if we just have some
 

00:05:29.520 --> 00:05:31.040 align:start position:0%
basically if we're if we just have some
code<00:05:29.700><c> like</c><00:05:29.880><c> this</c><00:05:30.060><c> we</c><00:05:30.360><c> still</c><00:05:30.570><c> need</c><00:05:30.690><c> some</c><00:05:30.870><c> way</c><00:05:31.020><c> of</c>

00:05:31.040 --> 00:05:31.050 align:start position:0%
code like this we still need some way of
 

00:05:31.050 --> 00:05:33.230 align:start position:0%
code like this we still need some way of
copying<00:05:31.320><c> this</c><00:05:31.590><c> string</c><00:05:31.950><c> into</c><00:05:32.400><c> this</c><00:05:32.640><c> string</c><00:05:33.060><c> and</c>

00:05:33.230 --> 00:05:33.240 align:start position:0%
copying this string into this string and
 

00:05:33.240 --> 00:05:34.910 align:start position:0%
copying this string into this string and
so<00:05:33.450><c> we</c><00:05:33.570><c> need</c><00:05:33.720><c> a</c><00:05:33.750><c> copy</c><00:05:33.990><c> constructor</c><00:05:34.590><c> so</c><00:05:34.770><c> what</c>

00:05:34.910 --> 00:05:34.920 align:start position:0%
so we need a copy constructor so what
 

00:05:34.920 --> 00:05:36.530 align:start position:0%
so we need a copy constructor so what
I'll<00:05:35.010><c> do</c><00:05:35.160><c> is</c><00:05:35.190><c> I'll</c><00:05:35.400><c> write</c><00:05:35.580><c> a</c><00:05:35.610><c> copy</c><00:05:36.030><c> constructor</c>

00:05:36.530 --> 00:05:36.540 align:start position:0%
I'll do is I'll write a copy constructor
 

00:05:36.540 --> 00:05:38.150 align:start position:0%
I'll do is I'll write a copy constructor
here<00:05:36.780><c> and</c><00:05:36.960><c> this</c><00:05:37.260><c> copy</c><00:05:37.500><c> constructor</c><00:05:37.950><c> is</c><00:05:38.040><c> going</c>

00:05:38.150 --> 00:05:38.160 align:start position:0%
here and this copy constructor is going
 

00:05:38.160 --> 00:05:40.070 align:start position:0%
here and this copy constructor is going
to<00:05:38.220><c> be</c><00:05:38.310><c> very</c><00:05:38.520><c> similar</c><00:05:38.820><c> to</c><00:05:39.000><c> this</c><00:05:39.360><c> constructor</c>

00:05:40.070 --> 00:05:40.080 align:start position:0%
to be very similar to this constructor
 

00:05:40.080 --> 00:05:42.020 align:start position:0%
to be very similar to this constructor
I'll<00:05:40.140><c> copy</c><00:05:40.410><c> it</c><00:05:40.560><c> in</c><00:05:40.650><c> fact</c><00:05:40.890><c> I'll</c><00:05:41.400><c> just</c><00:05:41.550><c> change</c>

00:05:42.020 --> 00:05:42.030 align:start position:0%
I'll copy it in fact I'll just change
 

00:05:42.030 --> 00:05:43.670 align:start position:0%
I'll copy it in fact I'll just change
this<00:05:42.180><c> to</c><00:05:42.270><c> copy</c><00:05:42.570><c> it</c><00:05:42.750><c> except</c><00:05:43.140><c> obviously</c><00:05:43.290><c> the</c>

00:05:43.670 --> 00:05:43.680 align:start position:0%
this to copy it except obviously the
 

00:05:43.680 --> 00:05:45.410 align:start position:0%
this to copy it except obviously the
size<00:05:43.830><c> is</c><00:05:44.070><c> just</c><00:05:44.250><c> going</c><00:05:44.400><c> to</c><00:05:44.490><c> be</c><00:05:44.700><c> other</c><00:05:44.850><c> dot</c><00:05:45.150><c> size</c>

00:05:45.410 --> 00:05:45.420 align:start position:0%
size is just going to be other dot size
 

00:05:45.420 --> 00:05:47.960 align:start position:0%
size is just going to be other dot size
and<00:05:45.810><c> then</c><00:05:46.500><c> everything</c><00:05:47.070><c> else</c><00:05:47.250><c> is</c><00:05:47.490><c> pretty</c><00:05:47.730><c> much</c>

00:05:47.960 --> 00:05:47.970 align:start position:0%
and then everything else is pretty much
 

00:05:47.970 --> 00:05:49.970 align:start position:0%
and then everything else is pretty much
the<00:05:48.180><c> same</c><00:05:48.360><c> except</c><00:05:49.020><c> of</c><00:05:49.110><c> course</c><00:05:49.320><c> we</c><00:05:49.530><c> just</c><00:05:49.560><c> write</c>

00:05:49.970 --> 00:05:49.980 align:start position:0%
the same except of course we just write
 

00:05:49.980 --> 00:05:52.370 align:start position:0%
the same except of course we just write
other<00:05:50.190><c> dot</c><00:05:51.030><c> M</c><00:05:51.240><c> data</c><00:05:51.570><c> so</c><00:05:51.870><c> now</c><00:05:51.990><c> we're</c><00:05:52.170><c> just</c>

00:05:52.370 --> 00:05:52.380 align:start position:0%
other dot M data so now we're just
 

00:05:52.380 --> 00:05:54.290 align:start position:0%
other dot M data so now we're just
copying<00:05:52.680><c> the</c><00:05:53.010><c> string</c><00:05:53.280><c> and</c><00:05:53.460><c> we</c><00:05:53.550><c> have</c><00:05:53.730><c> a</c><00:05:53.940><c> valid</c>

00:05:54.290 --> 00:05:54.300 align:start position:0%
copying the string and we have a valid
 

00:05:54.300 --> 00:05:56.450 align:start position:0%
copying the string and we have a valid
way<00:05:54.450><c> to</c><00:05:54.480><c> actually</c><00:05:54.780><c> get</c><00:05:55.140><c> it</c><00:05:55.290><c> in</c><00:05:55.380><c> here</c><00:05:55.680><c> if</c><00:05:55.920><c> I</c><00:05:56.280><c> run</c>

00:05:56.450 --> 00:05:56.460 align:start position:0%
way to actually get it in here if I run
 

00:05:56.460 --> 00:05:57.650 align:start position:0%
way to actually get it in here if I run
this<00:05:56.580><c> code</c><00:05:56.640><c> in</c><00:05:56.910><c> fact</c><00:05:57.060><c> let's</c><00:05:57.270><c> do</c><00:05:57.390><c> one</c><00:05:57.630><c> more</c>

00:05:57.650 --> 00:05:57.660 align:start position:0%
this code in fact let's do one more
 

00:05:57.660 --> 00:06:00.170 align:start position:0%
this code in fact let's do one more
thing<00:05:57.920><c> let's</c><00:05:58.920><c> just</c><00:05:59.100><c> write</c><00:05:59.340><c> a</c><00:05:59.610><c> function</c><00:05:59.970><c> called</c>

00:06:00.170 --> 00:06:00.180 align:start position:0%
thing let's just write a function called
 

00:06:00.180 --> 00:06:02.450 align:start position:0%
thing let's just write a function called
print<00:06:00.810><c> name</c><00:06:00.870><c> here</c><00:06:01.440><c> and</c><00:06:01.620><c> then</c><00:06:01.920><c> that</c><00:06:02.100><c> needs</c><00:06:02.280><c> some</c>

00:06:02.450 --> 00:06:02.460 align:start position:0%
print name here and then that needs some
 

00:06:02.460 --> 00:06:03.710 align:start position:0%
print name here and then that needs some
way<00:06:02.580><c> of</c><00:06:02.670><c> printing</c><00:06:02.790><c> the</c><00:06:03.000><c> name</c><00:06:03.210><c> which</c><00:06:03.390><c> we</c><00:06:03.510><c> can't</c>

00:06:03.710 --> 00:06:03.720 align:start position:0%
way of printing the name which we can't
 

00:06:03.720 --> 00:06:04.790 align:start position:0%
way of printing the name which we can't
actually<00:06:03.870><c> do</c><00:06:04.140><c> at</c><00:06:04.260><c> the</c><00:06:04.380><c> moment</c>

00:06:04.790 --> 00:06:04.800 align:start position:0%
actually do at the moment
 

00:06:04.800 --> 00:06:06.440 align:start position:0%
actually do at the moment
so<00:06:04.890><c> let's</c><00:06:05.040><c> write</c><00:06:05.250><c> a</c><00:06:05.310><c> very</c><00:06:05.670><c> basic</c><00:06:05.940><c> function</c>

00:06:06.440 --> 00:06:06.450 align:start position:0%
so let's write a very basic function
 

00:06:06.450 --> 00:06:08.210 align:start position:0%
so let's write a very basic function
here<00:06:06.600><c> called</c><00:06:06.660><c> print</c><00:06:07.200><c> now</c><00:06:07.650><c> because</c><00:06:07.920><c> our</c><00:06:08.010><c> string</c>

00:06:08.210 --> 00:06:08.220 align:start position:0%
here called print now because our string
 

00:06:08.220 --> 00:06:09.710 align:start position:0%
here called print now because our string
class<00:06:08.370><c> is</c><00:06:08.550><c> special</c><00:06:08.940><c> and</c><00:06:09.090><c> doesn't</c><00:06:09.330><c> have</c><00:06:09.420><c> a</c><00:06:09.480><c> null</c>

00:06:09.710 --> 00:06:09.720 align:start position:0%
class is special and doesn't have a null
 

00:06:09.720 --> 00:06:11.390 align:start position:0%
class is special and doesn't have a null
termination<00:06:10.140><c> character</c><00:06:10.650><c> what</c><00:06:11.160><c> I'll</c><00:06:11.280><c> actually</c>

00:06:11.390 --> 00:06:11.400 align:start position:0%
termination character what I'll actually
 

00:06:11.400 --> 00:06:13.940 align:start position:0%
termination character what I'll actually
do<00:06:11.820><c> is</c><00:06:12.090><c> loop</c><00:06:12.360><c> through</c><00:06:12.720><c> the</c><00:06:13.050><c> size</c><00:06:13.470><c> of</c><00:06:13.770><c> the</c>

00:06:13.940 --> 00:06:13.950 align:start position:0%
do is loop through the size of the
 

00:06:13.950 --> 00:06:16.460 align:start position:0%
do is loop through the size of the
string<00:06:14.250><c> and</c><00:06:14.580><c> then</c><00:06:14.670><c> print</c><00:06:14.970><c> each</c><00:06:15.180><c> character</c><00:06:15.720><c> one</c>

00:06:16.460 --> 00:06:16.470 align:start position:0%
string and then print each character one
 

00:06:16.470 --> 00:06:20.210 align:start position:0%
string and then print each character one
by<00:06:16.650><c> one</c><00:06:17.030><c> sefa</c><00:06:18.030><c> char</c><00:06:18.330><c> and</c><00:06:18.690><c> then</c><00:06:19.050><c> we'll</c><00:06:19.290><c> do</c><00:06:19.530><c> M</c>

00:06:20.210 --> 00:06:20.220 align:start position:0%
by one sefa char and then we'll do M
 

00:06:20.220 --> 00:06:23.870 align:start position:0%
by one sefa char and then we'll do M
data<00:06:20.790><c> I</c><00:06:21.120><c> and</c><00:06:21.660><c> then</c><00:06:21.990><c> at</c><00:06:22.080><c> the</c><00:06:22.200><c> very</c><00:06:22.230><c> end</c><00:06:22.470><c> I</c><00:06:22.920><c> will</c>

00:06:23.870 --> 00:06:23.880 align:start position:0%
data I and then at the very end I will
 

00:06:23.880 --> 00:06:26.210 align:start position:0%
data I and then at the very end I will
just<00:06:24.060><c> print</c><00:06:24.330><c> a</c><00:06:24.600><c> new</c><00:06:25.200><c> line</c><00:06:25.230><c> character</c><00:06:25.410><c> so</c><00:06:26.070><c> now</c>

00:06:26.210 --> 00:06:26.220 align:start position:0%
just print a new line character so now
 

00:06:26.220 --> 00:06:28.940 align:start position:0%
just print a new line character so now
this<00:06:26.460><c> will</c><00:06:26.820><c> just</c><00:06:26.880><c> call</c><00:06:27.240><c> m</c><00:06:27.480><c> named</c><00:06:27.780><c> print</c><00:06:28.320><c> and</c><00:06:28.530><c> we</c>

00:06:28.940 --> 00:06:28.950 align:start position:0%
this will just call m named print and we
 

00:06:28.950 --> 00:06:31.100 align:start position:0%
this will just call m named print and we
should<00:06:29.130><c> have</c><00:06:29.310><c> a</c><00:06:29.640><c> very</c><00:06:30.120><c> basic</c><00:06:30.390><c> program</c><00:06:30.930><c> now</c>

00:06:31.100 --> 00:06:31.110 align:start position:0%
should have a very basic program now
 

00:06:31.110 --> 00:06:32.750 align:start position:0%
should have a very basic program now
that<00:06:31.140><c> will</c><00:06:31.620><c> just</c><00:06:31.830><c> basically</c><00:06:32.190><c> just</c><00:06:32.490><c> print</c>

00:06:32.750 --> 00:06:32.760 align:start position:0%
that will just basically just print
 

00:06:32.760 --> 00:06:34.400 align:start position:0%
that will just basically just print
shown<00:06:33.000><c> and</c><00:06:33.360><c> if</c><00:06:33.480><c> I</c><00:06:33.570><c> run</c><00:06:33.720><c> this</c><00:06:33.840><c> code</c><00:06:33.900><c> you</c><00:06:34.200><c> can</c><00:06:34.320><c> see</c>

00:06:34.400 --> 00:06:34.410 align:start position:0%
shown and if I run this code you can see
 

00:06:34.410 --> 00:06:36.380 align:start position:0%
shown and if I run this code you can see
that<00:06:34.530><c> we</c><00:06:34.620><c> have</c><00:06:34.740><c> created</c><00:06:34.890><c> copied</c><00:06:35.610><c> and</c><00:06:35.790><c> Cherno</c>

00:06:36.380 --> 00:06:36.390 align:start position:0%
that we have created copied and Cherno
 

00:06:36.390 --> 00:06:38.570 align:start position:0%
that we have created copied and Cherno
so<00:06:36.630><c> everything</c><00:06:37.110><c> is</c><00:06:37.230><c> in</c><00:06:37.260><c> fact</c><00:06:37.620><c> working</c><00:06:37.860><c> however</c>

00:06:38.570 --> 00:06:38.580 align:start position:0%
so everything is in fact working however
 

00:06:38.580 --> 00:06:40.710 align:start position:0%
so everything is in fact working however
this<00:06:39.090><c> is</c><00:06:39.330><c> really</c><00:06:39.780><c> the</c><00:06:40.020><c> problem</c><00:06:40.230><c> that</c>

00:06:40.710 --> 00:06:40.720 align:start position:0%
this is really the problem that
 

00:06:40.720 --> 00:06:43.080 align:start position:0%
this is really the problem that
addressing<00:06:41.230><c> today</c><00:06:41.470><c> we</c><00:06:41.950><c> have</c><00:06:42.160><c> this</c><00:06:42.340><c> copied</c>

00:06:43.080 --> 00:06:43.090 align:start position:0%
addressing today we have this copied
 

00:06:43.090 --> 00:06:44.820 align:start position:0%
addressing today we have this copied
line<00:06:43.450><c> being</c><00:06:43.750><c> printed</c><00:06:44.050><c> which</c><00:06:44.320><c> of</c><00:06:44.440><c> course</c><00:06:44.470><c> means</c>

00:06:44.820 --> 00:06:44.830 align:start position:0%
line being printed which of course means
 

00:06:44.830 --> 00:06:47.070 align:start position:0%
line being printed which of course means
that<00:06:45.010><c> our</c><00:06:45.370><c> data</c><00:06:45.670><c> has</c><00:06:45.850><c> been</c><00:06:46.060><c> copied</c><00:06:46.510><c> now</c><00:06:46.780><c> why</c><00:06:47.020><c> is</c>

00:06:47.070 --> 00:06:47.080 align:start position:0%
that our data has been copied now why is
 

00:06:47.080 --> 00:06:49.170 align:start position:0%
that our data has been copied now why is
this<00:06:47.320><c> a</c><00:06:47.380><c> problem</c><00:06:47.620><c> well</c><00:06:48.370><c> the</c><00:06:48.700><c> reason</c><00:06:48.970><c> it's</c><00:06:49.120><c> a</c>

00:06:49.170 --> 00:06:49.180 align:start position:0%
this a problem well the reason it's a
 

00:06:49.180 --> 00:06:50.730 align:start position:0%
this a problem well the reason it's a
problem<00:06:49.210><c> is</c><00:06:49.660><c> because</c><00:06:49.990><c> you</c><00:06:50.110><c> can</c><00:06:50.260><c> see</c><00:06:50.440><c> that</c><00:06:50.620><c> to</c>

00:06:50.730 --> 00:06:50.740 align:start position:0%
problem is because you can see that to
 

00:06:50.740 --> 00:06:53.280 align:start position:0%
problem is because you can see that to
copy<00:06:50.980><c> a</c><00:06:51.100><c> string</c><00:06:51.460><c> we</c><00:06:52.150><c> need</c><00:06:52.390><c> to</c><00:06:52.600><c> allocate</c><00:06:52.840><c> memory</c>

00:06:53.280 --> 00:06:53.290 align:start position:0%
copy a string we need to allocate memory
 

00:06:53.290 --> 00:06:55.170 align:start position:0%
copy a string we need to allocate memory
on<00:06:53.620><c> the</c><00:06:53.740><c> heap</c><00:06:53.770><c> we</c><00:06:54.130><c> have</c><00:06:54.250><c> to</c><00:06:54.370><c> call</c><00:06:54.520><c> new</c><00:06:54.820><c> char</c>

00:06:55.170 --> 00:06:55.180 align:start position:0%
on the heap we have to call new char
 

00:06:55.180 --> 00:06:57.630 align:start position:0%
on the heap we have to call new char
that's<00:06:55.870><c> not</c><00:06:56.230><c> that's</c><00:06:56.620><c> not</c><00:06:56.830><c> a</c><00:06:56.860><c> good</c><00:06:57.100><c> thing</c><00:06:57.130><c> it's</c>

00:06:57.630 --> 00:06:57.640 align:start position:0%
that's not that's not a good thing it's
 

00:06:57.640 --> 00:06:59.130 align:start position:0%
that's not that's not a good thing it's
definitely<00:06:57.790><c> not</c><00:06:58.120><c> terrible</c><00:06:58.720><c> and</c><00:06:58.840><c> especially</c>

00:06:59.130 --> 00:06:59.140 align:start position:0%
definitely not terrible and especially
 

00:06:59.140 --> 00:07:00.630 align:start position:0%
definitely not terrible and especially
if<00:06:59.380><c> you</c><00:06:59.470><c> have</c><00:06:59.590><c> just</c><00:06:59.800><c> one</c><00:06:59.950><c> copy</c><00:07:00.160><c> like</c><00:07:00.400><c> that</c><00:07:00.550><c> let</c>

00:07:00.630 --> 00:07:00.640 align:start position:0%
if you have just one copy like that let
 

00:07:00.640 --> 00:07:02.700 align:start position:0%
if you have just one copy like that let
me<00:07:00.670><c> just</c><00:07:00.760><c> quickly</c><00:07:00.940><c> add</c><00:07:01.360><c> this</c><00:07:02.110><c> thing</c><00:07:02.320><c> in</c><00:07:02.500><c> here</c>

00:07:02.700 --> 00:07:02.710 align:start position:0%
me just quickly add this thing in here
 

00:07:02.710 --> 00:07:05.160 align:start position:0%
me just quickly add this thing in here
as<00:07:02.920><c> well</c><00:07:03.220><c> it's</c><00:07:04.030><c> not</c><00:07:04.240><c> necessarily</c><00:07:04.870><c> like</c><00:07:04.990><c> the</c>

00:07:05.160 --> 00:07:05.170 align:start position:0%
as well it's not necessarily like the
 

00:07:05.170 --> 00:07:06.720 align:start position:0%
as well it's not necessarily like the
worst<00:07:05.380><c> thing</c><00:07:05.620><c> in</c><00:07:05.740><c> the</c><00:07:05.770><c> world</c><00:07:06.010><c> but</c><00:07:06.220><c> remember</c>

00:07:06.720 --> 00:07:06.730 align:start position:0%
worst thing in the world but remember
 

00:07:06.730 --> 00:07:09.540 align:start position:0%
worst thing in the world but remember
the<00:07:07.210><c> fact</c><00:07:07.690><c> that</c><00:07:07.810><c> we</c><00:07:08.020><c> have</c><00:07:08.320><c> to</c><00:07:08.470><c> copy</c><00:07:08.740><c> this</c><00:07:09.010><c> is</c><00:07:09.310><c> a</c>

00:07:09.540 --> 00:07:09.550 align:start position:0%
the fact that we have to copy this is a
 

00:07:09.550 --> 00:07:11.700 align:start position:0%
the fact that we have to copy this is a
little<00:07:09.910><c> bit</c><00:07:10.030><c> ridiculous</c><00:07:10.480><c> because</c><00:07:10.870><c> I</c><00:07:11.290><c> mean</c>

00:07:11.700 --> 00:07:11.710 align:start position:0%
little bit ridiculous because I mean
 

00:07:11.710 --> 00:07:12.990 align:start position:0%
little bit ridiculous because I mean
look<00:07:11.920><c> at</c><00:07:12.040><c> look</c><00:07:12.220><c> at</c><00:07:12.280><c> what</c><00:07:12.340><c> we're</c><00:07:12.610><c> doing</c><00:07:12.730><c> we're</c>

00:07:12.990 --> 00:07:13.000 align:start position:0%
look at look at what we're doing we're
 

00:07:13.000 --> 00:07:14.520 align:start position:0%
look at look at what we're doing we're
essentially<00:07:13.330><c> creating</c><00:07:13.810><c> an</c><00:07:13.900><c> entity</c><00:07:14.320><c> called</c>

00:07:14.520 --> 00:07:14.530 align:start position:0%
essentially creating an entity called
 

00:07:14.530 --> 00:07:16.950 align:start position:0%
essentially creating an entity called
Cherno<00:07:14.920><c> here</c><00:07:15.400><c> and</c><00:07:15.580><c> I</c><00:07:16.060><c> mean</c><00:07:16.240><c> we</c><00:07:16.360><c> just</c><00:07:16.510><c> need</c><00:07:16.690><c> some</c>

00:07:16.950 --> 00:07:16.960 align:start position:0%
Cherno here and I mean we just need some
 

00:07:16.960 --> 00:07:18.780 align:start position:0%
Cherno here and I mean we just need some
way<00:07:17.110><c> of</c><00:07:17.140><c> getting</c><00:07:17.290><c> the</c><00:07:17.650><c> string</c><00:07:17.950><c> into</c><00:07:18.250><c> here</c><00:07:18.550><c> and</c>

00:07:18.780 --> 00:07:18.790 align:start position:0%
way of getting the string into here and
 

00:07:18.790 --> 00:07:21.210 align:start position:0%
way of getting the string into here and
what<00:07:18.970><c> does</c><00:07:19.060><c> that</c><00:07:19.090><c> do</c><00:07:19.510><c> well</c><00:07:20.110><c> that</c><00:07:20.440><c> that</c><00:07:20.830><c> has</c><00:07:21.040><c> to</c>

00:07:21.210 --> 00:07:21.220 align:start position:0%
what does that do well that that has to
 

00:07:21.220 --> 00:07:23.100 align:start position:0%
what does that do well that that has to
allocate<00:07:21.640><c> memory</c><00:07:21.820><c> twice</c><00:07:22.330><c> because</c><00:07:22.780><c> we</c><00:07:22.900><c> need</c><00:07:23.020><c> to</c>

00:07:23.100 --> 00:07:23.110 align:start position:0%
allocate memory twice because we need to
 

00:07:23.110 --> 00:07:24.990 align:start position:0%
allocate memory twice because we need to
create<00:07:23.320><c> it</c><00:07:23.470><c> first</c><00:07:23.740><c> in</c><00:07:24.010><c> the</c><00:07:24.130><c> scope</c><00:07:24.430><c> of</c><00:07:24.580><c> this</c>

00:07:24.990 --> 00:07:25.000 align:start position:0%
create it first in the scope of this
 

00:07:25.000 --> 00:07:26.790 align:start position:0%
create it first in the scope of this
function<00:07:25.570><c> inside</c><00:07:25.840><c> our</c><00:07:26.020><c> main</c><00:07:26.200><c> function</c>

00:07:26.790 --> 00:07:26.800 align:start position:0%
function inside our main function
 

00:07:26.800 --> 00:07:28.350 align:start position:0%
function inside our main function
which<00:07:27.130><c> is</c><00:07:27.310><c> what</c><00:07:27.460><c> happens</c><00:07:27.790><c> over</c><00:07:27.940><c> here</c><00:07:28.210><c> we're</c>

00:07:28.350 --> 00:07:28.360 align:start position:0%
which is what happens over here we're
 

00:07:28.360 --> 00:07:29.970 align:start position:0%
which is what happens over here we're
actually<00:07:28.480><c> creating</c><00:07:28.870><c> it</c><00:07:29.110><c> inside</c><00:07:29.560><c> the</c><00:07:29.800><c> main</c>

00:07:29.970 --> 00:07:29.980 align:start position:0%
actually creating it inside the main
 

00:07:29.980 --> 00:07:32.730 align:start position:0%
actually creating it inside the main
function<00:07:30.490><c> and</c><00:07:30.610><c> then</c><00:07:31.300><c> we're</c><00:07:31.930><c> passing</c><00:07:32.440><c> it</c><00:07:32.530><c> into</c>

00:07:32.730 --> 00:07:32.740 align:start position:0%
function and then we're passing it into
 

00:07:32.740 --> 00:07:34.470 align:start position:0%
function and then we're passing it into
this<00:07:32.980><c> entity</c><00:07:33.220><c> constructor</c><00:07:33.850><c> which</c><00:07:34.000><c> then</c><00:07:34.240><c> on</c>

00:07:34.470 --> 00:07:34.480 align:start position:0%
this entity constructor which then on
 

00:07:34.480 --> 00:07:36.570 align:start position:0%
this entity constructor which then on
this<00:07:34.690><c> line</c><00:07:34.930><c> over</c><00:07:35.169><c> here</c><00:07:35.320><c> has</c><00:07:35.770><c> to</c><00:07:35.919><c> actually</c><00:07:36.100><c> copy</c>

00:07:36.570 --> 00:07:36.580 align:start position:0%
this line over here has to actually copy
 

00:07:36.580 --> 00:07:40.290 align:start position:0%
this line over here has to actually copy
it<00:07:36.850><c> into</c><00:07:37.360><c> here</c><00:07:37.900><c> why</c><00:07:38.620><c> can't</c><00:07:39.010><c> we</c><00:07:39.220><c> just</c><00:07:39.550><c> move</c><00:07:40.060><c> it</c>

00:07:40.290 --> 00:07:40.300 align:start position:0%
it into here why can't we just move it
 

00:07:40.300 --> 00:07:42.600 align:start position:0%
it into here why can't we just move it
into<00:07:40.540><c> here</c><00:07:40.930><c> why</c><00:07:41.140><c> can't</c><00:07:41.530><c> we</c><00:07:41.710><c> just</c><00:07:41.890><c> allocate</c><00:07:42.490><c> the</c>

00:07:42.600 --> 00:07:42.610 align:start position:0%
into here why can't we just allocate the
 

00:07:42.610 --> 00:07:44.370 align:start position:0%
into here why can't we just allocate the
memory<00:07:42.760><c> right</c><00:07:43.210><c> here</c><00:07:43.510><c> and</c><00:07:43.660><c> just</c><00:07:43.690><c> have</c><00:07:43.990><c> it</c><00:07:44.020><c> there</c>

00:07:44.370 --> 00:07:44.380 align:start position:0%
memory right here and just have it there
 

00:07:44.380 --> 00:07:46.409 align:start position:0%
memory right here and just have it there
or<00:07:44.590><c> I</c><00:07:44.650><c> mean</c><00:07:45.370><c> worst</c><00:07:45.610><c> case</c><00:07:45.790><c> scenario</c><00:07:46.090><c> because</c><00:07:46.330><c> we</c>

00:07:46.409 --> 00:07:46.419 align:start position:0%
or I mean worst case scenario because we
 

00:07:46.419 --> 00:07:47.670 align:start position:0%
or I mean worst case scenario because we
can't<00:07:46.630><c> really</c><00:07:46.750><c> do</c><00:07:46.990><c> that</c><00:07:47.020><c> without</c><00:07:47.290><c> getting</c>

00:07:47.670 --> 00:07:47.680 align:start position:0%
can't really do that without getting
 

00:07:47.680 --> 00:07:49.320 align:start position:0%
can't really do that without getting
access<00:07:48.190><c> to</c><00:07:48.250><c> the</c><00:07:48.550><c> string</c><00:07:48.850><c> and</c><00:07:48.880><c> then</c><00:07:49.090><c> doing</c>

00:07:49.320 --> 00:07:49.330 align:start position:0%
access to the string and then doing
 

00:07:49.330 --> 00:07:51.390 align:start position:0%
access to the string and then doing
stuff<00:07:49.570><c> like</c><00:07:49.630><c> that</c><00:07:49.870><c> manually</c><00:07:50.350><c> why</c><00:07:50.950><c> can't</c><00:07:51.280><c> we</c>

00:07:51.390 --> 00:07:51.400 align:start position:0%
stuff like that manually why can't we
 

00:07:51.400 --> 00:07:53.159 align:start position:0%
stuff like that manually why can't we
just<00:07:51.640><c> still</c><00:07:52.150><c> allocate</c><00:07:52.570><c> it</c><00:07:52.660><c> here</c><00:07:52.870><c> in</c><00:07:52.960><c> the</c><00:07:53.050><c> main</c>

00:07:53.159 --> 00:07:53.169 align:start position:0%
just still allocate it here in the main
 

00:07:53.169 --> 00:07:55.800 align:start position:0%
just still allocate it here in the main
function<00:07:53.410><c> but</c><00:07:54.160><c> then</c><00:07:54.370><c> just</c><00:07:54.669><c> move</c><00:07:55.000><c> it</c><00:07:55.210><c> into</c><00:07:55.630><c> this</c>

00:07:55.800 --> 00:07:55.810 align:start position:0%
function but then just move it into this
 

00:07:55.810 --> 00:07:57.840 align:start position:0%
function but then just move it into this
space<00:07:56.110><c> because</c><00:07:56.590><c> now</c><00:07:56.770><c> we</c><00:07:56.830><c> wanted</c><00:07:57.310><c> to</c><00:07:57.400><c> occupy</c>

00:07:57.840 --> 00:07:57.850 align:start position:0%
space because now we wanted to occupy
 

00:07:57.850 --> 00:07:59.640 align:start position:0%
space because now we wanted to occupy
this<00:07:57.910><c> space</c><00:07:58.240><c> and</c><00:07:58.990><c> the</c><00:07:59.140><c> answer</c><00:07:59.410><c> is</c><00:07:59.530><c> of</c><00:07:59.620><c> course</c>

00:07:59.640 --> 00:07:59.650 align:start position:0%
this space and the answer is of course
 

00:07:59.650 --> 00:08:01.409 align:start position:0%
this space and the answer is of course
we<00:07:59.830><c> can</c><00:08:00.130><c> and</c><00:08:00.370><c> that's</c><00:08:00.729><c> where</c><00:08:00.880><c> move</c><00:08:01.000><c> semantics</c>

00:08:01.409 --> 00:08:01.419 align:start position:0%
we can and that's where move semantics
 

00:08:01.419 --> 00:08:02.969 align:start position:0%
we can and that's where move semantics
comes<00:08:01.660><c> in</c><00:08:01.870><c> so</c><00:08:02.110><c> what</c><00:08:02.290><c> we</c><00:08:02.380><c> need</c><00:08:02.500><c> to</c><00:08:02.620><c> do</c><00:08:02.770><c> in</c><00:08:02.890><c> this</c>

00:08:02.969 --> 00:08:02.979 align:start position:0%
comes in so what we need to do in this
 

00:08:02.979 --> 00:08:05.460 align:start position:0%
comes in so what we need to do in this
case<00:08:03.250><c> is</c><00:08:03.310><c> write</c><00:08:03.760><c> a</c><00:08:03.940><c> move</c><00:08:04.270><c> constructor</c><00:08:05.020><c> so</c><00:08:05.320><c> this</c>

00:08:05.460 --> 00:08:05.470 align:start position:0%
case is write a move constructor so this
 

00:08:05.470 --> 00:08:07.020 align:start position:0%
case is write a move constructor so this
is<00:08:05.560><c> very</c><00:08:05.710><c> similar</c><00:08:05.979><c> to</c><00:08:06.160><c> the</c><00:08:06.250><c> copy</c><00:08:06.430><c> constructor</c>

00:08:07.020 --> 00:08:07.030 align:start position:0%
is very similar to the copy constructor
 

00:08:07.030 --> 00:08:09.120 align:start position:0%
is very similar to the copy constructor
except<00:08:07.419><c> this</c><00:08:07.540><c> takes</c><00:08:07.750><c> in</c><00:08:07.900><c> our</c><00:08:08.140><c> value</c><00:08:08.680><c> reference</c>

00:08:09.120 --> 00:08:09.130 align:start position:0%
except this takes in our value reference
 

00:08:09.130 --> 00:08:11.340 align:start position:0%
except this takes in our value reference
meaning<00:08:09.400><c> a</c><00:08:09.640><c> temporary</c><00:08:10.240><c> so</c><00:08:10.510><c> this</c><00:08:10.720><c> right</c><00:08:10.990><c> here</c>

00:08:11.340 --> 00:08:11.350 align:start position:0%
meaning a temporary so this right here
 

00:08:11.350 --> 00:08:13.530 align:start position:0%
meaning a temporary so this right here
is<00:08:11.470><c> a</c><00:08:11.919><c> temporary</c><00:08:12.490><c> it's</c><00:08:12.700><c> not</c><00:08:12.820><c> an</c><00:08:12.910><c> L</c><00:08:13.090><c> value</c><00:08:13.479><c> is</c>

00:08:13.530 --> 00:08:13.540 align:start position:0%
is a temporary it's not an L value is
 

00:08:13.540 --> 00:08:15.090 align:start position:0%
is a temporary it's not an L value is
not<00:08:13.720><c> assigned</c><00:08:13.810><c> to</c><00:08:14.110><c> anything</c><00:08:14.380><c> it's</c><00:08:14.650><c> just</c><00:08:14.830><c> used</c>

00:08:15.090 --> 00:08:15.100 align:start position:0%
not assigned to anything it's just used
 

00:08:15.100 --> 00:08:17.850 align:start position:0%
not assigned to anything it's just used
up<00:08:15.340><c> as</c><00:08:15.520><c> a</c><00:08:15.580><c> parameter</c><00:08:15.970><c> for</c><00:08:16.840><c> this</c><00:08:17.080><c> actual</c><00:08:17.440><c> entity</c>

00:08:17.850 --> 00:08:17.860 align:start position:0%
up as a parameter for this actual entity
 

00:08:17.860 --> 00:08:20.310 align:start position:0%
up as a parameter for this actual entity
constructor<00:08:18.520><c> so</c><00:08:19.000><c> now</c><00:08:19.180><c> by</c><00:08:19.450><c> specifying</c><00:08:20.050><c> this</c>

00:08:20.310 --> 00:08:20.320 align:start position:0%
constructor so now by specifying this
 

00:08:20.320 --> 00:08:22.200 align:start position:0%
constructor so now by specifying this
constructor<00:08:21.040><c> which</c><00:08:21.610><c> by</c><00:08:21.760><c> the</c><00:08:21.820><c> way</c><00:08:22.000><c> we</c><00:08:22.150><c> should</c>

00:08:22.200 --> 00:08:22.210 align:start position:0%
constructor which by the way we should
 

00:08:22.210 --> 00:08:23.850 align:start position:0%
constructor which by the way we should
specify<00:08:22.630><c> with</c><00:08:22.960><c> no</c><00:08:23.080><c> except</c><00:08:23.410><c> I</c><00:08:23.530><c> mean</c><00:08:23.650><c> even</c>

00:08:23.850 --> 00:08:23.860 align:start position:0%
specify with no except I mean even
 

00:08:23.860 --> 00:08:25.380 align:start position:0%
specify with no except I mean even
visual<00:08:24.070><c> studio</c><00:08:24.310><c> is</c><00:08:24.400><c> telling</c><00:08:24.729><c> us</c><00:08:24.820><c> because</c><00:08:25.210><c> it's</c>

00:08:25.380 --> 00:08:25.390 align:start position:0%
visual studio is telling us because it's
 

00:08:25.390 --> 00:08:27.240 align:start position:0%
visual studio is telling us because it's
not<00:08:25.840><c> really</c><00:08:26.350><c> supposed</c><00:08:26.680><c> to</c><00:08:26.860><c> be</c><00:08:27.010><c> throwing</c>

00:08:27.240 --> 00:08:27.250 align:start position:0%
not really supposed to be throwing
 

00:08:27.250 --> 00:08:29.070 align:start position:0%
not really supposed to be throwing
exceptions<00:08:27.850><c> not</c><00:08:28.360><c> that</c><00:08:28.510><c> we</c><00:08:28.570><c> really</c><00:08:28.600><c> use</c><00:08:28.930><c> them</c>

00:08:29.070 --> 00:08:29.080 align:start position:0%
exceptions not that we really use them
 

00:08:29.080 --> 00:08:30.870 align:start position:0%
exceptions not that we really use them
anyway<00:08:29.410><c> but</c><00:08:29.979><c> just</c><00:08:30.040><c> to</c><00:08:30.250><c> be</c><00:08:30.340><c> ultra</c><00:08:30.580><c> correct</c>

00:08:30.870 --> 00:08:30.880 align:start position:0%
anyway but just to be ultra correct
 

00:08:30.880 --> 00:08:32.490 align:start position:0%
anyway but just to be ultra correct
we'll<00:08:31.000><c> do</c><00:08:31.120><c> that</c><00:08:31.300><c> and</c><00:08:31.479><c> by</c><00:08:31.750><c> specifying</c><00:08:32.320><c> this</c>

00:08:32.490 --> 00:08:32.500 align:start position:0%
we'll do that and by specifying this
 

00:08:32.500 --> 00:08:34.500 align:start position:0%
we'll do that and by specifying this
constructor<00:08:33.099><c> the</c><00:08:33.219><c> hope</c><00:08:33.430><c> is</c><00:08:33.640><c> that</c><00:08:33.669><c> eventually</c>

00:08:34.500 --> 00:08:34.510 align:start position:0%
constructor the hope is that eventually
 

00:08:34.510 --> 00:08:36.750 align:start position:0%
constructor the hope is that eventually
when<00:08:35.169><c> we</c><00:08:35.200><c> actually</c><00:08:35.770><c> perform</c><00:08:36.219><c> this</c><00:08:36.400><c> copy</c>

00:08:36.750 --> 00:08:36.760 align:start position:0%
when we actually perform this copy
 

00:08:36.760 --> 00:08:39.510 align:start position:0%
when we actually perform this copy
instead<00:08:37.330><c> of</c><00:08:37.479><c> copying</c><00:08:37.930><c> it</c><00:08:38.469><c> will</c><00:08:38.740><c> actually</c><00:08:39.219><c> move</c>

00:08:39.510 --> 00:08:39.520 align:start position:0%
instead of copying it will actually move
 

00:08:39.520 --> 00:08:41.670 align:start position:0%
instead of copying it will actually move
now<00:08:40.180><c> in</c><00:08:40.390><c> order</c><00:08:40.539><c> for</c><00:08:40.780><c> that</c><00:08:40.870><c> to</c><00:08:40.930><c> actually</c><00:08:41.500><c> work</c>

00:08:41.670 --> 00:08:41.680 align:start position:0%
now in order for that to actually work
 

00:08:41.680 --> 00:08:43.469 align:start position:0%
now in order for that to actually work
we<00:08:41.950><c> need</c><00:08:42.130><c> to</c><00:08:42.250><c> also</c><00:08:42.460><c> make</c><00:08:42.669><c> sure</c><00:08:42.880><c> that</c><00:08:43.240><c> entity</c>

00:08:43.469 --> 00:08:43.479 align:start position:0%
we need to also make sure that entity
 

00:08:43.479 --> 00:08:45.390 align:start position:0%
we need to also make sure that entity
has<00:08:43.630><c> a</c><00:08:43.870><c> constructor</c><00:08:44.620><c> that</c><00:08:44.650><c> takes</c><00:08:44.920><c> in</c><00:08:45.310><c> a</c>

00:08:45.390 --> 00:08:45.400 align:start position:0%
has a constructor that takes in a
 

00:08:45.400 --> 00:08:47.490 align:start position:0%
has a constructor that takes in a
temporary<00:08:45.910><c> so</c><00:08:46.210><c> instead</c><00:08:46.839><c> of</c><00:08:46.930><c> kind</c><00:08:47.140><c> of</c><00:08:47.200><c> doing</c>

00:08:47.490 --> 00:08:47.500 align:start position:0%
temporary so instead of kind of doing
 

00:08:47.500 --> 00:08:48.900 align:start position:0%
temporary so instead of kind of doing
that<00:08:47.620><c> what</c><00:08:47.920><c> I'll</c><00:08:48.010><c> do</c><00:08:48.160><c> is</c><00:08:48.280><c> I'll</c><00:08:48.400><c> actually</c><00:08:48.520><c> copy</c>

00:08:48.900 --> 00:08:48.910 align:start position:0%
that what I'll do is I'll actually copy
 

00:08:48.910 --> 00:08:50.340 align:start position:0%
that what I'll do is I'll actually copy
and<00:08:49.030><c> paste</c><00:08:49.300><c> this</c><00:08:49.450><c> constructor</c><00:08:50.020><c> so</c><00:08:50.140><c> I'll</c><00:08:50.230><c> just</c>

00:08:50.340 --> 00:08:50.350 align:start position:0%
and paste this constructor so I'll just
 

00:08:50.350 --> 00:08:52.320 align:start position:0%
and paste this constructor so I'll just
add<00:08:50.500><c> a</c><00:08:50.560><c> new</c><00:08:50.830><c> constructor</c><00:08:51.400><c> that</c><00:08:51.580><c> takes</c><00:08:51.880><c> in</c><00:08:52.270><c> a</c>

00:08:52.320 --> 00:08:52.330 align:start position:0%
add a new constructor that takes in a
 

00:08:52.330 --> 00:08:53.970 align:start position:0%
add a new constructor that takes in a
temporary<00:08:52.810><c> like</c><00:08:53.020><c> this</c><00:08:53.260><c> now</c><00:08:53.500><c> hope</c>

00:08:53.970 --> 00:08:53.980 align:start position:0%
temporary like this now hope
 

00:08:53.980 --> 00:08:55.860 align:start position:0%
temporary like this now hope
course<00:08:54.130><c> is</c><00:08:54.339><c> that</c><00:08:54.880><c> when</c><00:08:55.089><c> we</c><00:08:55.209><c> actually</c><00:08:55.420><c> call</c>

00:08:55.860 --> 00:08:55.870 align:start position:0%
course is that when we actually call
 

00:08:55.870 --> 00:08:57.240 align:start position:0%
course is that when we actually call
this<00:08:56.050><c> because</c><00:08:56.320><c> now</c><00:08:56.500><c> that</c><00:08:56.680><c> now</c><00:08:56.800><c> that</c><00:08:56.949><c> this</c><00:08:57.040><c> is</c><00:08:57.220><c> a</c>

00:08:57.240 --> 00:08:57.250 align:start position:0%
this because now that now that this is a
 

00:08:57.250 --> 00:08:59.040 align:start position:0%
this because now that now that this is a
temporary<00:08:57.490><c> and</c><00:08:58.149><c> we're</c><00:08:58.329><c> providing</c><00:08:58.510><c> an</c><00:08:58.899><c> R</c><00:08:59.019><c> value</c>

00:08:59.040 --> 00:08:59.050 align:start position:0%
temporary and we're providing an R value
 

00:08:59.050 --> 00:09:01.560 align:start position:0%
temporary and we're providing an R value
reference<00:08:59.440><c> constructor</c><00:09:00.160><c> since</c><00:09:00.910><c> this</c><00:09:01.120><c> is</c><00:09:01.300><c> an</c><00:09:01.420><c> R</c>

00:09:01.560 --> 00:09:01.570 align:start position:0%
reference constructor since this is an R
 

00:09:01.570 --> 00:09:03.000 align:start position:0%
reference constructor since this is an R
value<00:09:01.600><c> it</c><00:09:02.139><c> will</c><00:09:02.320><c> actually</c><00:09:02.470><c> call</c><00:09:02.829><c> this</c>

00:09:03.000 --> 00:09:03.010 align:start position:0%
value it will actually call this
 

00:09:03.010 --> 00:09:04.350 align:start position:0%
value it will actually call this
constructor<00:09:03.250><c> now</c><00:09:03.699><c> instead</c><00:09:04.120><c> of</c><00:09:04.180><c> this</c>

00:09:04.350 --> 00:09:04.360 align:start position:0%
constructor now instead of this
 

00:09:04.360 --> 00:09:06.240 align:start position:0%
constructor now instead of this
constructor<00:09:04.930><c> now</c><00:09:05.380><c> they</c><00:09:05.529><c> are</c><00:09:05.649><c> both</c><00:09:05.829><c> the</c><00:09:06.010><c> same</c>

00:09:06.240 --> 00:09:06.250 align:start position:0%
constructor now they are both the same
 

00:09:06.250 --> 00:09:07.590 align:start position:0%
constructor now they are both the same
they<00:09:06.519><c> do</c><00:09:06.579><c> the</c><00:09:06.730><c> same</c><00:09:06.880><c> thing</c><00:09:07.120><c> that</c><00:09:07.240><c> is</c><00:09:07.360><c> assigned</c>

00:09:07.590 --> 00:09:07.600 align:start position:0%
they do the same thing that is assigned
 

00:09:07.600 --> 00:09:09.389 align:start position:0%
they do the same thing that is assigned
name<00:09:07.839><c> the</c><00:09:07.990><c> same</c><00:09:08.199><c> way</c><00:09:08.380><c> so</c><00:09:08.440><c> nothing</c><00:09:08.949><c> will</c><00:09:09.070><c> change</c>

00:09:09.389 --> 00:09:09.399 align:start position:0%
name the same way so nothing will change
 

00:09:09.399 --> 00:09:11.220 align:start position:0%
name the same way so nothing will change
but<00:09:09.820><c> that's</c><00:09:10.029><c> kind</c><00:09:10.269><c> of</c><00:09:10.329><c> the</c><00:09:10.389><c> first</c><00:09:10.600><c> step</c><00:09:10.870><c> so</c><00:09:11.079><c> now</c>

00:09:11.220 --> 00:09:11.230 align:start position:0%
but that's kind of the first step so now
 

00:09:11.230 --> 00:09:13.410 align:start position:0%
but that's kind of the first step so now
we<00:09:11.290><c> need</c><00:09:11.500><c> to</c><00:09:11.620><c> actually</c><00:09:11.800><c> implement</c><00:09:12.430><c> our</c><00:09:13.000><c> move</c>

00:09:13.410 --> 00:09:13.420 align:start position:0%
we need to actually implement our move
 

00:09:13.420 --> 00:09:15.420 align:start position:0%
we need to actually implement our move
constructor<00:09:14.079><c> so</c><00:09:14.350><c> what</c><00:09:14.529><c> I'll</c><00:09:14.620><c> do</c><00:09:14.769><c> is</c><00:09:14.800><c> I'll</c><00:09:15.070><c> copy</c>

00:09:15.420 --> 00:09:15.430 align:start position:0%
constructor so what I'll do is I'll copy
 

00:09:15.430 --> 00:09:17.250 align:start position:0%
constructor so what I'll do is I'll copy
in<00:09:15.639><c> fact</c><00:09:15.850><c> I'll</c><00:09:15.910><c> just</c><00:09:16.060><c> copy</c><00:09:16.180><c> everything</c><00:09:16.420><c> and</c>

00:09:17.250 --> 00:09:17.260 align:start position:0%
in fact I'll just copy everything and
 

00:09:17.260 --> 00:09:18.900 align:start position:0%
in fact I'll just copy everything and
I'll<00:09:17.380><c> show</c><00:09:17.589><c> you</c><00:09:17.620><c> how</c><00:09:18.040><c> to</c><00:09:18.100><c> do</c><00:09:18.459><c> this</c>

00:09:18.900 --> 00:09:18.910 align:start position:0%
I'll show you how to do this
 

00:09:18.910 --> 00:09:21.600 align:start position:0%
I'll show you how to do this
so<00:09:19.360><c> we'll</c><00:09:19.540><c> say</c><00:09:19.690><c> moved</c><00:09:20.050><c> over</c><00:09:20.589><c> here</c><00:09:20.620><c> size</c><00:09:21.310><c> still</c>

00:09:21.600 --> 00:09:21.610 align:start position:0%
so we'll say moved over here size still
 

00:09:21.610 --> 00:09:23.610 align:start position:0%
so we'll say moved over here size still
gets<00:09:21.790><c> copied</c><00:09:22.180><c> the</c><00:09:22.300><c> same</c><00:09:22.480><c> way</c><00:09:22.690><c> and</c><00:09:22.959><c> what</c><00:09:23.440><c> we'll</c>

00:09:23.610 --> 00:09:23.620 align:start position:0%
gets copied the same way and what we'll
 

00:09:23.620 --> 00:09:25.350 align:start position:0%
gets copied the same way and what we'll
do<00:09:23.769><c> is</c><00:09:23.860><c> we'll</c><00:09:23.980><c> actually</c><00:09:24.339><c> copy</c><00:09:24.550><c> data</c><00:09:24.850><c> but</c><00:09:25.180><c> what</c>

00:09:25.350 --> 00:09:25.360 align:start position:0%
do is we'll actually copy data but what
 

00:09:25.360 --> 00:09:26.790 align:start position:0%
do is we'll actually copy data but what
we're<00:09:25.510><c> doing</c><00:09:25.540><c> here</c><00:09:25.930><c> is</c><00:09:26.019><c> instead</c><00:09:26.260><c> of</c><00:09:26.320><c> actually</c>

00:09:26.790 --> 00:09:26.800 align:start position:0%
we're doing here is instead of actually
 

00:09:26.800 --> 00:09:28.829 align:start position:0%
we're doing here is instead of actually
allocating<00:09:27.670><c> a</c><00:09:27.730><c> new</c><00:09:27.760><c> buffer</c><00:09:28.180><c> of</c><00:09:28.389><c> data</c><00:09:28.630><c> and</c>

00:09:28.829 --> 00:09:28.839 align:start position:0%
allocating a new buffer of data and
 

00:09:28.839 --> 00:09:30.540 align:start position:0%
allocating a new buffer of data and
copying<00:09:29.170><c> everything</c><00:09:29.410><c> individually</c><00:09:29.800><c> copying</c>

00:09:30.540 --> 00:09:30.550 align:start position:0%
copying everything individually copying
 

00:09:30.550 --> 00:09:32.670 align:start position:0%
copying everything individually copying
copying<00:09:30.730><c> that</c><00:09:31.000><c> entire</c><00:09:31.360><c> block</c><00:09:31.570><c> of</c><00:09:31.660><c> data</c><00:09:31.990><c> into</c>

00:09:32.670 --> 00:09:32.680 align:start position:0%
copying that entire block of data into
 

00:09:32.680 --> 00:09:34.560 align:start position:0%
copying that entire block of data into
this<00:09:32.800><c> new</c><00:09:33.010><c> block</c><00:09:33.220><c> of</c><00:09:33.250><c> data</c><00:09:33.519><c> what</c><00:09:34.180><c> we're</c><00:09:34.329><c> doing</c>

00:09:34.560 --> 00:09:34.570 align:start position:0%
this new block of data what we're doing
 

00:09:34.570 --> 00:09:36.569 align:start position:0%
this new block of data what we're doing
instead<00:09:34.810><c> is</c><00:09:34.959><c> we're</c><00:09:35.290><c> simply</c><00:09:35.649><c> assigning</c><00:09:36.160><c> the</c>

00:09:36.569 --> 00:09:36.579 align:start position:0%
instead is we're simply assigning the
 

00:09:36.579 --> 00:09:39.449 align:start position:0%
instead is we're simply assigning the
pointer<00:09:37.060><c> so</c><00:09:37.630><c> we're</c><00:09:37.810><c> taking</c><00:09:38.019><c> the</c><00:09:38.380><c> pointer</c><00:09:38.829><c> to</c><00:09:39.279><c> M</c>

00:09:39.449 --> 00:09:39.459 align:start position:0%
pointer so we're taking the pointer to M
 

00:09:39.459 --> 00:09:40.680 align:start position:0%
pointer so we're taking the pointer to M
data<00:09:39.760><c> which</c><00:09:39.970><c> is</c><00:09:40.089><c> the</c><00:09:40.209><c> pointer</c><00:09:40.480><c> to</c><00:09:40.510><c> the</c>

00:09:40.680 --> 00:09:40.690 align:start position:0%
data which is the pointer to the
 

00:09:40.690 --> 00:09:42.240 align:start position:0%
data which is the pointer to the
existing<00:09:41.290><c> buffer</c><00:09:41.620><c> that</c><00:09:41.740><c> we</c><00:09:41.829><c> had</c><00:09:42.010><c> in</c><00:09:42.130><c> our</c>

00:09:42.240 --> 00:09:42.250 align:start position:0%
existing buffer that we had in our
 

00:09:42.250 --> 00:09:44.519 align:start position:0%
existing buffer that we had in our
original<00:09:42.699><c> string</c><00:09:43.000><c> and</c><00:09:43.240><c> now</c><00:09:44.050><c> we're</c><00:09:44.320><c> saying</c>

00:09:44.519 --> 00:09:44.529 align:start position:0%
original string and now we're saying
 

00:09:44.529 --> 00:09:46.740 align:start position:0%
original string and now we're saying
that<00:09:44.649><c> this</c><00:09:44.920><c> pointer</c><00:09:45.430><c> that</c><00:09:45.850><c> we</c><00:09:46.029><c> have</c><00:09:46.209><c> here</c><00:09:46.510><c> in</c>

00:09:46.740 --> 00:09:46.750 align:start position:0%
that this pointer that we have here in
 

00:09:46.750 --> 00:09:48.990 align:start position:0%
that this pointer that we have here in
this<00:09:46.899><c> new</c><00:09:47.290><c> string</c><00:09:47.980><c> instance</c><00:09:48.699><c> that</c><00:09:48.880><c> we've</c>

00:09:48.990 --> 00:09:49.000 align:start position:0%
this new string instance that we've
 

00:09:49.000 --> 00:09:51.030 align:start position:0%
this new string instance that we've
constructed<00:09:49.300><c> it</c><00:09:50.170><c> actually</c><00:09:50.560><c> points</c><00:09:50.829><c> to</c><00:09:50.889><c> the</c>

00:09:51.030 --> 00:09:51.040 align:start position:0%
constructed it actually points to the
 

00:09:51.040 --> 00:09:52.829 align:start position:0%
constructed it actually points to the
same<00:09:51.250><c> data</c><00:09:51.519><c> so</c><00:09:51.850><c> instead</c><00:09:52.060><c> of</c><00:09:52.120><c> allocating</c><00:09:52.510><c> an</c>

00:09:52.829 --> 00:09:52.839 align:start position:0%
same data so instead of allocating an
 

00:09:52.839 --> 00:09:54.180 align:start position:0%
same data so instead of allocating an
entire<00:09:53.110><c> new</c><00:09:53.260><c> block</c><00:09:53.440><c> of</c><00:09:53.470><c> data</c><00:09:53.680><c> and</c><00:09:53.920><c> copying</c>

00:09:54.180 --> 00:09:54.190 align:start position:0%
entire new block of data and copying
 

00:09:54.190 --> 00:09:54.990 align:start position:0%
entire new block of data and copying
everything<00:09:54.519><c> into</c><00:09:54.730><c> it</c>

00:09:54.990 --> 00:09:55.000 align:start position:0%
everything into it
 

00:09:55.000 --> 00:09:57.329 align:start position:0%
everything into it
we're<00:09:55.660><c> just</c><00:09:55.870><c> essentially</c><00:09:56.529><c> pointing</c><00:09:57.040><c> to</c><00:09:57.220><c> the</c>

00:09:57.329 --> 00:09:57.339 align:start position:0%
we're just essentially pointing to the
 

00:09:57.339 --> 00:10:00.180 align:start position:0%
we're just essentially pointing to the
same<00:09:57.550><c> block</c><00:09:57.760><c> of</c><00:09:57.910><c> data</c><00:09:58.060><c> as</c><00:09:58.389><c> the</c><00:09:58.990><c> old</c><00:09:59.170><c> string</c><00:09:59.529><c> now</c>

00:10:00.180 --> 00:10:00.190 align:start position:0%
same block of data as the old string now
 

00:10:00.190 --> 00:10:01.680 align:start position:0%
same block of data as the old string now
this<00:10:00.399><c> immediately</c><00:10:01.120><c> presents</c><00:10:01.480><c> a</c><00:10:01.540><c> problem</c>

00:10:01.680 --> 00:10:01.690 align:start position:0%
this immediately presents a problem
 

00:10:01.690 --> 00:10:03.420 align:start position:0%
this immediately presents a problem
because<00:10:02.170><c> we</c><00:10:02.290><c> do</c><00:10:02.440><c> still</c><00:10:02.649><c> have</c><00:10:02.680><c> to</c><00:10:03.069><c> string</c>

00:10:03.420 --> 00:10:03.430 align:start position:0%
because we do still have to string
 

00:10:03.430 --> 00:10:06.300 align:start position:0%
because we do still have to string
instances<00:10:04.089><c> so</c><00:10:04.779><c> what</c><00:10:05.050><c> happens</c><00:10:05.410><c> to</c><00:10:05.529><c> the</c><00:10:05.829><c> old</c><00:10:06.069><c> one</c>

00:10:06.300 --> 00:10:06.310 align:start position:0%
instances so what happens to the old one
 

00:10:06.310 --> 00:10:07.889 align:start position:0%
instances so what happens to the old one
when<00:10:06.490><c> it</c><00:10:06.610><c> gets</c><00:10:06.790><c> deleted</c><00:10:07.029><c> well</c><00:10:07.480><c> it's</c><00:10:07.720><c> going</c><00:10:07.839><c> to</c>

00:10:07.889 --> 00:10:07.899 align:start position:0%
when it gets deleted well it's going to
 

00:10:07.899 --> 00:10:10.110 align:start position:0%
when it gets deleted well it's going to
take<00:10:08.139><c> the</c><00:10:08.319><c> data</c><00:10:08.470><c> with</c><00:10:08.800><c> us</c><00:10:08.980><c> so</c><00:10:09.550><c> what</c><00:10:09.819><c> should</c><00:10:10.060><c> we</c>

00:10:10.110 --> 00:10:10.120 align:start position:0%
take the data with us so what should we
 

00:10:10.120 --> 00:10:11.879 align:start position:0%
take the data with us so what should we
do<00:10:10.480><c> and</c><00:10:10.750><c> that's</c><00:10:11.050><c> exactly</c><00:10:11.260><c> why</c><00:10:11.560><c> I</c><00:10:11.589><c> move</c>

00:10:11.879 --> 00:10:11.889 align:start position:0%
do and that's exactly why I move
 

00:10:11.889 --> 00:10:14.400 align:start position:0%
do and that's exactly why I move
constructor<00:10:12.490><c> cannot</c><00:10:12.880><c> end</c><00:10:13.149><c> right</c><00:10:13.630><c> here</c><00:10:13.990><c> you</c>

00:10:14.400 --> 00:10:14.410 align:start position:0%
constructor cannot end right here you
 

00:10:14.410 --> 00:10:16.319 align:start position:0%
constructor cannot end right here you
have<00:10:14.620><c> to</c><00:10:14.740><c> also</c><00:10:14.949><c> take</c><00:10:15.100><c> care</c><00:10:15.639><c> of</c><00:10:15.699><c> the</c><00:10:16.089><c> other</c>

00:10:16.319 --> 00:10:16.329 align:start position:0%
have to also take care of the other
 

00:10:16.329 --> 00:10:19.170 align:start position:0%
have to also take care of the other
string<00:10:16.959><c> the</c><00:10:17.470><c> other</c><00:10:17.620><c> string</c><00:10:17.980><c> instance</c><00:10:18.430><c> who</c>

00:10:19.170 --> 00:10:19.180 align:start position:0%
string the other string instance who
 

00:10:19.180 --> 00:10:20.519 align:start position:0%
string the other string instance who
you're<00:10:19.360><c> basically</c><00:10:19.750><c> taking</c><00:10:20.170><c> control</c><00:10:20.410><c> over</c>

00:10:20.519 --> 00:10:20.529 align:start position:0%
you're basically taking control over
 

00:10:20.529 --> 00:10:22.800 align:start position:0%
you're basically taking control over
you're<00:10:20.860><c> stealing</c><00:10:21.160><c> all</c><00:10:21.519><c> of</c><00:10:21.670><c> that</c><00:10:21.790><c> data</c><00:10:22.029><c> so</c><00:10:22.750><c> to</c>

00:10:22.800 --> 00:10:22.810 align:start position:0%
you're stealing all of that data so to
 

00:10:22.810 --> 00:10:25.620 align:start position:0%
you're stealing all of that data so to
do<00:10:23.050><c> that</c><00:10:23.260><c> we</c><00:10:23.500><c> need</c><00:10:23.680><c> to</c><00:10:23.829><c> also</c><00:10:24.010><c> assign</c><00:10:24.670><c> m</c><00:10:25.000><c> data</c><00:10:25.389><c> to</c>

00:10:25.620 --> 00:10:25.630 align:start position:0%
do that we need to also assign m data to
 

00:10:25.630 --> 00:10:27.210 align:start position:0%
do that we need to also assign m data to
null<00:10:25.779><c> pointer</c><00:10:26.230><c> that's</c><00:10:26.410><c> kind</c><00:10:26.620><c> of</c><00:10:26.709><c> the</c><00:10:26.920><c> the</c>

00:10:27.210 --> 00:10:27.220 align:start position:0%
null pointer that's kind of the the
 

00:10:27.220 --> 00:10:28.860 align:start position:0%
null pointer that's kind of the the
major<00:10:27.490><c> thing</c><00:10:27.850><c> that</c><00:10:27.880><c> we</c><00:10:28.029><c> need</c><00:10:28.240><c> to</c><00:10:28.269><c> do</c><00:10:28.480><c> but</c><00:10:28.690><c> also</c>

00:10:28.860 --> 00:10:28.870 align:start position:0%
major thing that we need to do but also
 

00:10:28.870 --> 00:10:31.860 align:start position:0%
major thing that we need to do but also
what<00:10:29.260><c> we</c><00:10:29.380><c> should</c><00:10:29.560><c> do</c><00:10:29.740><c> is</c><00:10:29.920><c> assign</c><00:10:30.250><c> size</c><00:10:30.639><c> to</c><00:10:31.360><c> be</c><00:10:31.540><c> 0</c>

00:10:31.860 --> 00:10:31.870 align:start position:0%
what we should do is assign size to be 0
 

00:10:31.870 --> 00:10:33.900 align:start position:0%
what we should do is assign size to be 0
so<00:10:32.230><c> by</c><00:10:32.380><c> doing</c><00:10:32.649><c> so</c><00:10:32.860><c> we've</c><00:10:33.069><c> basically</c><00:10:33.310><c> created</c>

00:10:33.900 --> 00:10:33.910 align:start position:0%
so by doing so we've basically created
 

00:10:33.910 --> 00:10:35.430 align:start position:0%
so by doing so we've basically created
something<00:10:34.060><c> called</c><00:10:34.149><c> a</c><00:10:34.329><c> hollow</c><00:10:34.540><c> object</c><00:10:35.079><c> this</c>

00:10:35.430 --> 00:10:35.440 align:start position:0%
something called a hollow object this
 

00:10:35.440 --> 00:10:38.699 align:start position:0%
something called a hollow object this
old<00:10:35.740><c> string</c><00:10:36.310><c> is</c><00:10:36.519><c> now</c><00:10:37.120><c> essentially</c><00:10:37.959><c> just</c><00:10:38.230><c> in</c><00:10:38.470><c> an</c>

00:10:38.699 --> 00:10:38.709 align:start position:0%
old string is now essentially just in an
 

00:10:38.709 --> 00:10:40.590 align:start position:0%
old string is now essentially just in an
kind<00:10:39.190><c> of</c><00:10:39.279><c> like</c><00:10:39.459><c> an</c><00:10:39.550><c> empty</c><00:10:39.760><c> state</c><00:10:40.120><c> and</c><00:10:40.360><c> what</c>

00:10:40.590 --> 00:10:40.600 align:start position:0%
kind of like an empty state and what
 

00:10:40.600 --> 00:10:41.879 align:start position:0%
kind of like an empty state and what
will<00:10:40.720><c> happen</c><00:10:40.839><c> is</c><00:10:41.139><c> when</c><00:10:41.290><c> the</c><00:10:41.440><c> old</c><00:10:41.560><c> string</c>

00:10:41.879 --> 00:10:41.889 align:start position:0%
will happen is when the old string
 

00:10:41.889 --> 00:10:44.490 align:start position:0%
will happen is when the old string
instance<00:10:42.250><c> gets</c><00:10:42.610><c> destroyed</c><00:10:43.180><c> this</c><00:10:43.899><c> delete</c><00:10:44.319><c> m</c>

00:10:44.490 --> 00:10:44.500 align:start position:0%
instance gets destroyed this delete m
 

00:10:44.500 --> 00:10:46.230 align:start position:0%
instance gets destroyed this delete m
data<00:10:44.769><c> will</c><00:10:45.040><c> actually</c><00:10:45.399><c> be</c><00:10:45.550><c> deleting</c><00:10:46.029><c> null</c>

00:10:46.230 --> 00:10:46.240 align:start position:0%
data will actually be deleting null
 

00:10:46.240 --> 00:10:48.090 align:start position:0%
data will actually be deleting null
pointer<00:10:46.690><c> and</c><00:10:46.899><c> obviously</c><00:10:47.260><c> deleting</c><00:10:47.949><c> null</c>

00:10:48.090 --> 00:10:48.100 align:start position:0%
pointer and obviously deleting null
 

00:10:48.100 --> 00:10:49.980 align:start position:0%
pointer and obviously deleting null
pointer<00:10:48.550><c> just</c><00:10:48.970><c> doesn't</c><00:10:49.300><c> do</c><00:10:49.449><c> anything</c><00:10:49.779><c> because</c>

00:10:49.980 --> 00:10:49.990 align:start position:0%
pointer just doesn't do anything because
 

00:10:49.990 --> 00:10:51.660 align:start position:0%
pointer just doesn't do anything because
there's<00:10:50.319><c> nothing</c><00:10:50.470><c> to</c><00:10:50.709><c> delete</c><00:10:51.010><c> that</c><00:10:51.279><c> pointer</c>

00:10:51.660 --> 00:10:51.670 align:start position:0%
there's nothing to delete that pointer
 

00:10:51.670 --> 00:10:53.519 align:start position:0%
there's nothing to delete that pointer
is<00:10:51.699><c> pointing</c><00:10:51.850><c> to</c><00:10:52.300><c> null</c><00:10:52.449><c> so</c><00:10:52.779><c> we've</c><00:10:52.899><c> effectively</c>

00:10:53.519 --> 00:10:53.529 align:start position:0%
is pointing to null so we've effectively
 

00:10:53.529 --> 00:10:55.949 align:start position:0%
is pointing to null so we've effectively
just<00:10:53.860><c> taken</c><00:10:54.370><c> over</c><00:10:54.490><c> that</c><00:10:54.730><c> old</c><00:10:55.029><c> string</c><00:10:55.449><c> instead</c>

00:10:55.949 --> 00:10:55.959 align:start position:0%
just taken over that old string instead
 

00:10:55.959 --> 00:10:57.900 align:start position:0%
just taken over that old string instead
of<00:10:56.079><c> doing</c><00:10:56.350><c> a</c><00:10:56.440><c> deep</c><00:10:56.680><c> copy</c><00:10:57.010><c> by</c><00:10:57.279><c> copying</c><00:10:57.730><c> all</c><00:10:57.880><c> the</c>

00:10:57.900 --> 00:10:57.910 align:start position:0%
of doing a deep copy by copying all the
 

00:10:57.910 --> 00:10:59.670 align:start position:0%
of doing a deep copy by copying all the
data<00:10:58.300><c> and</c><00:10:58.480><c> allocating</c><00:10:58.959><c> new</c><00:10:59.110><c> memory</c><00:10:59.470><c> we've</c>

00:10:59.670 --> 00:10:59.680 align:start position:0%
data and allocating new memory we've
 

00:10:59.680 --> 00:11:01.860 align:start position:0%
data and allocating new memory we've
essentially<00:11:00.250><c> done</c><00:11:00.519><c> as</c><00:11:00.699><c> a</c><00:11:00.880><c> shallow</c><00:11:01.180><c> copy</c><00:11:01.480><c> we've</c>

00:11:01.860 --> 00:11:01.870 align:start position:0%
essentially done as a shallow copy we've
 

00:11:01.870 --> 00:11:04.050 align:start position:0%
essentially done as a shallow copy we've
just<00:11:02.110><c> kind</c><00:11:02.199><c> of</c><00:11:02.319><c> rewired</c><00:11:02.829><c> the</c><00:11:03.100><c> pointers</c><00:11:03.519><c> so</c><00:11:03.910><c> now</c>

00:11:04.050 --> 00:11:04.060 align:start position:0%
just kind of rewired the pointers so now
 

00:11:04.060 --> 00:11:06.059 align:start position:0%
just kind of rewired the pointers so now
everything<00:11:04.600><c> should</c><00:11:04.810><c> be</c><00:11:04.839><c> good</c><00:11:05.319><c> right</c><00:11:05.740><c> let's</c>

00:11:06.059 --> 00:11:06.069 align:start position:0%
everything should be good right let's
 

00:11:06.069 --> 00:11:07.710 align:start position:0%
everything should be good right let's
run<00:11:06.339><c> this</c><00:11:06.519><c> and</c><00:11:06.790><c> see</c><00:11:06.819><c> what</c><00:11:07.089><c> we</c><00:11:07.149><c> get</c><00:11:07.449><c> and</c>

00:11:07.710 --> 00:11:07.720 align:start position:0%
run this and see what we get and
 

00:11:07.720 --> 00:11:09.119 align:start position:0%
run this and see what we get and
you<00:11:07.779><c> can</c><00:11:07.930><c> see</c><00:11:08.110><c> that</c><00:11:08.350><c> interestingly</c><00:11:08.680><c> we</c><00:11:09.100><c> have</c>

00:11:09.119 --> 00:11:09.129 align:start position:0%
you can see that interestingly we have
 

00:11:09.129 --> 00:11:11.790 align:start position:0%
you can see that interestingly we have
created<00:11:09.730><c> copied</c><00:11:10.180><c> destroyed</c><00:11:10.810><c> and</c><00:11:11.139><c> Cherno</c><00:11:11.589><c> so</c>

00:11:11.790 --> 00:11:11.800 align:start position:0%
created copied destroyed and Cherno so
 

00:11:11.800 --> 00:11:13.259 align:start position:0%
created copied destroyed and Cherno so
interestingly<00:11:11.949><c> the</c><00:11:12.579><c> Cherno</c><00:11:12.910><c> is</c><00:11:13.089><c> being</c>

00:11:13.259 --> 00:11:13.269 align:start position:0%
interestingly the Cherno is being
 

00:11:13.269 --> 00:11:14.819 align:start position:0%
interestingly the Cherno is being
printed<00:11:13.569><c> after</c><00:11:13.870><c> destroyed</c><00:11:14.379><c> because</c><00:11:14.649><c> that's</c>

00:11:14.819 --> 00:11:14.829 align:start position:0%
printed after destroyed because that's
 

00:11:14.829 --> 00:11:16.530 align:start position:0%
printed after destroyed because that's
actually<00:11:14.980><c> our</c><00:11:15.279><c> temporary</c><00:11:15.759><c> getting</c><00:11:16.180><c> destroy</c>

00:11:16.530 --> 00:11:16.540 align:start position:0%
actually our temporary getting destroy
 

00:11:16.540 --> 00:11:18.269 align:start position:0%
actually our temporary getting destroy
so<00:11:16.720><c> that</c><00:11:16.870><c> seems</c><00:11:17.139><c> to</c><00:11:17.290><c> a</c><00:11:17.319><c> function</c><00:11:17.860><c> this</c><00:11:18.009><c> didn't</c>

00:11:18.269 --> 00:11:18.279 align:start position:0%
so that seems to a function this didn't
 

00:11:18.279 --> 00:11:20.490 align:start position:0%
so that seems to a function this didn't
crash<00:11:18.459><c> or</c><00:11:18.639><c> anything</c><00:11:18.750><c> however</c><00:11:19.750><c> we</c><00:11:20.019><c> still</c><00:11:20.230><c> have</c>

00:11:20.490 --> 00:11:20.500 align:start position:0%
crash or anything however we still have
 

00:11:20.500 --> 00:11:22.829 align:start position:0%
crash or anything however we still have
a<00:11:20.790><c> copied</c><00:11:21.790><c> which</c><00:11:22.029><c> is</c><00:11:22.149><c> a</c><00:11:22.180><c> little</c><00:11:22.569><c> bit</c><00:11:22.660><c> odd</c>

00:11:22.829 --> 00:11:22.839 align:start position:0%
a copied which is a little bit odd
 

00:11:22.839 --> 00:11:24.990 align:start position:0%
a copied which is a little bit odd
because<00:11:23.350><c> you</c><00:11:23.920><c> know</c><00:11:24.009><c> I</c><00:11:24.040><c> mean</c><00:11:24.129><c> we</c><00:11:24.430><c> provided</c><00:11:24.879><c> this</c>

00:11:24.990 --> 00:11:25.000 align:start position:0%
because you know I mean we provided this
 

00:11:25.000 --> 00:11:26.939 align:start position:0%
because you know I mean we provided this
constructor<00:11:25.569><c> what's</c><00:11:25.839><c> going</c><00:11:26.110><c> on</c><00:11:26.259><c> and</c><00:11:26.500><c> the</c>

00:11:26.939 --> 00:11:26.949 align:start position:0%
constructor what's going on and the
 

00:11:26.949 --> 00:11:29.129 align:start position:0%
constructor what's going on and the
final<00:11:27.370><c> answer</c><00:11:27.579><c> is</c><00:11:28.000><c> that</c><00:11:28.329><c> what's</c><00:11:28.959><c> actually</c>

00:11:29.129 --> 00:11:29.139 align:start position:0%
final answer is that what's actually
 

00:11:29.139 --> 00:11:30.929 align:start position:0%
final answer is that what's actually
happening<00:11:29.649><c> is</c><00:11:29.829><c> the</c><00:11:30.040><c> copy</c><00:11:30.220><c> constructor</c><00:11:30.790><c> is</c>

00:11:30.929 --> 00:11:30.939 align:start position:0%
happening is the copy constructor is
 

00:11:30.939 --> 00:11:32.550 align:start position:0%
happening is the copy constructor is
still<00:11:31.180><c> being</c><00:11:31.389><c> called</c><00:11:31.629><c> over</c><00:11:31.899><c> here</c><00:11:32.259><c> when</c><00:11:32.439><c> we</c>

00:11:32.550 --> 00:11:32.560 align:start position:0%
still being called over here when we
 

00:11:32.560 --> 00:11:34.230 align:start position:0%
still being called over here when we
actually<00:11:32.709><c> assign</c><00:11:33.189><c> name</c><00:11:33.459><c> like</c><00:11:33.670><c> this</c><00:11:33.939><c> it's</c>

00:11:34.230 --> 00:11:34.240 align:start position:0%
actually assign name like this it's
 

00:11:34.240 --> 00:11:36.660 align:start position:0%
actually assign name like this it's
actually<00:11:34.420><c> still</c><00:11:34.839><c> using</c><00:11:35.259><c> this</c><00:11:35.379><c> constructor</c><00:11:36.100><c> to</c>

00:11:36.660 --> 00:11:36.670 align:start position:0%
actually still using this constructor to
 

00:11:36.670 --> 00:11:39.119 align:start position:0%
actually still using this constructor to
get<00:11:37.180><c> it</c><00:11:37.329><c> to</c><00:11:37.540><c> use</c><00:11:37.870><c> the</c><00:11:38.110><c> move</c><00:11:38.350><c> constructor</c><00:11:39.009><c> you</c>

00:11:39.119 --> 00:11:39.129 align:start position:0%
get it to use the move constructor you
 

00:11:39.129 --> 00:11:43.050 align:start position:0%
get it to use the move constructor you
have<00:11:39.370><c> to</c><00:11:39.550><c> actually</c><00:11:40.029><c> explicitly</c><00:11:41.069><c> cast</c><00:11:42.069><c> it</c><00:11:42.370><c> to</c><00:11:42.550><c> a</c>

00:11:43.050 --> 00:11:43.060 align:start position:0%
have to actually explicitly cast it to a
 

00:11:43.060 --> 00:11:45.689 align:start position:0%
have to actually explicitly cast it to a
temporary<00:11:43.779><c> like</c><00:11:44.110><c> this</c><00:11:44.410><c> and</c><00:11:44.680><c> if</c><00:11:45.160><c> we</c><00:11:45.339><c> run</c><00:11:45.519><c> this</c>

00:11:45.689 --> 00:11:45.699 align:start position:0%
temporary like this and if we run this
 

00:11:45.699 --> 00:11:47.670 align:start position:0%
temporary like this and if we run this
code<00:11:45.970><c> you'll</c><00:11:46.329><c> see</c><00:11:46.540><c> that</c><00:11:46.689><c> we</c><00:11:46.810><c> have</c><00:11:46.990><c> a</c><00:11:47.019><c> moved</c><00:11:47.410><c> now</c>

00:11:47.670 --> 00:11:47.680 align:start position:0%
code you'll see that we have a moved now
 

00:11:47.680 --> 00:11:49.410 align:start position:0%
code you'll see that we have a moved now
instead<00:11:48.160><c> of</c><00:11:48.220><c> copies</c><00:11:48.670><c> so</c><00:11:48.850><c> we've</c><00:11:49.000><c> successfully</c>

00:11:49.410 --> 00:11:49.420 align:start position:0%
instead of copies so we've successfully
 

00:11:49.420 --> 00:11:52.410 align:start position:0%
instead of copies so we've successfully
only<00:11:50.160><c> allocated</c><00:11:51.160><c> memory</c><00:11:51.279><c> once</c><00:11:51.759><c> and</c><00:11:52.089><c> managed</c>

00:11:52.410 --> 00:11:52.420 align:start position:0%
only allocated memory once and managed
 

00:11:52.420 --> 00:11:54.300 align:start position:0%
only allocated memory once and managed
to<00:11:52.449><c> move</c><00:11:52.750><c> the</c><00:11:52.959><c> string</c><00:11:53.230><c> into</c><00:11:53.649><c> the</c><00:11:53.680><c> entity</c><00:11:54.069><c> class</c>

00:11:54.300 --> 00:11:54.310 align:start position:0%
to move the string into the entity class
 

00:11:54.310 --> 00:11:56.280 align:start position:0%
to move the string into the entity class
now<00:11:54.699><c> in</c><00:11:54.819><c> practice</c><00:11:55.209><c> you</c><00:11:55.360><c> wouldn't</c><00:11:55.629><c> really</c><00:11:55.779><c> cast</c>

00:11:56.280 --> 00:11:56.290 align:start position:0%
now in practice you wouldn't really cast
 

00:11:56.290 --> 00:11:57.900 align:start position:0%
now in practice you wouldn't really cast
it<00:11:56.500><c> to</c><00:11:56.589><c> an</c><00:11:56.740><c> r-value</c><00:11:56.889><c> reference</c><00:11:57.519><c> like</c><00:11:57.670><c> this</c>

00:11:57.900 --> 00:11:57.910 align:start position:0%
it to an r-value reference like this
 

00:11:57.910 --> 00:11:59.129 align:start position:0%
it to an r-value reference like this
instead<00:11:58.360><c> you</c><00:11:58.449><c> would</c><00:11:58.569><c> use</c><00:11:58.779><c> something</c><00:11:58.810><c> called</c>

00:11:59.129 --> 00:11:59.139 align:start position:0%
instead you would use something called
 

00:11:59.139 --> 00:12:01.769 align:start position:0%
instead you would use something called
STD<00:11:59.800><c> move</c><00:12:00.040><c> which</c><00:12:00.310><c> essentially</c><00:12:01.089><c> does</c><00:12:01.329><c> the</c><00:12:01.569><c> same</c>

00:12:01.769 --> 00:12:01.779 align:start position:0%
STD move which essentially does the same
 

00:12:01.779 --> 00:12:02.369 align:start position:0%
STD move which essentially does the same
thing

00:12:02.369 --> 00:12:02.379 align:start position:0%
thing
 

00:12:02.379 --> 00:12:04.319 align:start position:0%
thing
but<00:12:02.560><c> we'll</c><00:12:02.680><c> have</c><00:12:02.829><c> an</c><00:12:02.949><c> entire</c><00:12:03.069><c> video</c><00:12:03.579><c> on</c><00:12:03.790><c> STD</c>

00:12:04.319 --> 00:12:04.329 align:start position:0%
but we'll have an entire video on STD
 

00:12:04.329 --> 00:12:05.999 align:start position:0%
but we'll have an entire video on STD
move<00:12:04.540><c> and</c><00:12:04.750><c> all</c><00:12:04.930><c> the</c><00:12:05.079><c> stuff</c><00:12:05.319><c> that's</c><00:12:05.529><c> used</c><00:12:05.709><c> for</c>

00:12:05.999 --> 00:12:06.009 align:start position:0%
move and all the stuff that's used for
 

00:12:06.009 --> 00:12:08.220 align:start position:0%
move and all the stuff that's used for
in<00:12:06.279><c> the</c><00:12:06.759><c> future</c><00:12:06.910><c> so</c><00:12:07.300><c> let's</c><00:12:07.449><c> run</c><00:12:07.600><c> this</c><00:12:07.720><c> code</c><00:12:07.959><c> and</c>

00:12:08.220 --> 00:12:08.230 align:start position:0%
in the future so let's run this code and
 

00:12:08.230 --> 00:12:09.449 align:start position:0%
in the future so let's run this code and
you<00:12:08.350><c> can</c><00:12:08.500><c> see</c><00:12:08.649><c> that</c><00:12:08.769><c> we</c><00:12:08.889><c> still</c><00:12:09.069><c> have</c><00:12:09.220><c> the</c><00:12:09.310><c> same</c>

00:12:09.449 --> 00:12:09.459 align:start position:0%
you can see that we still have the same
 

00:12:09.459 --> 00:12:11.819 align:start position:0%
you can see that we still have the same
result<00:12:09.790><c> created</c><00:12:10.209><c> moved</c><00:12:10.449><c> destroyed</c><00:12:11.050><c> and</c><00:12:11.350><c> then</c>

00:12:11.819 --> 00:12:11.829 align:start position:0%
result created moved destroyed and then
 

00:12:11.829 --> 00:12:12.990 align:start position:0%
result created moved destroyed and then
we've<00:12:12.009><c> managed</c><00:12:12.279><c> to</c><00:12:12.399><c> print</c><00:12:12.610><c> our</c><00:12:12.730><c> string</c>

00:12:12.990 --> 00:12:13.000 align:start position:0%
we've managed to print our string
 

00:12:13.000 --> 00:12:14.579 align:start position:0%
we've managed to print our string
successfully<00:12:13.569><c> everything</c><00:12:13.990><c> it</c><00:12:14.079><c> seems</c><00:12:14.259><c> to</c><00:12:14.410><c> run</c>

00:12:14.579 --> 00:12:14.589 align:start position:0%
successfully everything it seems to run
 

00:12:14.589 --> 00:12:17.189 align:start position:0%
successfully everything it seems to run
so<00:12:15.160><c> the</c><00:12:15.399><c> the</c><00:12:15.639><c> major</c><00:12:15.850><c> point</c><00:12:16.240><c> of</c><00:12:16.420><c> this</c><00:12:16.600><c> is</c><00:12:16.870><c> that</c>

00:12:17.189 --> 00:12:17.199 align:start position:0%
so the the major point of this is that
 

00:12:17.199 --> 00:12:19.049 align:start position:0%
so the the major point of this is that
we've<00:12:17.319><c> saved</c><00:12:17.620><c> using</c><00:12:18.009><c> this</c><00:12:18.220><c> copy</c><00:12:18.459><c> constructor</c>

00:12:19.049 --> 00:12:19.059 align:start position:0%
we've saved using this copy constructor
 

00:12:19.059 --> 00:12:20.850 align:start position:0%
we've saved using this copy constructor
to<00:12:19.209><c> actually</c><00:12:19.629><c> allocate</c><00:12:19.899><c> a</c><00:12:20.290><c> new</c><00:12:20.439><c> block</c><00:12:20.740><c> of</c>

00:12:20.850 --> 00:12:20.860 align:start position:0%
to actually allocate a new block of
 

00:12:20.860 --> 00:12:22.799 align:start position:0%
to actually allocate a new block of
memory<00:12:21.040><c> and</c><00:12:21.399><c> copy</c><00:12:21.699><c> it</c><00:12:21.939><c> we've</c><00:12:22.089><c> simply</c><00:12:22.449><c> managed</c>

00:12:22.799 --> 00:12:22.809 align:start position:0%
memory and copy it we've simply managed
 

00:12:22.809 --> 00:12:25.379 align:start position:0%
memory and copy it we've simply managed
to<00:12:23.050><c> move</c><00:12:23.379><c> that</c><00:12:24.009><c> instead</c><00:12:24.579><c> so</c><00:12:24.819><c> we</c><00:12:24.850><c> still</c><00:12:25.209><c> only</c>

00:12:25.379 --> 00:12:25.389 align:start position:0%
to move that instead so we still only
 

00:12:25.389 --> 00:12:28.170 align:start position:0%
to move that instead so we still only
have<00:12:25.689><c> a</c><00:12:25.899><c> single</c><00:12:26.189><c> allocation</c><00:12:27.189><c> which</c><00:12:27.459><c> is</c><00:12:27.670><c> great</c>

00:12:28.170 --> 00:12:28.180 align:start position:0%
have a single allocation which is great
 

00:12:28.180 --> 00:12:30.360 align:start position:0%
have a single allocation which is great
okay<00:12:28.629><c> so</c><00:12:28.689><c> I</c><00:12:28.839><c> hope</c><00:12:29.019><c> that</c><00:12:29.050><c> that</c><00:12:29.290><c> was</c><00:12:29.500><c> somewhat</c><00:12:30.160><c> of</c>

00:12:30.360 --> 00:12:30.370 align:start position:0%
okay so I hope that that was somewhat of
 

00:12:30.370 --> 00:12:32.699 align:start position:0%
okay so I hope that that was somewhat of
a<00:12:30.519><c> good</c><00:12:30.819><c> introduction</c><00:12:31.360><c> to</c><00:12:31.569><c> move</c><00:12:32.019><c> semantics</c><00:12:32.589><c> of</c>

00:12:32.699 --> 00:12:32.709 align:start position:0%
a good introduction to move semantics of
 

00:12:32.709 --> 00:12:33.869 align:start position:0%
a good introduction to move semantics of
course<00:12:32.889><c> there</c><00:12:33.040><c> are</c><00:12:33.129><c> so</c><00:12:33.279><c> many</c><00:12:33.370><c> more</c><00:12:33.610><c> things</c><00:12:33.819><c> we</c>

00:12:33.869 --> 00:12:33.879 align:start position:0%
course there are so many more things we
 

00:12:33.879 --> 00:12:36.059 align:start position:0%
course there are so many more things we
could<00:12:34.089><c> cover</c><00:12:34.269><c> such</c><00:12:34.660><c> as</c><00:12:34.870><c> SCE</c><00:12:35.319><c> move</c><00:12:35.620><c> and</c><00:12:35.829><c> don't</c>

00:12:36.059 --> 00:12:36.069 align:start position:0%
could cover such as SCE move and don't
 

00:12:36.069 --> 00:12:38.189 align:start position:0%
could cover such as SCE move and don't
worry<00:12:36.309><c> we</c><00:12:36.939><c> will</c><00:12:37.120><c> in</c><00:12:37.360><c> future</c><00:12:37.569><c> videos</c><00:12:38.019><c> but</c><00:12:38.139><c> I</c>

00:12:38.189 --> 00:12:38.199 align:start position:0%
worry we will in future videos but I
 

00:12:38.199 --> 00:12:39.540 align:start position:0%
worry we will in future videos but I
hope<00:12:38.319><c> you</c><00:12:38.410><c> guys</c><00:12:38.529><c> enjoyed</c><00:12:38.920><c> this</c><00:12:39.009><c> video</c><00:12:39.160><c> if</c><00:12:39.309><c> you</c>

00:12:39.540 --> 00:12:39.550 align:start position:0%
hope you guys enjoyed this video if you
 

00:12:39.550 --> 00:12:40.860 align:start position:0%
hope you guys enjoyed this video if you
did<00:12:39.670><c> please</c><00:12:39.730><c> hit</c><00:12:39.970><c> that</c><00:12:40.240><c> like</c><00:12:40.420><c> button</c><00:12:40.449><c> don't</c>

00:12:40.860 --> 00:12:40.870 align:start position:0%
did please hit that like button don't
 

00:12:40.870 --> 00:12:42.179 align:start position:0%
did please hit that like button don't
forget<00:12:41.170><c> that</c><00:12:41.259><c> you</c><00:12:41.350><c> can</c><00:12:41.410><c> try</c><00:12:41.649><c> our</c><00:12:41.769><c> Skillshare</c>

00:12:42.179 --> 00:12:42.189 align:start position:0%
forget that you can try our Skillshare
 

00:12:42.189 --> 00:12:44.040 align:start position:0%
forget that you can try our Skillshare
free<00:12:42.490><c> for</c><00:12:42.730><c> two</c><00:12:42.910><c> months</c><00:12:43.209><c> by</c><00:12:43.360><c> clicking</c><00:12:43.750><c> the</c><00:12:43.839><c> link</c>

00:12:44.040 --> 00:12:44.050 align:start position:0%
free for two months by clicking the link
 

00:12:44.050 --> 00:12:45.869 align:start position:0%
free for two months by clicking the link
in<00:12:44.199><c> the</c><00:12:44.350><c> description</c><00:12:44.740><c> below</c><00:12:44.829><c> and</c><00:12:45.519><c> I</c><00:12:45.639><c> will</c><00:12:45.699><c> see</c>

00:12:45.869 --> 00:12:45.879 align:start position:0%
in the description below and I will see
 

00:12:45.879 --> 00:12:46.470 align:start position:0%
in the description below and I will see
you<00:12:45.939><c> guys</c><00:12:46.059><c> later</c>

00:12:46.470 --> 00:12:46.480 align:start position:0%
you guys later
 

00:12:46.480 --> 00:12:49.080 align:start position:0%
you guys later
good<00:12:46.689><c> bye</c>

00:12:49.080 --> 00:12:49.090 align:start position:0%
 
 

00:12:49.090 --> 00:13:09.889 align:start position:0%
 
[Music]

