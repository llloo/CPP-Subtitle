WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.510 align:start position:0%
 
hey<00:00:00.160><c> what's</c><00:00:00.320><c> up</c><00:00:00.399><c> guys</c><00:00:00.640><c> my</c><00:00:00.799><c> name</c><00:00:00.960><c> is</c><00:00:01.120><c> ciano</c>

00:00:01.510 --> 00:00:01.520 align:start position:0%
hey what's up guys my name is ciano
 

00:00:01.520 --> 00:00:04.309 align:start position:0%
hey what's up guys my name is ciano
welcome<00:00:02.000><c> back</c><00:00:02.240><c> to</c><00:00:02.399><c> my</c><00:00:02.720><c> c</c><00:00:02.960><c> plus</c><00:00:03.199><c> plus</c><00:00:03.600><c> series</c>

00:00:04.309 --> 00:00:04.319 align:start position:0%
welcome back to my c plus plus series
 

00:00:04.319 --> 00:00:05.749 align:start position:0%
welcome back to my c plus plus series
so<00:00:04.480><c> today</c><00:00:04.720><c> we're</c><00:00:04.880><c> going</c><00:00:04.960><c> to</c><00:00:05.040><c> be</c><00:00:05.200><c> talking</c><00:00:05.600><c> all</c>

00:00:05.749 --> 00:00:05.759 align:start position:0%
so today we're going to be talking all
 

00:00:05.759 --> 00:00:07.430 align:start position:0%
so today we're going to be talking all
about<00:00:06.080><c> iterators</c><00:00:06.640><c> this</c><00:00:06.720><c> is</c><00:00:06.879><c> going</c><00:00:06.960><c> to</c><00:00:07.120><c> serve</c>

00:00:07.430 --> 00:00:07.440 align:start position:0%
about iterators this is going to serve
 

00:00:07.440 --> 00:00:08.150 align:start position:0%
about iterators this is going to serve
as<00:00:07.600><c> more</c><00:00:07.759><c> of</c><00:00:07.919><c> an</c>

00:00:08.150 --> 00:00:08.160 align:start position:0%
as more of an
 

00:00:08.160 --> 00:00:11.110 align:start position:0%
as more of an
introductory<00:00:09.040><c> video</c><00:00:09.840><c> to</c><00:00:10.080><c> iterators</c><00:00:10.639><c> a</c><00:00:10.800><c> lot</c><00:00:10.960><c> of</c>

00:00:11.110 --> 00:00:11.120 align:start position:0%
introductory video to iterators a lot of
 

00:00:11.120 --> 00:00:12.789 align:start position:0%
introductory video to iterators a lot of
people<00:00:11.360><c> have</c><00:00:11.519><c> been</c><00:00:11.759><c> asking</c><00:00:12.080><c> me</c><00:00:12.320><c> what</c><00:00:12.559><c> are</c>

00:00:12.789 --> 00:00:12.799 align:start position:0%
people have been asking me what are
 

00:00:12.799 --> 00:00:14.310 align:start position:0%
people have been asking me what are
iterators<00:00:13.360><c> should</c><00:00:13.519><c> i</c><00:00:13.679><c> be</c><00:00:13.840><c> using</c>

00:00:14.310 --> 00:00:14.320 align:start position:0%
iterators should i be using
 

00:00:14.320 --> 00:00:15.990 align:start position:0%
iterators should i be using
iterators<00:00:14.960><c> have</c><00:00:15.120><c> they</c><00:00:15.360><c> been</c><00:00:15.679><c> somewhat</c>

00:00:15.990 --> 00:00:16.000 align:start position:0%
iterators have they been somewhat
 

00:00:16.000 --> 00:00:18.550 align:start position:0%
iterators have they been somewhat
replaced<00:00:17.039><c> in</c><00:00:17.199><c> the</c><00:00:17.359><c> language</c>

00:00:18.550 --> 00:00:18.560 align:start position:0%
replaced in the language
 

00:00:18.560 --> 00:00:20.230 align:start position:0%
replaced in the language
this<00:00:18.800><c> especially</c><00:00:19.359><c> comes</c><00:00:19.680><c> up</c><00:00:19.760><c> a</c><00:00:19.840><c> lot</c><00:00:20.000><c> in</c>

00:00:20.230 --> 00:00:20.240 align:start position:0%
this especially comes up a lot in
 

00:00:20.240 --> 00:00:22.070 align:start position:0%
this especially comes up a lot in
universities<00:00:20.880><c> who</c><00:00:21.039><c> are</c><00:00:21.119><c> still</c><00:00:21.359><c> maybe</c>

00:00:22.070 --> 00:00:22.080 align:start position:0%
universities who are still maybe
 

00:00:22.080 --> 00:00:24.150 align:start position:0%
universities who are still maybe
not<00:00:22.320><c> using</c><00:00:22.560><c> the</c><00:00:22.720><c> latest</c><00:00:23.039><c> class</c><00:00:23.519><c> plus</c><00:00:23.760><c> standard</c>

00:00:24.150 --> 00:00:24.160 align:start position:0%
not using the latest class plus standard
 

00:00:24.160 --> 00:00:25.990 align:start position:0%
not using the latest class plus standard
in<00:00:24.240><c> fact</c><00:00:24.640><c> a</c><00:00:24.800><c> lot</c><00:00:24.960><c> of</c><00:00:25.039><c> people</c><00:00:25.359><c> message</c><00:00:25.760><c> me</c><00:00:25.920><c> and</c>

00:00:25.990 --> 00:00:26.000 align:start position:0%
in fact a lot of people message me and
 

00:00:26.000 --> 00:00:27.189 align:start position:0%
in fact a lot of people message me and
say<00:00:26.320><c> help</c><00:00:26.560><c> me</c>

00:00:27.189 --> 00:00:27.199 align:start position:0%
say help me
 

00:00:27.199 --> 00:00:30.310 align:start position:0%
say help me
my<00:00:27.439><c> university</c><00:00:28.160><c> is</c><00:00:28.320><c> using</c><00:00:28.640><c> c</c><00:00:29.119><c> plus</c><00:00:29.359><c> 03</c><00:00:29.920><c> which</c>

00:00:30.310 --> 00:00:30.320 align:start position:0%
my university is using c plus 03 which
 

00:00:30.320 --> 00:00:32.470 align:start position:0%
my university is using c plus 03 which
is<00:00:30.640><c> a</c><00:00:30.800><c> shame</c><00:00:31.119><c> because</c><00:00:31.359><c> it's</c><00:00:31.519><c> 20</c><00:00:31.760><c> 20</c><00:00:32.160><c> but</c><00:00:32.239><c> we're</c>

00:00:32.470 --> 00:00:32.480 align:start position:0%
is a shame because it's 20 20 but we're
 

00:00:32.480 --> 00:00:34.389 align:start position:0%
is a shame because it's 20 20 but we're
not<00:00:32.640><c> gonna</c><00:00:32.800><c> get</c><00:00:33.040><c> into</c><00:00:33.280><c> the</c><00:00:33.520><c> educational</c>

00:00:34.389 --> 00:00:34.399 align:start position:0%
not gonna get into the educational
 

00:00:34.399 --> 00:00:35.110 align:start position:0%
not gonna get into the educational
system

00:00:35.110 --> 00:00:35.120 align:start position:0%
system
 

00:00:35.120 --> 00:00:37.750 align:start position:0%
system
in<00:00:35.280><c> this</c><00:00:35.440><c> video</c><00:00:36.000><c> the</c><00:00:36.160><c> point</c><00:00:36.559><c> is</c><00:00:36.960><c> what</c><00:00:37.280><c> are</c>

00:00:37.750 --> 00:00:37.760 align:start position:0%
in this video the point is what are
 

00:00:37.760 --> 00:00:38.549 align:start position:0%
in this video the point is what are
iterators

00:00:38.549 --> 00:00:38.559 align:start position:0%
iterators
 

00:00:38.559 --> 00:00:40.869 align:start position:0%
iterators
and<00:00:38.960><c> do</c><00:00:39.200><c> i</c><00:00:39.360><c> really</c><00:00:39.680><c> need</c><00:00:39.920><c> to</c><00:00:40.079><c> know</c><00:00:40.320><c> how</c><00:00:40.480><c> to</c><00:00:40.640><c> use</c>

00:00:40.869 --> 00:00:40.879 align:start position:0%
and do i really need to know how to use
 

00:00:40.879 --> 00:00:42.709 align:start position:0%
and do i really need to know how to use
them<00:00:41.520><c> so</c><00:00:41.680><c> iterators</c><00:00:42.399><c> are</c>

00:00:42.709 --> 00:00:42.719 align:start position:0%
them so iterators are
 

00:00:42.719 --> 00:00:44.709 align:start position:0%
them so iterators are
essentially<00:00:43.280><c> a</c><00:00:43.440><c> way</c><00:00:43.680><c> for</c><00:00:43.840><c> you</c><00:00:44.079><c> to</c><00:00:44.320><c> iterate</c>

00:00:44.709 --> 00:00:44.719 align:start position:0%
essentially a way for you to iterate
 

00:00:44.719 --> 00:00:46.869 align:start position:0%
essentially a way for you to iterate
over<00:00:44.960><c> a</c><00:00:45.120><c> collection</c><00:00:45.600><c> of</c><00:00:45.840><c> elements</c>

00:00:46.869 --> 00:00:46.879 align:start position:0%
over a collection of elements
 

00:00:46.879 --> 00:00:49.510 align:start position:0%
over a collection of elements
now<00:00:47.200><c> the</c><00:00:47.360><c> thing</c><00:00:47.680><c> is</c><00:00:48.000><c> an</c><00:00:48.239><c> iterator</c><00:00:48.879><c> is</c><00:00:49.200><c> really</c>

00:00:49.510 --> 00:00:49.520 align:start position:0%
now the thing is an iterator is really
 

00:00:49.520 --> 00:00:51.670 align:start position:0%
now the thing is an iterator is really
up<00:00:49.680><c> to</c><00:00:49.840><c> the</c><00:00:50.079><c> implementation</c><00:00:50.879><c> in</c><00:00:50.960><c> terms</c><00:00:51.280><c> of</c><00:00:51.440><c> how</c>

00:00:51.670 --> 00:00:51.680 align:start position:0%
up to the implementation in terms of how
 

00:00:51.680 --> 00:00:53.270 align:start position:0%
up to the implementation in terms of how
it's<00:00:51.920><c> used</c><00:00:52.239><c> meaning</c><00:00:52.640><c> that</c>

00:00:53.270 --> 00:00:53.280 align:start position:0%
it's used meaning that
 

00:00:53.280 --> 00:00:55.750 align:start position:0%
it's used meaning that
i<00:00:53.520><c> could</c><00:00:53.760><c> write</c><00:00:54.079><c> a</c><00:00:54.320><c> class</c><00:00:54.719><c> called</c><00:00:55.120><c> apple</c><00:00:55.600><c> and</c>

00:00:55.750 --> 00:00:55.760 align:start position:0%
i could write a class called apple and
 

00:00:55.760 --> 00:00:56.470 align:start position:0%
i could write a class called apple and
then<00:00:56.000><c> add</c><00:00:56.239><c> an</c>

00:00:56.470 --> 00:00:56.480 align:start position:0%
then add an
 

00:00:56.480 --> 00:00:59.270 align:start position:0%
then add an
iterator<00:00:57.039><c> to</c><00:00:57.280><c> it</c><00:00:58.239><c> that</c><00:00:58.480><c> might</c><00:00:58.640><c> not</c><00:00:58.800><c> make</c><00:00:58.960><c> sense</c>

00:00:59.270 --> 00:00:59.280 align:start position:0%
iterator to it that might not make sense
 

00:00:59.280 --> 00:01:00.950 align:start position:0%
iterator to it that might not make sense
to<00:00:59.440><c> you</c><00:00:59.600><c> but</c><00:00:59.840><c> i</c><00:00:59.920><c> could</c><00:01:00.079><c> use</c><00:01:00.320><c> it</c><00:01:00.399><c> in</c><00:01:00.559><c> some</c><00:01:00.719><c> kind</c>

00:01:00.950 --> 00:01:00.960 align:start position:0%
to you but i could use it in some kind
 

00:01:00.960 --> 00:01:01.990 align:start position:0%
to you but i could use it in some kind
of<00:01:01.120><c> special</c><00:01:01.520><c> way</c>

00:01:01.990 --> 00:01:02.000 align:start position:0%
of special way
 

00:01:02.000 --> 00:01:04.229 align:start position:0%
of special way
it's<00:01:02.160><c> kind</c><00:01:02.320><c> of</c><00:01:02.480><c> like</c><00:01:02.719><c> operator</c><00:01:03.280><c> overloading</c>

00:01:04.229 --> 00:01:04.239 align:start position:0%
it's kind of like operator overloading
 

00:01:04.239 --> 00:01:05.429 align:start position:0%
it's kind of like operator overloading
you<00:01:04.400><c> can</c><00:01:04.720><c> make</c><00:01:05.040><c> the</c>

00:01:05.429 --> 00:01:05.439 align:start position:0%
you can make the
 

00:01:05.439 --> 00:01:08.230 align:start position:0%
you can make the
plus<00:01:05.760><c> plus</c><00:01:06.159><c> operator</c><00:01:06.640><c> do</c><00:01:07.119><c> anything</c><00:01:07.760><c> but</c><00:01:08.080><c> for</c>

00:01:08.230 --> 00:01:08.240 align:start position:0%
plus plus operator do anything but for
 

00:01:08.240 --> 00:01:09.910 align:start position:0%
plus plus operator do anything but for
the<00:01:08.400><c> most</c><00:01:08.720><c> case</c><00:01:08.960><c> if</c><00:01:09.119><c> we</c><00:01:09.200><c> look</c><00:01:09.360><c> at</c><00:01:09.439><c> the</c><00:01:09.600><c> standard</c>

00:01:09.910 --> 00:01:09.920 align:start position:0%
the most case if we look at the standard
 

00:01:09.920 --> 00:01:11.510 align:start position:0%
the most case if we look at the standard
cpus<00:01:10.560><c> library</c>

00:01:11.510 --> 00:01:11.520 align:start position:0%
cpus library
 

00:01:11.520 --> 00:01:13.350 align:start position:0%
cpus library
we<00:01:11.680><c> can</c><00:01:11.920><c> see</c><00:01:12.080><c> that</c><00:01:12.320><c> iterators</c><00:01:12.880><c> are</c><00:01:12.960><c> usually</c>

00:01:13.350 --> 00:01:13.360 align:start position:0%
we can see that iterators are usually
 

00:01:13.360 --> 00:01:15.270 align:start position:0%
we can see that iterators are usually
used<00:01:13.600><c> for</c><00:01:13.840><c> iterating</c><00:01:14.320><c> over</c><00:01:14.560><c> data</c><00:01:14.880><c> structures</c>

00:01:15.270 --> 00:01:15.280 align:start position:0%
used for iterating over data structures
 

00:01:15.280 --> 00:01:16.789 align:start position:0%
used for iterating over data structures
so<00:01:15.360><c> whether</c><00:01:15.600><c> that</c><00:01:15.840><c> be</c><00:01:16.000><c> a</c><00:01:16.080><c> simple</c><00:01:16.400><c> array</c><00:01:16.720><c> that</c>

00:01:16.789 --> 00:01:16.799 align:start position:0%
so whether that be a simple array that
 

00:01:16.799 --> 00:01:18.230 align:start position:0%
so whether that be a simple array that
you<00:01:16.880><c> want</c><00:01:17.040><c> to</c><00:01:17.200><c> traverse</c><00:01:17.680><c> or</c><00:01:17.840><c> get</c><00:01:18.000><c> through</c>

00:01:18.230 --> 00:01:18.240 align:start position:0%
you want to traverse or get through
 

00:01:18.240 --> 00:01:19.830 align:start position:0%
you want to traverse or get through
every<00:01:18.479><c> element</c><00:01:18.960><c> in</c><00:01:19.040><c> that</c><00:01:19.200><c> array</c><00:01:19.520><c> maybe</c><00:01:19.759><c> you</c>

00:01:19.830 --> 00:01:19.840 align:start position:0%
every element in that array maybe you
 

00:01:19.840 --> 00:01:20.710 align:start position:0%
every element in that array maybe you
have<00:01:20.000><c> a</c><00:01:20.159><c> vector</c>

00:01:20.710 --> 00:01:20.720 align:start position:0%
have a vector
 

00:01:20.720 --> 00:01:22.310 align:start position:0%
have a vector
you<00:01:20.880><c> want</c><00:01:21.040><c> to</c><00:01:21.119><c> go</c><00:01:21.280><c> backwards</c><00:01:21.759><c> through</c><00:01:22.000><c> every</c>

00:01:22.310 --> 00:01:22.320 align:start position:0%
you want to go backwards through every
 

00:01:22.320 --> 00:01:24.070 align:start position:0%
you want to go backwards through every
element<00:01:23.040><c> maybe</c><00:01:23.280><c> you</c><00:01:23.439><c> have</c><00:01:23.680><c> something</c><00:01:24.000><c> a</c>

00:01:24.070 --> 00:01:24.080 align:start position:0%
element maybe you have something a
 

00:01:24.080 --> 00:01:25.990 align:start position:0%
element maybe you have something a
little<00:01:24.320><c> bit</c><00:01:24.479><c> more</c><00:01:24.640><c> complicated</c><00:01:25.280><c> like</c><00:01:25.520><c> a</c><00:01:25.600><c> set</c>

00:01:25.990 --> 00:01:26.000 align:start position:0%
little bit more complicated like a set
 

00:01:26.000 --> 00:01:28.390 align:start position:0%
little bit more complicated like a set
or<00:01:26.159><c> a</c><00:01:26.320><c> map</c><00:01:26.640><c> or</c><00:01:26.799><c> even</c><00:01:27.040><c> a</c><00:01:27.200><c> tree</c><00:01:27.439><c> data</c><00:01:27.759><c> structure</c><00:01:28.159><c> i</c>

00:01:28.390 --> 00:01:28.400 align:start position:0%
or a map or even a tree data structure i
 

00:01:28.400 --> 00:01:29.749 align:start position:0%
or a map or even a tree data structure i
want<00:01:28.560><c> to</c><00:01:28.720><c> traverse</c><00:01:29.280><c> that</c>

00:01:29.749 --> 00:01:29.759 align:start position:0%
want to traverse that
 

00:01:29.759 --> 00:01:31.830 align:start position:0%
want to traverse that
how<00:01:29.920><c> do</c><00:01:30.079><c> i</c><00:01:30.240><c> do</c><00:01:30.479><c> that</c><00:01:30.720><c> well</c><00:01:31.119><c> you</c><00:01:31.200><c> need</c><00:01:31.360><c> to</c><00:01:31.439><c> use</c><00:01:31.680><c> an</c>

00:01:31.830 --> 00:01:31.840 align:start position:0%
how do i do that well you need to use an
 

00:01:31.840 --> 00:01:33.590 align:start position:0%
how do i do that well you need to use an
iterator<00:01:32.400><c> it's</c><00:01:32.560><c> really</c><00:01:32.799><c> easy</c><00:01:32.960><c> to</c><00:01:33.119><c> overlook</c>

00:01:33.590 --> 00:01:33.600 align:start position:0%
iterator it's really easy to overlook
 

00:01:33.600 --> 00:01:35.030 align:start position:0%
iterator it's really easy to overlook
iterators<00:01:34.159><c> when</c><00:01:34.320><c> you're</c><00:01:34.479><c> just</c><00:01:34.640><c> dealing</c><00:01:34.960><c> with</c>

00:01:35.030 --> 00:01:35.040 align:start position:0%
iterators when you're just dealing with
 

00:01:35.040 --> 00:01:36.710 align:start position:0%
iterators when you're just dealing with
a<00:01:35.119><c> simple</c><00:01:35.439><c> data</c><00:01:35.680><c> structure</c><00:01:35.920><c> like</c><00:01:36.159><c> a</c><00:01:36.240><c> vector</c>

00:01:36.710 --> 00:01:36.720 align:start position:0%
a simple data structure like a vector
 

00:01:36.720 --> 00:01:38.149 align:start position:0%
a simple data structure like a vector
because<00:01:36.960><c> we</c><00:01:37.040><c> can</c><00:01:37.200><c> simply</c><00:01:37.520><c> use</c><00:01:37.600><c> the</c><00:01:37.759><c> index</c>

00:01:38.149 --> 00:01:38.159 align:start position:0%
because we can simply use the index
 

00:01:38.159 --> 00:01:39.749 align:start position:0%
because we can simply use the index
operator<00:01:38.640><c> using</c><00:01:38.799><c> the</c><00:01:38.960><c> square</c><00:01:39.200><c> brackets</c><00:01:39.600><c> we</c>

00:01:39.749 --> 00:01:39.759 align:start position:0%
operator using the square brackets we
 

00:01:39.759 --> 00:01:39.990 align:start position:0%
operator using the square brackets we
can

00:01:39.990 --> 00:01:40.000 align:start position:0%
can
 

00:01:40.000 --> 00:01:42.149 align:start position:0%
can
simply<00:01:40.400><c> stick</c><00:01:40.720><c> a</c><00:01:41.040><c> value</c><00:01:41.520><c> into</c><00:01:41.759><c> there</c><00:01:42.000><c> and</c>

00:01:42.149 --> 00:01:42.159 align:start position:0%
simply stick a value into there and
 

00:01:42.159 --> 00:01:43.030 align:start position:0%
simply stick a value into there and
retrieve

00:01:43.030 --> 00:01:43.040 align:start position:0%
retrieve
 

00:01:43.040 --> 00:01:44.950 align:start position:0%
retrieve
that<00:01:43.280><c> element</c><00:01:43.759><c> at</c><00:01:43.920><c> that</c><00:01:44.079><c> given</c><00:01:44.399><c> index</c><00:01:44.799><c> but</c>

00:01:44.950 --> 00:01:44.960 align:start position:0%
that element at that given index but
 

00:01:44.960 --> 00:01:46.710 align:start position:0%
that element at that given index but
this<00:01:45.119><c> doesn't</c><00:01:45.439><c> always</c><00:01:45.759><c> work</c><00:01:46.000><c> for</c><00:01:46.240><c> other</c><00:01:46.399><c> data</c>

00:01:46.710 --> 00:01:46.720 align:start position:0%
this doesn't always work for other data
 

00:01:46.720 --> 00:01:47.429 align:start position:0%
this doesn't always work for other data
structures

00:01:47.429 --> 00:01:47.439 align:start position:0%
structures
 

00:01:47.439 --> 00:01:49.990 align:start position:0%
structures
such<00:01:47.680><c> as</c><00:01:47.920><c> sets</c><00:01:48.320><c> which</c><00:01:48.560><c> don't</c><00:01:48.799><c> really</c><00:01:49.439><c> contain</c>

00:01:49.990 --> 00:01:50.000 align:start position:0%
such as sets which don't really contain
 

00:01:50.000 --> 00:01:52.069 align:start position:0%
such as sets which don't really contain
all<00:01:50.159><c> of</c><00:01:50.320><c> our</c><00:01:50.479><c> elements</c><00:01:50.960><c> in</c><00:01:51.200><c> order</c><00:01:51.600><c> so</c><00:01:51.759><c> anyway</c>

00:01:52.069 --> 00:01:52.079 align:start position:0%
all of our elements in order so anyway
 

00:01:52.079 --> 00:01:53.749 align:start position:0%
all of our elements in order so anyway
long<00:01:52.399><c> story</c><00:01:52.799><c> short</c><00:01:53.119><c> because</c><00:01:53.280><c> i</c><00:01:53.360><c> honestly</c>

00:01:53.749 --> 00:01:53.759 align:start position:0%
long story short because i honestly
 

00:01:53.759 --> 00:01:54.950 align:start position:0%
long story short because i honestly
think<00:01:53.920><c> this</c><00:01:54.159><c> does</c><00:01:54.320><c> not</c><00:01:54.479><c> need</c><00:01:54.640><c> to</c><00:01:54.799><c> be</c>

00:01:54.950 --> 00:01:54.960 align:start position:0%
think this does not need to be
 

00:01:54.960 --> 00:01:55.670 align:start position:0%
think this does not need to be
complicated

00:01:55.670 --> 00:01:55.680 align:start position:0%
complicated
 

00:01:55.680 --> 00:01:58.550 align:start position:0%
complicated
at<00:01:55.840><c> all</c><00:01:56.399><c> iterators</c><00:01:57.040><c> are</c><00:01:57.280><c> used</c><00:01:57.759><c> to</c><00:01:58.000><c> iterate</c>

00:01:58.550 --> 00:01:58.560 align:start position:0%
at all iterators are used to iterate
 

00:01:58.560 --> 00:02:00.709 align:start position:0%
at all iterators are used to iterate
over<00:01:58.880><c> a</c><00:01:59.040><c> collection</c><00:01:59.680><c> of</c><00:01:59.920><c> elements</c><00:02:00.479><c> and</c>

00:02:00.709 --> 00:02:00.719 align:start position:0%
over a collection of elements and
 

00:02:00.719 --> 00:02:01.749 align:start position:0%
over a collection of elements and
iterating<00:02:01.200><c> over</c><00:02:01.439><c> them</c>

00:02:01.749 --> 00:02:01.759 align:start position:0%
iterating over them
 

00:02:01.759 --> 00:02:03.670 align:start position:0%
iterating over them
is<00:02:02.079><c> really</c><00:02:02.479><c> simple</c><00:02:02.880><c> as</c><00:02:03.040><c> we'll</c><00:02:03.200><c> see</c><00:02:03.439><c> in</c><00:02:03.600><c> a</c>

00:02:03.670 --> 00:02:03.680 align:start position:0%
is really simple as we'll see in a
 

00:02:03.680 --> 00:02:05.670 align:start position:0%
is really simple as we'll see in a
minute<00:02:04.000><c> but</c><00:02:04.240><c> first</c><00:02:04.719><c> you</c><00:02:04.880><c> know</c><00:02:04.960><c> what</c><00:02:05.200><c> isn't</c>

00:02:05.670 --> 00:02:05.680 align:start position:0%
minute but first you know what isn't
 

00:02:05.680 --> 00:02:08.150 align:start position:0%
minute but first you know what isn't
stuck<00:02:06.000><c> in</c><00:02:06.159><c> 2003</c><00:02:06.880><c> in</c><00:02:06.960><c> terms</c><00:02:07.200><c> of</c><00:02:07.280><c> education</c>

00:02:08.150 --> 00:02:08.160 align:start position:0%
stuck in 2003 in terms of education
 

00:02:08.160 --> 00:02:08.949 align:start position:0%
stuck in 2003 in terms of education
skillshare

00:02:08.949 --> 00:02:08.959 align:start position:0%
skillshare
 

00:02:08.959 --> 00:02:10.389 align:start position:0%
skillshare
for<00:02:09.119><c> those</c><00:02:09.360><c> of</c><00:02:09.440><c> you</c><00:02:09.599><c> who</c><00:02:09.759><c> do</c><00:02:09.920><c> not</c><00:02:10.080><c> know</c><00:02:10.239><c> what</c>

00:02:10.389 --> 00:02:10.399 align:start position:0%
for those of you who do not know what
 

00:02:10.399 --> 00:02:12.470 align:start position:0%
for those of you who do not know what
skillshare<00:02:11.039><c> is</c><00:02:11.200><c> skillshare</c><00:02:11.760><c> is</c><00:02:11.920><c> an</c><00:02:12.080><c> online</c>

00:02:12.470 --> 00:02:12.480 align:start position:0%
skillshare is skillshare is an online
 

00:02:12.480 --> 00:02:14.790 align:start position:0%
skillshare is skillshare is an online
learning<00:02:12.959><c> platform</c><00:02:13.599><c> a</c><00:02:13.760><c> community</c><00:02:14.239><c> of</c><00:02:14.400><c> people</c>

00:02:14.790 --> 00:02:14.800 align:start position:0%
learning platform a community of people
 

00:02:14.800 --> 00:02:15.830 align:start position:0%
learning platform a community of people
who<00:02:14.959><c> come</c><00:02:15.200><c> together</c>

00:02:15.830 --> 00:02:15.840 align:start position:0%
who come together
 

00:02:15.840 --> 00:02:18.309 align:start position:0%
who come together
to<00:02:16.160><c> learn</c><00:02:16.480><c> a</c><00:02:16.560><c> new</c><00:02:16.959><c> skill</c><00:02:17.360><c> on</c><00:02:17.520><c> the</c><00:02:17.760><c> internet</c>

00:02:18.309 --> 00:02:18.319 align:start position:0%
to learn a new skill on the internet
 

00:02:18.319 --> 00:02:20.070 align:start position:0%
to learn a new skill on the internet
whatever<00:02:18.879><c> it</c><00:02:19.040><c> is</c><00:02:19.280><c> that</c><00:02:19.440><c> you're</c><00:02:19.599><c> trying</c><00:02:19.920><c> to</c>

00:02:20.070 --> 00:02:20.080 align:start position:0%
whatever it is that you're trying to
 

00:02:20.080 --> 00:02:21.910 align:start position:0%
whatever it is that you're trying to
learn<00:02:20.319><c> whether</c><00:02:20.560><c> that</c><00:02:20.800><c> be</c><00:02:21.040><c> illustration</c>

00:02:21.910 --> 00:02:21.920 align:start position:0%
learn whether that be illustration
 

00:02:21.920 --> 00:02:22.790 align:start position:0%
learn whether that be illustration
photography

00:02:22.790 --> 00:02:22.800 align:start position:0%
photography
 

00:02:22.800 --> 00:02:26.229 align:start position:0%
photography
marketing<00:02:23.440><c> business</c><00:02:23.920><c> productivity</c>

00:02:26.229 --> 00:02:26.239 align:start position:0%
marketing business productivity
 

00:02:26.239 --> 00:02:28.630 align:start position:0%
marketing business productivity
literally<00:02:26.800><c> almost</c><00:02:27.280><c> anything</c><00:02:27.840><c> skillshare</c><00:02:28.319><c> has</c>

00:02:28.630 --> 00:02:28.640 align:start position:0%
literally almost anything skillshare has
 

00:02:28.640 --> 00:02:31.190 align:start position:0%
literally almost anything skillshare has
thousands<00:02:29.120><c> of</c><00:02:29.360><c> amazing</c><00:02:29.840><c> classes</c><00:02:30.480><c> for</c><00:02:30.640><c> you</c><00:02:30.879><c> to</c>

00:02:31.190 --> 00:02:31.200 align:start position:0%
thousands of amazing classes for you to
 

00:02:31.200 --> 00:02:32.070 align:start position:0%
thousands of amazing classes for you to
choose<00:02:31.519><c> from</c>

00:02:32.070 --> 00:02:32.080 align:start position:0%
choose from
 

00:02:32.080 --> 00:02:33.990 align:start position:0%
choose from
and<00:02:32.319><c> i</c><00:02:32.560><c> love</c><00:02:32.800><c> the</c><00:02:33.040><c> fact</c><00:02:33.280><c> that</c><00:02:33.440><c> they're</c><00:02:33.760><c> all</c>

00:02:33.990 --> 00:02:34.000 align:start position:0%
and i love the fact that they're all
 

00:02:34.000 --> 00:02:36.470 align:start position:0%
and i love the fact that they're all
really<00:02:34.400><c> concise</c><00:02:35.040><c> and</c><00:02:35.280><c> simple</c><00:02:35.920><c> and</c><00:02:36.160><c> to</c><00:02:36.319><c> the</c>

00:02:36.470 --> 00:02:36.480 align:start position:0%
really concise and simple and to the
 

00:02:36.480 --> 00:02:36.949 align:start position:0%
really concise and simple and to the
point

00:02:36.949 --> 00:02:36.959 align:start position:0%
point
 

00:02:36.959 --> 00:02:38.790 align:start position:0%
point
even<00:02:37.280><c> if</c><00:02:37.440><c> you</c><00:02:37.519><c> don't</c><00:02:37.760><c> need</c><00:02:37.920><c> to</c><00:02:38.080><c> learn</c><00:02:38.400><c> a</c><00:02:38.480><c> new</c>

00:02:38.790 --> 00:02:38.800 align:start position:0%
even if you don't need to learn a new
 

00:02:38.800 --> 00:02:40.390 align:start position:0%
even if you don't need to learn a new
skill<00:02:39.120><c> i</c><00:02:39.200><c> mean</c><00:02:39.360><c> i</c><00:02:39.519><c> didn't</c><00:02:39.840><c> think</c><00:02:40.160><c> that</c><00:02:40.319><c> i</c>

00:02:40.390 --> 00:02:40.400 align:start position:0%
skill i mean i didn't think that i
 

00:02:40.400 --> 00:02:42.710 align:start position:0%
skill i mean i didn't think that i
wanted<00:02:40.720><c> to</c><00:02:41.040><c> learn</c><00:02:41.360><c> about</c><00:02:41.760><c> illustration</c>

00:02:42.710 --> 00:02:42.720 align:start position:0%
wanted to learn about illustration
 

00:02:42.720 --> 00:02:44.630 align:start position:0%
wanted to learn about illustration
but<00:02:43.120><c> to</c><00:02:43.280><c> be</c><00:02:43.440><c> honest</c><00:02:43.840><c> it's</c><00:02:44.000><c> been</c><00:02:44.160><c> helping</c><00:02:44.480><c> me</c>

00:02:44.630 --> 00:02:44.640 align:start position:0%
but to be honest it's been helping me
 

00:02:44.640 --> 00:02:47.030 align:start position:0%
but to be honest it's been helping me
relax<00:02:45.440><c> so</c><00:02:45.680><c> much</c><00:02:46.000><c> which</c><00:02:46.160><c> i</c><00:02:46.319><c> feel</c><00:02:46.640><c> is</c><00:02:46.800><c> really</c>

00:02:47.030 --> 00:02:47.040 align:start position:0%
relax so much which i feel is really
 

00:02:47.040 --> 00:02:48.070 align:start position:0%
relax so much which i feel is really
needed<00:02:47.360><c> these</c><00:02:47.599><c> days</c>

00:02:48.070 --> 00:02:48.080 align:start position:0%
needed these days
 

00:02:48.080 --> 00:02:50.229 align:start position:0%
needed these days
something<00:02:48.480><c> like</c><00:02:48.640><c> productivity</c><00:02:49.440><c> it</c><00:02:49.760><c> it's</c><00:02:50.000><c> not</c>

00:02:50.229 --> 00:02:50.239 align:start position:0%
something like productivity it it's not
 

00:02:50.239 --> 00:02:51.110 align:start position:0%
something like productivity it it's not
something<00:02:50.560><c> that</c><00:02:50.720><c> you</c>

00:02:51.110 --> 00:02:51.120 align:start position:0%
something that you
 

00:02:51.120 --> 00:02:53.030 align:start position:0%
something that you
necessarily<00:02:51.840><c> always</c><00:02:52.160><c> set</c><00:02:52.319><c> out</c><00:02:52.480><c> to</c><00:02:52.640><c> learn</c><00:02:52.879><c> but</c>

00:02:53.030 --> 00:02:53.040 align:start position:0%
necessarily always set out to learn but
 

00:02:53.040 --> 00:02:54.790 align:start position:0%
necessarily always set out to learn but
if<00:02:53.200><c> you</c><00:02:53.440><c> if</c><00:02:53.519><c> you</c><00:02:53.680><c> come</c><00:02:53.840><c> across</c><00:02:54.160><c> a</c><00:02:54.239><c> class</c><00:02:54.640><c> that</c>

00:02:54.790 --> 00:02:54.800 align:start position:0%
if you if you come across a class that
 

00:02:54.800 --> 00:02:57.030 align:start position:0%
if you if you come across a class that
teaches<00:02:55.120><c> you</c><00:02:55.200><c> to</c><00:02:55.280><c> be</c><00:02:55.440><c> more</c><00:02:55.599><c> productive</c>

00:02:57.030 --> 00:02:57.040 align:start position:0%
teaches you to be more productive
 

00:02:57.040 --> 00:02:58.390 align:start position:0%
teaches you to be more productive
why<00:02:57.200><c> not</c><00:02:57.440><c> spend</c><00:02:57.599><c> a</c><00:02:57.680><c> few</c><00:02:57.840><c> minutes</c><00:02:58.159><c> going</c>

00:02:58.390 --> 00:02:58.400 align:start position:0%
why not spend a few minutes going
 

00:02:58.400 --> 00:02:59.750 align:start position:0%
why not spend a few minutes going
through<00:02:58.560><c> that</c><00:02:58.800><c> and</c><00:02:58.959><c> you</c><00:02:59.120><c> can</c><00:02:59.280><c> do</c><00:02:59.440><c> that</c><00:02:59.599><c> with</c>

00:02:59.750 --> 00:02:59.760 align:start position:0%
through that and you can do that with
 

00:02:59.760 --> 00:03:00.630 align:start position:0%
through that and you can do that with
skillshare

00:03:00.630 --> 00:03:00.640 align:start position:0%
skillshare
 

00:03:00.640 --> 00:03:03.030 align:start position:0%
skillshare
because<00:03:00.959><c> of</c><00:03:01.040><c> those</c><00:03:01.360><c> concise</c><00:03:01.920><c> classes</c><00:03:02.640><c> coming</c>

00:03:03.030 --> 00:03:03.040 align:start position:0%
because of those concise classes coming
 

00:03:03.040 --> 00:03:04.470 align:start position:0%
because of those concise classes coming
in<00:03:03.200><c> at</c><00:03:03.360><c> just</c><00:03:03.680><c> under</c><00:03:03.920><c> 10</c>

00:03:04.470 --> 00:03:04.480 align:start position:0%
in at just under 10
 

00:03:04.480 --> 00:03:06.309 align:start position:0%
in at just under 10
a<00:03:04.560><c> month</c><00:03:04.720><c> for</c><00:03:04.879><c> an</c><00:03:05.040><c> annual</c><00:03:05.280><c> subscription</c><00:03:05.920><c> it</c><00:03:06.159><c> is</c>

00:03:06.309 --> 00:03:06.319 align:start position:0%
a month for an annual subscription it is
 

00:03:06.319 --> 00:03:07.589 align:start position:0%
a month for an annual subscription it is
an<00:03:06.480><c> amazing</c><00:03:06.959><c> offer</c>

00:03:07.589 --> 00:03:07.599 align:start position:0%
an amazing offer
 

00:03:07.599 --> 00:03:09.589 align:start position:0%
an amazing offer
but<00:03:07.920><c> an</c><00:03:08.159><c> even</c><00:03:08.400><c> better</c><00:03:08.720><c> offer</c><00:03:09.200><c> is</c><00:03:09.360><c> the</c><00:03:09.440><c> fact</c>

00:03:09.589 --> 00:03:09.599 align:start position:0%
but an even better offer is the fact
 

00:03:09.599 --> 00:03:11.270 align:start position:0%
but an even better offer is the fact
that<00:03:09.760><c> skillshare</c><00:03:10.319><c> is</c><00:03:10.480><c> offering</c><00:03:10.800><c> the</c><00:03:10.879><c> first</c>

00:03:11.270 --> 00:03:11.280 align:start position:0%
that skillshare is offering the first
 

00:03:11.280 --> 00:03:13.270 align:start position:0%
that skillshare is offering the first
1000<00:03:11.840><c> people</c><00:03:12.239><c> who</c><00:03:12.480><c> click</c><00:03:12.640><c> the</c><00:03:12.800><c> link</c><00:03:13.120><c> in</c><00:03:13.200><c> the</c>

00:03:13.270 --> 00:03:13.280 align:start position:0%
1000 people who click the link in the
 

00:03:13.280 --> 00:03:15.110 align:start position:0%
1000 people who click the link in the
description<00:03:13.680><c> below</c><00:03:14.080><c> and</c><00:03:14.239><c> sign</c><00:03:14.560><c> up</c>

00:03:15.110 --> 00:03:15.120 align:start position:0%
description below and sign up
 

00:03:15.120 --> 00:03:18.390 align:start position:0%
description below and sign up
two<00:03:15.680><c> free</c><00:03:16.159><c> months</c><00:03:16.640><c> of</c><00:03:16.959><c> skillshare</c><00:03:17.760><c> premium</c>

00:03:18.390 --> 00:03:18.400 align:start position:0%
two free months of skillshare premium
 

00:03:18.400 --> 00:03:20.229 align:start position:0%
two free months of skillshare premium
that's<00:03:18.720><c> two</c><00:03:18.959><c> whole</c><00:03:19.200><c> months</c><00:03:19.519><c> to</c><00:03:19.680><c> check</c><00:03:19.920><c> out</c><00:03:20.080><c> the</c>

00:03:20.229 --> 00:03:20.239 align:start position:0%
that's two whole months to check out the
 

00:03:20.239 --> 00:03:21.910 align:start position:0%
that's two whole months to check out the
wide<00:03:20.480><c> variety</c><00:03:20.879><c> of</c><00:03:21.040><c> courses</c><00:03:21.440><c> that</c><00:03:21.519><c> they</c><00:03:21.680><c> have</c>

00:03:21.910 --> 00:03:21.920 align:start position:0%
wide variety of courses that they have
 

00:03:21.920 --> 00:03:23.110 align:start position:0%
wide variety of courses that they have
on<00:03:22.000><c> that</c><00:03:22.319><c> platform</c>

00:03:23.110 --> 00:03:23.120 align:start position:0%
on that platform
 

00:03:23.120 --> 00:03:24.630 align:start position:0%
on that platform
and<00:03:23.280><c> decide</c><00:03:23.680><c> for</c><00:03:23.840><c> yourself</c><00:03:24.239><c> if</c><00:03:24.319><c> you</c><00:03:24.400><c> want</c><00:03:24.560><c> to</c>

00:03:24.630 --> 00:03:24.640 align:start position:0%
and decide for yourself if you want to
 

00:03:24.640 --> 00:03:26.229 align:start position:0%
and decide for yourself if you want to
stay<00:03:24.959><c> and</c><00:03:25.040><c> learn</c><00:03:25.360><c> more</c><00:03:25.599><c> or</c><00:03:25.840><c> not</c>

00:03:26.229 --> 00:03:26.239 align:start position:0%
stay and learn more or not
 

00:03:26.239 --> 00:03:28.070 align:start position:0%
stay and learn more or not
huge<00:03:26.560><c> thank</c><00:03:26.799><c> you</c><00:03:26.959><c> as</c><00:03:27.120><c> always</c><00:03:27.360><c> to</c><00:03:27.519><c> skillshare</c>

00:03:28.070 --> 00:03:28.080 align:start position:0%
huge thank you as always to skillshare
 

00:03:28.080 --> 00:03:29.670 align:start position:0%
huge thank you as always to skillshare
for<00:03:28.239><c> sponsoring</c><00:03:28.799><c> this</c><00:03:28.959><c> video</c>

00:03:29.670 --> 00:03:29.680 align:start position:0%
for sponsoring this video
 

00:03:29.680 --> 00:03:31.589 align:start position:0%
for sponsoring this video
let's<00:03:30.000><c> dive</c><00:03:30.319><c> in</c><00:03:30.480><c> and</c><00:03:30.640><c> take</c><00:03:30.879><c> a</c><00:03:30.959><c> look</c><00:03:31.200><c> at</c><00:03:31.360><c> what</c>

00:03:31.589 --> 00:03:31.599 align:start position:0%
let's dive in and take a look at what
 

00:03:31.599 --> 00:03:33.270 align:start position:0%
let's dive in and take a look at what
iterators<00:03:32.239><c> are</c><00:03:32.560><c> all</c><00:03:32.799><c> about</c>

00:03:33.270 --> 00:03:33.280 align:start position:0%
iterators are all about
 

00:03:33.280 --> 00:03:35.350 align:start position:0%
iterators are all about
so<00:03:33.440><c> as</c><00:03:33.680><c> mentioned</c><00:03:34.080><c> earlier</c><00:03:34.560><c> iterators</c><00:03:35.200><c> are</c>

00:03:35.350 --> 00:03:35.360 align:start position:0%
so as mentioned earlier iterators are
 

00:03:35.360 --> 00:03:38.149 align:start position:0%
so as mentioned earlier iterators are
used<00:03:35.840><c> to</c><00:03:36.080><c> iterate</c><00:03:36.560><c> over</c><00:03:36.879><c> a</c><00:03:37.040><c> collection</c><00:03:37.680><c> of</c>

00:03:38.149 --> 00:03:38.159 align:start position:0%
used to iterate over a collection of
 

00:03:38.159 --> 00:03:40.789 align:start position:0%
used to iterate over a collection of
data<00:03:38.879><c> now</c><00:03:39.200><c> you</c><00:03:39.360><c> can</c><00:03:39.760><c> really</c><00:03:40.080><c> interpret</c><00:03:40.560><c> this</c>

00:03:40.789 --> 00:03:40.799 align:start position:0%
data now you can really interpret this
 

00:03:40.799 --> 00:03:42.390 align:start position:0%
data now you can really interpret this
however<00:03:41.200><c> you</c><00:03:41.360><c> like</c><00:03:41.680><c> it's</c><00:03:41.840><c> possible</c><00:03:42.159><c> to</c><00:03:42.239><c> write</c>

00:03:42.390 --> 00:03:42.400 align:start position:0%
however you like it's possible to write
 

00:03:42.400 --> 00:03:43.350 align:start position:0%
however you like it's possible to write
custom<00:03:42.720><c> iterators</c>

00:03:43.350 --> 00:03:43.360 align:start position:0%
custom iterators
 

00:03:43.360 --> 00:03:45.350 align:start position:0%
custom iterators
do<00:03:43.519><c> a</c><00:03:43.599><c> whole</c><00:03:43.840><c> range</c><00:03:44.080><c> of</c><00:03:44.239><c> things</c><00:03:44.799><c> but</c><00:03:45.040><c> usually</c>

00:03:45.350 --> 00:03:45.360 align:start position:0%
do a whole range of things but usually
 

00:03:45.360 --> 00:03:47.110 align:start position:0%
do a whole range of things but usually
when<00:03:45.519><c> we</c><00:03:45.760><c> think</c><00:03:45.920><c> of</c><00:03:46.080><c> an</c><00:03:46.239><c> iterator</c><00:03:46.640><c> we</c><00:03:46.799><c> think</c><00:03:47.040><c> of</c>

00:03:47.110 --> 00:03:47.120 align:start position:0%
when we think of an iterator we think of
 

00:03:47.120 --> 00:03:49.030 align:start position:0%
when we think of an iterator we think of
having<00:03:47.440><c> a</c><00:03:47.599><c> collection</c><00:03:48.159><c> of</c><00:03:48.319><c> values</c><00:03:48.720><c> such</c><00:03:48.959><c> as</c>

00:03:49.030 --> 00:03:49.040 align:start position:0%
having a collection of values such as
 

00:03:49.040 --> 00:03:51.110 align:start position:0%
having a collection of values such as
this<00:03:49.280><c> vector</c><00:03:49.599><c> here</c><00:03:49.920><c> and</c><00:03:50.000><c> we</c><00:03:50.159><c> want</c><00:03:50.319><c> to</c><00:03:50.480><c> traverse</c>

00:03:51.110 --> 00:03:51.120 align:start position:0%
this vector here and we want to traverse
 

00:03:51.120 --> 00:03:52.550 align:start position:0%
this vector here and we want to traverse
the<00:03:51.280><c> entire</c><00:03:51.599><c> collection</c><00:03:52.159><c> part</c><00:03:52.400><c> of</c><00:03:52.480><c> the</c>

00:03:52.550 --> 00:03:52.560 align:start position:0%
the entire collection part of the
 

00:03:52.560 --> 00:03:54.550 align:start position:0%
the entire collection part of the
collection<00:03:53.120><c> maybe</c><00:03:53.360><c> we</c><00:03:53.519><c> want</c><00:03:53.680><c> to</c><00:03:53.760><c> go</c><00:03:54.000><c> backwards</c>

00:03:54.550 --> 00:03:54.560 align:start position:0%
collection maybe we want to go backwards
 

00:03:54.560 --> 00:03:55.830 align:start position:0%
collection maybe we want to go backwards
through<00:03:54.720><c> the</c><00:03:54.799><c> collection</c><00:03:55.280><c> we</c><00:03:55.439><c> essentially</c>

00:03:55.830 --> 00:03:55.840 align:start position:0%
through the collection we essentially
 

00:03:55.840 --> 00:03:57.429 align:start position:0%
through the collection we essentially
have<00:03:56.080><c> the</c><00:03:56.159><c> desire</c><00:03:56.560><c> to</c><00:03:56.720><c> get</c><00:03:56.959><c> through</c>

00:03:57.429 --> 00:03:57.439 align:start position:0%
have the desire to get through
 

00:03:57.439 --> 00:03:59.830 align:start position:0%
have the desire to get through
at<00:03:57.599><c> least</c><00:03:58.000><c> some</c><00:03:58.239><c> of</c><00:03:58.319><c> the</c><00:03:58.560><c> values</c><00:03:59.200><c> inside</c><00:03:59.519><c> this</c>

00:03:59.830 --> 00:03:59.840 align:start position:0%
at least some of the values inside this
 

00:03:59.840 --> 00:04:01.429 align:start position:0%
at least some of the values inside this
collection<00:04:00.319><c> so</c><00:04:00.480><c> how</c><00:04:00.640><c> do</c><00:04:00.799><c> we</c><00:04:00.879><c> do</c><00:04:01.040><c> that</c><00:04:01.200><c> well</c>

00:04:01.429 --> 00:04:01.439 align:start position:0%
collection so how do we do that well
 

00:04:01.439 --> 00:04:03.030 align:start position:0%
collection so how do we do that well
let's<00:04:01.599><c> look</c><00:04:01.760><c> at</c><00:04:01.840><c> some</c><00:04:02.080><c> simple</c><00:04:02.400><c> examples</c><00:04:02.879><c> we</c>

00:04:03.030 --> 00:04:03.040 align:start position:0%
let's look at some simple examples we
 

00:04:03.040 --> 00:04:04.390 align:start position:0%
let's look at some simple examples we
have<00:04:03.200><c> a</c><00:04:03.360><c> vector</c><00:04:03.840><c> here</c>

00:04:04.390 --> 00:04:04.400 align:start position:0%
have a vector here
 

00:04:04.400 --> 00:04:06.550 align:start position:0%
have a vector here
we<00:04:04.560><c> have</c><00:04:04.720><c> five</c><00:04:04.959><c> values</c><00:04:05.519><c> how</c><00:04:05.680><c> do</c><00:04:05.840><c> i</c><00:04:06.000><c> print</c><00:04:06.239><c> them</c>

00:04:06.550 --> 00:04:06.560 align:start position:0%
we have five values how do i print them
 

00:04:06.560 --> 00:04:08.390 align:start position:0%
we have five values how do i print them
all<00:04:06.879><c> out</c><00:04:07.120><c> to</c><00:04:07.280><c> the</c><00:04:07.439><c> console</c>

00:04:08.390 --> 00:04:08.400 align:start position:0%
all out to the console
 

00:04:08.400 --> 00:04:09.670 align:start position:0%
all out to the console
there<00:04:08.560><c> are</c><00:04:08.720><c> a</c><00:04:08.799><c> number</c><00:04:09.040><c> of</c><00:04:09.120><c> ways</c><00:04:09.360><c> we</c><00:04:09.519><c> could</c><00:04:09.599><c> of</c>

00:04:09.670 --> 00:04:09.680 align:start position:0%
there are a number of ways we could of
 

00:04:09.680 --> 00:04:12.149 align:start position:0%
there are a number of ways we could of
course<00:04:09.920><c> do</c><00:04:10.080><c> that</c><00:04:10.239><c> the</c><00:04:10.400><c> most</c><00:04:11.280><c> common</c><00:04:11.680><c> way</c><00:04:11.920><c> which</c>

00:04:12.149 --> 00:04:12.159 align:start position:0%
course do that the most common way which
 

00:04:12.159 --> 00:04:13.270 align:start position:0%
course do that the most common way which
you'll<00:04:12.319><c> probably</c><00:04:12.720><c> think</c><00:04:12.959><c> of</c>

00:04:13.270 --> 00:04:13.280 align:start position:0%
you'll probably think of
 

00:04:13.280 --> 00:04:15.270 align:start position:0%
you'll probably think of
is<00:04:13.439><c> a</c><00:04:13.599><c> for</c><00:04:13.840><c> loop</c><00:04:14.080><c> that</c><00:04:14.319><c> simply</c><00:04:14.720><c> iterates</c>

00:04:15.270 --> 00:04:15.280 align:start position:0%
is a for loop that simply iterates
 

00:04:15.280 --> 00:04:16.550 align:start position:0%
is a for loop that simply iterates
through<00:04:16.000><c> values</c>

00:04:16.550 --> 00:04:16.560 align:start position:0%
through values
 

00:04:16.560 --> 00:04:18.469 align:start position:0%
through values
dot<00:04:16.799><c> size</c><00:04:17.120><c> like</c><00:04:17.280><c> this</c><00:04:17.519><c> so</c><00:04:17.680><c> that</c><00:04:17.840><c> we</c><00:04:17.919><c> go</c><00:04:18.160><c> through</c>

00:04:18.469 --> 00:04:18.479 align:start position:0%
dot size like this so that we go through
 

00:04:18.479 --> 00:04:21.189 align:start position:0%
dot size like this so that we go through
all<00:04:18.639><c> of</c><00:04:18.720><c> the</c><00:04:19.120><c> five</c><00:04:19.359><c> values</c><00:04:19.919><c> that</c><00:04:20.079><c> we</c><00:04:20.239><c> have</c><00:04:20.560><c> here</c>

00:04:21.189 --> 00:04:21.199 align:start position:0%
all of the five values that we have here
 

00:04:21.199 --> 00:04:23.030 align:start position:0%
all of the five values that we have here
and<00:04:21.359><c> then</c><00:04:21.519><c> we</c><00:04:21.680><c> simply</c><00:04:22.079><c> use</c><00:04:22.240><c> the</c><00:04:22.479><c> index</c>

00:04:23.030 --> 00:04:23.040 align:start position:0%
and then we simply use the index
 

00:04:23.040 --> 00:04:24.710 align:start position:0%
and then we simply use the index
operator<00:04:23.520><c> here</c><00:04:24.000><c> with</c><00:04:24.240><c> the</c><00:04:24.400><c> i</c>

00:04:24.710 --> 00:04:24.720 align:start position:0%
operator here with the i
 

00:04:24.720 --> 00:04:27.189 align:start position:0%
operator here with the i
variable<00:04:25.360><c> to</c><00:04:25.520><c> just</c><00:04:25.759><c> retrieve</c><00:04:26.400><c> the</c><00:04:26.560><c> data</c><00:04:26.960><c> at</c><00:04:27.040><c> a</c>

00:04:27.189 --> 00:04:27.199 align:start position:0%
variable to just retrieve the data at a
 

00:04:27.199 --> 00:04:27.749 align:start position:0%
variable to just retrieve the data at a
particular

00:04:27.749 --> 00:04:27.759 align:start position:0%
particular
 

00:04:27.759 --> 00:04:30.310 align:start position:0%
particular
index<00:04:28.320><c> inside</c><00:04:28.800><c> our</c><00:04:29.040><c> array</c><00:04:29.440><c> here</c><00:04:29.759><c> so</c><00:04:29.919><c> if</c><00:04:30.080><c> i</c>

00:04:30.310 --> 00:04:30.320 align:start position:0%
index inside our array here so if i
 

00:04:30.320 --> 00:04:32.150 align:start position:0%
index inside our array here so if i
print<00:04:30.479><c> this</c><00:04:30.720><c> out</c><00:04:30.880><c> into</c><00:04:31.120><c> the</c><00:04:31.199><c> console</c><00:04:31.759><c> like</c>

00:04:32.150 --> 00:04:32.160 align:start position:0%
print this out into the console like
 

00:04:32.160 --> 00:04:35.670 align:start position:0%
print this out into the console like
this<00:04:33.199><c> and</c><00:04:33.520><c> i'll</c><00:04:33.680><c> add</c><00:04:33.919><c> in</c><00:04:34.080><c> a</c><00:04:34.160><c> little</c><00:04:34.639><c> sc</c>

00:04:35.670 --> 00:04:35.680 align:start position:0%
this and i'll add in a little sc
 

00:04:35.680 --> 00:04:38.310 align:start position:0%
this and i'll add in a little sc
in<00:04:36.160><c> get</c><00:04:36.479><c> over</c><00:04:36.720><c> here</c><00:04:37.360><c> we</c><00:04:37.520><c> should</c><00:04:37.759><c> see</c><00:04:37.919><c> one</c><00:04:38.080><c> two</c>

00:04:38.310 --> 00:04:38.320 align:start position:0%
in get over here we should see one two
 

00:04:38.320 --> 00:04:39.830 align:start position:0%
in get over here we should see one two
three<00:04:38.479><c> four</c><00:04:38.639><c> five</c><00:04:38.960><c> being</c><00:04:39.199><c> printed</c><00:04:39.520><c> out</c><00:04:39.600><c> to</c><00:04:39.759><c> the</c>

00:04:39.830 --> 00:04:39.840 align:start position:0%
three four five being printed out to the
 

00:04:39.840 --> 00:04:41.670 align:start position:0%
three four five being printed out to the
console<00:04:40.400><c> as</c><00:04:40.639><c> you</c><00:04:40.720><c> can</c><00:04:40.880><c> see</c><00:04:41.120><c> that's</c><00:04:41.360><c> what</c><00:04:41.520><c> we</c>

00:04:41.670 --> 00:04:41.680 align:start position:0%
console as you can see that's what we
 

00:04:41.680 --> 00:04:42.070 align:start position:0%
console as you can see that's what we
get

00:04:42.070 --> 00:04:42.080 align:start position:0%
get
 

00:04:42.080 --> 00:04:44.469 align:start position:0%
get
so<00:04:42.320><c> we've</c><00:04:42.639><c> essentially</c><00:04:43.199><c> iterated</c><00:04:43.919><c> through</c>

00:04:44.469 --> 00:04:44.479 align:start position:0%
so we've essentially iterated through
 

00:04:44.479 --> 00:04:46.230 align:start position:0%
so we've essentially iterated through
this<00:04:44.720><c> entire</c><00:04:45.120><c> collection</c><00:04:45.680><c> and</c><00:04:45.840><c> this</c><00:04:46.000><c> is</c><00:04:46.160><c> a</c>

00:04:46.230 --> 00:04:46.240 align:start position:0%
this entire collection and this is a
 

00:04:46.240 --> 00:04:47.670 align:start position:0%
this entire collection and this is a
pretty<00:04:46.479><c> common</c><00:04:46.720><c> way</c><00:04:46.880><c> of</c><00:04:47.040><c> doing</c><00:04:47.280><c> that</c><00:04:47.520><c> now</c>

00:04:47.670 --> 00:04:47.680 align:start position:0%
pretty common way of doing that now
 

00:04:47.680 --> 00:04:48.710 align:start position:0%
pretty common way of doing that now
let's<00:04:47.840><c> also</c><00:04:48.160><c> look</c><00:04:48.320><c> at</c>

00:04:48.710 --> 00:04:48.720 align:start position:0%
let's also look at
 

00:04:48.720 --> 00:04:49.990 align:start position:0%
let's also look at
another<00:04:49.040><c> way</c><00:04:49.199><c> that</c><00:04:49.360><c> we</c><00:04:49.520><c> might</c><00:04:49.680><c> do</c><00:04:49.840><c> this</c>

00:04:49.990 --> 00:04:50.000 align:start position:0%
another way that we might do this
 

00:04:50.000 --> 00:04:51.990 align:start position:0%
another way that we might do this
because<00:04:50.479><c> we</c><00:04:50.639><c> don't</c><00:04:50.880><c> really</c><00:04:51.280><c> need</c><00:04:51.440><c> this</c><00:04:51.759><c> i</c>

00:04:51.990 --> 00:04:52.000 align:start position:0%
because we don't really need this i
 

00:04:52.000 --> 00:04:53.430 align:start position:0%
because we don't really need this i
variable<00:04:52.400><c> is</c><00:04:52.479><c> there</c><00:04:52.639><c> a</c><00:04:52.720><c> cleaner</c><00:04:53.040><c> way</c><00:04:53.199><c> that</c><00:04:53.360><c> we</c>

00:04:53.430 --> 00:04:53.440 align:start position:0%
variable is there a cleaner way that we
 

00:04:53.440 --> 00:04:54.550 align:start position:0%
variable is there a cleaner way that we
can<00:04:53.600><c> write</c><00:04:53.840><c> this</c><00:04:54.080><c> and</c><00:04:54.160><c> of</c><00:04:54.240><c> course</c><00:04:54.400><c> there's</c>

00:04:54.550 --> 00:04:54.560 align:start position:0%
can write this and of course there's
 

00:04:54.560 --> 00:04:56.310 align:start position:0%
can write this and of course there's
something<00:04:54.800><c> called</c><00:04:55.040><c> a</c><00:04:55.120><c> range</c><00:04:55.440><c> based</c><00:04:55.759><c> for</c><00:04:56.000><c> loop</c>

00:04:56.310 --> 00:04:56.320 align:start position:0%
something called a range based for loop
 

00:04:56.320 --> 00:04:56.950 align:start position:0%
something called a range based for loop
since<00:04:56.560><c> it's</c><00:04:56.720><c> c</c>

00:04:56.950 --> 00:04:56.960 align:start position:0%
since it's c
 

00:04:56.960 --> 00:04:59.830 align:start position:0%
since it's c
plus<00:04:57.759><c> 11.</c><00:04:58.160><c> so</c><00:04:58.320><c> what</c><00:04:58.479><c> we</c><00:04:58.639><c> can</c><00:04:58.800><c> actually</c><00:04:59.120><c> do</c><00:04:59.680><c> is</c>

00:04:59.830 --> 00:04:59.840 align:start position:0%
plus 11. so what we can actually do is
 

00:04:59.840 --> 00:05:01.510 align:start position:0%
plus 11. so what we can actually do is
write<00:05:00.080><c> the</c><00:05:00.160><c> data</c><00:05:00.479><c> type</c><00:05:00.800><c> here</c><00:05:01.039><c> which</c><00:05:01.280><c> is</c>

00:05:01.510 --> 00:05:01.520 align:start position:0%
write the data type here which is
 

00:05:01.520 --> 00:05:03.749 align:start position:0%
write the data type here which is
end<00:05:01.919><c> a</c><00:05:02.080><c> name</c><00:05:02.320><c> for</c><00:05:02.479><c> the</c><00:05:02.720><c> current</c><00:05:03.199><c> element</c><00:05:03.600><c> that</c>

00:05:03.749 --> 00:05:03.759 align:start position:0%
end a name for the current element that
 

00:05:03.759 --> 00:05:05.270 align:start position:0%
end a name for the current element that
we're<00:05:04.000><c> iterating</c><00:05:04.560><c> over</c>

00:05:05.270 --> 00:05:05.280 align:start position:0%
we're iterating over
 

00:05:05.280 --> 00:05:07.110 align:start position:0%
we're iterating over
and<00:05:05.440><c> then</c><00:05:05.680><c> finally</c><00:05:06.240><c> the</c><00:05:06.400><c> actual</c><00:05:06.720><c> collection</c>

00:05:07.110 --> 00:05:07.120 align:start position:0%
and then finally the actual collection
 

00:05:07.120 --> 00:05:08.790 align:start position:0%
and then finally the actual collection
which<00:05:07.360><c> in</c><00:05:07.440><c> this</c><00:05:07.600><c> case</c><00:05:07.840><c> is</c><00:05:08.000><c> values</c><00:05:08.479><c> so</c><00:05:08.560><c> in</c><00:05:08.720><c> other</c>

00:05:08.790 --> 00:05:08.800 align:start position:0%
which in this case is values so in other
 

00:05:08.800 --> 00:05:10.469 align:start position:0%
which in this case is values so in other
words<00:05:08.960><c> we're</c><00:05:09.120><c> going</c><00:05:09.440><c> through</c><00:05:09.680><c> all</c><00:05:09.919><c> the</c><00:05:10.080><c> values</c>

00:05:10.469 --> 00:05:10.479 align:start position:0%
words we're going through all the values
 

00:05:10.479 --> 00:05:11.029 align:start position:0%
words we're going through all the values
here

00:05:11.029 --> 00:05:11.039 align:start position:0%
here
 

00:05:11.039 --> 00:05:13.670 align:start position:0%
here
and<00:05:11.199><c> then</c><00:05:11.440><c> we</c><00:05:11.600><c> now</c><00:05:11.840><c> have</c><00:05:12.080><c> this</c><00:05:12.400><c> integer</c><00:05:12.960><c> value</c>

00:05:13.670 --> 00:05:13.680 align:start position:0%
and then we now have this integer value
 

00:05:13.680 --> 00:05:15.909 align:start position:0%
and then we now have this integer value
to<00:05:13.919><c> play</c><00:05:14.080><c> with</c><00:05:14.320><c> that's</c><00:05:14.560><c> our</c><00:05:14.800><c> current</c><00:05:15.199><c> values</c><00:05:15.680><c> i</c>

00:05:15.909 --> 00:05:15.919 align:start position:0%
to play with that's our current values i
 

00:05:15.919 --> 00:05:17.590 align:start position:0%
to play with that's our current values i
equivalent<00:05:16.479><c> so</c><00:05:16.639><c> we</c><00:05:16.720><c> can</c><00:05:16.880><c> just</c><00:05:17.039><c> simply</c><00:05:17.360><c> print</c>

00:05:17.590 --> 00:05:17.600 align:start position:0%
equivalent so we can just simply print
 

00:05:17.600 --> 00:05:18.870 align:start position:0%
equivalent so we can just simply print
that<00:05:17.759><c> out</c><00:05:17.840><c> to</c><00:05:18.000><c> the</c><00:05:18.080><c> console</c>

00:05:18.870 --> 00:05:18.880 align:start position:0%
that out to the console
 

00:05:18.880 --> 00:05:21.430 align:start position:0%
that out to the console
like<00:05:19.199><c> this</c><00:05:19.520><c> and</c><00:05:19.919><c> well</c><00:05:20.240><c> you</c><00:05:20.400><c> can</c><00:05:20.560><c> see</c><00:05:20.720><c> that</c><00:05:21.120><c> that</c>

00:05:21.430 --> 00:05:21.440 align:start position:0%
like this and well you can see that that
 

00:05:21.440 --> 00:05:23.670 align:start position:0%
like this and well you can see that that
results<00:05:21.919><c> in</c><00:05:22.000><c> some</c><00:05:22.240><c> very</c><00:05:22.479><c> very</c><00:05:22.720><c> clean</c><00:05:23.120><c> code</c>

00:05:23.670 --> 00:05:23.680 align:start position:0%
results in some very very clean code
 

00:05:23.680 --> 00:05:25.189 align:start position:0%
results in some very very clean code
this<00:05:23.919><c> is</c><00:05:24.000><c> usually</c><00:05:24.320><c> my</c><00:05:24.479><c> preferred</c><00:05:24.800><c> way</c><00:05:25.039><c> of</c>

00:05:25.189 --> 00:05:25.199 align:start position:0%
this is usually my preferred way of
 

00:05:25.199 --> 00:05:26.870 align:start position:0%
this is usually my preferred way of
iterating<00:05:25.680><c> through</c><00:05:25.840><c> collections</c><00:05:26.400><c> if</c><00:05:26.479><c> i</c><00:05:26.639><c> don't</c>

00:05:26.870 --> 00:05:26.880 align:start position:0%
iterating through collections if i don't
 

00:05:26.880 --> 00:05:27.590 align:start position:0%
iterating through collections if i don't
need<00:05:27.120><c> that</c><00:05:27.360><c> i</c>

00:05:27.590 --> 00:05:27.600 align:start position:0%
need that i
 

00:05:27.600 --> 00:05:29.270 align:start position:0%
need that i
variable<00:05:28.320><c> and</c><00:05:28.479><c> there</c><00:05:28.639><c> you</c><00:05:28.720><c> can</c><00:05:28.880><c> see</c><00:05:29.039><c> we</c><00:05:29.120><c> have</c>

00:05:29.270 --> 00:05:29.280 align:start position:0%
variable and there you can see we have
 

00:05:29.280 --> 00:05:31.350 align:start position:0%
variable and there you can see we have
the<00:05:29.440><c> same</c><00:05:29.680><c> result</c><00:05:30.080><c> as</c><00:05:30.320><c> before</c>

00:05:31.350 --> 00:05:31.360 align:start position:0%
the same result as before
 

00:05:31.360 --> 00:05:33.430 align:start position:0%
the same result as before
so<00:05:31.680><c> how</c><00:05:31.840><c> does</c><00:05:32.080><c> this</c><00:05:32.320><c> even</c><00:05:32.720><c> work</c><00:05:33.039><c> i</c><00:05:33.120><c> mean</c><00:05:33.360><c> it</c>

00:05:33.430 --> 00:05:33.440 align:start position:0%
so how does this even work i mean it
 

00:05:33.440 --> 00:05:35.270 align:start position:0%
so how does this even work i mean it
looks<00:05:33.680><c> like</c><00:05:33.840><c> seemingly</c><00:05:34.320><c> magic</c><00:05:34.720><c> code</c><00:05:35.039><c> and</c><00:05:35.120><c> it</c>

00:05:35.270 --> 00:05:35.280 align:start position:0%
looks like seemingly magic code and it
 

00:05:35.280 --> 00:05:37.350 align:start position:0%
looks like seemingly magic code and it
seems<00:05:35.600><c> to</c><00:05:35.759><c> work</c><00:05:36.080><c> for</c><00:05:36.240><c> this</c><00:05:36.479><c> vector</c><00:05:36.800><c> class</c><00:05:37.199><c> so</c>

00:05:37.350 --> 00:05:37.360 align:start position:0%
seems to work for this vector class so
 

00:05:37.360 --> 00:05:38.230 align:start position:0%
seems to work for this vector class so
what<00:05:37.600><c> exactly</c>

00:05:38.230 --> 00:05:38.240 align:start position:0%
what exactly
 

00:05:38.240 --> 00:05:40.150 align:start position:0%
what exactly
makes<00:05:38.560><c> it</c><00:05:38.720><c> work</c><00:05:39.120><c> with</c><00:05:39.280><c> the</c><00:05:39.440><c> vector</c><00:05:39.759><c> classes</c>

00:05:40.150 --> 00:05:40.160 align:start position:0%
makes it work with the vector classes
 

00:05:40.160 --> 00:05:41.830 align:start position:0%
makes it work with the vector classes
the<00:05:40.320><c> vector</c><00:05:40.639><c> class</c><00:05:40.960><c> contains</c><00:05:41.440><c> something</c>

00:05:41.830 --> 00:05:41.840 align:start position:0%
the vector class contains something
 

00:05:41.840 --> 00:05:42.790 align:start position:0%
the vector class contains something
specific

00:05:42.790 --> 00:05:42.800 align:start position:0%
specific
 

00:05:42.800 --> 00:05:44.550 align:start position:0%
specific
that<00:05:43.039><c> makes</c><00:05:43.280><c> this</c><00:05:43.520><c> range</c><00:05:43.759><c> based</c><00:05:44.080><c> for</c><00:05:44.240><c> loop</c>

00:05:44.550 --> 00:05:44.560 align:start position:0%
that makes this range based for loop
 

00:05:44.560 --> 00:05:46.230 align:start position:0%
that makes this range based for loop
work<00:05:44.880><c> and</c><00:05:45.039><c> how</c><00:05:45.199><c> does</c><00:05:45.440><c> that</c><00:05:45.680><c> work</c>

00:05:46.230 --> 00:05:46.240 align:start position:0%
work and how does that work
 

00:05:46.240 --> 00:05:48.230 align:start position:0%
work and how does that work
so<00:05:46.479><c> the</c><00:05:46.639><c> answer</c><00:05:46.960><c> is</c><00:05:47.120><c> yes</c><00:05:47.520><c> it</c><00:05:47.680><c> has</c><00:05:47.840><c> something</c>

00:05:48.230 --> 00:05:48.240 align:start position:0%
so the answer is yes it has something
 

00:05:48.240 --> 00:05:49.909 align:start position:0%
so the answer is yes it has something
called<00:05:48.479><c> an</c><00:05:48.639><c> iterator</c><00:05:49.039><c> now</c><00:05:49.199><c> we're</c><00:05:49.360><c> not</c><00:05:49.600><c> really</c>

00:05:49.909 --> 00:05:49.919 align:start position:0%
called an iterator now we're not really
 

00:05:49.919 --> 00:05:51.029 align:start position:0%
called an iterator now we're not really
going<00:05:50.160><c> to</c><00:05:50.240><c> get</c><00:05:50.479><c> into</c><00:05:50.720><c> this</c>

00:05:51.029 --> 00:05:51.039 align:start position:0%
going to get into this
 

00:05:51.039 --> 00:05:52.550 align:start position:0%
going to get into this
too<00:05:51.280><c> much</c><00:05:51.600><c> there's</c><00:05:51.759><c> a</c><00:05:51.919><c> lot</c><00:05:52.080><c> of</c><00:05:52.240><c> different</c>

00:05:52.550 --> 00:05:52.560 align:start position:0%
too much there's a lot of different
 

00:05:52.560 --> 00:05:54.070 align:start position:0%
too much there's a lot of different
types<00:05:52.880><c> of</c><00:05:52.960><c> iterators</c><00:05:53.520><c> here</c>

00:05:54.070 --> 00:05:54.080 align:start position:0%
types of iterators here
 

00:05:54.080 --> 00:05:55.670 align:start position:0%
types of iterators here
and<00:05:54.240><c> we're</c><00:05:54.479><c> actually</c><00:05:54.720><c> going</c><00:05:54.960><c> to</c><00:05:55.120><c> even</c><00:05:55.360><c> have</c><00:05:55.600><c> a</c>

00:05:55.670 --> 00:05:55.680 align:start position:0%
and we're actually going to even have a
 

00:05:55.680 --> 00:05:57.909 align:start position:0%
and we're actually going to even have a
look<00:05:56.000><c> at</c><00:05:56.240><c> writing</c><00:05:56.720><c> our</c><00:05:56.960><c> own</c><00:05:57.199><c> iterators</c><00:05:57.759><c> for</c>

00:05:57.909 --> 00:05:57.919 align:start position:0%
look at writing our own iterators for
 

00:05:57.919 --> 00:05:59.430 align:start position:0%
look at writing our own iterators for
our<00:05:58.000><c> custom</c><00:05:58.400><c> data</c><00:05:58.800><c> structure</c>

00:05:59.430 --> 00:05:59.440 align:start position:0%
our custom data structure
 

00:05:59.440 --> 00:06:01.350 align:start position:0%
our custom data structure
classes<00:06:00.080><c> in</c><00:06:00.160><c> the</c><00:06:00.319><c> future</c><00:06:00.800><c> but</c><00:06:00.960><c> today</c><00:06:01.199><c> we're</c>

00:06:01.350 --> 00:06:01.360 align:start position:0%
classes in the future but today we're
 

00:06:01.360 --> 00:06:02.870 align:start position:0%
classes in the future but today we're
just<00:06:01.520><c> going</c><00:06:01.759><c> to</c><00:06:01.919><c> discuss</c>

00:06:02.870 --> 00:06:02.880 align:start position:0%
just going to discuss
 

00:06:02.880 --> 00:06:05.029 align:start position:0%
just going to discuss
how<00:06:03.120><c> it</c><00:06:03.280><c> actually</c><00:06:03.600><c> works</c><00:06:04.080><c> in</c><00:06:04.240><c> practice</c><00:06:04.880><c> and</c>

00:06:05.029 --> 00:06:05.039 align:start position:0%
how it actually works in practice and
 

00:06:05.039 --> 00:06:06.230 align:start position:0%
how it actually works in practice and
how<00:06:05.199><c> you</c><00:06:05.360><c> can</c><00:06:05.600><c> use</c><00:06:05.919><c> it</c>

00:06:06.230 --> 00:06:06.240 align:start position:0%
how you can use it
 

00:06:06.240 --> 00:06:08.550 align:start position:0%
how you can use it
basically<00:06:06.720><c> a</c><00:06:06.880><c> range</c><00:06:07.199><c> based</c><00:06:07.600><c> for</c><00:06:07.759><c> loop</c><00:06:08.080><c> works</c>

00:06:08.550 --> 00:06:08.560 align:start position:0%
basically a range based for loop works
 

00:06:08.560 --> 00:06:10.710 align:start position:0%
basically a range based for loop works
because<00:06:08.960><c> the</c><00:06:09.199><c> vector</c><00:06:09.520><c> class</c><00:06:10.000><c> provides</c><00:06:10.479><c> a</c>

00:06:10.710 --> 00:06:10.720 align:start position:0%
because the vector class provides a
 

00:06:10.720 --> 00:06:11.430 align:start position:0%
because the vector class provides a
begin

00:06:11.430 --> 00:06:11.440 align:start position:0%
begin
 

00:06:11.440 --> 00:06:13.430 align:start position:0%
begin
and<00:06:11.680><c> end</c><00:06:12.000><c> function</c><00:06:12.479><c> which</c><00:06:12.720><c> returns</c><00:06:13.199><c> an</c>

00:06:13.430 --> 00:06:13.440 align:start position:0%
and end function which returns an
 

00:06:13.440 --> 00:06:15.510 align:start position:0%
and end function which returns an
iterator<00:06:13.919><c> at</c><00:06:14.000><c> a</c><00:06:14.160><c> particular</c><00:06:14.639><c> position</c><00:06:15.199><c> so</c><00:06:15.360><c> in</c>

00:06:15.510 --> 00:06:15.520 align:start position:0%
iterator at a particular position so in
 

00:06:15.520 --> 00:06:17.029 align:start position:0%
iterator at a particular position so in
other<00:06:15.680><c> words</c><00:06:15.919><c> this</c><00:06:16.160><c> is</c><00:06:16.319><c> really</c><00:06:16.639><c> just</c><00:06:16.800><c> some</c>

00:06:17.029 --> 00:06:17.039 align:start position:0%
other words this is really just some
 

00:06:17.039 --> 00:06:18.469 align:start position:0%
other words this is really just some
shorthand<00:06:17.600><c> code</c><00:06:18.000><c> for</c>

00:06:18.469 --> 00:06:18.479 align:start position:0%
shorthand code for
 

00:06:18.479 --> 00:06:19.990 align:start position:0%
shorthand code for
the<00:06:18.639><c> more</c><00:06:18.880><c> extended</c><00:06:19.280><c> version</c><00:06:19.600><c> which</c><00:06:19.840><c> we're</c>

00:06:19.990 --> 00:06:20.000 align:start position:0%
the more extended version which we're
 

00:06:20.000 --> 00:06:21.510 align:start position:0%
the more extended version which we're
going<00:06:20.160><c> to</c><00:06:20.240><c> take</c><00:06:20.479><c> a</c><00:06:20.560><c> look</c><00:06:20.720><c> at</c><00:06:20.960><c> here</c>

00:06:21.510 --> 00:06:21.520 align:start position:0%
going to take a look at here
 

00:06:21.520 --> 00:06:23.189 align:start position:0%
going to take a look at here
so<00:06:21.680><c> if</c><00:06:21.840><c> we</c><00:06:22.000><c> were</c><00:06:22.160><c> to</c><00:06:22.319><c> write</c><00:06:22.560><c> this</c><00:06:22.800><c> out</c><00:06:22.960><c> you'll</c>

00:06:23.189 --> 00:06:23.199 align:start position:0%
so if we were to write this out you'll
 

00:06:23.199 --> 00:06:24.870 align:start position:0%
so if we were to write this out you'll
see<00:06:23.440><c> that</c><00:06:23.759><c> scd</c><00:06:24.240><c> vector</c>

00:06:24.870 --> 00:06:24.880 align:start position:0%
see that scd vector
 

00:06:24.880 --> 00:06:27.590 align:start position:0%
see that scd vector
with<00:06:25.120><c> that</c><00:06:25.520><c> template</c><00:06:26.000><c> specialization</c><00:06:26.720><c> of</c><00:06:26.960><c> end</c>

00:06:27.590 --> 00:06:27.600 align:start position:0%
with that template specialization of end
 

00:06:27.600 --> 00:06:28.870 align:start position:0%
with that template specialization of end
actually<00:06:28.080><c> has</c>

00:06:28.870 --> 00:06:28.880 align:start position:0%
actually has
 

00:06:28.880 --> 00:06:31.189 align:start position:0%
actually has
another<00:06:29.280><c> type</c><00:06:29.600><c> inside</c><00:06:30.000><c> it</c><00:06:30.319><c> called</c><00:06:30.639><c> iterator</c>

00:06:31.189 --> 00:06:31.199 align:start position:0%
another type inside it called iterator
 

00:06:31.199 --> 00:06:32.710 align:start position:0%
another type inside it called iterator
and<00:06:31.280><c> there's</c><00:06:31.600><c> a</c><00:06:31.680><c> few</c><00:06:31.919><c> different</c><00:06:32.240><c> ones</c><00:06:32.479><c> as</c><00:06:32.639><c> you</c>

00:06:32.710 --> 00:06:32.720 align:start position:0%
and there's a few different ones as you
 

00:06:32.720 --> 00:06:34.629 align:start position:0%
and there's a few different ones as you
can<00:06:32.800><c> probably</c><00:06:33.199><c> see</c><00:06:33.360><c> here</c><00:06:33.840><c> there's</c><00:06:34.160><c> iterator</c>

00:06:34.629 --> 00:06:34.639 align:start position:0%
can probably see here there's iterator
 

00:06:34.639 --> 00:06:36.150 align:start position:0%
can probably see here there's iterator
there's<00:06:34.960><c> reverse</c><00:06:35.440><c> iterator</c><00:06:35.840><c> there's</c>

00:06:36.150 --> 00:06:36.160 align:start position:0%
there's reverse iterator there's
 

00:06:36.160 --> 00:06:37.189 align:start position:0%
there's reverse iterator there's
constitutor

00:06:37.189 --> 00:06:37.199 align:start position:0%
constitutor
 

00:06:37.199 --> 00:06:39.350 align:start position:0%
constitutor
so<00:06:37.600><c> just</c><00:06:37.840><c> the</c><00:06:37.919><c> regular</c><00:06:38.319><c> iterator</c><00:06:38.880><c> is</c><00:06:39.039><c> what</c><00:06:39.199><c> we</c>

00:06:39.350 --> 00:06:39.360 align:start position:0%
so just the regular iterator is what we
 

00:06:39.360 --> 00:06:41.110 align:start position:0%
so just the regular iterator is what we
can<00:06:39.440><c> use</c><00:06:39.680><c> to</c><00:06:39.840><c> iterate</c><00:06:40.160><c> through</c><00:06:40.400><c> the</c><00:06:40.479><c> values</c><00:06:40.960><c> in</c>

00:06:41.110 --> 00:06:41.120 align:start position:0%
can use to iterate through the values in
 

00:06:41.120 --> 00:06:43.110 align:start position:0%
can use to iterate through the values in
a<00:06:41.360><c> forward</c><00:06:41.840><c> fashion</c><00:06:42.240><c> and</c><00:06:42.400><c> forward</c><00:06:42.639><c> direction</c>

00:06:43.110 --> 00:06:43.120 align:start position:0%
a forward fashion and forward direction
 

00:06:43.120 --> 00:06:44.390 align:start position:0%
a forward fashion and forward direction
from<00:06:43.280><c> beginning</c><00:06:43.680><c> to</c><00:06:43.919><c> end</c>

00:06:44.390 --> 00:06:44.400 align:start position:0%
from beginning to end
 

00:06:44.400 --> 00:06:46.469 align:start position:0%
from beginning to end
reverse<00:06:44.800><c> iterator</c><00:06:45.280><c> will</c><00:06:45.360><c> do</c><00:06:45.680><c> the</c><00:06:45.919><c> opposite</c><00:06:46.400><c> it</c>

00:06:46.469 --> 00:06:46.479 align:start position:0%
reverse iterator will do the opposite it
 

00:06:46.479 --> 00:06:47.990 align:start position:0%
reverse iterator will do the opposite it
will<00:06:46.639><c> actually</c><00:06:46.960><c> start</c><00:06:47.199><c> at</c><00:06:47.280><c> the</c><00:06:47.440><c> end</c><00:06:47.680><c> and</c>

00:06:47.990 --> 00:06:48.000 align:start position:0%
will actually start at the end and
 

00:06:48.000 --> 00:06:50.390 align:start position:0%
will actually start at the end and
go<00:06:48.400><c> back</c><00:06:48.800><c> to</c><00:06:48.960><c> the</c><00:06:49.120><c> beginning</c><00:06:50.000><c> and</c><00:06:50.080><c> then</c><00:06:50.240><c> the</c>

00:06:50.390 --> 00:06:50.400 align:start position:0%
go back to the beginning and then the
 

00:06:50.400 --> 00:06:52.390 align:start position:0%
go back to the beginning and then the
const<00:06:50.800><c> versions</c><00:06:51.280><c> of</c><00:06:51.360><c> these</c><00:06:51.680><c> are</c><00:06:51.840><c> the</c><00:06:52.000><c> same</c><00:06:52.240><c> but</c>

00:06:52.390 --> 00:06:52.400 align:start position:0%
const versions of these are the same but
 

00:06:52.400 --> 00:06:54.070 align:start position:0%
const versions of these are the same but
we<00:06:52.479><c> can</c><00:06:52.639><c> use</c><00:06:52.800><c> it</c><00:06:52.960><c> on</c><00:06:53.039><c> a</c><00:06:53.120><c> const</c><00:06:53.520><c> vector</c><00:06:53.919><c> because</c>

00:06:54.070 --> 00:06:54.080 align:start position:0%
we can use it on a const vector because
 

00:06:54.080 --> 00:06:55.749 align:start position:0%
we can use it on a const vector because
it's<00:06:54.240><c> not</c><00:06:54.400><c> going</c><00:06:54.639><c> to</c><00:06:54.800><c> actually</c><00:06:55.120><c> let</c><00:06:55.360><c> us</c>

00:06:55.749 --> 00:06:55.759 align:start position:0%
it's not going to actually let us
 

00:06:55.759 --> 00:06:57.189 align:start position:0%
it's not going to actually let us
affect<00:06:56.160><c> the</c><00:06:56.319><c> values</c><00:06:56.720><c> it's</c><00:06:56.800><c> not</c><00:06:56.880><c> going</c><00:06:56.960><c> to</c><00:06:57.039><c> let</c>

00:06:57.189 --> 00:06:57.199 align:start position:0%
affect the values it's not going to let
 

00:06:57.199 --> 00:06:59.270 align:start position:0%
affect the values it's not going to let
us<00:06:57.360><c> mutate</c><00:06:57.759><c> the</c><00:06:57.840><c> values</c><00:06:58.479><c> just</c><00:06:58.639><c> simply</c><00:06:59.039><c> read</c>

00:06:59.270 --> 00:06:59.280 align:start position:0%
us mutate the values just simply read
 

00:06:59.280 --> 00:06:59.749 align:start position:0%
us mutate the values just simply read
them

00:06:59.749 --> 00:06:59.759 align:start position:0%
them
 

00:06:59.759 --> 00:07:01.909 align:start position:0%
them
so<00:06:59.919><c> if</c><00:07:00.000><c> we</c><00:07:00.160><c> just</c><00:07:00.319><c> select</c><00:07:00.720><c> the</c><00:07:00.880><c> normal</c><00:07:01.199><c> iterator</c>

00:07:01.909 --> 00:07:01.919 align:start position:0%
so if we just select the normal iterator
 

00:07:01.919 --> 00:07:03.110 align:start position:0%
so if we just select the normal iterator
that's<00:07:02.080><c> what</c><00:07:02.240><c> we</c><00:07:02.400><c> have</c><00:07:02.639><c> here</c>

00:07:03.110 --> 00:07:03.120 align:start position:0%
that's what we have here
 

00:07:03.120 --> 00:07:05.430 align:start position:0%
that's what we have here
how<00:07:03.360><c> can</c><00:07:03.520><c> we</c><00:07:03.919><c> use</c><00:07:04.240><c> this</c><00:07:04.479><c> to</c><00:07:04.720><c> iterate</c><00:07:05.199><c> through</c>

00:07:05.430 --> 00:07:05.440 align:start position:0%
how can we use this to iterate through
 

00:07:05.440 --> 00:07:06.950 align:start position:0%
how can we use this to iterate through
all<00:07:05.599><c> of</c><00:07:05.680><c> the</c><00:07:05.840><c> variables</c><00:07:06.479><c> or</c><00:07:06.639><c> all</c><00:07:06.800><c> of</c><00:07:06.880><c> the</c>

00:07:06.950 --> 00:07:06.960 align:start position:0%
all of the variables or all of the
 

00:07:06.960 --> 00:07:09.510 align:start position:0%
all of the variables or all of the
elements<00:07:07.520><c> inside</c><00:07:08.000><c> this</c><00:07:08.240><c> std</c><00:07:08.720><c> vector</c>

00:07:09.510 --> 00:07:09.520 align:start position:0%
elements inside this std vector
 

00:07:09.520 --> 00:07:11.270 align:start position:0%
elements inside this std vector
well<00:07:09.919><c> you'd</c><00:07:10.160><c> write</c><00:07:10.319><c> a</c><00:07:10.400><c> for</c><00:07:10.639><c> loop</c><00:07:10.960><c> just</c><00:07:11.120><c> like</c>

00:07:11.270 --> 00:07:11.280 align:start position:0%
well you'd write a for loop just like
 

00:07:11.280 --> 00:07:13.510 align:start position:0%
well you'd write a for loop just like
you<00:07:11.360><c> did</c><00:07:11.599><c> here</c><00:07:12.160><c> so</c><00:07:12.319><c> we'd</c><00:07:12.560><c> have</c><00:07:12.720><c> an</c><00:07:12.880><c> iterator</c><00:07:13.360><c> we</c>

00:07:13.510 --> 00:07:13.520 align:start position:0%
you did here so we'd have an iterator we
 

00:07:13.520 --> 00:07:15.430 align:start position:0%
you did here so we'd have an iterator we
can<00:07:13.680><c> call</c><00:07:13.919><c> it</c><00:07:14.080><c> i</c><00:07:14.240><c> t</c><00:07:14.479><c> that's</c><00:07:14.639><c> a</c><00:07:14.720><c> common</c><00:07:15.039><c> name</c><00:07:15.199><c> for</c>

00:07:15.430 --> 00:07:15.440 align:start position:0%
can call it i t that's a common name for
 

00:07:15.440 --> 00:07:16.469 align:start position:0%
can call it i t that's a common name for
it<00:07:15.599><c> for</c><00:07:15.759><c> iterator</c>

00:07:16.469 --> 00:07:16.479 align:start position:0%
it for iterator
 

00:07:16.479 --> 00:07:18.390 align:start position:0%
it for iterator
and<00:07:16.639><c> we'll</c><00:07:16.800><c> set</c><00:07:17.039><c> this</c><00:07:17.199><c> to</c><00:07:17.360><c> the</c><00:07:17.520><c> beginning</c><00:07:18.240><c> of</c>

00:07:18.390 --> 00:07:18.400 align:start position:0%
and we'll set this to the beginning of
 

00:07:18.400 --> 00:07:19.749 align:start position:0%
and we'll set this to the beginning of
our<00:07:18.639><c> collection</c><00:07:19.120><c> which</c><00:07:19.360><c> is</c><00:07:19.440><c> going</c><00:07:19.520><c> to</c><00:07:19.599><c> be</c>

00:07:19.749 --> 00:07:19.759 align:start position:0%
our collection which is going to be
 

00:07:19.759 --> 00:07:21.510 align:start position:0%
our collection which is going to be
values.begin

00:07:21.510 --> 00:07:21.520 align:start position:0%
values.begin
 

00:07:21.520 --> 00:07:23.990 align:start position:0%
values.begin
then<00:07:22.000><c> we</c><00:07:22.160><c> need</c><00:07:22.319><c> to</c><00:07:22.720><c> check</c><00:07:23.120><c> the</c><00:07:23.360><c> end</c><00:07:23.599><c> condition</c>

00:07:23.990 --> 00:07:24.000 align:start position:0%
then we need to check the end condition
 

00:07:24.000 --> 00:07:25.510 align:start position:0%
then we need to check the end condition
so<00:07:24.160><c> in</c><00:07:24.240><c> other</c><00:07:24.400><c> words</c><00:07:24.720><c> just</c><00:07:24.880><c> like</c><00:07:25.039><c> with</c><00:07:25.280><c> any</c>

00:07:25.510 --> 00:07:25.520 align:start position:0%
so in other words just like with any
 

00:07:25.520 --> 00:07:25.909 align:start position:0%
so in other words just like with any
other

00:07:25.909 --> 00:07:25.919 align:start position:0%
other
 

00:07:25.919 --> 00:07:28.390 align:start position:0%
other
for<00:07:26.160><c> loop</c><00:07:26.960><c> at</c><00:07:27.120><c> what</c><00:07:27.360><c> condition</c><00:07:27.840><c> does</c><00:07:28.000><c> this</c><00:07:28.240><c> for</c>

00:07:28.390 --> 00:07:28.400 align:start position:0%
for loop at what condition does this for
 

00:07:28.400 --> 00:07:29.270 align:start position:0%
for loop at what condition does this for
loop<00:07:28.800><c> break</c>

00:07:29.270 --> 00:07:29.280 align:start position:0%
loop break
 

00:07:29.280 --> 00:07:31.430 align:start position:0%
loop break
at<00:07:29.440><c> what</c><00:07:29.599><c> condition</c><00:07:29.919><c> does</c><00:07:30.160><c> it</c><00:07:30.240><c> terminate</c><00:07:31.199><c> so</c>

00:07:31.430 --> 00:07:31.440 align:start position:0%
at what condition does it terminate so
 

00:07:31.440 --> 00:07:33.589 align:start position:0%
at what condition does it terminate so
it<00:07:31.599><c> terminates</c><00:07:32.240><c> if</c><00:07:32.400><c> this</c><00:07:32.639><c> iterator</c>

00:07:33.589 --> 00:07:33.599 align:start position:0%
it terminates if this iterator
 

00:07:33.599 --> 00:07:35.909 align:start position:0%
it terminates if this iterator
or<00:07:33.840><c> rather</c><00:07:34.319><c> at</c><00:07:34.479><c> what</c><00:07:34.720><c> condition</c><00:07:35.199><c> does</c><00:07:35.440><c> it</c><00:07:35.599><c> not</c>

00:07:35.909 --> 00:07:35.919 align:start position:0%
or rather at what condition does it not
 

00:07:35.919 --> 00:07:37.189 align:start position:0%
or rather at what condition does it not
terminate<00:07:36.560><c> right</c><00:07:36.800><c> so</c>

00:07:37.189 --> 00:07:37.199 align:start position:0%
terminate right so
 

00:07:37.199 --> 00:07:38.950 align:start position:0%
terminate right so
this<00:07:37.440><c> for</c><00:07:37.599><c> loop</c><00:07:37.759><c> will</c><00:07:38.000><c> run</c><00:07:38.319><c> as</c><00:07:38.479><c> long</c><00:07:38.639><c> as</c><00:07:38.800><c> this</c>

00:07:38.950 --> 00:07:38.960 align:start position:0%
this for loop will run as long as this
 

00:07:38.960 --> 00:07:40.390 align:start position:0%
this for loop will run as long as this
statement<00:07:39.360><c> is</c><00:07:39.440><c> going</c><00:07:39.680><c> to</c><00:07:39.759><c> be</c><00:07:39.919><c> true</c>

00:07:40.390 --> 00:07:40.400 align:start position:0%
statement is going to be true
 

00:07:40.400 --> 00:07:42.629 align:start position:0%
statement is going to be true
so<00:07:40.639><c> as</c><00:07:40.800><c> long</c><00:07:40.960><c> as</c><00:07:41.120><c> the</c><00:07:41.199><c> iterator</c><00:07:41.840><c> is</c><00:07:42.000><c> not</c><00:07:42.319><c> equal</c>

00:07:42.629 --> 00:07:42.639 align:start position:0%
so as long as the iterator is not equal
 

00:07:42.639 --> 00:07:44.309 align:start position:0%
so as long as the iterator is not equal
to<00:07:42.880><c> the</c><00:07:43.280><c> end</c><00:07:43.919><c> of</c>

00:07:44.309 --> 00:07:44.319 align:start position:0%
to the end of
 

00:07:44.319 --> 00:07:46.629 align:start position:0%
to the end of
this<00:07:44.800><c> collection</c><00:07:45.360><c> so</c><00:07:45.599><c> values.end</c><00:07:46.479><c> will</c>

00:07:46.629 --> 00:07:46.639 align:start position:0%
this collection so values.end will
 

00:07:46.639 --> 00:07:47.830 align:start position:0%
this collection so values.end will
return<00:07:46.960><c> an</c><00:07:47.120><c> iterator</c>

00:07:47.830 --> 00:07:47.840 align:start position:0%
return an iterator
 

00:07:47.840 --> 00:07:50.070 align:start position:0%
return an iterator
that<00:07:48.000><c> is</c><00:07:48.160><c> actually</c><00:07:48.639><c> already</c><00:07:49.120><c> outside</c><00:07:49.759><c> of</c><00:07:49.840><c> the</c>

00:07:50.070 --> 00:07:50.080 align:start position:0%
that is actually already outside of the
 

00:07:50.080 --> 00:07:51.909 align:start position:0%
that is actually already outside of the
accepted<00:07:50.560><c> range</c><00:07:50.800><c> it's</c><00:07:50.960><c> basically</c><00:07:51.280><c> an</c><00:07:51.440><c> invalid</c>

00:07:51.909 --> 00:07:51.919 align:start position:0%
accepted range it's basically an invalid
 

00:07:51.919 --> 00:07:52.790 align:start position:0%
accepted range it's basically an invalid
iterator<00:07:52.319><c> so</c>

00:07:52.790 --> 00:07:52.800 align:start position:0%
iterator so
 

00:07:52.800 --> 00:07:54.869 align:start position:0%
iterator so
this<00:07:53.120><c> is</c><00:07:53.360><c> not</c><00:07:53.599><c> really</c><00:07:54.000><c> the</c><00:07:54.240><c> end</c><00:07:54.479><c> it's</c><00:07:54.560><c> not</c><00:07:54.720><c> the</c>

00:07:54.869 --> 00:07:54.879 align:start position:0%
this is not really the end it's not the
 

00:07:54.879 --> 00:07:56.070 align:start position:0%
this is not really the end it's not the
last<00:07:55.120><c> element</c><00:07:55.599><c> it's</c>

00:07:56.070 --> 00:07:56.080 align:start position:0%
last element it's
 

00:07:56.080 --> 00:07:58.309 align:start position:0%
last element it's
the<00:07:56.560><c> element</c><00:07:57.120><c> after</c><00:07:57.440><c> the</c><00:07:57.520><c> last</c><00:07:57.840><c> element</c><00:07:58.160><c> if</c>

00:07:58.309 --> 00:07:58.319 align:start position:0%
the element after the last element if
 

00:07:58.319 --> 00:07:59.270 align:start position:0%
the element after the last element if
that<00:07:58.479><c> makes</c><00:07:58.720><c> sense</c>

00:07:59.270 --> 00:07:59.280 align:start position:0%
that makes sense
 

00:07:59.280 --> 00:08:00.710 align:start position:0%
that makes sense
and<00:07:59.360><c> then</c><00:07:59.599><c> finally</c><00:08:00.000><c> we</c><00:08:00.160><c> need</c><00:08:00.319><c> to</c><00:08:00.479><c> write</c>

00:08:00.710 --> 00:08:00.720 align:start position:0%
and then finally we need to write
 

00:08:00.720 --> 00:08:02.869 align:start position:0%
and then finally we need to write
iterator<00:08:01.199><c> plus</c><00:08:01.440><c> plus</c><00:08:01.680><c> you</c><00:08:01.759><c> can</c><00:08:02.160><c> also</c><00:08:02.479><c> write</c><00:08:02.720><c> it</c>

00:08:02.869 --> 00:08:02.879 align:start position:0%
iterator plus plus you can also write it
 

00:08:02.879 --> 00:08:03.189 align:start position:0%
iterator plus plus you can also write it
as

00:08:03.189 --> 00:08:03.199 align:start position:0%
as
 

00:08:03.199 --> 00:08:05.510 align:start position:0%
as
plus<00:08:03.520><c> plus</c><00:08:03.919><c> iterator</c><00:08:04.479><c> or</c><00:08:04.639><c> as</c><00:08:04.800><c> a</c><00:08:04.879><c> postfix</c><00:08:05.440><c> as</c>

00:08:05.510 --> 00:08:05.520 align:start position:0%
plus plus iterator or as a postfix as
 

00:08:05.520 --> 00:08:07.350 align:start position:0%
plus plus iterator or as a postfix as
well<00:08:06.000><c> iterator</c><00:08:06.479><c> plus</c><00:08:06.720><c> plus</c><00:08:06.960><c> it</c><00:08:07.120><c> doesn't</c>

00:08:07.350 --> 00:08:07.360 align:start position:0%
well iterator plus plus it doesn't
 

00:08:07.360 --> 00:08:09.110 align:start position:0%
well iterator plus plus it doesn't
matter<00:08:07.680><c> in</c><00:08:07.840><c> this</c><00:08:08.000><c> case</c><00:08:08.319><c> now</c><00:08:08.479><c> let</c><00:08:08.639><c> me</c><00:08:08.720><c> just</c>

00:08:09.110 --> 00:08:09.120 align:start position:0%
matter in this case now let me just
 

00:08:09.120 --> 00:08:10.790 align:start position:0%
matter in this case now let me just
slightly<00:08:09.520><c> clean</c><00:08:09.759><c> up</c><00:08:09.919><c> this</c><00:08:10.080><c> code</c><00:08:10.400><c> and</c><00:08:10.479><c> drop</c><00:08:10.720><c> it</c>

00:08:10.790 --> 00:08:10.800 align:start position:0%
slightly clean up this code and drop it
 

00:08:10.800 --> 00:08:12.629 align:start position:0%
slightly clean up this code and drop it
down<00:08:10.960><c> a</c><00:08:11.039><c> bit</c><00:08:11.280><c> so</c><00:08:11.440><c> that</c><00:08:11.599><c> you</c><00:08:11.680><c> can</c><00:08:11.840><c> see</c><00:08:12.000><c> it</c><00:08:12.160><c> all</c>

00:08:12.629 --> 00:08:12.639 align:start position:0%
down a bit so that you can see it all
 

00:08:12.639 --> 00:08:14.710 align:start position:0%
down a bit so that you can see it all
okay<00:08:13.120><c> so</c><00:08:13.360><c> that's</c><00:08:13.680><c> it</c><00:08:14.000><c> we're</c><00:08:14.240><c> going</c><00:08:14.479><c> through</c>

00:08:14.710 --> 00:08:14.720 align:start position:0%
okay so that's it we're going through
 

00:08:14.720 --> 00:08:16.230 align:start position:0%
okay so that's it we're going through
all<00:08:14.800><c> of</c><00:08:14.960><c> our</c><00:08:15.039><c> values</c><00:08:15.360><c> so</c><00:08:15.520><c> now</c><00:08:15.680><c> that</c><00:08:15.759><c> we</c><00:08:15.919><c> have</c><00:08:16.080><c> an</c>

00:08:16.230 --> 00:08:16.240 align:start position:0%
all of our values so now that we have an
 

00:08:16.240 --> 00:08:18.150 align:start position:0%
all of our values so now that we have an
iterator<00:08:16.720><c> though</c><00:08:16.879><c> how</c><00:08:17.039><c> do</c><00:08:17.199><c> we</c><00:08:17.280><c> get</c><00:08:17.440><c> the</c><00:08:17.680><c> value</c>

00:08:18.150 --> 00:08:18.160 align:start position:0%
iterator though how do we get the value
 

00:08:18.160 --> 00:08:19.830 align:start position:0%
iterator though how do we get the value
at<00:08:18.319><c> that</c><00:08:18.560><c> iterated</c><00:08:19.039><c> position</c>

00:08:19.830 --> 00:08:19.840 align:start position:0%
at that iterated position
 

00:08:19.840 --> 00:08:21.350 align:start position:0%
at that iterated position
well<00:08:20.080><c> you</c><00:08:20.240><c> have</c><00:08:20.400><c> to</c><00:08:20.560><c> de-reference</c><00:08:21.199><c> the</c>

00:08:21.350 --> 00:08:21.360 align:start position:0%
well you have to de-reference the
 

00:08:21.360 --> 00:08:23.270 align:start position:0%
well you have to de-reference the
iterator<00:08:22.000><c> as</c><00:08:22.160><c> if</c><00:08:22.319><c> it</c><00:08:22.400><c> was</c><00:08:22.560><c> a</c><00:08:22.639><c> pointer</c>

00:08:23.270 --> 00:08:23.280 align:start position:0%
iterator as if it was a pointer
 

00:08:23.280 --> 00:08:25.110 align:start position:0%
iterator as if it was a pointer
this<00:08:23.520><c> works</c><00:08:23.919><c> because</c><00:08:24.400><c> they've</c><00:08:24.720><c> just</c>

00:08:25.110 --> 00:08:25.120 align:start position:0%
this works because they've just
 

00:08:25.120 --> 00:08:27.350 align:start position:0%
this works because they've just
implemented<00:08:25.759><c> this</c><00:08:26.240><c> the</c><00:08:26.479><c> reference</c><00:08:26.960><c> operator</c>

00:08:27.350 --> 00:08:27.360 align:start position:0%
implemented this the reference operator
 

00:08:27.360 --> 00:08:28.950 align:start position:0%
implemented this the reference operator
kind<00:08:27.520><c> of</c><00:08:27.680><c> asterisk</c><00:08:28.240><c> function</c>

00:08:28.950 --> 00:08:28.960 align:start position:0%
kind of asterisk function
 

00:08:28.960 --> 00:08:31.589 align:start position:0%
kind of asterisk function
inside<00:08:29.440><c> the</c><00:08:29.520><c> actual</c><00:08:29.840><c> iterator</c><00:08:30.319><c> class</c><00:08:30.879><c> okay</c><00:08:31.360><c> so</c>

00:08:31.589 --> 00:08:31.599 align:start position:0%
inside the actual iterator class okay so
 

00:08:31.599 --> 00:08:32.949 align:start position:0%
inside the actual iterator class okay so
now<00:08:31.759><c> to</c><00:08:31.919><c> print</c><00:08:32.080><c> this</c><00:08:32.240><c> out</c><00:08:32.320><c> to</c><00:08:32.479><c> the</c><00:08:32.560><c> console</c>

00:08:32.949 --> 00:08:32.959 align:start position:0%
now to print this out to the console
 

00:08:32.959 --> 00:08:34.709 align:start position:0%
now to print this out to the console
we'll<00:08:33.120><c> follow</c><00:08:33.360><c> the</c><00:08:33.519><c> same</c><00:08:33.680><c> strategy</c><00:08:34.159><c> as</c><00:08:34.320><c> before</c>

00:08:34.709 --> 00:08:34.719 align:start position:0%
we'll follow the same strategy as before
 

00:08:34.719 --> 00:08:36.389 align:start position:0%
we'll follow the same strategy as before
we<00:08:34.880><c> simply</c><00:08:35.200><c> dereference</c><00:08:35.599><c> the</c><00:08:35.760><c> iterator</c><00:08:36.240><c> and</c>

00:08:36.389 --> 00:08:36.399 align:start position:0%
we simply dereference the iterator and
 

00:08:36.399 --> 00:08:37.589 align:start position:0%
we simply dereference the iterator and
print<00:08:36.640><c> it</c><00:08:36.800><c> out</c><00:08:36.880><c> like</c><00:08:37.039><c> this</c>

00:08:37.589 --> 00:08:37.599 align:start position:0%
print it out like this
 

00:08:37.599 --> 00:08:39.589 align:start position:0%
print it out like this
and<00:08:37.760><c> now</c><00:08:38.000><c> what</c><00:08:38.159><c> we</c><00:08:38.399><c> should</c><00:08:38.640><c> see</c><00:08:38.959><c> is</c><00:08:39.200><c> our</c><00:08:39.360><c> one</c>

00:08:39.589 --> 00:08:39.599 align:start position:0%
and now what we should see is our one
 

00:08:39.599 --> 00:08:41.190 align:start position:0%
and now what we should see is our one
two<00:08:39.760><c> three</c><00:08:39.919><c> four</c><00:08:40.159><c> five</c><00:08:40.560><c> elements</c><00:08:40.959><c> being</c>

00:08:41.190 --> 00:08:41.200 align:start position:0%
two three four five elements being
 

00:08:41.200 --> 00:08:42.790 align:start position:0%
two three four five elements being
printed<00:08:41.519><c> for</c><00:08:41.680><c> the</c><00:08:41.839><c> third</c><00:08:42.159><c> time</c>

00:08:42.790 --> 00:08:42.800 align:start position:0%
printed for the third time
 

00:08:42.800 --> 00:08:44.710 align:start position:0%
printed for the third time
and<00:08:42.959><c> that</c><00:08:43.200><c> is</c><00:08:43.360><c> of</c><00:08:43.440><c> course</c><00:08:43.760><c> what</c><00:08:43.919><c> we</c><00:08:44.080><c> see</c><00:08:44.399><c> over</c>

00:08:44.710 --> 00:08:44.720 align:start position:0%
and that is of course what we see over
 

00:08:44.720 --> 00:08:46.630 align:start position:0%
and that is of course what we see over
here<00:08:45.200><c> great</c><00:08:45.680><c> so</c><00:08:45.920><c> why</c><00:08:46.080><c> would</c><00:08:46.320><c> you</c>

00:08:46.630 --> 00:08:46.640 align:start position:0%
here great so why would you
 

00:08:46.640 --> 00:08:49.670 align:start position:0%
here great so why would you
ever<00:08:47.120><c> use</c><00:08:47.680><c> iterators</c><00:08:48.320><c> like</c><00:08:48.560><c> this</c><00:08:48.959><c> and</c><00:08:49.360><c> to</c><00:08:49.519><c> be</c>

00:08:49.670 --> 00:08:49.680 align:start position:0%
ever use iterators like this and to be
 

00:08:49.680 --> 00:08:51.269 align:start position:0%
ever use iterators like this and to be
honest<00:08:49.920><c> the</c><00:08:50.080><c> answer</c><00:08:50.399><c> is</c><00:08:50.640><c> you</c><00:08:50.880><c> probably</c>

00:08:51.269 --> 00:08:51.279 align:start position:0%
honest the answer is you probably
 

00:08:51.279 --> 00:08:52.550 align:start position:0%
honest the answer is you probably
wouldn't<00:08:51.519><c> these</c><00:08:51.760><c> days</c><00:08:52.000><c> because</c><00:08:52.240><c> a</c><00:08:52.320><c> range</c>

00:08:52.550 --> 00:08:52.560 align:start position:0%
wouldn't these days because a range
 

00:08:52.560 --> 00:08:53.590 align:start position:0%
wouldn't these days because a range
based<00:08:52.800><c> for</c><00:08:53.040><c> loop</c><00:08:53.360><c> is</c>

00:08:53.590 --> 00:08:53.600 align:start position:0%
based for loop is
 

00:08:53.600 --> 00:08:55.670 align:start position:0%
based for loop is
essentially<00:08:54.160><c> shorthand</c><00:08:54.800><c> for</c><00:08:55.040><c> this</c><00:08:55.440><c> and</c><00:08:55.600><c> of</c>

00:08:55.670 --> 00:08:55.680 align:start position:0%
essentially shorthand for this and of
 

00:08:55.680 --> 00:08:57.110 align:start position:0%
essentially shorthand for this and of
course<00:08:55.920><c> it</c><00:08:56.000><c> looks</c><00:08:56.240><c> a</c><00:08:56.320><c> lot</c><00:08:56.480><c> cleaner</c>

00:08:57.110 --> 00:08:57.120 align:start position:0%
course it looks a lot cleaner
 

00:08:57.120 --> 00:08:58.630 align:start position:0%
course it looks a lot cleaner
however<00:08:57.519><c> there</c><00:08:57.680><c> are</c><00:08:57.760><c> certain</c><00:08:58.080><c> situations</c>

00:08:58.630 --> 00:08:58.640 align:start position:0%
however there are certain situations
 

00:08:58.640 --> 00:09:00.230 align:start position:0%
however there are certain situations
where<00:08:58.800><c> you</c><00:08:58.959><c> might</c><00:08:59.120><c> want</c><00:08:59.279><c> to</c><00:08:59.440><c> manipulate</c><00:09:00.080><c> the</c>

00:09:00.230 --> 00:09:00.240 align:start position:0%
where you might want to manipulate the
 

00:09:00.240 --> 00:09:02.389 align:start position:0%
where you might want to manipulate the
position<00:09:00.640><c> of</c><00:09:00.720><c> the</c><00:09:00.880><c> iterator</c><00:09:01.360><c> a</c><00:09:01.440><c> good</c><00:09:01.600><c> example</c>

00:09:02.389 --> 00:09:02.399 align:start position:0%
position of the iterator a good example
 

00:09:02.399 --> 00:09:04.470 align:start position:0%
position of the iterator a good example
is<00:09:02.480><c> if</c><00:09:02.640><c> you</c><00:09:02.720><c> want</c><00:09:02.959><c> to</c><00:09:03.120><c> erase</c><00:09:03.680><c> an</c><00:09:03.920><c> element</c><00:09:04.240><c> but</c>

00:09:04.470 --> 00:09:04.480 align:start position:0%
is if you want to erase an element but
 

00:09:04.480 --> 00:09:05.829 align:start position:0%
is if you want to erase an element but
still<00:09:04.720><c> keep</c><00:09:04.959><c> iterating</c><00:09:05.440><c> over</c>

00:09:05.829 --> 00:09:05.839 align:start position:0%
still keep iterating over
 

00:09:05.839 --> 00:09:07.350 align:start position:0%
still keep iterating over
the<00:09:05.920><c> rest</c><00:09:06.160><c> of</c><00:09:06.240><c> the</c><00:09:06.320><c> collection</c><00:09:06.880><c> in</c><00:09:06.959><c> that</c><00:09:07.120><c> case</c>

00:09:07.350 --> 00:09:07.360 align:start position:0%
the rest of the collection in that case
 

00:09:07.360 --> 00:09:08.949 align:start position:0%
the rest of the collection in that case
the<00:09:07.519><c> iterator</c><00:09:07.920><c> gets</c><00:09:08.080><c> invalidated</c><00:09:08.720><c> you</c><00:09:08.800><c> have</c>

00:09:08.949 --> 00:09:08.959 align:start position:0%
the iterator gets invalidated you have
 

00:09:08.959 --> 00:09:09.990 align:start position:0%
the iterator gets invalidated you have
to<00:09:09.120><c> deal</c><00:09:09.360><c> with</c><00:09:09.440><c> that</c>

00:09:09.990 --> 00:09:10.000 align:start position:0%
to deal with that
 

00:09:10.000 --> 00:09:11.590 align:start position:0%
to deal with that
or<00:09:10.160><c> maybe</c><00:09:10.480><c> you</c><00:09:10.560><c> want</c><00:09:10.720><c> to</c><00:09:10.880><c> insert</c><00:09:11.279><c> something</c>

00:09:11.590 --> 00:09:11.600 align:start position:0%
or maybe you want to insert something
 

00:09:11.600 --> 00:09:12.870 align:start position:0%
or maybe you want to insert something
into<00:09:11.760><c> the</c><00:09:11.839><c> middle</c><00:09:12.160><c> based</c><00:09:12.399><c> on</c><00:09:12.480><c> a</c><00:09:12.560><c> certain</c>

00:09:12.870 --> 00:09:12.880 align:start position:0%
into the middle based on a certain
 

00:09:12.880 --> 00:09:14.310 align:start position:0%
into the middle based on a certain
condition<00:09:13.360><c> there's</c><00:09:13.600><c> a</c><00:09:13.680><c> few</c><00:09:13.920><c> different</c>

00:09:14.310 --> 00:09:14.320 align:start position:0%
condition there's a few different
 

00:09:14.320 --> 00:09:15.910 align:start position:0%
condition there's a few different
scenarios<00:09:14.880><c> in</c><00:09:14.959><c> which</c><00:09:15.120><c> you</c><00:09:15.279><c> just</c><00:09:15.360><c> simply</c><00:09:15.680><c> can't</c>

00:09:15.910 --> 00:09:15.920 align:start position:0%
scenarios in which you just simply can't
 

00:09:15.920 --> 00:09:17.990 align:start position:0%
scenarios in which you just simply can't
use<00:09:16.080><c> this</c><00:09:16.399><c> because</c><00:09:16.959><c> it</c><00:09:17.120><c> just</c><00:09:17.360><c> wouldn't</c><00:09:17.680><c> work</c>

00:09:17.990 --> 00:09:18.000 align:start position:0%
use this because it just wouldn't work
 

00:09:18.000 --> 00:09:19.509 align:start position:0%
use this because it just wouldn't work
you<00:09:18.080><c> need</c><00:09:18.240><c> to</c><00:09:18.399><c> be</c><00:09:18.480><c> able</c><00:09:18.640><c> to</c><00:09:18.800><c> manipulate</c><00:09:19.360><c> the</c>

00:09:19.509 --> 00:09:19.519 align:start position:0%
you need to be able to manipulate the
 

00:09:19.519 --> 00:09:21.030 align:start position:0%
you need to be able to manipulate the
position<00:09:19.920><c> of</c><00:09:20.080><c> the</c><00:09:20.160><c> iterator</c><00:09:20.720><c> and</c><00:09:20.800><c> we'll</c>

00:09:21.030 --> 00:09:21.040 align:start position:0%
position of the iterator and we'll
 

00:09:21.040 --> 00:09:22.470 align:start position:0%
position of the iterator and we'll
probably<00:09:21.440><c> get</c><00:09:21.600><c> into</c><00:09:21.839><c> those</c>

00:09:22.470 --> 00:09:22.480 align:start position:0%
probably get into those
 

00:09:22.480 --> 00:09:24.710 align:start position:0%
probably get into those
in<00:09:22.640><c> a</c><00:09:22.720><c> future</c><00:09:23.120><c> video</c><00:09:23.600><c> but</c><00:09:23.760><c> obviously</c><00:09:24.399><c> for</c>

00:09:24.710 --> 00:09:24.720 align:start position:0%
in a future video but obviously for
 

00:09:24.720 --> 00:09:27.030 align:start position:0%
in a future video but obviously for
something<00:09:25.120><c> like</c><00:09:25.360><c> a</c><00:09:25.519><c> vector</c><00:09:26.000><c> or</c><00:09:26.160><c> an</c><00:09:26.320><c> array</c><00:09:26.800><c> with</c>

00:09:27.030 --> 00:09:27.040 align:start position:0%
something like a vector or an array with
 

00:09:27.040 --> 00:09:29.430 align:start position:0%
something like a vector or an array with
an<00:09:27.200><c> index</c><00:09:27.600><c> operator</c><00:09:27.920><c> that</c><00:09:28.080><c> simply</c><00:09:28.399><c> takes</c><00:09:28.720><c> in</c><00:09:28.959><c> a</c>

00:09:29.430 --> 00:09:29.440 align:start position:0%
an index operator that simply takes in a
 

00:09:29.440 --> 00:09:31.430 align:start position:0%
an index operator that simply takes in a
numerical<00:09:30.160><c> index</c><00:09:30.480><c> it</c><00:09:30.640><c> just</c><00:09:30.800><c> ascends</c><00:09:31.200><c> like</c><00:09:31.360><c> it</c>

00:09:31.430 --> 00:09:31.440 align:start position:0%
numerical index it just ascends like it
 

00:09:31.440 --> 00:09:32.870 align:start position:0%
numerical index it just ascends like it
would<00:09:31.600><c> for</c><00:09:31.760><c> an</c><00:09:31.920><c> array</c><00:09:32.240><c> here</c>

00:09:32.870 --> 00:09:32.880 align:start position:0%
would for an array here
 

00:09:32.880 --> 00:09:34.949 align:start position:0%
would for an array here
they're<00:09:33.040><c> not</c><00:09:33.360><c> really</c><00:09:33.839><c> necessary</c><00:09:34.480><c> you</c><00:09:34.560><c> don't</c>

00:09:34.949 --> 00:09:34.959 align:start position:0%
they're not really necessary you don't
 

00:09:34.959 --> 00:09:36.630 align:start position:0%
they're not really necessary you don't
actually<00:09:35.360><c> have</c><00:09:35.519><c> to</c><00:09:35.680><c> write</c><00:09:35.920><c> code</c><00:09:36.160><c> like</c><00:09:36.320><c> this</c>

00:09:36.630 --> 00:09:36.640 align:start position:0%
actually have to write code like this
 

00:09:36.640 --> 00:09:37.190 align:start position:0%
actually have to write code like this
because

00:09:37.190 --> 00:09:37.200 align:start position:0%
because
 

00:09:37.200 --> 00:09:39.670 align:start position:0%
because
we<00:09:37.440><c> can</c><00:09:37.680><c> of</c><00:09:37.760><c> course</c><00:09:38.160><c> just</c><00:09:38.720><c> write</c><00:09:38.959><c> a</c><00:09:39.120><c> normal</c><00:09:39.519><c> for</c>

00:09:39.670 --> 00:09:39.680 align:start position:0%
we can of course just write a normal for
 

00:09:39.680 --> 00:09:40.790 align:start position:0%
we can of course just write a normal for
loop<00:09:40.000><c> and</c><00:09:40.160><c> use</c><00:09:40.399><c> i</c>

00:09:40.790 --> 00:09:40.800 align:start position:0%
loop and use i
 

00:09:40.800 --> 00:09:43.430 align:start position:0%
loop and use i
as<00:09:41.040><c> the</c><00:09:41.279><c> index</c><00:09:41.760><c> however</c><00:09:42.399><c> iterators</c><00:09:43.200><c> are</c>

00:09:43.430 --> 00:09:43.440 align:start position:0%
as the index however iterators are
 

00:09:43.440 --> 00:09:44.150 align:start position:0%
as the index however iterators are
essentially

00:09:44.150 --> 00:09:44.160 align:start position:0%
essentially
 

00:09:44.160 --> 00:09:46.550 align:start position:0%
essentially
mandatory<00:09:45.040><c> for</c><00:09:45.279><c> other</c><00:09:45.600><c> types</c><00:09:45.920><c> that</c><00:09:46.160><c> don't</c>

00:09:46.550 --> 00:09:46.560 align:start position:0%
mandatory for other types that don't
 

00:09:46.560 --> 00:09:47.910 align:start position:0%
mandatory for other types that don't
have<00:09:46.880><c> such</c><00:09:47.120><c> a</c><00:09:47.279><c> simple</c>

00:09:47.910 --> 00:09:47.920 align:start position:0%
have such a simple
 

00:09:47.920 --> 00:09:50.070 align:start position:0%
have such a simple
indexing<00:09:48.560><c> system</c><00:09:49.040><c> because</c><00:09:49.360><c> of</c><00:09:49.519><c> course</c><00:09:49.760><c> not</c>

00:09:50.070 --> 00:09:50.080 align:start position:0%
indexing system because of course not
 

00:09:50.080 --> 00:09:52.389 align:start position:0%
indexing system because of course not
everything<00:09:50.720><c> is</c><00:09:50.880><c> just</c><00:09:51.120><c> a</c><00:09:51.200><c> contiguous</c><00:09:51.920><c> array</c>

00:09:52.389 --> 00:09:52.399 align:start position:0%
everything is just a contiguous array
 

00:09:52.399 --> 00:09:54.630 align:start position:0%
everything is just a contiguous array
with<00:09:52.640><c> an</c><00:09:52.800><c> index</c><00:09:53.279><c> like</c><00:09:53.519><c> we</c><00:09:53.680><c> have</c><00:09:53.920><c> here</c><00:09:54.320><c> i</c><00:09:54.399><c> mean</c>

00:09:54.630 --> 00:09:54.640 align:start position:0%
with an index like we have here i mean
 

00:09:54.640 --> 00:09:56.470 align:start position:0%
with an index like we have here i mean
think<00:09:54.880><c> of</c><00:09:55.040><c> something</c><00:09:55.440><c> like</c><00:09:55.680><c> a</c><00:09:55.839><c> tree</c><00:09:56.160><c> data</c>

00:09:56.470 --> 00:09:56.480 align:start position:0%
think of something like a tree data
 

00:09:56.480 --> 00:09:57.110 align:start position:0%
think of something like a tree data
structure

00:09:57.110 --> 00:09:57.120 align:start position:0%
structure
 

00:09:57.120 --> 00:09:59.190 align:start position:0%
structure
how<00:09:57.279><c> do</c><00:09:57.440><c> we</c><00:09:57.600><c> traverse</c><00:09:58.399><c> through</c><00:09:58.640><c> a</c><00:09:58.720><c> tree</c><00:09:59.040><c> we</c>

00:09:59.190 --> 00:09:59.200 align:start position:0%
how do we traverse through a tree we
 

00:09:59.200 --> 00:10:00.949 align:start position:0%
how do we traverse through a tree we
can't<00:09:59.440><c> just</c><00:09:59.680><c> increment</c><00:10:00.160><c> an</c><00:10:00.320><c> index</c>

00:10:00.949 --> 00:10:00.959 align:start position:0%
can't just increment an index
 

00:10:00.959 --> 00:10:02.949 align:start position:0%
can't just increment an index
what<00:10:01.200><c> about</c><00:10:01.440><c> an</c><00:10:01.600><c> unordered</c><00:10:02.079><c> set</c><00:10:02.480><c> i</c><00:10:02.560><c> mean</c><00:10:02.720><c> that</c>

00:10:02.949 --> 00:10:02.959 align:start position:0%
what about an unordered set i mean that
 

00:10:02.959 --> 00:10:04.069 align:start position:0%
what about an unordered set i mean that
contains<00:10:03.360><c> a</c><00:10:03.440><c> bunch</c><00:10:03.680><c> of</c>

00:10:04.069 --> 00:10:04.079 align:start position:0%
contains a bunch of
 

00:10:04.079 --> 00:10:06.790 align:start position:0%
contains a bunch of
unordered<00:10:04.720><c> elements</c><00:10:05.519><c> if</c><00:10:05.839><c> i</c><00:10:06.000><c> wanted</c><00:10:06.240><c> to</c><00:10:06.480><c> print</c>

00:10:06.790 --> 00:10:06.800 align:start position:0%
unordered elements if i wanted to print
 

00:10:06.800 --> 00:10:08.230 align:start position:0%
unordered elements if i wanted to print
all<00:10:06.880><c> of</c><00:10:06.959><c> them</c><00:10:07.120><c> out</c><00:10:07.200><c> to</c><00:10:07.360><c> the</c><00:10:07.440><c> console</c><00:10:07.839><c> how</c><00:10:08.000><c> would</c>

00:10:08.230 --> 00:10:08.240 align:start position:0%
all of them out to the console how would
 

00:10:08.240 --> 00:10:09.030 align:start position:0%
all of them out to the console how would
i<00:10:08.399><c> do</c><00:10:08.640><c> that</c>

00:10:09.030 --> 00:10:09.040 align:start position:0%
i do that
 

00:10:09.040 --> 00:10:10.790 align:start position:0%
i do that
the<00:10:09.200><c> example</c><00:10:09.680><c> i'm</c><00:10:09.760><c> going</c><00:10:09.920><c> to</c><00:10:10.000><c> show</c><00:10:10.240><c> you</c><00:10:10.560><c> is</c>

00:10:10.790 --> 00:10:10.800 align:start position:0%
the example i'm going to show you is
 

00:10:10.800 --> 00:10:12.710 align:start position:0%
the example i'm going to show you is
specifically<00:10:11.360><c> the</c><00:10:11.600><c> unordered</c><00:10:12.079><c> map</c><00:10:12.320><c> here</c><00:10:12.560><c> so</c>

00:10:12.710 --> 00:10:12.720 align:start position:0%
specifically the unordered map here so
 

00:10:12.720 --> 00:10:14.470 align:start position:0%
specifically the unordered map here so
an<00:10:12.880><c> unordered</c><00:10:13.279><c> map</c><00:10:13.519><c> is</c><00:10:13.600><c> essentially</c><00:10:14.079><c> a</c><00:10:14.240><c> hash</c>

00:10:14.470 --> 00:10:14.480 align:start position:0%
an unordered map is essentially a hash
 

00:10:14.480 --> 00:10:16.389 align:start position:0%
an unordered map is essentially a hash
map<00:10:14.800><c> it</c><00:10:14.959><c> obviously</c><00:10:15.360><c> doesn't</c><00:10:15.760><c> store</c><00:10:16.160><c> its</c>

00:10:16.389 --> 00:10:16.399 align:start position:0%
map it obviously doesn't store its
 

00:10:16.399 --> 00:10:17.990 align:start position:0%
map it obviously doesn't store its
variables<00:10:16.959><c> in</c><00:10:17.200><c> any</c><00:10:17.440><c> kind</c><00:10:17.760><c> of</c>

00:10:17.990 --> 00:10:18.000 align:start position:0%
variables in any kind of
 

00:10:18.000 --> 00:10:20.069 align:start position:0%
variables in any kind of
order<00:10:18.399><c> and</c><00:10:18.560><c> we</c><00:10:18.720><c> need</c><00:10:18.959><c> to</c><00:10:19.120><c> actually</c><00:10:19.600><c> know</c><00:10:19.839><c> the</c>

00:10:20.069 --> 00:10:20.079 align:start position:0%
order and we need to actually know the
 

00:10:20.079 --> 00:10:22.389 align:start position:0%
order and we need to actually know the
keys<00:10:20.720><c> of</c><00:10:20.880><c> the</c><00:10:21.040><c> entries</c><00:10:21.600><c> if</c><00:10:21.760><c> we</c><00:10:21.839><c> want</c><00:10:22.079><c> to</c><00:10:22.240><c> get</c>

00:10:22.389 --> 00:10:22.399 align:start position:0%
keys of the entries if we want to get
 

00:10:22.399 --> 00:10:23.990 align:start position:0%
keys of the entries if we want to get
the<00:10:22.640><c> values</c><00:10:23.200><c> out</c><00:10:23.360><c> of</c><00:10:23.519><c> there</c>

00:10:23.990 --> 00:10:24.000 align:start position:0%
the values out of there
 

00:10:24.000 --> 00:10:25.590 align:start position:0%
the values out of there
unless<00:10:24.320><c> we</c><00:10:24.560><c> iterate</c><00:10:25.040><c> through</c><00:10:25.279><c> them</c><00:10:25.519><c> and</c>

00:10:25.590 --> 00:10:25.600 align:start position:0%
unless we iterate through them and
 

00:10:25.600 --> 00:10:26.949 align:start position:0%
unless we iterate through them and
that's<00:10:25.839><c> what</c><00:10:26.000><c> we're</c><00:10:26.160><c> going</c><00:10:26.320><c> to</c><00:10:26.399><c> do</c><00:10:26.560><c> here</c><00:10:26.800><c> so</c>

00:10:26.949 --> 00:10:26.959 align:start position:0%
that's what we're going to do here so
 

00:10:26.959 --> 00:10:28.870 align:start position:0%
that's what we're going to do here so
let's<00:10:27.200><c> create</c><00:10:27.519><c> a</c><00:10:27.600><c> little</c><00:10:27.920><c> map</c><00:10:28.160><c> here</c>

00:10:28.870 --> 00:10:28.880 align:start position:0%
let's create a little map here
 

00:10:28.880 --> 00:10:32.310 align:start position:0%
let's create a little map here
i'm<00:10:29.040><c> going</c><00:10:29.279><c> to</c><00:10:29.440><c> just</c><00:10:29.680><c> write</c><00:10:29.920><c> an</c><00:10:30.079><c> unordered</c><00:10:30.839><c> map</c>

00:10:32.310 --> 00:10:32.320 align:start position:0%
i'm going to just write an unordered map
 

00:10:32.320 --> 00:10:34.710 align:start position:0%
i'm going to just write an unordered map
of<00:10:32.560><c> scd</c><00:10:33.040><c> string</c><00:10:33.360><c> to</c><00:10:33.600><c> maybe</c><00:10:34.000><c> int</c><00:10:34.399><c> we'll</c><00:10:34.560><c> call</c>

00:10:34.710 --> 00:10:34.720 align:start position:0%
of scd string to maybe int we'll call
 

00:10:34.720 --> 00:10:35.750 align:start position:0%
of scd string to maybe int we'll call
this<00:10:35.040><c> map</c>

00:10:35.750 --> 00:10:35.760 align:start position:0%
this map
 

00:10:35.760 --> 00:10:38.069 align:start position:0%
this map
so<00:10:35.920><c> maybe</c><00:10:36.240><c> this</c><00:10:36.399><c> will</c><00:10:36.640><c> like</c><00:10:36.959><c> contain</c><00:10:37.760><c> like</c>

00:10:38.069 --> 00:10:38.079 align:start position:0%
so maybe this will like contain like
 

00:10:38.079 --> 00:10:39.430 align:start position:0%
so maybe this will like contain like
some<00:10:38.320><c> kind</c><00:10:38.560><c> of</c><00:10:38.800><c> name</c><00:10:39.120><c> like</c>

00:10:39.430 --> 00:10:39.440 align:start position:0%
some kind of name like
 

00:10:39.440 --> 00:10:41.829 align:start position:0%
some kind of name like
cherno<00:10:40.000><c> and</c><00:10:40.240><c> maybe</c><00:10:40.560><c> an</c><00:10:40.800><c> associated</c><00:10:41.360><c> score</c><00:10:41.680><c> so</c>

00:10:41.829 --> 00:10:41.839 align:start position:0%
cherno and maybe an associated score so
 

00:10:41.839 --> 00:10:43.990 align:start position:0%
cherno and maybe an associated score so
we'll<00:10:42.000><c> write</c><00:10:42.240><c> channel</c><00:10:42.640><c> five</c><00:10:43.040><c> and</c><00:10:43.120><c> maybe</c>

00:10:43.990 --> 00:10:44.000 align:start position:0%
we'll write channel five and maybe
 

00:10:44.000 --> 00:10:46.150 align:start position:0%
we'll write channel five and maybe
i<00:10:44.160><c> don't</c><00:10:44.240><c> know</c><00:10:44.399><c> c</c><00:10:44.880><c> plus</c><00:10:45.360><c> 2</c><00:10:45.680><c> because</c><00:10:45.920><c> obviously</c>

00:10:46.150 --> 00:10:46.160 align:start position:0%
i don't know c plus 2 because obviously
 

00:10:46.160 --> 00:10:47.509 align:start position:0%
i don't know c plus 2 because obviously
i'm<00:10:46.320><c> cooler</c><00:10:46.640><c> than</c><00:10:46.720><c> c</c><00:10:46.880><c> plus</c><00:10:47.040><c> plus</c>

00:10:47.509 --> 00:10:47.519 align:start position:0%
i'm cooler than c plus plus
 

00:10:47.519 --> 00:10:49.670 align:start position:0%
i'm cooler than c plus plus
so<00:10:47.760><c> with</c><00:10:48.000><c> this</c><00:10:48.160><c> map</c><00:10:48.399><c> in</c><00:10:48.560><c> mind</c><00:10:48.880><c> if</c><00:10:49.040><c> i</c><00:10:49.200><c> wanted</c><00:10:49.440><c> to</c>

00:10:49.670 --> 00:10:49.680 align:start position:0%
so with this map in mind if i wanted to
 

00:10:49.680 --> 00:10:50.949 align:start position:0%
so with this map in mind if i wanted to
iterate<00:10:50.160><c> through</c><00:10:50.399><c> it</c>

00:10:50.949 --> 00:10:50.959 align:start position:0%
iterate through it
 

00:10:50.959 --> 00:10:52.550 align:start position:0%
iterate through it
how<00:10:51.120><c> would</c><00:10:51.360><c> i</c><00:10:51.519><c> do</c><00:10:51.680><c> it</c><00:10:51.760><c> well</c><00:10:51.920><c> obviously</c><00:10:52.240><c> i</c><00:10:52.399><c> can't</c>

00:10:52.550 --> 00:10:52.560 align:start position:0%
how would i do it well obviously i can't
 

00:10:52.560 --> 00:10:54.069 align:start position:0%
how would i do it well obviously i can't
use<00:10:52.800><c> a</c><00:10:52.880><c> for</c><00:10:53.040><c> loop</c><00:10:53.279><c> like</c><00:10:53.600><c> this</c>

00:10:54.069 --> 00:10:54.079 align:start position:0%
use a for loop like this
 

00:10:54.079 --> 00:10:56.150 align:start position:0%
use a for loop like this
because<00:10:54.399><c> if</c><00:10:54.560><c> i</c><00:10:54.640><c> did</c><00:10:54.880><c> that</c><00:10:55.200><c> well</c><00:10:55.519><c> my</c><00:10:55.839><c> index</c>

00:10:56.150 --> 00:10:56.160 align:start position:0%
because if i did that well my index
 

00:10:56.160 --> 00:10:57.269 align:start position:0%
because if i did that well my index
would<00:10:56.399><c> just</c><00:10:56.720><c> be</c>

00:10:57.269 --> 00:10:57.279 align:start position:0%
would just be
 

00:10:57.279 --> 00:10:59.829 align:start position:0%
would just be
like<00:10:57.600><c> 0</c><00:10:58.000><c> or</c><00:10:58.160><c> 1</c><00:10:58.480><c> if</c><00:10:58.640><c> i</c><00:10:58.720><c> checked</c><00:10:58.959><c> the</c><00:10:59.120><c> map</c><00:10:59.440><c> size</c>

00:10:59.829 --> 00:10:59.839 align:start position:0%
like 0 or 1 if i checked the map size
 

00:10:59.839 --> 00:11:01.509 align:start position:0%
like 0 or 1 if i checked the map size
and<00:11:00.000><c> that's</c><00:11:00.240><c> not</c><00:11:00.399><c> what</c><00:11:00.560><c> i</c><00:11:00.720><c> need</c><00:11:01.040><c> i</c><00:11:01.120><c> need</c><00:11:01.279><c> to</c>

00:11:01.509 --> 00:11:01.519 align:start position:0%
and that's not what i need i need to
 

00:11:01.519 --> 00:11:01.990 align:start position:0%
and that's not what i need i need to
actually

00:11:01.990 --> 00:11:02.000 align:start position:0%
actually
 

00:11:02.000 --> 00:11:04.710 align:start position:0%
actually
iterate<00:11:02.720><c> using</c><00:11:03.040><c> the</c><00:11:03.200><c> correct</c><00:11:03.680><c> keys</c><00:11:04.079><c> here</c><00:11:04.560><c> so</c>

00:11:04.710 --> 00:11:04.720 align:start position:0%
iterate using the correct keys here so
 

00:11:04.720 --> 00:11:06.710 align:start position:0%
iterate using the correct keys here so
i'm<00:11:04.959><c> forced</c><00:11:05.440><c> to</c><00:11:05.680><c> write</c><00:11:06.000><c> some</c><00:11:06.320><c> sort</c><00:11:06.480><c> of</c>

00:11:06.710 --> 00:11:06.720 align:start position:0%
i'm forced to write some sort of
 

00:11:06.720 --> 00:11:08.550 align:start position:0%
i'm forced to write some sort of
iterator<00:11:07.279><c> so</c><00:11:07.440><c> let's</c><00:11:07.680><c> write</c><00:11:07.920><c> this</c><00:11:08.160><c> out</c><00:11:08.320><c> as</c><00:11:08.480><c> a</c>

00:11:08.550 --> 00:11:08.560 align:start position:0%
iterator so let's write this out as a
 

00:11:08.560 --> 00:11:10.630 align:start position:0%
iterator so let's write this out as a
for<00:11:08.800><c> loop</c><00:11:09.040><c> that</c><00:11:09.200><c> actually</c><00:11:09.440><c> uses</c><00:11:09.839><c> iterators</c><00:11:10.480><c> so</c>

00:11:10.630 --> 00:11:10.640 align:start position:0%
for loop that actually uses iterators so
 

00:11:10.640 --> 00:11:12.069 align:start position:0%
for loop that actually uses iterators so
what<00:11:10.800><c> i'll</c><00:11:10.880><c> do</c><00:11:11.040><c> is</c><00:11:11.120><c> i'll</c><00:11:11.279><c> take</c><00:11:11.519><c> the</c><00:11:11.680><c> entire</c>

00:11:12.069 --> 00:11:12.079 align:start position:0%
what i'll do is i'll take the entire
 

00:11:12.079 --> 00:11:13.670 align:start position:0%
what i'll do is i'll take the entire
type<00:11:12.399><c> and</c><00:11:12.480><c> you</c><00:11:12.560><c> can</c><00:11:12.720><c> see</c><00:11:12.880><c> it's</c><00:11:13.040><c> getting</c><00:11:13.360><c> quite</c>

00:11:13.670 --> 00:11:13.680 align:start position:0%
type and you can see it's getting quite
 

00:11:13.680 --> 00:11:14.230 align:start position:0%
type and you can see it's getting quite
long

00:11:14.230 --> 00:11:14.240 align:start position:0%
long
 

00:11:14.240 --> 00:11:15.750 align:start position:0%
long
and<00:11:14.320><c> then</c><00:11:14.480><c> maybe</c><00:11:14.880><c> i</c><00:11:14.959><c> don't</c><00:11:15.120><c> want</c><00:11:15.279><c> to</c><00:11:15.519><c> like</c>

00:11:15.750 --> 00:11:15.760 align:start position:0%
and then maybe i don't want to like
 

00:11:15.760 --> 00:11:17.030 align:start position:0%
and then maybe i don't want to like
modify<00:11:16.160><c> these</c><00:11:16.320><c> values</c><00:11:16.640><c> i</c><00:11:16.720><c> just</c><00:11:16.880><c> want</c><00:11:16.959><c> to</c>

00:11:17.030 --> 00:11:17.040 align:start position:0%
modify these values i just want to
 

00:11:17.040 --> 00:11:18.550 align:start position:0%
modify these values i just want to
access<00:11:17.440><c> them</c><00:11:17.600><c> so</c><00:11:17.760><c> i</c><00:11:17.920><c> want</c><00:11:18.000><c> to</c><00:11:18.079><c> use</c><00:11:18.240><c> a</c><00:11:18.320><c> const</c>

00:11:18.550 --> 00:11:18.560 align:start position:0%
access them so i want to use a const
 

00:11:18.560 --> 00:11:19.350 align:start position:0%
access them so i want to use a const
iterator

00:11:19.350 --> 00:11:19.360 align:start position:0%
iterator
 

00:11:19.360 --> 00:11:22.230 align:start position:0%
iterator
okay<00:11:19.920><c> this</c><00:11:20.160><c> is</c><00:11:20.320><c> a</c><00:11:20.560><c> huge</c><00:11:21.120><c> type</c><00:11:21.519><c> and</c><00:11:21.839><c> because</c><00:11:22.160><c> of</c>

00:11:22.230 --> 00:11:22.240 align:start position:0%
okay this is a huge type and because of
 

00:11:22.240 --> 00:11:23.670 align:start position:0%
okay this is a huge type and because of
that<00:11:22.480><c> it's</c><00:11:22.720><c> pretty</c><00:11:22.959><c> common</c><00:11:23.279><c> to</c>

00:11:23.670 --> 00:11:23.680 align:start position:0%
that it's pretty common to
 

00:11:23.680 --> 00:11:26.150 align:start position:0%
that it's pretty common to
use<00:11:24.000><c> either</c><00:11:24.320><c> a</c><00:11:24.399><c> typedef</c><00:11:25.040><c> or</c><00:11:25.279><c> using</c><00:11:25.760><c> along</c><00:11:26.000><c> with</c>

00:11:26.150 --> 00:11:26.160 align:start position:0%
use either a typedef or using along with
 

00:11:26.160 --> 00:11:27.509 align:start position:0%
use either a typedef or using along with
the<00:11:26.240><c> type</c><00:11:26.480><c> so</c><00:11:26.640><c> in</c><00:11:26.720><c> other</c><00:11:26.880><c> words</c><00:11:27.040><c> maybe</c><00:11:27.279><c> i</c><00:11:27.440><c> could</c>

00:11:27.509 --> 00:11:27.519 align:start position:0%
the type so in other words maybe i could
 

00:11:27.519 --> 00:11:28.310 align:start position:0%
the type so in other words maybe i could
replace

00:11:28.310 --> 00:11:28.320 align:start position:0%
replace
 

00:11:28.320 --> 00:11:30.630 align:start position:0%
replace
this<00:11:28.640><c> part</c><00:11:28.880><c> of</c><00:11:29.040><c> it</c><00:11:29.120><c> if</c><00:11:29.279><c> i</c><00:11:29.360><c> wanted</c><00:11:29.680><c> to</c><00:11:30.240><c> and</c><00:11:30.399><c> just</c>

00:11:30.630 --> 00:11:30.640 align:start position:0%
this part of it if i wanted to and just
 

00:11:30.640 --> 00:11:31.910 align:start position:0%
this part of it if i wanted to and just
call<00:11:30.880><c> it</c><00:11:31.040><c> a</c><00:11:31.279><c> score</c>

00:11:31.910 --> 00:11:31.920 align:start position:0%
call it a score
 

00:11:31.920 --> 00:11:33.350 align:start position:0%
call it a score
map<00:11:32.320><c> and</c><00:11:32.399><c> then</c><00:11:32.560><c> that</c><00:11:32.720><c> would</c><00:11:32.959><c> obviously</c>

00:11:33.350 --> 00:11:33.360 align:start position:0%
map and then that would obviously
 

00:11:33.360 --> 00:11:35.670 align:start position:0%
map and then that would obviously
simplify<00:11:33.920><c> things</c><00:11:34.399><c> a</c><00:11:34.560><c> lot</c><00:11:34.880><c> so</c><00:11:35.040><c> i</c><00:11:35.200><c> can</c><00:11:35.360><c> just</c>

00:11:35.670 --> 00:11:35.680 align:start position:0%
simplify things a lot so i can just
 

00:11:35.680 --> 00:11:38.550 align:start position:0%
simplify things a lot so i can just
do<00:11:35.920><c> this</c><00:11:36.240><c> now</c><00:11:36.800><c> maybe</c><00:11:37.120><c> i</c><00:11:37.360><c> even</c><00:11:37.600><c> want</c><00:11:37.760><c> to</c><00:11:37.920><c> define</c>

00:11:38.550 --> 00:11:38.560 align:start position:0%
do this now maybe i even want to define
 

00:11:38.560 --> 00:11:39.990 align:start position:0%
do this now maybe i even want to define
some<00:11:38.800><c> kind</c><00:11:39.040><c> of</c><00:11:39.200><c> score</c><00:11:39.600><c> map</c>

00:11:39.990 --> 00:11:40.000 align:start position:0%
some kind of score map
 

00:11:40.000 --> 00:11:42.069 align:start position:0%
some kind of score map
const<00:11:40.399><c> iterator</c><00:11:40.959><c> or</c><00:11:41.120><c> something</c><00:11:41.440><c> like</c><00:11:41.600><c> that</c><00:11:41.920><c> i</c>

00:11:42.069 --> 00:11:42.079 align:start position:0%
const iterator or something like that i
 

00:11:42.079 --> 00:11:43.670 align:start position:0%
const iterator or something like that i
could<00:11:42.240><c> also</c><00:11:42.560><c> do</c><00:11:42.720><c> that</c><00:11:43.040><c> by</c><00:11:43.279><c> just</c>

00:11:43.670 --> 00:11:43.680 align:start position:0%
could also do that by just
 

00:11:43.680 --> 00:11:46.550 align:start position:0%
could also do that by just
assigning<00:11:44.160><c> this</c><00:11:44.720><c> to</c><00:11:45.600><c> score</c><00:11:45.920><c> map</c><00:11:46.160><c> const</c>

00:11:46.550 --> 00:11:46.560 align:start position:0%
assigning this to score map const
 

00:11:46.560 --> 00:11:48.389 align:start position:0%
assigning this to score map const
iterator<00:11:47.040><c> and</c><00:11:47.200><c> now</c><00:11:47.519><c> all</c><00:11:47.680><c> i</c><00:11:47.839><c> have</c><00:11:48.000><c> to</c><00:11:48.079><c> do</c>

00:11:48.389 --> 00:11:48.399 align:start position:0%
iterator and now all i have to do
 

00:11:48.399 --> 00:11:50.310 align:start position:0%
iterator and now all i have to do
is<00:11:48.640><c> write</c><00:11:48.959><c> code</c><00:11:49.279><c> like</c><00:11:49.440><c> this</c><00:11:49.680><c> i</c><00:11:49.839><c> honestly</c><00:11:50.160><c> end</c>

00:11:50.310 --> 00:11:50.320 align:start position:0%
is write code like this i honestly end
 

00:11:50.320 --> 00:11:51.750 align:start position:0%
is write code like this i honestly end
up<00:11:50.399><c> doing</c><00:11:50.560><c> stuff</c><00:11:50.800><c> like</c><00:11:50.880><c> this</c><00:11:51.040><c> a</c><00:11:51.120><c> lot</c><00:11:51.279><c> i</c><00:11:51.360><c> don't</c>

00:11:51.750 --> 00:11:51.760 align:start position:0%
up doing stuff like this a lot i don't
 

00:11:51.760 --> 00:11:53.750 align:start position:0%
up doing stuff like this a lot i don't
i<00:11:51.839><c> don't</c><00:11:52.160><c> ever</c><00:11:52.399><c> really</c><00:11:52.880><c> use</c><00:11:53.200><c> using</c><00:11:53.519><c> with</c>

00:11:53.750 --> 00:11:53.760 align:start position:0%
i don't ever really use using with
 

00:11:53.760 --> 00:11:55.030 align:start position:0%
i don't ever really use using with
iterators<00:11:54.320><c> like</c><00:11:54.480><c> this</c>

00:11:55.030 --> 00:11:55.040 align:start position:0%
iterators like this
 

00:11:55.040 --> 00:11:56.949 align:start position:0%
iterators like this
but<00:11:55.279><c> i</c><00:11:55.440><c> do</c><00:11:55.600><c> use</c><00:11:55.839><c> it</c><00:11:56.000><c> with</c><00:11:56.160><c> the</c><00:11:56.240><c> type</c><00:11:56.560><c> sometimes</c>

00:11:56.949 --> 00:11:56.959 align:start position:0%
but i do use it with the type sometimes
 

00:11:56.959 --> 00:11:58.470 align:start position:0%
but i do use it with the type sometimes
so<00:11:57.120><c> i'll</c><00:11:57.200><c> leave</c><00:11:57.360><c> it</c><00:11:57.519><c> like</c><00:11:57.680><c> that</c><00:11:57.839><c> here</c>

00:11:58.470 --> 00:11:58.480 align:start position:0%
so i'll leave it like that here
 

00:11:58.480 --> 00:12:00.389 align:start position:0%
so i'll leave it like that here
and<00:11:58.560><c> then</c><00:11:58.800><c> just</c><00:11:59.200><c> implement</c><00:11:59.600><c> this</c><00:11:59.839><c> as</c><00:12:00.079><c> score</c>

00:12:00.389 --> 00:12:00.399 align:start position:0%
and then just implement this as score
 

00:12:00.399 --> 00:12:02.550 align:start position:0%
and then just implement this as score
map<00:12:00.800><c> const</c><00:12:01.200><c> iterator</c><00:12:01.760><c> so</c><00:12:01.920><c> iterating</c><00:12:02.320><c> through</c>

00:12:02.550 --> 00:12:02.560 align:start position:0%
map const iterator so iterating through
 

00:12:02.560 --> 00:12:04.550 align:start position:0%
map const iterator so iterating through
this<00:12:02.720><c> map</c><00:12:03.040><c> i'll</c><00:12:03.279><c> set</c><00:12:03.519><c> the</c><00:12:03.680><c> iterator</c><00:12:04.160><c> equal</c><00:12:04.399><c> to</c>

00:12:04.550 --> 00:12:04.560 align:start position:0%
this map i'll set the iterator equal to
 

00:12:04.560 --> 00:12:06.069 align:start position:0%
this map i'll set the iterator equal to
the<00:12:04.639><c> beginning</c><00:12:05.040><c> of</c><00:12:05.120><c> the</c><00:12:05.279><c> map</c><00:12:05.519><c> of</c><00:12:05.600><c> course</c><00:12:05.920><c> like</c>

00:12:06.069 --> 00:12:06.079 align:start position:0%
the beginning of the map of course like
 

00:12:06.079 --> 00:12:07.269 align:start position:0%
the beginning of the map of course like
i<00:12:06.160><c> did</c><00:12:06.399><c> before</c>

00:12:07.269 --> 00:12:07.279 align:start position:0%
i did before
 

00:12:07.279 --> 00:12:09.829 align:start position:0%
i did before
i'll<00:12:07.519><c> make</c><00:12:07.760><c> sure</c><00:12:08.079><c> that</c><00:12:08.320><c> it</c><00:12:08.480><c> iterates</c><00:12:09.040><c> until</c><00:12:09.600><c> we</c>

00:12:09.829 --> 00:12:09.839 align:start position:0%
i'll make sure that it iterates until we
 

00:12:09.839 --> 00:12:11.190 align:start position:0%
i'll make sure that it iterates until we
reach<00:12:10.160><c> the</c><00:12:10.320><c> end</c><00:12:10.480><c> of</c><00:12:10.560><c> the</c><00:12:10.720><c> map</c>

00:12:11.190 --> 00:12:11.200 align:start position:0%
reach the end of the map
 

00:12:11.200 --> 00:12:13.030 align:start position:0%
reach the end of the map
and<00:12:11.279><c> then</c><00:12:11.519><c> i'll</c><00:12:11.680><c> increment</c><00:12:12.000><c> the</c><00:12:12.160><c> iterator</c><00:12:12.720><c> now</c>

00:12:13.030 --> 00:12:13.040 align:start position:0%
and then i'll increment the iterator now
 

00:12:13.040 --> 00:12:14.470 align:start position:0%
and then i'll increment the iterator now
this<00:12:13.200><c> is</c><00:12:13.360><c> a</c><00:12:13.440><c> little</c><00:12:13.600><c> bit</c><00:12:13.760><c> different</c>

00:12:14.470 --> 00:12:14.480 align:start position:0%
this is a little bit different
 

00:12:14.480 --> 00:12:16.710 align:start position:0%
this is a little bit different
because<00:12:15.120><c> this</c><00:12:15.360><c> is</c><00:12:15.519><c> a</c><00:12:15.680><c> map</c><00:12:16.079><c> i'm</c><00:12:16.240><c> iterating</c>

00:12:16.710 --> 00:12:16.720 align:start position:0%
because this is a map i'm iterating
 

00:12:16.720 --> 00:12:18.310 align:start position:0%
because this is a map i'm iterating
through<00:12:16.959><c> a</c><00:12:17.040><c> map</c><00:12:17.279><c> so</c><00:12:17.440><c> how</c><00:12:17.600><c> does</c><00:12:17.760><c> that</c><00:12:18.000><c> work</c><00:12:18.240><c> i</c>

00:12:18.310 --> 00:12:18.320 align:start position:0%
through a map so how does that work i
 

00:12:18.320 --> 00:12:19.030 align:start position:0%
through a map so how does that work i
don't<00:12:18.480><c> just</c><00:12:18.720><c> have</c>

00:12:19.030 --> 00:12:19.040 align:start position:0%
don't just have
 

00:12:19.040 --> 00:12:21.030 align:start position:0%
don't just have
one<00:12:19.360><c> element</c><00:12:19.920><c> right</c><00:12:20.240><c> like</c><00:12:20.480><c> i</c><00:12:20.560><c> would</c><00:12:20.720><c> with</c><00:12:20.880><c> like</c>

00:12:21.030 --> 00:12:21.040 align:start position:0%
one element right like i would with like
 

00:12:21.040 --> 00:12:23.430 align:start position:0%
one element right like i would with like
a<00:12:21.200><c> set</c><00:12:21.920><c> or</c><00:12:22.079><c> a</c><00:12:22.240><c> vector</c><00:12:22.720><c> or</c><00:12:22.800><c> an</c><00:12:22.959><c> array</c><00:12:23.360><c> or</c>

00:12:23.430 --> 00:12:23.440 align:start position:0%
a set or a vector or an array or
 

00:12:23.440 --> 00:12:24.470 align:start position:0%
a set or a vector or an array or
something<00:12:23.760><c> like</c><00:12:23.920><c> that</c>

00:12:24.470 --> 00:12:24.480 align:start position:0%
something like that
 

00:12:24.480 --> 00:12:26.069 align:start position:0%
something like that
i<00:12:24.639><c> actually</c><00:12:24.880><c> have</c><00:12:25.040><c> two</c><00:12:25.200><c> elements</c><00:12:25.600><c> the</c><00:12:25.760><c> key</c><00:12:26.000><c> and</c>

00:12:26.069 --> 00:12:26.079 align:start position:0%
i actually have two elements the key and
 

00:12:26.079 --> 00:12:28.069 align:start position:0%
i actually have two elements the key and
the<00:12:26.160><c> value</c><00:12:26.480><c> so</c><00:12:26.639><c> how</c><00:12:26.800><c> do</c><00:12:26.959><c> i</c><00:12:27.120><c> access</c><00:12:27.600><c> them</c>

00:12:28.069 --> 00:12:28.079 align:start position:0%
the value so how do i access them
 

00:12:28.079 --> 00:12:29.910 align:start position:0%
the value so how do i access them
well<00:12:28.399><c> instead</c><00:12:28.639><c> of</c><00:12:28.800><c> just</c><00:12:29.040><c> dereferencing</c><00:12:29.760><c> it</c>

00:12:29.910 --> 00:12:29.920 align:start position:0%
well instead of just dereferencing it
 

00:12:29.920 --> 00:12:32.069 align:start position:0%
well instead of just dereferencing it
you<00:12:30.000><c> can</c><00:12:30.160><c> actually</c><00:12:30.480><c> use</c><00:12:30.639><c> the</c><00:12:30.800><c> arrow</c><00:12:31.279><c> operator</c>

00:12:32.069 --> 00:12:32.079 align:start position:0%
you can actually use the arrow operator
 

00:12:32.079 --> 00:12:34.470 align:start position:0%
you can actually use the arrow operator
and<00:12:32.320><c> access</c><00:12:32.880><c> two</c><00:12:33.279><c> little</c><00:12:33.680><c> elements</c><00:12:34.079><c> here</c><00:12:34.320><c> we</c>

00:12:34.470 --> 00:12:34.480 align:start position:0%
and access two little elements here we
 

00:12:34.480 --> 00:12:35.190 align:start position:0%
and access two little elements here we
have<00:12:34.720><c> first</c>

00:12:35.190 --> 00:12:35.200 align:start position:0%
have first
 

00:12:35.200 --> 00:12:38.230 align:start position:0%
have first
and<00:12:35.519><c> second</c><00:12:36.320><c> first</c><00:12:36.800><c> is</c><00:12:36.959><c> going</c><00:12:37.120><c> to</c><00:12:37.279><c> be</c><00:12:37.519><c> the</c><00:12:37.839><c> key</c>

00:12:38.230 --> 00:12:38.240 align:start position:0%
and second first is going to be the key
 

00:12:38.240 --> 00:12:40.310 align:start position:0%
and second first is going to be the key
so<00:12:38.399><c> i</c><00:12:38.560><c> can</c><00:12:38.720><c> just</c><00:12:39.040><c> go</c><00:12:39.200><c> ahead</c><00:12:39.440><c> and</c><00:12:39.600><c> assign</c><00:12:39.920><c> that</c>

00:12:40.310 --> 00:12:40.320 align:start position:0%
so i can just go ahead and assign that
 

00:12:40.320 --> 00:12:41.829 align:start position:0%
so i can just go ahead and assign that
to<00:12:40.639><c> key</c><00:12:41.040><c> like</c><00:12:41.279><c> that</c>

00:12:41.829 --> 00:12:41.839 align:start position:0%
to key like that
 

00:12:41.839 --> 00:12:43.590 align:start position:0%
to key like that
and<00:12:41.920><c> then</c><00:12:42.079><c> the</c><00:12:42.240><c> second</c><00:12:42.639><c> one</c><00:12:42.880><c> is</c><00:12:43.040><c> going</c><00:12:43.200><c> to</c><00:12:43.360><c> be</c>

00:12:43.590 --> 00:12:43.600 align:start position:0%
and then the second one is going to be
 

00:12:43.600 --> 00:12:45.110 align:start position:0%
and then the second one is going to be
my<00:12:43.920><c> value</c><00:12:44.320><c> and</c><00:12:44.399><c> i'll</c><00:12:44.560><c> just</c><00:12:44.800><c> use</c>

00:12:45.110 --> 00:12:45.120 align:start position:0%
my value and i'll just use
 

00:12:45.120 --> 00:12:47.190 align:start position:0%
my value and i'll just use
the<00:12:45.600><c> ampersand</c><00:12:46.160><c> here</c><00:12:46.480><c> to</c><00:12:46.720><c> get</c><00:12:46.880><c> this</c><00:12:47.040><c> as</c><00:12:47.120><c> a</c>

00:12:47.190 --> 00:12:47.200 align:start position:0%
the ampersand here to get this as a
 

00:12:47.200 --> 00:12:48.629 align:start position:0%
the ampersand here to get this as a
reference<00:12:47.519><c> so</c><00:12:47.680><c> that</c><00:12:47.760><c> i'm</c><00:12:47.920><c> not</c><00:12:48.160><c> actually</c>

00:12:48.629 --> 00:12:48.639 align:start position:0%
reference so that i'm not actually
 

00:12:48.639 --> 00:12:50.949 align:start position:0%
reference so that i'm not actually
copying<00:12:49.040><c> the</c><00:12:49.200><c> value</c><00:12:49.920><c> so</c><00:12:50.160><c> i</c><00:12:50.240><c> have</c><00:12:50.480><c> iterator</c>

00:12:50.949 --> 00:12:50.959 align:start position:0%
copying the value so i have iterator
 

00:12:50.959 --> 00:12:51.990 align:start position:0%
copying the value so i have iterator
first<00:12:51.279><c> and</c><00:12:51.440><c> iterator</c>

00:12:51.990 --> 00:12:52.000 align:start position:0%
first and iterator
 

00:12:52.000 --> 00:12:53.990 align:start position:0%
first and iterator
second<00:12:52.560><c> let's</c><00:12:52.720><c> go</c><00:12:52.880><c> ahead</c><00:12:53.200><c> and</c><00:12:53.440><c> print</c><00:12:53.600><c> that</c><00:12:53.839><c> out</c>

00:12:53.990 --> 00:12:54.000 align:start position:0%
second let's go ahead and print that out
 

00:12:54.000 --> 00:12:55.829 align:start position:0%
second let's go ahead and print that out
to<00:12:54.079><c> the</c><00:12:54.160><c> console</c><00:12:54.560><c> we'll</c><00:12:54.720><c> print</c><00:12:54.959><c> the</c><00:12:55.200><c> key</c>

00:12:55.829 --> 00:12:55.839 align:start position:0%
to the console we'll print the key
 

00:12:55.839 --> 00:12:58.710 align:start position:0%
to the console we'll print the key
followed<00:12:56.160><c> by</c><00:12:56.480><c> an</c><00:12:56.639><c> equal</c><00:12:56.959><c> sign</c><00:12:57.360><c> and</c><00:12:57.519><c> then</c><00:12:58.079><c> value</c>

00:12:58.710 --> 00:12:58.720 align:start position:0%
followed by an equal sign and then value
 

00:12:58.720 --> 00:12:59.190 align:start position:0%
followed by an equal sign and then value
like

00:12:59.190 --> 00:12:59.200 align:start position:0%
like
 

00:12:59.200 --> 00:13:01.430 align:start position:0%
like
this<00:13:00.000><c> let's</c><00:13:00.160><c> go</c><00:13:00.320><c> ahead</c><00:13:00.560><c> and</c><00:13:00.720><c> run</c><00:13:00.959><c> this</c><00:13:01.200><c> and</c><00:13:01.360><c> in</c>

00:13:01.430 --> 00:13:01.440 align:start position:0%
this let's go ahead and run this and in
 

00:13:01.440 --> 00:13:02.629 align:start position:0%
this let's go ahead and run this and in
fact<00:13:01.680><c> what</c><00:13:01.839><c> i</c><00:13:02.000><c> might</c><00:13:02.320><c> do</c>

00:13:02.629 --> 00:13:02.639 align:start position:0%
fact what i might do
 

00:13:02.639 --> 00:13:04.870 align:start position:0%
fact what i might do
is<00:13:02.800><c> just</c><00:13:03.120><c> take</c><00:13:03.360><c> away</c><00:13:03.839><c> the</c><00:13:04.160><c> other</c><00:13:04.399><c> code</c><00:13:04.639><c> that</c><00:13:04.800><c> we</c>

00:13:04.870 --> 00:13:04.880 align:start position:0%
is just take away the other code that we
 

00:13:04.880 --> 00:13:06.790 align:start position:0%
is just take away the other code that we
had<00:13:05.120><c> here</c><00:13:05.519><c> to</c><00:13:05.680><c> keep</c><00:13:05.920><c> our</c><00:13:06.079><c> console</c><00:13:06.480><c> nice</c><00:13:06.720><c> and</c>

00:13:06.790 --> 00:13:06.800 align:start position:0%
had here to keep our console nice and
 

00:13:06.800 --> 00:13:07.269 align:start position:0%
had here to keep our console nice and
clean

00:13:07.269 --> 00:13:07.279 align:start position:0%
clean
 

00:13:07.279 --> 00:13:08.470 align:start position:0%
clean
all<00:13:07.360><c> right</c><00:13:07.600><c> check</c><00:13:07.760><c> this</c><00:13:08.000><c> out</c><00:13:08.079><c> so</c><00:13:08.240><c> we</c><00:13:08.320><c> have</c>

00:13:08.470 --> 00:13:08.480 align:start position:0%
all right check this out so we have
 

00:13:08.480 --> 00:13:10.150 align:start position:0%
all right check this out so we have
churno<00:13:08.800><c> equals</c><00:13:09.040><c> five</c><00:13:09.279><c> and</c><00:13:09.440><c> c</c><00:13:09.680><c> plus</c><00:13:09.839><c> plus</c>

00:13:10.150 --> 00:13:10.160 align:start position:0%
churno equals five and c plus plus
 

00:13:10.160 --> 00:13:10.870 align:start position:0%
churno equals five and c plus plus
equals<00:13:10.560><c> two</c>

00:13:10.870 --> 00:13:10.880 align:start position:0%
equals two
 

00:13:10.880 --> 00:13:12.389 align:start position:0%
equals two
cool<00:13:11.120><c> we're</c><00:13:11.360><c> able</c><00:13:11.600><c> to</c><00:13:11.680><c> iterate</c><00:13:12.079><c> through</c><00:13:12.240><c> all</c>

00:13:12.389 --> 00:13:12.399 align:start position:0%
cool we're able to iterate through all
 

00:13:12.399 --> 00:13:14.310 align:start position:0%
cool we're able to iterate through all
of<00:13:12.480><c> this</c><00:13:13.040><c> now</c><00:13:13.440><c> how</c><00:13:13.680><c> can</c><00:13:13.920><c> we</c>

00:13:14.310 --> 00:13:14.320 align:start position:0%
of this now how can we
 

00:13:14.320 --> 00:13:16.470 align:start position:0%
of this now how can we
maybe<00:13:14.720><c> improve</c><00:13:15.200><c> this</c><00:13:15.360><c> code</c><00:13:15.760><c> to</c><00:13:15.839><c> make</c><00:13:16.079><c> it</c><00:13:16.160><c> a</c>

00:13:16.470 --> 00:13:16.480 align:start position:0%
maybe improve this code to make it a
 

00:13:16.480 --> 00:13:18.150 align:start position:0%
maybe improve this code to make it a
little<00:13:16.720><c> bit</c><00:13:16.880><c> better</c><00:13:17.200><c> how</c><00:13:17.440><c> can</c><00:13:17.680><c> we</c>

00:13:18.150 --> 00:13:18.160 align:start position:0%
little bit better how can we
 

00:13:18.160 --> 00:13:20.470 align:start position:0%
little bit better how can we
use<00:13:18.720><c> the</c><00:13:18.959><c> same</c><00:13:19.279><c> kind</c><00:13:19.440><c> of</c><00:13:19.600><c> range</c><00:13:19.920><c> based</c><00:13:20.240><c> for</c>

00:13:20.470 --> 00:13:20.480 align:start position:0%
use the same kind of range based for
 

00:13:20.480 --> 00:13:22.389 align:start position:0%
use the same kind of range based for
loops<00:13:21.040><c> but</c><00:13:21.200><c> with</c><00:13:21.440><c> a</c><00:13:21.600><c> map</c>

00:13:22.389 --> 00:13:22.399 align:start position:0%
loops but with a map
 

00:13:22.399 --> 00:13:24.150 align:start position:0%
loops but with a map
well<00:13:22.800><c> let's</c><00:13:23.040><c> check</c><00:13:23.279><c> that</c><00:13:23.519><c> out</c><00:13:23.680><c> so</c><00:13:23.839><c> i'm</c><00:13:24.000><c> going</c>

00:13:24.150 --> 00:13:24.160 align:start position:0%
well let's check that out so i'm going
 

00:13:24.160 --> 00:13:25.590 align:start position:0%
well let's check that out so i'm going
to<00:13:24.320><c> write</c><00:13:24.720><c> for</c>

00:13:25.590 --> 00:13:25.600 align:start position:0%
to write for
 

00:13:25.600 --> 00:13:27.990 align:start position:0%
to write for
auto<00:13:26.240><c> kv</c><00:13:26.880><c> that's</c><00:13:27.120><c> going</c><00:13:27.200><c> to</c><00:13:27.279><c> stand</c><00:13:27.519><c> for</c><00:13:27.760><c> key</c>

00:13:27.990 --> 00:13:28.000 align:start position:0%
auto kv that's going to stand for key
 

00:13:28.000 --> 00:13:29.430 align:start position:0%
auto kv that's going to stand for key
value<00:13:28.320><c> in</c><00:13:28.480><c> this</c><00:13:28.639><c> case</c>

00:13:29.430 --> 00:13:29.440 align:start position:0%
value in this case
 

00:13:29.440 --> 00:13:32.629 align:start position:0%
value in this case
and<00:13:29.600><c> then</c><00:13:30.079><c> map</c><00:13:31.040><c> yeah</c><00:13:31.360><c> it's</c><00:13:31.760><c> that</c><00:13:32.079><c> simple</c><00:13:32.480><c> so</c>

00:13:32.629 --> 00:13:32.639 align:start position:0%
and then map yeah it's that simple so
 

00:13:32.639 --> 00:13:33.990 align:start position:0%
and then map yeah it's that simple so
what<00:13:32.800><c> this</c><00:13:33.040><c> will</c><00:13:33.200><c> do</c><00:13:33.440><c> is</c><00:13:33.600><c> actually</c>

00:13:33.990 --> 00:13:34.000 align:start position:0%
what this will do is actually
 

00:13:34.000 --> 00:13:36.470 align:start position:0%
what this will do is actually
retrieve<00:13:34.720><c> this</c><00:13:35.120><c> pair</c><00:13:35.440><c> this</c><00:13:35.760><c> iterator</c><00:13:36.240><c> first</c>

00:13:36.470 --> 00:13:36.480 align:start position:0%
retrieve this pair this iterator first
 

00:13:36.480 --> 00:13:37.590 align:start position:0%
retrieve this pair this iterator first
and<00:13:36.720><c> write</c><00:13:36.959><c> a</c><00:13:37.040><c> second</c>

00:13:37.590 --> 00:13:37.600 align:start position:0%
and write a second
 

00:13:37.600 --> 00:13:38.870 align:start position:0%
and write a second
if<00:13:37.760><c> you</c><00:13:37.839><c> actually</c><00:13:38.079><c> look</c><00:13:38.240><c> at</c><00:13:38.320><c> what</c><00:13:38.480><c> it</c><00:13:38.560><c> is</c><00:13:38.720><c> it's</c>

00:13:38.870 --> 00:13:38.880 align:start position:0%
if you actually look at what it is it's
 

00:13:38.880 --> 00:13:41.750 align:start position:0%
if you actually look at what it is it's
an<00:13:39.040><c> scd</c><00:13:39.600><c> pair</c><00:13:40.079><c> so</c><00:13:40.240><c> this</c><00:13:40.480><c> is</c><00:13:40.639><c> us</c><00:13:40.880><c> now</c><00:13:41.120><c> retrieving</c>

00:13:41.750 --> 00:13:41.760 align:start position:0%
an scd pair so this is us now retrieving
 

00:13:41.760 --> 00:13:42.069 align:start position:0%
an scd pair so this is us now retrieving
that

00:13:42.069 --> 00:13:42.079 align:start position:0%
that
 

00:13:42.079 --> 00:13:44.790 align:start position:0%
that
std<00:13:42.560><c> pair</c><00:13:43.199><c> and</c><00:13:43.360><c> now</c><00:13:43.680><c> we</c><00:13:43.839><c> can</c><00:13:44.079><c> actually</c><00:13:44.480><c> access</c>

00:13:44.790 --> 00:13:44.800 align:start position:0%
std pair and now we can actually access
 

00:13:44.800 --> 00:13:46.710 align:start position:0%
std pair and now we can actually access
the<00:13:44.959><c> elements</c><00:13:45.360><c> from</c><00:13:45.519><c> within</c><00:13:45.839><c> that</c><00:13:46.079><c> so</c><00:13:46.240><c> i</c><00:13:46.399><c> still</c>

00:13:46.710 --> 00:13:46.720 align:start position:0%
the elements from within that so i still
 

00:13:46.720 --> 00:13:48.629 align:start position:0%
the elements from within that so i still
need<00:13:47.040><c> this</c><00:13:47.360><c> unfortunately</c>

00:13:48.629 --> 00:13:48.639 align:start position:0%
need this unfortunately
 

00:13:48.639 --> 00:13:50.230 align:start position:0%
need this unfortunately
but<00:13:48.880><c> this</c><00:13:49.040><c> obviously</c><00:13:49.440><c> cleans</c><00:13:49.680><c> up</c><00:13:49.839><c> the</c><00:13:49.920><c> code</c>

00:13:50.230 --> 00:13:50.240 align:start position:0%
but this obviously cleans up the code
 

00:13:50.240 --> 00:13:51.670 align:start position:0%
but this obviously cleans up the code
because<00:13:50.560><c> i</c><00:13:50.639><c> can</c><00:13:50.800><c> just</c><00:13:51.040><c> do</c>

00:13:51.670 --> 00:13:51.680 align:start position:0%
because i can just do
 

00:13:51.680 --> 00:13:55.590 align:start position:0%
because i can just do
kv<00:13:52.399><c> dot</c><00:13:52.800><c> first</c><00:13:53.279><c> and</c><00:13:53.680><c> kv</c><00:13:54.320><c> dot</c><00:13:54.560><c> second</c><00:13:55.040><c> like</c><00:13:55.279><c> that</c>

00:13:55.590 --> 00:13:55.600 align:start position:0%
kv dot first and kv dot second like that
 

00:13:55.600 --> 00:13:57.670 align:start position:0%
kv dot first and kv dot second like that
and<00:13:55.680><c> then</c><00:13:55.839><c> obviously</c><00:13:56.240><c> if</c><00:13:56.320><c> i</c><00:13:56.480><c> print</c><00:13:56.720><c> this</c><00:13:56.880><c> out</c><00:13:57.519><c> i</c>

00:13:57.670 --> 00:13:57.680 align:start position:0%
and then obviously if i print this out i
 

00:13:57.680 --> 00:13:59.269 align:start position:0%
and then obviously if i print this out i
should<00:13:57.920><c> get</c><00:13:58.079><c> the</c><00:13:58.160><c> same</c><00:13:58.399><c> result</c><00:13:58.720><c> let</c><00:13:58.880><c> me</c><00:13:58.959><c> just</c>

00:13:59.269 --> 00:13:59.279 align:start position:0%
should get the same result let me just
 

00:13:59.279 --> 00:14:02.470 align:start position:0%
should get the same result let me just
add<00:13:59.600><c> some</c><00:14:00.240><c> end</c><00:14:00.560><c> lines</c><00:14:01.279><c> between</c><00:14:01.920><c> this</c>

00:14:02.470 --> 00:14:02.480 align:start position:0%
add some end lines between this
 

00:14:02.480 --> 00:14:04.389 align:start position:0%
add some end lines between this
and<00:14:02.720><c> here</c><00:14:03.040><c> maybe</c><00:14:03.440><c> let's</c><00:14:03.600><c> see</c><00:14:03.760><c> what</c><00:14:03.920><c> we</c><00:14:04.000><c> get</c><00:14:04.320><c> all</c>

00:14:04.389 --> 00:14:04.399 align:start position:0%
and here maybe let's see what we get all
 

00:14:04.399 --> 00:14:05.670 align:start position:0%
and here maybe let's see what we get all
right<00:14:04.720><c> as</c><00:14:04.800><c> you</c><00:14:04.959><c> can</c><00:14:05.040><c> see</c><00:14:05.199><c> we</c><00:14:05.279><c> get</c><00:14:05.360><c> the</c><00:14:05.440><c> same</c>

00:14:05.670 --> 00:14:05.680 align:start position:0%
right as you can see we get the same
 

00:14:05.680 --> 00:14:06.710 align:start position:0%
right as you can see we get the same
result<00:14:06.000><c> obviously</c>

00:14:06.710 --> 00:14:06.720 align:start position:0%
result obviously
 

00:14:06.720 --> 00:14:09.910 align:start position:0%
result obviously
but<00:14:06.959><c> this</c><00:14:07.199><c> again</c><00:14:07.760><c> looks</c><00:14:08.079><c> a</c><00:14:08.240><c> lot</c><00:14:08.639><c> cleaner</c><00:14:09.519><c> now</c>

00:14:09.910 --> 00:14:09.920 align:start position:0%
but this again looks a lot cleaner now
 

00:14:09.920 --> 00:14:12.150 align:start position:0%
but this again looks a lot cleaner now
can<00:14:10.160><c> we</c><00:14:10.320><c> do</c><00:14:10.480><c> better</c><00:14:10.720><c> than</c><00:14:10.880><c> that</c><00:14:11.440><c> well</c><00:14:11.760><c> yes</c><00:14:12.000><c> we</c>

00:14:12.150 --> 00:14:12.160 align:start position:0%
can we do better than that well yes we
 

00:14:12.160 --> 00:14:14.870 align:start position:0%
can we do better than that well yes we
can<00:14:12.480><c> as</c><00:14:12.639><c> of</c><00:14:12.800><c> cbs</c><00:14:13.199><c> plus</c><00:14:13.360><c> 17</c><00:14:13.920><c> we're</c><00:14:14.160><c> able</c><00:14:14.320><c> to</c><00:14:14.480><c> use</c>

00:14:14.870 --> 00:14:14.880 align:start position:0%
can as of cbs plus 17 we're able to use
 

00:14:14.880 --> 00:14:17.110 align:start position:0%
can as of cbs plus 17 we're able to use
structured<00:14:15.440><c> bindings</c><00:14:16.320><c> what</c><00:14:16.480><c> that</c><00:14:16.720><c> means</c><00:14:17.040><c> is</c>

00:14:17.110 --> 00:14:17.120 align:start position:0%
structured bindings what that means is
 

00:14:17.120 --> 00:14:18.389 align:start position:0%
structured bindings what that means is
that<00:14:17.279><c> this</c><00:14:17.440><c> code</c><00:14:17.680><c> is</c><00:14:17.760><c> going</c><00:14:17.920><c> to</c><00:14:18.079><c> look</c>

00:14:18.389 --> 00:14:18.399 align:start position:0%
that this code is going to look
 

00:14:18.399 --> 00:14:20.550 align:start position:0%
that this code is going to look
even<00:14:18.720><c> cleaner</c><00:14:19.360><c> we</c><00:14:19.519><c> can</c><00:14:19.760><c> actually</c><00:14:20.160><c> retrieve</c>

00:14:20.550 --> 00:14:20.560 align:start position:0%
even cleaner we can actually retrieve
 

00:14:20.560 --> 00:14:21.750 align:start position:0%
even cleaner we can actually retrieve
this<00:14:20.800><c> key</c><00:14:20.959><c> in</c><00:14:21.120><c> value</c>

00:14:21.750 --> 00:14:21.760 align:start position:0%
this key in value
 

00:14:21.760 --> 00:14:24.310 align:start position:0%
this key in value
right<00:14:22.079><c> here</c><00:14:22.480><c> inside</c><00:14:22.959><c> this</c><00:14:23.360><c> statement</c><00:14:24.000><c> we</c><00:14:24.160><c> can</c>

00:14:24.310 --> 00:14:24.320 align:start position:0%
right here inside this statement we can
 

00:14:24.320 --> 00:14:25.030 align:start position:0%
right here inside this statement we can
simply<00:14:24.639><c> write</c>

00:14:25.030 --> 00:14:25.040 align:start position:0%
simply write
 

00:14:25.040 --> 00:14:27.990 align:start position:0%
simply write
auto<00:14:25.680><c> key</c><00:14:26.320><c> value</c><00:14:27.040><c> with</c><00:14:27.199><c> this</c><00:14:27.440><c> kind</c><00:14:27.600><c> of</c><00:14:27.680><c> square</c>

00:14:27.990 --> 00:14:28.000 align:start position:0%
auto key value with this kind of square
 

00:14:28.000 --> 00:14:29.670 align:start position:0%
auto key value with this kind of square
brackets<00:14:28.399><c> here</c><00:14:28.639><c> and</c><00:14:28.800><c> iterate</c><00:14:29.279><c> through</c><00:14:29.519><c> our</c>

00:14:29.670 --> 00:14:29.680 align:start position:0%
brackets here and iterate through our
 

00:14:29.680 --> 00:14:29.990 align:start position:0%
brackets here and iterate through our
map

00:14:29.990 --> 00:14:30.000 align:start position:0%
map
 

00:14:30.000 --> 00:14:32.550 align:start position:0%
map
so<00:14:30.160><c> if</c><00:14:30.320><c> i</c><00:14:30.560><c> drop</c><00:14:30.800><c> this</c><00:14:30.959><c> over</c><00:14:31.199><c> here</c><00:14:32.079><c> that's</c><00:14:32.399><c> all</c>

00:14:32.550 --> 00:14:32.560 align:start position:0%
so if i drop this over here that's all
 

00:14:32.560 --> 00:14:33.590 align:start position:0%
so if i drop this over here that's all
we<00:14:32.720><c> end</c><00:14:32.959><c> up</c><00:14:33.120><c> with</c>

00:14:33.590 --> 00:14:33.600 align:start position:0%
we end up with
 

00:14:33.600 --> 00:14:35.750 align:start position:0%
we end up with
and<00:14:33.680><c> if</c><00:14:33.839><c> i</c><00:14:33.920><c> hit</c><00:14:34.079><c> f5</c><00:14:34.800><c> there</c><00:14:34.959><c> we</c><00:14:35.120><c> go</c><00:14:35.360><c> we're</c><00:14:35.519><c> now</c>

00:14:35.750 --> 00:14:35.760 align:start position:0%
and if i hit f5 there we go we're now
 

00:14:35.760 --> 00:14:37.189 align:start position:0%
and if i hit f5 there we go we're now
iterating<00:14:36.320><c> through</c><00:14:36.480><c> this</c><00:14:36.720><c> map</c>

00:14:37.189 --> 00:14:37.199 align:start position:0%
iterating through this map
 

00:14:37.199 --> 00:14:39.430 align:start position:0%
iterating through this map
three<00:14:37.680><c> different</c><00:14:38.160><c> ways</c><00:14:38.639><c> and</c><00:14:38.800><c> of</c><00:14:38.880><c> course</c><00:14:39.199><c> this</c>

00:14:39.430 --> 00:14:39.440 align:start position:0%
three different ways and of course this
 

00:14:39.440 --> 00:14:40.230 align:start position:0%
three different ways and of course this
code<00:14:39.839><c> looks</c>

00:14:40.230 --> 00:14:40.240 align:start position:0%
code looks
 

00:14:40.240 --> 00:14:42.230 align:start position:0%
code looks
much<00:14:40.720><c> much</c><00:14:41.040><c> cleaner</c><00:14:41.360><c> now</c><00:14:41.600><c> keep</c><00:14:41.839><c> in</c><00:14:41.920><c> mind</c><00:14:42.079><c> that</c>

00:14:42.230 --> 00:14:42.240 align:start position:0%
much much cleaner now keep in mind that
 

00:14:42.240 --> 00:14:43.750 align:start position:0%
much much cleaner now keep in mind that
you<00:14:42.320><c> will</c><00:14:42.560><c> have</c><00:14:42.800><c> to</c><00:14:43.040><c> make</c><00:14:43.279><c> sure</c><00:14:43.440><c> that</c><00:14:43.519><c> your</c>

00:14:43.750 --> 00:14:43.760 align:start position:0%
you will have to make sure that your
 

00:14:43.760 --> 00:14:44.949 align:start position:0%
you will have to make sure that your
compiler<00:14:44.160><c> supports</c><00:14:44.560><c> people</c>

00:14:44.949 --> 00:14:44.959 align:start position:0%
compiler supports people
 

00:14:44.959 --> 00:14:46.389 align:start position:0%
compiler supports people
17<00:14:45.440><c> and</c><00:14:45.519><c> that</c><00:14:45.600><c> you're</c><00:14:45.680><c> actually</c><00:14:45.920><c> compiling</c>

00:14:46.389 --> 00:14:46.399 align:start position:0%
17 and that you're actually compiling
 

00:14:46.399 --> 00:14:48.470 align:start position:0%
17 and that you're actually compiling
with<00:14:46.560><c> that</c><00:14:46.880><c> if</c><00:14:46.959><c> we</c><00:14:47.120><c> go</c><00:14:47.440><c> into</c><00:14:47.680><c> properties</c><00:14:48.160><c> here</c>

00:14:48.470 --> 00:14:48.480 align:start position:0%
with that if we go into properties here
 

00:14:48.480 --> 00:14:48.870 align:start position:0%
with that if we go into properties here
as<00:14:48.639><c> an</c>

00:14:48.870 --> 00:14:48.880 align:start position:0%
as an
 

00:14:48.880 --> 00:14:50.629 align:start position:0%
as an
example<00:14:49.360><c> you</c><00:14:49.440><c> can</c><00:14:49.600><c> see</c><00:14:49.760><c> that</c><00:14:49.920><c> my</c><00:14:50.079><c> c</c><00:14:50.399><c> plus</c>

00:14:50.629 --> 00:14:50.639 align:start position:0%
example you can see that my c plus
 

00:14:50.639 --> 00:14:52.629 align:start position:0%
example you can see that my c plus
language<00:14:51.040><c> standard</c><00:14:51.440><c> under</c><00:14:51.760><c> c</c><00:14:51.920><c> c</c><00:14:52.079><c> plus</c><00:14:52.320><c> plus</c>

00:14:52.629 --> 00:14:52.639 align:start position:0%
language standard under c c plus plus
 

00:14:52.639 --> 00:14:54.310 align:start position:0%
language standard under c c plus plus
and<00:14:52.720><c> language</c><00:14:53.199><c> in</c><00:14:53.279><c> visual</c><00:14:53.600><c> studio</c>

00:14:54.310 --> 00:14:54.320 align:start position:0%
and language in visual studio
 

00:14:54.320 --> 00:14:56.150 align:start position:0%
and language in visual studio
is<00:14:54.480><c> set</c><00:14:54.639><c> to</c><00:14:54.800><c> simple</c><00:14:55.360><c> 17.</c><00:14:55.760><c> if</c><00:14:55.920><c> you're</c><00:14:56.000><c> getting</c>

00:14:56.150 --> 00:14:56.160 align:start position:0%
is set to simple 17. if you're getting
 

00:14:56.160 --> 00:14:57.430 align:start position:0%
is set to simple 17. if you're getting
compiler<00:14:56.639><c> errors</c><00:14:56.959><c> which</c><00:14:57.120><c> is</c>

00:14:57.430 --> 00:14:57.440 align:start position:0%
compiler errors which is
 

00:14:57.440 --> 00:14:58.949 align:start position:0%
compiler errors which is
quite<00:14:57.600><c> common</c><00:14:58.160><c> then</c><00:14:58.399><c> make</c><00:14:58.560><c> sure</c><00:14:58.720><c> that</c><00:14:58.800><c> you're</c>

00:14:58.949 --> 00:14:58.959 align:start position:0%
quite common then make sure that you're
 

00:14:58.959 --> 00:15:00.790 align:start position:0%
quite common then make sure that you're
actually<00:14:59.120><c> compiling</c><00:14:59.680><c> with</c><00:15:00.000><c> c</c><00:15:00.240><c> plus</c>

00:15:00.790 --> 00:15:00.800 align:start position:0%
actually compiling with c plus
 

00:15:00.800 --> 00:15:04.389 align:start position:0%
actually compiling with c plus
17.<00:15:01.760><c> okay</c><00:15:02.160><c> so</c><00:15:02.399><c> in</c><00:15:02.639><c> summary</c><00:15:03.360><c> the</c><00:15:03.519><c> only</c><00:15:03.920><c> way</c><00:15:04.240><c> that</c>

00:15:04.389 --> 00:15:04.399 align:start position:0%
17. okay so in summary the only way that
 

00:15:04.399 --> 00:15:06.550 align:start position:0%
17. okay so in summary the only way that
we<00:15:04.560><c> can</c><00:15:04.720><c> iterate</c><00:15:05.120><c> through</c><00:15:05.279><c> a</c><00:15:05.360><c> map</c><00:15:05.680><c> or</c><00:15:05.920><c> a</c><00:15:06.079><c> set</c><00:15:06.320><c> or</c>

00:15:06.550 --> 00:15:06.560 align:start position:0%
we can iterate through a map or a set or
 

00:15:06.560 --> 00:15:08.310 align:start position:0%
we can iterate through a map or a set or
something<00:15:06.800><c> that</c><00:15:06.959><c> is</c><00:15:07.120><c> essentially</c><00:15:07.680><c> unordered</c>

00:15:08.310 --> 00:15:08.320 align:start position:0%
something that is essentially unordered
 

00:15:08.320 --> 00:15:09.430 align:start position:0%
something that is essentially unordered
and<00:15:08.399><c> doesn't</c><00:15:08.639><c> have</c><00:15:08.880><c> a</c><00:15:08.959><c> simple</c>

00:15:09.430 --> 00:15:09.440 align:start position:0%
and doesn't have a simple
 

00:15:09.440 --> 00:15:12.389 align:start position:0%
and doesn't have a simple
kind<00:15:09.680><c> of</c><00:15:09.920><c> incrementing</c><00:15:10.800><c> index</c><00:15:11.199><c> system</c><00:15:11.839><c> is</c><00:15:12.160><c> by</c>

00:15:12.389 --> 00:15:12.399 align:start position:0%
kind of incrementing index system is by
 

00:15:12.399 --> 00:15:13.030 align:start position:0%
kind of incrementing index system is by
using

00:15:13.030 --> 00:15:13.040 align:start position:0%
using
 

00:15:13.040 --> 00:15:14.949 align:start position:0%
using
an<00:15:13.279><c> iterator</c><00:15:13.839><c> and</c><00:15:14.000><c> today</c><00:15:14.240><c> we've</c><00:15:14.480><c> discussed</c>

00:15:14.949 --> 00:15:14.959 align:start position:0%
an iterator and today we've discussed
 

00:15:14.959 --> 00:15:16.710 align:start position:0%
an iterator and today we've discussed
both<00:15:15.199><c> using</c><00:15:15.519><c> a</c><00:15:15.600><c> normal</c><00:15:15.920><c> iterator</c><00:15:16.320><c> a</c><00:15:16.399><c> const</c>

00:15:16.710 --> 00:15:16.720 align:start position:0%
both using a normal iterator a const
 

00:15:16.720 --> 00:15:18.310 align:start position:0%
both using a normal iterator a const
iterator<00:15:17.199><c> range</c><00:15:17.360><c> based</c><00:15:17.680><c> for</c><00:15:17.839><c> loops</c><00:15:18.079><c> which</c>

00:15:18.310 --> 00:15:18.320 align:start position:0%
iterator range based for loops which
 

00:15:18.320 --> 00:15:19.750 align:start position:0%
iterator range based for loops which
actually<00:15:18.560><c> use</c><00:15:18.800><c> iterators</c>

00:15:19.750 --> 00:15:19.760 align:start position:0%
actually use iterators
 

00:15:19.760 --> 00:15:21.590 align:start position:0%
actually use iterators
as<00:15:19.920><c> well</c><00:15:20.079><c> as</c><00:15:20.320><c> structured</c><00:15:20.720><c> bindings</c><00:15:21.120><c> with</c><00:15:21.279><c> maps</c>

00:15:21.590 --> 00:15:21.600 align:start position:0%
as well as structured bindings with maps
 

00:15:21.600 --> 00:15:23.030 align:start position:0%
as well as structured bindings with maps
which<00:15:21.760><c> is</c><00:15:21.920><c> pretty</c><00:15:22.079><c> cool</c><00:15:22.399><c> and</c><00:15:22.639><c> just</c>

00:15:23.030 --> 00:15:23.040 align:start position:0%
which is pretty cool and just
 

00:15:23.040 --> 00:15:26.069 align:start position:0%
which is pretty cool and just
to<00:15:23.440><c> be</c><00:15:23.680><c> super</c><00:15:24.000><c> clear</c><00:15:24.320><c> the</c><00:15:24.480><c> reason</c><00:15:25.120><c> these</c><00:15:25.760><c> range</c>

00:15:26.069 --> 00:15:26.079 align:start position:0%
to be super clear the reason these range
 

00:15:26.079 --> 00:15:26.550 align:start position:0%
to be super clear the reason these range
based

00:15:26.550 --> 00:15:26.560 align:start position:0%
based
 

00:15:26.560 --> 00:15:28.870 align:start position:0%
based
for<00:15:26.720><c> loop</c><00:15:26.959><c> shortcuts</c><00:15:27.600><c> work</c><00:15:27.920><c> is</c><00:15:28.079><c> because</c><00:15:28.720><c> we</c>

00:15:28.870 --> 00:15:28.880 align:start position:0%
for loop shortcuts work is because we
 

00:15:28.880 --> 00:15:29.829 align:start position:0%
for loop shortcuts work is because we
have<00:15:29.040><c> an</c><00:15:29.279><c> actual</c>

00:15:29.829 --> 00:15:29.839 align:start position:0%
have an actual
 

00:15:29.839 --> 00:15:32.470 align:start position:0%
have an actual
begin<00:15:30.320><c> function</c><00:15:30.880><c> inside</c><00:15:31.279><c> our</c><00:15:31.519><c> map</c><00:15:31.839><c> or</c><00:15:32.079><c> inside</c>

00:15:32.470 --> 00:15:32.480 align:start position:0%
begin function inside our map or inside
 

00:15:32.480 --> 00:15:34.069 align:start position:0%
begin function inside our map or inside
our<00:15:32.720><c> well</c><00:15:32.959><c> whatever</c><00:15:33.360><c> collection</c>

00:15:34.069 --> 00:15:34.079 align:start position:0%
our well whatever collection
 

00:15:34.079 --> 00:15:35.990 align:start position:0%
our well whatever collection
or<00:15:34.240><c> data</c><00:15:34.560><c> structure</c><00:15:34.880><c> we're</c><00:15:35.120><c> using</c><00:15:35.759><c> that</c>

00:15:35.990 --> 00:15:36.000 align:start position:0%
or data structure we're using that
 

00:15:36.000 --> 00:15:38.230 align:start position:0%
or data structure we're using that
actually<00:15:36.800><c> returns</c><00:15:37.279><c> an</c><00:15:37.440><c> iterate</c><00:15:37.839><c> in</c><00:15:37.920><c> the</c><00:15:38.000><c> first</c>

00:15:38.230 --> 00:15:38.240 align:start position:0%
actually returns an iterate in the first
 

00:15:38.240 --> 00:15:39.670 align:start position:0%
actually returns an iterate in the first
place<00:15:38.480><c> if</c><00:15:38.639><c> we</c><00:15:38.720><c> didn't</c><00:15:38.959><c> have</c><00:15:39.199><c> that</c>

00:15:39.670 --> 00:15:39.680 align:start position:0%
place if we didn't have that
 

00:15:39.680 --> 00:15:41.990 align:start position:0%
place if we didn't have that
then<00:15:39.839><c> that</c><00:15:40.079><c> would</c><00:15:40.320><c> in</c><00:15:40.480><c> fact</c><00:15:40.880><c> not</c><00:15:41.199><c> work</c><00:15:41.600><c> okay</c><00:15:41.839><c> so</c>

00:15:41.990 --> 00:15:42.000 align:start position:0%
then that would in fact not work okay so
 

00:15:42.000 --> 00:15:43.670 align:start position:0%
then that would in fact not work okay so
hopefully<00:15:42.320><c> that</c><00:15:42.480><c> was</c><00:15:42.639><c> a</c><00:15:42.800><c> good</c><00:15:43.040><c> introduction</c>

00:15:43.670 --> 00:15:43.680 align:start position:0%
hopefully that was a good introduction
 

00:15:43.680 --> 00:15:45.269 align:start position:0%
hopefully that was a good introduction
to<00:15:43.839><c> iterators</c><00:15:44.320><c> there</c><00:15:44.480><c> is</c><00:15:44.639><c> of</c><00:15:44.720><c> course</c><00:15:44.959><c> a</c><00:15:45.040><c> lot</c>

00:15:45.269 --> 00:15:45.279 align:start position:0%
to iterators there is of course a lot
 

00:15:45.279 --> 00:15:46.870 align:start position:0%
to iterators there is of course a lot
more<00:15:45.440><c> topics</c><00:15:45.839><c> that</c><00:15:45.920><c> we</c><00:15:46.000><c> can</c><00:15:46.160><c> actually</c><00:15:46.480><c> cover</c>

00:15:46.870 --> 00:15:46.880 align:start position:0%
more topics that we can actually cover
 

00:15:46.880 --> 00:15:48.069 align:start position:0%
more topics that we can actually cover
in<00:15:46.959><c> terms</c><00:15:47.199><c> of</c><00:15:47.360><c> iterators</c>

00:15:48.069 --> 00:15:48.079 align:start position:0%
in terms of iterators
 

00:15:48.079 --> 00:15:50.310 align:start position:0%
in terms of iterators
i<00:15:48.160><c> would</c><00:15:48.399><c> like</c><00:15:48.639><c> to</c><00:15:48.800><c> for</c><00:15:49.040><c> one</c><00:15:49.360><c> write</c><00:15:49.680><c> our</c><00:15:50.000><c> own</c>

00:15:50.310 --> 00:15:50.320 align:start position:0%
i would like to for one write our own
 

00:15:50.320 --> 00:15:51.910 align:start position:0%
i would like to for one write our own
iterators<00:15:50.880><c> and</c><00:15:50.959><c> we'll</c><00:15:51.120><c> be</c><00:15:51.279><c> adding</c><00:15:51.519><c> them</c><00:15:51.759><c> to</c>

00:15:51.910 --> 00:15:51.920 align:start position:0%
iterators and we'll be adding them to
 

00:15:51.920 --> 00:15:52.949 align:start position:0%
iterators and we'll be adding them to
the<00:15:52.000><c> data</c><00:15:52.240><c> structures</c>

00:15:52.949 --> 00:15:52.959 align:start position:0%
the data structures
 

00:15:52.959 --> 00:15:54.550 align:start position:0%
the data structures
that<00:15:53.199><c> we've</c><00:15:53.360><c> been</c><00:15:53.519><c> going</c><00:15:53.839><c> over</c><00:15:54.079><c> the</c><00:15:54.160><c> last</c><00:15:54.399><c> few</c>

00:15:54.550 --> 00:15:54.560 align:start position:0%
that we've been going over the last few
 

00:15:54.560 --> 00:15:57.189 align:start position:0%
that we've been going over the last few
episodes<00:15:55.040><c> of</c><00:15:55.360><c> this</c><00:15:55.600><c> series</c><00:15:56.160><c> as</c><00:15:56.480><c> well</c>

00:15:57.189 --> 00:15:57.199 align:start position:0%
episodes of this series as well
 

00:15:57.199 --> 00:15:58.470 align:start position:0%
episodes of this series as well
as<00:15:57.440><c> i</c><00:15:57.519><c> mentioned</c><00:15:57.839><c> there's</c><00:15:58.079><c> also</c><00:15:58.320><c> some</c>

00:15:58.470 --> 00:15:58.480 align:start position:0%
as i mentioned there's also some
 

00:15:58.480 --> 00:15:59.829 align:start position:0%
as i mentioned there's also some
advanced<00:15:58.880><c> things</c><00:15:59.040><c> that</c><00:15:59.120><c> you</c><00:15:59.279><c> can</c><00:15:59.360><c> try</c><00:15:59.600><c> to</c><00:15:59.680><c> do</c>

00:15:59.829 --> 00:15:59.839 align:start position:0%
advanced things that you can try to do
 

00:15:59.839 --> 00:16:01.829 align:start position:0%
advanced things that you can try to do
with<00:16:00.079><c> iterators</c><00:16:00.800><c> and</c><00:16:00.880><c> i</c><00:16:00.959><c> would</c><00:16:01.120><c> encourage</c><00:16:01.680><c> you</c>

00:16:01.829 --> 00:16:01.839 align:start position:0%
with iterators and i would encourage you
 

00:16:01.839 --> 00:16:04.069 align:start position:0%
with iterators and i would encourage you
to<00:16:02.000><c> try</c><00:16:02.320><c> that</c><00:16:02.560><c> out</c><00:16:02.800><c> as</c><00:16:02.959><c> an</c><00:16:03.120><c> exercise</c><00:16:03.839><c> as</c>

00:16:04.069 --> 00:16:04.079 align:start position:0%
to try that out as an exercise as
 

00:16:04.079 --> 00:16:04.870 align:start position:0%
to try that out as an exercise as
homework

00:16:04.870 --> 00:16:04.880 align:start position:0%
homework
 

00:16:04.880 --> 00:16:06.550 align:start position:0%
homework
if<00:16:05.040><c> you</c><00:16:05.199><c> will</c><00:16:05.360><c> so</c><00:16:05.519><c> for</c><00:16:05.680><c> example</c><00:16:06.160><c> try</c><00:16:06.399><c> and</c>

00:16:06.550 --> 00:16:06.560 align:start position:0%
if you will so for example try and
 

00:16:06.560 --> 00:16:08.069 align:start position:0%
if you will so for example try and
remove<00:16:07.040><c> an</c><00:16:07.199><c> element</c><00:16:07.600><c> from</c><00:16:07.839><c> the</c>

00:16:08.069 --> 00:16:08.079 align:start position:0%
remove an element from the
 

00:16:08.079 --> 00:16:10.710 align:start position:0%
remove an element from the
center<00:16:08.880><c> of</c><00:16:09.199><c> a</c><00:16:09.440><c> vector</c><00:16:09.920><c> and</c><00:16:10.079><c> see</c><00:16:10.240><c> if</c><00:16:10.399><c> you</c><00:16:10.480><c> can</c>

00:16:10.710 --> 00:16:10.720 align:start position:0%
center of a vector and see if you can
 

00:16:10.720 --> 00:16:12.389 align:start position:0%
center of a vector and see if you can
adjust<00:16:11.040><c> the</c><00:16:11.120><c> iterator</c><00:16:11.600><c> to</c><00:16:11.680><c> deal</c><00:16:11.920><c> with</c><00:16:12.079><c> that</c>

00:16:12.389 --> 00:16:12.399 align:start position:0%
adjust the iterator to deal with that
 

00:16:12.399 --> 00:16:13.910 align:start position:0%
adjust the iterator to deal with that
and<00:16:12.560><c> likewise</c><00:16:13.199><c> maybe</c>

00:16:13.910 --> 00:16:13.920 align:start position:0%
and likewise maybe
 

00:16:13.920 --> 00:16:16.069 align:start position:0%
and likewise maybe
add<00:16:14.160><c> an</c><00:16:14.320><c> element</c><00:16:14.880><c> into</c><00:16:15.120><c> the</c><00:16:15.279><c> middle</c><00:16:15.680><c> of</c><00:16:15.920><c> the</c>

00:16:16.069 --> 00:16:16.079 align:start position:0%
add an element into the middle of the
 

00:16:16.079 --> 00:16:18.150 align:start position:0%
add an element into the middle of the
vector<00:16:16.560><c> and</c><00:16:16.720><c> see</c><00:16:16.959><c> if</c><00:16:17.120><c> your</c><00:16:17.279><c> iterator</c><00:16:17.759><c> can</c><00:16:17.920><c> deal</c>

00:16:18.150 --> 00:16:18.160 align:start position:0%
vector and see if your iterator can deal
 

00:16:18.160 --> 00:16:20.150 align:start position:0%
vector and see if your iterator can deal
with<00:16:18.320><c> that</c><00:16:18.560><c> those</c><00:16:18.800><c> are</c><00:16:18.880><c> great</c><00:16:19.199><c> exercises</c>

00:16:20.150 --> 00:16:20.160 align:start position:0%
with that those are great exercises
 

00:16:20.160 --> 00:16:21.910 align:start position:0%
with that those are great exercises
and<00:16:20.320><c> i</c><00:16:20.399><c> might</c><00:16:20.560><c> be</c><00:16:20.720><c> revealing</c><00:16:21.120><c> those</c><00:16:21.279><c> solutions</c>

00:16:21.910 --> 00:16:21.920 align:start position:0%
and i might be revealing those solutions
 

00:16:21.920 --> 00:16:23.350 align:start position:0%
and i might be revealing those solutions
in<00:16:22.000><c> the</c><00:16:22.160><c> future</c><00:16:22.480><c> but</c><00:16:22.639><c> anyway</c><00:16:22.800><c> i</c><00:16:22.880><c> hope</c><00:16:23.040><c> you</c><00:16:23.120><c> guys</c>

00:16:23.350 --> 00:16:23.360 align:start position:0%
in the future but anyway i hope you guys
 

00:16:23.360 --> 00:16:24.389 align:start position:0%
in the future but anyway i hope you guys
enjoyed<00:16:23.680><c> this</c><00:16:23.839><c> video</c>

00:16:24.389 --> 00:16:24.399 align:start position:0%
enjoyed this video
 

00:16:24.399 --> 00:16:25.990 align:start position:0%
enjoyed this video
if<00:16:24.639><c> you</c><00:16:24.720><c> did</c><00:16:25.040><c> as</c><00:16:25.199><c> always</c><00:16:25.519><c> please</c><00:16:25.680><c> do</c><00:16:25.839><c> not</c>

00:16:25.990 --> 00:16:26.000 align:start position:0%
if you did as always please do not
 

00:16:26.000 --> 00:16:27.350 align:start position:0%
if you did as always please do not
forget<00:16:26.320><c> to</c><00:16:26.399><c> hit</c><00:16:26.560><c> that</c><00:16:26.720><c> like</c><00:16:26.959><c> button</c><00:16:27.279><c> and</c>

00:16:27.350 --> 00:16:27.360 align:start position:0%
forget to hit that like button and
 

00:16:27.360 --> 00:16:28.870 align:start position:0%
forget to hit that like button and
subscribe<00:16:27.920><c> if</c><00:16:28.000><c> you</c><00:16:28.160><c> are</c><00:16:28.320><c> new</c>

00:16:28.870 --> 00:16:28.880 align:start position:0%
subscribe if you are new
 

00:16:28.880 --> 00:16:30.470 align:start position:0%
subscribe if you are new
to<00:16:29.120><c> this</c><00:16:29.440><c> channel</c><00:16:29.759><c> we've</c><00:16:29.920><c> got</c><00:16:30.079><c> plenty</c><00:16:30.320><c> more</c>

00:16:30.470 --> 00:16:30.480 align:start position:0%
to this channel we've got plenty more
 

00:16:30.480 --> 00:16:32.069 align:start position:0%
to this channel we've got plenty more
simple<00:16:30.959><c> videos</c><00:16:31.279><c> coming</c><00:16:31.680><c> soon</c>

00:16:32.069 --> 00:16:32.079 align:start position:0%
simple videos coming soon
 

00:16:32.079 --> 00:16:33.509 align:start position:0%
simple videos coming soon
next<00:16:32.320><c> time</c><00:16:32.560><c> i</c><00:16:32.639><c> think</c><00:16:32.800><c> we'll</c><00:16:32.959><c> have</c><00:16:33.120><c> a</c><00:16:33.199><c> go</c><00:16:33.360><c> at</c>

00:16:33.509 --> 00:16:33.519 align:start position:0%
next time i think we'll have a go at
 

00:16:33.519 --> 00:16:35.509 align:start position:0%
next time i think we'll have a go at
actually<00:16:34.000><c> writing</c><00:16:34.399><c> our</c><00:16:34.720><c> own</c><00:16:34.880><c> iterators</c><00:16:35.440><c> and</c>

00:16:35.509 --> 00:16:35.519 align:start position:0%
actually writing our own iterators and
 

00:16:35.519 --> 00:16:36.470 align:start position:0%
actually writing our own iterators and
adding<00:16:35.759><c> them</c><00:16:35.920><c> to</c><00:16:36.160><c> our</c>

00:16:36.470 --> 00:16:36.480 align:start position:0%
adding them to our
 

00:16:36.480 --> 00:16:38.629 align:start position:0%
adding them to our
data<00:16:36.800><c> structure</c><00:16:37.279><c> classes</c><00:16:37.839><c> but</c><00:16:38.079><c> until</c><00:16:38.399><c> then</c><00:16:38.560><c> i</c>

00:16:38.629 --> 00:16:38.639 align:start position:0%
data structure classes but until then i
 

00:16:38.639 --> 00:16:39.910 align:start position:0%
data structure classes but until then i
hope<00:16:38.800><c> you</c><00:16:38.880><c> guys</c><00:16:39.040><c> have</c><00:16:39.279><c> a</c><00:16:39.360><c> great</c><00:16:39.680><c> day</c>

00:16:39.910 --> 00:16:39.920 align:start position:0%
hope you guys have a great day
 

00:16:39.920 --> 00:16:41.269 align:start position:0%
hope you guys have a great day
definitely<00:16:40.240><c> don't</c><00:16:40.480><c> forget</c><00:16:40.800><c> to</c><00:16:40.959><c> check</c><00:16:41.120><c> out</c>

00:16:41.269 --> 00:16:41.279 align:start position:0%
definitely don't forget to check out
 

00:16:41.279 --> 00:16:42.550 align:start position:0%
definitely don't forget to check out
skillshare<00:16:41.839><c> using</c><00:16:42.079><c> the</c><00:16:42.160><c> link</c><00:16:42.399><c> in</c><00:16:42.480><c> the</c>

00:16:42.550 --> 00:16:42.560 align:start position:0%
skillshare using the link in the
 

00:16:42.560 --> 00:16:43.670 align:start position:0%
skillshare using the link in the
description<00:16:43.040><c> below</c>

00:16:43.670 --> 00:16:43.680 align:start position:0%
description below
 

00:16:43.680 --> 00:16:51.540 align:start position:0%
description below
and<00:16:43.839><c> i</c><00:16:43.920><c> will</c><00:16:44.079><c> see</c><00:16:44.240><c> you</c><00:16:44.320><c> next</c><00:16:44.560><c> time</c><00:16:48.839><c> goodbye</c>

00:16:51.540 --> 00:16:51.550 align:start position:0%
and i will see you next time goodbye
 

00:16:51.550 --> 00:17:08.150 align:start position:0%
and i will see you next time goodbye
[Music]

00:17:08.150 --> 00:17:08.160 align:start position:0%
 
 

00:17:08.160 --> 00:17:10.240 align:start position:0%
 
you

