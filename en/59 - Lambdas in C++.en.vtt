WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.880 align:start position:0%
 
hey<00:00:00.210><c> what's</c><00:00:00.420><c> up</c><00:00:00.480><c> guys</c><00:00:00.690><c> my</c><00:00:01.050><c> name</c><00:00:01.079><c> is</c><00:00:01.350><c> Ayana</c><00:00:01.469><c> and</c>

00:00:01.880 --> 00:00:01.890 align:start position:0%
hey what's up guys my name is Ayana and
 

00:00:01.890 --> 00:00:03.320 align:start position:0%
hey what's up guys my name is Ayana and
welcome<00:00:02.190><c> back</c><00:00:02.220><c> to</c><00:00:02.580><c> my</c><00:00:02.700><c> safe</c><00:00:02.939><c> loss</c><00:00:03.120><c> class</c>

00:00:03.320 --> 00:00:03.330 align:start position:0%
welcome back to my safe loss class
 

00:00:03.330 --> 00:00:05.900 align:start position:0%
welcome back to my safe loss class
series<00:00:03.750><c> so</c><00:00:04.290><c> today</c><00:00:04.830><c> building</c><00:00:05.250><c> off</c><00:00:05.460><c> of</c><00:00:05.640><c> what</c><00:00:05.790><c> we</c>

00:00:05.900 --> 00:00:05.910 align:start position:0%
series so today building off of what we
 

00:00:05.910 --> 00:00:07.490 align:start position:0%
series so today building off of what we
talked<00:00:06.150><c> about</c><00:00:06.240><c> last</c><00:00:06.390><c> time</c><00:00:06.870><c> with</c><00:00:07.080><c> function</c>

00:00:07.490 --> 00:00:07.500 align:start position:0%
talked about last time with function
 

00:00:07.500 --> 00:00:09.020 align:start position:0%
talked about last time with function
pointers<00:00:07.919><c> if</c><00:00:08.010><c> you</c><00:00:08.130><c> haven't</c><00:00:08.519><c> seen</c><00:00:08.700><c> that</c><00:00:08.880><c> video</c>

00:00:09.020 --> 00:00:09.030 align:start position:0%
pointers if you haven't seen that video
 

00:00:09.030 --> 00:00:10.790 align:start position:0%
pointers if you haven't seen that video
definitely<00:00:09.840><c> click</c><00:00:10.139><c> up</c><00:00:10.290><c> there</c><00:00:10.440><c> to</c><00:00:10.500><c> check</c><00:00:10.650><c> it</c>

00:00:10.790 --> 00:00:10.800 align:start position:0%
definitely click up there to check it
 

00:00:10.800 --> 00:00:12.230 align:start position:0%
definitely click up there to check it
out<00:00:10.889><c> today</c><00:00:11.460><c> we're</c><00:00:11.670><c> gonna</c><00:00:11.759><c> be</c><00:00:11.880><c> talking</c><00:00:11.940><c> about</c>

00:00:12.230 --> 00:00:12.240 align:start position:0%
out today we're gonna be talking about
 

00:00:12.240 --> 00:00:14.480 align:start position:0%
out today we're gonna be talking about
talking<00:00:12.480><c> about</c><00:00:12.630><c> Landers</c><00:00:13.259><c> and</c><00:00:13.290><c> lambdas</c><00:00:14.070><c> are</c>

00:00:14.480 --> 00:00:14.490 align:start position:0%
talking about Landers and lambdas are
 

00:00:14.490 --> 00:00:17.269 align:start position:0%
talking about Landers and lambdas are
essentially<00:00:15.330><c> a</c><00:00:15.360><c> way</c><00:00:15.780><c> to</c><00:00:15.839><c> a</c><00:00:16.379><c> way</c><00:00:16.740><c> for</c><00:00:16.949><c> us</c><00:00:17.070><c> to</c>

00:00:17.269 --> 00:00:17.279 align:start position:0%
essentially a way to a way for us to
 

00:00:17.279 --> 00:00:19.040 align:start position:0%
essentially a way to a way for us to
define<00:00:17.580><c> something</c><00:00:18.180><c> that</c><00:00:18.300><c> I</c><00:00:18.330><c> like</c><00:00:18.510><c> to</c><00:00:18.539><c> call</c><00:00:18.810><c> in</c>

00:00:19.040 --> 00:00:19.050 align:start position:0%
define something that I like to call in
 

00:00:19.050 --> 00:00:21.410 align:start position:0%
define something that I like to call in
an<00:00:19.260><c> anonymous</c><00:00:19.560><c> function</c><00:00:20.100><c> so</c><00:00:20.820><c> basically</c><00:00:21.210><c> it's</c>

00:00:21.410 --> 00:00:21.420 align:start position:0%
an anonymous function so basically it's
 

00:00:21.420 --> 00:00:23.060 align:start position:0%
an anonymous function so basically it's
a<00:00:21.449><c> way</c><00:00:21.480><c> for</c><00:00:21.630><c> us</c><00:00:21.930><c> to</c><00:00:22.140><c> create</c><00:00:22.380><c> a</c><00:00:22.470><c> function</c>

00:00:23.060 --> 00:00:23.070 align:start position:0%
a way for us to create a function
 

00:00:23.070 --> 00:00:25.279 align:start position:0%
a way for us to create a function
without<00:00:23.550><c> actually</c><00:00:24.119><c> having</c><00:00:24.269><c> to</c><00:00:24.480><c> physically</c>

00:00:25.279 --> 00:00:25.289 align:start position:0%
without actually having to physically
 

00:00:25.289 --> 00:00:26.900 align:start position:0%
without actually having to physically
create<00:00:25.470><c> a</c><00:00:25.650><c> function</c><00:00:26.010><c> just</c><00:00:26.460><c> like</c><00:00:26.550><c> a</c><00:00:26.640><c> quick</c>

00:00:26.900 --> 00:00:26.910 align:start position:0%
create a function just like a quick
 

00:00:26.910 --> 00:00:28.580 align:start position:0%
create a function just like a quick
disposable<00:00:27.539><c> function</c><00:00:27.900><c> if</c><00:00:28.019><c> we</c><00:00:28.109><c> want</c><00:00:28.320><c> to</c><00:00:28.410><c> suck</c>

00:00:28.580 --> 00:00:28.590 align:start position:0%
disposable function if we want to suck
 

00:00:28.590 --> 00:00:30.200 align:start position:0%
disposable function if we want to suck
if<00:00:28.740><c> we</c><00:00:28.769><c> want</c><00:00:29.039><c> to</c><00:00:29.099><c> demonstrate</c><00:00:29.279><c> some</c><00:00:29.880><c> kind</c><00:00:30.119><c> of</c>

00:00:30.200 --> 00:00:30.210 align:start position:0%
if we want to demonstrate some kind of
 

00:00:30.210 --> 00:00:32.780 align:start position:0%
if we want to demonstrate some kind of
code<00:00:30.539><c> that</c><00:00:30.570><c> needs</c><00:00:30.810><c> to</c><00:00:31.080><c> be</c><00:00:31.109><c> run</c><00:00:31.410><c> but</c><00:00:32.099><c> we</c><00:00:32.219><c> we</c><00:00:32.579><c> want</c>

00:00:32.780 --> 00:00:32.790 align:start position:0%
code that needs to be run but we we want
 

00:00:32.790 --> 00:00:34.430 align:start position:0%
code that needs to be run but we we want
to<00:00:32.850><c> trade</c><00:00:33.030><c> it</c><00:00:33.149><c> more</c><00:00:33.300><c> like</c><00:00:33.450><c> a</c><00:00:33.480><c> variable</c><00:00:33.989><c> and</c>

00:00:34.430 --> 00:00:34.440 align:start position:0%
to trade it more like a variable and
 

00:00:34.440 --> 00:00:36.500 align:start position:0%
to trade it more like a variable and
less<00:00:34.890><c> than</c><00:00:35.040><c> an</c><00:00:35.130><c> actual</c><00:00:35.430><c> formal</c><00:00:35.760><c> function</c><00:00:36.329><c> that</c>

00:00:36.500 --> 00:00:36.510 align:start position:0%
less than an actual formal function that
 

00:00:36.510 --> 00:00:39.380 align:start position:0%
less than an actual formal function that
exists<00:00:37.079><c> as</c><00:00:37.260><c> like</c><00:00:37.770><c> a</c><00:00:37.800><c> symbol</c><00:00:38.340><c> in</c><00:00:38.579><c> our</c><00:00:39.000><c> actual</c>

00:00:39.380 --> 00:00:39.390 align:start position:0%
exists as like a symbol in our actual
 

00:00:39.390 --> 00:00:41.330 align:start position:0%
exists as like a symbol in our actual
compiled<00:00:39.899><c> code</c><00:00:40.200><c> if</c><00:00:40.469><c> that</c><00:00:40.680><c> makes</c><00:00:40.860><c> sense</c><00:00:41.129><c> and</c>

00:00:41.330 --> 00:00:41.340 align:start position:0%
compiled code if that makes sense and
 

00:00:41.340 --> 00:00:43.220 align:start position:0%
compiled code if that makes sense and
obviously<00:00:41.850><c> when</c><00:00:42.629><c> we</c><00:00:42.719><c> jump</c><00:00:42.899><c> into</c><00:00:43.079><c> some</c>

00:00:43.220 --> 00:00:43.230 align:start position:0%
obviously when we jump into some
 

00:00:43.230 --> 00:00:44.990 align:start position:0%
obviously when we jump into some
examples<00:00:43.739><c> if</c><00:00:43.920><c> that</c><00:00:44.070><c> didn't</c><00:00:44.399><c> make</c><00:00:44.489><c> sense</c>

00:00:44.990 --> 00:00:45.000 align:start position:0%
examples if that didn't make sense
 

00:00:45.000 --> 00:00:47.060 align:start position:0%
examples if that didn't make sense
hopefully<00:00:45.600><c> they'll</c><00:00:45.750><c> clear</c><00:00:46.050><c> it</c><00:00:46.170><c> up</c><00:00:46.289><c> okay</c><00:00:47.010><c> so</c>

00:00:47.060 --> 00:00:47.070 align:start position:0%
hopefully they'll clear it up okay so
 

00:00:47.070 --> 00:00:49.100 align:start position:0%
hopefully they'll clear it up okay so
first<00:00:47.430><c> of</c><00:00:47.579><c> all</c><00:00:47.700><c> a</c><00:00:47.910><c> lambda</c><00:00:48.149><c> right</c><00:00:48.660><c> what</c><00:00:48.960><c> is</c><00:00:49.079><c> it</c>

00:00:49.100 --> 00:00:49.110 align:start position:0%
first of all a lambda right what is it
 

00:00:49.110 --> 00:00:51.830 align:start position:0%
first of all a lambda right what is it
used<00:00:49.379><c> for</c><00:00:49.670><c> it's</c><00:00:50.670><c> one</c><00:00:51.090><c> thing</c><00:00:51.270><c> to</c><00:00:51.420><c> understand</c>

00:00:51.830 --> 00:00:51.840 align:start position:0%
used for it's one thing to understand
 

00:00:51.840 --> 00:00:53.270 align:start position:0%
used for it's one thing to understand
what<00:00:52.110><c> it</c><00:00:52.230><c> is</c><00:00:52.379><c> but</c><00:00:52.620><c> it's</c><00:00:52.770><c> obviously</c><00:00:53.160><c> a</c>

00:00:53.270 --> 00:00:53.280 align:start position:0%
what it is but it's obviously a
 

00:00:53.280 --> 00:00:54.680 align:start position:0%
what it is but it's obviously a
completely<00:00:53.760><c> different</c><00:00:53.879><c> thing</c><00:00:54.210><c> to</c><00:00:54.239><c> understand</c>

00:00:54.680 --> 00:00:54.690 align:start position:0%
completely different thing to understand
 

00:00:54.690 --> 00:00:57.020 align:start position:0%
completely different thing to understand
how<00:00:54.840><c> to</c><00:00:54.899><c> use</c><00:00:55.110><c> it</c><00:00:55.230><c> and</c><00:00:55.320><c> when</c><00:00:55.500><c> to</c><00:00:55.649><c> use</c><00:00:55.680><c> it</c><00:00:55.860><c> and</c><00:00:56.129><c> the</c>

00:00:57.020 --> 00:00:57.030 align:start position:0%
how to use it and when to use it and the
 

00:00:57.030 --> 00:00:58.520 align:start position:0%
how to use it and when to use it and the
answer<00:00:57.300><c> to</c><00:00:57.390><c> that</c><00:00:57.420><c> is</c><00:00:57.690><c> essentially</c><00:00:58.109><c> whenever</c>

00:00:58.520 --> 00:00:58.530 align:start position:0%
answer to that is essentially whenever
 

00:00:58.530 --> 00:01:01.639 align:start position:0%
answer to that is essentially whenever
you<00:00:58.829><c> have</c><00:00:59.190><c> a</c><00:00:59.520><c> function</c><00:01:00.120><c> pointer</c><00:01:00.600><c> you</c><00:01:01.320><c> can</c><00:01:01.350><c> use</c>

00:01:01.639 --> 00:01:01.649 align:start position:0%
you have a function pointer you can use
 

00:01:01.649 --> 00:01:04.609 align:start position:0%
you have a function pointer you can use
a<00:01:01.680><c> lambda</c><00:01:02.160><c> in</c><00:01:02.460><c> C++</c><00:01:03.059><c> that</c><00:01:03.329><c> is</c><00:01:03.780><c> how</c><00:01:04.379><c> that</c><00:01:04.439><c> works</c>

00:01:04.609 --> 00:01:04.619 align:start position:0%
a lambda in C++ that is how that works
 

00:01:04.619 --> 00:01:07.910 align:start position:0%
a lambda in C++ that is how that works
right<00:01:05.400><c> so</c><00:01:06.119><c> a</c><00:01:06.450><c> lambda</c><00:01:06.750><c> is</c><00:01:07.080><c> just</c><00:01:07.200><c> a</c><00:01:07.500><c> way</c><00:01:07.619><c> for</c><00:01:07.890><c> us</c>

00:01:07.910 --> 00:01:07.920 align:start position:0%
right so a lambda is just a way for us
 

00:01:07.920 --> 00:01:10.520 align:start position:0%
right so a lambda is just a way for us
to<00:01:08.340><c> literally</c><00:01:08.729><c> define</c><00:01:09.479><c> a</c><00:01:09.510><c> function</c><00:01:09.750><c> without</c>

00:01:10.520 --> 00:01:10.530 align:start position:0%
to literally define a function without
 

00:01:10.530 --> 00:01:12.560 align:start position:0%
to literally define a function without
having<00:01:10.950><c> to</c><00:01:11.070><c> define</c><00:01:11.310><c> a</c><00:01:11.340><c> function</c><00:01:11.520><c> so</c><00:01:12.210><c> the</c><00:01:12.360><c> usage</c>

00:01:12.560 --> 00:01:12.570 align:start position:0%
having to define a function so the usage
 

00:01:12.570 --> 00:01:15.050 align:start position:0%
having to define a function so the usage
of<00:01:12.840><c> al</c><00:01:12.960><c> and</c><00:01:13.140><c> are</c><00:01:13.350><c> therefore</c><00:01:13.530><c> is</c><00:01:13.950><c> wherever</c><00:01:14.790><c> we</c>

00:01:15.050 --> 00:01:15.060 align:start position:0%
of al and are therefore is wherever we
 

00:01:15.060 --> 00:01:18.050 align:start position:0%
of al and are therefore is wherever we
would<00:01:15.240><c> normally</c><00:01:15.710><c> set</c><00:01:16.710><c> a</c><00:01:16.890><c> function</c><00:01:17.400><c> pointer</c><00:01:17.759><c> to</c>

00:01:18.050 --> 00:01:18.060 align:start position:0%
would normally set a function pointer to
 

00:01:18.060 --> 00:01:20.570 align:start position:0%
would normally set a function pointer to
a<00:01:18.090><c> function</c><00:01:18.259><c> we</c><00:01:19.259><c> can</c><00:01:19.470><c> set</c><00:01:19.979><c> it</c><00:01:20.009><c> to</c><00:01:20.130><c> a</c><00:01:20.280><c> lambda</c>

00:01:20.570 --> 00:01:20.580 align:start position:0%
a function we can set it to a lambda
 

00:01:20.580 --> 00:01:24.770 align:start position:0%
a function we can set it to a lambda
instead<00:01:21.479><c> right</c><00:01:22.200><c> so</c><00:01:23.210><c> really</c><00:01:24.210><c> to</c><00:01:24.330><c> talk</c><00:01:24.479><c> about</c>

00:01:24.770 --> 00:01:24.780 align:start position:0%
instead right so really to talk about
 

00:01:24.780 --> 00:01:27.289 align:start position:0%
instead right so really to talk about
why<00:01:25.200><c> lambdas</c><00:01:25.710><c> are</c><00:01:25.830><c> useful</c><00:01:26.189><c> and</c><00:01:26.400><c> where</c><00:01:26.820><c> you</c><00:01:27.090><c> can</c>

00:01:27.289 --> 00:01:27.299 align:start position:0%
why lambdas are useful and where you can
 

00:01:27.299 --> 00:01:30.020 align:start position:0%
why lambdas are useful and where you can
use<00:01:27.509><c> them</c><00:01:27.750><c> you</c><00:01:27.930><c> need</c><00:01:28.799><c> to</c><00:01:28.950><c> understand</c><00:01:29.430><c> where</c>

00:01:30.020 --> 00:01:30.030 align:start position:0%
use them you need to understand where
 

00:01:30.030 --> 00:01:31.910 align:start position:0%
use them you need to understand where
you<00:01:30.180><c> would</c><00:01:30.329><c> use</c><00:01:30.450><c> a</c><00:01:30.479><c> function</c><00:01:30.900><c> pointer</c><00:01:31.049><c> and</c><00:01:31.470><c> we</c>

00:01:31.910 --> 00:01:31.920 align:start position:0%
you would use a function pointer and we
 

00:01:31.920 --> 00:01:33.260 align:start position:0%
you would use a function pointer and we
definitely<00:01:32.100><c> did</c><00:01:32.460><c> talk</c><00:01:32.670><c> about</c><00:01:32.909><c> that</c><00:01:33.060><c> in</c><00:01:33.180><c> the</c>

00:01:33.260 --> 00:01:33.270 align:start position:0%
definitely did talk about that in the
 

00:01:33.270 --> 00:01:34.670 align:start position:0%
definitely did talk about that in the
function<00:01:33.570><c> pointers</c><00:01:33.869><c> video</c><00:01:34.140><c> but</c><00:01:34.409><c> when</c><00:01:34.560><c> we</c>

00:01:34.670 --> 00:01:34.680 align:start position:0%
function pointers video but when we
 

00:01:34.680 --> 00:01:36.260 align:start position:0%
function pointers video but when we
actually<00:01:34.829><c> start</c><00:01:35.280><c> getting</c><00:01:35.460><c> into</c><00:01:35.820><c> concrete</c>

00:01:36.260 --> 00:01:36.270 align:start position:0%
actually start getting into concrete
 

00:01:36.270 --> 00:01:38.990 align:start position:0%
actually start getting into concrete
examples<00:01:36.930><c> in</c><00:01:37.079><c> C++</c><00:01:37.680><c> and</c><00:01:37.920><c> in</c><00:01:38.280><c> this</c><00:01:38.430><c> series</c><00:01:38.820><c> and</c>

00:01:38.990 --> 00:01:39.000 align:start position:0%
examples in C++ and in this series and
 

00:01:39.000 --> 00:01:40.789 align:start position:0%
examples in C++ and in this series and
especially<00:01:39.509><c> the</c><00:01:39.900><c> game</c><00:01:40.049><c> engine</c><00:01:40.380><c> series</c><00:01:40.560><c> where</c>

00:01:40.789 --> 00:01:40.799 align:start position:0%
especially the game engine series where
 

00:01:40.799 --> 00:01:43.249 align:start position:0%
especially the game engine series where
we<00:01:40.890><c> actually</c><00:01:41.220><c> build</c><00:01:41.579><c> something</c><00:01:42.180><c> that's</c><00:01:42.899><c> when</c>

00:01:43.249 --> 00:01:43.259 align:start position:0%
we actually build something that's when
 

00:01:43.259 --> 00:01:45.499 align:start position:0%
we actually build something that's when
you'll<00:01:43.409><c> really</c><00:01:43.680><c> see</c><00:01:44.070><c> me</c><00:01:44.490><c> use</c><00:01:44.759><c> everything</c><00:01:45.240><c> that</c>

00:01:45.499 --> 00:01:45.509 align:start position:0%
you'll really see me use everything that
 

00:01:45.509 --> 00:01:46.940 align:start position:0%
you'll really see me use everything that
I<00:01:45.570><c> described</c><00:01:45.869><c> in</c><00:01:46.020><c> this</c><00:01:46.140><c> series</c><00:01:46.500><c> so</c><00:01:46.649><c> just</c><00:01:46.829><c> keep</c>

00:01:46.940 --> 00:01:46.950 align:start position:0%
I described in this series so just keep
 

00:01:46.950 --> 00:01:48.560 align:start position:0%
I described in this series so just keep
that<00:01:47.070><c> in</c><00:01:47.130><c> mind</c><00:01:47.399><c> this</c><00:01:47.520><c> is</c><00:01:47.700><c> more</c><00:01:47.970><c> to</c><00:01:48.119><c> be</c><00:01:48.210><c> treated</c>

00:01:48.560 --> 00:01:48.570 align:start position:0%
that in mind this is more to be treated
 

00:01:48.570 --> 00:01:50.600 align:start position:0%
that in mind this is more to be treated
as<00:01:48.689><c> like</c><00:01:48.810><c> a</c><00:01:48.840><c> reference</c><00:01:49.380><c> and</c><00:01:49.649><c> like</c><00:01:50.159><c> oh</c><00:01:50.189><c> I</c><00:01:50.460><c> don't</c>

00:01:50.600 --> 00:01:50.610 align:start position:0%
as like a reference and like oh I don't
 

00:01:50.610 --> 00:01:52.550 align:start position:0%
as like a reference and like oh I don't
know<00:01:50.759><c> what</c><00:01:50.939><c> this</c><00:01:51.060><c> is</c><00:01:51.240><c> at</c><00:01:51.390><c> all</c><00:01:51.509><c> or</c><00:01:51.780><c> I</c><00:01:51.840><c> don't</c><00:01:52.470><c> know</c>

00:01:52.550 --> 00:01:52.560 align:start position:0%
know what this is at all or I don't know
 

00:01:52.560 --> 00:01:55.069 align:start position:0%
know what this is at all or I don't know
the<00:01:53.009><c> syntax</c><00:01:53.430><c> for</c><00:01:53.520><c> this</c><00:01:53.790><c> actual</c><00:01:54.420><c> thing</c><00:01:54.780><c> or</c><00:01:54.960><c> how</c>

00:01:55.069 --> 00:01:55.079 align:start position:0%
the syntax for this actual thing or how
 

00:01:55.079 --> 00:01:56.959 align:start position:0%
the syntax for this actual thing or how
it<00:01:55.200><c> works</c><00:01:55.470><c> right</c><00:01:55.590><c> so</c><00:01:56.369><c> let's</c><00:01:56.549><c> jump</c><00:01:56.729><c> in</c><00:01:56.939><c> and</c>

00:01:56.959 --> 00:01:56.969 align:start position:0%
it works right so let's jump in and
 

00:01:56.969 --> 00:01:58.160 align:start position:0%
it works right so let's jump in and
we're<00:01:57.299><c> going</c><00:01:57.420><c> to</c><00:01:57.479><c> build</c><00:01:57.630><c> off</c><00:01:57.780><c> of</c><00:01:57.810><c> what</c><00:01:58.049><c> we</c>

00:01:58.160 --> 00:01:58.170 align:start position:0%
we're going to build off of what we
 

00:01:58.170 --> 00:02:00.050 align:start position:0%
we're going to build off of what we
covered<00:01:58.590><c> in</c><00:01:58.740><c> the</c><00:01:58.890><c> function</c><00:01:59.340><c> pointers</c><00:01:59.729><c> video</c>

00:02:00.050 --> 00:02:00.060 align:start position:0%
covered in the function pointers video
 

00:02:00.060 --> 00:02:02.600 align:start position:0%
covered in the function pointers video
to<00:02:00.780><c> actually</c><00:02:00.990><c> demonstrate</c><00:02:01.619><c> the</c><00:02:02.189><c> usage</c><00:02:02.340><c> of</c><00:02:02.549><c> a</c>

00:02:02.600 --> 00:02:02.610 align:start position:0%
to actually demonstrate the usage of a
 

00:02:02.610 --> 00:02:04.010 align:start position:0%
to actually demonstrate the usage of a
lambda<00:02:02.820><c> and</c><00:02:03.119><c> the</c><00:02:03.240><c> different</c><00:02:03.630><c> things</c><00:02:03.810><c> that</c><00:02:03.869><c> we</c>

00:02:04.010 --> 00:02:04.020 align:start position:0%
lambda and the different things that we
 

00:02:04.020 --> 00:02:05.420 align:start position:0%
lambda and the different things that we
can<00:02:04.110><c> do</c><00:02:04.259><c> with</c><00:02:04.409><c> it</c><00:02:04.500><c> okay</c><00:02:04.860><c> so</c><00:02:04.890><c> this</c><00:02:05.100><c> is</c><00:02:05.219><c> the</c><00:02:05.310><c> code</c>

00:02:05.420 --> 00:02:05.430 align:start position:0%
can do with it okay so this is the code
 

00:02:05.430 --> 00:02:07.340 align:start position:0%
can do with it okay so this is the code
that<00:02:05.460><c> we</c><00:02:05.579><c> had</c><00:02:05.850><c> from</c><00:02:06.119><c> the</c><00:02:06.180><c> last</c><00:02:06.420><c> video</c><00:02:06.659><c> we</c>

00:02:07.340 --> 00:02:07.350 align:start position:0%
that we had from the last video we
 

00:02:07.350 --> 00:02:08.869 align:start position:0%
that we had from the last video we
basically<00:02:07.680><c> just</c><00:02:07.979><c> built</c><00:02:08.190><c> a</c><00:02:08.280><c> little</c><00:02:08.310><c> for</c><00:02:08.700><c> each</c>

00:02:08.869 --> 00:02:08.879 align:start position:0%
basically just built a little for each
 

00:02:08.879 --> 00:02:10.910 align:start position:0%
basically just built a little for each
function<00:02:09.149><c> which</c><00:02:09.869><c> took</c><00:02:10.080><c> in</c><00:02:10.289><c> a</c><00:02:10.379><c> function</c>

00:02:10.910 --> 00:02:10.920 align:start position:0%
function which took in a function
 

00:02:10.920 --> 00:02:12.860 align:start position:0%
function which took in a function
pointer<00:02:11.129><c> and</c><00:02:11.550><c> in</c><00:02:11.640><c> fact</c><00:02:11.819><c> last</c><00:02:12.120><c> video</c><00:02:12.480><c> I</c><00:02:12.540><c> even</c>

00:02:12.860 --> 00:02:12.870 align:start position:0%
pointer and in fact last video I even
 

00:02:12.870 --> 00:02:13.280 align:start position:0%
pointer and in fact last video I even
said

00:02:13.280 --> 00:02:13.290 align:start position:0%
said
 

00:02:13.290 --> 00:02:15.259 align:start position:0%
said
that<00:02:13.680><c> we</c><00:02:13.829><c> did</c><00:02:14.040><c> user</c><00:02:14.250><c> lambda</c><00:02:14.700><c> this</c><00:02:14.819><c> is</c><00:02:14.879><c> a</c><00:02:15.000><c> lambda</c>

00:02:15.259 --> 00:02:15.269 align:start position:0%
that we did user lambda this is a lambda
 

00:02:15.269 --> 00:02:18.020 align:start position:0%
that we did user lambda this is a lambda
right<00:02:15.840><c> over</c><00:02:16.110><c> here</c><00:02:16.379><c> we</c><00:02:16.950><c> did</c><00:02:17.189><c> essentially</c>

00:02:18.020 --> 00:02:18.030 align:start position:0%
right over here we did essentially
 

00:02:18.030 --> 00:02:20.209 align:start position:0%
right over here we did essentially
define<00:02:18.390><c> our</c><00:02:18.569><c> own</c><00:02:18.599><c> function</c><00:02:19.290><c> in</c><00:02:19.530><c> line</c><00:02:19.859><c> with</c><00:02:20.129><c> the</c>

00:02:20.209 --> 00:02:20.219 align:start position:0%
define our own function in line with the
 

00:02:20.219 --> 00:02:22.339 align:start position:0%
define our own function in line with the
rest<00:02:20.400><c> of</c><00:02:20.609><c> our</c><00:02:20.700><c> code</c><00:02:20.969><c> that</c><00:02:21.599><c> just</c><00:02:21.719><c> printed</c><00:02:22.260><c> out</c>

00:02:22.339 --> 00:02:22.349 align:start position:0%
rest of our code that just printed out
 

00:02:22.349 --> 00:02:24.649 align:start position:0%
rest of our code that just printed out
whatever<00:02:22.680><c> value</c><00:02:23.280><c> we</c><00:02:23.609><c> needed</c><00:02:24.000><c> and</c><00:02:24.150><c> this</c>

00:02:24.649 --> 00:02:24.659 align:start position:0%
whatever value we needed and this
 

00:02:24.659 --> 00:02:26.839 align:start position:0%
whatever value we needed and this
function<00:02:25.230><c> pointer</c><00:02:25.650><c> essentially</c><00:02:26.310><c> defined</c>

00:02:26.839 --> 00:02:26.849 align:start position:0%
function pointer essentially defined
 

00:02:26.849 --> 00:02:29.720 align:start position:0%
function pointer essentially defined
what<00:02:27.629><c> the</c><00:02:27.989><c> lambda</c><00:02:28.469><c> actually</c><00:02:28.920><c> needed</c><00:02:29.219><c> to</c><00:02:29.250><c> be</c><00:02:29.340><c> so</c>

00:02:29.720 --> 00:02:29.730 align:start position:0%
what the lambda actually needed to be so
 

00:02:29.730 --> 00:02:31.099 align:start position:0%
what the lambda actually needed to be so
in<00:02:29.819><c> other</c><00:02:29.909><c> words</c><00:02:30.150><c> we</c><00:02:30.420><c> know</c><00:02:30.540><c> that</c><00:02:30.720><c> it</c><00:02:30.810><c> returns</c>

00:02:31.099 --> 00:02:31.109 align:start position:0%
in other words we know that it returns
 

00:02:31.109 --> 00:02:32.990 align:start position:0%
in other words we know that it returns
void<00:02:31.439><c> and</c><00:02:31.739><c> we</c><00:02:32.129><c> know</c><00:02:32.280><c> that</c><00:02:32.430><c> it</c><00:02:32.519><c> takes</c><00:02:32.700><c> one</c>

00:02:32.990 --> 00:02:33.000 align:start position:0%
void and we know that it takes one
 

00:02:33.000 --> 00:02:34.640 align:start position:0%
void and we know that it takes one
parameter<00:02:33.239><c> which</c><00:02:33.569><c> is</c><00:02:33.720><c> an</c><00:02:33.930><c> integer</c><00:02:34.230><c> and</c><00:02:34.379><c> that's</c>

00:02:34.640 --> 00:02:34.650 align:start position:0%
parameter which is an integer and that's
 

00:02:34.650 --> 00:02:36.410 align:start position:0%
parameter which is an integer and that's
why<00:02:34.799><c> you</c><00:02:34.859><c> see</c><00:02:35.159><c> this</c><00:02:35.370><c> function</c><00:02:35.640><c> as</c><00:02:36.030><c> you</c><00:02:36.150><c> can</c><00:02:36.299><c> see</c>

00:02:36.410 --> 00:02:36.420 align:start position:0%
why you see this function as you can see
 

00:02:36.420 --> 00:02:37.970 align:start position:0%
why you see this function as you can see
returns<00:02:36.750><c> nothing</c><00:02:36.959><c> it</c><00:02:37.260><c> just</c><00:02:37.409><c> prints</c><00:02:37.709><c> out</c><00:02:37.799><c> a</c>

00:02:37.970 --> 00:02:37.980 align:start position:0%
returns nothing it just prints out a
 

00:02:37.980 --> 00:02:40.250 align:start position:0%
returns nothing it just prints out a
line<00:02:38.250><c> of</c><00:02:38.400><c> text</c><00:02:39.030><c> and</c><00:02:39.180><c> then</c><00:02:39.689><c> we</c><00:02:39.750><c> have</c><00:02:40.049><c> this</c>

00:02:40.250 --> 00:02:40.260 align:start position:0%
line of text and then we have this
 

00:02:40.260 --> 00:02:42.440 align:start position:0%
line of text and then we have this
integer<00:02:40.769><c> value</c><00:02:41.220><c> parameter</c><00:02:41.400><c> which</c><00:02:41.909><c> is</c><00:02:41.939><c> defined</c>

00:02:42.440 --> 00:02:42.450 align:start position:0%
integer value parameter which is defined
 

00:02:42.450 --> 00:02:44.030 align:start position:0%
integer value parameter which is defined
because<00:02:42.629><c> we've</c><00:02:42.930><c> said</c><00:02:43.409><c> that</c><00:02:43.500><c> we</c><00:02:43.560><c> need</c><00:02:43.799><c> to</c><00:02:43.829><c> take</c>

00:02:44.030 --> 00:02:44.040 align:start position:0%
because we've said that we need to take
 

00:02:44.040 --> 00:02:45.890 align:start position:0%
because we've said that we need to take
in<00:02:44.189><c> an</c><00:02:44.280><c> integer</c><00:02:44.519><c> and</c><00:02:44.760><c> in</c><00:02:44.849><c> this</c><00:02:44.969><c> case</c><00:02:45.239><c> the</c>

00:02:45.890 --> 00:02:45.900 align:start position:0%
in an integer and in this case the
 

00:02:45.900 --> 00:02:47.800 align:start position:0%
in an integer and in this case the
integer<00:02:46.349><c> that</c><00:02:46.379><c> we</c><00:02:46.560><c> pass</c><00:02:46.799><c> into</c><00:02:47.069><c> this</c><00:02:47.340><c> function</c>

00:02:47.800 --> 00:02:47.810 align:start position:0%
integer that we pass into this function
 

00:02:47.810 --> 00:02:50.000 align:start position:0%
integer that we pass into this function
ends<00:02:48.810><c> up</c><00:02:48.900><c> being</c><00:02:49.079><c> the</c><00:02:49.230><c> value</c><00:02:49.650><c> that</c><00:02:49.859><c> work</c>

00:02:50.000 --> 00:02:50.010 align:start position:0%
ends up being the value that work
 

00:02:50.010 --> 00:02:52.879 align:start position:0%
ends up being the value that work
currently<00:02:50.370><c> iterating</c><00:02:51.209><c> over</c><00:02:51.329><c> right</c><00:02:52.230><c> so</c><00:02:52.829><c> you</c>

00:02:52.879 --> 00:02:52.889 align:start position:0%
currently iterating over right so you
 

00:02:52.889 --> 00:02:54.920 align:start position:0%
currently iterating over right so you
can<00:02:53.099><c> see</c><00:02:53.250><c> that</c><00:02:53.400><c> literally</c><00:02:53.849><c> this</c><00:02:54.030><c> func</c><00:02:54.450><c> value</c>

00:02:54.920 --> 00:02:54.930 align:start position:0%
can see that literally this func value
 

00:02:54.930 --> 00:02:57.199 align:start position:0%
can see that literally this func value
is<00:02:55.169><c> actually</c><00:02:55.379><c> calling</c><00:02:55.919><c> this</c><00:02:56.549><c> code</c><00:02:56.879><c> that</c><00:02:56.909><c> we've</c>

00:02:57.199 --> 00:02:57.209 align:start position:0%
is actually calling this code that we've
 

00:02:57.209 --> 00:02:59.089 align:start position:0%
is actually calling this code that we've
defined<00:02:57.569><c> here</c><00:02:57.900><c> in</c><00:02:58.079><c> our</c><00:02:58.200><c> main</c><00:02:58.470><c> function</c><00:02:58.769><c> and</c>

00:02:59.089 --> 00:02:59.099 align:start position:0%
defined here in our main function and
 

00:02:59.099 --> 00:03:01.309 align:start position:0%
defined here in our main function and
that<00:02:59.579><c> really</c><00:02:59.819><c> is</c><00:03:00.090><c> the</c><00:03:00.120><c> usage</c><00:03:00.750><c> of</c><00:03:00.959><c> a</c><00:03:01.139><c> lambda</c>

00:03:01.309 --> 00:03:01.319 align:start position:0%
that really is the usage of a lambda
 

00:03:01.319 --> 00:03:03.470 align:start position:0%
that really is the usage of a lambda
lets<00:03:01.650><c> us</c><00:03:01.769><c> do</c><00:03:01.889><c> cool</c><00:03:02.250><c> things</c><00:03:02.280><c> like</c><00:03:02.579><c> this</c><00:03:02.879><c> one</c><00:03:03.389><c> of</c>

00:03:03.470 --> 00:03:03.480 align:start position:0%
lets us do cool things like this one of
 

00:03:03.480 --> 00:03:05.569 align:start position:0%
lets us do cool things like this one of
the<00:03:03.569><c> biggest</c><00:03:03.900><c> examples</c><00:03:04.200><c> I</c><00:03:04.709><c> can</c><00:03:04.769><c> ever</c><00:03:05.040><c> give</c><00:03:05.340><c> is</c>

00:03:05.569 --> 00:03:05.579 align:start position:0%
the biggest examples I can ever give is
 

00:03:05.579 --> 00:03:08.780 align:start position:0%
the biggest examples I can ever give is
we<00:03:06.359><c> want</c><00:03:06.599><c> to</c><00:03:06.689><c> be</c><00:03:06.930><c> able</c><00:03:07.049><c> to</c><00:03:07.230><c> pass</c><00:03:07.650><c> in</c><00:03:08.069><c> a</c><00:03:08.159><c> function</c>

00:03:08.780 --> 00:03:08.790 align:start position:0%
we want to be able to pass in a function
 

00:03:08.790 --> 00:03:11.360 align:start position:0%
we want to be able to pass in a function
to<00:03:09.090><c> an</c><00:03:09.239><c> API</c><00:03:09.659><c> so</c><00:03:10.139><c> that</c><00:03:10.620><c> at</c><00:03:10.739><c> some</c><00:03:10.769><c> point</c><00:03:11.189><c> in</c><00:03:11.280><c> the</c>

00:03:11.360 --> 00:03:11.370 align:start position:0%
to an API so that at some point in the
 

00:03:11.370 --> 00:03:14.030 align:start position:0%
to an API so that at some point in the
future<00:03:11.480><c> it</c><00:03:12.480><c> can</c><00:03:12.750><c> call</c><00:03:12.989><c> that</c><00:03:13.200><c> function</c><00:03:13.470><c> for</c><00:03:13.889><c> us</c>

00:03:14.030 --> 00:03:14.040 align:start position:0%
future it can call that function for us
 

00:03:14.040 --> 00:03:17.780 align:start position:0%
future it can call that function for us
because<00:03:14.519><c> we</c><00:03:14.909><c> don't</c><00:03:15.120><c> know</c><00:03:15.560><c> we</c><00:03:16.560><c> can't</c><00:03:17.340><c> call</c><00:03:17.639><c> the</c>

00:03:17.780 --> 00:03:17.790 align:start position:0%
because we don't know we can't call the
 

00:03:17.790 --> 00:03:19.490 align:start position:0%
because we don't know we can't call the
function<00:03:18.209><c> now</c><00:03:18.449><c> because</c><00:03:18.989><c> either</c><00:03:19.229><c> it</c><00:03:19.349><c> doesn't</c>

00:03:19.490 --> 00:03:19.500 align:start position:0%
function now because either it doesn't
 

00:03:19.500 --> 00:03:21.080 align:start position:0%
function now because either it doesn't
have<00:03:19.680><c> the</c><00:03:19.769><c> data</c><00:03:19.919><c> it</c><00:03:20.220><c> needs</c><00:03:20.250><c> or</c><00:03:20.609><c> we</c><00:03:20.729><c> just</c><00:03:20.909><c> don't</c>

00:03:21.080 --> 00:03:21.090 align:start position:0%
have the data it needs or we just don't
 

00:03:21.090 --> 00:03:22.969 align:start position:0%
have the data it needs or we just don't
want<00:03:21.269><c> to</c><00:03:21.359><c> we</c><00:03:21.510><c> want</c><00:03:21.690><c> to</c><00:03:21.720><c> kind</c><00:03:21.900><c> of</c><00:03:21.930><c> defer</c><00:03:22.379><c> the</c>

00:03:22.969 --> 00:03:22.979 align:start position:0%
want to we want to kind of defer the
 

00:03:22.979 --> 00:03:25.069 align:start position:0%
want to we want to kind of defer the
calling<00:03:23.400><c> of</c><00:03:23.489><c> a</c><00:03:23.579><c> function</c><00:03:23.609><c> and</c><00:03:24.239><c> if</c><00:03:24.690><c> we</c><00:03:24.840><c> want</c><00:03:25.019><c> to</c>

00:03:25.069 --> 00:03:25.079 align:start position:0%
calling of a function and if we want to
 

00:03:25.079 --> 00:03:26.599 align:start position:0%
calling of a function and if we want to
do<00:03:25.229><c> something</c><00:03:25.590><c> like</c><00:03:25.680><c> that</c><00:03:25.889><c> then</c><00:03:26.099><c> of</c><00:03:26.190><c> course</c><00:03:26.400><c> we</c>

00:03:26.599 --> 00:03:26.609 align:start position:0%
do something like that then of course we
 

00:03:26.609 --> 00:03:28.550 align:start position:0%
do something like that then of course we
need<00:03:26.699><c> to</c><00:03:26.760><c> tell</c><00:03:27.030><c> it</c><00:03:27.060><c> what</c><00:03:27.750><c> function</c><00:03:28.229><c> to</c><00:03:28.349><c> call</c>

00:03:28.550 --> 00:03:28.560 align:start position:0%
need to tell it what function to call
 

00:03:28.560 --> 00:03:30.229 align:start position:0%
need to tell it what function to call
when<00:03:28.919><c> it</c><00:03:29.010><c> gets</c><00:03:29.190><c> up</c><00:03:29.310><c> to</c><00:03:29.400><c> the</c><00:03:29.430><c> stage</c><00:03:29.669><c> if</c><00:03:29.849><c> I</c><00:03:30.030><c> now</c>

00:03:30.229 --> 00:03:30.239 align:start position:0%
when it gets up to the stage if I now
 

00:03:30.239 --> 00:03:32.420 align:start position:0%
when it gets up to the stage if I now
want<00:03:30.510><c> to</c><00:03:30.599><c> call</c><00:03:30.750><c> a</c><00:03:30.780><c> function</c><00:03:30.989><c> and</c><00:03:31.440><c> lambdas</c><00:03:32.310><c> are</c>

00:03:32.420 --> 00:03:32.430 align:start position:0%
want to call a function and lambdas are
 

00:03:32.430 --> 00:03:33.530 align:start position:0%
want to call a function and lambdas are
just<00:03:32.579><c> a</c><00:03:32.639><c> really</c><00:03:32.849><c> good</c><00:03:32.970><c> way</c><00:03:33.120><c> of</c><00:03:33.150><c> specifying</c>

00:03:33.530 --> 00:03:33.540 align:start position:0%
just a really good way of specifying
 

00:03:33.540 --> 00:03:35.839 align:start position:0%
just a really good way of specifying
that<00:03:34.169><c> function</c><00:03:34.889><c> specifying</c><00:03:35.310><c> code</c><00:03:35.579><c> that</c><00:03:35.729><c> you</c>

00:03:35.839 --> 00:03:35.849 align:start position:0%
that function specifying code that you
 

00:03:35.849 --> 00:03:38.599 align:start position:0%
that function specifying code that you
want<00:03:36.150><c> to</c><00:03:36.359><c> run</c><00:03:36.569><c> sometime</c><00:03:37.409><c> in</c><00:03:37.560><c> the</c><00:03:37.680><c> future</c><00:03:38.069><c> like</c>

00:03:38.599 --> 00:03:38.609 align:start position:0%
want to run sometime in the future like
 

00:03:38.609 --> 00:03:40.280 align:start position:0%
want to run sometime in the future like
we<00:03:38.760><c> have</c><00:03:38.940><c> here</c><00:03:39.239><c> with</c><00:03:39.449><c> is</c><00:03:39.569><c> for</c><00:03:39.810><c> H</c><00:03:39.959><c> where</c><00:03:40.199><c> we</c>

00:03:40.280 --> 00:03:40.290 align:start position:0%
we have here with is for H where we
 

00:03:40.290 --> 00:03:42.469 align:start position:0%
we have here with is for H where we
actually<00:03:40.680><c> run</c><00:03:40.949><c> that</c><00:03:41.190><c> code</c><00:03:41.519><c> when</c><00:03:42.209><c> we're</c>

00:03:42.469 --> 00:03:42.479 align:start position:0%
actually run that code when we're
 

00:03:42.479 --> 00:03:44.119 align:start position:0%
actually run that code when we're
iterating<00:03:42.659><c> over</c><00:03:43.019><c> the</c><00:03:43.169><c> element</c><00:03:43.590><c> and</c><00:03:43.739><c> when</c><00:03:44.010><c> it</c>

00:03:44.119 --> 00:03:44.129 align:start position:0%
iterating over the element and when it
 

00:03:44.129 --> 00:03:46.280 align:start position:0%
iterating over the element and when it
becomes<00:03:44.400><c> time</c><00:03:44.699><c> for</c><00:03:44.940><c> us</c><00:03:45.060><c> to</c><00:03:45.269><c> call</c><00:03:45.479><c> it</c><00:03:45.690><c> with</c><00:03:46.169><c> the</c>

00:03:46.280 --> 00:03:46.290 align:start position:0%
becomes time for us to call it with the
 

00:03:46.290 --> 00:03:48.319 align:start position:0%
becomes time for us to call it with the
specific<00:03:46.739><c> parameter</c><00:03:47.220><c> as</c><00:03:47.669><c> we're</c><00:03:47.909><c> doing</c><00:03:48.090><c> here</c>

00:03:48.319 --> 00:03:48.329 align:start position:0%
specific parameter as we're doing here
 

00:03:48.329 --> 00:03:50.149 align:start position:0%
specific parameter as we're doing here
so<00:03:48.629><c> let's</c><00:03:48.870><c> dissect</c><00:03:49.079><c> the</c><00:03:49.440><c> syntax</c><00:03:49.919><c> of</c><00:03:50.040><c> this</c>

00:03:50.149 --> 00:03:50.159 align:start position:0%
so let's dissect the syntax of this
 

00:03:50.159 --> 00:03:51.920 align:start position:0%
so let's dissect the syntax of this
Lambert<00:03:50.579><c> a</c><00:03:50.609><c> little</c><00:03:50.819><c> bit</c><00:03:50.970><c> I'm</c><00:03:51.419><c> actually</c><00:03:51.629><c> going</c>

00:03:51.920 --> 00:03:51.930 align:start position:0%
Lambert a little bit I'm actually going
 

00:03:51.930 --> 00:03:53.659 align:start position:0%
Lambert a little bit I'm actually going
to<00:03:52.049><c> kind</c><00:03:52.440><c> of</c><00:03:52.500><c> get</c><00:03:52.769><c> rid</c><00:03:52.799><c> of</c><00:03:52.979><c> this</c><00:03:53.159><c> and</c><00:03:53.370><c> assign</c><00:03:53.639><c> it</c>

00:03:53.659 --> 00:03:53.669 align:start position:0%
to kind of get rid of this and assign it
 

00:03:53.669 --> 00:03:55.939 align:start position:0%
to kind of get rid of this and assign it
to<00:03:53.790><c> an</c><00:03:54.000><c> order</c><00:03:54.389><c> variable</c><00:03:55.169><c> so</c><00:03:55.319><c> order</c><00:03:55.650><c> lambda</c>

00:03:55.939 --> 00:03:55.949 align:start position:0%
to an order variable so order lambda
 

00:03:55.949 --> 00:03:58.520 align:start position:0%
to an order variable so order lambda
we'll<00:03:56.250><c> say</c><00:03:56.459><c> equals</c><00:03:57.299><c> our</c><00:03:57.569><c> lambda</c><00:03:57.870><c> and</c><00:03:58.229><c> then</c>

00:03:58.520 --> 00:03:58.530 align:start position:0%
we'll say equals our lambda and then
 

00:03:58.530 --> 00:04:01.640 align:start position:0%
we'll say equals our lambda and then
we'll<00:03:58.739><c> pass</c><00:03:59.159><c> in</c><00:03:59.370><c> the</c><00:03:59.489><c> lambda</c><00:03:59.849><c> into</c><00:04:00.720><c> here</c><00:04:00.989><c> all</c>

00:04:01.640 --> 00:04:01.650 align:start position:0%
we'll pass in the lambda into here all
 

00:04:01.650 --> 00:04:03.890 align:start position:0%
we'll pass in the lambda into here all
right<00:04:01.889><c> cool</c><00:04:02.159><c> so</c><00:04:02.489><c> first</c><00:04:03.030><c> of</c><00:04:03.180><c> all</c><00:04:03.329><c> we</c><00:04:03.569><c> start</c><00:04:03.810><c> off</c>

00:04:03.890 --> 00:04:03.900 align:start position:0%
right cool so first of all we start off
 

00:04:03.900 --> 00:04:05.659 align:start position:0%
right cool so first of all we start off
a<00:04:03.989><c> lambda</c><00:04:04.169><c> with</c><00:04:04.650><c> these</c><00:04:04.799><c> square</c><00:04:05.129><c> brackets</c><00:04:05.220><c> let</c>

00:04:05.659 --> 00:04:05.669 align:start position:0%
a lambda with these square brackets let
 

00:04:05.669 --> 00:04:07.159 align:start position:0%
a lambda with these square brackets let
me<00:04:05.729><c> make</c><00:04:05.909><c> some</c><00:04:06.060><c> room</c><00:04:06.090><c> we</c><00:04:06.689><c> start</c><00:04:06.959><c> up</c><00:04:07.049><c> this</c>

00:04:07.159 --> 00:04:07.169 align:start position:0%
me make some room we start up this
 

00:04:07.169 --> 00:04:08.839 align:start position:0%
me make some room we start up this
lambda<00:04:07.379><c> with</c><00:04:07.680><c> the</c><00:04:07.799><c> square</c><00:04:08.040><c> brackets</c><00:04:08.069><c> what</c><00:04:08.669><c> is</c>

00:04:08.839 --> 00:04:08.849 align:start position:0%
lambda with the square brackets what is
 

00:04:08.849 --> 00:04:10.879 align:start position:0%
lambda with the square brackets what is
that<00:04:09.150><c> now</c><00:04:09.540><c> I</c><00:04:09.569><c> will</c><00:04:09.870><c> point</c><00:04:10.109><c> out</c><00:04:10.259><c> first</c><00:04:10.620><c> of</c><00:04:10.739><c> all</c>

00:04:10.879 --> 00:04:10.889 align:start position:0%
that now I will point out first of all
 

00:04:10.889 --> 00:04:12.649 align:start position:0%
that now I will point out first of all
that<00:04:11.549><c> you</c><00:04:11.759><c> don't</c><00:04:11.849><c> really</c><00:04:12.060><c> have</c><00:04:12.150><c> to</c><00:04:12.359><c> take</c><00:04:12.449><c> my</c>

00:04:12.649 --> 00:04:12.659 align:start position:0%
that you don't really have to take my
 

00:04:12.659 --> 00:04:14.509 align:start position:0%
that you don't really have to take my
word<00:04:12.870><c> for</c><00:04:12.930><c> it</c><00:04:13.169><c> or</c><00:04:13.379><c> this</c><00:04:13.530><c> video</c><00:04:13.799><c> for</c><00:04:14.280><c> it</c><00:04:14.400><c> cuz</c>

00:04:14.509 --> 00:04:14.519 align:start position:0%
word for it or this video for it cuz
 

00:04:14.519 --> 00:04:16.279 align:start position:0%
word for it or this video for it cuz
sometimes<00:04:14.699><c> videos</c><00:04:15.180><c> are</c><00:04:15.269><c> a</c><00:04:15.329><c> bit</c><00:04:15.449><c> annoying</c><00:04:15.689><c> for</c>

00:04:16.279 --> 00:04:16.289 align:start position:0%
sometimes videos are a bit annoying for
 

00:04:16.289 --> 00:04:17.689 align:start position:0%
sometimes videos are a bit annoying for
things<00:04:16.470><c> like</c><00:04:16.650><c> this</c><00:04:16.859><c> you</c><00:04:17.130><c> can</c><00:04:17.250><c> actually</c><00:04:17.400><c> go</c>

00:04:17.689 --> 00:04:17.699 align:start position:0%
things like this you can actually go
 

00:04:17.699 --> 00:04:20.300 align:start position:0%
things like this you can actually go
over<00:04:17.729><c> to</c><00:04:18.030><c> cpp</c><00:04:18.539><c> reference</c><00:04:18.989><c> calm</c><00:04:19.470><c> as</c><00:04:19.799><c> I've</c><00:04:20.159><c> got</c>

00:04:20.300 --> 00:04:20.310 align:start position:0%
over to cpp reference calm as I've got
 

00:04:20.310 --> 00:04:22.480 align:start position:0%
over to cpp reference calm as I've got
open<00:04:20.430><c> over</c><00:04:20.699><c> here</c><00:04:20.940><c> and</c><00:04:21.120><c> there</c><00:04:21.599><c> is</c><00:04:21.719><c> an</c>

00:04:22.480 --> 00:04:22.490 align:start position:0%
open over here and there is an
 

00:04:22.490 --> 00:04:24.879 align:start position:0%
open over here and there is an
there's<00:04:23.090><c> a</c><00:04:23.150><c> page</c><00:04:23.449><c> on</c><00:04:23.720><c> lambda</c><00:04:24.020><c> expressions</c><00:04:24.650><c> you</c>

00:04:24.879 --> 00:04:24.889 align:start position:0%
there's a page on lambda expressions you
 

00:04:24.889 --> 00:04:27.309 align:start position:0%
there's a page on lambda expressions you
can<00:04:24.949><c> see</c><00:04:25.160><c> they</c><00:04:25.280><c> exist</c><00:04:25.610><c> in</c><00:04:25.759><c> C++</c><00:04:26.210><c> 11</c><00:04:26.330><c> and</c><00:04:26.810><c> they've</c>

00:04:27.309 --> 00:04:27.319 align:start position:0%
can see they exist in C++ 11 and they've
 

00:04:27.319 --> 00:04:28.659 align:start position:0%
can see they exist in C++ 11 and they've
actually<00:04:27.470><c> got</c><00:04:27.830><c> the</c><00:04:27.919><c> syntax</c><00:04:28.370><c> of</c><00:04:28.460><c> all</c><00:04:28.580><c> the</c>

00:04:28.659 --> 00:04:28.669 align:start position:0%
actually got the syntax of all the
 

00:04:28.669 --> 00:04:29.890 align:start position:0%
actually got the syntax of all the
things<00:04:28.819><c> you</c><00:04:28.940><c> can</c><00:04:29.090><c> do</c><00:04:29.240><c> and</c><00:04:29.389><c> you</c><00:04:29.419><c> can</c><00:04:29.599><c> see</c><00:04:29.720><c> that</c>

00:04:29.890 --> 00:04:29.900 align:start position:0%
things you can do and you can see that
 

00:04:29.900 --> 00:04:31.719 align:start position:0%
things you can do and you can see that
what<00:04:30.050><c> of</c><00:04:30.139><c> course</c><00:04:30.319><c> the</c><00:04:30.500><c> first</c><00:04:30.770><c> part</c><00:04:31.039><c> is</c><00:04:31.220><c> the</c>

00:04:31.719 --> 00:04:31.729 align:start position:0%
what of course the first part is the
 

00:04:31.729 --> 00:04:33.430 align:start position:0%
what of course the first part is the
captures<00:04:32.300><c> and</c><00:04:32.539><c> of</c><00:04:32.599><c> course</c><00:04:32.810><c> it</c><00:04:32.930><c> describes</c>

00:04:33.430 --> 00:04:33.440 align:start position:0%
captures and of course it describes
 

00:04:33.440 --> 00:04:35.140 align:start position:0%
captures and of course it describes
everything<00:04:34.310><c> over</c><00:04:34.520><c> here</c><00:04:34.550><c> if</c><00:04:34.819><c> you've</c><00:04:34.910><c> got</c><00:04:35.030><c> the</c>

00:04:35.140 --> 00:04:35.150 align:start position:0%
everything over here if you've got the
 

00:04:35.150 --> 00:04:37.180 align:start position:0%
everything over here if you've got the
explanation<00:04:35.780><c> you</c><00:04:35.990><c> can</c><00:04:36.380><c> see</c><00:04:36.590><c> the</c><00:04:36.710><c> captures</c><00:04:37.099><c> are</c>

00:04:37.180 --> 00:04:37.190 align:start position:0%
explanation you can see the captures are
 

00:04:37.190 --> 00:04:39.490 align:start position:0%
explanation you can see the captures are
a<00:04:37.250><c> comma</c><00:04:37.490><c> separated</c><00:04:37.729><c> list</c><00:04:38.060><c> of</c><00:04:38.509><c> zero</c><00:04:38.960><c> or</c><00:04:39.229><c> more</c>

00:04:39.490 --> 00:04:39.500 align:start position:0%
a comma separated list of zero or more
 

00:04:39.500 --> 00:04:42.040 align:start position:0%
a comma separated list of zero or more
captures<00:04:40.039><c> CPB</c><00:04:40.819><c> reference</c><00:04:41.270><c> comm</c><00:04:41.630><c> is</c><00:04:41.810><c> my</c>

00:04:42.040 --> 00:04:42.050 align:start position:0%
captures CPB reference comm is my
 

00:04:42.050 --> 00:04:43.600 align:start position:0%
captures CPB reference comm is my
favorite<00:04:42.470><c> superclass</c><00:04:42.889><c> reference</c><00:04:43.250><c> website</c>

00:04:43.600 --> 00:04:43.610 align:start position:0%
favorite superclass reference website
 

00:04:43.610 --> 00:04:45.850 align:start position:0%
favorite superclass reference website
there<00:04:44.300><c> are</c><00:04:44.449><c> many</c><00:04:44.660><c> others</c><00:04:45.020><c> and</c><00:04:45.229><c> you</c><00:04:45.380><c> can</c><00:04:45.530><c> use</c>

00:04:45.850 --> 00:04:45.860 align:start position:0%
there are many others and you can use
 

00:04:45.860 --> 00:04:47.350 align:start position:0%
there are many others and you can use
all<00:04:46.069><c> of</c><00:04:46.190><c> them</c><00:04:46.340><c> really</c><00:04:46.490><c> they're</c><00:04:46.759><c> all</c><00:04:46.880><c> useful</c>

00:04:47.350 --> 00:04:47.360 align:start position:0%
all of them really they're all useful
 

00:04:47.360 --> 00:04:49.469 align:start position:0%
all of them really they're all useful
but<00:04:47.930><c> this</c><00:04:48.080><c> one's</c><00:04:48.259><c> actually</c><00:04:48.440><c> quite</c><00:04:48.710><c> clear</c><00:04:49.009><c> and</c>

00:04:49.469 --> 00:04:49.479 align:start position:0%
but this one's actually quite clear and
 

00:04:49.479 --> 00:04:52.360 align:start position:0%
but this one's actually quite clear and
refer<00:04:50.479><c> to</c><00:04:50.509><c> this</c><00:04:50.720><c> often</c><00:04:51.380><c> right</c><00:04:52.009><c> I'll</c><00:04:52.190><c> leave</c><00:04:52.340><c> a</c>

00:04:52.360 --> 00:04:52.370 align:start position:0%
refer to this often right I'll leave a
 

00:04:52.370 --> 00:04:53.469 align:start position:0%
refer to this often right I'll leave a
link<00:04:52.550><c> to</c><00:04:52.610><c> the</c><00:04:52.789><c> lambda</c><00:04:52.940><c> page</c><00:04:53.240><c> in</c><00:04:53.419><c> the</c>

00:04:53.469 --> 00:04:53.479 align:start position:0%
link to the lambda page in the
 

00:04:53.479 --> 00:04:55.029 align:start position:0%
link to the lambda page in the
description<00:04:53.840><c> below</c><00:04:53.930><c> but</c><00:04:54.080><c> in</c><00:04:54.289><c> general</c><00:04:54.680><c> if</c>

00:04:55.029 --> 00:04:55.039 align:start position:0%
description below but in general if
 

00:04:55.039 --> 00:04:56.290 align:start position:0%
description below but in general if
you're<00:04:55.130><c> not</c><00:04:55.280><c> sure</c><00:04:55.520><c> about</c><00:04:55.729><c> something</c><00:04:55.849><c> like</c>

00:04:56.290 --> 00:04:56.300 align:start position:0%
you're not sure about something like
 

00:04:56.300 --> 00:04:58.149 align:start position:0%
you're not sure about something like
lambdas<00:04:56.750><c> or</c><00:04:56.900><c> I</c><00:04:56.930><c> wonder</c><00:04:57.319><c> what</c><00:04:57.530><c> goes</c><00:04:57.800><c> into</c><00:04:58.039><c> that</c>

00:04:58.149 --> 00:04:58.159 align:start position:0%
lambdas or I wonder what goes into that
 

00:04:58.159 --> 00:05:00.100 align:start position:0%
lambdas or I wonder what goes into that
capture<00:04:58.729><c> thing</c><00:04:58.909><c> or</c><00:04:59.090><c> what</c><00:04:59.509><c> the</c><00:04:59.659><c> possible</c>

00:05:00.100 --> 00:05:00.110 align:start position:0%
capture thing or what the possible
 

00:05:00.110 --> 00:05:03.040 align:start position:0%
capture thing or what the possible
values<00:05:00.590><c> are</c><00:05:00.860><c> right</c><00:05:01.520><c> if</c><00:05:01.639><c> you</c><00:05:01.759><c> try</c><00:05:02.720><c> to</c><00:05:02.780><c> figure</c>

00:05:03.040 --> 00:05:03.050 align:start position:0%
values are right if you try to figure
 

00:05:03.050 --> 00:05:04.960 align:start position:0%
values are right if you try to figure
out<00:05:03.169><c> stuff</c><00:05:03.530><c> like</c><00:05:03.590><c> that</c><00:05:03.889><c> just</c><00:05:04.190><c> look</c><00:05:04.639><c> it</c><00:05:04.729><c> up</c><00:05:04.819><c> in</c>

00:05:04.960 --> 00:05:04.970 align:start position:0%
out stuff like that just look it up in
 

00:05:04.970 --> 00:05:07.629 align:start position:0%
out stuff like that just look it up in
the<00:05:05.060><c> reference</c><00:05:05.449><c> ok</c><00:05:05.900><c> so</c><00:05:06.159><c> inside</c><00:05:07.159><c> here</c><00:05:07.400><c> you</c><00:05:07.520><c> can</c>

00:05:07.629 --> 00:05:07.639 align:start position:0%
the reference ok so inside here you can
 

00:05:07.639 --> 00:05:08.559 align:start position:0%
the reference ok so inside here you can
see<00:05:07.759><c> the</c><00:05:07.849><c> captions</c><00:05:08.180><c> we</c><00:05:08.270><c> have</c><00:05:08.360><c> a</c><00:05:08.389><c> comma</c>

00:05:08.559 --> 00:05:08.569 align:start position:0%
see the captions we have a comma
 

00:05:08.569 --> 00:05:10.089 align:start position:0%
see the captions we have a comma
separated<00:05:08.960><c> list</c><00:05:08.990><c> of</c><00:05:09.289><c> zero</c><00:05:09.440><c> or</c><00:05:09.500><c> more</c><00:05:09.650><c> captures</c>

00:05:10.089 --> 00:05:10.099 align:start position:0%
separated list of zero or more captures
 

00:05:10.099 --> 00:05:12.339 align:start position:0%
separated list of zero or more captures
so<00:05:10.789><c> I'll</c><00:05:11.300><c> explain</c><00:05:11.569><c> what</c><00:05:11.720><c> this</c><00:05:11.780><c> is</c><00:05:11.930><c> in</c><00:05:12.020><c> a</c><00:05:12.080><c> minute</c>

00:05:12.339 --> 00:05:12.349 align:start position:0%
so I'll explain what this is in a minute
 

00:05:12.349 --> 00:05:13.899 align:start position:0%
so I'll explain what this is in a minute
but<00:05:12.560><c> basically</c><00:05:12.949><c> you</c><00:05:13.130><c> can</c><00:05:13.280><c> see</c><00:05:13.460><c> that</c><00:05:13.610><c> we</c><00:05:13.729><c> can</c>

00:05:13.899 --> 00:05:13.909 align:start position:0%
but basically you can see that we can
 

00:05:13.909 --> 00:05:17.140 align:start position:0%
but basically you can see that we can
pass<00:05:14.509><c> in</c><00:05:14.919><c> like</c><00:05:15.919><c> variables</c><00:05:16.460><c> essentially</c><00:05:16.909><c> a</c>

00:05:17.140 --> 00:05:17.150 align:start position:0%
pass in like variables essentially a
 

00:05:17.150 --> 00:05:19.210 align:start position:0%
pass in like variables essentially a
would<00:05:17.389><c> be</c><00:05:17.419><c> captured</c><00:05:17.810><c> by</c><00:05:17.930><c> a</c><00:05:17.960><c> copy</c><00:05:18.229><c> or</c><00:05:18.560><c> a</c><00:05:18.590><c> value</c>

00:05:19.210 --> 00:05:19.220 align:start position:0%
would be captured by a copy or a value
 

00:05:19.220 --> 00:05:21.339 align:start position:0%
would be captured by a copy or a value
and<00:05:19.490><c> B</c><00:05:19.970><c> is</c><00:05:20.030><c> captured</c><00:05:20.479><c> by</c><00:05:20.509><c> reference</c><00:05:21.020><c> here</c><00:05:21.229><c> we</c>

00:05:21.339 --> 00:05:21.349 align:start position:0%
and B is captured by reference here we
 

00:05:21.349 --> 00:05:23.320 align:start position:0%
and B is captured by reference here we
can<00:05:21.470><c> pass</c><00:05:21.590><c> in</c><00:05:21.770><c> this</c><00:05:21.979><c> we</c><00:05:22.190><c> can</c><00:05:22.340><c> pass</c><00:05:22.699><c> in</c><00:05:22.909><c> just</c><00:05:23.180><c> an</c>

00:05:23.320 --> 00:05:23.330 align:start position:0%
can pass in this we can pass in just an
 

00:05:23.330 --> 00:05:25.210 align:start position:0%
can pass in this we can pass in just an
ampersand<00:05:23.750><c> which</c><00:05:23.990><c> captures</c><00:05:24.349><c> everything</c><00:05:24.590><c> by</c>

00:05:25.210 --> 00:05:25.220 align:start position:0%
ampersand which captures everything by
 

00:05:25.220 --> 00:05:27.040 align:start position:0%
ampersand which captures everything by
reference<00:05:25.669><c> just</c><00:05:26.330><c> an</c><00:05:26.479><c> equal</c><00:05:26.719><c> sign</c><00:05:26.900><c> which</c>

00:05:27.040 --> 00:05:27.050 align:start position:0%
reference just an equal sign which
 

00:05:27.050 --> 00:05:28.719 align:start position:0%
reference just an equal sign which
captures<00:05:27.320><c> everything</c><00:05:27.830><c> by</c><00:05:27.979><c> value</c><00:05:28.280><c> or</c><00:05:28.400><c> by</c><00:05:28.490><c> copy</c>

00:05:28.719 --> 00:05:28.729 align:start position:0%
captures everything by value or by copy
 

00:05:28.729 --> 00:05:30.670 align:start position:0%
captures everything by value or by copy
and<00:05:29.030><c> then</c><00:05:29.389><c> that</c><00:05:29.659><c> captures</c><00:05:30.050><c> nothing</c><00:05:30.380><c> so</c><00:05:30.560><c> what</c>

00:05:30.670 --> 00:05:30.680 align:start position:0%
and then that captures nothing so what
 

00:05:30.680 --> 00:05:32.230 align:start position:0%
and then that captures nothing so what
is<00:05:30.800><c> this</c><00:05:30.919><c> whole</c><00:05:31.099><c> capturing</c><00:05:31.729><c> thing</c><00:05:31.940><c> well</c>

00:05:32.230 --> 00:05:32.240 align:start position:0%
is this whole capturing thing well
 

00:05:32.240 --> 00:05:35.290 align:start position:0%
is this whole capturing thing well
consider<00:05:33.080><c> this</c><00:05:33.259><c> as</c><00:05:33.530><c> an</c><00:05:33.710><c> example</c><00:05:34.030><c> what</c><00:05:35.030><c> if</c><00:05:35.150><c> we</c>

00:05:35.290 --> 00:05:35.300 align:start position:0%
consider this as an example what if we
 

00:05:35.300 --> 00:05:38.950 align:start position:0%
consider this as an example what if we
want<00:05:35.570><c> to</c><00:05:35.659><c> put</c><00:05:36.500><c> outside</c><00:05:37.099><c> variables</c><00:05:37.729><c> into</c><00:05:38.419><c> the</c>

00:05:38.950 --> 00:05:38.960 align:start position:0%
want to put outside variables into the
 

00:05:38.960 --> 00:05:40.420 align:start position:0%
want to put outside variables into the
instructions<00:05:39.560><c> that</c><00:05:39.710><c> are</c><00:05:39.800><c> inside</c><00:05:40.070><c> our</c><00:05:40.219><c> lambda</c>

00:05:40.420 --> 00:05:40.430 align:start position:0%
instructions that are inside our lambda
 

00:05:40.430 --> 00:05:43.270 align:start position:0%
instructions that are inside our lambda
function<00:05:41.110><c> what</c><00:05:42.110><c> happens</c><00:05:42.409><c> then</c><00:05:42.620><c> right</c><00:05:43.009><c> because</c>

00:05:43.270 --> 00:05:43.280 align:start position:0%
function what happens then right because
 

00:05:43.280 --> 00:05:44.469 align:start position:0%
function what happens then right because
remember<00:05:43.370><c> what</c><00:05:43.940><c> we're</c><00:05:44.090><c> doing</c><00:05:44.270><c> is</c><00:05:44.360><c> we're</c>

00:05:44.469 --> 00:05:44.479 align:start position:0%
remember what we're doing is we're
 

00:05:44.479 --> 00:05:46.209 align:start position:0%
remember what we're doing is we're
constructing<00:05:44.990><c> a</c><00:05:45.050><c> function</c><00:05:45.469><c> that</c><00:05:45.620><c> will</c><00:05:46.070><c> then</c>

00:05:46.209 --> 00:05:46.219 align:start position:0%
constructing a function that will then
 

00:05:46.219 --> 00:05:47.100 align:start position:0%
constructing a function that will then
get<00:05:46.400><c> called</c><00:05:46.639><c> later</c>

00:05:47.100 --> 00:05:47.110 align:start position:0%
get called later
 

00:05:47.110 --> 00:05:50.320 align:start position:0%
get called later
so<00:05:48.110><c> if</c><00:05:48.500><c> we</c><00:05:48.800><c> use</c><00:05:48.830><c> variables</c><00:05:49.550><c> that</c><00:05:49.699><c> are</c><00:05:49.820><c> outside</c>

00:05:50.320 --> 00:05:50.330 align:start position:0%
so if we use variables that are outside
 

00:05:50.330 --> 00:05:52.689 align:start position:0%
so if we use variables that are outside
of<00:05:50.389><c> that</c><00:05:50.719><c> lambda</c><00:05:50.960><c> like</c><00:05:51.380><c> for</c><00:05:51.889><c> example</c><00:05:51.949><c> outside</c>

00:05:52.689 --> 00:05:52.699 align:start position:0%
of that lambda like for example outside
 

00:05:52.699 --> 00:05:55.059 align:start position:0%
of that lambda like for example outside
of<00:05:53.150><c> this</c><00:05:53.300><c> function</c><00:05:53.870><c> so</c><00:05:53.900><c> maybe</c><00:05:54.319><c> I</c><00:05:54.409><c> have</c><00:05:54.680><c> an</c><00:05:54.830><c> aunt</c>

00:05:55.059 --> 00:05:55.069 align:start position:0%
of this function so maybe I have an aunt
 

00:05:55.069 --> 00:05:58.360 align:start position:0%
of this function so maybe I have an aunt
a<00:05:55.219><c> over</c><00:05:56.060><c> here</c><00:05:56.090><c> that's</c><00:05:56.719><c> equal</c><00:05:56.990><c> to</c><00:05:57.020><c> 5</c><00:05:57.319><c> what</c><00:05:58.130><c> if</c><00:05:58.250><c> I</c>

00:05:58.360 --> 00:05:58.370 align:start position:0%
a over here that's equal to 5 what if I
 

00:05:58.370 --> 00:06:00.670 align:start position:0%
a over here that's equal to 5 what if I
use<00:05:58.580><c> that</c><00:05:58.819><c> here</c><00:05:59.180><c> what</c><00:05:59.599><c> if</c><00:05:59.719><c> the</c><00:06:00.169><c> pop</c><00:06:00.380><c> will</c>

00:06:00.670 --> 00:06:00.680 align:start position:0%
use that here what if the pop will
 

00:06:00.680 --> 00:06:02.320 align:start position:0%
use that here what if the pop will
instead<00:06:01.069><c> of</c><00:06:01.190><c> printing</c><00:06:01.460><c> value</c><00:06:01.819><c> or</c><00:06:01.940><c> something</c><00:06:02.090><c> I</c>

00:06:02.320 --> 00:06:02.330 align:start position:0%
instead of printing value or something I
 

00:06:02.330 --> 00:06:04.180 align:start position:0%
instead of printing value or something I
want<00:06:02.509><c> to</c><00:06:02.569><c> print</c><00:06:02.840><c> a</c><00:06:03.020><c> well</c><00:06:03.650><c> how</c><00:06:03.830><c> is</c><00:06:03.889><c> that</c><00:06:04.039><c> gonna</c>

00:06:04.180 --> 00:06:04.190 align:start position:0%
want to print a well how is that gonna
 

00:06:04.190 --> 00:06:05.740 align:start position:0%
want to print a well how is that gonna
work<00:06:04.280><c> because</c><00:06:04.699><c> this</c><00:06:04.819><c> is</c><00:06:04.969><c> outside</c><00:06:05.360><c> and</c>

00:06:05.740 --> 00:06:05.750 align:start position:0%
work because this is outside and
 

00:06:05.750 --> 00:06:07.749 align:start position:0%
work because this is outside and
obviously<00:06:06.380><c> what</c><00:06:06.620><c> I'm</c><00:06:06.710><c> doing</c><00:06:07.039><c> is</c><00:06:07.159><c> calling</c><00:06:07.430><c> this</c>

00:06:07.749 --> 00:06:07.759 align:start position:0%
obviously what I'm doing is calling this
 

00:06:07.759 --> 00:06:10.629 align:start position:0%
obviously what I'm doing is calling this
code<00:06:08.150><c> from</c><00:06:08.719><c> over</c><00:06:08.990><c> here</c><00:06:09.289><c> inside</c><00:06:10.099><c> this</c><00:06:10.250><c> for</c><00:06:10.520><c> each</c>

00:06:10.629 --> 00:06:10.639 align:start position:0%
code from over here inside this for each
 

00:06:10.639 --> 00:06:12.219 align:start position:0%
code from over here inside this for each
loop<00:06:10.909><c> so</c><00:06:11.090><c> how</c><00:06:11.240><c> does</c><00:06:11.300><c> it</c><00:06:11.509><c> have</c><00:06:11.659><c> access</c><00:06:12.050><c> to</c><00:06:12.199><c> a</c>

00:06:12.219 --> 00:06:12.229 align:start position:0%
loop so how does it have access to a
 

00:06:12.229 --> 00:06:15.100 align:start position:0%
loop so how does it have access to a
well<00:06:13.219><c> there's</c><00:06:13.430><c> two</c><00:06:13.639><c> ways</c><00:06:13.849><c> that</c><00:06:14.240><c> we</c><00:06:14.300><c> can</c><00:06:14.599><c> pass</c>

00:06:15.100 --> 00:06:15.110 align:start position:0%
well there's two ways that we can pass
 

00:06:15.110 --> 00:06:17.200 align:start position:0%
well there's two ways that we can pass
this<00:06:15.469><c> a</c><00:06:15.680><c> variable</c><00:06:16.280><c> around</c><00:06:16.639><c> and</c><00:06:16.849><c> this</c><00:06:16.909><c> is</c><00:06:17.060><c> the</c>

00:06:17.200 --> 00:06:17.210 align:start position:0%
this a variable around and this is the
 

00:06:17.210 --> 00:06:18.700 align:start position:0%
this a variable around and this is the
exact<00:06:17.509><c> same</c><00:06:17.750><c> as</c><00:06:17.810><c> if</c><00:06:18.050><c> we</c><00:06:18.169><c> hadn't</c><00:06:18.409><c> made</c><00:06:18.500><c> our</c><00:06:18.680><c> own</c>

00:06:18.700 --> 00:06:18.710 align:start position:0%
exact same as if we hadn't made our own
 

00:06:18.710 --> 00:06:21.790 align:start position:0%
exact same as if we hadn't made our own
function<00:06:19.280><c> we</c><00:06:19.849><c> can</c><00:06:20.000><c> pass</c><00:06:20.150><c> it</c><00:06:20.330><c> by</c><00:06:20.449><c> value</c><00:06:20.840><c> or</c><00:06:21.500><c> we</c>

00:06:21.790 --> 00:06:21.800 align:start position:0%
function we can pass it by value or we
 

00:06:21.800 --> 00:06:23.950 align:start position:0%
function we can pass it by value or we
can<00:06:21.979><c> pass</c><00:06:22.159><c> it</c><00:06:22.310><c> by</c><00:06:22.430><c> reference</c><00:06:22.940><c> and</c><00:06:23.090><c> that</c><00:06:23.180><c> is</c>

00:06:23.950 --> 00:06:23.960 align:start position:0%
can pass it by reference and that is
 

00:06:23.960 --> 00:06:26.020 align:start position:0%
can pass it by reference and that is
what<00:06:24.229><c> that</c><00:06:24.259><c> capture</c><00:06:24.979><c> group</c><00:06:25.190><c> is</c><00:06:25.340><c> for</c><00:06:25.639><c> write</c>

00:06:26.020 --> 00:06:26.030 align:start position:0%
what that capture group is for write
 

00:06:26.030 --> 00:06:28.629 align:start position:0%
what that capture group is for write
that<00:06:26.210><c> first</c><00:06:26.539><c> at</c><00:06:26.870><c> square</c><00:06:27.199><c> brackets</c><00:06:27.680><c> that</c><00:06:28.310><c> lets</c>

00:06:28.629 --> 00:06:28.639 align:start position:0%
that first at square brackets that lets
 

00:06:28.639 --> 00:06:30.850 align:start position:0%
that first at square brackets that lets
us<00:06:28.819><c> say</c><00:06:29.210><c> how</c><00:06:29.719><c> we</c><00:06:29.780><c> want</c><00:06:30.259><c> to</c><00:06:30.289><c> pass</c><00:06:30.529><c> vary</c>

00:06:30.850 --> 00:06:30.860 align:start position:0%
us say how we want to pass vary
 

00:06:30.860 --> 00:06:32.290 align:start position:0%
us say how we want to pass vary
apples<00:06:31.039><c> in</c><00:06:31.219><c> now</c><00:06:31.580><c> in</c><00:06:31.699><c> this</c><00:06:31.849><c> case</c><00:06:32.060><c> we're</c><00:06:32.270><c> not</c>

00:06:32.290 --> 00:06:32.300 align:start position:0%
apples in now in this case we're not
 

00:06:32.300 --> 00:06:33.730 align:start position:0%
apples in now in this case we're not
passing<00:06:32.569><c> anything</c><00:06:32.900><c> in</c><00:06:33.169><c> which</c><00:06:33.259><c> is</c><00:06:33.409><c> why</c><00:06:33.560><c> we're</c>

00:06:33.730 --> 00:06:33.740 align:start position:0%
passing anything in which is why we're
 

00:06:33.740 --> 00:06:35.290 align:start position:0%
passing anything in which is why we're
getting<00:06:33.830><c> an</c><00:06:34.039><c> error</c><00:06:34.250><c> here</c><00:06:34.550><c> because</c><00:06:34.879><c> well</c><00:06:35.180><c> it's</c>

00:06:35.290 --> 00:06:35.300 align:start position:0%
getting an error here because well it's
 

00:06:35.300 --> 00:06:37.059 align:start position:0%
getting an error here because well it's
an<00:06:35.389><c> enclosing</c><00:06:35.689><c> function</c><00:06:35.840><c> we</c><00:06:36.319><c> can't</c><00:06:36.530><c> pass</c><00:06:36.740><c> an</c><00:06:36.919><c> A</c>

00:06:37.059 --> 00:06:37.069 align:start position:0%
an enclosing function we can't pass an A
 

00:06:37.069 --> 00:06:39.279 align:start position:0%
an enclosing function we can't pass an A
but<00:06:37.759><c> what</c><00:06:37.909><c> we</c><00:06:38.030><c> can</c><00:06:38.210><c> do</c><00:06:38.419><c> is</c><00:06:38.629><c> we</c><00:06:39.020><c> can</c><00:06:39.169><c> either</c>

00:06:39.279 --> 00:06:39.289 align:start position:0%
but what we can do is we can either
 

00:06:39.289 --> 00:06:42.399 align:start position:0%
but what we can do is we can either
write<00:06:39.590><c> equals</c><00:06:40.430><c> which</c><00:06:41.060><c> means</c><00:06:41.300><c> pass</c><00:06:41.719><c> everything</c>

00:06:42.399 --> 00:06:42.409 align:start position:0%
write equals which means pass everything
 

00:06:42.409 --> 00:06:45.640 align:start position:0%
write equals which means pass everything
in<00:06:42.770><c> by</c><00:06:43.099><c> value</c><00:06:43.550><c> or</c><00:06:43.909><c> we</c><00:06:44.210><c> can</c><00:06:44.389><c> write</c><00:06:44.990><c> an</c><00:06:45.229><c> ampersand</c>

00:06:45.640 --> 00:06:45.650 align:start position:0%
in by value or we can write an ampersand
 

00:06:45.650 --> 00:06:48.010 align:start position:0%
in by value or we can write an ampersand
like<00:06:45.889><c> this</c><00:06:46.159><c> which</c><00:06:46.729><c> means</c><00:06:46.759><c> pass</c><00:06:47.240><c> everything</c><00:06:47.780><c> in</c>

00:06:48.010 --> 00:06:48.020 align:start position:0%
like this which means pass everything in
 

00:06:48.020 --> 00:06:50.890 align:start position:0%
like this which means pass everything in
by<00:06:48.169><c> reference</c><00:06:48.710><c> or</c><00:06:49.460><c> we</c><00:06:50.180><c> can</c><00:06:50.360><c> actually</c><00:06:50.509><c> write</c>

00:06:50.890 --> 00:06:50.900 align:start position:0%
by reference or we can actually write
 

00:06:50.900 --> 00:06:53.170 align:start position:0%
by reference or we can actually write
individual<00:06:51.710><c> variables</c><00:06:52.159><c> like</c><00:06:52.490><c> this</c><00:06:52.699><c> so</c><00:06:52.909><c> I</c><00:06:52.939><c> want</c>

00:06:53.170 --> 00:06:53.180 align:start position:0%
individual variables like this so I want
 

00:06:53.180 --> 00:06:55.839 align:start position:0%
individual variables like this so I want
to<00:06:53.210><c> pass</c><00:06:53.389><c> a</c><00:06:53.689><c> by</c><00:06:54.020><c> value</c><00:06:54.409><c> or</c><00:06:54.680><c> with</c><00:06:55.310><c> an</c><00:06:55.430><c> ampersand</c>

00:06:55.839 --> 00:06:55.849 align:start position:0%
to pass a by value or with an ampersand
 

00:06:55.849 --> 00:06:58.119 align:start position:0%
to pass a by value or with an ampersand
a<00:06:56.120><c> by</c><00:06:56.689><c> reference</c><00:06:57.229><c> now</c><00:06:57.620><c> in</c><00:06:57.710><c> this</c><00:06:57.800><c> case</c><00:06:57.979><c> we</c>

00:06:58.119 --> 00:06:58.129 align:start position:0%
a by reference now in this case we
 

00:06:58.129 --> 00:06:59.320 align:start position:0%
a by reference now in this case we
actually<00:06:58.340><c> get</c><00:06:58.460><c> an</c><00:06:58.550><c> error</c><00:06:58.729><c> when</c><00:06:58.909><c> we</c><00:06:59.030><c> try</c><00:06:59.210><c> and</c>

00:06:59.320 --> 00:06:59.330 align:start position:0%
actually get an error when we try and
 

00:06:59.330 --> 00:07:00.670 align:start position:0%
actually get an error when we try and
pass<00:06:59.509><c> something</c><00:06:59.900><c> in</c><00:06:59.990><c> well</c><00:07:00.139><c> actually</c><00:07:00.319><c> if</c><00:07:00.590><c> we</c>

00:07:00.670 --> 00:07:00.680 align:start position:0%
pass something in well actually if we
 

00:07:00.680 --> 00:07:02.499 align:start position:0%
pass something in well actually if we
capture<00:07:01.009><c> anything</c><00:07:01.430><c> whether</c><00:07:01.580><c> it</c><00:07:01.759><c> be</c><00:07:01.789><c> by</c><00:07:02.060><c> value</c>

00:07:02.499 --> 00:07:02.509 align:start position:0%
capture anything whether it be by value
 

00:07:02.509 --> 00:07:04.330 align:start position:0%
capture anything whether it be by value
or<00:07:02.719><c> by</c><00:07:02.900><c> reference</c><00:07:03.409><c> we're</c><00:07:03.919><c> going</c><00:07:04.069><c> to</c><00:07:04.129><c> get</c><00:07:04.219><c> an</c>

00:07:04.330 --> 00:07:04.340 align:start position:0%
or by reference we're going to get an
 

00:07:04.340 --> 00:07:06.070 align:start position:0%
or by reference we're going to get an
error<00:07:04.550><c> over</c><00:07:04.759><c> here</c><00:07:04.879><c> in</c><00:07:05.150><c> 4h</c><00:07:05.509><c> and</c><00:07:05.689><c> this</c><00:07:05.810><c> is</c><00:07:05.900><c> just</c>

00:07:06.070 --> 00:07:06.080 align:start position:0%
error over here in 4h and this is just
 

00:07:06.080 --> 00:07:07.689 align:start position:0%
error over here in 4h and this is just
in<00:07:06.139><c> this</c><00:07:06.259><c> specific</c><00:07:06.590><c> example</c><00:07:06.710><c> because</c><00:07:07.370><c> we're</c>

00:07:07.689 --> 00:07:07.699 align:start position:0%
in this specific example because we're
 

00:07:07.699 --> 00:07:09.850 align:start position:0%
in this specific example because we're
just<00:07:07.849><c> using</c><00:07:08.120><c> a</c><00:07:08.300><c> roll</c><00:07:08.479><c> function</c><00:07:08.900><c> pointer</c><00:07:09.289><c> if</c><00:07:09.650><c> we</c>

00:07:09.850 --> 00:07:09.860 align:start position:0%
just using a roll function pointer if we
 

00:07:09.860 --> 00:07:12.189 align:start position:0%
just using a roll function pointer if we
convert<00:07:10.189><c> this</c><00:07:10.430><c> to</c><00:07:10.849><c> an</c><00:07:10.939><c> STD</c><00:07:11.300><c> function</c><00:07:11.810><c> like</c><00:07:12.050><c> we</c>

00:07:12.189 --> 00:07:12.199 align:start position:0%
convert this to an STD function like we
 

00:07:12.199 --> 00:07:14.649 align:start position:0%
convert this to an STD function like we
will<00:07:12.349><c> right</c><00:07:12.590><c> now</c><00:07:12.819><c> so</c><00:07:13.819><c> this</c><00:07:13.939><c> is</c><00:07:14.000><c> gonna</c><00:07:14.240><c> be</c><00:07:14.479><c> of</c>

00:07:14.649 --> 00:07:14.659 align:start position:0%
will right now so this is gonna be of
 

00:07:14.659 --> 00:07:16.240 align:start position:0%
will right now so this is gonna be of
course<00:07:14.719><c> returning</c><00:07:15.229><c> for</c><00:07:15.409><c> taking</c><00:07:15.800><c> in</c><00:07:15.889><c> one</c><00:07:16.039><c> hint</c>

00:07:16.240 --> 00:07:16.250 align:start position:0%
course returning for taking in one hint
 

00:07:16.250 --> 00:07:18.459 align:start position:0%
course returning for taking in one hint
parameter<00:07:16.759><c> and</c><00:07:17.090><c> we'll</c><00:07:17.210><c> call</c><00:07:17.360><c> it</c><00:07:17.479><c> func</c><00:07:17.779><c> I'll</c>

00:07:18.459 --> 00:07:18.469 align:start position:0%
parameter and we'll call it func I'll
 

00:07:18.469 --> 00:07:20.080 align:start position:0%
parameter and we'll call it func I'll
include<00:07:18.919><c> functional</c><00:07:19.490><c> so</c><00:07:19.729><c> that</c><00:07:19.759><c> we</c><00:07:19.969><c> have</c>

00:07:20.080 --> 00:07:20.090 align:start position:0%
include functional so that we have
 

00:07:20.090 --> 00:07:22.959 align:start position:0%
include functional so that we have
access<00:07:20.479><c> to</c><00:07:20.539><c> that</c><00:07:21.129><c> then</c><00:07:22.129><c> that's</c><00:07:22.310><c> gonna</c><00:07:22.610><c> go</c><00:07:22.849><c> away</c>

00:07:22.959 --> 00:07:22.969 align:start position:0%
access to that then that's gonna go away
 

00:07:22.969 --> 00:07:24.459 align:start position:0%
access to that then that's gonna go away
okay<00:07:23.539><c> so</c><00:07:23.599><c> what</c><00:07:23.810><c> we're</c><00:07:23.900><c> doing</c><00:07:23.930><c> here</c><00:07:24.110><c> is</c><00:07:24.349><c> we're</c>

00:07:24.459 --> 00:07:24.469 align:start position:0%
okay so what we're doing here is we're
 

00:07:24.469 --> 00:07:26.559 align:start position:0%
okay so what we're doing here is we're
passing<00:07:24.830><c> everything</c><00:07:25.189><c> in</c><00:07:25.490><c> by</c><00:07:26.000><c> value</c><00:07:26.419><c> which</c>

00:07:26.559 --> 00:07:26.569 align:start position:0%
passing everything in by value which
 

00:07:26.569 --> 00:07:28.330 align:start position:0%
passing everything in by value which
means<00:07:26.750><c> it's</c><00:07:26.900><c> just</c><00:07:27.050><c> gonna</c><00:07:27.169><c> copy</c><00:07:27.529><c> the</c><00:07:27.800><c> value</c><00:07:28.159><c> and</c>

00:07:28.330 --> 00:07:28.340 align:start position:0%
means it's just gonna copy the value and
 

00:07:28.340 --> 00:07:30.189 align:start position:0%
means it's just gonna copy the value and
pass<00:07:28.759><c> it</c><00:07:28.939><c> in</c><00:07:29.060><c> but</c><00:07:29.539><c> you</c><00:07:29.569><c> can</c><00:07:29.779><c> also</c><00:07:29.900><c> use</c><00:07:30.110><c> an</c>

00:07:30.189 --> 00:07:30.199 align:start position:0%
pass it in but you can also use an
 

00:07:30.199 --> 00:07:31.420 align:start position:0%
pass it in but you can also use an
ampersand<00:07:30.650><c> if</c><00:07:30.949><c> you</c><00:07:31.039><c> want</c><00:07:31.189><c> to</c><00:07:31.250><c> capture</c>

00:07:31.420 --> 00:07:31.430 align:start position:0%
ampersand if you want to capture
 

00:07:31.430 --> 00:07:33.070 align:start position:0%
ampersand if you want to capture
something<00:07:31.819><c> by</c><00:07:31.939><c> reference</c><00:07:32.419><c> so</c><00:07:32.599><c> maybe</c><00:07:32.779><c> if</c><00:07:32.960><c> it's</c>

00:07:33.070 --> 00:07:33.080 align:start position:0%
something by reference so maybe if it's
 

00:07:33.080 --> 00:07:35.290 align:start position:0%
something by reference so maybe if it's
like<00:07:33.259><c> a</c><00:07:33.529><c> class</c><00:07:34.159><c> or</c><00:07:34.430><c> a</c><00:07:34.460><c> struct</c><00:07:34.819><c> that</c><00:07:34.969><c> you</c><00:07:35.060><c> don't</c>

00:07:35.290 --> 00:07:35.300 align:start position:0%
like a class or a struct that you don't
 

00:07:35.300 --> 00:07:37.390 align:start position:0%
like a class or a struct that you don't
want<00:07:35.479><c> to</c><00:07:35.539><c> copy</c><00:07:35.750><c> or</c><00:07:36.139><c> this</c><00:07:36.620><c> lambda</c><00:07:36.860><c> is</c><00:07:37.099><c> actually</c>

00:07:37.390 --> 00:07:37.400 align:start position:0%
want to copy or this lambda is actually
 

00:07:37.400 --> 00:07:39.909 align:start position:0%
want to copy or this lambda is actually
intended<00:07:37.669><c> to</c><00:07:38.060><c> modify</c><00:07:38.389><c> the</c><00:07:39.379><c> code</c><00:07:39.560><c> if</c><00:07:39.770><c> you're</c>

00:07:39.909 --> 00:07:39.919 align:start position:0%
intended to modify the code if you're
 

00:07:39.919 --> 00:07:41.980 align:start position:0%
intended to modify the code if you're
not<00:07:40.190><c> sure</c><00:07:40.460><c> or</c><00:07:40.639><c> to</c><00:07:40.669><c> modify</c><00:07:41.180><c> that</c><00:07:41.330><c> object</c><00:07:41.810><c> or</c>

00:07:41.980 --> 00:07:41.990 align:start position:0%
not sure or to modify that object or
 

00:07:41.990 --> 00:07:44.379 align:start position:0%
not sure or to modify that object or
variable<00:07:42.650><c> you're</c><00:07:43.009><c> not</c><00:07:43.099><c> sure</c><00:07:43.339><c> what</c><00:07:43.639><c> I</c><00:07:43.879><c> mean</c><00:07:44.240><c> by</c>

00:07:44.379 --> 00:07:44.389 align:start position:0%
variable you're not sure what I mean by
 

00:07:44.389 --> 00:07:45.969 align:start position:0%
variable you're not sure what I mean by
passing<00:07:44.750><c> by</c><00:07:44.839><c> reference</c><00:07:45.199><c> check</c><00:07:45.500><c> out</c><00:07:45.650><c> both</c><00:07:45.889><c> my</c>

00:07:45.969 --> 00:07:45.979 align:start position:0%
passing by reference check out both my
 

00:07:45.979 --> 00:07:47.379 align:start position:0%
passing by reference check out both my
video<00:07:46.250><c> and</c><00:07:46.370><c> functions</c><00:07:46.729><c> I</c><00:07:46.819><c> think</c><00:07:47.000><c> covers</c><00:07:47.360><c> a</c>

00:07:47.379 --> 00:07:47.389 align:start position:0%
video and functions I think covers a
 

00:07:47.389 --> 00:07:48.939 align:start position:0%
video and functions I think covers a
little<00:07:47.569><c> bit</c><00:07:47.750><c> of</c><00:07:47.810><c> that</c><00:07:47.870><c> but</c><00:07:48.319><c> the</c><00:07:48.440><c> references</c>

00:07:48.939 --> 00:07:48.949 align:start position:0%
little bit of that but the references
 

00:07:48.949 --> 00:07:50.589 align:start position:0%
little bit of that but the references
video<00:07:49.250><c> and</c><00:07:49.550><c> the</c><00:07:49.639><c> pointers</c><00:07:50.029><c> video</c><00:07:50.300><c> is</c><00:07:50.449><c> also</c>

00:07:50.589 --> 00:07:50.599 align:start position:0%
video and the pointers video is also
 

00:07:50.599 --> 00:07:52.659 align:start position:0%
video and the pointers video is also
related<00:07:50.930><c> to</c><00:07:51.110><c> that</c><00:07:51.289><c> all</c><00:07:51.830><c> that</c><00:07:51.979><c> stuff</c><00:07:52.190><c> if</c><00:07:52.430><c> we</c><00:07:52.490><c> go</c>

00:07:52.659 --> 00:07:52.669 align:start position:0%
related to that all that stuff if we go
 

00:07:52.669 --> 00:07:54.909 align:start position:0%
related to that all that stuff if we go
back<00:07:52.849><c> to</c><00:07:52.879><c> C++</c><00:07:53.180><c> reference</c><00:07:53.990><c> we</c><00:07:54.229><c> you</c><00:07:54.680><c> can</c><00:07:54.800><c> also</c>

00:07:54.909 --> 00:07:54.919 align:start position:0%
back to C++ reference we you can also
 

00:07:54.919 --> 00:07:56.559 align:start position:0%
back to C++ reference we you can also
say<00:07:55.190><c> that</c><00:07:55.219><c> we</c><00:07:55.400><c> have</c><00:07:55.639><c> the</c><00:07:55.819><c> next</c><00:07:56.089><c> step</c><00:07:56.300><c> which</c><00:07:56.539><c> is</c>

00:07:56.559 --> 00:07:56.569 align:start position:0%
say that we have the next step which is
 

00:07:56.569 --> 00:07:58.390 align:start position:0%
say that we have the next step which is
the<00:07:56.990><c> parameters</c><00:07:57.529><c> right</c><00:07:57.949><c> those</c><00:07:58.250><c> are</c><00:07:58.279><c> the</c>

00:07:58.390 --> 00:07:58.400 align:start position:0%
the parameters right those are the
 

00:07:58.400 --> 00:08:00.010 align:start position:0%
the parameters right those are the
parameters<00:07:58.550><c> that</c><00:07:58.819><c> our</c><00:07:58.969><c> function</c><00:07:59.330><c> takes</c><00:07:59.539><c> in</c><00:07:59.719><c> we</c>

00:08:00.010 --> 00:08:00.020 align:start position:0%
parameters that our function takes in we
 

00:08:00.020 --> 00:08:01.689 align:start position:0%
parameters that our function takes in we
have<00:08:00.139><c> an</c><00:08:00.229><c> optional</c><00:08:00.500><c> specifier</c><00:08:01.069><c> such</c><00:08:01.550><c> as</c>

00:08:01.689 --> 00:08:01.699 align:start position:0%
have an optional specifier such as
 

00:08:01.699 --> 00:08:03.670 align:start position:0%
have an optional specifier such as
mutable<00:08:02.150><c> which</c><00:08:02.509><c> allows</c><00:08:02.779><c> the</c><00:08:02.930><c> body</c><00:08:03.110><c> to</c><00:08:03.289><c> modify</c>

00:08:03.670 --> 00:08:03.680 align:start position:0%
mutable which allows the body to modify
 

00:08:03.680 --> 00:08:05.619 align:start position:0%
mutable which allows the body to modify
parameters<00:08:03.830><c> captured</c><00:08:04.370><c> by</c><00:08:04.490><c> copy</c><00:08:04.879><c> that's</c>

00:08:05.619 --> 00:08:05.629 align:start position:0%
parameters captured by copy that's
 

00:08:05.629 --> 00:08:07.659 align:start position:0%
parameters captured by copy that's
another<00:08:05.870><c> thing</c><00:08:06.050><c> that's</c><00:08:06.229><c> kind</c><00:08:06.589><c> of</c><00:08:06.800><c> useful</c><00:08:07.009><c> you</c>

00:08:07.659 --> 00:08:07.669 align:start position:0%
another thing that's kind of useful you
 

00:08:07.669 --> 00:08:08.920 align:start position:0%
another thing that's kind of useful you
can<00:08:07.819><c> see</c><00:08:07.969><c> here</c><00:08:08.180><c> that</c><00:08:08.270><c> we're</c><00:08:08.419><c> copying</c><00:08:08.629><c> the</c><00:08:08.900><c> a</c>

00:08:08.920 --> 00:08:08.930 align:start position:0%
can see here that we're copying the a
 

00:08:08.930 --> 00:08:10.959 align:start position:0%
can see here that we're copying the a
variable<00:08:09.529><c> but</c><00:08:09.949><c> if</c><00:08:10.069><c> we</c><00:08:10.189><c> try</c><00:08:10.370><c> and</c><00:08:10.490><c> assign</c><00:08:10.729><c> a</c><00:08:10.759><c> to</c>

00:08:10.959 --> 00:08:10.969 align:start position:0%
variable but if we try and assign a to
 

00:08:10.969 --> 00:08:12.700 align:start position:0%
variable but if we try and assign a to
something<00:08:11.389><c> like</c><00:08:11.509><c> that</c><00:08:11.719><c> it's</c><00:08:12.169><c> not</c><00:08:12.349><c> gonna</c><00:08:12.500><c> let</c>

00:08:12.700 --> 00:08:12.710 align:start position:0%
something like that it's not gonna let
 

00:08:12.710 --> 00:08:14.499 align:start position:0%
something like that it's not gonna let
us<00:08:12.830><c> which</c><00:08:13.099><c> is</c><00:08:13.219><c> a</c><00:08:13.250><c> bit</c><00:08:13.400><c> weird</c><00:08:13.430><c> because</c><00:08:14.060><c> we're</c>

00:08:14.499 --> 00:08:14.509 align:start position:0%
us which is a bit weird because we're
 

00:08:14.509 --> 00:08:16.329 align:start position:0%
us which is a bit weird because we're
just<00:08:14.539><c> passing</c><00:08:14.900><c> by</c><00:08:15.439><c> value</c><00:08:15.500><c> and</c><00:08:15.949><c> of</c><00:08:16.009><c> course</c><00:08:16.219><c> if</c>

00:08:16.329 --> 00:08:16.339 align:start position:0%
just passing by value and of course if
 

00:08:16.339 --> 00:08:17.740 align:start position:0%
just passing by value and of course if
we<00:08:16.370><c> were</c><00:08:16.580><c> passing</c><00:08:16.909><c> something</c><00:08:17.210><c> into</c><00:08:17.419><c> a</c><00:08:17.449><c> normal</c>

00:08:17.740 --> 00:08:17.750 align:start position:0%
we were passing something into a normal
 

00:08:17.750 --> 00:08:19.779 align:start position:0%
we were passing something into a normal
function<00:08:18.080><c> by</c><00:08:18.199><c> value</c><00:08:18.500><c> of</c><00:08:18.589><c> course</c><00:08:18.830><c> we</c><00:08:19.039><c> can</c><00:08:19.219><c> we</c>

00:08:19.779 --> 00:08:19.789 align:start position:0%
function by value of course we can we
 

00:08:19.789 --> 00:08:21.519 align:start position:0%
function by value of course we can we
can<00:08:20.000><c> reassign</c><00:08:20.689><c> it</c><00:08:20.719><c> into</c><00:08:21.020><c> whatever</c><00:08:21.259><c> we</c><00:08:21.319><c> want</c>

00:08:21.519 --> 00:08:21.529 align:start position:0%
can reassign it into whatever we want
 

00:08:21.529 --> 00:08:23.379 align:start position:0%
can reassign it into whatever we want
and<00:08:21.770><c> to</c><00:08:22.129><c> fix</c><00:08:22.400><c> that</c><00:08:22.610><c> you</c><00:08:22.729><c> basically</c><00:08:23.060><c> just</c><00:08:23.150><c> out</c>

00:08:23.379 --> 00:08:23.389 align:start position:0%
and to fix that you basically just out
 

00:08:23.389 --> 00:08:24.969 align:start position:0%
and to fix that you basically just out
the<00:08:23.479><c> word</c><00:08:23.599><c> mutable</c><00:08:23.990><c> here</c><00:08:24.169><c> it's</c><00:08:24.529><c> a</c><00:08:24.620><c> bit</c><00:08:24.800><c> weird</c>

00:08:24.969 --> 00:08:24.979 align:start position:0%
the word mutable here it's a bit weird
 

00:08:24.979 --> 00:08:27.129 align:start position:0%
the word mutable here it's a bit weird
but<00:08:25.279><c> hey</c><00:08:25.849><c> stuff</c><00:08:26.449><c> like</c><00:08:26.599><c> that</c><00:08:26.779><c> you</c><00:08:26.960><c> probably</c>

00:08:27.129 --> 00:08:27.139 align:start position:0%
but hey stuff like that you probably
 

00:08:27.139 --> 00:08:29.019 align:start position:0%
but hey stuff like that you probably
wouldn't<00:08:27.560><c> even</c><00:08:27.620><c> realize</c><00:08:28.039><c> exists</c><00:08:28.789><c> if</c><00:08:28.939><c> you</c>

00:08:29.019 --> 00:08:29.029 align:start position:0%
wouldn't even realize exists if you
 

00:08:29.029 --> 00:08:30.760 align:start position:0%
wouldn't even realize exists if you
don't<00:08:29.210><c> look</c><00:08:29.360><c> at</c><00:08:29.539><c> things</c><00:08:29.689><c> like</c><00:08:29.870><c> the</c><00:08:30.349><c> reference</c>

00:08:30.760 --> 00:08:30.770 align:start position:0%
don't look at things like the reference
 

00:08:30.770 --> 00:08:32.560 align:start position:0%
don't look at things like the reference
and<00:08:30.949><c> see</c><00:08:31.159><c> what's</c><00:08:31.460><c> possible</c><00:08:31.699><c> because</c><00:08:32.209><c> you</c><00:08:32.360><c> can</c>

00:08:32.560 --> 00:08:32.570 align:start position:0%
and see what's possible because you can
 

00:08:32.570 --> 00:08:34.990 align:start position:0%
and see what's possible because you can
see<00:08:32.750><c> that</c><00:08:32.930><c> over</c><00:08:33.560><c> here</c><00:08:33.589><c> we</c><00:08:34.070><c> have</c><00:08:34.519><c> our</c><00:08:34.669><c> kind</c><00:08:34.940><c> of</c>

00:08:34.990 --> 00:08:35.000 align:start position:0%
see that over here we have our kind of
 

00:08:35.000 --> 00:08:37.209 align:start position:0%
see that over here we have our kind of
parameters<00:08:35.539><c> and</c><00:08:35.750><c> whatever</c><00:08:36.169><c> which</c><00:08:36.529><c> is</c><00:08:36.740><c> one</c><00:08:37.099><c> of</c>

00:08:37.209 --> 00:08:37.219 align:start position:0%
parameters and whatever which is one of
 

00:08:37.219 --> 00:08:39.550 align:start position:0%
parameters and whatever which is one of
them<00:08:37.339><c> is</c><00:08:37.550><c> that</c><00:08:37.880><c> that</c><00:08:38.449><c> beautiful</c><00:08:38.959><c> optional</c>

00:08:39.550 --> 00:08:39.560 align:start position:0%
them is that that beautiful optional
 

00:08:39.560 --> 00:08:41.409 align:start position:0%
them is that that beautiful optional
kind<00:08:39.890><c> of</c><00:08:39.949><c> sequence</c><00:08:40.310><c> of</c><00:08:40.459><c> specifies</c><00:08:40.969><c> Const</c>

00:08:41.409 --> 00:08:41.419 align:start position:0%
kind of sequence of specifies Const
 

00:08:41.419 --> 00:08:42.430 align:start position:0%
kind of sequence of specifies Const
expression<00:08:41.899><c> is</c><00:08:41.990><c> another</c><00:08:42.199><c> one</c>

00:08:42.430 --> 00:08:42.440 align:start position:0%
expression is another one
 

00:08:42.440 --> 00:08:45.250 align:start position:0%
expression is another one
as<00:08:42.979><c> well</c><00:08:43.310><c> anyway</c><00:08:44.120><c> that's</c><00:08:44.630><c> essentially</c><00:08:45.140><c> how</c>

00:08:45.250 --> 00:08:45.260 align:start position:0%
as well anyway that's essentially how
 

00:08:45.260 --> 00:08:46.720 align:start position:0%
as well anyway that's essentially how
long<00:08:45.440><c> does</c><00:08:45.590><c> work</c><00:08:45.800><c> it's</c><00:08:46.130><c> pretty</c><00:08:46.280><c> simple</c><00:08:46.640><c> I</c>

00:08:46.720 --> 00:08:46.730 align:start position:0%
long does work it's pretty simple I
 

00:08:46.730 --> 00:08:48.730 align:start position:0%
long does work it's pretty simple I
don't<00:08:46.760><c> want</c><00:08:47.030><c> to</c><00:08:47.150><c> drag</c><00:08:47.810><c> this</c><00:08:47.930><c> video</c><00:08:48.200><c> on</c><00:08:48.350><c> because</c>

00:08:48.730 --> 00:08:48.740 align:start position:0%
don't want to drag this video on because
 

00:08:48.740 --> 00:08:52.000 align:start position:0%
don't want to drag this video on because
it<00:08:49.640><c> makes</c><00:08:50.330><c> sense</c><00:08:50.540><c> I</c><00:08:50.810><c> hope</c><00:08:51.050><c> to</c><00:08:51.290><c> most</c><00:08:51.470><c> people</c><00:08:51.830><c> it</c>

00:08:52.000 --> 00:08:52.010 align:start position:0%
it makes sense I hope to most people it
 

00:08:52.010 --> 00:08:54.130 align:start position:0%
it makes sense I hope to most people it
is<00:08:52.070><c> fairly</c><00:08:52.490><c> simple</c><00:08:52.910><c> the</c><00:08:52.970><c> usages</c><00:08:53.690><c> of</c><00:08:53.840><c> it</c><00:08:53.990><c> are</c>

00:08:54.130 --> 00:08:54.140 align:start position:0%
is fairly simple the usages of it are
 

00:08:54.140 --> 00:08:55.810 align:start position:0%
is fairly simple the usages of it are
the<00:08:54.200><c> most</c><00:08:54.410><c> important</c><00:08:54.800><c> part</c><00:08:55.040><c> we're</c><00:08:55.520><c> gonna</c><00:08:55.610><c> look</c>

00:08:55.810 --> 00:08:55.820 align:start position:0%
the most important part we're gonna look
 

00:08:55.820 --> 00:08:58.060 align:start position:0%
the most important part we're gonna look
at<00:08:55.970><c> one</c><00:08:56.270><c> use</c><00:08:56.600><c> for</c><00:08:56.630><c> why</c><00:08:57.440><c> you</c><00:08:57.500><c> might</c><00:08:57.770><c> want</c><00:08:57.920><c> to</c><00:08:57.950><c> use</c>

00:08:58.060 --> 00:08:58.070 align:start position:0%
at one use for why you might want to use
 

00:08:58.070 --> 00:08:59.620 align:start position:0%
at one use for why you might want to use
a<00:08:58.100><c> lambda</c><00:08:58.370><c> in</c><00:08:58.940><c> something</c><00:08:59.360><c> called</c>

00:08:59.620 --> 00:08:59.630 align:start position:0%
a lambda in something called
 

00:08:59.630 --> 00:09:01.570 align:start position:0%
a lambda in something called
STD<00:09:00.080><c> find</c><00:09:00.440><c> F</c><00:09:00.680><c> which</c><00:09:01.070><c> is</c><00:09:01.100><c> part</c><00:09:01.430><c> of</c><00:09:01.460><c> the</c>

00:09:01.570 --> 00:09:01.580 align:start position:0%
STD find F which is part of the
 

00:09:01.580 --> 00:09:03.460 align:start position:0%
STD find F which is part of the
algorithm<00:09:01.940><c> pedophile</c><00:09:02.660><c> and</c><00:09:02.840><c> it's</c><00:09:02.990><c> basically</c>

00:09:03.460 --> 00:09:03.470 align:start position:0%
algorithm pedophile and it's basically
 

00:09:03.470 --> 00:09:05.200 align:start position:0%
algorithm pedophile and it's basically
something<00:09:03.770><c> that</c><00:09:03.890><c> we</c><00:09:04.100><c> can</c><00:09:04.340><c> use</c><00:09:04.550><c> to</c><00:09:04.790><c> find</c><00:09:05.030><c> a</c>

00:09:05.200 --> 00:09:05.210 align:start position:0%
something that we can use to find a
 

00:09:05.210 --> 00:09:09.250 align:start position:0%
something that we can use to find a
value<00:09:05.600><c> inside</c><00:09:06.380><c> of</c><00:09:06.710><c> some</c><00:09:07.580><c> kind</c><00:09:07.850><c> of</c><00:09:08.000><c> iterator</c><00:09:08.600><c> so</c>

00:09:09.250 --> 00:09:09.260 align:start position:0%
value inside of some kind of iterator so
 

00:09:09.260 --> 00:09:10.780 align:start position:0%
value inside of some kind of iterator so
over<00:09:09.470><c> here</c><00:09:09.650><c> we</c><00:09:09.800><c> do</c><00:09:09.950><c> have</c><00:09:09.980><c> this</c><00:09:10.250><c> vector</c><00:09:10.670><c> of</c>

00:09:10.780 --> 00:09:10.790 align:start position:0%
over here we do have this vector of
 

00:09:10.790 --> 00:09:13.420 align:start position:0%
over here we do have this vector of
values<00:09:10.940><c> I've</c><00:09:11.510><c> included</c><00:09:12.470><c> algorithm</c><00:09:13.070><c> over</c><00:09:13.280><c> here</c>

00:09:13.420 --> 00:09:13.430 align:start position:0%
values I've included algorithm over here
 

00:09:13.430 --> 00:09:15.220 align:start position:0%
values I've included algorithm over here
at<00:09:13.520><c> the</c><00:09:13.580><c> top</c><00:09:13.790><c> then</c><00:09:14.060><c> I'm</c><00:09:14.150><c> going</c><00:09:14.300><c> to</c><00:09:14.360><c> type</c><00:09:14.570><c> in</c><00:09:14.720><c> STD</c>

00:09:15.220 --> 00:09:15.230 align:start position:0%
at the top then I'm going to type in STD
 

00:09:15.230 --> 00:09:17.440 align:start position:0%
at the top then I'm going to type in STD
find<00:09:15.620><c> if</c><00:09:16.160><c> so</c><00:09:16.640><c> this</c><00:09:16.760><c> function</c><00:09:17.150><c> is</c><00:09:17.180><c> basically</c>

00:09:17.440 --> 00:09:17.450 align:start position:0%
find if so this function is basically
 

00:09:17.450 --> 00:09:19.180 align:start position:0%
find if so this function is basically
just<00:09:17.840><c> going</c><00:09:17.990><c> to</c><00:09:18.110><c> accept</c><00:09:18.710><c> some</c><00:09:18.980><c> kind</c><00:09:19.130><c> of</c>

00:09:19.180 --> 00:09:19.190 align:start position:0%
just going to accept some kind of
 

00:09:19.190 --> 00:09:20.920 align:start position:0%
just going to accept some kind of
iterator<00:09:19.580><c> so</c><00:09:19.760><c> we'll</c><00:09:19.880><c> give</c><00:09:20.030><c> it</c><00:09:20.060><c> values</c><00:09:20.510><c> begin</c>

00:09:20.920 --> 00:09:20.930 align:start position:0%
iterator so we'll give it values begin
 

00:09:20.930 --> 00:09:23.050 align:start position:0%
iterator so we'll give it values begin
and<00:09:21.080><c> values</c><00:09:21.350><c> and</c><00:09:21.560><c> so</c><00:09:21.950><c> between</c><00:09:22.160><c> the</c><00:09:22.640><c> beginning</c>

00:09:23.050 --> 00:09:23.060 align:start position:0%
and values and so between the beginning
 

00:09:23.060 --> 00:09:26.500 align:start position:0%
and values and so between the beginning
and<00:09:23.390><c> end</c><00:09:23.840><c> of</c><00:09:24.260><c> this</c><00:09:24.590><c> vector</c><00:09:25.220><c> of</c><00:09:25.430><c> values</c><00:09:26.090><c> that</c><00:09:26.330><c> we</c>

00:09:26.500 --> 00:09:26.510 align:start position:0%
and end of this vector of values that we
 

00:09:26.510 --> 00:09:29.320 align:start position:0%
and end of this vector of values that we
have<00:09:26.780><c> here</c><00:09:27.110><c> we</c><00:09:27.680><c> can</c><00:09:27.920><c> basically</c><00:09:28.160><c> say</c><00:09:28.820><c> hey</c>

00:09:29.320 --> 00:09:29.330 align:start position:0%
have here we can basically say hey
 

00:09:29.330 --> 00:09:32.380 align:start position:0%
have here we can basically say hey
returned<00:09:29.780><c> for</c><00:09:30.170><c> me</c><00:09:30.290><c> an</c><00:09:30.410><c> iterator</c><00:09:30.830><c> that</c><00:09:31.640><c> is</c><00:09:31.790><c> the</c>

00:09:32.380 --> 00:09:32.390 align:start position:0%
returned for me an iterator that is the
 

00:09:32.390 --> 00:09:34.510 align:start position:0%
returned for me an iterator that is the
first<00:09:32.630><c> element</c><00:09:32.840><c> that</c><00:09:33.200><c> matches</c><00:09:33.770><c> whatever</c><00:09:34.190><c> kind</c>

00:09:34.510 --> 00:09:34.520 align:start position:0%
first element that matches whatever kind
 

00:09:34.520 --> 00:09:36.700 align:start position:0%
first element that matches whatever kind
of<00:09:34.640><c> predicate</c><00:09:35.420><c> I</c><00:09:35.480><c> pass</c><00:09:35.720><c> in</c><00:09:35.960><c> so</c><00:09:36.230><c> in</c><00:09:36.350><c> other</c><00:09:36.440><c> words</c>

00:09:36.700 --> 00:09:36.710 align:start position:0%
of predicate I pass in so in other words
 

00:09:36.710 --> 00:09:38.860 align:start position:0%
of predicate I pass in so in other words
what<00:09:37.310><c> we</c><00:09:37.430><c> can</c><00:09:37.550><c> do</c><00:09:37.670><c> here</c><00:09:37.910><c> is</c><00:09:38.150><c> write</c><00:09:38.360><c> a</c><00:09:38.420><c> function</c>

00:09:38.860 --> 00:09:38.870 align:start position:0%
what we can do here is write a function
 

00:09:38.870 --> 00:09:40.870 align:start position:0%
what we can do here is write a function
is<00:09:39.470><c> going</c><00:09:39.770><c> to</c><00:09:39.890><c> take</c><00:09:40.040><c> in</c><00:09:40.220><c> this</c><00:09:40.370><c> is</c><00:09:40.460><c> a</c><00:09:40.490><c> vector</c><00:09:40.670><c> of</c>

00:09:40.870 --> 00:09:40.880 align:start position:0%
is going to take in this is a vector of
 

00:09:40.880 --> 00:09:42.810 align:start position:0%
is going to take in this is a vector of
integers<00:09:40.940><c> so</c><00:09:41.360><c> we'll</c><00:09:41.510><c> take</c><00:09:41.630><c> an</c><00:09:41.810><c> int</c><00:09:42.020><c> value</c><00:09:42.080><c> and</c>

00:09:42.810 --> 00:09:42.820 align:start position:0%
integers so we'll take an int value and
 

00:09:42.820 --> 00:09:45.190 align:start position:0%
integers so we'll take an int value and
then<00:09:43.820><c> it</c><00:09:43.970><c> has</c><00:09:44.150><c> to</c><00:09:44.300><c> return</c><00:09:44.510><c> a</c><00:09:44.570><c> boolean</c><00:09:44.810><c> which</c>

00:09:45.190 --> 00:09:45.200 align:start position:0%
then it has to return a boolean which
 

00:09:45.200 --> 00:09:46.570 align:start position:0%
then it has to return a boolean which
basically<00:09:45.530><c> says</c><00:09:45.890><c> whether</c><00:09:46.190><c> or</c><00:09:46.280><c> not</c><00:09:46.370><c> it</c>

00:09:46.570 --> 00:09:46.580 align:start position:0%
basically says whether or not it
 

00:09:46.580 --> 00:09:47.950 align:start position:0%
basically says whether or not it
fulfills<00:09:46.940><c> our</c><00:09:47.030><c> condition</c><00:09:47.510><c> so</c><00:09:47.690><c> we'll</c><00:09:47.810><c> say</c>

00:09:47.950 --> 00:09:47.960 align:start position:0%
fulfills our condition so we'll say
 

00:09:47.960 --> 00:09:51.010 align:start position:0%
fulfills our condition so we'll say
maybe<00:09:48.200><c> you</c><00:09:48.380><c> value</c><00:09:48.800><c> is</c><00:09:48.950><c> greater</c><00:09:49.250><c> than</c><00:09:49.880><c> three</c><00:09:50.630><c> or</c>

00:09:51.010 --> 00:09:51.020 align:start position:0%
maybe you value is greater than three or
 

00:09:51.020 --> 00:09:52.480 align:start position:0%
maybe you value is greater than three or
something<00:09:51.320><c> like</c><00:09:51.530><c> that</c><00:09:51.710><c> let's</c><00:09:52.070><c> just</c><00:09:52.370><c> return</c>

00:09:52.480 --> 00:09:52.490 align:start position:0%
something like that let's just return
 

00:09:52.490 --> 00:09:55.450 align:start position:0%
something like that let's just return
that<00:09:52.850><c> so</c><00:09:53.030><c> return</c><00:09:53.510><c> value</c><00:09:53.810><c> grid</c><00:09:53.990><c> entry</c><00:09:54.320><c> so</c><00:09:54.650><c> it's</c>

00:09:55.450 --> 00:09:55.460 align:start position:0%
that so return value grid entry so it's
 

00:09:55.460 --> 00:09:57.520 align:start position:0%
that so return value grid entry so it's
going<00:09:55.670><c> to</c><00:09:55.790><c> look</c><00:09:56.090><c> through</c><00:09:56.360><c> this</c><00:09:56.420><c> vector</c><00:09:56.960><c> for</c>

00:09:57.520 --> 00:09:57.530 align:start position:0%
going to look through this vector for
 

00:09:57.530 --> 00:09:59.410 align:start position:0%
going to look through this vector for
numbers<00:09:57.950><c> for</c><00:09:58.190><c> integers</c><00:09:58.610><c> that</c><00:09:58.880><c> are</c><00:09:59.030><c> larger</c>

00:09:59.410 --> 00:09:59.420 align:start position:0%
numbers for integers that are larger
 

00:09:59.420 --> 00:10:01.780 align:start position:0%
numbers for integers that are larger
than<00:09:59.600><c> three</c><00:09:59.900><c> and</c><00:10:00.140><c> return</c><00:10:00.620><c> to</c><00:10:00.950><c> us</c><00:10:01.100><c> an</c><00:10:01.430><c> iterator</c>

00:10:01.780 --> 00:10:01.790 align:start position:0%
than three and return to us an iterator
 

00:10:01.790 --> 00:10:04.060 align:start position:0%
than three and return to us an iterator
of<00:10:02.030><c> that</c><00:10:02.510><c> which</c><00:10:03.230><c> will</c><00:10:03.320><c> essentially</c><00:10:03.650><c> be</c><00:10:03.860><c> just</c>

00:10:04.060 --> 00:10:04.070 align:start position:0%
of that which will essentially be just
 

00:10:04.070 --> 00:10:06.370 align:start position:0%
of that which will essentially be just
the<00:10:04.160><c> first</c><00:10:04.370><c> element</c><00:10:04.820><c> so</c><00:10:05.210><c> what</c><00:10:05.840><c> it</c><00:10:05.960><c> should</c><00:10:06.200><c> do</c>

00:10:06.370 --> 00:10:06.380 align:start position:0%
the first element so what it should do
 

00:10:06.380 --> 00:10:09.160 align:start position:0%
the first element so what it should do
hopefully<00:10:06.920><c> is</c><00:10:07.100><c> return</c><00:10:07.490><c> five</c><00:10:07.850><c> for</c><00:10:08.120><c> us</c><00:10:08.270><c> so</c><00:10:08.930><c> if</c><00:10:09.020><c> we</c>

00:10:09.160 --> 00:10:09.170 align:start position:0%
hopefully is return five for us so if we
 

00:10:09.170 --> 00:10:11.800 align:start position:0%
hopefully is return five for us so if we
assign<00:10:09.410><c> this</c><00:10:09.680><c> order</c><00:10:10.250><c> iterator</c><00:10:10.670><c> equals</c><00:10:11.300><c> a</c><00:10:11.480><c> city</c>

00:10:11.800 --> 00:10:11.810 align:start position:0%
assign this order iterator equals a city
 

00:10:11.810 --> 00:10:15.760 align:start position:0%
assign this order iterator equals a city
find<00:10:12.080><c> F</c><00:10:12.550><c> and</c><00:10:13.550><c> then</c><00:10:13.790><c> we'll</c><00:10:13.910><c> print</c><00:10:14.120><c> out</c><00:10:14.650><c> we'll</c><00:10:15.650><c> do</c>

00:10:15.760 --> 00:10:15.770 align:start position:0%
find F and then we'll print out we'll do
 

00:10:15.770 --> 00:10:17.170 align:start position:0%
find F and then we'll print out we'll do
reference<00:10:16.070><c> that</c><00:10:16.190><c> iterator</c><00:10:16.580><c> and</c><00:10:16.640><c> print</c><00:10:16.940><c> it</c><00:10:17.030><c> up</c>

00:10:17.170 --> 00:10:17.180 align:start position:0%
reference that iterator and print it up
 

00:10:17.180 --> 00:10:18.940 align:start position:0%
reference that iterator and print it up
we<00:10:17.480><c> should</c><00:10:17.540><c> get</c><00:10:17.840><c> the</c><00:10:18.020><c> value</c><00:10:18.140><c> five</c><00:10:18.470><c> printing</c>

00:10:18.940 --> 00:10:18.950 align:start position:0%
we should get the value five printing
 

00:10:18.950 --> 00:10:21.580 align:start position:0%
we should get the value five printing
why<00:10:19.490><c> because</c><00:10:19.940><c> we've</c><00:10:20.480><c> specified</c><00:10:20.780><c> that</c><00:10:21.230><c> we</c><00:10:21.290><c> want</c>

00:10:21.580 --> 00:10:21.590 align:start position:0%
why because we've specified that we want
 

00:10:21.590 --> 00:10:23.410 align:start position:0%
why because we've specified that we want
a<00:10:21.680><c> value</c><00:10:21.980><c> greater</c><00:10:22.220><c> than</c><00:10:22.310><c> three</c><00:10:22.730><c> using</c><00:10:23.360><c> a</c>

00:10:23.410 --> 00:10:23.420 align:start position:0%
a value greater than three using a
 

00:10:23.420 --> 00:10:26.050 align:start position:0%
a value greater than three using a
lambda<00:10:23.630><c> and</c><00:10:23.960><c> five</c><00:10:24.830><c> happens</c><00:10:25.339><c> to</c><00:10:25.460><c> be</c><00:10:25.610><c> the</c><00:10:25.790><c> first</c>

00:10:26.050 --> 00:10:26.060 align:start position:0%
lambda and five happens to be the first
 

00:10:26.060 --> 00:10:28.180 align:start position:0%
lambda and five happens to be the first
number<00:10:26.510><c> that</c><00:10:26.630><c> is</c><00:10:26.720><c> greater</c><00:10:26.839><c> than</c><00:10:27.020><c> three</c><00:10:27.440><c> inside</c>

00:10:28.180 --> 00:10:28.190 align:start position:0%
number that is greater than three inside
 

00:10:28.190 --> 00:10:30.490 align:start position:0%
number that is greater than three inside
this<00:10:28.400><c> list</c><00:10:28.670><c> of</c><00:10:28.820><c> values</c><00:10:29.030><c> that</c><00:10:29.210><c> we</c><00:10:29.450><c> have</c><00:10:29.630><c> so</c><00:10:30.320><c> if</c><00:10:30.410><c> I</c>

00:10:30.490 --> 00:10:30.500 align:start position:0%
this list of values that we have so if I
 

00:10:30.500 --> 00:10:32.980 align:start position:0%
this list of values that we have so if I
just<00:10:30.710><c> kind</c><00:10:30.950><c> of</c><00:10:31.040><c> put</c><00:10:31.820><c> a</c><00:10:31.850><c> breakpoint</c><00:10:32.180><c> somewhere</c>

00:10:32.980 --> 00:10:32.990 align:start position:0%
just kind of put a breakpoint somewhere
 

00:10:32.990 --> 00:10:35.079 align:start position:0%
just kind of put a breakpoint somewhere
here<00:10:33.350><c> and</c><00:10:33.530><c> run</c><00:10:33.800><c> my</c><00:10:33.980><c> code</c><00:10:34.190><c> you'll</c><00:10:34.670><c> see</c><00:10:34.760><c> that</c><00:10:35.000><c> we</c>

00:10:35.079 --> 00:10:35.089 align:start position:0%
here and run my code you'll see that we
 

00:10:35.089 --> 00:10:36.970 align:start position:0%
here and run my code you'll see that we
get<00:10:35.240><c> the</c><00:10:35.570><c> value</c><00:10:35.600><c> five</c><00:10:36.020><c> printing</c><00:10:36.470><c> as</c><00:10:36.740><c> we</c>

00:10:36.970 --> 00:10:36.980 align:start position:0%
get the value five printing as we
 

00:10:36.980 --> 00:10:38.800 align:start position:0%
get the value five printing as we
expected<00:10:37.400><c> and</c><00:10:37.880><c> we've</c><00:10:38.240><c> managed</c><00:10:38.540><c> to</c><00:10:38.660><c> do</c><00:10:38.780><c> that</c>

00:10:38.800 --> 00:10:38.810 align:start position:0%
expected and we've managed to do that
 

00:10:38.810 --> 00:10:40.930 align:start position:0%
expected and we've managed to do that
fairly<00:10:39.170><c> easily</c><00:10:39.320><c> by</c><00:10:39.890><c> just</c><00:10:40.130><c> specifying</c><00:10:40.310><c> a</c><00:10:40.790><c> nice</c>

00:10:40.930 --> 00:10:40.940 align:start position:0%
fairly easily by just specifying a nice
 

00:10:40.940 --> 00:10:42.850 align:start position:0%
fairly easily by just specifying a nice
little<00:10:41.150><c> quick</c><00:10:41.390><c> function</c><00:10:41.839><c> that</c><00:10:42.230><c> we</c><00:10:42.350><c> want</c><00:10:42.589><c> this</c>

00:10:42.850 --> 00:10:42.860 align:start position:0%
little quick function that we want this
 

00:10:42.860 --> 00:10:45.430 align:start position:0%
little quick function that we want this
court<00:10:43.220><c> this</c><00:10:43.339><c> code</c><00:10:43.580><c> to</c><00:10:43.730><c> call</c><00:10:43.910><c> so</c><00:10:44.240><c> what</c><00:10:45.110><c> this</c><00:10:45.290><c> is</c>

00:10:45.430 --> 00:10:45.440 align:start position:0%
court this code to call so what this is
 

00:10:45.440 --> 00:10:47.140 align:start position:0%
court this code to call so what this is
going<00:10:45.589><c> to</c><00:10:45.680><c> do</c><00:10:45.860><c> is</c><00:10:46.100><c> loop</c><00:10:46.430><c> through</c><00:10:46.700><c> our</c><00:10:46.880><c> list</c>

00:10:47.140 --> 00:10:47.150 align:start position:0%
going to do is loop through our list
 

00:10:47.150 --> 00:10:48.790 align:start position:0%
going to do is loop through our list
kind<00:10:47.390><c> of</c><00:10:47.540><c> like</c><00:10:47.690><c> what</c><00:10:47.870><c> I've</c><00:10:47.960><c> got</c><00:10:48.140><c> here</c><00:10:48.350><c> in</c><00:10:48.440><c> 4h</c>

00:10:48.790 --> 00:10:48.800 align:start position:0%
kind of like what I've got here in 4h
 

00:10:48.800 --> 00:10:51.250 align:start position:0%
kind of like what I've got here in 4h
and<00:10:49.040><c> it's</c><00:10:49.580><c> as</c><00:10:49.700><c> if</c><00:10:49.880><c> we</c><00:10:50.089><c> just</c><00:10:50.330><c> added</c><00:10:50.570><c> a</c><00:10:50.810><c> little</c><00:10:50.839><c> if</c>

00:10:51.250 --> 00:10:51.260 align:start position:0%
and it's as if we just added a little if
 

00:10:51.260 --> 00:10:53.570 align:start position:0%
and it's as if we just added a little if
value<00:10:51.830><c> greater</c><00:10:52.070><c> than</c><00:10:52.280><c> five</c>

00:10:53.570 --> 00:10:53.580 align:start position:0%
value greater than five
 

00:10:53.580 --> 00:10:56.270 align:start position:0%
value greater than five
and<00:10:53.640><c> return</c><00:10:54.450><c> kind</c><00:10:54.990><c> of</c><00:10:55.140><c> that</c><00:10:55.470><c> value</c><00:10:55.980><c> that's</c>

00:10:56.270 --> 00:10:56.280 align:start position:0%
and return kind of that value that's
 

00:10:56.280 --> 00:10:58.310 align:start position:0%
and return kind of that value that's
basically<00:10:56.760><c> what</c><00:10:57.090><c> this</c><00:10:57.270><c> is</c><00:10:57.330><c> doing</c><00:10:57.480><c> for</c><00:10:57.930><c> us</c><00:10:58.110><c> but</c>

00:10:58.310 --> 00:10:58.320 align:start position:0%
basically what this is doing for us but
 

00:10:58.320 --> 00:11:00.590 align:start position:0%
basically what this is doing for us but
we<00:10:58.440><c> were</c><00:10:59.160><c> able</c><00:10:59.460><c> to</c><00:10:59.490><c> specify</c><00:11:00.120><c> this</c><00:11:00.180><c> if</c>

00:11:00.590 --> 00:11:00.600 align:start position:0%
we were able to specify this if
 

00:11:00.600 --> 00:11:03.080 align:start position:0%
we were able to specify this if
statement<00:11:00.810><c> condition</c><00:11:01.620><c> there's</c><00:11:02.100><c> bullying</c><00:11:02.520><c> by</c>

00:11:03.080 --> 00:11:03.090 align:start position:0%
statement condition there's bullying by
 

00:11:03.090 --> 00:11:04.400 align:start position:0%
statement condition there's bullying by
just<00:11:03.300><c> using</c><00:11:03.390><c> a</c><00:11:03.570><c> lambda</c><00:11:03.780><c> really</c><00:11:04.110><c> quickly</c><00:11:04.350><c> like</c>

00:11:04.400 --> 00:11:04.410 align:start position:0%
just using a lambda really quickly like
 

00:11:04.410 --> 00:11:06.110 align:start position:0%
just using a lambda really quickly like
that<00:11:04.470><c> anyway</c><00:11:05.460><c> I</c><00:11:05.490><c> hope</c><00:11:05.580><c> you</c><00:11:05.640><c> guys</c><00:11:05.760><c> enjoyed</c><00:11:06.030><c> this</c>

00:11:06.110 --> 00:11:06.120 align:start position:0%
that anyway I hope you guys enjoyed this
 

00:11:06.120 --> 00:11:07.850 align:start position:0%
that anyway I hope you guys enjoyed this
video<00:11:06.330><c> if</c><00:11:06.780><c> you</c><00:11:06.930><c> did</c><00:11:07.080><c> you</c><00:11:07.230><c> can</c><00:11:07.320><c> hit</c><00:11:07.470><c> the</c><00:11:07.590><c> like</c>

00:11:07.850 --> 00:11:07.860 align:start position:0%
video if you did you can hit the like
 

00:11:07.860 --> 00:11:09.200 align:start position:0%
video if you did you can hit the like
button<00:11:08.220><c> that's</c><00:11:08.730><c> pretty</c><00:11:08.880><c> much</c><00:11:08.940><c> all</c><00:11:09.060><c> there</c><00:11:09.150><c> is</c>

00:11:09.200 --> 00:11:09.210 align:start position:0%
button that's pretty much all there is
 

00:11:09.210 --> 00:11:11.690 align:start position:0%
button that's pretty much all there is
to<00:11:09.330><c> lambdas</c><00:11:10.080><c> thank</c><00:11:10.770><c> you</c><00:11:10.920><c> huge</c><00:11:11.310><c> thank</c><00:11:11.490><c> you</c><00:11:11.580><c> as</c>

00:11:11.690 --> 00:11:11.700 align:start position:0%
to lambdas thank you huge thank you as
 

00:11:11.700 --> 00:11:12.860 align:start position:0%
to lambdas thank you huge thank you as
always<00:11:11.850><c> to</c><00:11:12.000><c> all</c><00:11:12.180><c> of</c><00:11:12.270><c> my</c><00:11:12.390><c> patreon</c><00:11:12.840><c> supporters</c>

00:11:12.860 --> 00:11:12.870 align:start position:0%
always to all of my patreon supporters
 

00:11:12.870 --> 00:11:14.720 align:start position:0%
always to all of my patreon supporters
you<00:11:13.350><c> can</c><00:11:13.470><c> head</c><00:11:13.680><c> on</c><00:11:13.710><c> over</c><00:11:13.830><c> to</c><00:11:14.100><c> patreon</c><00:11:14.430><c> my</c><00:11:14.550><c> home</c>

00:11:14.720 --> 00:11:14.730 align:start position:0%
you can head on over to patreon my home
 

00:11:14.730 --> 00:11:16.700 align:start position:0%
you can head on over to patreon my home
4/2<00:11:15.210><c> channel</c><00:11:15.510><c> and</c><00:11:15.660><c> help</c><00:11:16.050><c> support</c><00:11:16.260><c> all</c><00:11:16.620><c> the</c>

00:11:16.700 --> 00:11:16.710 align:start position:0%
4/2 channel and help support all the
 

00:11:16.710 --> 00:11:18.220 align:start position:0%
4/2 channel and help support all the
videos<00:11:16.950><c> that</c><00:11:17.070><c> I</c><00:11:17.130><c> make</c><00:11:17.250><c> care</c><00:11:17.430><c> of</c><00:11:17.490><c> my</c><00:11:17.550><c> channel</c>

00:11:18.220 --> 00:11:18.230 align:start position:0%
videos that I make care of my channel
 

00:11:18.230 --> 00:11:21.770 align:start position:0%
videos that I make care of my channel
next<00:11:19.230><c> time</c><00:11:19.440><c> I</c><00:11:19.860><c> don't</c><00:11:20.460><c> even</c><00:11:20.670><c> know</c><00:11:20.880><c> what</c><00:11:21.000><c> we're</c>

00:11:21.770 --> 00:11:21.780 align:start position:0%
next time I don't even know what we're
 

00:11:21.780 --> 00:11:23.090 align:start position:0%
next time I don't even know what we're
gonna<00:11:21.870><c> cover</c><00:11:22.080><c> next</c><00:11:22.440><c> time</c><00:11:22.620><c> to</c><00:11:22.770><c> be</c><00:11:22.890><c> honest</c>

00:11:23.090 --> 00:11:23.100 align:start position:0%
gonna cover next time to be honest
 

00:11:23.100 --> 00:11:24.140 align:start position:0%
gonna cover next time to be honest
probably<00:11:23.190><c> we</c><00:11:23.610><c> haven't</c><00:11:23.820><c> even</c><00:11:23.880><c> covered</c>

00:11:24.140 --> 00:11:24.150 align:start position:0%
probably we haven't even covered
 

00:11:24.150 --> 00:11:26.000 align:start position:0%
probably we haven't even covered
standard<00:11:24.630><c> function</c><00:11:24.990><c> yet</c><00:11:25.170><c> but</c><00:11:25.680><c> I</c><00:11:25.710><c> feel</c><00:11:25.920><c> like</c>

00:11:26.000 --> 00:11:26.010 align:start position:0%
standard function yet but I feel like
 

00:11:26.010 --> 00:11:27.530 align:start position:0%
standard function yet but I feel like
these<00:11:26.220><c> function</c><00:11:26.640><c> pointers</c><00:11:26.970><c> I</c><00:11:27.180><c> just</c><00:11:27.390><c> gonna</c>

00:11:27.530 --> 00:11:27.540 align:start position:0%
these function pointers I just gonna
 

00:11:27.540 --> 00:11:29.780 align:start position:0%
these function pointers I just gonna
drag<00:11:27.870><c> on</c><00:11:27.900><c> for</c><00:11:28.230><c> a</c><00:11:28.290><c> while</c><00:11:28.440><c> and</c><00:11:28.740><c> I</c><00:11:29.220><c> think</c><00:11:29.460><c> you</c><00:11:29.610><c> guys</c>

00:11:29.780 --> 00:11:29.790 align:start position:0%
drag on for a while and I think you guys
 

00:11:29.790 --> 00:11:31.280 align:start position:0%
drag on for a while and I think you guys
all<00:11:30.090><c> understand</c><00:11:30.750><c> them</c><00:11:30.930><c> if</c><00:11:31.020><c> you</c><00:11:31.140><c> don't</c>

00:11:31.280 --> 00:11:31.290 align:start position:0%
all understand them if you don't
 

00:11:31.290 --> 00:11:33.500 align:start position:0%
all understand them if you don't
definitely<00:11:31.800><c> leave</c><00:11:31.890><c> a</c><00:11:31.920><c> comment</c><00:11:32.340><c> below</c><00:11:32.510><c> but</c>

00:11:33.500 --> 00:11:33.510 align:start position:0%
definitely leave a comment below but
 

00:11:33.510 --> 00:11:35.570 align:start position:0%
definitely leave a comment below but
anyway<00:11:33.840><c> I</c><00:11:34.110><c> will</c><00:11:34.830><c> see</c><00:11:34.950><c> you</c><00:11:35.010><c> guys</c><00:11:35.100><c> next</c><00:11:35.160><c> time</c>

00:11:35.570 --> 00:11:35.580 align:start position:0%
anyway I will see you guys next time
 

00:11:35.580 --> 00:11:37.160 align:start position:0%
anyway I will see you guys next time
goodbye

00:11:37.160 --> 00:11:37.170 align:start position:0%
goodbye
 

00:11:37.170 --> 00:11:52.760 align:start position:0%
goodbye
[Music]

