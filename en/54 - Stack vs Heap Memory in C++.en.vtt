WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.670 align:start position:0%
 
hey<00:00:00.210><c> what's</c><00:00:00.450><c> up</c><00:00:00.539><c> guys</c><00:00:00.690><c> my</c><00:00:01.050><c> name</c><00:00:01.230><c> is</c><00:00:01.260><c> achernar</c>

00:00:01.670 --> 00:00:01.680 align:start position:0%
hey what's up guys my name is achernar
 

00:00:01.680 --> 00:00:03.200 align:start position:0%
hey what's up guys my name is achernar
and<00:00:01.860><c> welcome</c><00:00:02.220><c> back</c><00:00:02.250><c> to</c><00:00:02.550><c> my</c><00:00:02.669><c> say</c><00:00:02.820><c> boss</c><00:00:03.000><c> boss</c>

00:00:03.200 --> 00:00:03.210 align:start position:0%
and welcome back to my say boss boss
 

00:00:03.210 --> 00:00:05.269 align:start position:0%
and welcome back to my say boss boss
series<00:00:03.629><c> so</c><00:00:04.200><c> today</c><00:00:04.500><c> we're</c><00:00:04.920><c> gonna</c><00:00:05.009><c> be</c><00:00:05.160><c> talking</c>

00:00:05.269 --> 00:00:05.279 align:start position:0%
series so today we're gonna be talking
 

00:00:05.279 --> 00:00:07.039 align:start position:0%
series so today we're gonna be talking
all<00:00:05.549><c> about</c><00:00:05.700><c> memory</c><00:00:06.060><c> and</c><00:00:06.480><c> in</c><00:00:06.569><c> fact</c><00:00:06.779><c> we're</c><00:00:06.930><c> gonna</c>

00:00:07.039 --> 00:00:07.049 align:start position:0%
all about memory and in fact we're gonna
 

00:00:07.049 --> 00:00:08.450 align:start position:0%
all about memory and in fact we're gonna
be<00:00:07.109><c> talking</c><00:00:07.350><c> about</c><00:00:07.440><c> two</c><00:00:07.740><c> different</c><00:00:07.859><c> types</c><00:00:08.099><c> of</c>

00:00:08.450 --> 00:00:08.460 align:start position:0%
be talking about two different types of
 

00:00:08.460 --> 00:00:11.060 align:start position:0%
be talking about two different types of
memory<00:00:08.820><c> in</c><00:00:09.179><c> C++</c><00:00:09.840><c> the</c><00:00:09.990><c> stack</c><00:00:10.290><c> and</c><00:00:10.530><c> the</c><00:00:11.040><c> heap</c>

00:00:11.060 --> 00:00:11.070 align:start position:0%
memory in C++ the stack and the heap
 

00:00:11.070 --> 00:00:12.890 align:start position:0%
memory in C++ the stack and the heap
which<00:00:11.610><c> you</c><00:00:11.730><c> may</c><00:00:11.880><c> have</c><00:00:11.910><c> heard</c><00:00:12.210><c> a</c><00:00:12.450><c> lot</c><00:00:12.630><c> about</c><00:00:12.660><c> and</c>

00:00:12.890 --> 00:00:12.900 align:start position:0%
which you may have heard a lot about and
 

00:00:12.900 --> 00:00:14.870 align:start position:0%
which you may have heard a lot about and
might<00:00:13.530><c> not</c><00:00:13.740><c> be</c><00:00:13.889><c> a</c><00:00:13.920><c> hundred</c><00:00:14.099><c> central</c><00:00:14.610><c> and</c><00:00:14.730><c> what</c>

00:00:14.870 --> 00:00:14.880 align:start position:0%
might not be a hundred central and what
 

00:00:14.880 --> 00:00:17.060 align:start position:0%
might not be a hundred central and what
that<00:00:15.030><c> means</c><00:00:15.299><c> why</c><00:00:15.990><c> they're</c><00:00:16.260><c> used</c><00:00:16.500><c> when</c><00:00:16.830><c> they're</c>

00:00:17.060 --> 00:00:17.070 align:start position:0%
that means why they're used when they're
 

00:00:17.070 --> 00:00:19.340 align:start position:0%
that means why they're used when they're
used<00:00:17.340><c> and</c><00:00:17.670><c> how</c><00:00:18.300><c> all</c><00:00:18.510><c> that</c><00:00:18.720><c> works</c><00:00:18.960><c> and</c><00:00:19.199><c> why</c><00:00:19.289><c> you</c>

00:00:19.340 --> 00:00:19.350 align:start position:0%
used and how all that works and why you
 

00:00:19.350 --> 00:00:21.800 align:start position:0%
used and how all that works and why you
even<00:00:19.529><c> care</c><00:00:19.920><c> about</c><00:00:20.160><c> how</c><00:00:20.279><c> that</c><00:00:20.340><c> works</c><00:00:20.670><c> okay</c><00:00:21.570><c> so</c>

00:00:21.800 --> 00:00:21.810 align:start position:0%
even care about how that works okay so
 

00:00:21.810 --> 00:00:23.810 align:start position:0%
even care about how that works okay so
first<00:00:22.109><c> of</c><00:00:22.260><c> all</c><00:00:22.380><c> the</c><00:00:22.920><c> second</c><00:00:23.279><c> of</c><00:00:23.340><c> heat</c><00:00:23.490><c> what</c><00:00:23.699><c> are</c>

00:00:23.810 --> 00:00:23.820 align:start position:0%
first of all the second of heat what are
 

00:00:23.820 --> 00:00:25.519 align:start position:0%
first of all the second of heat what are
they<00:00:23.970><c> well</c><00:00:24.210><c> when</c><00:00:24.420><c> our</c><00:00:24.539><c> program</c><00:00:24.689><c> starts</c><00:00:25.320><c> it</c>

00:00:25.519 --> 00:00:25.529 align:start position:0%
they well when our program starts it
 

00:00:25.529 --> 00:00:26.929 align:start position:0%
they well when our program starts it
gets<00:00:25.769><c> divided</c><00:00:26.070><c> into</c><00:00:26.310><c> a</c><00:00:26.340><c> bunch</c><00:00:26.670><c> of</c><00:00:26.789><c> different</c>

00:00:26.929 --> 00:00:26.939 align:start position:0%
gets divided into a bunch of different
 

00:00:26.939 --> 00:00:29.480 align:start position:0%
gets divided into a bunch of different
like<00:00:27.599><c> areas</c><00:00:28.260><c> of</c><00:00:28.410><c> memory</c><00:00:28.769><c> and</c><00:00:28.949><c> there's</c><00:00:29.130><c> a</c><00:00:29.310><c> lot</c>

00:00:29.480 --> 00:00:29.490 align:start position:0%
like areas of memory and there's a lot
 

00:00:29.490 --> 00:00:30.769 align:start position:0%
like areas of memory and there's a lot
more<00:00:29.670><c> than</c><00:00:29.820><c> just</c><00:00:29.849><c> a</c><00:00:30.060><c> stack</c><00:00:30.210><c> in</c><00:00:30.330><c> the</c><00:00:30.420><c> heap</c><00:00:30.570><c> but</c>

00:00:30.769 --> 00:00:30.779 align:start position:0%
more than just a stack in the heap but
 

00:00:30.779 --> 00:00:32.749 align:start position:0%
more than just a stack in the heap but
the<00:00:30.929><c> two</c><00:00:31.109><c> kind</c><00:00:31.410><c> of</c><00:00:31.470><c> ones</c><00:00:32.219><c> that</c><00:00:32.369><c> we</c><00:00:32.489><c> care</c><00:00:32.730><c> about</c>

00:00:32.749 --> 00:00:32.759 align:start position:0%
the two kind of ones that we care about
 

00:00:32.759 --> 00:00:35.299 align:start position:0%
the two kind of ones that we care about
most<00:00:33.149><c> I</c><00:00:33.600><c> would</c><00:00:33.930><c> say</c><00:00:34.140><c> would</c><00:00:34.559><c> be</c><00:00:34.620><c> the</c><00:00:34.739><c> stack</c><00:00:35.070><c> and</c>

00:00:35.299 --> 00:00:35.309 align:start position:0%
most I would say would be the stack and
 

00:00:35.309 --> 00:00:38.630 align:start position:0%
most I would say would be the stack and
the<00:00:35.520><c> heap</c><00:00:35.550><c> now</c><00:00:36.559><c> in</c><00:00:37.559><c> terms</c><00:00:37.800><c> of</c><00:00:37.920><c> how</c><00:00:38.070><c> application</c>

00:00:38.630 --> 00:00:38.640 align:start position:0%
the heap now in terms of how application
 

00:00:38.640 --> 00:00:39.740 align:start position:0%
the heap now in terms of how application
is<00:00:38.730><c> launched</c><00:00:39.120><c> and</c><00:00:39.270><c> what</c><00:00:39.360><c> the</c><00:00:39.450><c> operating</c>

00:00:39.740 --> 00:00:39.750 align:start position:0%
is launched and what the operating
 

00:00:39.750 --> 00:00:42.590 align:start position:0%
is launched and what the operating
system<00:00:39.989><c> does</c><00:00:40.200><c> is</c><00:00:40.530><c> loosely</c><00:00:41.399><c> it</c><00:00:41.879><c> will</c><00:00:42.210><c> load</c><00:00:42.450><c> the</c>

00:00:42.590 --> 00:00:42.600 align:start position:0%
system does is loosely it will load the
 

00:00:42.600 --> 00:00:44.119 align:start position:0%
system does is loosely it will load the
entire<00:00:42.719><c> program</c><00:00:43.200><c> into</c><00:00:43.379><c> memory</c><00:00:43.680><c> as</c><00:00:43.890><c> well</c><00:00:44.070><c> as</c>

00:00:44.119 --> 00:00:44.129 align:start position:0%
entire program into memory as well as
 

00:00:44.129 --> 00:00:45.709 align:start position:0%
entire program into memory as well as
allocate<00:00:44.550><c> a</c><00:00:44.579><c> whole</c><00:00:44.789><c> bunch</c><00:00:45.000><c> of</c><00:00:45.120><c> physical</c><00:00:45.300><c> RAM</c>

00:00:45.709 --> 00:00:45.719 align:start position:0%
allocate a whole bunch of physical RAM
 

00:00:45.719 --> 00:00:47.540 align:start position:0%
allocate a whole bunch of physical RAM
so<00:00:45.989><c> that</c><00:00:46.110><c> our</c><00:00:46.230><c> actual</c><00:00:46.469><c> application</c><00:00:47.129><c> can</c><00:00:47.340><c> run</c>

00:00:47.540 --> 00:00:47.550 align:start position:0%
so that our actual application can run
 

00:00:47.550 --> 00:00:50.779 align:start position:0%
so that our actual application can run
now<00:00:48.300><c> the</c><00:00:48.719><c> stack</c><00:00:48.960><c> and</c><00:00:49.230><c> the</c><00:00:49.410><c> heap</c><00:00:49.440><c> are</c><00:00:49.920><c> two</c><00:00:50.489><c> areas</c>

00:00:50.779 --> 00:00:50.789 align:start position:0%
now the stack and the heap are two areas
 

00:00:50.789 --> 00:00:53.540 align:start position:0%
now the stack and the heap are two areas
that<00:00:51.149><c> we</c><00:00:51.570><c> actually</c><00:00:51.719><c> have</c><00:00:52.140><c> in</c><00:00:52.469><c> our</c><00:00:52.620><c> RAM</c><00:00:52.890><c> the</c>

00:00:53.540 --> 00:00:53.550 align:start position:0%
that we actually have in our RAM the
 

00:00:53.550 --> 00:00:55.670 align:start position:0%
that we actually have in our RAM the
stack<00:00:53.850><c> is</c><00:00:54.030><c> typically</c><00:00:54.390><c> an</c><00:00:54.780><c> area</c><00:00:55.199><c> of</c><00:00:55.500><c> memory</c>

00:00:55.670 --> 00:00:55.680 align:start position:0%
stack is typically an area of memory
 

00:00:55.680 --> 00:00:57.920 align:start position:0%
stack is typically an area of memory
that<00:00:56.010><c> has</c><00:00:56.129><c> a</c><00:00:56.190><c> predefined</c><00:00:56.940><c> size</c><00:00:57.300><c> usually</c>

00:00:57.920 --> 00:00:57.930 align:start position:0%
that has a predefined size usually
 

00:00:57.930 --> 00:01:00.349 align:start position:0%
that has a predefined size usually
around<00:00:58.230><c> two</c><00:00:58.500><c> megabytes</c><00:00:59.039><c> or</c><00:00:59.280><c> so</c><00:00:59.460><c> and</c><00:00:59.730><c> the</c><00:01:00.180><c> heap</c>

00:01:00.349 --> 00:01:00.359 align:start position:0%
around two megabytes or so and the heap
 

00:01:00.359 --> 00:01:02.810 align:start position:0%
around two megabytes or so and the heap
is<00:01:00.600><c> an</c><00:01:01.050><c> area</c><00:01:01.500><c> that</c><00:01:01.559><c> is</c><00:01:02.010><c> also</c><00:01:02.250><c> kind</c><00:01:02.730><c> of</c>

00:01:02.810 --> 00:01:02.820 align:start position:0%
is an area that is also kind of
 

00:01:02.820 --> 00:01:04.520 align:start position:0%
is an area that is also kind of
predefined<00:01:03.329><c> to</c><00:01:03.480><c> a</c><00:01:03.510><c> default</c><00:01:03.750><c> value</c><00:01:03.870><c> however</c><00:01:04.229><c> it</c>

00:01:04.520 --> 00:01:04.530 align:start position:0%
predefined to a default value however it
 

00:01:04.530 --> 00:01:07.100 align:start position:0%
predefined to a default value however it
can<00:01:04.739><c> grow</c><00:01:05.220><c> and</c><00:01:05.460><c> change</c><00:01:05.580><c> as</c><00:01:06.420><c> our</c><00:01:06.540><c> application</c>

00:01:07.100 --> 00:01:07.110 align:start position:0%
can grow and change as our application
 

00:01:07.110 --> 00:01:08.990 align:start position:0%
can grow and change as our application
goes<00:01:07.290><c> on</c><00:01:07.500><c> now</c><00:01:08.100><c> it's</c><00:01:08.369><c> important</c><00:01:08.729><c> to</c><00:01:08.760><c> note</c><00:01:08.970><c> that</c>

00:01:08.990 --> 00:01:09.000 align:start position:0%
goes on now it's important to note that
 

00:01:09.000 --> 00:01:10.940 align:start position:0%
goes on now it's important to note that
the<00:01:09.390><c> actual</c><00:01:09.689><c> location</c><00:01:10.350><c> the</c><00:01:10.470><c> physical</c>

00:01:10.940 --> 00:01:10.950 align:start position:0%
the actual location the physical
 

00:01:10.950 --> 00:01:13.190 align:start position:0%
the actual location the physical
location<00:01:11.460><c> of</c><00:01:11.549><c> these</c><00:01:11.700><c> two</c><00:01:12.090><c> areas</c><00:01:12.330><c> of</c><00:01:12.659><c> memory</c><00:01:12.840><c> is</c>

00:01:13.190 --> 00:01:13.200 align:start position:0%
location of these two areas of memory is
 

00:01:13.200 --> 00:01:15.530 align:start position:0%
location of these two areas of memory is
ultimately<00:01:14.100><c> the</c><00:01:14.189><c> same</c><00:01:14.340><c> it's</c><00:01:14.760><c> in</c><00:01:14.880><c> our</c><00:01:15.000><c> Ram</c><00:01:15.270><c> a</c>

00:01:15.530 --> 00:01:15.540 align:start position:0%
ultimately the same it's in our Ram a
 

00:01:15.540 --> 00:01:17.210 align:start position:0%
ultimately the same it's in our Ram a
lot<00:01:16.110><c> of</c><00:01:16.200><c> people</c><00:01:16.409><c> tend</c><00:01:16.619><c> to</c><00:01:16.680><c> think</c><00:01:16.770><c> that</c><00:01:17.070><c> the</c>

00:01:17.210 --> 00:01:17.220 align:start position:0%
lot of people tend to think that the
 

00:01:17.220 --> 00:01:18.620 align:start position:0%
lot of people tend to think that the
stack<00:01:17.460><c> might</c><00:01:17.729><c> be</c><00:01:17.909><c> something</c><00:01:18.240><c> that's</c><00:01:18.420><c> stored</c>

00:01:18.620 --> 00:01:18.630 align:start position:0%
stack might be something that's stored
 

00:01:18.630 --> 00:01:20.350 align:start position:0%
stack might be something that's stored
in<00:01:18.720><c> the</c><00:01:18.869><c> CPU</c><00:01:19.170><c> cache</c><00:01:19.470><c> or</c><00:01:19.710><c> something</c><00:01:20.009><c> like</c><00:01:20.070><c> that</c>

00:01:20.350 --> 00:01:20.360 align:start position:0%
in the CPU cache or something like that
 

00:01:20.360 --> 00:01:23.600 align:start position:0%
in the CPU cache or something like that
whilst<00:01:21.360><c> it</c><00:01:21.720><c> is</c><00:01:21.930><c> likely</c><00:01:22.439><c> to</c><00:01:22.770><c> be</c><00:01:22.890><c> hot</c><00:01:23.189><c> in</c><00:01:23.400><c> the</c>

00:01:23.600 --> 00:01:23.610 align:start position:0%
whilst it is likely to be hot in the
 

00:01:23.610 --> 00:01:25.340 align:start position:0%
whilst it is likely to be hot in the
case<00:01:23.820><c> because</c><00:01:24.180><c> we're</c><00:01:24.330><c> continually</c><00:01:24.750><c> accessing</c>

00:01:25.340 --> 00:01:25.350 align:start position:0%
case because we're continually accessing
 

00:01:25.350 --> 00:01:28.580 align:start position:0%
case because we're continually accessing
it<00:01:25.500><c> that's</c><00:01:26.250><c> we</c><00:01:26.790><c> can't</c><00:01:27.210><c> like</c><00:01:27.420><c> not</c><00:01:28.140><c> all</c><00:01:28.320><c> of</c><00:01:28.500><c> it</c>

00:01:28.580 --> 00:01:28.590 align:start position:0%
it that's we can't like not all of it
 

00:01:28.590 --> 00:01:29.990 align:start position:0%
it that's we can't like not all of it
will<00:01:28.710><c> be</c><00:01:28.740><c> stored</c><00:01:29.070><c> in</c><00:01:29.130><c> our</c><00:01:29.250><c> cache</c><00:01:29.460><c> and</c><00:01:29.729><c> that's</c>

00:01:29.990 --> 00:01:30.000 align:start position:0%
will be stored in our cache and that's
 

00:01:30.000 --> 00:01:32.300 align:start position:0%
will be stored in our cache and that's
not<00:01:30.270><c> how</c><00:01:30.509><c> any</c><00:01:30.810><c> of</c><00:01:30.900><c> that</c><00:01:31.049><c> works</c><00:01:31.229><c> so</c><00:01:31.530><c> just</c><00:01:32.130><c> keep</c>

00:01:32.300 --> 00:01:32.310 align:start position:0%
not how any of that works so just keep
 

00:01:32.310 --> 00:01:34.039 align:start position:0%
not how any of that works so just keep
in<00:01:32.460><c> mind</c><00:01:32.490><c> that</c><00:01:32.729><c> the</c><00:01:32.850><c> actual</c><00:01:33.240><c> location</c><00:01:33.840><c> of</c>

00:01:34.039 --> 00:01:34.049 align:start position:0%
in mind that the actual location of
 

00:01:34.049 --> 00:01:36.710 align:start position:0%
in mind that the actual location of
those<00:01:34.380><c> two</c><00:01:34.770><c> areas</c><00:01:35.729><c> of</c><00:01:35.759><c> memory</c><00:01:36.030><c> is</c><00:01:36.360><c> in</c><00:01:36.600><c> our</c>

00:01:36.710 --> 00:01:36.720 align:start position:0%
those two areas of memory is in our
 

00:01:36.720 --> 00:01:38.300 align:start position:0%
those two areas of memory is in our
memory<00:01:37.079><c> right</c><00:01:37.650><c> that's</c><00:01:37.890><c> why</c><00:01:38.009><c> they're</c><00:01:38.189><c> two</c>

00:01:38.300 --> 00:01:38.310 align:start position:0%
memory right that's why they're two
 

00:01:38.310 --> 00:01:40.819 align:start position:0%
memory right that's why they're two
different<00:01:38.640><c> areas</c><00:01:39.150><c> of</c><00:01:39.360><c> our</c><00:01:39.540><c> memory</c><00:01:39.930><c> now</c><00:01:40.170><c> memory</c>

00:01:40.819 --> 00:01:40.829 align:start position:0%
different areas of our memory now memory
 

00:01:40.829 --> 00:01:43.069 align:start position:0%
different areas of our memory now memory
in<00:01:41.009><c> our</c><00:01:41.100><c> program</c><00:01:41.610><c> is</c><00:01:41.880><c> used</c><00:01:42.270><c> so</c><00:01:42.630><c> that</c><00:01:42.750><c> we</c><00:01:42.899><c> can</c>

00:01:43.069 --> 00:01:43.079 align:start position:0%
in our program is used so that we can
 

00:01:43.079 --> 00:01:44.780 align:start position:0%
in our program is used so that we can
actually<00:01:43.229><c> store</c><00:01:43.680><c> data</c><00:01:43.979><c> we</c><00:01:44.369><c> need</c><00:01:44.490><c> a</c><00:01:44.520><c> place</c><00:01:44.759><c> to</c>

00:01:44.780 --> 00:01:44.790 align:start position:0%
actually store data we need a place to
 

00:01:44.790 --> 00:01:46.760 align:start position:0%
actually store data we need a place to
store<00:01:45.240><c> the</c><00:01:45.540><c> data</c><00:01:45.750><c> that</c><00:01:45.990><c> we</c><00:01:46.110><c> need</c><00:01:46.290><c> to</c><00:01:46.500><c> run</c><00:01:46.619><c> our</c>

00:01:46.760 --> 00:01:46.770 align:start position:0%
store the data that we need to run our
 

00:01:46.770 --> 00:01:48.950 align:start position:0%
store the data that we need to run our
program<00:01:46.799><c> whether</c><00:01:47.700><c> that</c><00:01:47.880><c> be</c><00:01:48.030><c> local</c><00:01:48.420><c> variables</c>

00:01:48.950 --> 00:01:48.960 align:start position:0%
program whether that be local variables
 

00:01:48.960 --> 00:01:50.690 align:start position:0%
program whether that be local variables
or<00:01:49.110><c> maybe</c><00:01:49.259><c> we've</c><00:01:49.500><c> read</c><00:01:49.710><c> stuff</c><00:01:50.009><c> in</c><00:01:50.159><c> from</c><00:01:50.369><c> a</c><00:01:50.460><c> file</c>

00:01:50.690 --> 00:01:50.700 align:start position:0%
or maybe we've read stuff in from a file
 

00:01:50.700 --> 00:01:52.550 align:start position:0%
or maybe we've read stuff in from a file
and<00:01:50.880><c> we</c><00:01:50.970><c> need</c><00:01:51.119><c> to</c><00:01:51.210><c> process</c><00:01:51.420><c> that</c><00:01:51.840><c> data</c><00:01:52.049><c> all</c>

00:01:52.550 --> 00:01:52.560 align:start position:0%
and we need to process that data all
 

00:01:52.560 --> 00:01:54.200 align:start position:0%
and we need to process that data all
that<00:01:52.619><c> kind</c><00:01:53.159><c> of</c><00:01:53.250><c> stuff</c><00:01:53.460><c> we</c><00:01:53.640><c> need</c><00:01:53.670><c> a</c><00:01:53.790><c> place</c><00:01:54.030><c> to</c>

00:01:54.200 --> 00:01:54.210 align:start position:0%
that kind of stuff we need a place to
 

00:01:54.210 --> 00:01:56.240 align:start position:0%
that kind of stuff we need a place to
store<00:01:54.479><c> that</c><00:01:54.720><c> and</c><00:01:54.960><c> the</c><00:01:55.350><c> stack</c><00:01:55.560><c> in</c><00:01:55.710><c> the</c><00:01:55.799><c> heap</c>

00:01:56.240 --> 00:01:56.250 align:start position:0%
store that and the stack in the heap
 

00:01:56.250 --> 00:01:58.340 align:start position:0%
store that and the stack in the heap
they<00:01:56.700><c> are</c><00:01:56.939><c> areas</c><00:01:57.390><c> in</c><00:01:57.630><c> which</c><00:01:57.750><c> we're</c><00:01:57.990><c> allowed</c><00:01:58.200><c> to</c>

00:01:58.340 --> 00:01:58.350 align:start position:0%
they are areas in which we're allowed to
 

00:01:58.350 --> 00:02:00.889 align:start position:0%
they are areas in which we're allowed to
store<00:01:58.560><c> data</c><00:01:58.799><c> now</c><00:01:59.549><c> they</c><00:02:00.000><c> work</c><00:02:00.270><c> very</c><00:02:00.750><c> very</c>

00:02:00.889 --> 00:02:00.899 align:start position:0%
store data now they work very very
 

00:02:00.899 --> 00:02:03.410 align:start position:0%
store data now they work very very
differently<00:02:01.649><c> but</c><00:02:02.040><c> fundamentally</c><00:02:03.030><c> what</c><00:02:03.210><c> they</c>

00:02:03.410 --> 00:02:03.420 align:start position:0%
differently but fundamentally what they
 

00:02:03.420 --> 00:02:07.069 align:start position:0%
differently but fundamentally what they
do<00:02:03.479><c> is</c><00:02:03.930><c> the</c><00:02:04.170><c> same</c><00:02:04.409><c> we</c><00:02:05.009><c> can</c><00:02:05.040><c> ask</c><00:02:05.540><c> C++</c><00:02:06.540><c> to</c><00:02:06.810><c> give</c><00:02:06.930><c> us</c>

00:02:07.069 --> 00:02:07.079 align:start position:0%
do is the same we can ask C++ to give us
 

00:02:07.079 --> 00:02:08.660 align:start position:0%
do is the same we can ask C++ to give us
some<00:02:07.290><c> memory</c><00:02:07.619><c> from</c><00:02:07.860><c> either</c><00:02:07.979><c> the</c><00:02:08.190><c> stack</c><00:02:08.429><c> or</c><00:02:08.610><c> the</c>

00:02:08.660 --> 00:02:08.670 align:start position:0%
some memory from either the stack or the
 

00:02:08.670 --> 00:02:10.850 align:start position:0%
some memory from either the stack or the
heap<00:02:08.759><c> and</c><00:02:09.179><c> it</c><00:02:09.660><c> will</c><00:02:09.869><c> give</c><00:02:10.080><c> us</c><00:02:10.110><c> a</c><00:02:10.500><c> block</c><00:02:10.709><c> of</c>

00:02:10.850 --> 00:02:10.860 align:start position:0%
heap and it will give us a block of
 

00:02:10.860 --> 00:02:12.619 align:start position:0%
heap and it will give us a block of
memory<00:02:11.009><c> of</c><00:02:11.220><c> our</c><00:02:11.520><c> requested</c><00:02:12.060><c> size</c><00:02:12.300><c> if</c>

00:02:12.619 --> 00:02:12.629 align:start position:0%
memory of our requested size if
 

00:02:12.629 --> 00:02:13.110 align:start position:0%
memory of our requested size if
everything

00:02:13.110 --> 00:02:13.120 align:start position:0%
everything
 

00:02:13.120 --> 00:02:15.030 align:start position:0%
everything
as<00:02:13.209><c> well</c><00:02:13.420><c> the</c><00:02:13.750><c> difference</c><00:02:13.780><c> is</c><00:02:14.319><c> how</c><00:02:14.680><c> it</c>

00:02:15.030 --> 00:02:15.040 align:start position:0%
as well the difference is how it
 

00:02:15.040 --> 00:02:17.009 align:start position:0%
as well the difference is how it
allocates<00:02:15.489><c> that</c><00:02:15.610><c> memory</c><00:02:16.030><c> for</c><00:02:16.239><c> us</c><00:02:16.269><c> so</c><00:02:16.629><c> suppose</c>

00:02:17.009 --> 00:02:17.019 align:start position:0%
allocates that memory for us so suppose
 

00:02:17.019 --> 00:02:18.690 align:start position:0%
allocates that memory for us so suppose
for<00:02:17.049><c> an</c><00:02:17.319><c> example</c><00:02:17.590><c> that</c><00:02:18.159><c> we</c><00:02:18.310><c> want</c><00:02:18.430><c> to</c><00:02:18.549><c> be</c><00:02:18.640><c> able</c>

00:02:18.690 --> 00:02:18.700 align:start position:0%
for an example that we want to be able
 

00:02:18.700 --> 00:02:20.070 align:start position:0%
for an example that we want to be able
to<00:02:18.790><c> store</c><00:02:18.970><c> an</c><00:02:19.090><c> integer</c><00:02:19.360><c> an</c><00:02:19.510><c> integer</c><00:02:19.720><c> on</c><00:02:19.900><c> most</c>

00:02:20.070 --> 00:02:20.080 align:start position:0%
to store an integer an integer on most
 

00:02:20.080 --> 00:02:23.250 align:start position:0%
to store an integer an integer on most
platforms<00:02:20.200><c> is</c><00:02:20.680><c> 4</c><00:02:21.250><c> bytes</c><00:02:21.459><c> an</c><00:02:21.700><c> int</c><00:02:21.909><c> right</c><00:02:22.269><c> so</c><00:02:22.780><c> how</c>

00:02:23.250 --> 00:02:23.260 align:start position:0%
platforms is 4 bytes an int right so how
 

00:02:23.260 --> 00:02:26.070 align:start position:0%
platforms is 4 bytes an int right so how
do<00:02:23.319><c> we</c><00:02:23.530><c> find</c><00:02:23.860><c> a</c><00:02:24.220><c> contiguous</c><00:02:24.849><c> block</c><00:02:25.569><c> of</c><00:02:25.780><c> 4</c><00:02:26.049><c> bytes</c>

00:02:26.070 --> 00:02:26.080 align:start position:0%
do we find a contiguous block of 4 bytes
 

00:02:26.080 --> 00:02:27.899 align:start position:0%
do we find a contiguous block of 4 bytes
of<00:02:26.349><c> memory</c><00:02:26.409><c> contiguous</c><00:02:27.069><c> just</c><00:02:27.220><c> means</c><00:02:27.340><c> in</c><00:02:27.640><c> a</c><00:02:27.730><c> row</c>

00:02:27.899 --> 00:02:27.909 align:start position:0%
of memory contiguous just means in a row
 

00:02:27.909 --> 00:02:29.819 align:start position:0%
of memory contiguous just means in a row
right<00:02:28.209><c> how</c><00:02:28.390><c> do</c><00:02:28.450><c> we</c><00:02:28.569><c> find</c><00:02:28.900><c> that</c><00:02:29.140><c> block</c><00:02:29.409><c> of</c><00:02:29.620><c> 4</c>

00:02:29.819 --> 00:02:29.829 align:start position:0%
right how do we find that block of 4
 

00:02:29.829 --> 00:02:31.589 align:start position:0%
right how do we find that block of 4
bytes<00:02:29.860><c> of</c><00:02:30.129><c> memory</c><00:02:30.190><c> the</c><00:02:30.970><c> way</c><00:02:31.120><c> that</c><00:02:31.269><c> the</c><00:02:31.360><c> stack</c>

00:02:31.589 --> 00:02:31.599 align:start position:0%
bytes of memory the way that the stack
 

00:02:31.599 --> 00:02:33.240 align:start position:0%
bytes of memory the way that the stack
will<00:02:31.840><c> give</c><00:02:31.989><c> us</c><00:02:32.140><c> that</c><00:02:32.349><c> memory</c><00:02:32.709><c> versus</c><00:02:33.040><c> the</c><00:02:33.159><c> way</c>

00:02:33.240 --> 00:02:33.250 align:start position:0%
will give us that memory versus the way
 

00:02:33.250 --> 00:02:34.619 align:start position:0%
will give us that memory versus the way
that<00:02:33.370><c> the</c><00:02:33.459><c> heap</c><00:02:33.640><c> will</c><00:02:33.879><c> give</c><00:02:34.030><c> us</c><00:02:34.120><c> that</c><00:02:34.299><c> memory</c>

00:02:34.619 --> 00:02:34.629 align:start position:0%
that the heap will give us that memory
 

00:02:34.629 --> 00:02:36.720 align:start position:0%
that the heap will give us that memory
that's<00:02:35.170><c> different</c><00:02:35.709><c> and</c><00:02:35.920><c> when</c><00:02:36.099><c> we</c><00:02:36.190><c> asked</c><00:02:36.579><c> for</c>

00:02:36.720 --> 00:02:36.730 align:start position:0%
that's different and when we asked for
 

00:02:36.730 --> 00:02:37.890 align:start position:0%
that's different and when we asked for
memory<00:02:37.030><c> like</c><00:02:37.209><c> that</c><00:02:37.390><c> that's</c><00:02:37.599><c> called</c><00:02:37.750><c> the</c>

00:02:37.890 --> 00:02:37.900 align:start position:0%
memory like that that's called the
 

00:02:37.900 --> 00:02:39.899 align:start position:0%
memory like that that's called the
memory<00:02:38.200><c> allocation</c><00:02:38.680><c> or</c><00:02:39.040><c> just</c><00:02:39.280><c> an</c><00:02:39.519><c> allocation</c>

00:02:39.899 --> 00:02:39.909 align:start position:0%
memory allocation or just an allocation
 

00:02:39.909 --> 00:02:41.819 align:start position:0%
memory allocation or just an allocation
for<00:02:40.299><c> sure</c><00:02:40.450><c> so</c><00:02:41.019><c> let's</c><00:02:41.170><c> take</c><00:02:41.319><c> a</c><00:02:41.349><c> look</c><00:02:41.590><c> at</c><00:02:41.680><c> some</c><00:02:41.799><c> of</c>

00:02:41.819 --> 00:02:41.829 align:start position:0%
for sure so let's take a look at some of
 

00:02:41.829 --> 00:02:43.410 align:start position:0%
for sure so let's take a look at some of
the<00:02:41.950><c> differences</c><00:02:42.370><c> between</c><00:02:42.430><c> allocating</c><00:02:43.299><c> and</c>

00:02:43.410 --> 00:02:43.420 align:start position:0%
the differences between allocating and
 

00:02:43.420 --> 00:02:45.059 align:start position:0%
the differences between allocating and
ant<00:02:43.569><c> and</c><00:02:43.780><c> maybe</c><00:02:43.930><c> various</c><00:02:44.319><c> other</c><00:02:44.530><c> kind</c><00:02:45.010><c> of</c>

00:02:45.059 --> 00:02:45.069 align:start position:0%
ant and maybe various other kind of
 

00:02:45.069 --> 00:02:47.039 align:start position:0%
ant and maybe various other kind of
pieces<00:02:45.310><c> of</c><00:02:45.340><c> data</c><00:02:45.640><c> on</c><00:02:45.940><c> the</c><00:02:46.329><c> stack</c><00:02:46.569><c> versus</c><00:02:46.959><c> the</c>

00:02:47.039 --> 00:02:47.049 align:start position:0%
pieces of data on the stack versus the
 

00:02:47.049 --> 00:02:49.259 align:start position:0%
pieces of data on the stack versus the
heap<00:02:47.230><c> in</c><00:02:47.500><c> our</c><00:02:47.650><c> actual</c><00:02:47.890><c> C++</c><00:02:48.370><c> code</c><00:02:48.609><c> so</c><00:02:48.940><c> I'm</c><00:02:49.030><c> going</c>

00:02:49.259 --> 00:02:49.269 align:start position:0%
heap in our actual C++ code so I'm going
 

00:02:49.269 --> 00:02:50.309 align:start position:0%
heap in our actual C++ code so I'm going
to<00:02:49.329><c> show</c><00:02:49.450><c> you</c><00:02:49.540><c> how</c><00:02:49.660><c> to</c><00:02:49.690><c> allocate</c><00:02:49.870><c> three</c>

00:02:50.309 --> 00:02:50.319 align:start position:0%
to show you how to allocate three
 

00:02:50.319 --> 00:02:52.170 align:start position:0%
to show you how to allocate three
different<00:02:50.680><c> types</c><00:02:50.920><c> of</c><00:02:51.160><c> data</c><00:02:51.370><c> over</c><00:02:51.640><c> here</c><00:02:51.819><c> in</c><00:02:52.060><c> our</c>

00:02:52.170 --> 00:02:52.180 align:start position:0%
different types of data over here in our
 

00:02:52.180 --> 00:02:53.430 align:start position:0%
different types of data over here in our
program<00:02:52.540><c> first</c><00:02:52.810><c> of</c><00:02:52.930><c> all</c><00:02:53.019><c> we'll</c><00:02:53.170><c> start</c><00:02:53.349><c> off</c>

00:02:53.430 --> 00:02:53.440 align:start position:0%
program first of all we'll start off
 

00:02:53.440 --> 00:02:55.860 align:start position:0%
program first of all we'll start off
with<00:02:53.470><c> an</c><00:02:53.709><c> int</c><00:02:53.920><c> so</c><00:02:54.400><c> I'll</c><00:02:54.489><c> just</c><00:02:54.640><c> write</c><00:02:54.819><c> int</c><00:02:55.120><c> value</c>

00:02:55.860 --> 00:02:55.870 align:start position:0%
with an int so I'll just write int value
 

00:02:55.870 --> 00:02:57.720 align:start position:0%
with an int so I'll just write int value
equals<00:02:56.290><c> 5</c><00:02:56.620><c> that's</c><00:02:57.099><c> it</c><00:02:57.340><c> that's</c><00:02:57.549><c> how</c><00:02:57.700><c> you</c>

00:02:57.720 --> 00:02:57.730 align:start position:0%
equals 5 that's it that's how you
 

00:02:57.730 --> 00:02:59.309 align:start position:0%
equals 5 that's it that's how you
allocate<00:02:57.940><c> an</c><00:02:58.299><c> integer</c><00:02:58.540><c> on</c><00:02:58.720><c> the</c><00:02:58.810><c> stack</c><00:02:59.019><c> and</c><00:02:59.260><c> in</c>

00:02:59.309 --> 00:02:59.319 align:start position:0%
allocate an integer on the stack and in
 

00:02:59.319 --> 00:03:01.289 align:start position:0%
allocate an integer on the stack and in
fact<00:02:59.470><c> we're</c><00:02:59.680><c> also</c><00:02:59.769><c> giving</c><00:03:00.159><c> it</c><00:03:00.220><c> the</c><00:03:00.370><c> value</c><00:03:00.700><c> 5</c><00:03:01.000><c> if</c>

00:03:01.289 --> 00:03:01.299 align:start position:0%
fact we're also giving it the value 5 if
 

00:03:01.299 --> 00:03:02.819 align:start position:0%
fact we're also giving it the value 5 if
we<00:03:01.510><c> were</c><00:03:01.659><c> to</c><00:03:01.810><c> do</c><00:03:01.930><c> this</c><00:03:02.079><c> on</c><00:03:02.200><c> the</c><00:03:02.290><c> heap</c><00:03:02.470><c> it</c><00:03:02.709><c> would</c>

00:03:02.819 --> 00:03:02.829 align:start position:0%
we were to do this on the heap it would
 

00:03:02.829 --> 00:03:05.550 align:start position:0%
we were to do this on the heap it would
look<00:03:02.950><c> like</c><00:03:03.099><c> this</c><00:03:03.340><c> in</c><00:03:03.760><c> pointer</c><00:03:04.480><c> H</c><00:03:04.930><c> I'll</c><00:03:05.230><c> say</c><00:03:05.379><c> H</c>

00:03:05.550 --> 00:03:05.560 align:start position:0%
look like this in pointer H I'll say H
 

00:03:05.560 --> 00:03:08.160 align:start position:0%
look like this in pointer H I'll say H
value<00:03:05.950><c> 4</c><00:03:06.099><c> heat</c><00:03:06.250><c> value</c><00:03:06.430><c> equals</c><00:03:07.390><c> new</c><00:03:07.629><c> int</c><00:03:07.659><c> and</c>

00:03:08.160 --> 00:03:08.170 align:start position:0%
value 4 heat value equals new int and
 

00:03:08.170 --> 00:03:10.380 align:start position:0%
value 4 heat value equals new int and
then<00:03:08.680><c> we</c><00:03:08.890><c> have</c><00:03:09.040><c> to</c><00:03:09.129><c> dereference</c><00:03:09.489><c> that</c><00:03:09.760><c> H</c><00:03:10.000><c> value</c>

00:03:10.380 --> 00:03:10.390 align:start position:0%
then we have to dereference that H value
 

00:03:10.390 --> 00:03:12.660 align:start position:0%
then we have to dereference that H value
and<00:03:10.569><c> give</c><00:03:10.720><c> it</c><00:03:10.810><c> the</c><00:03:10.930><c> value</c><00:03:11.200><c> 5</c><00:03:11.379><c> ok</c><00:03:11.980><c> so</c><00:03:12.430><c> you</c><00:03:12.519><c> can</c>

00:03:12.660 --> 00:03:12.670 align:start position:0%
and give it the value 5 ok so you can
 

00:03:12.670 --> 00:03:14.520 align:start position:0%
and give it the value 5 ok so you can
notice<00:03:13.060><c> that</c><00:03:13.150><c> it</c><00:03:13.209><c> is</c><00:03:13.329><c> two</c><00:03:13.629><c> lines</c><00:03:13.810><c> of</c><00:03:13.989><c> code</c><00:03:14.200><c> but</c>

00:03:14.520 --> 00:03:14.530 align:start position:0%
notice that it is two lines of code but
 

00:03:14.530 --> 00:03:16.649 align:start position:0%
notice that it is two lines of code but
more<00:03:14.709><c> importantly</c><00:03:15.159><c> we</c><00:03:15.730><c> actually</c><00:03:15.760><c> use</c><00:03:16.390><c> the</c><00:03:16.540><c> new</c>

00:03:16.649 --> 00:03:16.659 align:start position:0%
more importantly we actually use the new
 

00:03:16.659 --> 00:03:18.240 align:start position:0%
more importantly we actually use the new
keyword<00:03:16.870><c> here</c><00:03:17.290><c> to</c><00:03:17.500><c> allocate</c><00:03:17.889><c> on</c><00:03:18.010><c> the</c><00:03:18.099><c> heap</c>

00:03:18.240 --> 00:03:18.250 align:start position:0%
keyword here to allocate on the heap
 

00:03:18.250 --> 00:03:19.770 align:start position:0%
keyword here to allocate on the heap
that's<00:03:18.459><c> what</c><00:03:18.609><c> kind</c><00:03:18.790><c> of</c><00:03:18.849><c> distinguishes</c><00:03:19.599><c> these</c>

00:03:19.770 --> 00:03:19.780 align:start position:0%
that's what kind of distinguishes these
 

00:03:19.780 --> 00:03:21.479 align:start position:0%
that's what kind of distinguishes these
two<00:03:19.959><c> allocations</c><00:03:20.560><c> that</c><00:03:21.010><c> is</c><00:03:21.130><c> a</c><00:03:21.160><c> stack</c>

00:03:21.479 --> 00:03:21.489 align:start position:0%
two allocations that is a stack
 

00:03:21.489 --> 00:03:23.069 align:start position:0%
two allocations that is a stack
allocation<00:03:21.940><c> and</c><00:03:22.150><c> this</c><00:03:22.269><c> is</c><00:03:22.419><c> a</c><00:03:22.450><c> heap</c><00:03:22.690><c> allocation</c>

00:03:23.069 --> 00:03:23.079 align:start position:0%
allocation and this is a heap allocation
 

00:03:23.079 --> 00:03:25.740 align:start position:0%
allocation and this is a heap allocation
with<00:03:23.980><c> arrays</c><00:03:24.250><c> it's</c><00:03:24.579><c> kind</c><00:03:24.849><c> of</c><00:03:24.910><c> similar</c><00:03:25.150><c> we</c><00:03:25.540><c> have</c>

00:03:25.740 --> 00:03:25.750 align:start position:0%
with arrays it's kind of similar we have
 

00:03:25.750 --> 00:03:28.500 align:start position:0%
with arrays it's kind of similar we have
int<00:03:26.019><c> array</c><00:03:26.200><c> and</c><00:03:26.709><c> then</c><00:03:26.980><c> 5</c><00:03:27.639><c> for</c><00:03:27.970><c> example</c><00:03:28.060><c> for</c>

00:03:28.500 --> 00:03:28.510 align:start position:0%
int array and then 5 for example for
 

00:03:28.510 --> 00:03:30.210 align:start position:0%
int array and then 5 for example for
five<00:03:28.690><c> elements</c><00:03:29.230><c> in</c><00:03:29.290><c> the</c><00:03:29.440><c> array</c><00:03:29.650><c> and</c><00:03:29.889><c> on</c><00:03:30.099><c> the</c>

00:03:30.210 --> 00:03:30.220 align:start position:0%
five elements in the array and on the
 

00:03:30.220 --> 00:03:31.860 align:start position:0%
five elements in the array and on the
heap<00:03:30.370><c> this</c><00:03:30.549><c> would</c><00:03:30.730><c> look</c><00:03:30.849><c> like</c><00:03:30.970><c> this</c><00:03:31.180><c> in</c><00:03:31.419><c> H</c>

00:03:31.860 --> 00:03:31.870 align:start position:0%
heap this would look like this in H
 

00:03:31.870 --> 00:03:34.559 align:start position:0%
heap this would look like this in H
array<00:03:32.319><c> for</c><00:03:32.560><c> heap</c><00:03:32.680><c> array</c><00:03:32.950><c> equals</c><00:03:33.430><c> new</c><00:03:33.879><c> int</c><00:03:33.910><c> five</c>

00:03:34.559 --> 00:03:34.569 align:start position:0%
array for heap array equals new int five
 

00:03:34.569 --> 00:03:36.509 align:start position:0%
array for heap array equals new int five
like<00:03:34.900><c> that</c><00:03:35.079><c> so</c><00:03:35.500><c> again</c><00:03:35.530><c> the</c><00:03:35.950><c> major</c><00:03:36.129><c> difference</c>

00:03:36.509 --> 00:03:36.519 align:start position:0%
like that so again the major difference
 

00:03:36.519 --> 00:03:37.949 align:start position:0%
like that so again the major difference
being<00:03:36.669><c> where</c><00:03:36.910><c> we're</c><00:03:37.239><c> using</c><00:03:37.269><c> the</c><00:03:37.569><c> new</c><00:03:37.750><c> keyword</c>

00:03:37.949 --> 00:03:37.959 align:start position:0%
being where we're using the new keyword
 

00:03:37.959 --> 00:03:39.659 align:start position:0%
being where we're using the new keyword
here<00:03:38.290><c> to</c><00:03:38.500><c> actually</c><00:03:38.650><c> allocate</c><00:03:38.980><c> that</c><00:03:39.220><c> memory</c>

00:03:39.659 --> 00:03:39.669 align:start position:0%
here to actually allocate that memory
 

00:03:39.669 --> 00:03:41.099 align:start position:0%
here to actually allocate that memory
and<00:03:39.940><c> then</c><00:03:40.180><c> finally</c><00:03:40.569><c> I'll</c><00:03:40.750><c> show</c><00:03:40.780><c> you</c><00:03:40.989><c> a</c><00:03:41.019><c> quick</c>

00:03:41.099 --> 00:03:41.109 align:start position:0%
and then finally I'll show you a quick
 

00:03:41.109 --> 00:03:42.689 align:start position:0%
and then finally I'll show you a quick
example<00:03:41.200><c> with</c><00:03:41.680><c> an</c><00:03:41.769><c> object</c><00:03:41.919><c> so</c><00:03:42.250><c> if</c><00:03:42.340><c> I</c><00:03:42.430><c> make</c><00:03:42.579><c> a</c>

00:03:42.689 --> 00:03:42.699 align:start position:0%
example with an object so if I make a
 

00:03:42.699 --> 00:03:44.189 align:start position:0%
example with an object so if I make a
struct<00:03:43.060><c> here</c><00:03:43.299><c> or</c><00:03:43.449><c> a</c><00:03:43.510><c> class</c><00:03:43.720><c> doesn't</c><00:03:44.079><c> really</c>

00:03:44.189 --> 00:03:44.199 align:start position:0%
struct here or a class doesn't really
 

00:03:44.199 --> 00:03:46.409 align:start position:0%
struct here or a class doesn't really
matter<00:03:44.440><c> called</c><00:03:45.069><c> vector</c><00:03:45.459><c> three</c><00:03:45.760><c> and</c><00:03:46.030><c> this</c><00:03:46.239><c> will</c>

00:03:46.409 --> 00:03:46.419 align:start position:0%
matter called vector three and this will
 

00:03:46.419 --> 00:03:49.229 align:start position:0%
matter called vector three and this will
just<00:03:46.510><c> have</c><00:03:46.720><c> three</c><00:03:47.019><c> floats</c><00:03:47.319><c> X</c><00:03:47.620><c> Y</c><00:03:47.829><c> Z</c><00:03:48.040><c> if</c><00:03:48.430><c> I</c><00:03:48.940><c> was</c><00:03:49.120><c> to</c>

00:03:49.229 --> 00:03:49.239 align:start position:0%
just have three floats X Y Z if I was to
 

00:03:49.239 --> 00:03:50.939 align:start position:0%
just have three floats X Y Z if I was to
allocate<00:03:49.629><c> this</c><00:03:49.780><c> on</c><00:03:49.989><c> the</c><00:03:50.139><c> stack</c><00:03:50.440><c> it</c><00:03:50.709><c> would</c><00:03:50.829><c> look</c>

00:03:50.939 --> 00:03:50.949 align:start position:0%
allocate this on the stack it would look
 

00:03:50.949 --> 00:03:54.809 align:start position:0%
allocate this on the stack it would look
like<00:03:51.010><c> this</c><00:03:51.280><c> vector</c><00:03:51.760><c> three</c><00:03:52.349><c> vector</c><00:03:53.349><c> and</c><00:03:53.590><c> on</c><00:03:54.549><c> the</c>

00:03:54.809 --> 00:03:54.819 align:start position:0%
like this vector three vector and on the
 

00:03:54.819 --> 00:03:56.490 align:start position:0%
like this vector three vector and on the
heap<00:03:55.120><c> it</c><00:03:55.389><c> would</c><00:03:55.540><c> look</c><00:03:55.660><c> like</c><00:03:55.780><c> this</c><00:03:55.959><c> vector</c>

00:03:56.490 --> 00:03:56.500 align:start position:0%
heap it would look like this vector
 

00:03:56.500 --> 00:04:00.629 align:start position:0%
heap it would look like this vector
three<00:03:56.910><c> pointer</c><00:03:57.910><c> H</c><00:03:58.269><c> vector</c><00:03:58.870><c> equals</c><00:03:59.769><c> new</c><00:04:00.010><c> vector</c>

00:04:00.629 --> 00:04:00.639 align:start position:0%
three pointer H vector equals new vector
 

00:04:00.639 --> 00:04:02.339 align:start position:0%
three pointer H vector equals new vector
3<00:04:00.910><c> and</c><00:04:01.090><c> these</c><00:04:01.419><c> parentheses</c><00:04:01.900><c> are</c><00:04:01.930><c> of</c><00:04:02.199><c> course</c>

00:04:02.339 --> 00:04:02.349 align:start position:0%
3 and these parentheses are of course
 

00:04:02.349 --> 00:04:04.050 align:start position:0%
3 and these parentheses are of course
optional<00:04:02.829><c> but</c><00:04:02.949><c> I</c><00:04:03.010><c> like</c><00:04:03.069><c> to</c><00:04:03.310><c> keep</c><00:04:03.400><c> them</c><00:04:03.549><c> in</c><00:04:03.699><c> now</c>

00:04:04.050 --> 00:04:04.060 align:start position:0%
optional but I like to keep them in now
 

00:04:04.060 --> 00:04:05.430 align:start position:0%
optional but I like to keep them in now
before<00:04:04.209><c> I</c><00:04:04.389><c> run</c><00:04:04.569><c> this</c><00:04:04.629><c> application</c><00:04:04.810><c> and</c><00:04:05.260><c> step</c>

00:04:05.430 --> 00:04:05.440 align:start position:0%
before I run this application and step
 

00:04:05.440 --> 00:04:06.300 align:start position:0%
before I run this application and step
through<00:04:05.650><c> and</c><00:04:05.769><c> show</c><00:04:05.919><c> you</c><00:04:05.980><c> how</c><00:04:06.160><c> it</c><00:04:06.250><c> actually</c>

00:04:06.300 --> 00:04:06.310 align:start position:0%
through and show you how it actually
 

00:04:06.310 --> 00:04:08.129 align:start position:0%
through and show you how it actually
works<00:04:06.699><c> let's</c><00:04:06.970><c> actually</c><00:04:07.120><c> give</c><00:04:07.480><c> these</c><00:04:07.720><c> these</c>

00:04:08.129 --> 00:04:08.139 align:start position:0%
works let's actually give these these
 

00:04:08.139 --> 00:04:10.439 align:start position:0%
works let's actually give these these
variables<00:04:08.859><c> of</c><00:04:08.980><c> ours</c><00:04:09.099><c> default</c><00:04:09.489><c> values</c><00:04:09.879><c> so</c><00:04:10.060><c> this</c>

00:04:10.439 --> 00:04:10.449 align:start position:0%
variables of ours default values so this
 

00:04:10.449 --> 00:04:12.150 align:start position:0%
variables of ours default values so this
inner<00:04:10.780><c> ray</c><00:04:10.959><c> has</c><00:04:11.199><c> absolutely</c><00:04:11.709><c> nothing</c><00:04:11.829><c> right</c>

00:04:12.150 --> 00:04:12.160 align:start position:0%
inner ray has absolutely nothing right
 

00:04:12.160 --> 00:04:13.650 align:start position:0%
inner ray has absolutely nothing right
now<00:04:12.190><c> so</c><00:04:12.519><c> let's</c><00:04:12.669><c> maybe</c><00:04:12.879><c> give</c><00:04:13.090><c> it</c><00:04:13.120><c> some</c><00:04:13.359><c> values</c>

00:04:13.650 --> 00:04:13.660 align:start position:0%
now so let's maybe give it some values
 

00:04:13.660 --> 00:04:18.930 align:start position:0%
now so let's maybe give it some values
I'll<00:04:14.440><c> say</c><00:04:14.680><c> array</c><00:04:15.099><c> 0</c><00:04:15.760><c> equals</c><00:04:16.329><c> 1</c><00:04:16.690><c> and</c><00:04:17.530><c> then</c><00:04:17.949><c> let's</c>

00:04:18.930 --> 00:04:18.940 align:start position:0%
I'll say array 0 equals 1 and then let's
 

00:04:18.940 --> 00:04:21.899 align:start position:0%
I'll say array 0 equals 1 and then let's
also<00:04:19.150><c> give</c><00:04:19.989><c> these</c><00:04:20.260><c> just</c><00:04:20.979><c> ascending</c><00:04:21.370><c> numbers</c><00:04:21.489><c> 2</c>

00:04:21.899 --> 00:04:21.909 align:start position:0%
also give these just ascending numbers 2
 

00:04:21.909 --> 00:04:24.089 align:start position:0%
also give these just ascending numbers 2
3<00:04:22.210><c> 4</c><00:04:22.479><c> 5</c><00:04:22.719><c> that</c><00:04:22.990><c> should</c><00:04:23.140><c> be</c><00:04:23.229><c> easy</c><00:04:23.409><c> enough</c><00:04:23.560><c> to</c><00:04:23.740><c> see</c>

00:04:24.089 --> 00:04:24.099 align:start position:0%
3 4 5 that should be easy enough to see
 

00:04:24.099 --> 00:04:25.980 align:start position:0%
3 4 5 that should be easy enough to see
I'm<00:04:24.490><c> going</c><00:04:24.669><c> to</c><00:04:24.729><c> copy</c><00:04:24.880><c> and</c><00:04:25.060><c> paste</c><00:04:25.180><c> this</c><00:04:25.450><c> and</c>

00:04:25.980 --> 00:04:25.990 align:start position:0%
I'm going to copy and paste this and
 

00:04:25.990 --> 00:04:28.469 align:start position:0%
I'm going to copy and paste this and
same<00:04:26.229><c> for</c><00:04:26.530><c> our</c><00:04:26.740><c> age</c><00:04:26.979><c> array</c><00:04:27.370><c> making</c><00:04:28.090><c> sure</c><00:04:28.300><c> that</c>

00:04:28.469 --> 00:04:28.479 align:start position:0%
same for our age array making sure that
 

00:04:28.479 --> 00:04:30.600 align:start position:0%
same for our age array making sure that
I<00:04:28.509><c> of</c><00:04:28.660><c> course</c><00:04:28.870><c> type</c><00:04:29.410><c> in</c><00:04:29.590><c> age</c><00:04:29.860><c> here</c><00:04:30.190><c> and</c><00:04:30.370><c> then</c>

00:04:30.600 --> 00:04:30.610 align:start position:0%
I of course type in age here and then
 

00:04:30.610 --> 00:04:32.339 align:start position:0%
I of course type in age here and then
for<00:04:30.789><c> our</c><00:04:30.849><c> vector</c><00:04:31.360><c> I'm</c><00:04:31.569><c> just</c><00:04:31.780><c> going</c><00:04:31.930><c> to</c><00:04:31.990><c> use</c><00:04:32.199><c> the</c>

00:04:32.339 --> 00:04:32.349 align:start position:0%
for our vector I'm just going to use the
 

00:04:32.349 --> 00:04:33.809 align:start position:0%
for our vector I'm just going to use the
default<00:04:32.500><c> constructor</c><00:04:32.860><c> here</c><00:04:33.340><c> to</c><00:04:33.520><c> actually</c>

00:04:33.809 --> 00:04:33.819 align:start position:0%
default constructor here to actually
 

00:04:33.819 --> 00:04:36.210 align:start position:0%
default constructor here to actually
give<00:04:33.940><c> it</c><00:04:34.060><c> some</c><00:04:34.240><c> values</c><00:04:34.539><c> so</c><00:04:35.050><c> we'll</c><00:04:35.229><c> say</c><00:04:35.380><c> X</c><00:04:35.620><c> will</c>

00:04:36.210 --> 00:04:36.220 align:start position:0%
give it some values so we'll say X will
 

00:04:36.220 --> 00:04:39.930 align:start position:0%
give it some values so we'll say X will
be<00:04:36.400><c> 10</c><00:04:36.940><c> by</c><00:04:36.970><c> default</c><00:04:37.449><c> and</c><00:04:38.080><c> Y</c><00:04:38.259><c> will</c><00:04:38.470><c> be</c><00:04:38.620><c> 11</c><00:04:39.069><c> and</c><00:04:39.280><c> Z</c>

00:04:39.930 --> 00:04:39.940 align:start position:0%
be 10 by default and Y will be 11 and Z
 

00:04:39.940 --> 00:04:40.920 align:start position:0%
be 10 by default and Y will be 11 and Z
will<00:04:40.150><c> be</c><00:04:40.330><c> 12</c>

00:04:40.920 --> 00:04:40.930 align:start position:0%
will be 12
 

00:04:40.930 --> 00:04:42.450 align:start position:0%
will be 12
now<00:04:41.169><c> these</c><00:04:41.319><c> are</c><00:04:41.530><c> floats</c><00:04:41.830><c> so</c><00:04:41.949><c> they</c><00:04:42.130><c> might</c><00:04:42.310><c> look</c>

00:04:42.450 --> 00:04:42.460 align:start position:0%
now these are floats so they might look
 

00:04:42.460 --> 00:04:43.770 align:start position:0%
now these are floats so they might look
a<00:04:42.550><c> little</c><00:04:42.669><c> bit</c><00:04:42.819><c> different</c><00:04:43.150><c> in</c><00:04:43.240><c> memory</c><00:04:43.509><c> but</c><00:04:43.690><c> it</c>

00:04:43.770 --> 00:04:43.780 align:start position:0%
a little bit different in memory but it
 

00:04:43.780 --> 00:04:45.480 align:start position:0%
a little bit different in memory but it
should<00:04:43.900><c> be</c><00:04:43.990><c> okay</c><00:04:44.199><c> all</c><00:04:44.470><c> right</c><00:04:44.590><c> cool</c><00:04:44.919><c> so</c><00:04:45.099><c> now</c><00:04:45.160><c> so</c>

00:04:45.480 --> 00:04:45.490 align:start position:0%
should be okay all right cool so now so
 

00:04:45.490 --> 00:04:47.100 align:start position:0%
should be okay all right cool so now so
now<00:04:45.580><c> let's</c><00:04:45.729><c> put</c><00:04:45.849><c> a</c><00:04:45.880><c> breakpoint</c><00:04:46.120><c> over</c><00:04:46.599><c> here</c><00:04:46.840><c> and</c>

00:04:47.100 --> 00:04:47.110 align:start position:0%
now let's put a breakpoint over here and
 

00:04:47.110 --> 00:04:48.809 align:start position:0%
now let's put a breakpoint over here and
hit<00:04:47.380><c> f5</c><00:04:47.740><c> so</c><00:04:48.130><c> the</c><00:04:48.220><c> first</c><00:04:48.370><c> thing</c><00:04:48.490><c> I'm</c><00:04:48.580><c> going</c><00:04:48.699><c> to</c>

00:04:48.809 --> 00:04:48.819 align:start position:0%
hit f5 so the first thing I'm going to
 

00:04:48.819 --> 00:04:50.100 align:start position:0%
hit f5 so the first thing I'm going to
do<00:04:48.940><c> is</c><00:04:49.060><c> actually</c><00:04:49.210><c> go</c><00:04:49.449><c> to</c><00:04:49.509><c> the</c><00:04:49.690><c> memory</c><00:04:49.930><c> address</c>

00:04:50.100 --> 00:04:50.110 align:start position:0%
do is actually go to the memory address
 

00:04:50.110 --> 00:04:52.499 align:start position:0%
do is actually go to the memory address
of<00:04:50.259><c> values</c><00:04:50.830><c> to</c><00:04:50.860><c> fight</c><00:04:51.280><c> type</c><00:04:51.970><c> an</c><00:04:52.090><c> ampersand</c>

00:04:52.499 --> 00:04:52.509 align:start position:0%
of values to fight type an ampersand
 

00:04:52.509 --> 00:04:54.450 align:start position:0%
of values to fight type an ampersand
value<00:04:53.110><c> in</c><00:04:53.289><c> my</c><00:04:53.440><c> memory</c><00:04:53.800><c> view</c><00:04:54.039><c> over</c><00:04:54.220><c> here</c><00:04:54.370><c> you</c>

00:04:54.450 --> 00:04:54.460 align:start position:0%
value in my memory view over here you
 

00:04:54.460 --> 00:04:55.800 align:start position:0%
value in my memory view over here you
can<00:04:54.580><c> access</c><00:04:54.789><c> the</c><00:04:54.940><c> memory</c><00:04:55.150><c> view</c><00:04:55.389><c> by</c><00:04:55.539><c> going</c><00:04:55.720><c> to</c>

00:04:55.800 --> 00:04:55.810 align:start position:0%
can access the memory view by going to
 

00:04:55.810 --> 00:04:58.290 align:start position:0%
can access the memory view by going to
debug<00:04:56.169><c> windows</c><00:04:56.770><c> memory</c><00:04:57.370><c> and</c><00:04:57.639><c> then</c><00:04:57.789><c> memory</c><00:04:57.970><c> one</c>

00:04:58.290 --> 00:04:58.300 align:start position:0%
debug windows memory and then memory one
 

00:04:58.300 --> 00:04:59.850 align:start position:0%
debug windows memory and then memory one
you<00:04:58.720><c> can</c><00:04:58.870><c> see</c><00:04:59.020><c> that</c><00:04:59.199><c> it</c><00:04:59.289><c> takes</c><00:04:59.500><c> me</c><00:04:59.650><c> to</c><00:04:59.770><c> the</c>

00:04:59.850 --> 00:04:59.860 align:start position:0%
you can see that it takes me to the
 

00:04:59.860 --> 00:05:01.399 align:start position:0%
you can see that it takes me to the
memory<00:05:00.220><c> address</c><00:05:00.460><c> of</c><00:05:00.490><c> that</c><00:05:00.699><c> variable</c><00:05:01.240><c> now</c>

00:05:01.399 --> 00:05:01.409 align:start position:0%
memory address of that variable now
 

00:05:01.409 --> 00:05:03.839 align:start position:0%
memory address of that variable now
ccccc<00:05:02.440><c> in</c><00:05:02.620><c> debug</c><00:05:03.039><c> mode</c><00:05:03.250><c> means</c><00:05:03.490><c> that</c><00:05:03.610><c> we</c><00:05:03.699><c> just</c>

00:05:03.839 --> 00:05:03.849 align:start position:0%
ccccc in debug mode means that we just
 

00:05:03.849 --> 00:05:05.370 align:start position:0%
ccccc in debug mode means that we just
haven't<00:05:04.060><c> actually</c><00:05:04.300><c> initialized</c><00:05:04.870><c> that</c><00:05:05.050><c> value</c>

00:05:05.370 --> 00:05:05.380 align:start position:0%
haven't actually initialized that value
 

00:05:05.380 --> 00:05:07.740 align:start position:0%
haven't actually initialized that value
yet<00:05:05.560><c> so</c><00:05:06.009><c> if</c><00:05:06.099><c> I</c><00:05:06.190><c> hit</c><00:05:06.340><c> f10</c><00:05:06.729><c> you</c><00:05:07.270><c> can</c><00:05:07.419><c> see</c><00:05:07.539><c> that</c><00:05:07.659><c> we</c>

00:05:07.740 --> 00:05:07.750 align:start position:0%
yet so if I hit f10 you can see that we
 

00:05:07.750 --> 00:05:09.960 align:start position:0%
yet so if I hit f10 you can see that we
change<00:05:08.020><c> to</c><00:05:08.289><c> five</c><00:05:08.560><c> so</c><00:05:08.860><c> now</c><00:05:08.889><c> we</c><00:05:09.490><c> have</c><00:05:09.669><c> that</c><00:05:09.789><c> value</c>

00:05:09.960 --> 00:05:09.970 align:start position:0%
change to five so now we have that value
 

00:05:09.970 --> 00:05:12.120 align:start position:0%
change to five so now we have that value
in<00:05:10.270><c> our</c><00:05:10.360><c> actual</c><00:05:10.690><c> memory</c><00:05:11.020><c> pretty</c><00:05:11.409><c> simple</c><00:05:11.800><c> now</c>

00:05:12.120 --> 00:05:12.130 align:start position:0%
in our actual memory pretty simple now
 

00:05:12.130 --> 00:05:15.330 align:start position:0%
in our actual memory pretty simple now
let's<00:05:12.340><c> hit</c><00:05:12.490><c> f10</c><00:05:12.909><c> and</c><00:05:13.440><c> see</c><00:05:14.440><c> where</c><00:05:14.889><c> this</c><00:05:15.009><c> array</c>

00:05:15.330 --> 00:05:15.340 align:start position:0%
let's hit f10 and see where this array
 

00:05:15.340 --> 00:05:17.040 align:start position:0%
let's hit f10 and see where this array
actually<00:05:15.789><c> is</c><00:05:15.940><c> so</c><00:05:16.210><c> I'm</c><00:05:16.270><c> just</c><00:05:16.389><c> gonna</c><00:05:16.509><c> type</c><00:05:16.720><c> in</c><00:05:16.930><c> a</c>

00:05:17.040 --> 00:05:17.050 align:start position:0%
actually is so I'm just gonna type in a
 

00:05:17.050 --> 00:05:18.570 align:start position:0%
actually is so I'm just gonna type in a
right<00:05:17.289><c> order</c><00:05:17.650><c> to</c><00:05:17.710><c> use</c><00:05:17.800><c> a</c><00:05:17.830><c> pointer</c><00:05:18.250><c> cuz</c><00:05:18.400><c> it's</c><00:05:18.490><c> an</c>

00:05:18.570 --> 00:05:18.580 align:start position:0%
right order to use a pointer cuz it's an
 

00:05:18.580 --> 00:05:20.610 align:start position:0%
right order to use a pointer cuz it's an
array<00:05:18.789><c> we'll</c><00:05:19.030><c> see</c><00:05:19.210><c> where</c><00:05:19.360><c> we</c><00:05:19.449><c> are</c><00:05:19.479><c> okay</c><00:05:20.020><c> pretty</c>

00:05:20.610 --> 00:05:20.620 align:start position:0%
array we'll see where we are okay pretty
 

00:05:20.620 --> 00:05:23.189 align:start position:0%
array we'll see where we are okay pretty
cool<00:05:20.830><c> so</c><00:05:20.949><c> we</c><00:05:21.039><c> have</c><00:05:21.130><c> one</c><00:05:21.370><c> here</c><00:05:21.729><c> let's</c><00:05:22.720><c> hit</c><00:05:22.870><c> f10</c>

00:05:23.189 --> 00:05:23.199 align:start position:0%
cool so we have one here let's hit f10
 

00:05:23.199 --> 00:05:25.559 align:start position:0%
cool so we have one here let's hit f10
and<00:05:23.460><c> then</c><00:05:24.460><c> again</c><00:05:24.729><c> and</c><00:05:25.000><c> then</c><00:05:25.030><c> again</c><00:05:25.210><c> and</c><00:05:25.509><c> then</c>

00:05:25.559 --> 00:05:25.569 align:start position:0%
and then again and then again and then
 

00:05:25.569 --> 00:05:28.110 align:start position:0%
and then again and then again and then
again<00:05:25.710><c> okay</c><00:05:26.710><c> cool</c><00:05:27.069><c> so</c><00:05:27.490><c> check</c><00:05:27.669><c> that</c><00:05:27.699><c> out</c><00:05:27.849><c> we</c>

00:05:28.110 --> 00:05:28.120 align:start position:0%
again okay cool so check that out we
 

00:05:28.120 --> 00:05:30.629 align:start position:0%
again okay cool so check that out we
have<00:05:28.150><c> one</c><00:05:28.569><c> two</c><00:05:28.900><c> three</c><00:05:29.349><c> four</c><00:05:29.680><c> five</c><00:05:30.070><c> in</c><00:05:30.460><c> our</c>

00:05:30.629 --> 00:05:30.639 align:start position:0%
have one two three four five in our
 

00:05:30.639 --> 00:05:33.270 align:start position:0%
have one two three four five in our
memory<00:05:30.969><c> all</c><00:05:31.330><c> in</c><00:05:31.539><c> a</c><00:05:31.630><c> row</c><00:05:31.750><c> brilliant</c><00:05:32.320><c> now</c><00:05:32.710><c> if</c><00:05:33.070><c> we</c>

00:05:33.270 --> 00:05:33.280 align:start position:0%
memory all in a row brilliant now if we
 

00:05:33.280 --> 00:05:37.050 align:start position:0%
memory all in a row brilliant now if we
look<00:05:33.430><c> over</c><00:05:33.759><c> a</c><00:05:33.909><c> few</c><00:05:34.630><c> bytes</c><00:05:34.919><c> we</c><00:05:35.919><c> also</c><00:05:36.099><c> have</c><00:05:36.490><c> five</c>

00:05:37.050 --> 00:05:37.060 align:start position:0%
look over a few bytes we also have five
 

00:05:37.060 --> 00:05:40.589 align:start position:0%
look over a few bytes we also have five
over<00:05:37.690><c> here</c><00:05:38.050><c> right</c><00:05:38.800><c> and</c><00:05:39.009><c> that</c><00:05:39.250><c> five</c><00:05:39.580><c> happens</c><00:05:40.449><c> to</c>

00:05:40.589 --> 00:05:40.599 align:start position:0%
over here right and that five happens to
 

00:05:40.599 --> 00:05:42.899 align:start position:0%
over here right and that five happens to
be<00:05:40.780><c> our</c><00:05:41.020><c> value</c><00:05:41.680><c> five</c><00:05:41.949><c> so</c><00:05:42.310><c> if</c><00:05:42.430><c> I</c><00:05:42.520><c> go</c><00:05:42.699><c> to</c><00:05:42.759><c> the</c>

00:05:42.899 --> 00:05:42.909 align:start position:0%
be our value five so if I go to the
 

00:05:42.909 --> 00:05:45.600 align:start position:0%
be our value five so if I go to the
memory<00:05:43.150><c> address</c><00:05:43.360><c> of</c><00:05:43.389><c> value</c><00:05:43.810><c> once</c><00:05:44.110><c> more</c><00:05:44.610><c> you</c>

00:05:45.600 --> 00:05:45.610 align:start position:0%
memory address of value once more you
 

00:05:45.610 --> 00:05:46.920 align:start position:0%
memory address of value once more you
can<00:05:45.759><c> see</c><00:05:45.880><c> that</c><00:05:46.000><c> if</c><00:05:46.090><c> I</c><00:05:46.180><c> scroll</c><00:05:46.419><c> up</c><00:05:46.479><c> just</c><00:05:46.630><c> a</c>

00:05:46.920 --> 00:05:46.930 align:start position:0%
can see that if I scroll up just a
 

00:05:46.930 --> 00:05:49.740 align:start position:0%
can see that if I scroll up just a
little<00:05:46.960><c> bit</c><00:05:47.289><c> that's</c><00:05:48.009><c> my</c><00:05:48.219><c> value</c><00:05:48.430><c> and</c><00:05:48.759><c> that</c><00:05:49.449><c> is</c>

00:05:49.740 --> 00:05:49.750 align:start position:0%
little bit that's my value and that is
 

00:05:49.750 --> 00:05:51.420 align:start position:0%
little bit that's my value and that is
my<00:05:49.960><c> actual</c><00:05:50.139><c> array</c><00:05:50.500><c> so</c><00:05:50.830><c> they're</c><00:05:50.979><c> right</c><00:05:51.130><c> next</c><00:05:51.310><c> to</c>

00:05:51.420 --> 00:05:51.430 align:start position:0%
my actual array so they're right next to
 

00:05:51.430 --> 00:05:52.770 align:start position:0%
my actual array so they're right next to
each<00:05:51.580><c> other</c><00:05:51.669><c> now</c><00:05:51.909><c> there</c><00:05:52.060><c> are</c><00:05:52.150><c> some</c><00:05:52.330><c> bytes</c><00:05:52.539><c> in</c>

00:05:52.770 --> 00:05:52.780 align:start position:0%
each other now there are some bytes in
 

00:05:52.780 --> 00:05:54.149 align:start position:0%
each other now there are some bytes in
between<00:05:53.139><c> the</c><00:05:53.259><c> two</c><00:05:53.440><c> that's</c><00:05:53.860><c> just</c><00:05:54.039><c> because</c>

00:05:54.149 --> 00:05:54.159 align:start position:0%
between the two that's just because
 

00:05:54.159 --> 00:05:55.379 align:start position:0%
between the two that's just because
we're<00:05:54.370><c> running</c><00:05:54.490><c> in</c><00:05:54.669><c> debug</c><00:05:55.000><c> mode</c><00:05:55.030><c> it's</c>

00:05:55.379 --> 00:05:55.389 align:start position:0%
we're running in debug mode it's
 

00:05:55.389 --> 00:05:57.120 align:start position:0%
we're running in debug mode it's
actually<00:05:55.630><c> just</c><00:05:55.750><c> adding</c><00:05:56.050><c> safety</c><00:05:56.349><c> guards</c><00:05:56.860><c> kind</c>

00:05:57.120 --> 00:05:57.130 align:start position:0%
actually just adding safety guards kind
 

00:05:57.130 --> 00:05:58.439 align:start position:0%
actually just adding safety guards kind
of<00:05:57.190><c> around</c><00:05:57.370><c> all</c><00:05:57.550><c> about</c><00:05:57.789><c> variables</c><00:05:58.180><c> to</c><00:05:58.330><c> make</c>

00:05:58.439 --> 00:05:58.449 align:start position:0%
of around all about variables to make
 

00:05:58.449 --> 00:05:59.939 align:start position:0%
of around all about variables to make
sure<00:05:58.599><c> that</c><00:05:58.780><c> we</c><00:05:58.870><c> don't</c><00:05:58.990><c> overflow</c><00:05:59.500><c> them</c><00:05:59.770><c> or</c>

00:05:59.939 --> 00:05:59.949 align:start position:0%
sure that we don't overflow them or
 

00:05:59.949 --> 00:06:02.640 align:start position:0%
sure that we don't overflow them or
access<00:06:00.849><c> them</c><00:06:01.090><c> in</c><00:06:01.810><c> the</c><00:06:01.990><c> wrong</c><00:06:02.110><c> memory</c><00:06:02.440><c> address</c>

00:06:02.640 --> 00:06:02.650 align:start position:0%
access them in the wrong memory address
 

00:06:02.650 --> 00:06:03.480 align:start position:0%
access them in the wrong memory address
and<00:06:02.800><c> all</c><00:06:02.889><c> that</c><00:06:03.039><c> kind</c><00:06:03.219><c> of</c><00:06:03.250><c> stuff</c>

00:06:03.480 --> 00:06:03.490 align:start position:0%
and all that kind of stuff
 

00:06:03.490 --> 00:06:05.010 align:start position:0%
and all that kind of stuff
and<00:06:03.669><c> finally</c><00:06:03.969><c> we</c><00:06:04.060><c> have</c><00:06:04.180><c> our</c><00:06:04.210><c> vector</c><00:06:04.539><c> so</c><00:06:04.840><c> if</c><00:06:04.930><c> I</c>

00:06:05.010 --> 00:06:05.020 align:start position:0%
and finally we have our vector so if I
 

00:06:05.020 --> 00:06:07.140 align:start position:0%
and finally we have our vector so if I
hit<00:06:05.169><c> f10</c><00:06:05.560><c> and</c><00:06:05.770><c> then</c><00:06:06.190><c> I</c><00:06:06.219><c> look</c><00:06:06.490><c> at</c><00:06:06.669><c> the</c><00:06:06.909><c> actual</c>

00:06:07.140 --> 00:06:07.150 align:start position:0%
hit f10 and then I look at the actual
 

00:06:07.150 --> 00:06:09.180 align:start position:0%
hit f10 and then I look at the actual
memory<00:06:07.419><c> address</c><00:06:07.780><c> of</c><00:06:07.960><c> our</c><00:06:08.139><c> vector</c><00:06:08.469><c> you</c><00:06:08.979><c> can</c><00:06:09.009><c> see</c>

00:06:09.180 --> 00:06:09.190 align:start position:0%
memory address of our vector you can see
 

00:06:09.190 --> 00:06:11.100 align:start position:0%
memory address of our vector you can see
there<00:06:09.340><c> over</c><00:06:09.460><c> here</c><00:06:09.490><c> we</c><00:06:09.729><c> have</c><00:06:09.849><c> 0</c><00:06:10.120><c> to</c><00:06:10.449><c> 0</c><00:06:10.690><c> for</c><00:06:10.900><c> 100</c>

00:06:11.100 --> 00:06:11.110 align:start position:0%
there over here we have 0 to 0 for 100
 

00:06:11.110 --> 00:06:14.249 align:start position:0%
there over here we have 0 to 0 for 100
ah<00:06:11.500><c> basically</c><00:06:12.490><c> we</c><00:06:12.729><c> have</c><00:06:12.909><c> our</c><00:06:13.120><c> 12</c><00:06:13.659><c> bytes</c><00:06:13.870><c> here</c>

00:06:14.249 --> 00:06:14.259 align:start position:0%
ah basically we have our 12 bytes here
 

00:06:14.259 --> 00:06:16.320 align:start position:0%
ah basically we have our 12 bytes here
that<00:06:14.560><c> represents</c><00:06:14.979><c> our</c><00:06:15.099><c> vector</c><00:06:15.490><c> a</c><00:06:15.699><c> bunch</c><00:06:16.210><c> of</c>

00:06:16.320 --> 00:06:16.330 align:start position:0%
that represents our vector a bunch of
 

00:06:16.330 --> 00:06:18.540 align:start position:0%
that represents our vector a bunch of
safety<00:06:16.659><c> guards</c><00:06:16.960><c> and</c><00:06:17.110><c> then</c><00:06:17.319><c> the</c><00:06:17.680><c> 1</c><00:06:17.919><c> 2</c><00:06:18.099><c> 3</c><00:06:18.219><c> 4</c><00:06:18.400><c> 5</c>

00:06:18.540 --> 00:06:18.550 align:start position:0%
safety guards and then the 1 2 3 4 5
 

00:06:18.550 --> 00:06:21.689 align:start position:0%
safety guards and then the 1 2 3 4 5
array<00:06:19.060><c> and</c><00:06:19.360><c> then</c><00:06:19.990><c> that</c><00:06:20.349><c> 5</c><00:06:20.650><c> variable</c><00:06:21.219><c> so</c><00:06:21.550><c> it's</c>

00:06:21.689 --> 00:06:21.699 align:start position:0%
array and then that 5 variable so it's
 

00:06:21.699 --> 00:06:23.070 align:start position:0%
array and then that 5 variable so it's
all<00:06:21.849><c> really</c><00:06:22.000><c> kind</c><00:06:22.300><c> of</c><00:06:22.360><c> close</c><00:06:22.539><c> together</c><00:06:22.750><c> in</c>

00:06:23.070 --> 00:06:23.080 align:start position:0%
all really kind of close together in
 

00:06:23.080 --> 00:06:24.689 align:start position:0%
all really kind of close together in
memory<00:06:23.229><c> because</c><00:06:23.650><c> what</c><00:06:23.800><c> actually</c><00:06:23.889><c> happens</c><00:06:24.460><c> is</c>

00:06:24.689 --> 00:06:24.699 align:start position:0%
memory because what actually happens is
 

00:06:24.699 --> 00:06:27.029 align:start position:0%
memory because what actually happens is
when<00:06:24.909><c> we</c><00:06:25.419><c> allocate</c><00:06:26.229><c> variables</c><00:06:26.650><c> in</c><00:06:26.710><c> the</c><00:06:26.800><c> stack</c>

00:06:27.029 --> 00:06:27.039 align:start position:0%
when we allocate variables in the stack
 

00:06:27.039 --> 00:06:29.969 align:start position:0%
when we allocate variables in the stack
all<00:06:27.789><c> it</c><00:06:28.060><c> happens</c><00:06:28.419><c> is</c><00:06:28.659><c> the</c><00:06:28.870><c> stack</c><00:06:29.169><c> pointer</c><00:06:29.199><c> that</c>

00:06:29.969 --> 00:06:29.979 align:start position:0%
all it happens is the stack pointer that
 

00:06:29.979 --> 00:06:31.559 align:start position:0%
all it happens is the stack pointer that
is<00:06:30.039><c> the</c><00:06:30.340><c> pointer</c><00:06:30.759><c> of</c><00:06:30.789><c> like</c><00:06:31.090><c> the</c><00:06:31.210><c> top</c><00:06:31.360><c> of</c><00:06:31.419><c> the</c>

00:06:31.559 --> 00:06:31.569 align:start position:0%
is the pointer of like the top of the
 

00:06:31.569 --> 00:06:32.010 align:start position:0%
is the pointer of like the top of the
stack

00:06:32.010 --> 00:06:32.020 align:start position:0%
stack
 

00:06:32.020 --> 00:06:34.529 align:start position:0%
stack
basically<00:06:32.500><c> just</c><00:06:32.620><c> moves</c><00:06:33.310><c> moves</c><00:06:34.029><c> that</c><00:06:34.270><c> amount</c>

00:06:34.529 --> 00:06:34.539 align:start position:0%
basically just moves moves that amount
 

00:06:34.539 --> 00:06:35.850 align:start position:0%
basically just moves moves that amount
of<00:06:34.630><c> bytes</c><00:06:34.810><c> so</c><00:06:35.020><c> if</c><00:06:35.080><c> I</c><00:06:35.169><c> want</c><00:06:35.380><c> to</c><00:06:35.440><c> allocate</c><00:06:35.589><c> an</c>

00:06:35.850 --> 00:06:35.860 align:start position:0%
of bytes so if I want to allocate an
 

00:06:35.860 --> 00:06:38.310 align:start position:0%
of bytes so if I want to allocate an
integer<00:06:36.190><c> that's</c><00:06:36.760><c> 4</c><00:06:37.089><c> bytes</c><00:06:37.300><c> we</c><00:06:37.779><c> move</c><00:06:38.020><c> the</c><00:06:38.139><c> stack</c>

00:06:38.310 --> 00:06:38.320 align:start position:0%
integer that's 4 bytes we move the stack
 

00:06:38.320 --> 00:06:39.750 align:start position:0%
integer that's 4 bytes we move the stack
pointer<00:06:38.349><c> 4</c><00:06:39.010><c> bytes</c>

00:06:39.750 --> 00:06:39.760 align:start position:0%
pointer 4 bytes
 

00:06:39.760 --> 00:06:41.670 align:start position:0%
pointer 4 bytes
said<00:06:39.940><c> if</c><00:06:40.090><c> I</c><00:06:40.240><c> want</c><00:06:40.420><c> to</c><00:06:40.480><c> allocate</c><00:06:40.810><c> an</c><00:06:40.930><c> array</c><00:06:41.170><c> like</c>

00:06:41.670 --> 00:06:41.680 align:start position:0%
said if I want to allocate an array like
 

00:06:41.680 --> 00:06:43.500 align:start position:0%
said if I want to allocate an array like
we<00:06:41.830><c> have</c><00:06:42.010><c> here</c><00:06:42.250><c> five</c><00:06:42.580><c> integers</c><00:06:42.850><c> that's</c><00:06:43.180><c> four</c>

00:06:43.500 --> 00:06:43.510 align:start position:0%
we have here five integers that's four
 

00:06:43.510 --> 00:06:46.350 align:start position:0%
we have here five integers that's four
times<00:06:43.720><c> five</c><00:06:44.020><c> or</c><00:06:44.350><c> twenty</c><00:06:44.890><c> 20</c><00:06:45.700><c> bytes</c><00:06:45.880><c> the</c><00:06:46.180><c> stack</c>

00:06:46.350 --> 00:06:46.360 align:start position:0%
times five or twenty 20 bytes the stack
 

00:06:46.360 --> 00:06:48.420 align:start position:0%
times five or twenty 20 bytes the stack
pointer<00:06:46.390><c> moves</c><00:06:46.840><c> 20</c><00:06:47.230><c> bytes</c><00:06:47.380><c> and</c><00:06:47.590><c> finally</c><00:06:47.950><c> for</c>

00:06:48.420 --> 00:06:48.430 align:start position:0%
pointer moves 20 bytes and finally for
 

00:06:48.430 --> 00:06:49.710 align:start position:0%
pointer moves 20 bytes and finally for
our<00:06:48.520><c> vector</c><00:06:48.790><c> three</c><00:06:49.000><c> we</c><00:06:49.120><c> have</c><00:06:49.210><c> three</c><00:06:49.240><c> floats</c>

00:06:49.710 --> 00:06:49.720 align:start position:0%
our vector three we have three floats
 

00:06:49.720 --> 00:06:52.200 align:start position:0%
our vector three we have three floats
each<00:06:50.080><c> float</c><00:06:50.380><c> is</c><00:06:50.500><c> four</c><00:06:50.650><c> bytes</c><00:06:50.800><c> so</c><00:06:51.220><c> 12</c><00:06:51.490><c> bytes</c><00:06:51.700><c> we</c>

00:06:52.200 --> 00:06:52.210 align:start position:0%
each float is four bytes so 12 bytes we
 

00:06:52.210 --> 00:06:53.970 align:start position:0%
each float is four bytes so 12 bytes we
just<00:06:52.420><c> move</c><00:06:52.540><c> the</c><00:06:52.660><c> stack</c><00:06:52.870><c> pointer</c><00:06:52.900><c> that</c><00:06:53.680><c> is</c><00:06:53.830><c> it</c>

00:06:53.970 --> 00:06:53.980 align:start position:0%
just move the stack pointer that is it
 

00:06:53.980 --> 00:06:56.730 align:start position:0%
just move the stack pointer that is it
the<00:06:54.490><c> the</c><00:06:55.090><c> memory</c><00:06:55.420><c> is</c><00:06:55.510><c> literally</c><00:06:56.140><c> stored</c><00:06:56.530><c> on</c>

00:06:56.730 --> 00:06:56.740 align:start position:0%
the the memory is literally stored on
 

00:06:56.740 --> 00:06:59.400 align:start position:0%
the the memory is literally stored on
top<00:06:57.100><c> of</c><00:06:57.190><c> each</c><00:06:57.310><c> other</c><00:06:57.430><c> like</c><00:06:57.730><c> a</c><00:06:57.910><c> stack</c><00:06:58.390><c> now</c><00:06:59.080><c> in</c>

00:06:59.400 --> 00:06:59.410 align:start position:0%
top of each other like a stack now in
 

00:06:59.410 --> 00:07:01.140 align:start position:0%
top of each other like a stack now in
most<00:06:59.710><c> stack</c><00:07:00.040><c> implementations</c><00:07:00.730><c> we</c><00:07:00.880><c> actually</c>

00:07:01.140 --> 00:07:01.150 align:start position:0%
most stack implementations we actually
 

00:07:01.150 --> 00:07:02.640 align:start position:0%
most stack implementations we actually
grow<00:07:01.300><c> the</c><00:07:01.450><c> stack</c><00:07:01.600><c> backwards</c><00:07:02.170><c> which</c><00:07:02.350><c> is</c><00:07:02.500><c> why</c>

00:07:02.640 --> 00:07:02.650 align:start position:0%
grow the stack backwards which is why
 

00:07:02.650 --> 00:07:04.230 align:start position:0%
grow the stack backwards which is why
you're<00:07:02.830><c> seeing</c><00:07:03.100><c> higher</c><00:07:03.760><c> memory</c><00:07:04.060><c> addresses</c>

00:07:04.230 --> 00:07:04.240 align:start position:0%
you're seeing higher memory addresses
 

00:07:04.240 --> 00:07:07.110 align:start position:0%
you're seeing higher memory addresses
having<00:07:05.080><c> like</c><00:07:05.320><c> the</c><00:07:05.560><c> first</c><00:07:05.770><c> value</c><00:07:06.100><c> so</c><00:07:06.370><c> int</c><00:07:06.640><c> value</c>

00:07:07.110 --> 00:07:07.120 align:start position:0%
having like the first value so int value
 

00:07:07.120 --> 00:07:08.820 align:start position:0%
having like the first value so int value
is<00:07:07.300><c> actually</c><00:07:07.900><c> stored</c><00:07:08.200><c> at</c><00:07:08.380><c> a</c><00:07:08.440><c> higher</c><00:07:08.620><c> memory</c>

00:07:08.820 --> 00:07:08.830 align:start position:0%
is actually stored at a higher memory
 

00:07:08.830 --> 00:07:10.800 align:start position:0%
is actually stored at a higher memory
address<00:07:09.190><c> and</c><00:07:09.220><c> then</c><00:07:09.490><c> we</c><00:07:09.610><c> kind</c><00:07:09.820><c> of</c><00:07:09.880><c> store</c><00:07:10.180><c> the</c>

00:07:10.800 --> 00:07:10.810 align:start position:0%
address and then we kind of store the
 

00:07:10.810 --> 00:07:12.990 align:start position:0%
address and then we kind of store the
the<00:07:10.840><c> array</c><00:07:11.800><c> next</c><00:07:12.250><c> to</c><00:07:12.400><c> it</c><00:07:12.520><c> but</c><00:07:12.760><c> kind</c><00:07:12.910><c> of</c>

00:07:12.990 --> 00:07:13.000 align:start position:0%
the array next to it but kind of
 

00:07:13.000 --> 00:07:14.550 align:start position:0%
the array next to it but kind of
backwards<00:07:13.510><c> at</c><00:07:13.690><c> a</c><00:07:13.720><c> lower</c><00:07:13.930><c> memory</c><00:07:14.170><c> address</c>

00:07:14.550 --> 00:07:14.560 align:start position:0%
backwards at a lower memory address
 

00:07:14.560 --> 00:07:16.800 align:start position:0%
backwards at a lower memory address
value<00:07:14.890><c> and</c><00:07:15.010><c> then</c><00:07:15.300><c> because</c><00:07:16.300><c> it</c><00:07:16.420><c> kind</c><00:07:16.540><c> of</c><00:07:16.600><c> grows</c>

00:07:16.800 --> 00:07:16.810 align:start position:0%
value and then because it kind of grows
 

00:07:16.810 --> 00:07:19.800 align:start position:0%
value and then because it kind of grows
backwards<00:07:17.260><c> but</c><00:07:17.740><c> the</c><00:07:17.890><c> idea</c><00:07:18.220><c> of</c><00:07:18.250><c> a</c><00:07:18.340><c> stack</c><00:07:18.640><c> is</c><00:07:18.910><c> we</c>

00:07:19.800 --> 00:07:19.810 align:start position:0%
backwards but the idea of a stack is we
 

00:07:19.810 --> 00:07:21.210 align:start position:0%
backwards but the idea of a stack is we
literally<00:07:20.110><c> just</c><00:07:20.380><c> stack</c><00:07:20.560><c> things</c><00:07:20.800><c> on</c><00:07:20.980><c> top</c><00:07:21.100><c> of</c>

00:07:21.210 --> 00:07:21.220 align:start position:0%
literally just stack things on top of
 

00:07:21.220 --> 00:07:22.710 align:start position:0%
literally just stack things on top of
each<00:07:21.340><c> other</c><00:07:21.550><c> which</c><00:07:21.910><c> is</c><00:07:22.030><c> why</c><00:07:22.210><c> a</c><00:07:22.240><c> stack</c>

00:07:22.710 --> 00:07:22.720 align:start position:0%
each other which is why a stack
 

00:07:22.720 --> 00:07:24.990 align:start position:0%
each other which is why a stack
allocation<00:07:23.170><c> is</c><00:07:23.740><c> extremely</c><00:07:24.490><c> fast</c>

00:07:24.990 --> 00:07:25.000 align:start position:0%
allocation is extremely fast
 

00:07:25.000 --> 00:07:28.020 align:start position:0%
allocation is extremely fast
it's<00:07:25.510><c> literally</c><00:07:26.380><c> like</c><00:07:26.770><c> one</c><00:07:27.040><c> CPU</c><00:07:27.340><c> instruction</c>

00:07:28.020 --> 00:07:28.030 align:start position:0%
it's literally like one CPU instruction
 

00:07:28.030 --> 00:07:30.570 align:start position:0%
it's literally like one CPU instruction
all<00:07:28.270><c> we</c><00:07:28.780><c> do</c><00:07:29.050><c> is</c><00:07:29.350><c> we</c><00:07:29.860><c> move</c><00:07:30.130><c> the</c><00:07:30.310><c> stack</c><00:07:30.550><c> pointer</c>

00:07:30.570 --> 00:07:30.580 align:start position:0%
all we do is we move the stack pointer
 

00:07:30.580 --> 00:07:33.120 align:start position:0%
all we do is we move the stack pointer
and<00:07:31.210><c> then</c><00:07:31.960><c> we</c><00:07:32.110><c> return</c><00:07:32.290><c> the</c><00:07:32.680><c> address</c><00:07:32.770><c> of</c><00:07:33.100><c> that</c>

00:07:33.120 --> 00:07:33.130 align:start position:0%
and then we return the address of that
 

00:07:33.130 --> 00:07:35.880 align:start position:0%
and then we return the address of that
stack<00:07:33.460><c> pointer</c><00:07:33.850><c> that's</c><00:07:34.240><c> it</c><00:07:34.540><c> so</c><00:07:35.320><c> again</c><00:07:35.560><c> I</c><00:07:35.740><c> want</c>

00:07:35.880 --> 00:07:35.890 align:start position:0%
stack pointer that's it so again I want
 

00:07:35.890 --> 00:07:37.560 align:start position:0%
stack pointer that's it so again I want
to<00:07:35.920><c> allocate</c><00:07:36.250><c> an</c><00:07:36.370><c> integer</c><00:07:36.610><c> that's</c><00:07:37.030><c> four</c><00:07:37.360><c> bytes</c>

00:07:37.560 --> 00:07:37.570 align:start position:0%
to allocate an integer that's four bytes
 

00:07:37.570 --> 00:07:39.330 align:start position:0%
to allocate an integer that's four bytes
I<00:07:37.780><c> move</c><00:07:38.320><c> the</c><00:07:38.440><c> stack</c><00:07:38.650><c> pointer</c><00:07:38.680><c> in</c><00:07:39.100><c> this</c><00:07:39.190><c> case</c>

00:07:39.330 --> 00:07:39.340 align:start position:0%
I move the stack pointer in this case
 

00:07:39.340 --> 00:07:41.130 align:start position:0%
I move the stack pointer in this case
backwards<00:07:39.760><c> four</c><00:07:40.120><c> bytes</c><00:07:40.360><c> and</c><00:07:40.660><c> I</c><00:07:40.720><c> return</c><00:07:41.110><c> that</c>

00:07:41.130 --> 00:07:41.140 align:start position:0%
backwards four bytes and I return that
 

00:07:41.140 --> 00:07:42.870 align:start position:0%
backwards four bytes and I return that
memory<00:07:41.830><c> address</c><00:07:41.890><c> because</c><00:07:42.370><c> that</c><00:07:42.640><c> is</c><00:07:42.760><c> the</c>

00:07:42.870 --> 00:07:42.880 align:start position:0%
memory address because that is the
 

00:07:42.880 --> 00:07:45.690 align:start position:0%
memory address because that is the
beginning<00:07:43.060><c> of</c><00:07:43.480><c> my</c><00:07:44.020><c> block</c><00:07:44.230><c> of</c><00:07:44.260><c> 4</c><00:07:44.590><c> bytes</c><00:07:44.620><c> that</c><00:07:45.580><c> is</c>

00:07:45.690 --> 00:07:45.700 align:start position:0%
beginning of my block of 4 bytes that is
 

00:07:45.700 --> 00:07:47.370 align:start position:0%
beginning of my block of 4 bytes that is
what<00:07:45.850><c> a</c><00:07:45.880><c> stack</c><00:07:46.150><c> allocation</c><00:07:46.570><c> is</c><00:07:46.840><c> it's</c>

00:07:47.370 --> 00:07:47.380 align:start position:0%
what a stack allocation is it's
 

00:07:47.380 --> 00:07:50.160 align:start position:0%
what a stack allocation is it's
extremely<00:07:47.860><c> fast</c><00:07:48.510><c> let's</c><00:07:49.510><c> take</c><00:07:49.690><c> a</c><00:07:49.720><c> look</c><00:07:49.930><c> at</c><00:07:50.020><c> what</c>

00:07:50.160 --> 00:07:50.170 align:start position:0%
extremely fast let's take a look at what
 

00:07:50.170 --> 00:07:51.720 align:start position:0%
extremely fast let's take a look at what
the<00:07:50.260><c> heap</c><00:07:50.410><c> allocation</c><00:07:50.770><c> actually</c><00:07:51.160><c> does</c><00:07:51.310><c> so</c>

00:07:51.720 --> 00:07:51.730 align:start position:0%
the heap allocation actually does so
 

00:07:51.730 --> 00:07:52.890 align:start position:0%
the heap allocation actually does so
there's<00:07:51.910><c> not</c><00:07:52.030><c> really</c><00:07:52.150><c> much</c><00:07:52.330><c> point</c><00:07:52.390><c> in</c><00:07:52.690><c> showing</c>

00:07:52.890 --> 00:07:52.900 align:start position:0%
there's not really much point in showing
 

00:07:52.900 --> 00:07:54.270 align:start position:0%
there's not really much point in showing
you<00:07:53.110><c> this</c><00:07:53.230><c> because</c><00:07:53.650><c> the</c><00:07:53.890><c> memory</c><00:07:54.100><c> is</c><00:07:54.190><c> not</c>

00:07:54.270 --> 00:07:54.280 align:start position:0%
you this because the memory is not
 

00:07:54.280 --> 00:07:55.470 align:start position:0%
you this because the memory is not
really<00:07:54.460><c> gonna</c><00:07:54.580><c> be</c><00:07:54.670><c> close</c><00:07:54.820><c> together</c><00:07:55.120><c> but</c><00:07:55.270><c> if</c><00:07:55.390><c> we</c>

00:07:55.470 --> 00:07:55.480 align:start position:0%
really gonna be close together but if we
 

00:07:55.480 --> 00:07:56.960 align:start position:0%
really gonna be close together but if we
just<00:07:55.630><c> take</c><00:07:55.750><c> a</c><00:07:55.810><c> look</c><00:07:56.020><c> at</c><00:07:56.140><c> H</c><00:07:56.290><c> value</c>

00:07:56.960 --> 00:07:56.970 align:start position:0%
just take a look at H value
 

00:07:56.970 --> 00:07:59.190 align:start position:0%
just take a look at H value
you<00:07:57.970><c> see</c><00:07:58.150><c> we've</c><00:07:58.300><c> we</c><00:07:58.540><c> still</c><00:07:58.720><c> of</c><00:07:58.780><c> course</c><00:07:58.930><c> get</c>

00:07:59.190 --> 00:07:59.200 align:start position:0%
you see we've we still of course get
 

00:07:59.200 --> 00:08:01.680 align:start position:0%
you see we've we still of course get
five<00:07:59.470><c> over</c><00:08:00.190><c> here</c><00:08:00.400><c> and</c><00:08:00.640><c> then</c><00:08:00.730><c> just</c><00:08:01.120><c> in</c><00:08:01.330><c> the</c><00:08:01.420><c> kind</c>

00:08:01.680 --> 00:08:01.690 align:start position:0%
five over here and then just in the kind
 

00:08:01.690 --> 00:08:02.820 align:start position:0%
five over here and then just in the kind
of<00:08:01.750><c> middle</c><00:08:01.930><c> of</c><00:08:01.990><c> nowhere</c><00:08:02.320><c> if</c><00:08:02.410><c> you</c><00:08:02.530><c> note</c><00:08:02.680><c> the</c>

00:08:02.820 --> 00:08:02.830 align:start position:0%
of middle of nowhere if you note the
 

00:08:02.830 --> 00:08:06.330 align:start position:0%
of middle of nowhere if you note the
address<00:08:02.920><c> of</c><00:08:03.400><c> this</c><00:08:03.880><c> it's</c><00:08:04.120><c> actually</c><00:08:04.270><c> a</c><00:08:04.950><c> 59</c><00:08:05.950><c> B</c><00:08:06.130><c> b1</c>

00:08:06.330 --> 00:08:06.340 align:start position:0%
address of this it's actually a 59 B b1
 

00:08:06.340 --> 00:08:08.730 align:start position:0%
address of this it's actually a 59 B b1
8<00:08:06.820><c> now</c><00:08:07.120><c> if</c><00:08:07.270><c> I</c><00:08:07.360><c> look</c><00:08:07.510><c> at</c><00:08:07.600><c> my</c><00:08:07.750><c> array</c><00:08:08.050><c> and</c><00:08:08.470><c> I</c><00:08:08.500><c> take</c><00:08:08.710><c> a</c>

00:08:08.730 --> 00:08:08.740 align:start position:0%
8 now if I look at my array and I take a
 

00:08:08.740 --> 00:08:11.460 align:start position:0%
8 now if I look at my array and I take a
look<00:08:08.950><c> at</c><00:08:09.040><c> H</c><00:08:09.190><c> array</c><00:08:09.900><c> you</c><00:08:10.900><c> can</c><00:08:11.020><c> see</c><00:08:11.170><c> it's</c><00:08:11.320><c> at</c><00:08:11.440><c> a</c>

00:08:11.460 --> 00:08:11.470 align:start position:0%
look at H array you can see it's at a
 

00:08:11.470 --> 00:08:13.170 align:start position:0%
look at H array you can see it's at a
completely<00:08:11.920><c> different</c><00:08:12.190><c> memory</c><00:08:12.610><c> address</c><00:08:12.910><c> he</c>

00:08:13.170 --> 00:08:13.180 align:start position:0%
completely different memory address he
 

00:08:13.180 --> 00:08:14.490 align:start position:0%
completely different memory address he
hasn't<00:08:13.330><c> been</c><00:08:13.450><c> initialized</c><00:08:13.810><c> yet</c><00:08:14.020><c> so</c><00:08:14.170><c> if</c><00:08:14.230><c> we</c><00:08:14.350><c> had</c>

00:08:14.490 --> 00:08:14.500 align:start position:0%
hasn't been initialized yet so if we had
 

00:08:14.500 --> 00:08:16.080 align:start position:0%
hasn't been initialized yet so if we had
F<00:08:14.620><c> 10</c><00:08:15.040><c> a</c><00:08:15.070><c> few</c><00:08:15.280><c> times</c><00:08:15.460><c> you</c><00:08:15.610><c> can</c><00:08:15.670><c> see</c><00:08:15.880><c> of</c><00:08:15.940><c> course</c>

00:08:16.080 --> 00:08:16.090 align:start position:0%
F 10 a few times you can see of course
 

00:08:16.090 --> 00:08:17.760 align:start position:0%
F 10 a few times you can see of course
those<00:08:16.270><c> variables</c><00:08:16.630><c> do</c><00:08:16.750><c> get</c><00:08:16.930><c> set</c><00:08:17.170><c> but</c><00:08:17.620><c> that</c>

00:08:17.760 --> 00:08:17.770 align:start position:0%
those variables do get set but that
 

00:08:17.770 --> 00:08:20.040 align:start position:0%
those variables do get set but that
address<00:08:18.130><c> is</c><00:08:18.400><c> 5</c><00:08:18.730><c> 6</c><00:08:19.000><c> 8</c><00:08:19.150><c> they're</c><00:08:19.420><c> at</c><00:08:19.510><c> the</c><00:08:19.660><c> end</c><00:08:19.780><c> and</c>

00:08:20.040 --> 00:08:20.050 align:start position:0%
address is 5 6 8 they're at the end and
 

00:08:20.050 --> 00:08:23.040 align:start position:0%
address is 5 6 8 they're at the end and
H<00:08:20.470><c> value</c><00:08:20.920><c> is</c><00:08:21.220><c> B</c><00:08:21.790><c> b1</c><00:08:21.970><c> 8</c><00:08:22.300><c> just</c><00:08:22.540><c> completely</c>

00:08:23.040 --> 00:08:23.050 align:start position:0%
H value is B b1 8 just completely
 

00:08:23.050 --> 00:08:25.080 align:start position:0%
H value is B b1 8 just completely
different<00:08:23.590><c> areas</c><00:08:23.980><c> of</c><00:08:24.010><c> our</c><00:08:24.220><c> memory</c><00:08:24.550><c> so</c><00:08:24.940><c> there's</c>

00:08:25.080 --> 00:08:25.090 align:start position:0%
different areas of our memory so there's
 

00:08:25.090 --> 00:08:26.190 align:start position:0%
different areas of our memory so there's
not<00:08:25.150><c> really</c><00:08:25.240><c> much</c><00:08:25.510><c> point</c><00:08:25.540><c> in</c><00:08:25.840><c> showing</c><00:08:26.140><c> you</c>

00:08:26.190 --> 00:08:26.200 align:start position:0%
not really much point in showing you
 

00:08:26.200 --> 00:08:27.750 align:start position:0%
not really much point in showing you
this<00:08:26.290><c> memory</c><00:08:26.590><c> of</c><00:08:26.680><c> you</c><00:08:26.770><c> anyway</c><00:08:27.070><c> but</c><00:08:27.520><c> what</c><00:08:27.640><c> I</c><00:08:27.670><c> do</c>

00:08:27.750 --> 00:08:27.760 align:start position:0%
this memory of you anyway but what I do
 

00:08:27.760 --> 00:08:29.130 align:start position:0%
this memory of you anyway but what I do
want<00:08:27.880><c> to</c><00:08:28.060><c> mention</c><00:08:28.210><c> is</c><00:08:28.510><c> a</c><00:08:28.540><c> few</c><00:08:28.810><c> things</c><00:08:29.020><c> about</c>

00:08:29.130 --> 00:08:29.140 align:start position:0%
want to mention is a few things about
 

00:08:29.140 --> 00:08:31.500 align:start position:0%
want to mention is a few things about
this<00:08:29.350><c> heap</c><00:08:29.530><c> allocation</c><00:08:29.890><c> first</c><00:08:30.400><c> of</c><00:08:30.580><c> all</c><00:08:30.700><c> yes</c><00:08:31.300><c> I</c>

00:08:31.500 --> 00:08:31.510 align:start position:0%
this heap allocation first of all yes I
 

00:08:31.510 --> 00:08:33.510 align:start position:0%
this heap allocation first of all yes I
am<00:08:31.630><c> using</c><00:08:31.840><c> the</c><00:08:32.020><c> new</c><00:08:32.140><c> keyword</c><00:08:32.410><c> here</c><00:08:32.830><c> however</c><00:08:33.310><c> if</c>

00:08:33.510 --> 00:08:33.520 align:start position:0%
am using the new keyword here however if
 

00:08:33.520 --> 00:08:35.280 align:start position:0%
am using the new keyword here however if
you<00:08:33.669><c> were</c><00:08:33.880><c> using</c><00:08:34.240><c> smart</c><00:08:34.540><c> pointers</c><00:08:34.930><c> and</c><00:08:35.140><c> you</c>

00:08:35.280 --> 00:08:35.290 align:start position:0%
you were using smart pointers and you
 

00:08:35.290 --> 00:08:37.710 align:start position:0%
you were using smart pointers and you
were<00:08:35.470><c> using</c><00:08:35.740><c> make</c><00:08:36.580><c> unique</c><00:08:36.940><c> or</c><00:08:37.180><c> make</c><00:08:37.390><c> shared</c>

00:08:37.710 --> 00:08:37.720 align:start position:0%
were using make unique or make shared
 

00:08:37.720 --> 00:08:40.110 align:start position:0%
were using make unique or make shared
it's<00:08:38.410><c> exactly</c><00:08:38.890><c> the</c><00:08:38.979><c> same</c><00:08:39.160><c> thing</c><00:08:39.430><c> it</c><00:08:39.640><c> will</c><00:08:39.880><c> call</c>

00:08:40.110 --> 00:08:40.120 align:start position:0%
it's exactly the same thing it will call
 

00:08:40.120 --> 00:08:42.060 align:start position:0%
it's exactly the same thing it will call
new<00:08:40.390><c> for</c><00:08:40.720><c> you</c><00:08:40.900><c> and</c><00:08:41.110><c> then</c><00:08:41.590><c> the</c><00:08:41.680><c> other</c><00:08:41.800><c> really</c>

00:08:42.060 --> 00:08:42.070 align:start position:0%
new for you and then the other really
 

00:08:42.070 --> 00:08:43.290 align:start position:0%
new for you and then the other really
important<00:08:42.430><c> thing</c><00:08:42.460><c> of</c><00:08:42.669><c> course</c><00:08:42.820><c> is</c><00:08:43.090><c> that</c><00:08:43.180><c> you</c>

00:08:43.290 --> 00:08:43.300 align:start position:0%
important thing of course is that you
 

00:08:43.300 --> 00:08:44.550 align:start position:0%
important thing of course is that you
actually<00:08:43.419><c> have</c><00:08:43.660><c> to</c><00:08:43.870><c> delete</c><00:08:44.169><c> memory</c>

00:08:44.550 --> 00:08:44.560 align:start position:0%
actually have to delete memory
 

00:08:44.560 --> 00:08:46.560 align:start position:0%
actually have to delete memory
deallocate<00:08:45.130><c> using</c><00:08:45.430><c> new</c><00:08:45.610><c> smart</c><00:08:46.150><c> pointers</c><00:08:46.420><c> will</c>

00:08:46.560 --> 00:08:46.570 align:start position:0%
deallocate using new smart pointers will
 

00:08:46.570 --> 00:08:47.910 align:start position:0%
deallocate using new smart pointers will
do<00:08:46.660><c> that</c><00:08:46.780><c> for</c><00:08:46.960><c> you</c><00:08:47.110><c> but</c><00:08:47.230><c> since</c><00:08:47.380><c> we</c><00:08:47.560><c> have</c><00:08:47.740><c> used</c>

00:08:47.910 --> 00:08:47.920 align:start position:0%
do that for you but since we have used
 

00:08:47.920 --> 00:08:49.980 align:start position:0%
do that for you but since we have used
new<00:08:48.100><c> here</c><00:08:48.400><c> we</c><00:08:48.790><c> actually</c><00:08:48.940><c> have</c><00:08:49.240><c> to</c><00:08:49.330><c> call</c><00:08:49.480><c> delete</c>

00:08:49.980 --> 00:08:49.990 align:start position:0%
new here we actually have to call delete
 

00:08:49.990 --> 00:08:52.120 align:start position:0%
new here we actually have to call delete
H<00:08:50.110><c> value</c><00:08:50.590><c> delete</c><00:08:51.280><c> HRA</c>

00:08:52.120 --> 00:08:52.130 align:start position:0%
H value delete HRA
 

00:08:52.130 --> 00:08:54.390 align:start position:0%
H value delete HRA
with<00:08:52.220><c> the</c><00:08:52.400><c> array</c><00:08:52.730><c> delete</c><00:08:53.090><c> operator</c><00:08:53.510><c> here</c><00:08:53.870><c> and</c>

00:08:54.390 --> 00:08:54.400 align:start position:0%
with the array delete operator here and
 

00:08:54.400 --> 00:08:56.950 align:start position:0%
with the array delete operator here and
delete<00:08:55.400><c> H</c><00:08:55.670><c> vector</c><00:08:55.940><c> as</c><00:08:56.210><c> well</c><00:08:56.360><c> so</c><00:08:56.750><c> we</c><00:08:56.840><c> do</c>

00:08:56.950 --> 00:08:56.960 align:start position:0%
delete H vector as well so we do
 

00:08:56.960 --> 00:08:58.330 align:start position:0%
delete H vector as well so we do
actually<00:08:57.110><c> have</c><00:08:57.320><c> to</c><00:08:57.470><c> manually</c><00:08:57.860><c> free</c><00:08:58.220><c> our</c>

00:08:58.330 --> 00:08:58.340 align:start position:0%
actually have to manually free our
 

00:08:58.340 --> 00:08:59.950 align:start position:0%
actually have to manually free our
memory<00:08:58.700><c> whereas</c><00:08:59.150><c> with</c><00:08:59.330><c> the</c><00:08:59.450><c> stack</c><00:08:59.720><c> as</c><00:08:59.930><c> well</c>

00:08:59.950 --> 00:08:59.960 align:start position:0%
memory whereas with the stack as well
 

00:08:59.960 --> 00:09:02.290 align:start position:0%
memory whereas with the stack as well
what<00:09:00.680><c> happens</c><00:09:01.010><c> is</c><00:09:01.160><c> once</c><00:09:01.400><c> this</c><00:09:01.610><c> scope</c><00:09:02.000><c> in</c><00:09:02.270><c> which</c>

00:09:02.290 --> 00:09:02.300 align:start position:0%
what happens is once this scope in which
 

00:09:02.300 --> 00:09:03.700 align:start position:0%
what happens is once this scope in which
you've<00:09:02.600><c> allocated</c><00:09:02.780><c> that</c><00:09:03.230><c> stack</c><00:09:03.530><c> memory</c>

00:09:03.700 --> 00:09:03.710 align:start position:0%
you've allocated that stack memory
 

00:09:03.710 --> 00:09:05.950 align:start position:0%
you've allocated that stack memory
actually<00:09:04.130><c> ends</c><00:09:04.790><c> all</c><00:09:05.240><c> of</c><00:09:05.510><c> the</c><00:09:05.600><c> memory</c><00:09:05.870><c> that</c>

00:09:05.950 --> 00:09:05.960 align:start position:0%
actually ends all of the memory that
 

00:09:05.960 --> 00:09:07.990 align:start position:0%
actually ends all of the memory that
you've<00:09:06.080><c> allocated</c><00:09:06.230><c> in</c><00:09:06.710><c> that</c><00:09:06.980><c> stack</c><00:09:07.310><c> just</c><00:09:07.730><c> gets</c>

00:09:07.990 --> 00:09:08.000 align:start position:0%
you've allocated in that stack just gets
 

00:09:08.000 --> 00:09:10.150 align:start position:0%
you've allocated in that stack just gets
popped<00:09:08.270><c> off</c><00:09:08.450><c> it</c><00:09:08.630><c> just</c><00:09:08.780><c> gets</c><00:09:08.960><c> freed</c><00:09:09.350><c> so</c><00:09:09.860><c> if</c><00:09:09.980><c> we</c>

00:09:10.150 --> 00:09:10.160 align:start position:0%
popped off it just gets freed so if we
 

00:09:10.160 --> 00:09:11.860 align:start position:0%
popped off it just gets freed so if we
were<00:09:10.340><c> to</c><00:09:10.550><c> do</c><00:09:10.670><c> something</c><00:09:10.850><c> like</c><00:09:11.240><c> a</c><00:09:11.270><c> wrap</c><00:09:11.510><c> this</c><00:09:11.660><c> in</c>

00:09:11.860 --> 00:09:11.870 align:start position:0%
were to do something like a wrap this in
 

00:09:11.870 --> 00:09:13.360 align:start position:0%
were to do something like a wrap this in
a<00:09:11.990><c> scope</c><00:09:12.260><c> it</c><00:09:12.380><c> can</c><00:09:12.470><c> be</c><00:09:12.560><c> any</c><00:09:12.710><c> scope</c><00:09:13.010><c> it</c><00:09:13.190><c> can</c><00:09:13.280><c> be</c>

00:09:13.360 --> 00:09:13.370 align:start position:0%
a scope it can be any scope it can be
 

00:09:13.370 --> 00:09:14.560 align:start position:0%
a scope it can be any scope it can be
this<00:09:13.460><c> function</c><00:09:13.880><c> scope</c><00:09:14.090><c> of</c><00:09:14.270><c> this</c><00:09:14.390><c> main</c>

00:09:14.560 --> 00:09:14.570 align:start position:0%
this function scope of this main
 

00:09:14.570 --> 00:09:16.000 align:start position:0%
this function scope of this main
function<00:09:14.780><c> or</c><00:09:15.320><c> it</c><00:09:15.500><c> can</c><00:09:15.620><c> just</c><00:09:15.740><c> be</c><00:09:15.800><c> an</c><00:09:15.950><c> empty</c>

00:09:16.000 --> 00:09:16.010 align:start position:0%
function or it can just be an empty
 

00:09:16.010 --> 00:09:17.770 align:start position:0%
function or it can just be an empty
scope<00:09:16.340><c> like</c><00:09:16.520><c> this</c><00:09:16.700><c> or</c><00:09:16.910><c> like</c><00:09:17.060><c> a</c><00:09:17.120><c> for</c><00:09:17.420><c> loop</c><00:09:17.570><c> or</c><00:09:17.750><c> a</c>

00:09:17.770 --> 00:09:17.780 align:start position:0%
scope like this or like a for loop or a
 

00:09:17.780 --> 00:09:19.720 align:start position:0%
scope like this or like a for loop or a
while<00:09:17.810><c> loop</c><00:09:18.110><c> of</c><00:09:18.290><c> an</c><00:09:18.770><c> if</c><00:09:18.950><c> statement</c><00:09:19.160><c> whatever</c>

00:09:19.720 --> 00:09:19.730 align:start position:0%
while loop of an if statement whatever
 

00:09:19.730 --> 00:09:22.210 align:start position:0%
while loop of an if statement whatever
any<00:09:20.000><c> kind</c><00:09:20.120><c> of</c><00:09:20.360><c> scope</c><00:09:20.600><c> when</c><00:09:21.320><c> this</c><00:09:21.590><c> scope</c><00:09:21.860><c> comes</c>

00:09:22.210 --> 00:09:22.220 align:start position:0%
any kind of scope when this scope comes
 

00:09:22.220 --> 00:09:24.130 align:start position:0%
any kind of scope when this scope comes
to<00:09:22.370><c> an</c><00:09:22.460><c> end</c><00:09:22.640><c> everything</c><00:09:23.570><c> that</c><00:09:23.720><c> was</c><00:09:23.840><c> allocated</c>

00:09:24.130 --> 00:09:24.140 align:start position:0%
to an end everything that was allocated
 

00:09:24.140 --> 00:09:26.560 align:start position:0%
to an end everything that was allocated
on<00:09:24.350><c> the</c><00:09:24.380><c> stack</c><00:09:24.470><c> inside</c><00:09:25.220><c> that</c><00:09:25.430><c> scope</c><00:09:25.760><c> just</c><00:09:26.360><c> gets</c>

00:09:26.560 --> 00:09:26.570 align:start position:0%
on the stack inside that scope just gets
 

00:09:26.570 --> 00:09:28.390 align:start position:0%
on the stack inside that scope just gets
popped<00:09:26.840><c> off</c><00:09:27.020><c> it's</c><00:09:27.290><c> just</c><00:09:27.350><c> free</c><00:09:27.800><c> to</c><00:09:27.830><c> just</c><00:09:28.100><c> go</c><00:09:28.340><c> on</c>

00:09:28.390 --> 00:09:28.400 align:start position:0%
popped off it's just free to just go on
 

00:09:28.400 --> 00:09:29.140 align:start position:0%
popped off it's just free to just go on
its<00:09:28.520><c> reclaimed</c>

00:09:29.140 --> 00:09:29.150 align:start position:0%
its reclaimed
 

00:09:29.150 --> 00:09:30.940 align:start position:0%
its reclaimed
because<00:09:29.540><c> the</c><00:09:29.990><c> stack</c><00:09:30.230><c> just</c><00:09:30.470><c> moves</c><00:09:30.680><c> to</c><00:09:30.860><c> the</c>

00:09:30.940 --> 00:09:30.950 align:start position:0%
because the stack just moves to the
 

00:09:30.950 --> 00:09:32.410 align:start position:0%
because the stack just moves to the
position<00:09:31.340><c> it</c><00:09:31.430><c> was</c><00:09:31.610><c> before</c><00:09:31.880><c> we</c><00:09:32.270><c> actually</c>

00:09:32.410 --> 00:09:32.420 align:start position:0%
position it was before we actually
 

00:09:32.420 --> 00:09:34.330 align:start position:0%
position it was before we actually
entered<00:09:32.900><c> this</c><00:09:33.050><c> scope</c><00:09:33.350><c> so</c><00:09:33.890><c> that's</c><00:09:34.070><c> another</c>

00:09:34.330 --> 00:09:34.340 align:start position:0%
entered this scope so that's another
 

00:09:34.340 --> 00:09:35.950 align:start position:0%
entered this scope so that's another
really<00:09:34.850><c> important</c><00:09:35.270><c> difference</c><00:09:35.390><c> between</c><00:09:35.690><c> the</c>

00:09:35.950 --> 00:09:35.960 align:start position:0%
really important difference between the
 

00:09:35.960 --> 00:09:37.870 align:start position:0%
really important difference between the
two<00:09:36.050><c> the</c><00:09:36.770><c> stack</c><00:09:37.010><c> you</c><00:09:37.040><c> kind</c><00:09:37.430><c> of</c><00:09:37.520><c> just</c><00:09:37.700><c> get</c><00:09:37.850><c> a</c>

00:09:37.870 --> 00:09:37.880 align:start position:0%
two the stack you kind of just get a
 

00:09:37.880 --> 00:09:40.240 align:start position:0%
two the stack you kind of just get a
free<00:09:38.720><c> free</c><00:09:39.260><c> or</c><00:09:39.680><c> in</c><00:09:39.770><c> the</c><00:09:39.860><c> sense</c><00:09:40.040><c> that</c><00:09:40.130><c> it</c>

00:09:40.240 --> 00:09:40.250 align:start position:0%
free free or in the sense that it
 

00:09:40.250 --> 00:09:41.380 align:start position:0%
free free or in the sense that it
doesn't<00:09:40.460><c> cost</c><00:09:40.580><c> you</c><00:09:40.730><c> anything</c><00:09:40.910><c> to</c><00:09:41.060><c> free</c><00:09:41.240><c> any</c>

00:09:41.380 --> 00:09:41.390 align:start position:0%
doesn't cost you anything to free any
 

00:09:41.390 --> 00:09:42.970 align:start position:0%
doesn't cost you anything to free any
memory<00:09:41.660><c> because</c><00:09:41.960><c> the</c><00:09:42.110><c> stack</c><00:09:42.320><c> just</c><00:09:42.650><c> because</c>

00:09:42.970 --> 00:09:42.980 align:start position:0%
memory because the stack just because
 

00:09:42.980 --> 00:09:45.070 align:start position:0%
memory because the stack just because
again<00:09:43.010><c> freeing</c><00:09:43.550><c> memory</c><00:09:43.730><c> with</c><00:09:44.540><c> the</c><00:09:44.630><c> stack</c><00:09:44.870><c> is</c>

00:09:45.070 --> 00:09:45.080 align:start position:0%
again freeing memory with the stack is
 

00:09:45.080 --> 00:09:46.150 align:start position:0%
again freeing memory with the stack is
basically<00:09:45.470><c> the</c><00:09:45.620><c> same</c><00:09:45.710><c> operation</c><00:09:46.130><c> as</c>

00:09:46.150 --> 00:09:46.160 align:start position:0%
basically the same operation as
 

00:09:46.160 --> 00:09:47.650 align:start position:0%
basically the same operation as
allocating<00:09:46.670><c> it's</c><00:09:46.880><c> just</c><00:09:47.030><c> that</c><00:09:47.150><c> instead</c><00:09:47.390><c> of</c>

00:09:47.650 --> 00:09:47.660 align:start position:0%
allocating it's just that instead of
 

00:09:47.660 --> 00:09:49.180 align:start position:0%
allocating it's just that instead of
moving<00:09:47.810><c> our</c><00:09:48.110><c> stack</c><00:09:48.350><c> pointer</c><00:09:48.650><c> backwards</c><00:09:49.040><c> and</c>

00:09:49.180 --> 00:09:49.190 align:start position:0%
moving our stack pointer backwards and
 

00:09:49.190 --> 00:09:50.860 align:start position:0%
moving our stack pointer backwards and
returning<00:09:49.430><c> that</c><00:09:49.550><c> address</c><00:09:49.820><c> we</c><00:09:50.390><c> just</c><00:09:50.420><c> pop</c>

00:09:50.860 --> 00:09:50.870 align:start position:0%
returning that address we just pop
 

00:09:50.870 --> 00:09:52.180 align:start position:0%
returning that address we just pop
everything<00:09:51.200><c> off</c><00:09:51.290><c> the</c><00:09:51.410><c> stack</c><00:09:51.650><c> so</c><00:09:51.830><c> our</c><00:09:51.950><c> stack</c>

00:09:52.180 --> 00:09:52.190 align:start position:0%
everything off the stack so our stack
 

00:09:52.190 --> 00:09:53.590 align:start position:0%
everything off the stack so our stack
pointer<00:09:52.520><c> goes</c><00:09:52.670><c> back</c><00:09:52.910><c> up</c><00:09:53.120><c> to</c><00:09:53.300><c> where</c><00:09:53.450><c> it</c><00:09:53.570><c> was</c>

00:09:53.590 --> 00:09:53.600 align:start position:0%
pointer goes back up to where it was
 

00:09:53.600 --> 00:09:56.110 align:start position:0%
pointer goes back up to where it was
before<00:09:53.840><c> the</c><00:09:54.080><c> scope</c><00:09:54.290><c> began</c><00:09:54.670><c> and</c><00:09:55.670><c> once</c><00:09:55.850><c> if</c><00:09:56.030><c> you</c>

00:09:56.110 --> 00:09:56.120 align:start position:0%
before the scope began and once if you
 

00:09:56.120 --> 00:09:58.030 align:start position:0%
before the scope began and once if you
instruction<00:09:56.570><c> it's</c><00:09:56.810><c> basically</c><00:09:57.140><c> free</c><00:09:57.440><c> whereas</c>

00:09:58.030 --> 00:09:58.040 align:start position:0%
instruction it's basically free whereas
 

00:09:58.040 --> 00:10:00.040 align:start position:0%
instruction it's basically free whereas
with<00:09:58.340><c> delete</c><00:09:58.970><c> that</c><00:09:59.360><c> obviously</c><00:09:59.840><c> has</c><00:10:00.020><c> to</c>

00:10:00.040 --> 00:10:00.050 align:start position:0%
with delete that obviously has to
 

00:10:00.050 --> 00:10:02.350 align:start position:0%
with delete that obviously has to
actually<00:10:00.470><c> free</c><00:10:01.280><c> everything</c><00:10:01.550><c> now</c><00:10:02.090><c> let's</c><00:10:02.270><c> talk</c>

00:10:02.350 --> 00:10:02.360 align:start position:0%
actually free everything now let's talk
 

00:10:02.360 --> 00:10:04.060 align:start position:0%
actually free everything now let's talk
a<00:10:02.450><c> little</c><00:10:02.510><c> bit</c><00:10:02.690><c> about</c><00:10:02.810><c> what</c><00:10:03.350><c> the</c><00:10:03.560><c> new</c><00:10:03.710><c> key</c><00:10:03.890><c> what</c>

00:10:04.060 --> 00:10:04.070 align:start position:0%
a little bit about what the new key what
 

00:10:04.070 --> 00:10:05.530 align:start position:0%
a little bit about what the new key what
actually<00:10:04.430><c> does</c><00:10:04.580><c> now</c><00:10:04.790><c> I</c><00:10:04.820><c> do</c><00:10:04.970><c> have</c><00:10:05.090><c> a</c><00:10:05.180><c> video</c><00:10:05.450><c> on</c>

00:10:05.530 --> 00:10:05.540 align:start position:0%
actually does now I do have a video on
 

00:10:05.540 --> 00:10:07.270 align:start position:0%
actually does now I do have a video on
this<00:10:05.720><c> definitely</c><00:10:06.080><c> check</c><00:10:06.260><c> that</c><00:10:06.290><c> out</c><00:10:06.440><c> if</c><00:10:06.740><c> you're</c>

00:10:07.270 --> 00:10:07.280 align:start position:0%
this definitely check that out if you're
 

00:10:07.280 --> 00:10:08.680 align:start position:0%
this definitely check that out if you're
more<00:10:07.460><c> interested</c><00:10:07.760><c> in</c><00:10:08.060><c> this</c><00:10:08.180><c> kind</c><00:10:08.360><c> of</c><00:10:08.480><c> object</c>

00:10:08.680 --> 00:10:08.690 align:start position:0%
more interested in this kind of object
 

00:10:08.690 --> 00:10:11.050 align:start position:0%
more interested in this kind of object
lifetime<00:10:09.410><c> stuff</c><00:10:09.770><c> as</c><00:10:09.980><c> well</c><00:10:10.280><c> I</c><00:10:10.580><c> have</c><00:10:10.880><c> made</c><00:10:11.030><c> a</c>

00:10:11.050 --> 00:10:11.060 align:start position:0%
lifetime stuff as well I have made a
 

00:10:11.060 --> 00:10:13.270 align:start position:0%
lifetime stuff as well I have made a
video<00:10:11.360><c> about</c><00:10:11.870><c> that</c><00:10:12.050><c> as</c><00:10:12.230><c> well</c><00:10:12.410><c> so</c><00:10:12.650><c> the</c><00:10:12.980><c> object</c>

00:10:13.270 --> 00:10:13.280 align:start position:0%
video about that as well so the object
 

00:10:13.280 --> 00:10:14.590 align:start position:0%
video about that as well so the object
lifetime<00:10:13.550><c> video</c><00:10:13.760><c> is</c><00:10:13.820><c> more</c><00:10:13.940><c> about</c><00:10:14.120><c> how</c><00:10:14.300><c> stack</c>

00:10:14.590 --> 00:10:14.600 align:start position:0%
lifetime video is more about how stack
 

00:10:14.600 --> 00:10:16.570 align:start position:0%
lifetime video is more about how stack
allocations<00:10:15.110><c> work</c><00:10:15.320><c> and</c><00:10:15.590><c> how</c><00:10:16.040><c> we</c><00:10:16.100><c> can</c><00:10:16.340><c> kind</c><00:10:16.460><c> of</c>

00:10:16.570 --> 00:10:16.580 align:start position:0%
allocations work and how we can kind of
 

00:10:16.580 --> 00:10:19.090 align:start position:0%
allocations work and how we can kind of
you<00:10:17.000><c> know</c><00:10:17.120><c> use</c><00:10:17.480><c> scopes</c><00:10:18.350><c> to</c><00:10:18.590><c> our</c><00:10:18.710><c> advantage</c>

00:10:19.090 --> 00:10:19.100 align:start position:0%
you know use scopes to our advantage
 

00:10:19.100 --> 00:10:20.080 align:start position:0%
you know use scopes to our advantage
when<00:10:19.130><c> dealing</c><00:10:19.400><c> with</c><00:10:19.580><c> this</c><00:10:19.790><c> automatic</c>

00:10:20.080 --> 00:10:20.090 align:start position:0%
when dealing with this automatic
 

00:10:20.090 --> 00:10:22.030 align:start position:0%
when dealing with this automatic
deletion<00:10:20.450><c> thing</c><00:10:20.840><c> definitely</c><00:10:21.380><c> recommend</c>

00:10:22.030 --> 00:10:22.040 align:start position:0%
deletion thing definitely recommend
 

00:10:22.040 --> 00:10:23.350 align:start position:0%
deletion thing definitely recommend
checking<00:10:22.100><c> it</c><00:10:22.400><c> out</c><00:10:22.490><c> as</c><00:10:22.670><c> well</c><00:10:22.790><c> in</c><00:10:22.970><c> fact</c><00:10:23.090><c> I'll</c>

00:10:23.350 --> 00:10:23.360 align:start position:0%
checking it out as well in fact I'll
 

00:10:23.360 --> 00:10:24.400 align:start position:0%
checking it out as well in fact I'll
probably<00:10:23.450><c> just</c><00:10:23.750><c> leave</c><00:10:23.870><c> a</c><00:10:23.930><c> list</c><00:10:24.170><c> of</c><00:10:24.290><c> videos</c>

00:10:24.400 --> 00:10:24.410 align:start position:0%
probably just leave a list of videos
 

00:10:24.410 --> 00:10:26.260 align:start position:0%
probably just leave a list of videos
over<00:10:25.190><c> there</c><00:10:25.370><c> in</c><00:10:25.460><c> the</c><00:10:25.520><c> top</c><00:10:25.670><c> right</c><00:10:25.880><c> corner</c><00:10:26.060><c> so</c>

00:10:26.260 --> 00:10:26.270 align:start position:0%
over there in the top right corner so
 

00:10:26.270 --> 00:10:28.030 align:start position:0%
over there in the top right corner so
that<00:10:26.360><c> you</c><00:10:26.510><c> can</c><00:10:26.660><c> just</c><00:10:26.900><c> check</c><00:10:27.170><c> out</c><00:10:27.380><c> anyway</c><00:10:27.830><c> let's</c>

00:10:28.030 --> 00:10:28.040 align:start position:0%
that you can just check out anyway let's
 

00:10:28.040 --> 00:10:29.230 align:start position:0%
that you can just check out anyway let's
just<00:10:28.160><c> talk</c><00:10:28.310><c> a</c><00:10:28.340><c> little</c><00:10:28.550><c> bit</c><00:10:28.700><c> about</c><00:10:28.880><c> how</c><00:10:29.180><c> the</c>

00:10:29.230 --> 00:10:29.240 align:start position:0%
just talk a little bit about how the
 

00:10:29.240 --> 00:10:31.840 align:start position:0%
just talk a little bit about how the
heap<00:10:29.540><c> actually</c><00:10:29.930><c> works</c><00:10:30.200><c> and</c><00:10:30.530><c> what</c><00:10:30.890><c> new</c><00:10:31.460><c> and</c>

00:10:31.840 --> 00:10:31.850 align:start position:0%
heap actually works and what new and
 

00:10:31.850 --> 00:10:34.210 align:start position:0%
heap actually works and what new and
delete<00:10:32.120><c> do</c><00:10:32.600><c> so</c><00:10:32.900><c> the</c><00:10:33.020><c> new</c><00:10:33.140><c> keyword</c><00:10:33.560><c> will</c><00:10:33.800><c> really</c>

00:10:34.210 --> 00:10:34.220 align:start position:0%
delete do so the new keyword will really
 

00:10:34.220 --> 00:10:36.040 align:start position:0%
delete do so the new keyword will really
just<00:10:34.460><c> call</c><00:10:34.730><c> malloc</c><00:10:35.030><c> a</c><00:10:35.360><c> function</c><00:10:35.840><c> called</c>

00:10:36.040 --> 00:10:36.050 align:start position:0%
just call malloc a function called
 

00:10:36.050 --> 00:10:38.260 align:start position:0%
just call malloc a function called
malloc<00:10:36.470><c> or</c><00:10:36.560><c> memory</c><00:10:36.890><c> allocate</c><00:10:37.370><c> and</c><00:10:37.580><c> what</c><00:10:38.060><c> that</c>

00:10:38.260 --> 00:10:38.270 align:start position:0%
malloc or memory allocate and what that
 

00:10:38.270 --> 00:10:40.390 align:start position:0%
malloc or memory allocate and what that
will<00:10:38.420><c> do</c><00:10:38.660><c> is</c><00:10:38.690><c> in</c><00:10:39.080><c> turn</c><00:10:39.320><c> usually</c><00:10:39.860><c> call</c><00:10:40.100><c> the</c>

00:10:40.390 --> 00:10:40.400 align:start position:0%
will do is in turn usually call the
 

00:10:40.400 --> 00:10:41.740 align:start position:0%
will do is in turn usually call the
underlying<00:10:40.790><c> operating</c><00:10:41.000><c> system</c><00:10:41.300><c> like</c>

00:10:41.740 --> 00:10:41.750 align:start position:0%
underlying operating system like
 

00:10:41.750 --> 00:10:43.420 align:start position:0%
underlying operating system like
platform<00:10:41.990><c> specific</c><00:10:42.650><c> function</c><00:10:43.040><c> and</c><00:10:43.190><c> that</c><00:10:43.250><c> will</c>

00:10:43.420 --> 00:10:43.430 align:start position:0%
platform specific function and that will
 

00:10:43.430 --> 00:10:45.580 align:start position:0%
platform specific function and that will
allocate<00:10:43.700><c> memory</c><00:10:44.120><c> for</c><00:10:44.750><c> you</c><00:10:44.900><c> on</c><00:10:45.080><c> the</c><00:10:45.230><c> heap</c><00:10:45.440><c> and</c>

00:10:45.580 --> 00:10:45.590 align:start position:0%
allocate memory for you on the heap and
 

00:10:45.590 --> 00:10:47.500 align:start position:0%
allocate memory for you on the heap and
the<00:10:45.710><c> way</c><00:10:45.860><c> that</c><00:10:46.010><c> it</c><00:10:46.100><c> does</c><00:10:46.250><c> that</c><00:10:46.550><c> is</c><00:10:46.790><c> when</c><00:10:47.420><c> you</c>

00:10:47.500 --> 00:10:47.510 align:start position:0%
the way that it does that is when you
 

00:10:47.510 --> 00:10:48.970 align:start position:0%
the way that it does that is when you
say<00:10:47.690><c> application</c><00:10:48.320><c> you</c><00:10:48.410><c> get</c><00:10:48.530><c> a</c><00:10:48.590><c> certain</c><00:10:48.860><c> amount</c>

00:10:48.970 --> 00:10:48.980 align:start position:0%
say application you get a certain amount
 

00:10:48.980 --> 00:10:51.040 align:start position:0%
say application you get a certain amount
of<00:10:49.220><c> physical</c><00:10:49.670><c> RAM</c><00:10:49.850><c> kind</c><00:10:50.120><c> of</c><00:10:50.180><c> allocated</c><00:10:50.720><c> to</c><00:10:50.870><c> you</c>

00:10:51.040 --> 00:10:51.050 align:start position:0%
of physical RAM kind of allocated to you
 

00:10:51.050 --> 00:10:52.690 align:start position:0%
of physical RAM kind of allocated to you
and<00:10:51.260><c> your</c><00:10:51.560><c> program</c><00:10:51.920><c> will</c><00:10:52.070><c> maintain</c><00:10:52.430><c> something</c>

00:10:52.690 --> 00:10:52.700 align:start position:0%
and your program will maintain something
 

00:10:52.700 --> 00:10:54.640 align:start position:0%
and your program will maintain something
called<00:10:53.030><c> a</c><00:10:53.120><c> free</c><00:10:53.420><c> list</c><00:10:53.660><c> which</c><00:10:54.170><c> basically</c><00:10:54.410><c> just</c>

00:10:54.640 --> 00:10:54.650 align:start position:0%
called a free list which basically just
 

00:10:54.650 --> 00:10:56.500 align:start position:0%
called a free list which basically just
keeps<00:10:54.830><c> track</c><00:10:55.100><c> of</c><00:10:55.130><c> which</c><00:10:55.640><c> blocks</c><00:10:56.060><c> of</c><00:10:56.210><c> memory</c>

00:10:56.500 --> 00:10:56.510 align:start position:0%
keeps track of which blocks of memory
 

00:10:56.510 --> 00:10:58.270 align:start position:0%
keeps track of which blocks of memory
are<00:10:56.660><c> free</c><00:10:56.930><c> and</c><00:10:57.110><c> where</c><00:10:57.320><c> they</c><00:10:57.470><c> are</c><00:10:57.680><c> and</c><00:10:57.920><c> all</c><00:10:58.040><c> that</c>

00:10:58.270 --> 00:10:58.280 align:start position:0%
are free and where they are and all that
 

00:10:58.280 --> 00:10:59.970 align:start position:0%
are free and where they are and all that
so<00:10:58.520><c> that</c><00:10:58.550><c> when</c><00:10:58.790><c> you</c><00:10:58.910><c> actually</c><00:10:59.270><c> ask</c><00:10:59.510><c> for</c>

00:10:59.970 --> 00:10:59.980 align:start position:0%
so that when you actually ask for
 

00:10:59.980 --> 00:11:03.280 align:start position:0%
so that when you actually ask for
dynamic<00:11:00.980><c> memory</c><00:11:01.130><c> zhing</c><00:11:01.520><c> by</c><00:11:02.510><c> dynamic</c><00:11:02.839><c> memory</c><00:11:03.110><c> a</c>

00:11:03.280 --> 00:11:03.290 align:start position:0%
dynamic memory zhing by dynamic memory a
 

00:11:03.290 --> 00:11:05.460 align:start position:0%
dynamic memory zhing by dynamic memory a
memory<00:11:03.440><c> when</c><00:11:04.070><c> you</c><00:11:04.100><c> ask</c><00:11:04.339><c> for</c><00:11:04.490><c> heap</c><00:11:04.730><c> memory</c><00:11:04.880><c> use</c>

00:11:05.460 --> 00:11:05.470 align:start position:0%
memory when you ask for heap memory use
 

00:11:05.470 --> 00:11:07.080 align:start position:0%
memory when you ask for heap memory use
Mallett<00:11:05.800><c> it</c><00:11:06.160><c> will</c><00:11:06.400><c> be</c><00:11:06.490><c> able</c><00:11:06.640><c> to</c><00:11:06.790><c> kind</c><00:11:06.940><c> of</c><00:11:06.970><c> go</c>

00:11:07.080 --> 00:11:07.090 align:start position:0%
Mallett it will be able to kind of go
 

00:11:07.090 --> 00:11:08.280 align:start position:0%
Mallett it will be able to kind of go
through<00:11:07.270><c> the</c><00:11:07.390><c> free</c><00:11:07.600><c> list</c><00:11:07.780><c> and</c><00:11:07.960><c> be</c><00:11:08.020><c> like</c><00:11:08.140><c> oh</c>

00:11:08.280 --> 00:11:08.290 align:start position:0%
through the free list and be like oh
 

00:11:08.290 --> 00:11:10.080 align:start position:0%
through the free list and be like oh
yeah<00:11:08.500><c> I</c><00:11:08.710><c> have</c><00:11:08.920><c> a</c><00:11:08.950><c> free</c><00:11:09.340><c> block</c><00:11:09.580><c> of</c><00:11:09.730><c> memory</c><00:11:10.030><c> that</c>

00:11:10.080 --> 00:11:10.090 align:start position:0%
yeah I have a free block of memory that
 

00:11:10.090 --> 00:11:12.420 align:start position:0%
yeah I have a free block of memory that
is<00:11:10.270><c> at</c><00:11:10.630><c> least</c><00:11:11.050><c> as</c><00:11:11.320><c> big</c><00:11:11.560><c> as</c><00:11:11.770><c> what</c><00:11:11.950><c> you've</c><00:11:12.070><c> asked</c>

00:11:12.420 --> 00:11:12.430 align:start position:0%
is at least as big as what you've asked
 

00:11:12.430 --> 00:11:14.370 align:start position:0%
is at least as big as what you've asked
for<00:11:12.490><c> I</c><00:11:12.850><c> will</c><00:11:13.480><c> give</c><00:11:13.660><c> you</c><00:11:13.780><c> a</c><00:11:13.810><c> pointer</c><00:11:14.230><c> to</c><00:11:14.260><c> that</c>

00:11:14.370 --> 00:11:14.380 align:start position:0%
for I will give you a pointer to that
 

00:11:14.380 --> 00:11:15.960 align:start position:0%
for I will give you a pointer to that
and<00:11:14.710><c> then</c><00:11:14.860><c> I'll</c><00:11:14.950><c> also</c><00:11:15.040><c> record</c><00:11:15.550><c> some</c><00:11:15.730><c> things</c>

00:11:15.960 --> 00:11:15.970 align:start position:0%
and then I'll also record some things
 

00:11:15.970 --> 00:11:18.270 align:start position:0%
and then I'll also record some things
such<00:11:16.630><c> as</c><00:11:16.810><c> the</c><00:11:17.050><c> size</c><00:11:17.320><c> of</c><00:11:17.500><c> the</c><00:11:17.650><c> allocation</c><00:11:18.220><c> and</c>

00:11:18.270 --> 00:11:18.280 align:start position:0%
such as the size of the allocation and
 

00:11:18.280 --> 00:11:20.190 align:start position:0%
such as the size of the allocation and
the<00:11:18.430><c> fact</c><00:11:18.640><c> that</c><00:11:18.790><c> it's</c><00:11:18.940><c> now</c><00:11:19.180><c> allocated</c><00:11:19.900><c> and</c><00:11:20.080><c> you</c>

00:11:20.190 --> 00:11:20.200 align:start position:0%
the fact that it's now allocated and you
 

00:11:20.200 --> 00:11:21.810 align:start position:0%
the fact that it's now allocated and you
can't<00:11:20.470><c> use</c><00:11:20.740><c> that</c><00:11:20.770><c> block</c><00:11:21.070><c> of</c><00:11:21.160><c> memory</c><00:11:21.310><c> anymore</c>

00:11:21.810 --> 00:11:21.820 align:start position:0%
can't use that block of memory anymore
 

00:11:21.820 --> 00:11:23.880 align:start position:0%
can't use that block of memory anymore
there's<00:11:22.690><c> a</c><00:11:22.780><c> bunch</c><00:11:22.960><c> of</c><00:11:23.050><c> bookkeeping</c><00:11:23.560><c> that</c><00:11:23.620><c> goes</c>

00:11:23.880 --> 00:11:23.890 align:start position:0%
there's a bunch of bookkeeping that goes
 

00:11:23.890 --> 00:11:25.590 align:start position:0%
there's a bunch of bookkeeping that goes
on<00:11:24.070><c> and</c><00:11:24.280><c> then</c><00:11:24.730><c> you</c><00:11:24.880><c> basically</c><00:11:25.180><c> get</c><00:11:25.390><c> that</c>

00:11:25.590 --> 00:11:25.600 align:start position:0%
on and then you basically get that
 

00:11:25.600 --> 00:11:27.510 align:start position:0%
on and then you basically get that
pointer<00:11:25.990><c> back</c><00:11:26.170><c> now</c><00:11:26.830><c> the</c><00:11:27.160><c> actual</c>

00:11:27.510 --> 00:11:27.520 align:start position:0%
pointer back now the actual
 

00:11:27.520 --> 00:11:29.460 align:start position:0%
pointer back now the actual
implementation<00:11:27.760><c> of</c><00:11:28.180><c> malloc</c><00:11:28.540><c> is</c><00:11:28.720><c> kind</c><00:11:29.350><c> of</c>

00:11:29.460 --> 00:11:29.470 align:start position:0%
implementation of malloc is kind of
 

00:11:29.470 --> 00:11:31.950 align:start position:0%
implementation of malloc is kind of
dependent<00:11:30.130><c> on</c><00:11:30.280><c> the</c><00:11:30.520><c> implementation</c><00:11:31.180><c> right</c><00:11:31.720><c> I</c>

00:11:31.950 --> 00:11:31.960 align:start position:0%
dependent on the implementation right I
 

00:11:31.960 --> 00:11:34.560 align:start position:0%
dependent on the implementation right I
have<00:11:32.440><c> linked</c><00:11:32.830><c> a</c><00:11:32.920><c> few</c><00:11:33.460><c> I've</c><00:11:33.910><c> dropped</c><00:11:34.360><c> some</c>

00:11:34.560 --> 00:11:34.570 align:start position:0%
have linked a few I've dropped some
 

00:11:34.570 --> 00:11:36.060 align:start position:0%
have linked a few I've dropped some
links<00:11:34.840><c> in</c><00:11:34.930><c> the</c><00:11:34.990><c> description</c><00:11:35.170><c> if</c><00:11:35.770><c> you</c><00:11:35.860><c> want</c><00:11:36.010><c> to</c>

00:11:36.060 --> 00:11:36.070 align:start position:0%
links in the description if you want to
 

00:11:36.070 --> 00:11:37.530 align:start position:0%
links in the description if you want to
know<00:11:36.160><c> more</c><00:11:36.400><c> about</c><00:11:36.430><c> exactly</c><00:11:36.940><c> what</c><00:11:37.240><c> malloc</c>

00:11:37.530 --> 00:11:37.540 align:start position:0%
know more about exactly what malloc
 

00:11:37.540 --> 00:11:40.230 align:start position:0%
know more about exactly what malloc
doesn't<00:11:37.900><c> how</c><00:11:38.020><c> it</c><00:11:38.140><c> works</c><00:11:38.290><c> it's</c><00:11:39.280><c> a</c><00:11:39.430><c> fairly</c><00:11:39.730><c> heavy</c>

00:11:40.230 --> 00:11:40.240 align:start position:0%
doesn't how it works it's a fairly heavy
 

00:11:40.240 --> 00:11:41.850 align:start position:0%
doesn't how it works it's a fairly heavy
function<00:11:40.870><c> there's</c><00:11:41.140><c> a</c><00:11:41.200><c> lot</c><00:11:41.380><c> of</c><00:11:41.500><c> bookkeeping</c>

00:11:41.850 --> 00:11:41.860 align:start position:0%
function there's a lot of bookkeeping
 

00:11:41.860 --> 00:11:43.950 align:start position:0%
function there's a lot of bookkeeping
that<00:11:42.070><c> needs</c><00:11:42.340><c> to</c><00:11:42.520><c> be</c><00:11:42.550><c> done</c><00:11:42.820><c> and</c><00:11:43.060><c> you</c><00:11:43.630><c> don't</c><00:11:43.810><c> just</c>

00:11:43.950 --> 00:11:43.960 align:start position:0%
that needs to be done and you don't just
 

00:11:43.960 --> 00:11:46.260 align:start position:0%
that needs to be done and you don't just
get<00:11:44.380><c> your</c><00:11:44.560><c> memory</c><00:11:44.920><c> and</c><00:11:45.160><c> to</c><00:11:45.730><c> make</c><00:11:45.880><c> things</c><00:11:46.120><c> even</c>

00:11:46.260 --> 00:11:46.270 align:start position:0%
get your memory and to make things even
 

00:11:46.270 --> 00:11:48.570 align:start position:0%
get your memory and to make things even
worse<00:11:46.540><c> if</c><00:11:47.080><c> you've</c><00:11:47.350><c> asked</c><00:11:47.710><c> for</c><00:11:47.740><c> more</c><00:11:48.250><c> memory</c>

00:11:48.570 --> 00:11:48.580 align:start position:0%
worse if you've asked for more memory
 

00:11:48.580 --> 00:11:50.280 align:start position:0%
worse if you've asked for more memory
than<00:11:48.640><c> is</c><00:11:49.000><c> actually</c><00:11:49.390><c> in</c><00:11:49.510><c> that</c><00:11:49.690><c> free</c><00:11:49.930><c> list</c><00:11:50.140><c> in</c>

00:11:50.280 --> 00:11:50.290 align:start position:0%
than is actually in that free list in
 

00:11:50.290 --> 00:11:51.930 align:start position:0%
than is actually in that free list in
that<00:11:50.410><c> initial</c><00:11:50.980><c> kind</c><00:11:51.130><c> of</c><00:11:51.280><c> allocation</c><00:11:51.820><c> that</c>

00:11:51.930 --> 00:11:51.940 align:start position:0%
that initial kind of allocation that
 

00:11:51.940 --> 00:11:53.640 align:start position:0%
that initial kind of allocation that
your<00:11:52.060><c> operating</c><00:11:52.360><c> system</c><00:11:52.600><c> is</c><00:11:52.690><c> giving</c><00:11:52.990><c> you</c><00:11:53.110><c> then</c>

00:11:53.640 --> 00:11:53.650 align:start position:0%
your operating system is giving you then
 

00:11:53.650 --> 00:11:55.560 align:start position:0%
your operating system is giving you then
your<00:11:54.100><c> application</c><00:11:54.250><c> your</c><00:11:54.880><c> program</c><00:11:55.240><c> has</c><00:11:55.450><c> to</c>

00:11:55.560 --> 00:11:55.570 align:start position:0%
your application your program has to
 

00:11:55.570 --> 00:11:57.930 align:start position:0%
your application your program has to
actually<00:11:55.930><c> ask</c><00:11:56.110><c> your</c><00:11:56.440><c> operating</c><00:11:56.740><c> system</c><00:11:57.040><c> hey</c><00:11:57.910><c> I</c>

00:11:57.930 --> 00:11:57.940 align:start position:0%
actually ask your operating system hey I
 

00:11:57.940 --> 00:12:00.300 align:start position:0%
actually ask your operating system hey I
need<00:11:58.150><c> some</c><00:11:58.390><c> more</c><00:11:58.540><c> memory</c><00:11:58.960><c> please</c><00:11:59.230><c> and</c><00:11:59.530><c> that</c><00:12:00.010><c> is</c>

00:12:00.300 --> 00:12:00.310 align:start position:0%
need some more memory please and that is
 

00:12:00.310 --> 00:12:03.570 align:start position:0%
need some more memory please and that is
very<00:12:00.760><c> expensive</c><00:12:01.090><c> so</c><00:12:01.890><c> there's</c><00:12:02.890><c> that</c><00:12:03.160><c> potential</c>

00:12:03.570 --> 00:12:03.580 align:start position:0%
very expensive so there's that potential
 

00:12:03.580 --> 00:12:05.820 align:start position:0%
very expensive so there's that potential
cost<00:12:03.910><c> which</c><00:12:04.270><c> is</c><00:12:04.420><c> huge</c><00:12:04.780><c> really</c><00:12:05.290><c> the</c><00:12:05.440><c> point</c><00:12:05.620><c> that</c>

00:12:05.820 --> 00:12:05.830 align:start position:0%
cost which is huge really the point that
 

00:12:05.830 --> 00:12:07.620 align:start position:0%
cost which is huge really the point that
I'm<00:12:05.980><c> trying</c><00:12:06.010><c> to</c><00:12:06.460><c> make</c><00:12:06.700><c> here</c><00:12:07.060><c> is</c><00:12:07.240><c> that</c>

00:12:07.620 --> 00:12:07.630 align:start position:0%
I'm trying to make here is that
 

00:12:07.630 --> 00:12:10.530 align:start position:0%
I'm trying to make here is that
allocating<00:12:08.530><c> memory</c><00:12:08.680><c> on</c><00:12:09.100><c> the</c><00:12:09.250><c> heap</c><00:12:09.280><c> is</c><00:12:09.700><c> a</c><00:12:10.000><c> whole</c>

00:12:10.530 --> 00:12:10.540 align:start position:0%
allocating memory on the heap is a whole
 

00:12:10.540 --> 00:12:13.140 align:start position:0%
allocating memory on the heap is a whole
thing<00:12:11.110><c> whereas</c><00:12:12.010><c> allocating</c><00:12:12.550><c> memory</c><00:12:12.700><c> on</c><00:12:13.030><c> the</c>

00:12:13.140 --> 00:12:13.150 align:start position:0%
thing whereas allocating memory on the
 

00:12:13.150 --> 00:12:16.470 align:start position:0%
thing whereas allocating memory on the
stack<00:12:13.210><c> is</c><00:12:13.750><c> like</c><00:12:14.440><c> one</c><00:12:14.680><c> CPU</c><00:12:14.920><c> instruction</c><00:12:15.610><c> that</c>

00:12:16.470 --> 00:12:16.480 align:start position:0%
stack is like one CPU instruction that
 

00:12:16.480 --> 00:12:19.170 align:start position:0%
stack is like one CPU instruction that
is<00:12:16.780><c> all</c><00:12:17.350><c> I</c><00:12:17.380><c> want</c><00:12:17.710><c> you</c><00:12:17.800><c> to</c><00:12:17.860><c> take</c><00:12:18.100><c> away</c><00:12:18.280><c> from</c><00:12:19.030><c> this</c>

00:12:19.170 --> 00:12:19.180 align:start position:0%
is all I want you to take away from this
 

00:12:19.180 --> 00:12:21.660 align:start position:0%
is all I want you to take away from this
video<00:12:19.360><c> really</c><00:12:19.960><c> the</c><00:12:20.590><c> fact</c><00:12:20.860><c> that</c><00:12:21.010><c> the</c>

00:12:21.660 --> 00:12:21.670 align:start position:0%
video really the fact that the
 

00:12:21.670 --> 00:12:22.950 align:start position:0%
video really the fact that the
differences<00:12:22.180><c> between</c><00:12:22.270><c> these</c><00:12:22.660><c> two</c><00:12:22.720><c> are</c>

00:12:22.950 --> 00:12:22.960 align:start position:0%
differences between these two are
 

00:12:22.960 --> 00:12:25.530 align:start position:0%
differences between these two are
primarily<00:12:23.560><c> the</c><00:12:23.740><c> allocation</c><00:12:24.250><c> now</c><00:12:24.520><c> you</c><00:12:25.270><c> could</c>

00:12:25.530 --> 00:12:25.540 align:start position:0%
primarily the allocation now you could
 

00:12:25.540 --> 00:12:27.960 align:start position:0%
primarily the allocation now you could
argue<00:12:25.810><c> that</c><00:12:26.350><c> the</c><00:12:27.100><c> other</c><00:12:27.280><c> benefit</c><00:12:27.790><c> of</c>

00:12:27.960 --> 00:12:27.970 align:start position:0%
argue that the other benefit of
 

00:12:27.970 --> 00:12:29.460 align:start position:0%
argue that the other benefit of
allocating<00:12:28.540><c> memory</c><00:12:28.720><c> on</c><00:12:28.900><c> the</c><00:12:28.960><c> stack</c><00:12:29.020><c> or</c><00:12:29.290><c> just</c>

00:12:29.460 --> 00:12:29.470 align:start position:0%
allocating memory on the stack or just
 

00:12:29.470 --> 00:12:30.930 align:start position:0%
allocating memory on the stack or just
storing<00:12:29.770><c> variables</c><00:12:30.160><c> in</c><00:12:30.220><c> the</c><00:12:30.280><c> stack</c><00:12:30.520><c> is</c><00:12:30.760><c> the</c>

00:12:30.930 --> 00:12:30.940 align:start position:0%
storing variables in the stack is the
 

00:12:30.940 --> 00:12:32.550 align:start position:0%
storing variables in the stack is the
fact<00:12:31.180><c> that</c><00:12:31.240><c> they're</c><00:12:31.480><c> close</c><00:12:31.780><c> together</c><00:12:32.080><c> in</c>

00:12:32.550 --> 00:12:32.560 align:start position:0%
fact that they're close together in
 

00:12:32.560 --> 00:12:35.070 align:start position:0%
fact that they're close together in
memory<00:12:33.190><c> and</c><00:12:33.430><c> therefore</c><00:12:33.790><c> they</c><00:12:34.330><c> can</c><00:12:34.390><c> basically</c>

00:12:35.070 --> 00:12:35.080 align:start position:0%
memory and therefore they can basically
 

00:12:35.080 --> 00:12:37.650 align:start position:0%
memory and therefore they can basically
fit<00:12:35.290><c> onto</c><00:12:35.410><c> one</c><00:12:35.590><c> kind</c><00:12:36.430><c> of</c><00:12:36.490><c> CPU</c><00:12:36.850><c> cache</c><00:12:37.060><c> line</c><00:12:37.300><c> if</c>

00:12:37.650 --> 00:12:37.660 align:start position:0%
fit onto one kind of CPU cache line if
 

00:12:37.660 --> 00:12:40.050 align:start position:0%
fit onto one kind of CPU cache line if
we're<00:12:38.320><c> looking</c><00:12:38.530><c> at</c><00:12:38.980><c> the</c><00:12:39.160><c> actual</c><00:12:39.700><c> code</c><00:12:40.030><c> that</c>

00:12:40.050 --> 00:12:40.060 align:start position:0%
we're looking at the actual code that
 

00:12:40.060 --> 00:12:42.390 align:start position:0%
we're looking at the actual code that
we've<00:12:40.420><c> got</c><00:12:40.690><c> here</c><00:12:40.930><c> though</c><00:12:41.080><c> I</c><00:12:41.320><c> mean</c><00:12:42.010><c> we're</c>

00:12:42.390 --> 00:12:42.400 align:start position:0%
we've got here though I mean we're
 

00:12:42.400 --> 00:12:44.940 align:start position:0%
we've got here though I mean we're
talking<00:12:42.580><c> about</c><00:12:42.820><c> using</c><00:12:43.690><c> the</c><00:12:43.930><c> heap</c><00:12:44.110><c> potentially</c>

00:12:44.940 --> 00:12:44.950 align:start position:0%
talking about using the heap potentially
 

00:12:44.950 --> 00:12:47.760 align:start position:0%
talking about using the heap potentially
like<00:12:45.160><c> a</c><00:12:45.400><c> couple</c><00:12:46.030><c> of</c><00:12:46.270><c> cache</c><00:12:46.570><c> misses</c><00:12:46.840><c> verses</c><00:12:47.680><c> in</c>

00:12:47.760 --> 00:12:47.770 align:start position:0%
like a couple of cache misses verses in
 

00:12:47.770 --> 00:12:49.260 align:start position:0%
like a couple of cache misses verses in
the<00:12:47.890><c> stack</c><00:12:48.100><c> maybe</c><00:12:48.310><c> we</c><00:12:48.520><c> wouldn't</c><00:12:48.790><c> get</c><00:12:48.970><c> any</c>

00:12:49.260 --> 00:12:49.270 align:start position:0%
the stack maybe we wouldn't get any
 

00:12:49.270 --> 00:12:50.910 align:start position:0%
the stack maybe we wouldn't get any
after<00:12:49.780><c> we</c><00:12:49.900><c> kind</c><00:12:50.080><c> of</c><00:12:50.140><c> request</c><00:12:50.440><c> that</c><00:12:50.620><c> first</c>

00:12:50.910 --> 00:12:50.920 align:start position:0%
after we kind of request that first
 

00:12:50.920 --> 00:12:52.740 align:start position:0%
after we kind of request that first
stack<00:12:51.490><c> variable</c><00:12:51.850><c> we</c><00:12:51.970><c> put</c><00:12:52.180><c> something</c><00:12:52.420><c> on</c><00:12:52.630><c> to</c>

00:12:52.740 --> 00:12:52.750 align:start position:0%
stack variable we put something on to
 

00:12:52.750 --> 00:12:54.900 align:start position:0%
stack variable we put something on to
the<00:12:52.780><c> stack</c><00:12:52.870><c> a</c><00:12:53.400><c> couple</c><00:12:54.400><c> of</c><00:12:54.490><c> cache</c><00:12:54.670><c> misses</c>

00:12:54.900 --> 00:12:54.910 align:start position:0%
the stack a couple of cache misses
 

00:12:54.910 --> 00:12:57.750 align:start position:0%
the stack a couple of cache misses
versus<00:12:55.570><c> no</c><00:12:55.690><c> cache</c><00:12:55.960><c> misses</c><00:12:56.200><c> is</c><00:12:56.470><c> like</c><00:12:57.370><c> no</c><00:12:57.610><c> big</c>

00:12:57.750 --> 00:12:57.760 align:start position:0%
versus no cache misses is like no big
 

00:12:57.760 --> 00:12:59.010 align:start position:0%
versus no cache misses is like no big
deal<00:12:57.940><c> at</c><00:12:58.150><c> all</c><00:12:58.210><c> you</c><00:12:58.510><c> probably</c><00:12:58.600><c> won't</c><00:12:58.870><c> notice</c>

00:12:59.010 --> 00:12:59.020 align:start position:0%
deal at all you probably won't notice
 

00:12:59.020 --> 00:13:00.960 align:start position:0%
deal at all you probably won't notice
the<00:12:59.200><c> difference</c><00:12:59.230><c> at</c><00:12:59.800><c> all</c><00:12:59.920><c> if</c><00:13:00.610><c> we're</c><00:13:00.850><c> dealing</c>

00:13:00.960 --> 00:13:00.970 align:start position:0%
the difference at all if we're dealing
 

00:13:00.970 --> 00:13:02.760 align:start position:0%
the difference at all if we're dealing
with<00:13:01.120><c> a</c><00:13:01.240><c> couple</c><00:13:01.450><c> of</c><00:13:01.600><c> million</c><00:13:02.020><c> of</c><00:13:02.200><c> cache</c><00:13:02.590><c> misses</c>

00:13:02.760 --> 00:13:02.770 align:start position:0%
with a couple of million of cache misses
 

00:13:02.770 --> 00:13:04.290 align:start position:0%
with a couple of million of cache misses
right<00:13:03.220><c> a</c><00:13:03.280><c> couple</c><00:13:03.520><c> million</c><00:13:03.790><c> cache</c><00:13:04.060><c> misses</c>

00:13:04.290 --> 00:13:04.300 align:start position:0%
right a couple million cache misses
 

00:13:04.300 --> 00:13:07.050 align:start position:0%
right a couple million cache misses
that's<00:13:04.900><c> a</c><00:13:05.110><c> big</c><00:13:05.260><c> deal</c><00:13:05.470><c> but</c><00:13:06.040><c> with</c><00:13:06.340><c> a</c><00:13:06.370><c> few</c><00:13:06.760><c> cache</c>

00:13:07.050 --> 00:13:07.060 align:start position:0%
that's a big deal but with a few cache
 

00:13:07.060 --> 00:13:09.840 align:start position:0%
that's a big deal but with a few cache
misses<00:13:07.330><c> like</c><00:13:07.780><c> if</c><00:13:08.160><c> it's</c><00:13:09.160><c> kind</c><00:13:09.340><c> of</c><00:13:09.460><c> you</c><00:13:09.670><c> can't</c>

00:13:09.840 --> 00:13:09.850 align:start position:0%
misses like if it's kind of you can't
 

00:13:09.850 --> 00:13:11.730 align:start position:0%
misses like if it's kind of you can't
really<00:13:10.270><c> argue</c><00:13:10.420><c> the</c><00:13:10.690><c> point</c><00:13:10.960><c> the</c><00:13:11.230><c> the</c><00:13:11.470><c> fact</c><00:13:11.680><c> that</c>

00:13:11.730 --> 00:13:11.740 align:start position:0%
really argue the point the the fact that
 

00:13:11.740 --> 00:13:12.960 align:start position:0%
really argue the point the the fact that
the<00:13:11.890><c> memory</c><00:13:12.190><c> is</c><00:13:12.250><c> closer</c><00:13:12.490><c> together</c><00:13:12.670><c> on</c><00:13:12.910><c> the</c>

00:13:12.960 --> 00:13:12.970 align:start position:0%
the memory is closer together on the
 

00:13:12.970 --> 00:13:14.070 align:start position:0%
the memory is closer together on the
stack<00:13:13.150><c> or</c><00:13:13.180><c> the</c><00:13:13.300><c> fact</c><00:13:13.510><c> that</c><00:13:13.540><c> the</c><00:13:13.690><c> stack</c><00:13:13.930><c> is</c>

00:13:14.070 --> 00:13:14.080 align:start position:0%
stack or the fact that the stack is
 

00:13:14.080 --> 00:13:15.900 align:start position:0%
stack or the fact that the stack is
probably<00:13:14.500><c> hot</c><00:13:14.740><c> because</c><00:13:15.370><c> you're</c><00:13:15.490><c> continually</c>

00:13:15.900 --> 00:13:15.910 align:start position:0%
probably hot because you're continually
 

00:13:15.910 --> 00:13:18.450 align:start position:0%
probably hot because you're continually
accessing<00:13:16.600><c> is</c><00:13:16.720><c> just</c><00:13:17.530><c> just</c><00:13:17.770><c> by</c><00:13:17.920><c> keeping</c><00:13:18.220><c> like</c>

00:13:18.450 --> 00:13:18.460 align:start position:0%
accessing is just just by keeping like
 

00:13:18.460 --> 00:13:19.110 align:start position:0%
accessing is just just by keeping like
local<00:13:18.760><c> bear</c>

00:13:19.110 --> 00:13:19.120 align:start position:0%
local bear
 

00:13:19.120 --> 00:13:20.940 align:start position:0%
local bear
there<00:13:19.420><c> and</c><00:13:19.630><c> also</c><00:13:19.750><c> putting</c><00:13:20.440><c> stuff</c><00:13:20.710><c> into</c>

00:13:20.940 --> 00:13:20.950 align:start position:0%
there and also putting stuff into
 

00:13:20.950 --> 00:13:22.500 align:start position:0%
there and also putting stuff into
registers<00:13:21.430><c> for</c><00:13:21.580><c> when</c><00:13:21.700><c> you</c><00:13:21.790><c> pop</c><00:13:22.000><c> functions</c>

00:13:22.500 --> 00:13:22.510 align:start position:0%
registers for when you pop functions
 

00:13:22.510 --> 00:13:24.740 align:start position:0%
registers for when you pop functions
onto<00:13:22.690><c> the</c><00:13:22.779><c> stack</c><00:13:22.990><c> and</c><00:13:23.200><c> stuff</c><00:13:23.410><c> like</c><00:13:23.500><c> that</c>

00:13:24.740 --> 00:13:24.750 align:start position:0%
onto the stack and stuff like that
 

00:13:24.750 --> 00:13:27.660 align:start position:0%
onto the stack and stuff like that
that's<00:13:25.750><c> kind</c><00:13:26.350><c> of</c><00:13:26.380><c> a</c><00:13:26.470><c> valid</c><00:13:26.740><c> point</c><00:13:26.980><c> but</c><00:13:27.160><c> in</c><00:13:27.310><c> the</c>

00:13:27.660 --> 00:13:27.670 align:start position:0%
that's kind of a valid point but in the
 

00:13:27.670 --> 00:13:29.160 align:start position:0%
that's kind of a valid point but in the
real<00:13:27.910><c> world</c><00:13:27.940><c> and</c><00:13:28.390><c> you</c><00:13:28.450><c> probably</c><00:13:28.870><c> won't</c><00:13:29.020><c> notice</c>

00:13:29.160 --> 00:13:29.170 align:start position:0%
real world and you probably won't notice
 

00:13:29.170 --> 00:13:30.510 align:start position:0%
real world and you probably won't notice
the<00:13:29.350><c> difference</c><00:13:29.380><c> because</c><00:13:29.980><c> you're</c><00:13:30.070><c> just</c><00:13:30.279><c> not</c>

00:13:30.510 --> 00:13:30.520 align:start position:0%
the difference because you're just not
 

00:13:30.520 --> 00:13:32.160 align:start position:0%
the difference because you're just not
getting<00:13:30.910><c> enough</c><00:13:31.150><c> cache</c><00:13:31.390><c> misses</c><00:13:31.690><c> for</c><00:13:31.960><c> it</c><00:13:32.080><c> to</c>

00:13:32.160 --> 00:13:32.170 align:start position:0%
getting enough cache misses for it to
 

00:13:32.170 --> 00:13:34.860 align:start position:0%
getting enough cache misses for it to
actually<00:13:32.589><c> make</c><00:13:33.240><c> first</c><00:13:34.240><c> actually</c><00:13:34.630><c> cause</c><00:13:34.839><c> a</c>

00:13:34.860 --> 00:13:34.870 align:start position:0%
actually make first actually cause a
 

00:13:34.870 --> 00:13:35.460 align:start position:0%
actually make first actually cause a
problem

00:13:35.460 --> 00:13:35.470 align:start position:0%
problem
 

00:13:35.470 --> 00:13:39.090 align:start position:0%
problem
so<00:13:36.310><c> the</c><00:13:36.970><c> difference</c><00:13:37.480><c> the</c><00:13:38.110><c> big</c><00:13:38.500><c> difference</c>

00:13:39.090 --> 00:13:39.100 align:start position:0%
so the difference the big difference
 

00:13:39.100 --> 00:13:41.940 align:start position:0%
so the difference the big difference
between<00:13:39.339><c> the</c><00:13:39.910><c> two</c><00:13:39.940><c> is</c><00:13:40.360><c> the</c><00:13:40.930><c> allocation</c><00:13:41.350><c> the</c>

00:13:41.940 --> 00:13:41.950 align:start position:0%
between the two is the allocation the
 

00:13:41.950 --> 00:13:44.730 align:start position:0%
between the two is the allocation the
allocation<00:13:42.610><c> is</c><00:13:42.850><c> the</c><00:13:43.360><c> slow</c><00:13:43.570><c> part</c><00:13:43.810><c> allocating</c>

00:13:44.730 --> 00:13:44.740 align:start position:0%
allocation is the slow part allocating
 

00:13:44.740 --> 00:13:47.430 align:start position:0%
allocation is the slow part allocating
memory<00:13:44.860><c> on</c><00:13:45.310><c> the</c><00:13:45.760><c> stack</c><00:13:45.820><c> is</c><00:13:46.270><c> once</c><00:13:47.170><c> if</c><00:13:47.320><c> your</c>

00:13:47.430 --> 00:13:47.440 align:start position:0%
memory on the stack is once if your
 

00:13:47.440 --> 00:13:48.840 align:start position:0%
memory on the stack is once if your
instruction<00:13:47.860><c> in</c><00:13:48.040><c> fact</c><00:13:48.279><c> let's</c><00:13:48.460><c> take</c><00:13:48.580><c> a</c><00:13:48.610><c> look</c><00:13:48.790><c> at</c>

00:13:48.840 --> 00:13:48.850 align:start position:0%
instruction in fact let's take a look at
 

00:13:48.850 --> 00:13:50.220 align:start position:0%
instruction in fact let's take a look at
the<00:13:48.910><c> generators</c><00:13:49.300><c> assembly</c><00:13:49.660><c> behind</c><00:13:49.930><c> what</c>

00:13:50.220 --> 00:13:50.230 align:start position:0%
the generators assembly behind what
 

00:13:50.230 --> 00:13:51.750 align:start position:0%
the generators assembly behind what
we've<00:13:50.350><c> just</c><00:13:50.380><c> written</c><00:13:50.710><c> and</c><00:13:51.070><c> we</c><00:13:51.160><c> can</c><00:13:51.310><c> see</c><00:13:51.520><c> what</c>

00:13:51.750 --> 00:13:51.760 align:start position:0%
we've just written and we can see what
 

00:13:51.760 --> 00:13:52.980 align:start position:0%
we've just written and we can see what
it<00:13:51.880><c> actually</c><00:13:52.060><c> does</c><00:13:52.330><c> I'm</c><00:13:52.720><c> just</c><00:13:52.750><c> going</c><00:13:52.960><c> to</c>

00:13:52.980 --> 00:13:52.990 align:start position:0%
it actually does I'm just going to
 

00:13:52.990 --> 00:13:54.570 align:start position:0%
it actually does I'm just going to
compile<00:13:53.230><c> this</c><00:13:53.320><c> code</c><00:13:53.410><c> by</c><00:13:53.650><c> hitting</c><00:13:53.770><c> ctrl</c><00:13:54.040><c> f7</c><00:13:54.160><c> in</c>

00:13:54.570 --> 00:13:54.580 align:start position:0%
compile this code by hitting ctrl f7 in
 

00:13:54.580 --> 00:13:56.610 align:start position:0%
compile this code by hitting ctrl f7 in
my<00:13:55.000><c> properties</c><00:13:55.420><c> from</c><00:13:55.600><c> my</c><00:13:55.750><c> project</c><00:13:56.020><c> I've</c><00:13:56.440><c> also</c>

00:13:56.610 --> 00:13:56.620 align:start position:0%
my properties from my project I've also
 

00:13:56.620 --> 00:13:59.220 align:start position:0%
my properties from my project I've also
just<00:13:57.010><c> got</c><00:13:57.190><c> under</c><00:13:58.029><c> CC</c><00:13:58.240><c> Plus</c><00:13:58.480><c> last</c><00:13:58.660><c> output</c><00:13:59.020><c> files</c>

00:13:59.220 --> 00:13:59.230 align:start position:0%
just got under CC Plus last output files
 

00:13:59.230 --> 00:14:00.900 align:start position:0%
just got under CC Plus last output files
I've<00:13:59.440><c> got</c><00:13:59.620><c> assembler</c><00:14:00.040><c> output</c><00:14:00.370><c> to</c><00:14:00.490><c> assembly</c>

00:14:00.900 --> 00:14:00.910 align:start position:0%
I've got assembler output to assembly
 

00:14:00.910 --> 00:14:02.340 align:start position:0%
I've got assembler output to assembly
with<00:14:01.089><c> source</c><00:14:01.390><c> code</c><00:14:01.630><c> so</c><00:14:01.839><c> that</c><00:14:01.870><c> we</c><00:14:02.020><c> can</c><00:14:02.140><c> look</c><00:14:02.260><c> at</c>

00:14:02.340 --> 00:14:02.350 align:start position:0%
with source code so that we can look at
 

00:14:02.350 --> 00:14:04.200 align:start position:0%
with source code so that we can look at
it<00:14:02.440><c> and</c><00:14:02.650><c> here</c><00:14:03.010><c> we</c><00:14:03.040><c> have</c><00:14:03.310><c> the</c><00:14:03.460><c> assembly</c><00:14:03.970><c> so</c>

00:14:04.200 --> 00:14:04.210 align:start position:0%
it and here we have the assembly so
 

00:14:04.210 --> 00:14:07.500 align:start position:0%
it and here we have the assembly so
let's<00:14:04.390><c> just</c><00:14:04.570><c> go</c><00:14:04.810><c> down</c><00:14:05.050><c> to</c><00:14:05.760><c> our</c><00:14:06.760><c> value</c><00:14:07.240><c> variable</c>

00:14:07.500 --> 00:14:07.510 align:start position:0%
let's just go down to our value variable
 

00:14:07.510 --> 00:14:10.650 align:start position:0%
let's just go down to our value variable
okay<00:14:08.500><c> so</c><00:14:08.980><c> here's</c><00:14:09.250><c> our</c><00:14:09.400><c> code</c><00:14:09.670><c> int</c><00:14:09.970><c> value</c><00:14:10.390><c> equals</c>

00:14:10.650 --> 00:14:10.660 align:start position:0%
okay so here's our code int value equals
 

00:14:10.660 --> 00:14:12.960 align:start position:0%
okay so here's our code int value equals
5<00:14:10.839><c> that</c><00:14:11.350><c> is</c><00:14:11.650><c> the</c><00:14:11.890><c> CPU</c><00:14:12.100><c> instruction</c><00:14:12.700><c> that</c><00:14:12.880><c> it</c>

00:14:12.960 --> 00:14:12.970 align:start position:0%
5 that is the CPU instruction that it
 

00:14:12.970 --> 00:14:14.250 align:start position:0%
5 that is the CPU instruction that it
runs<00:14:13.089><c> now</c><00:14:13.330><c> this</c><00:14:13.510><c> is</c><00:14:13.600><c> compiled</c><00:14:13.900><c> and</c><00:14:14.020><c> debug</c>

00:14:14.250 --> 00:14:14.260 align:start position:0%
runs now this is compiled and debug
 

00:14:14.260 --> 00:14:15.420 align:start position:0%
runs now this is compiled and debug
won't<00:14:14.440><c> keep</c><00:14:14.680><c> that</c><00:14:14.800><c> in</c><00:14:14.890><c> mind</c><00:14:15.040><c> so</c><00:14:15.190><c> there</c><00:14:15.310><c> may</c><00:14:15.400><c> be</c>

00:14:15.420 --> 00:14:15.430 align:start position:0%
won't keep that in mind so there may be
 

00:14:15.430 --> 00:14:17.250 align:start position:0%
won't keep that in mind so there may be
some<00:14:15.670><c> extra</c><00:14:15.970><c> things</c><00:14:16.210><c> when</c><00:14:16.779><c> it</c><00:14:16.870><c> comes</c><00:14:17.020><c> to</c><00:14:17.140><c> the</c>

00:14:17.250 --> 00:14:17.260 align:start position:0%
some extra things when it comes to the
 

00:14:17.260 --> 00:14:18.900 align:start position:0%
some extra things when it comes to the
heat<00:14:17.410><c> comparison</c><00:14:17.950><c> but</c><00:14:18.070><c> the</c><00:14:18.190><c> stack</c><00:14:18.430><c> you</c><00:14:18.640><c> can</c>

00:14:18.900 --> 00:14:18.910 align:start position:0%
heat comparison but the stack you can
 

00:14:18.910 --> 00:14:20.910 align:start position:0%
heat comparison but the stack you can
see<00:14:19.180><c> all</c><00:14:19.450><c> the</c><00:14:19.570><c> does</c><00:14:19.720><c> is</c><00:14:19.930><c> it</c><00:14:20.050><c> moves</c><00:14:20.170><c> five</c><00:14:20.440><c> into</c><00:14:20.890><c> a</c>

00:14:20.910 --> 00:14:20.920 align:start position:0%
see all the does is it moves five into a
 

00:14:20.920 --> 00:14:23.550 align:start position:0%
see all the does is it moves five into a
register<00:14:21.130><c> that's</c><00:14:21.730><c> it</c><00:14:21.970><c> done</c><00:14:22.480><c> or</c><00:14:22.870><c> specifically</c>

00:14:23.550 --> 00:14:23.560 align:start position:0%
register that's it done or specifically
 

00:14:23.560 --> 00:14:24.990 align:start position:0%
register that's it done or specifically
into<00:14:23.770><c> this</c><00:14:23.890><c> kind</c><00:14:24.070><c> of</c><00:14:24.130><c> stack</c><00:14:24.370><c> pointer</c><00:14:24.790><c> add</c><00:14:24.970><c> a</c>

00:14:24.990 --> 00:14:25.000 align:start position:0%
into this kind of stack pointer add a
 

00:14:25.000 --> 00:14:27.720 align:start position:0%
into this kind of stack pointer add a
specific<00:14:25.360><c> offset</c><00:14:25.900><c> but</c><00:14:26.560><c> the</c><00:14:26.709><c> idea</c><00:14:27.040><c> is</c><00:14:27.100><c> that's</c>

00:14:27.720 --> 00:14:27.730 align:start position:0%
specific offset but the idea is that's
 

00:14:27.730 --> 00:14:29.760 align:start position:0%
specific offset but the idea is that's
it<00:14:28.029><c> it's</c><00:14:28.450><c> once</c><00:14:28.690><c> a</c><00:14:28.839><c> few</c><00:14:28.959><c> instruction</c><00:14:29.470><c> now</c><00:14:29.560><c> with</c>

00:14:29.760 --> 00:14:29.770 align:start position:0%
it it's once a few instruction now with
 

00:14:29.770 --> 00:14:31.290 align:start position:0%
it it's once a few instruction now with
the<00:14:29.860><c> array</c><00:14:30.130><c> we</c><00:14:30.520><c> kind</c><00:14:30.730><c> of</c><00:14:30.790><c> have</c><00:14:30.880><c> two</c><00:14:31.060><c> things</c>

00:14:31.290 --> 00:14:31.300 align:start position:0%
the array we kind of have two things
 

00:14:31.300 --> 00:14:32.850 align:start position:0%
the array we kind of have two things
here<00:14:31.510><c> and</c><00:14:31.930><c> it</c><00:14:32.170><c> actually</c><00:14:32.290><c> does</c><00:14:32.560><c> a</c><00:14:32.589><c> bit</c><00:14:32.740><c> of</c><00:14:32.800><c> a</c>

00:14:32.850 --> 00:14:32.860 align:start position:0%
here and it actually does a bit of a
 

00:14:32.860 --> 00:14:34.560 align:start position:0%
here and it actually does a bit of a
multiplication<00:14:33.160><c> whatever</c><00:14:33.850><c> I'm</c><00:14:34.209><c> not</c><00:14:34.330><c> going</c><00:14:34.450><c> to</c>

00:14:34.560 --> 00:14:34.570 align:start position:0%
multiplication whatever I'm not going to
 

00:14:34.570 --> 00:14:36.120 align:start position:0%
multiplication whatever I'm not going to
talk<00:14:34.720><c> about</c><00:14:34.870><c> the</c><00:14:35.080><c> semantics</c><00:14:35.589><c> of</c><00:14:35.680><c> that</c><00:14:35.860><c> but</c><00:14:36.070><c> you</c>

00:14:36.120 --> 00:14:36.130 align:start position:0%
talk about the semantics of that but you
 

00:14:36.130 --> 00:14:37.199 align:start position:0%
talk about the semantics of that but you
can<00:14:36.250><c> see</c><00:14:36.370><c> what</c><00:14:36.520><c> it's</c><00:14:36.640><c> really</c><00:14:36.670><c> just</c><00:14:36.910><c> done</c><00:14:37.089><c> is</c>

00:14:37.199 --> 00:14:37.209 align:start position:0%
can see what it's really just done is
 

00:14:37.209 --> 00:14:38.850 align:start position:0%
can see what it's really just done is
it's<00:14:37.330><c> just</c><00:14:37.390><c> allocated</c><00:14:37.959><c> enough</c><00:14:38.050><c> space</c><00:14:38.410><c> for</c><00:14:38.440><c> our</c>

00:14:38.850 --> 00:14:38.860 align:start position:0%
it's just allocated enough space for our
 

00:14:38.860 --> 00:14:40.620 align:start position:0%
it's just allocated enough space for our
kind<00:14:39.100><c> of</c><00:14:39.190><c> array</c><00:14:39.400><c> here</c><00:14:39.670><c> and</c><00:14:39.880><c> that's</c><00:14:40.270><c> it</c><00:14:40.450><c> you</c><00:14:40.600><c> can</c>

00:14:40.620 --> 00:14:40.630 align:start position:0%
kind of array here and that's it you can
 

00:14:40.630 --> 00:14:42.240 align:start position:0%
kind of array here and that's it you can
with<00:14:41.170><c> I</c><00:14:41.380><c> mean</c><00:14:41.589><c> this</c><00:14:41.709><c> is</c><00:14:41.830><c> just</c><00:14:41.980><c> setting</c>

00:14:42.240 --> 00:14:42.250 align:start position:0%
with I mean this is just setting
 

00:14:42.250 --> 00:14:43.800 align:start position:0%
with I mean this is just setting
variables<00:14:42.459><c> whatever</c><00:14:42.820><c> and</c><00:14:43.240><c> with</c><00:14:43.420><c> our</c><00:14:43.540><c> vector</c>

00:14:43.800 --> 00:14:43.810 align:start position:0%
variables whatever and with our vector
 

00:14:43.810 --> 00:14:45.720 align:start position:0%
variables whatever and with our vector
allocation<00:14:44.320><c> again</c><00:14:44.740><c> it's</c><00:14:45.339><c> called</c><00:14:45.640><c> a</c>

00:14:45.720 --> 00:14:45.730 align:start position:0%
allocation again it's called a
 

00:14:45.730 --> 00:14:47.310 align:start position:0%
allocation again it's called a
constructor<00:14:46.240><c> over</c><00:14:46.420><c> here</c><00:14:46.660><c> but</c><00:14:47.080><c> other</c><00:14:47.200><c> than</c>

00:14:47.310 --> 00:14:47.320 align:start position:0%
constructor over here but other than
 

00:14:47.320 --> 00:14:48.810 align:start position:0%
constructor over here but other than
that<00:14:47.380><c> the</c><00:14:47.709><c> allocation</c><00:14:48.250><c> is</c><00:14:48.339><c> actually</c><00:14:48.700><c> just</c>

00:14:48.810 --> 00:14:48.820 align:start position:0%
that the allocation is actually just
 

00:14:48.820 --> 00:14:52.079 align:start position:0%
that the allocation is actually just
immediate<00:14:49.510><c> now</c><00:14:50.140><c> here</c><00:14:50.830><c> is</c><00:14:51.010><c> our</c><00:14:51.370><c> allocation</c><00:14:52.000><c> on</c>

00:14:52.079 --> 00:14:52.089 align:start position:0%
immediate now here is our allocation on
 

00:14:52.089 --> 00:14:54.329 align:start position:0%
immediate now here is our allocation on
the<00:14:52.180><c> heap</c><00:14:52.360><c> look</c><00:14:52.930><c> at</c><00:14:53.020><c> what</c><00:14:53.140><c> that</c><00:14:53.260><c> does</c><00:14:53.320><c> the</c><00:14:54.130><c> main</c>

00:14:54.329 --> 00:14:54.339 align:start position:0%
the heap look at what that does the main
 

00:14:54.339 --> 00:14:56.370 align:start position:0%
the heap look at what that does the main
thing<00:14:54.580><c> is</c><00:14:54.730><c> it</c><00:14:54.940><c> calls</c><00:14:55.270><c> an</c><00:14:55.480><c> entire</c><00:14:55.720><c> operator</c><00:14:56.170><c> and</c>

00:14:56.370 --> 00:14:56.380 align:start position:0%
thing is it calls an entire operator and
 

00:14:56.380 --> 00:14:57.900 align:start position:0%
thing is it calls an entire operator and
that<00:14:56.410><c> operate</c><00:14:56.860><c> a</c><00:14:56.890><c> new</c><00:14:57.130><c> course</c><00:14:57.370><c> malloc</c><00:14:57.730><c> and</c>

00:14:57.900 --> 00:14:57.910 align:start position:0%
that operate a new course malloc and
 

00:14:57.910 --> 00:14:59.100 align:start position:0%
that operate a new course malloc and
then<00:14:58.029><c> that</c><00:14:58.209><c> obviously</c><00:14:58.420><c> has</c><00:14:58.750><c> to</c><00:14:58.870><c> go</c><00:14:58.930><c> through</c>

00:14:59.100 --> 00:14:59.110 align:start position:0%
then that obviously has to go through
 

00:14:59.110 --> 00:15:00.240 align:start position:0%
then that obviously has to go through
the<00:14:59.200><c> free</c><00:14:59.380><c> list</c><00:14:59.529><c> and</c><00:14:59.740><c> check</c><00:14:59.890><c> to</c><00:14:59.980><c> see</c><00:15:00.010><c> if</c><00:15:00.160><c> we've</c>

00:15:00.240 --> 00:15:00.250 align:start position:0%
the free list and check to see if we've
 

00:15:00.250 --> 00:15:01.650 align:start position:0%
the free list and check to see if we've
got<00:15:00.400><c> enough</c><00:15:00.430><c> memory</c><00:15:00.850><c> and</c><00:15:01.029><c> get</c><00:15:01.150><c> it</c><00:15:01.270><c> the</c><00:15:01.330><c> memory</c>

00:15:01.650 --> 00:15:01.660 align:start position:0%
got enough memory and get it the memory
 

00:15:01.660 --> 00:15:03.269 align:start position:0%
got enough memory and get it the memory
and<00:15:01.870><c> record</c><00:15:02.410><c> the</c><00:15:02.500><c> fact</c><00:15:02.709><c> that</c><00:15:02.800><c> it's</c><00:15:02.920><c> now</c><00:15:03.070><c> been</c>

00:15:03.269 --> 00:15:03.279 align:start position:0%
and record the fact that it's now been
 

00:15:03.279 --> 00:15:04.890 align:start position:0%
and record the fact that it's now been
taken<00:15:03.459><c> and</c><00:15:03.820><c> how</c><00:15:03.910><c> much</c><00:15:04.120><c> has</c><00:15:04.300><c> been</c><00:15:04.330><c> allocated</c>

00:15:04.890 --> 00:15:04.900 align:start position:0%
taken and how much has been allocated
 

00:15:04.900 --> 00:15:06.480 align:start position:0%
taken and how much has been allocated
and<00:15:05.050><c> then</c><00:15:05.440><c> we</c><00:15:05.560><c> have</c><00:15:05.709><c> to</c><00:15:05.800><c> delete</c><00:15:06.100><c> it</c><00:15:06.250><c> off</c><00:15:06.370><c> -</c>

00:15:06.480 --> 00:15:06.490 align:start position:0%
and then we have to delete it off -
 

00:15:06.490 --> 00:15:08.519 align:start position:0%
and then we have to delete it off -
we're<00:15:06.640><c> done</c><00:15:06.820><c> the</c><00:15:07.390><c> whole</c><00:15:07.630><c> nightmare</c><00:15:07.930><c> right</c><00:15:08.350><c> and</c>

00:15:08.519 --> 00:15:08.529 align:start position:0%
we're done the whole nightmare right and
 

00:15:08.529 --> 00:15:10.170 align:start position:0%
we're done the whole nightmare right and
if<00:15:08.589><c> we</c><00:15:08.680><c> keep</c><00:15:08.830><c> reading</c><00:15:09.070><c> you</c><00:15:09.670><c> can</c><00:15:09.790><c> see</c><00:15:09.910><c> the</c><00:15:10.029><c> same</c>

00:15:10.170 --> 00:15:10.180 align:start position:0%
if we keep reading you can see the same
 

00:15:10.180 --> 00:15:11.340 align:start position:0%
if we keep reading you can see the same
thing<00:15:10.209><c> obviously</c><00:15:10.450><c> happens</c><00:15:10.900><c> for</c><00:15:11.020><c> the</c><00:15:11.110><c> array</c>

00:15:11.340 --> 00:15:11.350 align:start position:0%
thing obviously happens for the array
 

00:15:11.350 --> 00:15:12.900 align:start position:0%
thing obviously happens for the array
and<00:15:11.709><c> then</c><00:15:11.920><c> finally</c><00:15:12.400><c> if</c><00:15:12.459><c> we</c><00:15:12.580><c> look</c><00:15:12.700><c> at</c><00:15:12.820><c> even</c>

00:15:12.900 --> 00:15:12.910 align:start position:0%
and then finally if we look at even
 

00:15:12.910 --> 00:15:15.660 align:start position:0%
and then finally if we look at even
deleting<00:15:13.450><c> the</c><00:15:14.320><c> vector</c><00:15:14.709><c> first</c><00:15:14.920><c> of</c><00:15:15.100><c> all</c><00:15:15.250><c> it</c><00:15:15.490><c> is</c>

00:15:15.660 --> 00:15:15.670 align:start position:0%
deleting the vector first of all it is
 

00:15:15.670 --> 00:15:18.120 align:start position:0%
deleting the vector first of all it is
quite<00:15:16.029><c> heavy</c><00:15:16.240><c> and</c><00:15:16.680><c> it</c><00:15:17.680><c> does</c><00:15:17.830><c> pull</c><00:15:18.070><c> the</c>

00:15:18.120 --> 00:15:18.130 align:start position:0%
quite heavy and it does pull the
 

00:15:18.130 --> 00:15:19.800 align:start position:0%
quite heavy and it does pull the
constructor<00:15:18.640><c> of</c><00:15:18.670><c> course</c><00:15:19.000><c> the</c><00:15:19.330><c> same</c><00:15:19.510><c> as</c><00:15:19.690><c> our</c>

00:15:19.800 --> 00:15:19.810 align:start position:0%
constructor of course the same as our
 

00:15:19.810 --> 00:15:22.680 align:start position:0%
constructor of course the same as our
stack<00:15:20.130><c> the</c><00:15:21.130><c> delete</c><00:15:21.490><c> is</c><00:15:21.730><c> incredibly</c><00:15:22.270><c> heavy</c><00:15:22.480><c> as</c>

00:15:22.680 --> 00:15:22.690 align:start position:0%
stack the delete is incredibly heavy as
 

00:15:22.690 --> 00:15:24.449 align:start position:0%
stack the delete is incredibly heavy as
well<00:15:22.839><c> keep</c><00:15:23.350><c> in</c><00:15:23.500><c> mind</c><00:15:23.650><c> this</c><00:15:23.770><c> is</c><00:15:23.920><c> compiled</c><00:15:24.279><c> in</c>

00:15:24.449 --> 00:15:24.459 align:start position:0%
well keep in mind this is compiled in
 

00:15:24.459 --> 00:15:25.890 align:start position:0%
well keep in mind this is compiled in
debug<00:15:24.910><c> mode</c><00:15:25.150><c> which</c><00:15:25.330><c> is</c><00:15:25.450><c> why</c><00:15:25.540><c> you're</c><00:15:25.660><c> seeing</c><00:15:25.779><c> so</c>

00:15:25.890 --> 00:15:25.900 align:start position:0%
debug mode which is why you're seeing so
 

00:15:25.900 --> 00:15:27.720 align:start position:0%
debug mode which is why you're seeing so
much<00:15:26.260><c> code</c><00:15:26.529><c> it</c><00:15:26.650><c> would</c><00:15:26.740><c> be</c><00:15:26.860><c> a</c><00:15:26.890><c> lot</c><00:15:27.100><c> leaner</c><00:15:27.400><c> in</c>

00:15:27.720 --> 00:15:27.730 align:start position:0%
much code it would be a lot leaner in
 

00:15:27.730 --> 00:15:30.040 align:start position:0%
much code it would be a lot leaner in
release<00:15:28.450><c> mode</c><00:15:28.480><c> but</c><00:15:28.959><c> still</c><00:15:29.290><c> there's</c>

00:15:30.040 --> 00:15:30.050 align:start position:0%
release mode but still there's
 

00:15:30.050 --> 00:15:31.750 align:start position:0%
release mode but still there's
going<00:15:30.350><c> on</c><00:15:30.470><c> here</c><00:15:30.680><c> and</c><00:15:30.890><c> then</c><00:15:31.070><c> of</c><00:15:31.160><c> course</c><00:15:31.190><c> with</c><00:15:31.730><c> a</c>

00:15:31.750 --> 00:15:31.760 align:start position:0%
going on here and then of course with a
 

00:15:31.760 --> 00:15:33.310 align:start position:0%
going on here and then of course with a
regulating<00:15:32.300><c> and</c><00:15:32.480><c> linear</c><00:15:32.779><c> vector</c><00:15:33.050><c> we</c><00:15:33.140><c> get</c><00:15:33.290><c> a</c>

00:15:33.310 --> 00:15:33.320 align:start position:0%
regulating and linear vector we get a
 

00:15:33.320 --> 00:15:35.290 align:start position:0%
regulating and linear vector we get a
bunch<00:15:33.500><c> of</c><00:15:33.529><c> stuff</c><00:15:33.680><c> as</c><00:15:33.950><c> well</c><00:15:34.310><c> but</c><00:15:34.610><c> again</c><00:15:34.730><c> main</c>

00:15:35.290 --> 00:15:35.300 align:start position:0%
bunch of stuff as well but again main
 

00:15:35.300 --> 00:15:38.050 align:start position:0%
bunch of stuff as well but again main
point<00:15:35.600><c> being</c><00:15:35.810><c> that</c><00:15:35.990><c> allocating</c><00:15:36.860><c> that</c><00:15:37.070><c> value</c><00:15:37.610><c> v</c>

00:15:38.050 --> 00:15:38.060 align:start position:0%
point being that allocating that value v
 

00:15:38.060 --> 00:15:40.570 align:start position:0%
point being that allocating that value v
on<00:15:38.390><c> the</c><00:15:38.450><c> stack</c><00:15:38.750><c> is</c><00:15:38.990><c> just</c><00:15:39.380><c> that</c><00:15:39.529><c> that's</c><00:15:40.220><c> all</c><00:15:40.459><c> it</c>

00:15:40.570 --> 00:15:40.580 align:start position:0%
on the stack is just that that's all it
 

00:15:40.580 --> 00:15:42.610 align:start position:0%
on the stack is just that that's all it
is<00:15:40.610><c> right</c><00:15:41.300><c> and</c><00:15:41.510><c> of</c><00:15:41.839><c> course</c><00:15:41.899><c> if</c><00:15:42.260><c> this</c><00:15:42.350><c> was</c><00:15:42.589><c> a</c>

00:15:42.610 --> 00:15:42.620 align:start position:0%
is right and of course if this was a
 

00:15:42.620 --> 00:15:44.199 align:start position:0%
is right and of course if this was a
class<00:15:42.920><c> that</c><00:15:42.950><c> just</c><00:15:43.430><c> had</c><00:15:43.550><c> a</c><00:15:43.580><c> bunch</c><00:15:43.760><c> of</c><00:15:43.850><c> integers</c>

00:15:44.199 --> 00:15:44.209 align:start position:0%
class that just had a bunch of integers
 

00:15:44.209 --> 00:15:46.449 align:start position:0%
class that just had a bunch of integers
it<00:15:44.420><c> would</c><00:15:44.600><c> look</c><00:15:44.750><c> the</c><00:15:45.080><c> same</c><00:15:45.279><c> the</c><00:15:46.279><c> same</c>

00:15:46.449 --> 00:15:46.459 align:start position:0%
it would look the same the same
 

00:15:46.459 --> 00:15:48.220 align:start position:0%
it would look the same the same
essentially<00:15:47.060><c> right</c><00:15:47.269><c> I</c><00:15:47.450><c> mean</c><00:15:47.839><c> you</c><00:15:47.930><c> can</c><00:15:48.079><c> see</c>

00:15:48.220 --> 00:15:48.230 align:start position:0%
essentially right I mean you can see
 

00:15:48.230 --> 00:15:49.810 align:start position:0%
essentially right I mean you can see
that<00:15:48.380><c> the</c><00:15:48.470><c> vector</c><00:15:48.649><c> allocation</c><00:15:49.310><c> looks</c><00:15:49.550><c> exactly</c>

00:15:49.810 --> 00:15:49.820 align:start position:0%
that the vector allocation looks exactly
 

00:15:49.820 --> 00:15:51.460 align:start position:0%
that the vector allocation looks exactly
the<00:15:50.060><c> same</c><00:15:50.269><c> it's</c><00:15:50.480><c> just</c><00:15:50.510><c> cause</c><00:15:50.810><c> the</c><00:15:50.959><c> constructor</c>

00:15:51.460 --> 00:15:51.470 align:start position:0%
the same it's just cause the constructor
 

00:15:51.470 --> 00:15:53.470 align:start position:0%
the same it's just cause the constructor
so<00:15:51.860><c> I</c><00:15:51.890><c> hope</c><00:15:52.130><c> that</c><00:15:52.279><c> all</c><00:15:52.459><c> of</c><00:15:52.579><c> that</c><00:15:52.760><c> is</c><00:15:53.000><c> kind</c><00:15:53.420><c> of</c>

00:15:53.470 --> 00:15:53.480 align:start position:0%
so I hope that all of that is kind of
 

00:15:53.480 --> 00:15:55.329 align:start position:0%
so I hope that all of that is kind of
clear<00:15:53.720><c> to</c><00:15:53.930><c> you</c><00:15:54.050><c> the</c><00:15:54.200><c> fact</c><00:15:54.410><c> that</c><00:15:54.529><c> you</c><00:15:54.829><c> should</c>

00:15:55.329 --> 00:15:55.339 align:start position:0%
clear to you the fact that you should
 

00:15:55.339 --> 00:15:57.190 align:start position:0%
clear to you the fact that you should
try<00:15:55.579><c> and</c><00:15:55.760><c> allocate</c><00:15:56.120><c> on</c><00:15:56.240><c> the</c><00:15:56.329><c> stack</c><00:15:56.600><c> whenever</c>

00:15:57.190 --> 00:15:57.200 align:start position:0%
try and allocate on the stack whenever
 

00:15:57.200 --> 00:15:58.960 align:start position:0%
try and allocate on the stack whenever
possible<00:15:57.440><c> the</c><00:15:57.829><c> only</c><00:15:57.860><c> reason</c><00:15:58.339><c> really</c><00:15:58.610><c> to</c>

00:15:58.960 --> 00:15:58.970 align:start position:0%
possible the only reason really to
 

00:15:58.970 --> 00:16:02.079 align:start position:0%
possible the only reason really to
allocate<00:15:59.690><c> on</c><00:15:59.899><c> the</c><00:16:00.019><c> heap</c><00:16:00.230><c> is</c><00:16:00.440><c> if</c><00:16:01.430><c> you</c><00:16:01.730><c> can't</c>

00:16:02.079 --> 00:16:02.089 align:start position:0%
allocate on the heap is if you can't
 

00:16:02.089 --> 00:16:03.670 align:start position:0%
allocate on the heap is if you can't
allocate<00:16:02.540><c> on</c><00:16:02.690><c> the</c><00:16:02.779><c> staff</c><00:16:02.990><c> whether</c><00:16:03.290><c> whether</c>

00:16:03.670 --> 00:16:03.680 align:start position:0%
allocate on the staff whether whether
 

00:16:03.680 --> 00:16:05.620 align:start position:0%
allocate on the staff whether whether
you<00:16:03.800><c> need</c><00:16:04.010><c> that</c><00:16:04.190><c> lifetime</c><00:16:04.490><c> to</c><00:16:05.060><c> actually</c><00:16:05.480><c> be</c>

00:16:05.620 --> 00:16:05.630 align:start position:0%
you need that lifetime to actually be
 

00:16:05.630 --> 00:16:07.600 align:start position:0%
you need that lifetime to actually be
longer<00:16:05.899><c> than</c><00:16:06.320><c> the</c><00:16:06.470><c> scope</c><00:16:06.709><c> of</c><00:16:06.950><c> your</c><00:16:07.130><c> function</c>

00:16:07.600 --> 00:16:07.610 align:start position:0%
longer than the scope of your function
 

00:16:07.610 --> 00:16:09.460 align:start position:0%
longer than the scope of your function
or<00:16:07.790><c> whatever</c><00:16:08.149><c> scope</c><00:16:08.390><c> you're</c><00:16:08.540><c> dealing</c><00:16:08.779><c> with</c><00:16:08.810><c> or</c>

00:16:09.460 --> 00:16:09.470 align:start position:0%
or whatever scope you're dealing with or
 

00:16:09.470 --> 00:16:11.650 align:start position:0%
or whatever scope you're dealing with or
you<00:16:09.860><c> specifically</c><00:16:10.279><c> need</c><00:16:10.490><c> more</c><00:16:10.850><c> data</c><00:16:11.120><c> like</c><00:16:11.510><c> I</c>

00:16:11.650 --> 00:16:11.660 align:start position:0%
you specifically need more data like I
 

00:16:11.660 --> 00:16:14.769 align:start position:0%
you specifically need more data like I
want<00:16:11.870><c> to</c><00:16:11.930><c> load</c><00:16:12.140><c> a</c><00:16:12.170><c> texture</c><00:16:12.560><c> that's</c><00:16:13.779><c> 15</c>

00:16:14.769 --> 00:16:14.779 align:start position:0%
want to load a texture that's 15
 

00:16:14.779 --> 00:16:16.000 align:start position:0%
want to load a texture that's 15
megabytes<00:16:15.170><c> or</c><00:16:15.410><c> something</c><00:16:15.620><c> like</c><00:16:15.709><c> that</c><00:16:15.800><c> that's</c>

00:16:16.000 --> 00:16:16.010 align:start position:0%
megabytes or something like that that's
 

00:16:16.010 --> 00:16:17.560 align:start position:0%
megabytes or something like that that's
not<00:16:16.160><c> gonna</c><00:16:16.370><c> fit</c><00:16:16.579><c> onto</c><00:16:16.820><c> the</c><00:16:16.910><c> stack</c><00:16:17.120><c> you'll</c><00:16:17.360><c> have</c>

00:16:17.560 --> 00:16:17.570 align:start position:0%
not gonna fit onto the stack you'll have
 

00:16:17.570 --> 00:16:19.030 align:start position:0%
not gonna fit onto the stack you'll have
to<00:16:17.750><c> allocate</c><00:16:18.079><c> that</c><00:16:18.140><c> on</c><00:16:18.380><c> the</c><00:16:18.470><c> heap</c><00:16:18.649><c> and</c><00:16:18.680><c> all</c>

00:16:19.030 --> 00:16:19.040 align:start position:0%
to allocate that on the heap and all
 

00:16:19.040 --> 00:16:21.670 align:start position:0%
to allocate that on the heap and all
that<00:16:19.459><c> kind</c><00:16:19.730><c> of</c><00:16:19.760><c> stuff</c><00:16:19.940><c> right</c><00:16:20.120><c> but</c><00:16:21.079><c> if</c><00:16:21.260><c> you</c><00:16:21.410><c> can</c>

00:16:21.670 --> 00:16:21.680 align:start position:0%
that kind of stuff right but if you can
 

00:16:21.680 --> 00:16:23.800 align:start position:0%
that kind of stuff right but if you can
you<00:16:22.160><c> should</c><00:16:22.190><c> be</c><00:16:22.459><c> allocated</c><00:16:22.850><c> on</c><00:16:22.910><c> the</c><00:16:22.970><c> stack</c><00:16:23.029><c> all</c>

00:16:23.800 --> 00:16:23.810 align:start position:0%
you should be allocated on the stack all
 

00:16:23.810 --> 00:16:26.530 align:start position:0%
you should be allocated on the stack all
the<00:16:24.110><c> time</c><00:16:24.320><c> because</c><00:16:24.709><c> it's</c><00:16:25.250><c> like</c><00:16:26.060><c> once</c><00:16:26.329><c> if</c><00:16:26.510><c> you</c>

00:16:26.530 --> 00:16:26.540 align:start position:0%
the time because it's like once if you
 

00:16:26.540 --> 00:16:29.139 align:start position:0%
the time because it's like once if you
instruction<00:16:27.110><c> and</c><00:16:27.290><c> that's</c><00:16:28.040><c> very</c><00:16:28.490><c> very</c><00:16:28.760><c> real</c>

00:16:29.139 --> 00:16:29.149 align:start position:0%
instruction and that's very very real
 

00:16:29.149 --> 00:16:32.590 align:start position:0%
instruction and that's very very real
performance<00:16:29.600><c> difference</c><00:16:29.990><c> now</c><00:16:31.240><c> one</c><00:16:32.240><c> more</c><00:16:32.390><c> time</c>

00:16:32.590 --> 00:16:32.600 align:start position:0%
performance difference now one more time
 

00:16:32.600 --> 00:16:34.389 align:start position:0%
performance difference now one more time
just<00:16:32.870><c> so</c><00:16:33.350><c> that</c><00:16:33.500><c> this</c><00:16:33.620><c> is</c><00:16:33.740><c> completely</c><00:16:34.160><c> clear</c>

00:16:34.389 --> 00:16:34.399 align:start position:0%
just so that this is completely clear
 

00:16:34.399 --> 00:16:36.670 align:start position:0%
just so that this is completely clear
the<00:16:34.899><c> performance</c><00:16:35.899><c> difference</c><00:16:36.260><c> is</c><00:16:36.440><c> the</c>

00:16:36.670 --> 00:16:36.680 align:start position:0%
the performance difference is the
 

00:16:36.680 --> 00:16:40.060 align:start position:0%
the performance difference is the
allocation<00:16:37.070><c> so</c><00:16:37.970><c> if</c><00:16:38.300><c> you</c><00:16:38.660><c> were</c><00:16:39.070><c> theoretically</c>

00:16:40.060 --> 00:16:40.070 align:start position:0%
allocation so if you were theoretically
 

00:16:40.070 --> 00:16:42.970 align:start position:0%
allocation so if you were theoretically
to<00:16:40.730><c> pre-allocate</c><00:16:41.570><c> I</c><00:16:41.839><c> don't</c><00:16:42.470><c> know</c><00:16:42.560><c> a</c><00:16:42.589><c> full</c>

00:16:42.970 --> 00:16:42.980 align:start position:0%
to pre-allocate I don't know a full
 

00:16:42.980 --> 00:16:45.910 align:start position:0%
to pre-allocate I don't know a full
gigabyte<00:16:43.480><c> block</c><00:16:44.480><c> of</c><00:16:44.630><c> memory</c><00:16:44.810><c> before</c><00:16:45.649><c> you</c><00:16:45.770><c> ran</c>

00:16:45.910 --> 00:16:45.920 align:start position:0%
gigabyte block of memory before you ran
 

00:16:45.920 --> 00:16:48.130 align:start position:0%
gigabyte block of memory before you ran
your<00:16:46.070><c> program</c><00:16:46.490><c> on</c><00:16:46.700><c> the</c><00:16:46.880><c> heap</c><00:16:47.060><c> and</c><00:16:47.270><c> then</c><00:16:47.959><c> you</c>

00:16:48.130 --> 00:16:48.140 align:start position:0%
your program on the heap and then you
 

00:16:48.140 --> 00:16:50.410 align:start position:0%
your program on the heap and then you
were<00:16:48.290><c> to</c><00:16:48.320><c> kind</c><00:16:48.620><c> of</c><00:16:48.770><c> heap</c><00:16:49.040><c> allocate</c><00:16:49.579><c> from</c><00:16:50.149><c> that</c>

00:16:50.410 --> 00:16:50.420 align:start position:0%
were to kind of heap allocate from that
 

00:16:50.420 --> 00:16:52.990 align:start position:0%
were to kind of heap allocate from that
pre-allocated<00:16:51.110><c> for</c><00:16:51.740><c> like</c><00:16:52.220><c> gigabyte</c><00:16:52.700><c> block</c><00:16:52.880><c> of</c>

00:16:52.990 --> 00:16:53.000 align:start position:0%
pre-allocated for like gigabyte block of
 

00:16:53.000 --> 00:16:55.510 align:start position:0%
pre-allocated for like gigabyte block of
memory<00:16:53.529><c> it</c><00:16:54.529><c> would</c><00:16:54.649><c> basically</c><00:16:54.829><c> be</c><00:16:55.100><c> the</c><00:16:55.220><c> same</c>

00:16:55.510 --> 00:16:55.520 align:start position:0%
memory it would basically be the same
 

00:16:55.520 --> 00:16:57.519 align:start position:0%
memory it would basically be the same
right<00:16:56.000><c> the</c><00:16:56.540><c> only</c><00:16:56.630><c> thing</c><00:16:56.870><c> you're</c><00:16:56.990><c> potentially</c>

00:16:57.519 --> 00:16:57.529 align:start position:0%
right the only thing you're potentially
 

00:16:57.529 --> 00:16:59.440 align:start position:0%
right the only thing you're potentially
dealing<00:16:57.800><c> with</c><00:16:57.950><c> there</c><00:16:58.190><c> is</c><00:16:58.399><c> again</c><00:16:58.820><c> CPU</c><00:16:59.270><c> cache</c>

00:16:59.440 --> 00:16:59.450 align:start position:0%
dealing with there is again CPU cache
 

00:16:59.450 --> 00:17:00.940 align:start position:0%
dealing with there is again CPU cache
misses<00:16:59.720><c> but</c><00:16:59.990><c> there's</c><00:17:00.170><c> probably</c><00:17:00.470><c> not</c><00:17:00.649><c> enough</c>

00:17:00.940 --> 00:17:00.950 align:start position:0%
misses but there's probably not enough
 

00:17:00.950 --> 00:17:04.750 align:start position:0%
misses but there's probably not enough
of<00:17:01.070><c> them</c><00:17:01.250><c> to</c><00:17:01.730><c> actually</c><00:17:01.850><c> matter</c><00:17:02.560><c> so</c><00:17:03.560><c> the</c><00:17:04.490><c> fact</c>

00:17:04.750 --> 00:17:04.760 align:start position:0%
of them to actually matter so the fact
 

00:17:04.760 --> 00:17:06.699 align:start position:0%
of them to actually matter so the fact
that<00:17:04.939><c> when</c><00:17:05.360><c> you</c><00:17:05.449><c> call</c><00:17:05.630><c> new</c><00:17:05.870><c> it</c><00:17:06.169><c> has</c><00:17:06.380><c> to</c><00:17:06.559><c> go</c>

00:17:06.699 --> 00:17:06.709 align:start position:0%
that when you call new it has to go
 

00:17:06.709 --> 00:17:08.980 align:start position:0%
that when you call new it has to go
through<00:17:06.890><c> the</c><00:17:07.069><c> free</c><00:17:07.309><c> list</c><00:17:07.520><c> and</c><00:17:07.819><c> ask</c><00:17:08.329><c> for</c><00:17:08.630><c> memory</c>

00:17:08.980 --> 00:17:08.990 align:start position:0%
through the free list and ask for memory
 

00:17:08.990 --> 00:17:11.500 align:start position:0%
through the free list and ask for memory
and<00:17:09.050><c> book</c><00:17:09.589><c> keep</c><00:17:09.860><c> all</c><00:17:10.100><c> of</c><00:17:10.250><c> that</c><00:17:10.429><c> that</c><00:17:11.209><c> is</c><00:17:11.480><c> the</c>

00:17:11.500 --> 00:17:11.510 align:start position:0%
and book keep all of that that is the
 

00:17:11.510 --> 00:17:13.870 align:start position:0%
and book keep all of that that is the
slow<00:17:11.870><c> part</c><00:17:12.140><c> of</c><00:17:12.350><c> the</c><00:17:12.800><c> stack</c><00:17:13.040><c> versus</c><00:17:13.579><c> the</c><00:17:13.699><c> heap</c>

00:17:13.870 --> 00:17:13.880 align:start position:0%
slow part of the stack versus the heap
 

00:17:13.880 --> 00:17:16.900 align:start position:0%
slow part of the stack versus the heap
the<00:17:14.300><c> actual</c><00:17:14.660><c> access</c><00:17:15.110><c> is</c><00:17:15.550><c> usually</c><00:17:16.550><c> negligible</c>

00:17:16.900 --> 00:17:16.910 align:start position:0%
the actual access is usually negligible
 

00:17:16.910 --> 00:17:20.530 align:start position:0%
the actual access is usually negligible
right<00:17:17.870><c> usually</c><00:17:18.319><c> not</c><00:17:19.189><c> always</c><00:17:19.339><c> we</c><00:17:20.179><c> might</c><00:17:20.360><c> talk</c>

00:17:20.530 --> 00:17:20.540 align:start position:0%
right usually not always we might talk
 

00:17:20.540 --> 00:17:22.150 align:start position:0%
right usually not always we might talk
more<00:17:20.720><c> about</c><00:17:20.780><c> CPU</c><00:17:21.290><c> cache</c><00:17:21.470><c> optimization</c><00:17:21.650><c> and</c>

00:17:22.150 --> 00:17:22.160 align:start position:0%
more about CPU cache optimization and
 

00:17:22.160 --> 00:17:23.260 align:start position:0%
more about CPU cache optimization and
stuff<00:17:22.309><c> like</c><00:17:22.370><c> that</c><00:17:22.550><c> certainly</c><00:17:22.910><c> if</c><00:17:23.000><c> you're</c>

00:17:23.260 --> 00:17:23.270 align:start position:0%
stuff like that certainly if you're
 

00:17:23.270 --> 00:17:24.460 align:start position:0%
stuff like that certainly if you're
writing<00:17:23.480><c> through</c><00:17:23.720><c> a</c><00:17:23.750><c> collection</c><00:17:24.230><c> of</c><00:17:24.380><c> a</c>

00:17:24.460 --> 00:17:24.470 align:start position:0%
writing through a collection of a
 

00:17:24.470 --> 00:17:25.809 align:start position:0%
writing through a collection of a
million<00:17:24.740><c> elements</c><00:17:24.949><c> and</c><00:17:25.250><c> every</c><00:17:25.429><c> single</c><00:17:25.579><c> one</c><00:17:25.760><c> of</c>

00:17:25.809 --> 00:17:25.819 align:start position:0%
million elements and every single one of
 

00:17:25.819 --> 00:17:27.250 align:start position:0%
million elements and every single one of
them<00:17:25.970><c> is</c><00:17:26.059><c> a</c><00:17:26.089><c> cache</c><00:17:26.300><c> miss</c><00:17:26.480><c> you're</c><00:17:26.929><c> gonna</c><00:17:26.990><c> see</c><00:17:27.230><c> a</c>

00:17:27.250 --> 00:17:27.260 align:start position:0%
them is a cache miss you're gonna see a
 

00:17:27.260 --> 00:17:29.049 align:start position:0%
them is a cache miss you're gonna see a
very<00:17:27.319><c> real</c><00:17:27.949><c> performance</c><00:17:28.370><c> difference</c><00:17:28.760><c> between</c>

00:17:29.049 --> 00:17:29.059 align:start position:0%
very real performance difference between
 

00:17:29.059 --> 00:17:30.610 align:start position:0%
very real performance difference between
if<00:17:29.270><c> you</c><00:17:29.570><c> have</c><00:17:29.840><c> everything</c><00:17:30.200><c> kind</c><00:17:30.530><c> of</c>

00:17:30.610 --> 00:17:30.620 align:start position:0%
if you have everything kind of
 

00:17:30.620 --> 00:17:32.710 align:start position:0%
if you have everything kind of
contiguously<00:17:31.130><c> or</c><00:17:31.280><c> fragmented</c><00:17:31.610><c> but</c><00:17:32.330><c> that's</c><00:17:32.540><c> a</c>

00:17:32.710 --> 00:17:32.720 align:start position:0%
contiguously or fragmented but that's a
 

00:17:32.720 --> 00:17:35.470 align:start position:0%
contiguously or fragmented but that's a
nother<00:17:33.230><c> video</c><00:17:33.880><c> drop</c><00:17:34.880><c> a</c><00:17:34.940><c> comment</c><00:17:35.240><c> if</c><00:17:35.300><c> you</c><00:17:35.390><c> want</c>

00:17:35.470 --> 00:17:35.480 align:start position:0%
nother video drop a comment if you want
 

00:17:35.480 --> 00:17:37.840 align:start position:0%
nother video drop a comment if you want
to<00:17:35.600><c> say</c><00:17:35.750><c> that</c><00:17:35.929><c> I</c><00:17:36.080><c> think</c><00:17:36.290><c> I'll</c><00:17:36.380><c> make</c><00:17:36.500><c> it</c><00:17:36.850><c> because</c>

00:17:37.840 --> 00:17:37.850 align:start position:0%
to say that I think I'll make it because
 

00:17:37.850 --> 00:17:38.919 align:start position:0%
to say that I think I'll make it because
that's<00:17:38.090><c> probably</c><00:17:38.419><c> something</c><00:17:38.600><c> is</c><00:17:38.750><c> very</c>

00:17:38.919 --> 00:17:38.929 align:start position:0%
that's probably something is very
 

00:17:38.929 --> 00:17:40.150 align:start position:0%
that's probably something is very
interesting<00:17:39.290><c> very</c><00:17:39.470><c> interesting</c><00:17:39.710><c> to</c><00:17:39.980><c> a</c><00:17:40.040><c> lot</c><00:17:40.130><c> of</c>

00:17:40.150 --> 00:17:40.160 align:start position:0%
interesting very interesting to a lot of
 

00:17:40.160 --> 00:17:42.130 align:start position:0%
interesting very interesting to a lot of
people<00:17:40.460><c> but</c><00:17:40.880><c> anyway</c><00:17:41.210><c> that's</c><00:17:41.450><c> about</c><00:17:41.750><c> it</c><00:17:41.929><c> for</c>

00:17:42.130 --> 00:17:42.140 align:start position:0%
people but anyway that's about it for
 

00:17:42.140 --> 00:17:42.760 align:start position:0%
people but anyway that's about it for
this<00:17:42.260><c> video</c>

00:17:42.760 --> 00:17:42.770 align:start position:0%
this video
 

00:17:42.770 --> 00:17:43.840 align:start position:0%
this video
we're<00:17:42.860><c> definitely</c><00:17:42.980><c> going</c><00:17:43.310><c> to</c><00:17:43.400><c> learn</c><00:17:43.640><c> more</c>

00:17:43.840 --> 00:17:43.850 align:start position:0%
we're definitely going to learn more
 

00:17:43.850 --> 00:17:45.940 align:start position:0%
we're definitely going to learn more
about<00:17:43.910><c> kind</c><00:17:44.390><c> of</c><00:17:44.510><c> allocating</c><00:17:45.110><c> in</c><00:17:45.290><c> the</c><00:17:45.740><c> real</c>

00:17:45.940 --> 00:17:45.950 align:start position:0%
about kind of allocating in the real
 

00:17:45.950 --> 00:17:46.750 align:start position:0%
about kind of allocating in the real
world<00:17:46.160><c> and</c><00:17:46.310><c> how</c><00:17:46.430><c> we</c><00:17:46.460><c> can</c><00:17:46.640><c> minimize</c>

00:17:46.750 --> 00:17:46.760 align:start position:0%
world and how we can minimize
 

00:17:46.760 --> 00:17:48.220 align:start position:0%
world and how we can minimize
allocations<00:17:47.420><c> we'll</c><00:17:47.540><c> have</c><00:17:47.660><c> to</c><00:17:47.750><c> spend</c><00:17:47.960><c> quite</c><00:17:48.050><c> a</c>

00:17:48.220 --> 00:17:48.230 align:start position:0%
allocations we'll have to spend quite a
 

00:17:48.230 --> 00:17:49.660 align:start position:0%
allocations we'll have to spend quite a
bit<00:17:48.320><c> of</c><00:17:48.440><c> time</c><00:17:48.620><c> discussing</c><00:17:48.740><c> allocations</c><00:17:49.550><c> when</c>

00:17:49.660 --> 00:17:49.670 align:start position:0%
bit of time discussing allocations when
 

00:17:49.670 --> 00:17:50.920 align:start position:0%
bit of time discussing allocations when
we<00:17:49.760><c> actually</c><00:17:49.910><c> start</c><00:17:50.300><c> out</c><00:17:50.390><c> gaming</c><00:17:50.720><c> into</c><00:17:50.840><c> the</c>

00:17:50.920 --> 00:17:50.930 align:start position:0%
we actually start out gaming into the
 

00:17:50.930 --> 00:17:52.510 align:start position:0%
we actually start out gaming into the
series<00:17:51.260><c> because</c><00:17:51.860><c> it's</c><00:17:51.950><c> very</c><00:17:52.100><c> important</c><00:17:52.430><c> for</c>

00:17:52.510 --> 00:17:52.520 align:start position:0%
series because it's very important for
 

00:17:52.520 --> 00:17:53.950 align:start position:0%
series because it's very important for
kind<00:17:52.730><c> of</c><00:17:52.790><c> real</c><00:17:53.030><c> world</c><00:17:53.240><c> applications</c>

00:17:53.950 --> 00:17:53.960 align:start position:0%
kind of real world applications
 

00:17:53.960 --> 00:17:55.720 align:start position:0%
kind of real world applications
oh<00:17:54.050><c> and</c><00:17:54.590><c> by</c><00:17:54.950><c> real</c><00:17:55.160><c> world</c><00:17:55.190><c> applications</c>

00:17:55.720 --> 00:17:55.730 align:start position:0%
oh and by real world applications
 

00:17:55.730 --> 00:17:57.820 align:start position:0%
oh and by real world applications
between<00:17:55.850><c> real</c><00:17:56.150><c> time</c><00:17:56.420><c> applications</c><00:17:57.140><c> so</c><00:17:57.650><c> it's</c>

00:17:57.820 --> 00:17:57.830 align:start position:0%
between real time applications so it's
 

00:17:57.830 --> 00:17:59.800 align:start position:0%
between real time applications so it's
really<00:17:57.950><c> important</c><00:17:58.340><c> for</c><00:17:58.370><c> games</c><00:17:59.060><c> essentially</c>

00:17:59.800 --> 00:17:59.810 align:start position:0%
really important for games essentially
 

00:17:59.810 --> 00:18:01.840 align:start position:0%
really important for games essentially
not<00:18:00.260><c> to</c><00:18:00.440><c> continuously</c><00:18:00.920><c> allocate</c><00:18:01.430><c> frame</c><00:18:01.700><c> to</c>

00:18:01.840 --> 00:18:01.850 align:start position:0%
not to continuously allocate frame to
 

00:18:01.850 --> 00:18:05.050 align:start position:0%
not to continuously allocate frame to
frame<00:18:02.000><c> because</c><00:18:02.840><c> that</c><00:18:03.170><c> will</c><00:18:03.410><c> be</c><00:18:03.770><c> slow</c><00:18:04.250><c> so</c><00:18:04.550><c> we</c>

00:18:05.050 --> 00:18:05.060 align:start position:0%
frame because that will be slow so we
 

00:18:05.060 --> 00:18:06.880 align:start position:0%
frame because that will be slow so we
have<00:18:05.210><c> to</c><00:18:05.360><c> basically</c><00:18:05.840><c> come</c><00:18:06.080><c> up</c><00:18:06.110><c> with</c><00:18:06.380><c> some</c>

00:18:06.880 --> 00:18:06.890 align:start position:0%
have to basically come up with some
 

00:18:06.890 --> 00:18:08.620 align:start position:0%
have to basically come up with some
clever<00:18:07.040><c> memory</c><00:18:07.520><c> management</c><00:18:07.790><c> techniques</c><00:18:08.270><c> if</c>

00:18:08.620 --> 00:18:08.630 align:start position:0%
clever memory management techniques if
 

00:18:08.630 --> 00:18:10.090 align:start position:0%
clever memory management techniques if
we<00:18:08.930><c> want</c><00:18:09.080><c> to</c><00:18:09.140><c> our</c><00:18:09.200><c> game</c><00:18:09.350><c> engine</c><00:18:09.680><c> to</c><00:18:09.710><c> actually</c>

00:18:10.090 --> 00:18:10.100 align:start position:0%
we want to our game engine to actually
 

00:18:10.100 --> 00:18:11.620 align:start position:0%
we want to our game engine to actually
be<00:18:10.250><c> efficient</c><00:18:10.850><c> which</c><00:18:11.030><c> is</c><00:18:11.180><c> why</c><00:18:11.300><c> we</c><00:18:11.480><c> will</c>

00:18:11.620 --> 00:18:11.630 align:start position:0%
be efficient which is why we will
 

00:18:11.630 --> 00:18:13.330 align:start position:0%
be efficient which is why we will
definitely<00:18:11.810><c> be</c><00:18:12.080><c> discussing</c><00:18:12.410><c> that</c><00:18:12.650><c> in</c><00:18:12.950><c> the</c>

00:18:13.330 --> 00:18:13.340 align:start position:0%
definitely be discussing that in the
 

00:18:13.340 --> 00:18:15.730 align:start position:0%
definitely be discussing that in the
game<00:18:13.490><c> engine</c><00:18:13.700><c> series</c><00:18:14.120><c> anyway</c><00:18:14.900><c> I</c><00:18:14.990><c> hope</c><00:18:15.110><c> I</c><00:18:15.200><c> hope</c>

00:18:15.730 --> 00:18:15.740 align:start position:0%
game engine series anyway I hope I hope
 

00:18:15.740 --> 00:18:17.410 align:start position:0%
game engine series anyway I hope I hope
I've<00:18:15.980><c> answered</c><00:18:16.130><c> all</c><00:18:16.670><c> of</c><00:18:16.730><c> your</c><00:18:16.820><c> kind</c><00:18:17.120><c> of</c><00:18:17.210><c> stack</c>

00:18:17.410 --> 00:18:17.420 align:start position:0%
I've answered all of your kind of stack
 

00:18:17.420 --> 00:18:19.420 align:start position:0%
I've answered all of your kind of stack
first<00:18:17.660><c> heap</c><00:18:17.870><c> questions</c><00:18:18.320><c> if</c><00:18:18.530><c> I</c><00:18:18.740><c> didn't</c><00:18:19.190><c> drop</c><00:18:19.370><c> a</c>

00:18:19.420 --> 00:18:19.430 align:start position:0%
first heap questions if I didn't drop a
 

00:18:19.430 --> 00:18:21.730 align:start position:0%
first heap questions if I didn't drop a
comment<00:18:19.700><c> below</c><00:18:20.000><c> I'll</c><00:18:20.660><c> maybe</c><00:18:21.410><c> make</c><00:18:21.710><c> a</c>

00:18:21.730 --> 00:18:21.740 align:start position:0%
comment below I'll maybe make a
 

00:18:21.740 --> 00:18:23.200 align:start position:0%
comment below I'll maybe make a
follow-up<00:18:22.130><c> video</c><00:18:22.370><c> if</c><00:18:22.610><c> I</c><00:18:22.760><c> need</c><00:18:22.940><c> to</c><00:18:23.090><c> I</c><00:18:23.120><c> think</c>

00:18:23.200 --> 00:18:23.210 align:start position:0%
follow-up video if I need to I think
 

00:18:23.210 --> 00:18:25.600 align:start position:0%
follow-up video if I need to I think
that's<00:18:23.450><c> about</c><00:18:24.050><c> it</c><00:18:24.260><c> there</c><00:18:24.770><c> I</c><00:18:24.980><c> mean</c><00:18:25.220><c> really</c><00:18:25.460><c> we</c>

00:18:25.600 --> 00:18:25.610 align:start position:0%
that's about it there I mean really we
 

00:18:25.610 --> 00:18:27.190 align:start position:0%
that's about it there I mean really we
didn't<00:18:25.760><c> go</c><00:18:25.850><c> to</c><00:18:26.060><c> in</c><00:18:26.210><c> depth</c><00:18:26.390><c> into</c><00:18:26.720><c> how</c><00:18:26.840><c> it</c>

00:18:27.190 --> 00:18:27.200 align:start position:0%
didn't go to in depth into how it
 

00:18:27.200 --> 00:18:28.300 align:start position:0%
didn't go to in depth into how it
actually<00:18:27.320><c> works</c><00:18:27.650><c> on</c><00:18:27.830><c> like</c><00:18:27.980><c> an</c><00:18:28.070><c> operating</c>

00:18:28.300 --> 00:18:28.310 align:start position:0%
actually works on like an operating
 

00:18:28.310 --> 00:18:30.310 align:start position:0%
actually works on like an operating
system<00:18:28.700><c> level</c><00:18:28.820><c> but</c><00:18:29.510><c> I</c><00:18:29.540><c> think</c><00:18:29.600><c> for</c><00:18:29.870><c> most</c><00:18:29.990><c> people</c>

00:18:30.310 --> 00:18:30.320 align:start position:0%
system level but I think for most people
 

00:18:30.320 --> 00:18:31.960 align:start position:0%
system level but I think for most people
it's<00:18:30.440><c> probably</c><00:18:30.740><c> gonna</c><00:18:30.830><c> be</c><00:18:30.980><c> enough</c><00:18:31.220><c> if</c><00:18:31.490><c> you</c>

00:18:31.960 --> 00:18:31.970 align:start position:0%
it's probably gonna be enough if you
 

00:18:31.970 --> 00:18:33.340 align:start position:0%
it's probably gonna be enough if you
enjoyed<00:18:32.060><c> this</c><00:18:32.300><c> video</c><00:18:32.480><c> please</c><00:18:32.810><c> hit</c><00:18:32.990><c> the</c><00:18:33.170><c> like</c>

00:18:33.340 --> 00:18:33.350 align:start position:0%
enjoyed this video please hit the like
 

00:18:33.350 --> 00:18:35.020 align:start position:0%
enjoyed this video please hit the like
button<00:18:33.650><c> you</c><00:18:33.740><c> can</c><00:18:33.860><c> also</c><00:18:33.980><c> support</c><00:18:34.370><c> this</c><00:18:34.640><c> series</c>

00:18:35.020 --> 00:18:35.030 align:start position:0%
button you can also support this series
 

00:18:35.030 --> 00:18:36.520 align:start position:0%
button you can also support this series
and<00:18:35.210><c> everything</c><00:18:35.690><c> that</c><00:18:35.810><c> I</c><00:18:35.840><c> do</c><00:18:35.930><c> here</c><00:18:36.320><c> on</c><00:18:36.470><c> YouTube</c>

00:18:36.520 --> 00:18:36.530 align:start position:0%
and everything that I do here on YouTube
 

00:18:36.530 --> 00:18:38.590 align:start position:0%
and everything that I do here on YouTube
by<00:18:37.190><c> going</c><00:18:37.370><c> to</c><00:18:37.490><c> patronymic</c><00:18:37.910><c> on</c><00:18:38.090><c> course</c><00:18:38.330><c> at</c><00:18:38.480><c> the</c>

00:18:38.590 --> 00:18:38.600 align:start position:0%
by going to patronymic on course at the
 

00:18:38.600 --> 00:18:40.450 align:start position:0%
by going to patronymic on course at the
Turner<00:18:38.810><c> huge</c><00:18:39.590><c> shout</c><00:18:39.770><c> out</c><00:18:39.800><c> to</c><00:18:40.040><c> all</c><00:18:40.070><c> of</c><00:18:40.250><c> my</c>

00:18:40.450 --> 00:18:40.460 align:start position:0%
Turner huge shout out to all of my
 

00:18:40.460 --> 00:18:42.760 align:start position:0%
Turner huge shout out to all of my
patrons<00:18:40.880><c> there</c><00:18:41.120><c> this</c><00:18:41.960><c> video</c><00:18:42.380><c> that</c><00:18:42.680><c> you're</c>

00:18:42.760 --> 00:18:42.770 align:start position:0%
patrons there this video that you're
 

00:18:42.770 --> 00:18:44.260 align:start position:0%
patrons there this video that you're
saying<00:18:42.950><c> right</c><00:18:43.070><c> now</c><00:18:43.160><c> probably</c><00:18:43.850><c> wouldn't</c><00:18:44.090><c> exist</c>

00:18:44.260 --> 00:18:44.270 align:start position:0%
saying right now probably wouldn't exist
 

00:18:44.270 --> 00:18:46.480 align:start position:0%
saying right now probably wouldn't exist
if<00:18:44.420><c> it</c><00:18:44.540><c> wasn't</c><00:18:44.810><c> for</c><00:18:44.900><c> them</c><00:18:45.050><c> so</c><00:18:45.530><c> again</c><00:18:46.040><c> huge</c>

00:18:46.480 --> 00:18:46.490 align:start position:0%
if it wasn't for them so again huge
 

00:18:46.490 --> 00:18:48.070 align:start position:0%
if it wasn't for them so again huge
thank<00:18:46.730><c> you</c><00:18:46.910><c> and</c><00:18:47.060><c> there's</c><00:18:47.450><c> a</c><00:18:47.540><c> bunch</c><00:18:47.750><c> of</c><00:18:47.930><c> really</c>

00:18:48.070 --> 00:18:48.080 align:start position:0%
thank you and there's a bunch of really
 

00:18:48.080 --> 00:18:49.630 align:start position:0%
thank you and there's a bunch of really
cool<00:18:48.170><c> rewards</c><00:18:48.470><c> that</c><00:18:48.770><c> you</c><00:18:48.830><c> did</c><00:18:49.220><c> that</c><00:18:49.250><c> you</c><00:18:49.460><c> can</c>

00:18:49.630 --> 00:18:49.640 align:start position:0%
cool rewards that you did that you can
 

00:18:49.640 --> 00:18:51.550 align:start position:0%
cool rewards that you did that you can
actually<00:18:49.790><c> get</c><00:18:50.090><c> if</c><00:18:50.330><c> you</c><00:18:50.810><c> go</c><00:18:50.930><c> out</c><00:18:50.990><c> there</c><00:18:51.200><c> and</c><00:18:51.410><c> you</c>

00:18:51.550 --> 00:18:51.560 align:start position:0%
actually get if you go out there and you
 

00:18:51.560 --> 00:18:54.610 align:start position:0%
actually get if you go out there and you
help<00:18:51.680><c> support</c><00:18:52.070><c> this</c><00:18:52.310><c> channel</c><00:18:53.140><c> next</c><00:18:54.140><c> time</c><00:18:54.320><c> I</c>

00:18:54.610 --> 00:18:54.620 align:start position:0%
help support this channel next time I
 

00:18:54.620 --> 00:18:55.960 align:start position:0%
help support this channel next time I
don't<00:18:55.040><c> even</c><00:18:55.220><c> know</c><00:18:55.430><c> what</c><00:18:55.580><c> we're</c><00:18:55.700><c> gonna</c><00:18:55.790><c> talk</c>

00:18:55.960 --> 00:18:55.970 align:start position:0%
don't even know what we're gonna talk
 

00:18:55.970 --> 00:18:57.550 align:start position:0%
don't even know what we're gonna talk
about<00:18:56.030><c> next</c><00:18:56.450><c> time</c><00:18:56.540><c> I've</c><00:18:56.690><c> got</c><00:18:56.840><c> a</c><00:18:56.870><c> list</c><00:18:57.080><c> but</c><00:18:57.470><c> if</c>

00:18:57.550 --> 00:18:57.560 align:start position:0%
about next time I've got a list but if
 

00:18:57.560 --> 00:18:59.140 align:start position:0%
about next time I've got a list but if
you<00:18:57.650><c> guys</c><00:18:57.770><c> want</c><00:18:58.010><c> to</c><00:18:58.070><c> see</c><00:18:58.190><c> something</c><00:18:58.430><c> specific</c>

00:18:59.140 --> 00:18:59.150 align:start position:0%
you guys want to see something specific
 

00:18:59.150 --> 00:19:01.450 align:start position:0%
you guys want to see something specific
drop<00:18:59.600><c> a</c><00:18:59.630><c> comment</c><00:18:59.900><c> below</c><00:19:00.200><c> and</c><00:19:00.620><c> just</c><00:19:01.130><c> hit</c><00:19:01.370><c> the</c>

00:19:01.450 --> 00:19:01.460 align:start position:0%
drop a comment below and just hit the
 

00:19:01.460 --> 00:19:03.310 align:start position:0%
drop a comment below and just hit the
thumbs<00:19:01.700><c> up</c><00:19:01.850><c> button</c><00:19:02.030><c> on</c><00:19:02.300><c> any</c><00:19:02.510><c> comment</c><00:19:02.990><c> that</c><00:19:03.200><c> you</c>

00:19:03.310 --> 00:19:03.320 align:start position:0%
thumbs up button on any comment that you
 

00:19:03.320 --> 00:19:05.230 align:start position:0%
thumbs up button on any comment that you
like<00:19:03.620><c> so</c><00:19:03.980><c> that</c><00:19:04.100><c> the</c><00:19:04.400><c> kind</c><00:19:04.700><c> of</c><00:19:04.790><c> top</c><00:19:04.970><c> rated</c>

00:19:05.230 --> 00:19:05.240 align:start position:0%
like so that the kind of top rated
 

00:19:05.240 --> 00:19:06.850 align:start position:0%
like so that the kind of top rated
comments<00:19:05.600><c> kind</c><00:19:05.780><c> of</c><00:19:05.840><c> go</c><00:19:05.900><c> up</c><00:19:06.020><c> to</c><00:19:06.140><c> the</c><00:19:06.230><c> top</c><00:19:06.410><c> and</c>

00:19:06.850 --> 00:19:06.860 align:start position:0%
comments kind of go up to the top and
 

00:19:06.860 --> 00:19:08.200 align:start position:0%
comments kind of go up to the top and
I'll<00:19:06.980><c> see</c><00:19:07.160><c> if</c><00:19:07.250><c> I</c><00:19:07.340><c> can</c><00:19:07.490><c> make</c><00:19:07.610><c> a</c><00:19:07.640><c> video</c><00:19:07.790><c> else</c><00:19:08.060><c> cuz</c>

00:19:08.200 --> 00:19:08.210 align:start position:0%
I'll see if I can make a video else cuz
 

00:19:08.210 --> 00:19:09.790 align:start position:0%
I'll see if I can make a video else cuz
it'll<00:19:08.420><c> be</c><00:19:08.510><c> that</c><00:19:08.630><c> because</c><00:19:09.080><c> I</c><00:19:09.200><c> want</c><00:19:09.620><c> to</c><00:19:09.710><c> make</c>

00:19:09.790 --> 00:19:09.800 align:start position:0%
it'll be that because I want to make
 

00:19:09.800 --> 00:19:11.650 align:start position:0%
it'll be that because I want to make
videos<00:19:09.950><c> that</c><00:19:10.160><c> you</c><00:19:10.370><c> guys</c><00:19:10.400><c> want</c><00:19:10.730><c> to</c><00:19:10.790><c> see</c><00:19:10.940><c> I</c><00:19:11.150><c> will</c>

00:19:11.650 --> 00:19:11.660 align:start position:0%
videos that you guys want to see I will
 

00:19:11.660 --> 00:19:14.490 align:start position:0%
videos that you guys want to see I will
see<00:19:11.960><c> you</c><00:19:12.050><c> next</c><00:19:12.200><c> time</c><00:19:12.440><c> goodbye</c>

00:19:14.490 --> 00:19:14.500 align:start position:0%
see you next time goodbye
 

00:19:14.500 --> 00:19:29.680 align:start position:0%
see you next time goodbye
[Music]

