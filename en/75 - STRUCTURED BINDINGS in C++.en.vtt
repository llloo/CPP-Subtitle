WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.480 align:start position:0%
 
hello<00:00:00.390><c> guys</c><00:00:00.570><c> my</c><00:00:00.599><c> name</c><00:00:01.140><c> is</c><00:00:01.170><c> the</c><00:00:01.860><c> chana</c><00:00:02.129><c> welcome</c>

00:00:02.480 --> 00:00:02.490 align:start position:0%
hello guys my name is the chana welcome
 

00:00:02.490 --> 00:00:05.059 align:start position:0%
hello guys my name is the chana welcome
back<00:00:02.669><c> to</c><00:00:02.909><c> my</c><00:00:03.060><c> C++</c><00:00:03.990><c> series</c><00:00:04.500><c> so</c><00:00:04.770><c> today</c><00:00:04.980><c> we're</c>

00:00:05.059 --> 00:00:05.069 align:start position:0%
back to my C++ series so today we're
 

00:00:05.069 --> 00:00:06.380 align:start position:0%
back to my C++ series so today we're
gonna<00:00:05.160><c> be</c><00:00:05.250><c> talking</c><00:00:05.400><c> all</c><00:00:05.670><c> about</c><00:00:05.700><c> structured</c>

00:00:06.380 --> 00:00:06.390 align:start position:0%
gonna be talking all about structured
 

00:00:06.390 --> 00:00:09.730 align:start position:0%
gonna be talking all about structured
bindings<00:00:07.020><c> in</c><00:00:07.290><c> C++</c><00:00:08.099><c> this</c><00:00:08.280><c> is</c><00:00:08.460><c> specific</c><00:00:08.910><c> to</c><00:00:09.059><c> C++</c>

00:00:09.730 --> 00:00:09.740 align:start position:0%
bindings in C++ this is specific to C++
 

00:00:09.740 --> 00:00:12.740 align:start position:0%
bindings in C++ this is specific to C++
17<00:00:10.740><c> structured</c><00:00:11.460><c> bindings</c><00:00:11.910><c> are</c><00:00:12.090><c> a</c><00:00:12.120><c> new</c><00:00:12.420><c> feature</c>

00:00:12.740 --> 00:00:12.750 align:start position:0%
17 structured bindings are a new feature
 

00:00:12.750 --> 00:00:14.749 align:start position:0%
17 structured bindings are a new feature
that<00:00:12.960><c> let</c><00:00:13.259><c> us</c><00:00:13.290><c> deal</c><00:00:13.710><c> with</c><00:00:13.740><c> multiple</c><00:00:14.160><c> return</c>

00:00:14.749 --> 00:00:14.759 align:start position:0%
that let us deal with multiple return
 

00:00:14.759 --> 00:00:16.820 align:start position:0%
that let us deal with multiple return
values<00:00:15.179><c> a</c><00:00:15.210><c> little</c><00:00:15.540><c> bit</c><00:00:15.839><c> better</c><00:00:16.199><c> now</c><00:00:16.560><c> I</c><00:00:16.590><c> did</c>

00:00:16.820 --> 00:00:16.830 align:start position:0%
values a little bit better now I did
 

00:00:16.830 --> 00:00:18.380 align:start position:0%
values a little bit better now I did
make<00:00:16.980><c> a</c><00:00:17.010><c> video</c><00:00:17.279><c> about</c><00:00:17.580><c> how</c><00:00:17.940><c> to</c><00:00:18.000><c> deal</c><00:00:18.359><c> with</c>

00:00:18.380 --> 00:00:18.390 align:start position:0%
make a video about how to deal with
 

00:00:18.390 --> 00:00:21.200 align:start position:0%
make a video about how to deal with
multiple<00:00:18.810><c> return</c><00:00:19.260><c> values</c><00:00:19.650><c> in</c><00:00:19.830><c> C++</c><00:00:20.430><c> check</c><00:00:21.060><c> out</c>

00:00:21.200 --> 00:00:21.210 align:start position:0%
multiple return values in C++ check out
 

00:00:21.210 --> 00:00:22.460 align:start position:0%
multiple return values in C++ check out
that<00:00:21.330><c> video</c><00:00:21.480><c> if</c><00:00:21.630><c> you</c><00:00:21.720><c> haven't</c><00:00:21.990><c> already</c><00:00:22.080><c> I'll</c>

00:00:22.460 --> 00:00:22.470 align:start position:0%
that video if you haven't already I'll
 

00:00:22.470 --> 00:00:24.769 align:start position:0%
that video if you haven't already I'll
have<00:00:22.650><c> it</c><00:00:22.740><c> linked</c><00:00:23.070><c> up</c><00:00:23.220><c> there</c><00:00:23.640><c> and</c><00:00:23.910><c> this</c><00:00:24.420><c> is</c><00:00:24.480><c> kind</c>

00:00:24.769 --> 00:00:24.779 align:start position:0%
have it linked up there and this is kind
 

00:00:24.779 --> 00:00:26.540 align:start position:0%
have it linked up there and this is kind
of<00:00:24.840><c> extending</c><00:00:25.320><c> upon</c><00:00:25.590><c> that</c><00:00:25.740><c> with</c><00:00:25.980><c> kind</c><00:00:26.279><c> of</c><00:00:26.340><c> a</c>

00:00:26.540 --> 00:00:26.550 align:start position:0%
of extending upon that with kind of a
 

00:00:26.550 --> 00:00:29.060 align:start position:0%
of extending upon that with kind of a
new<00:00:26.820><c> way</c><00:00:27.060><c> of</c><00:00:27.170><c> how</c><00:00:28.170><c> we</c><00:00:28.199><c> can</c><00:00:28.560><c> deal</c><00:00:28.800><c> with</c><00:00:28.830><c> this</c>

00:00:29.060 --> 00:00:29.070 align:start position:0%
new way of how we can deal with this
 

00:00:29.070 --> 00:00:31.099 align:start position:0%
new way of how we can deal with this
specifically<00:00:29.609><c> how</c><00:00:30.060><c> we</c><00:00:30.090><c> can</c><00:00:30.359><c> deal</c><00:00:30.510><c> with</c><00:00:30.539><c> tuples</c>

00:00:31.099 --> 00:00:31.109 align:start position:0%
specifically how we can deal with tuples
 

00:00:31.109 --> 00:00:33.260 align:start position:0%
specifically how we can deal with tuples
and<00:00:31.439><c> pairs</c><00:00:31.859><c> and</c><00:00:32.160><c> returning</c><00:00:32.489><c> things</c><00:00:32.820><c> like</c><00:00:33.000><c> that</c>

00:00:33.260 --> 00:00:33.270 align:start position:0%
and pairs and returning things like that
 

00:00:33.270 --> 00:00:35.150 align:start position:0%
and pairs and returning things like that
because<00:00:33.930><c> structured</c><00:00:34.260><c> bindings</c><00:00:34.680><c> just</c><00:00:34.890><c> let</c><00:00:35.040><c> us</c>

00:00:35.150 --> 00:00:35.160 align:start position:0%
because structured bindings just let us
 

00:00:35.160 --> 00:00:36.860 align:start position:0%
because structured bindings just let us
kind<00:00:35.370><c> of</c><00:00:35.430><c> simplify</c><00:00:35.880><c> our</c><00:00:36.030><c> code</c><00:00:36.270><c> make</c><00:00:36.480><c> it</c><00:00:36.630><c> a</c><00:00:36.690><c> lot</c>

00:00:36.860 --> 00:00:36.870 align:start position:0%
kind of simplify our code make it a lot
 

00:00:36.870 --> 00:00:39.350 align:start position:0%
kind of simplify our code make it a lot
cleaner<00:00:37.170><c> than</c><00:00:37.469><c> what</c><00:00:37.920><c> it</c><00:00:38.040><c> was</c><00:00:38.219><c> in</c><00:00:38.489><c> the</c><00:00:38.550><c> past</c><00:00:39.000><c> in</c>

00:00:39.350 --> 00:00:39.360 align:start position:0%
cleaner than what it was in the past in
 

00:00:39.360 --> 00:00:40.610 align:start position:0%
cleaner than what it was in the past in
that<00:00:39.510><c> video</c><00:00:39.780><c> about</c><00:00:39.930><c> how</c><00:00:40.200><c> to</c><00:00:40.260><c> deal</c><00:00:40.440><c> with</c>

00:00:40.610 --> 00:00:40.620 align:start position:0%
that video about how to deal with
 

00:00:40.620 --> 00:00:42.709 align:start position:0%
that video about how to deal with
multiple<00:00:40.739><c> values</c><00:00:41.489><c> in</c><00:00:41.670><c> C++</c><00:00:42.329><c> I</c><00:00:42.480><c> did</c>

00:00:42.709 --> 00:00:42.719 align:start position:0%
multiple values in C++ I did
 

00:00:42.719 --> 00:00:44.930 align:start position:0%
multiple values in C++ I did
specifically<00:00:43.230><c> mention</c><00:00:43.739><c> that</c><00:00:43.890><c> I</c><00:00:43.920><c> like</c><00:00:44.250><c> structs</c>

00:00:44.930 --> 00:00:44.940 align:start position:0%
specifically mention that I like structs
 

00:00:44.940 --> 00:00:47.900 align:start position:0%
specifically mention that I like structs
and<00:00:45.210><c> I</c><00:00:45.239><c> like</c><00:00:45.450><c> to</c><00:00:45.600><c> return</c><00:00:45.950><c> basically</c><00:00:46.950><c> instances</c>

00:00:47.900 --> 00:00:47.910 align:start position:0%
and I like to return basically instances
 

00:00:47.910 --> 00:00:50.180 align:start position:0%
and I like to return basically instances
of<00:00:48.090><c> structs</c><00:00:48.870><c> which</c><00:00:49.020><c> contain</c><00:00:49.410><c> the</c><00:00:49.590><c> members</c><00:00:49.950><c> of</c>

00:00:50.180 --> 00:00:50.190 align:start position:0%
of structs which contain the members of
 

00:00:50.190 --> 00:00:51.979 align:start position:0%
of structs which contain the members of
data<00:00:50.460><c> that</c><00:00:50.700><c> I</c><00:00:50.730><c> actually</c><00:00:51.000><c> want</c><00:00:51.570><c> that's</c><00:00:51.809><c> how</c><00:00:51.960><c> I</c>

00:00:51.979 --> 00:00:51.989 align:start position:0%
data that I actually want that's how I
 

00:00:51.989 --> 00:00:53.900 align:start position:0%
data that I actually want that's how I
personally<00:00:52.410><c> like</c><00:00:52.800><c> dealing</c><00:00:53.190><c> with</c><00:00:53.219><c> multiple</c>

00:00:53.900 --> 00:00:53.910 align:start position:0%
personally like dealing with multiple
 

00:00:53.910 --> 00:00:56.689 align:start position:0%
personally like dealing with multiple
return<00:00:54.360><c> guys</c><00:00:54.510><c> that</c><00:00:55.260><c> could</c><00:00:55.710><c> have</c><00:00:55.949><c> potentially</c>

00:00:56.689 --> 00:00:56.699 align:start position:0%
return guys that could have potentially
 

00:00:56.699 --> 00:00:58.849 align:start position:0%
return guys that could have potentially
changed<00:00:57.270><c> with</c><00:00:57.780><c> this</c><00:00:58.050><c> introduction</c><00:00:58.590><c> of</c>

00:00:58.849 --> 00:00:58.859 align:start position:0%
changed with this introduction of
 

00:00:58.859 --> 00:01:00.560 align:start position:0%
changed with this introduction of
structured<00:00:59.280><c> bindings</c><00:00:59.730><c> and</c><00:00:59.850><c> in</c><00:00:59.940><c> fact</c><00:01:00.149><c> it</c><00:01:00.449><c> has</c>

00:01:00.560 --> 00:01:00.570 align:start position:0%
structured bindings and in fact it has
 

00:01:00.570 --> 00:01:02.510 align:start position:0%
structured bindings and in fact it has
changed<00:01:01.140><c> because</c><00:01:01.230><c> over</c><00:01:01.559><c> the</c><00:01:01.680><c> past</c><00:01:01.890><c> like</c><00:01:02.129><c> year</c>

00:01:02.510 --> 00:01:02.520 align:start position:0%
changed because over the past like year
 

00:01:02.520 --> 00:01:04.759 align:start position:0%
changed because over the past like year
or<00:01:02.670><c> two</c><00:01:02.910><c> really</c><00:01:03.149><c> in</c><00:01:03.420><c> my</c><00:01:03.899><c> own</c><00:01:04.049><c> code</c><00:01:04.320><c> I've</c><00:01:04.559><c> kind</c>

00:01:04.759 --> 00:01:04.769 align:start position:0%
or two really in my own code I've kind
 

00:01:04.769 --> 00:01:06.950 align:start position:0%
or two really in my own code I've kind
of<00:01:04.860><c> noticed</c><00:01:05.220><c> that</c><00:01:05.369><c> I've</c><00:01:05.519><c> been</c><00:01:05.549><c> using</c><00:01:06.360><c> tuples</c>

00:01:06.950 --> 00:01:06.960 align:start position:0%
of noticed that I've been using tuples
 

00:01:06.960 --> 00:01:09.500 align:start position:0%
of noticed that I've been using tuples
and<00:01:07.200><c> like</c><00:01:07.560><c> pairs</c><00:01:07.860><c> and</c><00:01:08.189><c> tires</c><00:01:08.580><c> and</c><00:01:08.820><c> I've</c><00:01:09.330><c> been</c>

00:01:09.500 --> 00:01:09.510 align:start position:0%
and like pairs and tires and I've been
 

00:01:09.510 --> 00:01:11.570 align:start position:0%
and like pairs and tires and I've been
using<00:01:09.750><c> that</c><00:01:10.049><c> kind</c><00:01:10.260><c> of</c><00:01:10.320><c> stuff</c><00:01:10.650><c> basically</c>

00:01:11.570 --> 00:01:11.580 align:start position:0%
using that kind of stuff basically
 

00:01:11.580 --> 00:01:13.460 align:start position:0%
using that kind of stuff basically
having<00:01:12.090><c> multiple</c><00:01:12.510><c> return</c><00:01:12.780><c> value</c><00:01:13.049><c> soaked</c><00:01:13.320><c> into</c>

00:01:13.460 --> 00:01:13.470 align:start position:0%
having multiple return value soaked into
 

00:01:13.470 --> 00:01:15.200 align:start position:0%
having multiple return value soaked into
like<00:01:13.650><c> a</c><00:01:13.680><c> tuple</c><00:01:14.130><c> I've</c><00:01:14.490><c> been</c><00:01:14.700><c> using</c><00:01:14.850><c> that</c><00:01:15.030><c> a</c><00:01:15.060><c> lot</c>

00:01:15.200 --> 00:01:15.210 align:start position:0%
like a tuple I've been using that a lot
 

00:01:15.210 --> 00:01:16.880 align:start position:0%
like a tuple I've been using that a lot
more<00:01:15.360><c> often</c><00:01:15.659><c> because</c><00:01:15.840><c> structured</c><00:01:16.409><c> bindings</c>

00:01:16.880 --> 00:01:16.890 align:start position:0%
more often because structured bindings
 

00:01:16.890 --> 00:01:19.219 align:start position:0%
more often because structured bindings
help<00:01:17.430><c> me</c><00:01:17.610><c> actually</c><00:01:17.880><c> make</c><00:01:18.360><c> my</c><00:01:18.570><c> code</c><00:01:18.840><c> still</c>

00:01:19.219 --> 00:01:19.229 align:start position:0%
help me actually make my code still
 

00:01:19.229 --> 00:01:20.870 align:start position:0%
help me actually make my code still
manageable<00:01:19.770><c> because</c><00:01:19.830><c> I</c><00:01:20.040><c> used</c><00:01:20.220><c> to</c><00:01:20.310><c> absolutely</c>

00:01:20.870 --> 00:01:20.880 align:start position:0%
manageable because I used to absolutely
 

00:01:20.880 --> 00:01:22.880 align:start position:0%
manageable because I used to absolutely
hate<00:01:21.240><c> what</c><00:01:21.780><c> it</c><00:01:21.900><c> was</c><00:01:22.049><c> like</c><00:01:22.200><c> before</c><00:01:22.439><c> in</c><00:01:22.770><c> fact</c>

00:01:22.880 --> 00:01:22.890 align:start position:0%
hate what it was like before in fact
 

00:01:22.890 --> 00:01:24.440 align:start position:0%
hate what it was like before in fact
let's<00:01:23.130><c> take</c><00:01:23.280><c> a</c><00:01:23.310><c> look</c><00:01:23.610><c> at</c><00:01:23.729><c> what</c><00:01:23.970><c> it</c><00:01:24.119><c> was</c><00:01:24.299><c> like</c>

00:01:24.440 --> 00:01:24.450 align:start position:0%
let's take a look at what it was like
 

00:01:24.450 --> 00:01:26.630 align:start position:0%
let's take a look at what it was like
before<00:01:24.689><c> so</c><00:01:25.380><c> I'm</c><00:01:25.590><c> gonna</c><00:01:25.710><c> write</c><00:01:25.950><c> a</c><00:01:25.979><c> very</c><00:01:26.310><c> simple</c>

00:01:26.630 --> 00:01:26.640 align:start position:0%
before so I'm gonna write a very simple
 

00:01:26.640 --> 00:01:27.980 align:start position:0%
before so I'm gonna write a very simple
example<00:01:26.759><c> just</c><00:01:27.270><c> running</c><00:01:27.450><c> it</c><00:01:27.509><c> from</c><00:01:27.689><c> scratch</c>

00:01:27.980 --> 00:01:27.990 align:start position:0%
example just running it from scratch
 

00:01:27.990 --> 00:01:29.450 align:start position:0%
example just running it from scratch
here<00:01:28.259><c> to</c><00:01:28.350><c> make</c><00:01:28.530><c> it</c><00:01:28.680><c> really</c><00:01:29.040><c> really</c><00:01:29.070><c> obvious</c>

00:01:29.450 --> 00:01:29.460 align:start position:0%
here to make it really really obvious
 

00:01:29.460 --> 00:01:30.950 align:start position:0%
here to make it really really obvious
and<00:01:29.970><c> what</c><00:01:30.060><c> I'll</c><00:01:30.180><c> do</c><00:01:30.299><c> here</c><00:01:30.509><c> is</c><00:01:30.570><c> just</c><00:01:30.810><c> write</c><00:01:30.930><c> a</c>

00:01:30.950 --> 00:01:30.960 align:start position:0%
and what I'll do here is just write a
 

00:01:30.960 --> 00:01:33.200 align:start position:0%
and what I'll do here is just write a
function<00:01:31.229><c> that</c><00:01:31.770><c> creates</c><00:01:31.950><c> a</c><00:01:32.369><c> person</c><00:01:33.000><c> now</c><00:01:33.180><c> a</c>

00:01:33.200 --> 00:01:33.210 align:start position:0%
function that creates a person now a
 

00:01:33.210 --> 00:01:34.969 align:start position:0%
function that creates a person now a
person<00:01:33.659><c> is</c><00:01:33.780><c> a</c><00:01:33.810><c> nice</c><00:01:34.049><c> example</c><00:01:34.259><c> because</c><00:01:34.619><c> you</c>

00:01:34.969 --> 00:01:34.979 align:start position:0%
person is a nice example because you
 

00:01:34.979 --> 00:01:36.679 align:start position:0%
person is a nice example because you
might<00:01:35.159><c> want</c><00:01:35.369><c> to</c><00:01:35.400><c> store</c><00:01:35.610><c> more</c><00:01:35.850><c> details</c><00:01:36.360><c> about</c><00:01:36.540><c> a</c>

00:01:36.679 --> 00:01:36.689 align:start position:0%
might want to store more details about a
 

00:01:36.689 --> 00:01:38.480 align:start position:0%
might want to store more details about a
person<00:01:37.140><c> than</c><00:01:37.290><c> just</c><00:01:37.500><c> for</c><00:01:37.650><c> example</c><00:01:38.070><c> their</c><00:01:38.250><c> name</c>

00:01:38.480 --> 00:01:38.490 align:start position:0%
person than just for example their name
 

00:01:38.490 --> 00:01:40.520 align:start position:0%
person than just for example their name
in<00:01:38.790><c> this</c><00:01:39.180><c> case</c><00:01:39.240><c> we'll</c><00:01:39.659><c> deal</c><00:01:39.900><c> with</c><00:01:39.930><c> their</c><00:01:40.350><c> name</c>

00:01:40.520 --> 00:01:40.530 align:start position:0%
in this case we'll deal with their name
 

00:01:40.530 --> 00:01:42.260 align:start position:0%
in this case we'll deal with their name
and<00:01:40.770><c> their</c><00:01:41.130><c> age</c><00:01:41.280><c> so</c><00:01:41.640><c> we'll</c><00:01:41.790><c> write</c><00:01:41.939><c> a</c><00:01:41.970><c> function</c>

00:01:42.260 --> 00:01:42.270 align:start position:0%
and their age so we'll write a function
 

00:01:42.270 --> 00:01:45.289 align:start position:0%
and their age so we'll write a function
called<00:01:42.630><c> create</c><00:01:43.500><c> person</c><00:01:44.250><c> we'll</c><00:01:44.880><c> need</c><00:01:44.970><c> to</c><00:01:45.090><c> set</c><00:01:45.270><c> a</c>

00:01:45.289 --> 00:01:45.299 align:start position:0%
called create person we'll need to set a
 

00:01:45.299 --> 00:01:47.420 align:start position:0%
called create person we'll need to set a
return<00:01:45.780><c> type</c><00:01:46.020><c> which</c><00:01:46.229><c> we</c><00:01:46.380><c> will</c><00:01:46.530><c> set</c><00:01:46.740><c> to</c><00:01:46.860><c> SCD</c>

00:01:47.420 --> 00:01:47.430 align:start position:0%
return type which we will set to SCD
 

00:01:47.430 --> 00:01:49.850 align:start position:0%
return type which we will set to SCD
tuple<00:01:47.939><c> and</c><00:01:48.119><c> this</c><00:01:48.869><c> is</c><00:01:49.020><c> gonna</c><00:01:49.140><c> contain</c><00:01:49.619><c> the</c>

00:01:49.850 --> 00:01:49.860 align:start position:0%
tuple and this is gonna contain the
 

00:01:49.860 --> 00:01:51.560 align:start position:0%
tuple and this is gonna contain the
actual<00:01:50.009><c> kind</c><00:01:50.460><c> of</c><00:01:50.549><c> multiple</c><00:01:50.970><c> return</c><00:01:51.270><c> values</c>

00:01:51.560 --> 00:01:51.570 align:start position:0%
actual kind of multiple return values
 

00:01:51.570 --> 00:01:53.420 align:start position:0%
actual kind of multiple return values
that<00:01:51.720><c> we</c><00:01:51.780><c> want</c><00:01:51.960><c> to</c><00:01:51.990><c> deal</c><00:01:52.290><c> with</c><00:01:52.500><c> in</c><00:01:52.710><c> this</c><00:01:53.189><c> case</c>

00:01:53.420 --> 00:01:53.430 align:start position:0%
that we want to deal with in this case
 

00:01:53.430 --> 00:01:55.999 align:start position:0%
that we want to deal with in this case
we'll<00:01:53.700><c> deal</c><00:01:53.909><c> with</c><00:01:54.119><c> a</c><00:01:54.149><c> string</c><00:01:54.689><c> for</c><00:01:54.990><c> the</c><00:01:55.170><c> name</c><00:01:55.710><c> of</c>

00:01:55.999 --> 00:01:56.009 align:start position:0%
we'll deal with a string for the name of
 

00:01:56.009 --> 00:01:58.459 align:start position:0%
we'll deal with a string for the name of
the<00:01:56.159><c> person</c><00:01:56.579><c> and</c><00:01:56.759><c> then</c><00:01:56.969><c> an</c><00:01:57.119><c> integer</c><00:01:57.450><c> for</c><00:01:57.869><c> their</c>

00:01:58.459 --> 00:01:58.469 align:start position:0%
the person and then an integer for their
 

00:01:58.469 --> 00:02:00.590 align:start position:0%
the person and then an integer for their
age<00:01:58.770><c> and</c><00:01:59.130><c> we'll</c><00:01:59.280><c> include</c><00:01:59.520><c> string</c><00:01:59.909><c> up</c><00:02:00.119><c> here</c><00:02:00.479><c> as</c>

00:02:00.590 --> 00:02:00.600 align:start position:0%
age and we'll include string up here as
 

00:02:00.600 --> 00:02:03.200 align:start position:0%
age and we'll include string up here as
well<00:02:01.560><c> and</c><00:02:01.890><c> of</c><00:02:02.520><c> course</c><00:02:02.549><c> we</c><00:02:02.850><c> don't</c><00:02:02.939><c> need</c><00:02:03.119><c> to</c>

00:02:03.200 --> 00:02:03.210 align:start position:0%
well and of course we don't need to
 

00:02:03.210 --> 00:02:05.330 align:start position:0%
well and of course we don't need to
actually<00:02:03.360><c> write</c><00:02:03.869><c> age</c><00:02:04.170><c> just</c><00:02:04.680><c> the</c><00:02:04.860><c> type</c><00:02:05.040><c> so</c><00:02:05.250><c> we</c>

00:02:05.330 --> 00:02:05.340 align:start position:0%
actually write age just the type so we
 

00:02:05.340 --> 00:02:07.700 align:start position:0%
actually write age just the type so we
have<00:02:05.520><c> a</c><00:02:05.549><c> string</c><00:02:05.909><c> and</c><00:02:06.119><c> int</c><00:02:06.540><c> over</c><00:02:07.110><c> here</c><00:02:07.500><c> we'll</c>

00:02:07.700 --> 00:02:07.710 align:start position:0%
have a string and int over here we'll
 

00:02:07.710 --> 00:02:09.770 align:start position:0%
have a string and int over here we'll
simply<00:02:08.129><c> return</c><00:02:08.459><c> in</c><00:02:08.910><c> this</c><00:02:09.030><c> case</c><00:02:09.300><c> will</c><00:02:09.509><c> be</c><00:02:09.539><c> nice</c>

00:02:09.770 --> 00:02:09.780 align:start position:0%
simply return in this case will be nice
 

00:02:09.780 --> 00:02:11.790 align:start position:0%
simply return in this case will be nice
and<00:02:09.810><c> simple</c><00:02:10.349><c> we'll</c><00:02:10.530><c> just</c><00:02:10.709><c> simply</c><00:02:10.830><c> return</c>

00:02:11.790 --> 00:02:11.800 align:start position:0%
and simple we'll just simply return
 

00:02:11.800 --> 00:02:14.850 align:start position:0%
and simple we'll just simply return
as<00:02:12.130><c> the</c><00:02:12.670><c> name</c><00:02:13.180><c> and</c><00:02:13.510><c> then</c><00:02:13.690><c> an</c><00:02:13.840><c> age</c><00:02:14.020><c> watch</c><00:02:14.320><c> for</c><00:02:14.710><c> my</c>

00:02:14.850 --> 00:02:14.860 align:start position:0%
as the name and then an age watch for my
 

00:02:14.860 --> 00:02:16.950 align:start position:0%
as the name and then an age watch for my
age<00:02:15.010><c> which</c><00:02:15.220><c> is</c><00:02:15.370><c> the</c><00:02:15.490><c> 24</c><00:02:16.090><c> so</c><00:02:16.390><c> now</c><00:02:16.570><c> we</c><00:02:16.630><c> have</c>

00:02:16.950 --> 00:02:16.960 align:start position:0%
age which is the 24 so now we have
 

00:02:16.960 --> 00:02:19.890 align:start position:0%
age which is the 24 so now we have
basically<00:02:17.350><c> a</c><00:02:17.830><c> mechanism</c><00:02:18.160><c> to</c><00:02:18.610><c> return</c><00:02:19.150><c> two</c>

00:02:19.890 --> 00:02:19.900 align:start position:0%
basically a mechanism to return two
 

00:02:19.900 --> 00:02:21.900 align:start position:0%
basically a mechanism to return two
different<00:02:20.410><c> types</c><00:02:20.620><c> of</c><00:02:20.770><c> data</c><00:02:20.950><c> a</c><00:02:21.100><c> string</c><00:02:21.520><c> and</c><00:02:21.700><c> an</c>

00:02:21.900 --> 00:02:21.910 align:start position:0%
different types of data a string and an
 

00:02:21.910 --> 00:02:23.640 align:start position:0%
different types of data a string and an
INT<00:02:22.270><c> without</c><00:02:22.660><c> having</c><00:02:23.050><c> to</c><00:02:23.200><c> like</c><00:02:23.350><c> create</c><00:02:23.530><c> a</c>

00:02:23.640 --> 00:02:23.650 align:start position:0%
INT without having to like create a
 

00:02:23.650 --> 00:02:25.080 align:start position:0%
INT without having to like create a
struct<00:02:23.980><c> or</c><00:02:24.100><c> anything</c><00:02:24.310><c> like</c><00:02:24.610><c> that</c><00:02:24.670><c> or</c><00:02:25.030><c> just</c>

00:02:25.080 --> 00:02:25.090 align:start position:0%
struct or anything like that or just
 

00:02:25.090 --> 00:02:27.030 align:start position:0%
struct or anything like that or just
like<00:02:25.390><c> pass</c><00:02:25.630><c> parameters</c><00:02:25.900><c> by</c><00:02:26.320><c> reference</c><00:02:26.860><c> or</c>

00:02:27.030 --> 00:02:27.040 align:start position:0%
like pass parameters by reference or
 

00:02:27.040 --> 00:02:29.310 align:start position:0%
like pass parameters by reference or
like<00:02:27.190><c> as</c><00:02:27.340><c> a</c><00:02:27.370><c> pointer</c><00:02:27.850><c> nice</c><00:02:28.450><c> and</c><00:02:28.750><c> simple</c><00:02:29.140><c> and</c>

00:02:29.310 --> 00:02:29.320 align:start position:0%
like as a pointer nice and simple and
 

00:02:29.320 --> 00:02:30.780 align:start position:0%
like as a pointer nice and simple and
clean<00:02:29.650><c> of</c><00:02:29.800><c> course</c><00:02:29.920><c> in</c><00:02:30.100><c> this</c><00:02:30.190><c> case</c><00:02:30.370><c> you</c><00:02:30.580><c> could</c>

00:02:30.780 --> 00:02:30.790 align:start position:0%
clean of course in this case you could
 

00:02:30.790 --> 00:02:32.310 align:start position:0%
clean of course in this case you could
just<00:02:31.030><c> use</c><00:02:31.150><c> a</c><00:02:31.180><c> pair</c><00:02:31.540><c> because</c><00:02:31.870><c> there</c><00:02:32.050><c> are</c><00:02:32.140><c> two</c>

00:02:32.310 --> 00:02:32.320 align:start position:0%
just use a pair because there are two
 

00:02:32.320 --> 00:02:33.840 align:start position:0%
just use a pair because there are two
variables<00:02:32.650><c> that</c><00:02:32.860><c> this</c><00:02:33.100><c> actual</c><00:02:33.640><c> data</c>

00:02:33.840 --> 00:02:33.850 align:start position:0%
variables that this actual data
 

00:02:33.850 --> 00:02:35.520 align:start position:0%
variables that this actual data
structure<00:02:34.270><c> is</c><00:02:34.420><c> holding</c><00:02:34.840><c> however</c><00:02:35.320><c> with</c><00:02:35.470><c> the</c>

00:02:35.520 --> 00:02:35.530 align:start position:0%
structure is holding however with the
 

00:02:35.530 --> 00:02:37.290 align:start position:0%
structure is holding however with the
tuple<00:02:35.860><c> you</c><00:02:35.950><c> can</c><00:02:36.160><c> of</c><00:02:36.280><c> course</c><00:02:36.310><c> expand</c><00:02:36.970><c> this</c><00:02:37.120><c> to</c>

00:02:37.290 --> 00:02:37.300 align:start position:0%
tuple you can of course expand this to
 

00:02:37.300 --> 00:02:39.210 align:start position:0%
tuple you can of course expand this to
containers<00:02:37.870><c> basically</c><00:02:38.410><c> as</c><00:02:38.470><c> many</c><00:02:38.710><c> values</c><00:02:38.860><c> as</c>

00:02:39.210 --> 00:02:39.220 align:start position:0%
containers basically as many values as
 

00:02:39.220 --> 00:02:42.180 align:start position:0%
containers basically as many values as
you<00:02:39.610><c> want</c><00:02:39.970><c> so</c><00:02:40.240><c> the</c><00:02:40.930><c> in</c><00:02:41.110><c> previous</c><00:02:41.710><c> versions</c><00:02:42.070><c> of</c>

00:02:42.180 --> 00:02:42.190 align:start position:0%
you want so the in previous versions of
 

00:02:42.190 --> 00:02:44.310 align:start position:0%
you want so the in previous versions of
C++<00:02:42.760><c> you</c><00:02:43.120><c> had</c><00:02:43.300><c> a</c><00:02:43.330><c> few</c><00:02:43.630><c> options</c><00:02:43.990><c> for</c><00:02:44.170><c> how</c><00:02:44.290><c> you</c>

00:02:44.310 --> 00:02:44.320 align:start position:0%
C++ you had a few options for how you
 

00:02:44.320 --> 00:02:45.780 align:start position:0%
C++ you had a few options for how you
would<00:02:44.590><c> deal</c><00:02:44.830><c> with</c><00:02:45.010><c> this</c><00:02:45.160><c> well</c><00:02:45.430><c> write</c><00:02:45.610><c> some</c>

00:02:45.780 --> 00:02:45.790 align:start position:0%
would deal with this well write some
 

00:02:45.790 --> 00:02:47.340 align:start position:0%
would deal with this well write some
code<00:02:45.970><c> to</c><00:02:46.120><c> kind</c><00:02:46.300><c> of</c><00:02:46.360><c> show</c><00:02:46.540><c> that</c><00:02:46.570><c> so</c><00:02:46.960><c> I'll</c><00:02:47.170><c> write</c>

00:02:47.340 --> 00:02:47.350 align:start position:0%
code to kind of show that so I'll write
 

00:02:47.350 --> 00:02:50.340 align:start position:0%
code to kind of show that so I'll write
STD<00:02:47.830><c> tuple</c><00:02:48.280><c> string</c><00:02:49.090><c> and</c><00:02:49.420><c> and</c><00:02:49.870><c> you</c><00:02:50.110><c> can</c><00:02:50.230><c> see</c>

00:02:50.340 --> 00:02:50.350 align:start position:0%
STD tuple string and and you can see
 

00:02:50.350 --> 00:02:51.840 align:start position:0%
STD tuple string and and you can see
already<00:02:50.500><c> the</c><00:02:50.710><c> type</c><00:02:51.010><c> is</c><00:02:51.220><c> a</c><00:02:51.250><c> little</c><00:02:51.580><c> bit</c><00:02:51.700><c> messy</c>

00:02:51.840 --> 00:02:51.850 align:start position:0%
already the type is a little bit messy
 

00:02:51.850 --> 00:02:53.670 align:start position:0%
already the type is a little bit messy
but<00:02:52.210><c> we'll</c><00:02:52.300><c> have</c><00:02:52.390><c> our</c><00:02:52.570><c> person</c><00:02:53.020><c> here</c><00:02:53.230><c> then</c>

00:02:53.670 --> 00:02:53.680 align:start position:0%
but we'll have our person here then
 

00:02:53.680 --> 00:02:55.260 align:start position:0%
but we'll have our person here then
we'll<00:02:53.830><c> set</c><00:02:54.040><c> that</c><00:02:54.070><c> equal</c><00:02:54.220><c> to</c><00:02:54.460><c> create</c><00:02:54.850><c> person</c>

00:02:55.260 --> 00:02:55.270 align:start position:0%
we'll set that equal to create person
 

00:02:55.270 --> 00:02:57.060 align:start position:0%
we'll set that equal to create person
now<00:02:55.630><c> to</c><00:02:55.690><c> simplify</c><00:02:56.080><c> this</c><00:02:56.290><c> a</c><00:02:56.470><c> little</c><00:02:56.590><c> bit</c><00:02:56.800><c> more</c>

00:02:57.060 --> 00:02:57.070 align:start position:0%
now to simplify this a little bit more
 

00:02:57.070 --> 00:02:58.920 align:start position:0%
now to simplify this a little bit more
you<00:02:57.340><c> can</c><00:02:57.580><c> just</c><00:02:57.790><c> use</c><00:02:57.940><c> order</c><00:02:58.270><c> here</c><00:02:58.480><c> in</c><00:02:58.660><c> fact</c>

00:02:58.920 --> 00:02:58.930 align:start position:0%
you can just use order here in fact
 

00:02:58.930 --> 00:03:00.450 align:start position:0%
you can just use order here in fact
that's<00:02:59.140><c> what</c><00:02:59.410><c> I</c><00:02:59.440><c> probably</c><00:02:59.740><c> would</c><00:03:00.070><c> do</c><00:03:00.220><c> in</c><00:03:00.340><c> this</c>

00:03:00.450 --> 00:03:00.460 align:start position:0%
that's what I probably would do in this
 

00:03:00.460 --> 00:03:02.460 align:start position:0%
that's what I probably would do in this
case<00:03:00.700><c> but</c><00:03:01.210><c> now</c><00:03:01.360><c> we</c><00:03:01.420><c> have</c><00:03:01.750><c> the</c><00:03:01.990><c> task</c><00:03:02.260><c> of</c>

00:03:02.460 --> 00:03:02.470 align:start position:0%
case but now we have the task of
 

00:03:02.470 --> 00:03:04.500 align:start position:0%
case but now we have the task of
accessing<00:03:03.160><c> the</c><00:03:03.310><c> data</c><00:03:03.550><c> and</c><00:03:03.850><c> this</c><00:03:03.970><c> is</c><00:03:04.150><c> where</c><00:03:04.360><c> it</c>

00:03:04.500 --> 00:03:04.510 align:start position:0%
accessing the data and this is where it
 

00:03:04.510 --> 00:03:07.230 align:start position:0%
accessing the data and this is where it
gets<00:03:04.660><c> really</c><00:03:05.050><c> really</c><00:03:05.230><c> annoying</c><00:03:05.890><c> so</c><00:03:06.550><c> basically</c>

00:03:07.230 --> 00:03:07.240 align:start position:0%
gets really really annoying so basically
 

00:03:07.240 --> 00:03:08.880 align:start position:0%
gets really really annoying so basically
the<00:03:07.450><c> way</c><00:03:07.480><c> that</c><00:03:07.720><c> you</c><00:03:07.810><c> can't</c><00:03:08.020><c> just</c><00:03:08.170><c> do</c><00:03:08.350><c> person</c>

00:03:08.880 --> 00:03:08.890 align:start position:0%
the way that you can't just do person
 

00:03:08.890 --> 00:03:11.670 align:start position:0%
the way that you can't just do person
dot<00:03:09.160><c> you</c><00:03:09.700><c> know</c><00:03:09.820><c> name</c><00:03:10.090><c> as</c><00:03:10.360><c> if</c><00:03:10.510><c> it</c><00:03:10.660><c> was</c><00:03:10.930><c> a</c><00:03:11.260><c> struct</c>

00:03:11.670 --> 00:03:11.680 align:start position:0%
dot you know name as if it was a struct
 

00:03:11.680 --> 00:03:14.820 align:start position:0%
dot you know name as if it was a struct
you<00:03:11.890><c> have</c><00:03:12.100><c> to</c><00:03:12.310><c> use</c><00:03:12.640><c> STD</c><00:03:13.210><c> get</c><00:03:13.570><c> and</c><00:03:13.840><c> then</c><00:03:14.380><c> as</c><00:03:14.650><c> a</c>

00:03:14.820 --> 00:03:14.830 align:start position:0%
you have to use STD get and then as a
 

00:03:14.830 --> 00:03:17.130 align:start position:0%
you have to use STD get and then as a
template<00:03:15.310><c> argument</c><00:03:15.850><c> the</c><00:03:16.060><c> index</c><00:03:16.540><c> of</c><00:03:16.810><c> the</c><00:03:16.959><c> data</c>

00:03:17.130 --> 00:03:17.140 align:start position:0%
template argument the index of the data
 

00:03:17.140 --> 00:03:18.449 align:start position:0%
template argument the index of the data
you<00:03:17.260><c> want</c><00:03:17.380><c> to</c><00:03:17.440><c> get</c><00:03:17.590><c> so</c><00:03:17.740><c> zero</c><00:03:18.130><c> for</c><00:03:18.430><c> example</c>

00:03:18.449 --> 00:03:18.459 align:start position:0%
you want to get so zero for example
 

00:03:18.459 --> 00:03:21.449 align:start position:0%
you want to get so zero for example
would<00:03:19.300><c> return</c><00:03:19.690><c> the</c><00:03:20.260><c> name</c><00:03:20.470><c> the</c><00:03:20.860><c> first</c><00:03:21.130><c> variable</c>

00:03:21.449 --> 00:03:21.459 align:start position:0%
would return the name the first variable
 

00:03:21.459 --> 00:03:24.000 align:start position:0%
would return the name the first variable
which<00:03:21.700><c> is</c><00:03:21.850><c> a</c><00:03:21.880><c> string</c><00:03:22.300><c> and</c><00:03:22.510><c> then</c><00:03:22.780><c> if</c><00:03:23.050><c> I</c><00:03:23.470><c> used</c><00:03:23.709><c> one</c>

00:03:24.000 --> 00:03:24.010 align:start position:0%
which is a string and then if I used one
 

00:03:24.010 --> 00:03:25.380 align:start position:0%
which is a string and then if I used one
here<00:03:24.280><c> that</c><00:03:24.459><c> would</c><00:03:24.640><c> return</c><00:03:24.790><c> the</c><00:03:24.970><c> age</c><00:03:25.209><c> so</c>

00:03:25.380 --> 00:03:25.390 align:start position:0%
here that would return the age so
 

00:03:25.390 --> 00:03:26.790 align:start position:0%
here that would return the age so
basically<00:03:25.630><c> to</c><00:03:25.810><c> get</c><00:03:25.990><c> this</c><00:03:26.200><c> and</c><00:03:26.470><c> you</c><00:03:26.530><c> put</c><00:03:26.680><c> the</c>

00:03:26.790 --> 00:03:26.800 align:start position:0%
basically to get this and you put the
 

00:03:26.800 --> 00:03:29.730 align:start position:0%
basically to get this and you put the
actual<00:03:27.250><c> variable</c><00:03:27.880><c> as</c><00:03:28.030><c> a</c><00:03:28.690><c> parameter</c><00:03:29.140><c> here</c><00:03:29.560><c> so</c>

00:03:29.730 --> 00:03:29.740 align:start position:0%
actual variable as a parameter here so
 

00:03:29.740 --> 00:03:31.860 align:start position:0%
actual variable as a parameter here so
to<00:03:29.800><c> get</c><00:03:30.070><c> the</c><00:03:30.250><c> actual</c><00:03:30.550><c> string</c><00:03:31.150><c> which</c><00:03:31.690><c> is</c><00:03:31.720><c> the</c>

00:03:31.860 --> 00:03:31.870 align:start position:0%
to get the actual string which is the
 

00:03:31.870 --> 00:03:33.990 align:start position:0%
to get the actual string which is the
name<00:03:32.140><c> I'd</c><00:03:32.380><c> have</c><00:03:32.530><c> to</c><00:03:32.650><c> write</c><00:03:33.100><c> code</c><00:03:33.130><c> like</c><00:03:33.550><c> this</c><00:03:33.730><c> or</c>

00:03:33.990 --> 00:03:34.000 align:start position:0%
name I'd have to write code like this or
 

00:03:34.000 --> 00:03:35.400 align:start position:0%
name I'd have to write code like this or
you<00:03:34.060><c> can</c><00:03:34.180><c> use</c><00:03:34.240><c> auto</c><00:03:34.570><c> of</c><00:03:34.720><c> course</c><00:03:34.959><c> and</c><00:03:35.170><c> then</c><00:03:35.380><c> the</c>

00:03:35.400 --> 00:03:35.410 align:start position:0%
you can use auto of course and then the
 

00:03:35.410 --> 00:03:37.350 align:start position:0%
you can use auto of course and then the
age<00:03:35.650><c> as</c><00:03:36.010><c> well</c><00:03:36.280><c> would</c><00:03:36.550><c> look</c><00:03:36.790><c> a</c><00:03:36.970><c> little</c><00:03:37.120><c> bit</c>

00:03:37.350 --> 00:03:37.360 align:start position:0%
age as well would look a little bit
 

00:03:37.360 --> 00:03:39.300 align:start position:0%
age as well would look a little bit
cryptic<00:03:37.810><c> and</c><00:03:37.990><c> it</c><00:03:38.530><c> would</c><00:03:38.650><c> basically</c><00:03:38.830><c> be</c><00:03:39.070><c> the</c>

00:03:39.300 --> 00:03:39.310 align:start position:0%
cryptic and it would basically be the
 

00:03:39.310 --> 00:03:41.310 align:start position:0%
cryptic and it would basically be the
same<00:03:39.520><c> with</c><00:03:39.730><c> sed</c><00:03:40.240><c> get</c><00:03:40.480><c> one</c><00:03:40.780><c> and</c><00:03:40.990><c> this</c><00:03:41.110><c> is</c><00:03:41.170><c> a</c>

00:03:41.310 --> 00:03:41.320 align:start position:0%
same with sed get one and this is a
 

00:03:41.320 --> 00:03:43.620 align:start position:0%
same with sed get one and this is a
little<00:03:41.830><c> bit</c><00:03:42.040><c> well</c><00:03:42.520><c> it's</c><00:03:42.700><c> it's</c><00:03:43.000><c> just</c><00:03:43.180><c> not</c><00:03:43.300><c> nice</c>

00:03:43.620 --> 00:03:43.630 align:start position:0%
little bit well it's it's just not nice
 

00:03:43.630 --> 00:03:45.600 align:start position:0%
little bit well it's it's just not nice
I<00:03:43.930><c> probably</c><00:03:44.170><c> would</c><00:03:44.500><c> never</c><00:03:44.740><c> use</c><00:03:45.040><c> a</c><00:03:45.070><c> triple</c><00:03:45.490><c> for</c>

00:03:45.600 --> 00:03:45.610 align:start position:0%
I probably would never use a triple for
 

00:03:45.610 --> 00:03:46.980 align:start position:0%
I probably would never use a triple for
this<00:03:45.760><c> case</c><00:03:45.970><c> now</c><00:03:46.300><c> there</c><00:03:46.450><c> is</c><00:03:46.570><c> something</c><00:03:46.840><c> called</c>

00:03:46.980 --> 00:03:46.990 align:start position:0%
this case now there is something called
 

00:03:46.990 --> 00:03:49.740 align:start position:0%
this case now there is something called
STD<00:03:47.590><c> tie</c><00:03:47.890><c> which</c><00:03:48.370><c> is</c><00:03:48.670><c> a</c><00:03:48.700><c> little</c><00:03:49.090><c> bit</c><00:03:49.209><c> nicer</c><00:03:49.420><c> than</c>

00:03:49.740 --> 00:03:49.750 align:start position:0%
STD tie which is a little bit nicer than
 

00:03:49.750 --> 00:03:51.810 align:start position:0%
STD tie which is a little bit nicer than
this<00:03:49.930><c> you</c><00:03:50.410><c> still</c><00:03:50.680><c> have</c><00:03:50.980><c> to</c><00:03:51.190><c> actually</c><00:03:51.610><c> create</c>

00:03:51.810 --> 00:03:51.820 align:start position:0%
this you still have to actually create
 

00:03:51.820 --> 00:03:55.320 align:start position:0%
this you still have to actually create
true<00:03:52.540><c> variables</c><00:03:53.050><c> so</c><00:03:53.260><c> name</c><00:03:53.560><c> and</c><00:03:53.830><c> age</c><00:03:54.490><c> over</c><00:03:55.060><c> here</c>

00:03:55.320 --> 00:03:55.330 align:start position:0%
true variables so name and age over here
 

00:03:55.330 --> 00:03:57.480 align:start position:0%
true variables so name and age over here
but<00:03:55.720><c> what</c><00:03:55.990><c> you</c><00:03:56.020><c> can</c><00:03:56.260><c> actually</c><00:03:56.680><c> do</c><00:03:56.890><c> is</c><00:03:57.160><c> just</c>

00:03:57.480 --> 00:03:57.490 align:start position:0%
but what you can actually do is just
 

00:03:57.490 --> 00:03:59.880 align:start position:0%
but what you can actually do is just
pass<00:03:57.700><c> them</c><00:03:57.910><c> in</c><00:03:58.090><c> here</c><00:03:58.360><c> they</c><00:03:58.600><c> get</c><00:03:58.750><c> passed</c><00:03:59.020><c> in</c><00:03:59.260><c> by</c>

00:03:59.880 --> 00:03:59.890 align:start position:0%
pass them in here they get passed in by
 

00:03:59.890 --> 00:04:01.949 align:start position:0%
pass them in here they get passed in by
a<00:03:59.920><c> reference</c><00:04:00.670><c> name</c><00:04:01.030><c> an</c><00:04:01.180><c> age</c><00:04:01.390><c> and</c><00:04:01.600><c> then</c><00:04:01.690><c> just</c>

00:04:01.949 --> 00:04:01.959 align:start position:0%
a reference name an age and then just
 

00:04:01.959 --> 00:04:04.470 align:start position:0%
a reference name an age and then just
set<00:04:02.140><c> this</c><00:04:02.320><c> equal</c><00:04:02.740><c> to</c><00:04:02.800><c> create</c><00:04:03.310><c> person</c><00:04:03.790><c> and</c><00:04:03.970><c> this</c>

00:04:04.470 --> 00:04:04.480 align:start position:0%
set this equal to create person and this
 

00:04:04.480 --> 00:04:06.360 align:start position:0%
set this equal to create person and this
is<00:04:04.630><c> a</c><00:04:04.660><c> little</c><00:04:04.870><c> bit</c><00:04:05.110><c> nicer</c><00:04:05.290><c> than</c><00:04:05.920><c> all</c><00:04:06.040><c> of</c><00:04:06.160><c> this</c>

00:04:06.360 --> 00:04:06.370 align:start position:0%
is a little bit nicer than all of this
 

00:04:06.370 --> 00:04:07.590 align:start position:0%
is a little bit nicer than all of this
of<00:04:06.610><c> course</c><00:04:06.790><c> we</c><00:04:06.910><c> don't</c><00:04:07.000><c> have</c><00:04:07.120><c> our</c><00:04:07.330><c> actual</c>

00:04:07.590 --> 00:04:07.600 align:start position:0%
of course we don't have our actual
 

00:04:07.600 --> 00:04:09.390 align:start position:0%
of course we don't have our actual
person<00:04:08.050><c> variable</c><00:04:08.380><c> because</c><00:04:08.650><c> we</c><00:04:08.920><c> don't</c><00:04:09.100><c> there</c>

00:04:09.390 --> 00:04:09.400 align:start position:0%
person variable because we don't there
 

00:04:09.400 --> 00:04:10.949 align:start position:0%
person variable because we don't there
is<00:04:09.430><c> no</c><00:04:09.730><c> person</c><00:04:10.150><c> right</c><00:04:10.330><c> it's</c><00:04:10.450><c> not</c><00:04:10.570><c> like</c><00:04:10.630><c> it's</c><00:04:10.870><c> a</c>

00:04:10.949 --> 00:04:10.959 align:start position:0%
is no person right it's not like it's a
 

00:04:10.959 --> 00:04:13.020 align:start position:0%
is no person right it's not like it's a
struct<00:04:11.350><c> it's</c><00:04:11.800><c> not</c><00:04:12.010><c> like</c><00:04:12.160><c> it's</c><00:04:12.340><c> its</c><00:04:12.489><c> own</c><00:04:12.610><c> type</c>

00:04:13.020 --> 00:04:13.030 align:start position:0%
struct it's not like it's its own type
 

00:04:13.030 --> 00:04:15.479 align:start position:0%
struct it's not like it's its own type
it<00:04:13.300><c> is</c><00:04:13.780><c> just</c><00:04:14.020><c> a</c><00:04:14.110><c> container</c><00:04:14.590><c> a</c><00:04:14.860><c> tuple</c><00:04:15.280><c> in</c><00:04:15.340><c> this</c>

00:04:15.479 --> 00:04:15.489 align:start position:0%
it is just a container a tuple in this
 

00:04:15.489 --> 00:04:17.820 align:start position:0%
it is just a container a tuple in this
case<00:04:15.670><c> that</c><00:04:15.850><c> holds</c><00:04:16.120><c> what</c><00:04:16.900><c> we</c><00:04:17.049><c> want</c><00:04:17.320><c> which</c><00:04:17.500><c> is</c><00:04:17.680><c> a</c>

00:04:17.820 --> 00:04:17.830 align:start position:0%
case that holds what we want which is a
 

00:04:17.830 --> 00:04:20.729 align:start position:0%
case that holds what we want which is a
string<00:04:18.220><c> and</c><00:04:18.400><c> an</c><00:04:18.669><c> int</c><00:04:18.970><c> so</c><00:04:19.480><c> this</c><00:04:19.989><c> does</c><00:04:20.320><c> look</c><00:04:20.530><c> a</c>

00:04:20.729 --> 00:04:20.739 align:start position:0%
string and an int so this does look a
 

00:04:20.739 --> 00:04:23.460 align:start position:0%
string and an int so this does look a
bit<00:04:21.010><c> nicer</c><00:04:21.220><c> and</c><00:04:21.760><c> I</c><00:04:22.240><c> would</c><00:04:22.690><c> probably</c><00:04:22.840><c> be</c><00:04:23.140><c> a</c>

00:04:23.460 --> 00:04:23.470 align:start position:0%
bit nicer and I would probably be a
 

00:04:23.470 --> 00:04:24.780 align:start position:0%
bit nicer and I would probably be a
little<00:04:23.590><c> bit</c><00:04:23.740><c> more</c><00:04:23.860><c> inclined</c><00:04:24.130><c> to</c><00:04:24.340><c> do</c><00:04:24.460><c> it</c><00:04:24.580><c> this</c>

00:04:24.780 --> 00:04:24.790 align:start position:0%
little bit more inclined to do it this
 

00:04:24.790 --> 00:04:25.530 align:start position:0%
little bit more inclined to do it this
way<00:04:25.090><c> how</c>

00:04:25.530 --> 00:04:25.540 align:start position:0%
way how
 

00:04:25.540 --> 00:04:27.420 align:start position:0%
way how
whether<00:04:25.690><c> it</c><00:04:25.930><c> still</c><00:04:26.200><c> takes</c><00:04:26.590><c> up</c><00:04:26.830><c> like</c><00:04:27.100><c> three</c>

00:04:27.420 --> 00:04:27.430 align:start position:0%
whether it still takes up like three
 

00:04:27.430 --> 00:04:28.950 align:start position:0%
whether it still takes up like three
lines<00:04:27.580><c> of</c><00:04:27.790><c> code</c><00:04:27.850><c> it</c><00:04:28.300><c> still</c><00:04:28.510><c> does</c><00:04:28.660><c> not</c><00:04:28.810><c> look</c>

00:04:28.950 --> 00:04:28.960 align:start position:0%
lines of code it still does not look
 

00:04:28.960 --> 00:04:31.440 align:start position:0%
lines of code it still does not look
nice<00:04:29.290><c> and</c><00:04:29.590><c> I</c><00:04:29.740><c> still</c><00:04:30.040><c> probably</c><00:04:30.340><c> would</c><00:04:30.760><c> use</c><00:04:31.420><c> a</c>

00:04:31.440 --> 00:04:31.450 align:start position:0%
nice and I still probably would use a
 

00:04:31.450 --> 00:04:33.980 align:start position:0%
nice and I still probably would use a
struct<00:04:32.110><c> and</c><00:04:32.320><c> just</c><00:04:32.830><c> basically</c><00:04:33.280><c> create</c><00:04:33.640><c> a</c>

00:04:33.980 --> 00:04:33.990 align:start position:0%
struct and just basically create a
 

00:04:33.990 --> 00:04:36.930 align:start position:0%
struct and just basically create a
person<00:04:34.990><c> so</c><00:04:35.560><c> that</c><00:04:35.590><c> then</c><00:04:35.890><c> I</c><00:04:35.920><c> could</c><00:04:36.040><c> return</c><00:04:36.610><c> that</c>

00:04:36.930 --> 00:04:36.940 align:start position:0%
person so that then I could return that
 

00:04:36.940 --> 00:04:38.700 align:start position:0%
person so that then I could return that
and<00:04:37.120><c> then</c><00:04:37.420><c> obviously</c><00:04:37.540><c> just</c><00:04:37.960><c> access</c><00:04:38.380><c> it</c><00:04:38.560><c> by</c>

00:04:38.700 --> 00:04:38.710 align:start position:0%
and then obviously just access it by
 

00:04:38.710 --> 00:04:41.010 align:start position:0%
and then obviously just access it by
person<00:04:39.130><c> name</c><00:04:39.520><c> and</c><00:04:39.760><c> person</c><00:04:40.120><c> till</c><00:04:40.270><c> age</c><00:04:40.420><c> as</c><00:04:40.660><c> I</c>

00:04:41.010 --> 00:04:41.020 align:start position:0%
person name and person till age as I
 

00:04:41.020 --> 00:04:43.410 align:start position:0%
person name and person till age as I
showed<00:04:41.350><c> in</c><00:04:41.380><c> that</c><00:04:41.650><c> C++</c><00:04:42.640><c> video</c><00:04:42.910><c> about</c><00:04:43.060><c> multiple</c>

00:04:43.410 --> 00:04:43.420 align:start position:0%
showed in that C++ video about multiple
 

00:04:43.420 --> 00:04:45.180 align:start position:0%
showed in that C++ video about multiple
return<00:04:43.720><c> types</c><00:04:43.990><c> now</c><00:04:44.500><c> this</c><00:04:44.680><c> is</c><00:04:44.830><c> the</c><00:04:44.890><c> part</c><00:04:45.130><c> that</c>

00:04:45.180 --> 00:04:45.190 align:start position:0%
return types now this is the part that
 

00:04:45.190 --> 00:04:46.530 align:start position:0%
return types now this is the part that
you've<00:04:45.340><c> been</c><00:04:45.430><c> waiting</c><00:04:45.670><c> for</c><00:04:45.820><c> this</c><00:04:46.060><c> is</c><00:04:46.270><c> where</c>

00:04:46.530 --> 00:04:46.540 align:start position:0%
you've been waiting for this is where
 

00:04:46.540 --> 00:04:48.450 align:start position:0%
you've been waiting for this is where
C++<00:04:47.080><c> 17</c><00:04:47.500><c> brings</c><00:04:47.740><c> us</c><00:04:47.890><c> a</c><00:04:47.920><c> new</c><00:04:48.100><c> feature</c><00:04:48.340><c> called</c>

00:04:48.450 --> 00:04:48.460 align:start position:0%
C++ 17 brings us a new feature called
 

00:04:48.460 --> 00:04:50.400 align:start position:0%
C++ 17 brings us a new feature called
structured<00:04:49.030><c> bindings</c><00:04:49.450><c> that</c><00:04:49.750><c> solves</c><00:04:50.260><c> all</c>

00:04:50.400 --> 00:04:50.410 align:start position:0%
structured bindings that solves all
 

00:04:50.410 --> 00:04:52.080 align:start position:0%
structured bindings that solves all
these<00:04:50.710><c> problems</c><00:04:50.770><c> and</c><00:04:51.340><c> makes</c><00:04:51.550><c> our</c><00:04:51.730><c> code</c><00:04:51.910><c> look</c>

00:04:52.080 --> 00:04:52.090 align:start position:0%
these problems and makes our code look
 

00:04:52.090 --> 00:04:54.180 align:start position:0%
these problems and makes our code look
really<00:04:52.630><c> nice</c><00:04:52.780><c> instead</c><00:04:53.530><c> of</c><00:04:53.620><c> doing</c><00:04:53.830><c> all</c><00:04:53.920><c> of</c><00:04:53.980><c> this</c>

00:04:54.180 --> 00:04:54.190 align:start position:0%
really nice instead of doing all of this
 

00:04:54.190 --> 00:04:57.480 align:start position:0%
really nice instead of doing all of this
I<00:04:54.430><c> will</c><00:04:54.490><c> raise</c><00:04:54.790><c> my</c><00:04:54.820><c> person</c><00:04:55.510><c> up</c><00:04:55.690><c> here</c><00:04:56.490><c> instead</c>

00:04:57.480 --> 00:04:57.490 align:start position:0%
I will raise my person up here instead
 

00:04:57.490 --> 00:04:59.190 align:start position:0%
I will raise my person up here instead
of<00:04:57.610><c> doing</c><00:04:57.790><c> all</c><00:04:58.120><c> this</c><00:04:58.300><c> we</c><00:04:58.450><c> still</c><00:04:58.630><c> keep</c><00:04:58.870><c> this</c><00:04:58.990><c> as</c>

00:04:59.190 --> 00:04:59.200 align:start position:0%
of doing all this we still keep this as
 

00:04:59.200 --> 00:05:01.170 align:start position:0%
of doing all this we still keep this as
a<00:04:59.260><c> tuple</c><00:04:59.650><c> we</c><00:04:59.980><c> don't</c><00:05:00.160><c> need</c><00:05:00.280><c> STD</c><00:05:00.700><c> tie</c><00:05:00.940><c> or</c>

00:05:01.170 --> 00:05:01.180 align:start position:0%
a tuple we don't need STD tie or
 

00:05:01.180 --> 00:05:03.450 align:start position:0%
a tuple we don't need STD tie or
anything<00:05:01.720><c> like</c><00:05:01.930><c> that</c><00:05:01.990><c> all</c><00:05:02.410><c> we</c><00:05:02.830><c> need</c><00:05:03.010><c> to</c><00:05:03.130><c> do</c><00:05:03.280><c> we</c>

00:05:03.450 --> 00:05:03.460 align:start position:0%
anything like that all we need to do we
 

00:05:03.460 --> 00:05:04.620 align:start position:0%
anything like that all we need to do we
can<00:05:03.490><c> get</c><00:05:03.790><c> rid</c><00:05:03.940><c> of</c><00:05:03.970><c> these</c><00:05:04.090><c> two</c><00:05:04.270><c> lines</c><00:05:04.480><c> of</c><00:05:04.570><c> code</c>

00:05:04.620 --> 00:05:04.630 align:start position:0%
can get rid of these two lines of code
 

00:05:04.630 --> 00:05:07.140 align:start position:0%
can get rid of these two lines of code
all<00:05:04.930><c> we</c><00:05:05.080><c> need</c><00:05:05.230><c> to</c><00:05:05.260><c> do</c><00:05:05.500><c> is</c><00:05:05.800><c> use</c><00:05:06.190><c> the</c><00:05:06.550><c> word</c><00:05:06.820><c> author</c>

00:05:07.140 --> 00:05:07.150 align:start position:0%
all we need to do is use the word author
 

00:05:07.150 --> 00:05:10.290 align:start position:0%
all we need to do is use the word author
followed<00:05:07.690><c> by</c><00:05:08.050><c> the</c><00:05:08.680><c> two</c><00:05:09.010><c> names</c><00:05:09.610><c> that</c><00:05:09.820><c> we</c><00:05:10.030><c> give</c>

00:05:10.290 --> 00:05:10.300 align:start position:0%
followed by the two names that we give
 

00:05:10.300 --> 00:05:12.480 align:start position:0%
followed by the two names that we give
to<00:05:10.330><c> our</c><00:05:10.570><c> variable</c><00:05:11.500><c> so</c><00:05:11.650><c> we</c><00:05:11.770><c> can</c><00:05:11.920><c> give</c><00:05:12.070><c> these</c><00:05:12.220><c> any</c>

00:05:12.480 --> 00:05:12.490 align:start position:0%
to our variable so we can give these any
 

00:05:12.490 --> 00:05:15.300 align:start position:0%
to our variable so we can give these any
names<00:05:12.730><c> we</c><00:05:12.910><c> want</c><00:05:13.380><c> whatsoever</c><00:05:14.380><c> so</c><00:05:14.650><c> name</c><00:05:14.950><c> and</c><00:05:15.160><c> age</c>

00:05:15.300 --> 00:05:15.310 align:start position:0%
names we want whatsoever so name and age
 

00:05:15.310 --> 00:05:17.160 align:start position:0%
names we want whatsoever so name and age
would<00:05:15.550><c> be</c><00:05:15.670><c> good</c><00:05:15.910><c> in</c><00:05:16.120><c> this</c><00:05:16.360><c> case</c><00:05:16.600><c> and</c><00:05:16.810><c> then</c><00:05:16.960><c> we</c>

00:05:17.160 --> 00:05:17.170 align:start position:0%
would be good in this case and then we
 

00:05:17.170 --> 00:05:18.840 align:start position:0%
would be good in this case and then we
just<00:05:17.380><c> set</c><00:05:17.530><c> it</c><00:05:17.620><c> equal</c><00:05:17.710><c> to</c><00:05:17.890><c> create</c><00:05:18.310><c> person</c><00:05:18.730><c> and</c>

00:05:18.840 --> 00:05:18.850 align:start position:0%
just set it equal to create person and
 

00:05:18.850 --> 00:05:21.480 align:start position:0%
just set it equal to create person and
that<00:05:19.330><c> is</c><00:05:19.540><c> it</c><00:05:19.870><c> this</c><00:05:20.230><c> is</c><00:05:20.410><c> a</c><00:05:20.440><c> string</c><00:05:20.830><c> this</c><00:05:21.220><c> is</c><00:05:21.370><c> an</c>

00:05:21.480 --> 00:05:21.490 align:start position:0%
that is it this is a string this is an
 

00:05:21.490 --> 00:05:23.730 align:start position:0%
that is it this is a string this is an
int<00:05:21.790><c> it</c><00:05:21.970><c> does</c><00:05:22.180><c> everything</c><00:05:22.510><c> for</c><00:05:22.990><c> us</c><00:05:23.200><c> perfectly</c>

00:05:23.730 --> 00:05:23.740 align:start position:0%
int it does everything for us perfectly
 

00:05:23.740 --> 00:05:25.410 align:start position:0%
int it does everything for us perfectly
and<00:05:24.040><c> if</c><00:05:24.160><c> we</c><00:05:24.280><c> wanted</c><00:05:24.490><c> to</c><00:05:24.550><c> like</c><00:05:24.940><c> we</c><00:05:25.060><c> could</c><00:05:25.210><c> print</c>

00:05:25.410 --> 00:05:25.420 align:start position:0%
and if we wanted to like we could print
 

00:05:25.420 --> 00:05:27.060 align:start position:0%
and if we wanted to like we could print
this<00:05:25.630><c> we</c><00:05:26.080><c> could</c><00:05:26.230><c> do</c><00:05:26.350><c> anything</c><00:05:26.740><c> we</c><00:05:26.830><c> want</c><00:05:27.010><c> with</c>

00:05:27.060 --> 00:05:27.070 align:start position:0%
this we could do anything we want with
 

00:05:27.070 --> 00:05:28.950 align:start position:0%
this we could do anything we want with
these<00:05:27.310><c> variables</c><00:05:27.910><c> because</c><00:05:28.210><c> now</c><00:05:28.390><c> they're</c>

00:05:28.950 --> 00:05:28.960 align:start position:0%
these variables because now they're
 

00:05:28.960 --> 00:05:30.990 align:start position:0%
these variables because now they're
totally<00:05:29.200><c> just</c><00:05:29.740><c> in</c><00:05:29.950><c> this</c><00:05:30.130><c> scope</c><00:05:30.370><c> and</c><00:05:30.580><c> totally</c>

00:05:30.990 --> 00:05:31.000 align:start position:0%
totally just in this scope and totally
 

00:05:31.000 --> 00:05:33.090 align:start position:0%
totally just in this scope and totally
accessible<00:05:31.330><c> to</c><00:05:31.750><c> us</c><00:05:31.870><c> now</c><00:05:32.440><c> keep</c><00:05:32.620><c> in</c><00:05:32.740><c> mind</c><00:05:32.770><c> this</c>

00:05:33.090 --> 00:05:33.100 align:start position:0%
accessible to us now keep in mind this
 

00:05:33.100 --> 00:05:35.820 align:start position:0%
accessible to us now keep in mind this
feature<00:05:33.340><c> is</c><00:05:33.640><c> only</c><00:05:33.670><c> in</c><00:05:34.300><c> C++</c><00:05:34.870><c> 17</c><00:05:35.380><c> and</c><00:05:35.620><c> newer</c>

00:05:35.820 --> 00:05:35.830 align:start position:0%
feature is only in C++ 17 and newer
 

00:05:35.830 --> 00:05:37.560 align:start position:0%
feature is only in C++ 17 and newer
versions<00:05:36.040><c> of</c><00:05:36.400><c> say</c><00:05:36.640><c> plus</c><00:05:36.790><c> plus</c><00:05:37.030><c> so</c><00:05:37.210><c> if</c><00:05:37.390><c> this</c>

00:05:37.560 --> 00:05:37.570 align:start position:0%
versions of say plus plus so if this
 

00:05:37.570 --> 00:05:39.390 align:start position:0%
versions of say plus plus so if this
does<00:05:37.750><c> not</c><00:05:37.900><c> compile</c><00:05:38.290><c> for</c><00:05:38.530><c> you</c><00:05:38.650><c> make</c><00:05:39.250><c> sure</c>

00:05:39.390 --> 00:05:39.400 align:start position:0%
does not compile for you make sure
 

00:05:39.400 --> 00:05:41.160 align:start position:0%
does not compile for you make sure
you're<00:05:39.550><c> not</c><00:05:39.640><c> compiling</c><00:05:40.000><c> once</c><00:05:40.210><c> a</c><00:05:40.300><c> plus</c><00:05:40.540><c> 14</c><00:05:40.990><c> or</c>

00:05:41.160 --> 00:05:41.170 align:start position:0%
you're not compiling once a plus 14 or
 

00:05:41.170 --> 00:05:43.050 align:start position:0%
you're not compiling once a plus 14 or
11<00:05:41.560><c> or</c><00:05:41.620><c> anything</c><00:05:41.800><c> like</c><00:05:41.980><c> that</c><00:05:42.100><c> make</c><00:05:42.760><c> sure</c><00:05:42.910><c> you</c>

00:05:43.050 --> 00:05:43.060 align:start position:0%
11 or anything like that make sure you
 

00:05:43.060 --> 00:05:45.000 align:start position:0%
11 or anything like that make sure you
switch<00:05:43.270><c> your</c><00:05:43.720><c> sales</c><00:05:44.260><c> plus</c><00:05:44.410><c> version</c><00:05:44.740><c> to</c><00:05:44.890><c> say</c>

00:05:45.000 --> 00:05:45.010 align:start position:0%
switch your sales plus version to say
 

00:05:45.010 --> 00:05:46.470 align:start position:0%
switch your sales plus version to say
plus<00:05:45.130><c> plus</c><00:05:45.310><c> seventeen</c><00:05:45.850><c> specifically</c><00:05:46.390><c> in</c>

00:05:46.470 --> 00:05:46.480 align:start position:0%
plus plus seventeen specifically in
 

00:05:46.480 --> 00:05:48.510 align:start position:0%
plus plus seventeen specifically in
Visual<00:05:46.780><c> Studio</c><00:05:46.870><c> we</c><00:05:47.350><c> can</c><00:05:47.500><c> go</c><00:05:47.650><c> over</c><00:05:47.770><c> here</c><00:05:47.860><c> into</c>

00:05:48.510 --> 00:05:48.520 align:start position:0%
Visual Studio we can go over here into
 

00:05:48.520 --> 00:05:51.120 align:start position:0%
Visual Studio we can go over here into
properties<00:05:49.030><c> and</c><00:05:49.300><c> then</c><00:05:49.690><c> go</c><00:05:49.930><c> into</c><00:05:50.230><c> say</c><00:05:50.560><c> C++</c>

00:05:51.120 --> 00:05:51.130 align:start position:0%
properties and then go into say C++
 

00:05:51.130 --> 00:05:53.280 align:start position:0%
properties and then go into say C++
language<00:05:51.910><c> and</c><00:05:52.150><c> then</c><00:05:52.600><c> make</c><00:05:52.840><c> sure</c><00:05:52.870><c> that</c><00:05:53.080><c> our</c>

00:05:53.280 --> 00:05:53.290 align:start position:0%
language and then make sure that our
 

00:05:53.290 --> 00:05:54.990 align:start position:0%
language and then make sure that our
language<00:05:53.470><c> standard</c><00:05:54.070><c> is</c><00:05:54.190><c> actually</c><00:05:54.550><c> set</c><00:05:54.790><c> to</c>

00:05:54.990 --> 00:05:55.000 align:start position:0%
language standard is actually set to
 

00:05:55.000 --> 00:05:57.450 align:start position:0%
language standard is actually set to
Sables<00:05:55.300><c> plus</c><00:05:55.540><c> 17</c><00:05:56.020><c> standard</c><00:05:56.590><c> if</c><00:05:56.710><c> it's</c><00:05:57.190><c> set</c><00:05:57.340><c> on</c>

00:05:57.450 --> 00:05:57.460 align:start position:0%
Sables plus 17 standard if it's set on
 

00:05:57.460 --> 00:05:59.670 align:start position:0%
Sables plus 17 standard if it's set on
default<00:05:57.940><c> it</c><00:05:58.150><c> may</c><00:05:58.390><c> not</c><00:05:58.630><c> work</c><00:05:58.690><c> so</c><00:05:59.260><c> for</c><00:05:59.380><c> example</c>

00:05:59.670 --> 00:05:59.680 align:start position:0%
default it may not work so for example
 

00:05:59.680 --> 00:06:01.590 align:start position:0%
default it may not work so for example
if<00:05:59.740><c> I</c><00:05:59.800><c> do</c><00:05:59.860><c> switch</c><00:06:00.190><c> it</c><00:06:00.220><c> to</c><00:06:00.430><c> default</c><00:06:01.030><c> and</c><00:06:01.270><c> I</c><00:06:01.360><c> try</c>

00:06:01.590 --> 00:06:01.600 align:start position:0%
if I do switch it to default and I try
 

00:06:01.600 --> 00:06:03.210 align:start position:0%
if I do switch it to default and I try
and<00:06:01.630><c> compile</c><00:06:02.080><c> this</c><00:06:02.230><c> code</c><00:06:02.320><c> you</c><00:06:02.680><c> can</c><00:06:02.830><c> see</c><00:06:03.010><c> that</c>

00:06:03.210 --> 00:06:03.220 align:start position:0%
and compile this code you can see that
 

00:06:03.220 --> 00:06:05.250 align:start position:0%
and compile this code you can see that
it<00:06:03.370><c> will</c><00:06:03.550><c> not</c><00:06:03.730><c> compile</c><00:06:04.180><c> we</c><00:06:04.690><c> will</c><00:06:04.840><c> get</c><00:06:04.960><c> an</c><00:06:05.050><c> error</c>

00:06:05.250 --> 00:06:05.260 align:start position:0%
it will not compile we will get an error
 

00:06:05.260 --> 00:06:06.420 align:start position:0%
it will not compile we will get an error
saying<00:06:05.380><c> that</c><00:06:05.710><c> name</c><00:06:05.830><c> is</c><00:06:06.010><c> uncontacted</c>

00:06:06.420 --> 00:06:06.430 align:start position:0%
saying that name is uncontacted
 

00:06:06.430 --> 00:06:08.310 align:start position:0%
saying that name is uncontacted
identifier<00:06:07.270><c> and</c><00:06:07.480><c> in</c><00:06:07.570><c> fact</c><00:06:07.780><c> we</c><00:06:07.930><c> will</c><00:06:08.080><c> get</c><00:06:08.200><c> an</c>

00:06:08.310 --> 00:06:08.320 align:start position:0%
identifier and in fact we will get an
 

00:06:08.320 --> 00:06:09.720 align:start position:0%
identifier and in fact we will get an
error<00:06:08.470><c> that</c><00:06:08.590><c> tells</c><00:06:08.920><c> us</c><00:06:09.040><c> what</c><00:06:09.190><c> we</c><00:06:09.280><c> need</c><00:06:09.430><c> to</c><00:06:09.460><c> do</c>

00:06:09.720 --> 00:06:09.730 align:start position:0%
error that tells us what we need to do
 

00:06:09.730 --> 00:06:11.310 align:start position:0%
error that tells us what we need to do
it<00:06:09.910><c> says</c><00:06:10.090><c> the</c><00:06:10.210><c> language</c><00:06:10.570><c> features</c><00:06:10.750><c> structured</c>

00:06:11.310 --> 00:06:11.320 align:start position:0%
it says the language features structured
 

00:06:11.320 --> 00:06:14.490 align:start position:0%
it says the language features structured
bindings<00:06:11.800><c> requires</c><00:06:12.220><c> compiler</c><00:06:12.640><c> flag</c><00:06:12.940><c> c++</c><00:06:13.900><c> 17</c>

00:06:14.490 --> 00:06:14.500 align:start position:0%
bindings requires compiler flag c++ 17
 

00:06:14.500 --> 00:06:16.260 align:start position:0%
bindings requires compiler flag c++ 17
so<00:06:14.860><c> to</c><00:06:14.950><c> switch</c><00:06:15.280><c> it</c><00:06:15.430><c> to</c><00:06:15.460><c> that</c><00:06:15.670><c> just</c><00:06:15.910><c> make</c><00:06:16.090><c> sure</c>

00:06:16.260 --> 00:06:16.270 align:start position:0%
so to switch it to that just make sure
 

00:06:16.270 --> 00:06:18.270 align:start position:0%
so to switch it to that just make sure
you<00:06:16.360><c> go</c><00:06:16.540><c> into</c><00:06:16.870><c> your</c><00:06:17.020><c> properties</c><00:06:17.470><c> and</c><00:06:17.650><c> set</c><00:06:18.070><c> your</c>

00:06:18.270 --> 00:06:18.280 align:start position:0%
you go into your properties and set your
 

00:06:18.280 --> 00:06:21.240 align:start position:0%
you go into your properties and set your
sample<00:06:19.000><c> stuff</c><00:06:19.180><c> language</c><00:06:19.600><c> standard</c><00:06:20.020><c> to</c><00:06:20.200><c> be</c><00:06:20.380><c> c++</c>

00:06:21.240 --> 00:06:21.250 align:start position:0%
sample stuff language standard to be c++
 

00:06:21.250 --> 00:06:23.220 align:start position:0%
sample stuff language standard to be c++
17<00:06:22.060><c> now</c><00:06:22.450><c> of</c><00:06:22.540><c> course</c><00:06:22.660><c> if</c><00:06:22.810><c> you're</c><00:06:22.900><c> using</c><00:06:22.930><c> a</c>

00:06:23.220 --> 00:06:23.230 align:start position:0%
17 now of course if you're using a
 

00:06:23.230 --> 00:06:24.750 align:start position:0%
17 now of course if you're using a
different<00:06:23.440><c> IDE</c><00:06:23.920><c> or</c><00:06:24.250><c> a</c><00:06:24.280><c> different</c><00:06:24.550><c> build</c>

00:06:24.750 --> 00:06:24.760 align:start position:0%
different IDE or a different build
 

00:06:24.760 --> 00:06:26.460 align:start position:0%
different IDE or a different build
system<00:06:25.120><c> than</c><00:06:25.270><c> Visual</c><00:06:25.510><c> Studio</c><00:06:25.600><c> like</c><00:06:25.990><c> I</c><00:06:26.140><c> am</c><00:06:26.260><c> in</c>

00:06:26.460 --> 00:06:26.470 align:start position:0%
system than Visual Studio like I am in
 

00:06:26.470 --> 00:06:28.260 align:start position:0%
system than Visual Studio like I am in
this<00:06:26.680><c> case</c><00:06:26.980><c> then</c><00:06:27.220><c> you'll</c><00:06:27.310><c> have</c><00:06:27.460><c> to</c><00:06:27.640><c> do</c><00:06:28.120><c> the</c>

00:06:28.260 --> 00:06:28.270 align:start position:0%
this case then you'll have to do the
 

00:06:28.270 --> 00:06:30.240 align:start position:0%
this case then you'll have to do the
equivalent<00:06:28.750><c> for</c><00:06:28.930><c> that</c><00:06:28.960><c> but</c><00:06:29.350><c> save</c><00:06:29.590><c> us</c><00:06:29.740><c> plus</c><00:06:29.860><c> 17</c>

00:06:30.240 --> 00:06:30.250 align:start position:0%
equivalent for that but save us plus 17
 

00:06:30.250 --> 00:06:32.280 align:start position:0%
equivalent for that but save us plus 17
is<00:06:30.490><c> what</c><00:06:30.790><c> you</c><00:06:30.940><c> need</c><00:06:31.090><c> to</c><00:06:31.450><c> have</c><00:06:31.660><c> structured</c>

00:06:32.280 --> 00:06:32.290 align:start position:0%
is what you need to have structured
 

00:06:32.290 --> 00:06:34.200 align:start position:0%
is what you need to have structured
bindings<00:06:32.680><c> to</c><00:06:32.830><c> use</c><00:06:33.010><c> structured</c><00:06:33.370><c> bindings</c><00:06:33.730><c> like</c>

00:06:34.200 --> 00:06:34.210 align:start position:0%
bindings to use structured bindings like
 

00:06:34.210 --> 00:06:35.670 align:start position:0%
bindings to use structured bindings like
this<00:06:34.510><c> I</c><00:06:34.750><c> want</c><00:06:34.990><c> to</c><00:06:35.050><c> show</c><00:06:35.140><c> you</c><00:06:35.230><c> guys</c><00:06:35.320><c> one</c><00:06:35.650><c> more</c>

00:06:35.670 --> 00:06:35.680 align:start position:0%
this I want to show you guys one more
 

00:06:35.680 --> 00:06:37.380 align:start position:0%
this I want to show you guys one more
example<00:06:36.250><c> so</c><00:06:36.520><c> what</c><00:06:36.640><c> I've</c><00:06:36.730><c> got</c><00:06:36.910><c> here</c><00:06:37.180><c> is</c><00:06:37.240><c> some</c>

00:06:37.380 --> 00:06:37.390 align:start position:0%
example so what I've got here is some
 

00:06:37.390 --> 00:06:38.100 align:start position:0%
example so what I've got here is some
code<00:06:37.690><c> from</c><00:06:37.870><c> the</c>

00:06:38.100 --> 00:06:38.110 align:start position:0%
code from the
 

00:06:38.110 --> 00:06:40.200 align:start position:0%
code from the
OpenGL<00:06:38.620><c> series</c><00:06:39.040><c> specifically</c><00:06:39.820><c> the</c><00:06:40.000><c> shader</c>

00:06:40.200 --> 00:06:40.210 align:start position:0%
OpenGL series specifically the shader
 

00:06:40.210 --> 00:06:42.600 align:start position:0%
OpenGL series specifically the shader
compilation'<00:06:40.930><c> code</c><00:06:41.110><c> I</c><00:06:41.290><c> did</c><00:06:41.500><c> talk</c><00:06:41.860><c> about</c><00:06:41.890><c> the</c>

00:06:42.600 --> 00:06:42.610 align:start position:0%
compilation' code I did talk about the
 

00:06:42.610 --> 00:06:44.400 align:start position:0%
compilation' code I did talk about the
possibility<00:06:43.150><c> of</c><00:06:43.210><c> using</c><00:06:43.360><c> tuples</c><00:06:43.840><c> in</c><00:06:44.050><c> that</c>

00:06:44.400 --> 00:06:44.410 align:start position:0%
possibility of using tuples in that
 

00:06:44.410 --> 00:06:46.590 align:start position:0%
possibility of using tuples in that
video<00:06:44.650><c> as</c><00:06:45.040><c> well</c><00:06:45.310><c> which</c><00:06:45.550><c> I</c><00:06:45.670><c> might</c><00:06:45.880><c> link</c><00:06:46.240><c> in</c><00:06:46.420><c> the</c>

00:06:46.590 --> 00:06:46.600 align:start position:0%
video as well which I might link in the
 

00:06:46.600 --> 00:06:48.780 align:start position:0%
video as well which I might link in the
top<00:06:46.780><c> right</c><00:06:46.990><c> corner</c><00:06:47.020><c> but</c><00:06:48.010><c> basically</c><00:06:48.430><c> what</c><00:06:48.670><c> we</c>

00:06:48.780 --> 00:06:48.790 align:start position:0%
top right corner but basically what we
 

00:06:48.790 --> 00:06:50.460 align:start position:0%
top right corner but basically what we
ended<00:06:48.970><c> up</c><00:06:49.090><c> doing</c><00:06:49.450><c> was</c><00:06:49.630><c> we</c><00:06:49.750><c> need</c><00:06:49.930><c> to</c><00:06:49.960><c> pass</c><00:06:50.440><c> a</c>

00:06:50.460 --> 00:06:50.470 align:start position:0%
ended up doing was we need to pass a
 

00:06:50.470 --> 00:06:52.380 align:start position:0%
ended up doing was we need to pass a
shader<00:06:50.890><c> which</c><00:06:51.340><c> we</c><00:06:51.520><c> took</c><00:06:51.640><c> in</c><00:06:51.850><c> a</c><00:06:52.000><c> file</c><00:06:52.210><c> path</c>

00:06:52.380 --> 00:06:52.390 align:start position:0%
shader which we took in a file path
 

00:06:52.390 --> 00:06:53.820 align:start position:0%
shader which we took in a file path
floor<00:06:52.690><c> and</c><00:06:52.780><c> then</c><00:06:52.870><c> we</c><00:06:52.900><c> just</c><00:06:53.080><c> read</c><00:06:53.320><c> that</c><00:06:53.350><c> file</c>

00:06:53.820 --> 00:06:53.830 align:start position:0%
floor and then we just read that file
 

00:06:53.830 --> 00:06:55.290 align:start position:0%
floor and then we just read that file
and<00:06:54.100><c> the</c><00:06:54.340><c> result</c><00:06:54.640><c> of</c><00:06:54.700><c> this</c><00:06:54.790><c> function</c><00:06:54.970><c> was</c>

00:06:55.290 --> 00:06:55.300 align:start position:0%
and the result of this function was
 

00:06:55.300 --> 00:06:56.760 align:start position:0%
and the result of this function was
splitting<00:06:55.570><c> up</c><00:06:55.720><c> that</c><00:06:55.870><c> shader</c><00:06:56.110><c> file</c><00:06:56.320><c> into</c><00:06:56.530><c> two</c>

00:06:56.760 --> 00:06:56.770 align:start position:0%
splitting up that shader file into two
 

00:06:56.770 --> 00:06:58.710 align:start position:0%
splitting up that shader file into two
different<00:06:57.340><c> strings</c><00:06:57.730><c> based</c><00:06:58.120><c> on</c><00:06:58.330><c> the</c><00:06:58.450><c> shader</c>

00:06:58.710 --> 00:06:58.720 align:start position:0%
different strings based on the shader
 

00:06:58.720 --> 00:07:01.350 align:start position:0%
different strings based on the shader
type<00:06:59.140><c> and</c><00:06:59.470><c> so</c><00:07:00.010><c> what</c><00:07:00.190><c> we</c><00:07:00.280><c> did</c><00:07:00.430><c> to</c><00:07:00.820><c> support</c><00:07:01.210><c> that</c>

00:07:01.350 --> 00:07:01.360 align:start position:0%
type and so what we did to support that
 

00:07:01.360 --> 00:07:03.060 align:start position:0%
type and so what we did to support that
is<00:07:01.540><c> we</c><00:07:01.690><c> returned</c><00:07:02.020><c> a</c><00:07:02.110><c> struct</c><00:07:02.440><c> as</c><00:07:02.620><c> you</c><00:07:02.740><c> can</c><00:07:02.890><c> see</c>

00:07:03.060 --> 00:07:03.070 align:start position:0%
is we returned a struct as you can see
 

00:07:03.070 --> 00:07:04.770 align:start position:0%
is we returned a struct as you can see
if<00:07:03.220><c> we</c><00:07:03.310><c> look</c><00:07:03.520><c> at</c><00:07:03.640><c> what</c><00:07:03.730><c> that</c><00:07:03.820><c> struct</c><00:07:04.090><c> is</c><00:07:04.180><c> we</c>

00:07:04.770 --> 00:07:04.780 align:start position:0%
if we look at what that struct is we
 

00:07:04.780 --> 00:07:06.570 align:start position:0%
if we look at what that struct is we
have<00:07:04.930><c> a</c><00:07:04.960><c> vertex</c><00:07:05.350><c> sauce</c><00:07:05.590><c> and</c><00:07:05.830><c> a</c><00:07:05.890><c> fragment</c><00:07:06.400><c> sauce</c>

00:07:06.570 --> 00:07:06.580 align:start position:0%
have a vertex sauce and a fragment sauce
 

00:07:06.580 --> 00:07:08.340 align:start position:0%
have a vertex sauce and a fragment sauce
so<00:07:06.790><c> what</c><00:07:06.940><c> I'm</c><00:07:07.060><c> going</c><00:07:07.270><c> to</c><00:07:07.300><c> do</c><00:07:07.480><c> is</c><00:07:07.720><c> change</c><00:07:08.110><c> this</c>

00:07:08.340 --> 00:07:08.350 align:start position:0%
so what I'm going to do is change this
 

00:07:08.350 --> 00:07:10.350 align:start position:0%
so what I'm going to do is change this
to<00:07:08.590><c> use</c><00:07:08.740><c> structured</c><00:07:09.190><c> bindings</c><00:07:09.640><c> so</c><00:07:10.090><c> that</c><00:07:10.240><c> we</c>

00:07:10.350 --> 00:07:10.360 align:start position:0%
to use structured bindings so that we
 

00:07:10.360 --> 00:07:11.730 align:start position:0%
to use structured bindings so that we
don't<00:07:10.540><c> need</c><00:07:10.720><c> this</c><00:07:10.870><c> struct</c><00:07:11.140><c> at</c><00:07:11.320><c> all</c><00:07:11.470><c> so</c><00:07:11.590><c> alt</c>

00:07:11.730 --> 00:07:11.740 align:start position:0%
don't need this struct at all so alt
 

00:07:11.740 --> 00:07:13.740 align:start position:0%
don't need this struct at all so alt
delete<00:07:12.280><c> the</c><00:07:12.430><c> struct</c><00:07:12.760><c> will</c><00:07:13.330><c> come</c><00:07:13.510><c> over</c><00:07:13.630><c> here</c>

00:07:13.740 --> 00:07:13.750 align:start position:0%
delete the struct will come over here
 

00:07:13.750 --> 00:07:16.200 align:start position:0%
delete the struct will come over here
into<00:07:14.290><c> our</c><00:07:14.320><c> path</c><00:07:14.800><c> shader</c><00:07:15.160><c> we're</c><00:07:15.850><c> not</c><00:07:15.970><c> going</c><00:07:16.180><c> to</c>

00:07:16.200 --> 00:07:16.210 align:start position:0%
into our path shader we're not going to
 

00:07:16.210 --> 00:07:18.000 align:start position:0%
into our path shader we're not going to
use<00:07:16.420><c> a</c><00:07:16.450><c> pair</c><00:07:16.810><c> here</c><00:07:17.080><c> we'll</c><00:07:17.230><c> use</c><00:07:17.350><c> a</c><00:07:17.410><c> tuple</c><00:07:17.890><c> the</c>

00:07:18.000 --> 00:07:18.010 align:start position:0%
use a pair here we'll use a tuple the
 

00:07:18.010 --> 00:07:20.190 align:start position:0%
use a pair here we'll use a tuple the
reason<00:07:18.310><c> is</c><00:07:18.460><c> that</c><00:07:18.490><c> this</c><00:07:19.180><c> theoretically</c><00:07:19.990><c> could</c>

00:07:20.190 --> 00:07:20.200 align:start position:0%
reason is that this theoretically could
 

00:07:20.200 --> 00:07:22.650 align:start position:0%
reason is that this theoretically could
support<00:07:20.500><c> more</c><00:07:20.770><c> types</c><00:07:21.100><c> than</c><00:07:21.520><c> just</c><00:07:21.910><c> fragment</c>

00:07:22.650 --> 00:07:22.660 align:start position:0%
support more types than just fragment
 

00:07:22.660 --> 00:07:24.120 align:start position:0%
support more types than just fragment
and<00:07:22.810><c> vertex</c><00:07:23.140><c> shaders</c><00:07:23.530><c> which</c><00:07:23.680><c> is</c><00:07:23.800><c> what</c><00:07:23.980><c> we've</c>

00:07:24.120 --> 00:07:24.130 align:start position:0%
and vertex shaders which is what we've
 

00:07:24.130 --> 00:07:25.890 align:start position:0%
and vertex shaders which is what we've
got<00:07:24.310><c> there</c><00:07:24.490><c> right</c><00:07:24.700><c> now</c><00:07:24.880><c> so</c><00:07:25.480><c> what</c><00:07:25.600><c> I'll</c><00:07:25.720><c> do</c><00:07:25.870><c> is</c>

00:07:25.890 --> 00:07:25.900 align:start position:0%
got there right now so what I'll do is
 

00:07:25.900 --> 00:07:27.510 align:start position:0%
got there right now so what I'll do is
just<00:07:26.290><c> use</c><00:07:26.470><c> the</c><00:07:26.590><c> triple</c><00:07:26.860><c> again</c><00:07:27.040><c> you</c><00:07:27.220><c> could</c><00:07:27.430><c> use</c>

00:07:27.510 --> 00:07:27.520 align:start position:0%
just use the triple again you could use
 

00:07:27.520 --> 00:07:29.070 align:start position:0%
just use the triple again you could use
a<00:07:27.580><c> pair</c><00:07:27.790><c> then</c><00:07:27.970><c> later</c><00:07:28.150><c> change</c><00:07:28.450><c> it</c><00:07:28.540><c> into</c><00:07:28.660><c> tuple</c>

00:07:29.070 --> 00:07:29.080 align:start position:0%
a pair then later change it into tuple
 

00:07:29.080 --> 00:07:31.020 align:start position:0%
a pair then later change it into tuple
it<00:07:29.200><c> shouldn't</c><00:07:29.440><c> break</c><00:07:29.560><c> any</c><00:07:29.800><c> code</c><00:07:30.070><c> but</c><00:07:30.790><c> just</c>

00:07:31.020 --> 00:07:31.030 align:start position:0%
it shouldn't break any code but just
 

00:07:31.030 --> 00:07:32.400 align:start position:0%
it shouldn't break any code but just
giving<00:07:31.240><c> a</c><00:07:31.300><c> reason</c><00:07:31.420><c> behind</c><00:07:31.600><c> why</c><00:07:31.930><c> I'm</c><00:07:31.990><c> using</c><00:07:32.140><c> to</c>

00:07:32.400 --> 00:07:32.410 align:start position:0%
giving a reason behind why I'm using to
 

00:07:32.410 --> 00:07:33.450 align:start position:0%
giving a reason behind why I'm using to
build<00:07:32.560><c> parent</c><00:07:32.980><c> table</c><00:07:33.130><c> in</c><00:07:33.310><c> this</c><00:07:33.400><c> case</c>

00:07:33.450 --> 00:07:33.460 align:start position:0%
build parent table in this case
 

00:07:33.460 --> 00:07:35.790 align:start position:0%
build parent table in this case
identical<00:07:34.270><c> results</c><00:07:34.660><c> okay</c><00:07:35.440><c> so</c><00:07:35.470><c> we'll</c><00:07:35.710><c> come</c>

00:07:35.790 --> 00:07:35.800 align:start position:0%
identical results okay so we'll come
 

00:07:35.800 --> 00:07:37.620 align:start position:0%
identical results okay so we'll come
over<00:07:35.830><c> here</c><00:07:36.190><c> and</c><00:07:36.340><c> we'll</c><00:07:36.460><c> also</c><00:07:36.640><c> include</c><00:07:36.790><c> that</c>

00:07:37.620 --> 00:07:37.630 align:start position:0%
over here and we'll also include that
 

00:07:37.630 --> 00:07:41.520 align:start position:0%
over here and we'll also include that
tuple<00:07:38.580><c> and</c><00:07:39.580><c> now</c><00:07:39.790><c> I</c><00:07:39.820><c> will</c><00:07:40.270><c> hop</c><00:07:40.480><c> over</c><00:07:40.810><c> into</c><00:07:41.020><c> my</c><00:07:41.500><c> a</c>

00:07:41.520 --> 00:07:41.530 align:start position:0%
tuple and now I will hop over into my a
 

00:07:41.530 --> 00:07:43.770 align:start position:0%
tuple and now I will hop over into my a
bus<00:07:41.860><c> bus</c><00:07:42.070><c> code</c><00:07:42.310><c> I</c><00:07:42.550><c> will</c><00:07:42.730><c> change</c><00:07:43.000><c> this</c><00:07:43.240><c> to</c><00:07:43.480><c> be</c>

00:07:43.770 --> 00:07:43.780 align:start position:0%
bus bus code I will change this to be
 

00:07:43.780 --> 00:07:45.630 align:start position:0%
bus bus code I will change this to be
the<00:07:44.020><c> same</c><00:07:44.230><c> thing</c><00:07:44.590><c> the</c><00:07:44.980><c> cool</c><00:07:45.190><c> thing</c><00:07:45.340><c> is</c><00:07:45.370><c> that</c>

00:07:45.630 --> 00:07:45.640 align:start position:0%
the same thing the cool thing is that
 

00:07:45.640 --> 00:07:47.520 align:start position:0%
the same thing the cool thing is that
this<00:07:45.730><c> return</c><00:07:46.180><c> statement</c><00:07:46.210><c> does</c><00:07:46.810><c> not</c><00:07:46.840><c> change</c><00:07:47.230><c> at</c>

00:07:47.520 --> 00:07:47.530 align:start position:0%
this return statement does not change at
 

00:07:47.530 --> 00:07:49.500 align:start position:0%
this return statement does not change at
all<00:07:47.560><c> because</c><00:07:48.160><c> we</c><00:07:48.310><c> still</c><00:07:48.580><c> construct</c><00:07:49.060><c> the</c><00:07:49.180><c> tuple</c>

00:07:49.500 --> 00:07:49.510 align:start position:0%
all because we still construct the tuple
 

00:07:49.510 --> 00:07:51.750 align:start position:0%
all because we still construct the tuple
in<00:07:49.660><c> exactly</c><00:07:50.170><c> the</c><00:07:50.320><c> same</c><00:07:50.530><c> way</c><00:07:50.740><c> but</c><00:07:51.340><c> if</c><00:07:51.430><c> we</c><00:07:51.520><c> come</c>

00:07:51.750 --> 00:07:51.760 align:start position:0%
in exactly the same way but if we come
 

00:07:51.760 --> 00:07:53.730 align:start position:0%
in exactly the same way but if we come
over<00:07:51.940><c> here</c><00:07:52.300><c> into</c><00:07:52.570><c> where</c><00:07:52.990><c> we</c><00:07:53.110><c> actually</c><00:07:53.260><c> use</c>

00:07:53.730 --> 00:07:53.740 align:start position:0%
over here into where we actually use
 

00:07:53.740 --> 00:07:56.010 align:start position:0%
over here into where we actually use
this<00:07:53.890><c> code</c><00:07:54.220><c> which</c><00:07:54.640><c> is</c><00:07:54.820><c> up</c><00:07:55.060><c> here</c><00:07:55.420><c> instead</c><00:07:55.870><c> of</c>

00:07:56.010 --> 00:07:56.020 align:start position:0%
this code which is up here instead of
 

00:07:56.020 --> 00:07:57.870 align:start position:0%
this code which is up here instead of
using<00:07:56.290><c> this</c><00:07:56.530><c> shader</c><00:07:56.800><c> program</c><00:07:57.220><c> source</c><00:07:57.550><c> type</c>

00:07:57.870 --> 00:07:57.880 align:start position:0%
using this shader program source type
 

00:07:57.880 --> 00:07:59.520 align:start position:0%
using this shader program source type
and<00:07:58.090><c> then</c><00:07:58.180><c> doing</c><00:07:58.300><c> source</c><00:07:58.600><c> type</c><00:07:58.810><c> vertex</c><00:07:59.290><c> or</c>

00:07:59.520 --> 00:07:59.530 align:start position:0%
and then doing source type vertex or
 

00:07:59.530 --> 00:08:01.320 align:start position:0%
and then doing source type vertex or
source<00:07:59.830><c> table</c><00:08:00.040><c> fragments</c><00:08:00.640><c> source</c><00:08:00.820><c> instead</c><00:08:01.240><c> of</c>

00:08:01.320 --> 00:08:01.330 align:start position:0%
source table fragments source instead of
 

00:08:01.330 --> 00:08:03.720 align:start position:0%
source table fragments source instead of
that<00:08:01.480><c> we</c><00:08:01.930><c> can</c><00:08:02.140><c> now</c><00:08:02.260><c> just</c><00:08:02.470><c> use</c><00:08:02.860><c> order</c><00:08:03.310><c> followed</c>

00:08:03.720 --> 00:08:03.730 align:start position:0%
that we can now just use order followed
 

00:08:03.730 --> 00:08:07.200 align:start position:0%
that we can now just use order followed
by<00:08:03.760><c> vertex</c><00:08:04.630><c> source</c><00:08:05.230><c> and</c><00:08:05.580><c> fragment</c><00:08:06.580><c> sauce</c><00:08:06.850><c> and</c>

00:08:07.200 --> 00:08:07.210 align:start position:0%
by vertex source and fragment sauce and
 

00:08:07.210 --> 00:08:10.170 align:start position:0%
by vertex source and fragment sauce and
then<00:08:07.480><c> just</c><00:08:07.510><c> set</c><00:08:08.050><c> that</c><00:08:08.260><c> equal</c><00:08:08.440><c> to</c><00:08:08.730><c> pass</c><00:08:09.730><c> header</c>

00:08:10.170 --> 00:08:10.180 align:start position:0%
then just set that equal to pass header
 

00:08:10.180 --> 00:08:12.270 align:start position:0%
then just set that equal to pass header
and<00:08:10.540><c> then</c><00:08:10.750><c> into</c><00:08:11.020><c> the</c><00:08:11.110><c> create</c><00:08:11.530><c> a</c><00:08:11.560><c> function</c><00:08:11.980><c> this</c>

00:08:12.270 --> 00:08:12.280 align:start position:0%
and then into the create a function this
 

00:08:12.280 --> 00:08:14.190 align:start position:0%
and then into the create a function this
also<00:08:12.670><c> disappears</c><00:08:13.210><c> and</c><00:08:13.450><c> just</c><00:08:13.600><c> simply</c><00:08:13.840><c> becomes</c>

00:08:14.190 --> 00:08:14.200 align:start position:0%
also disappears and just simply becomes
 

00:08:14.200 --> 00:08:16.890 align:start position:0%
also disappears and just simply becomes
a<00:08:14.350><c> vertex</c><00:08:14.680><c> sauce</c><00:08:14.920><c> and</c><00:08:15.190><c> fragments</c><00:08:16.000><c> sauce</c><00:08:16.180><c> now</c>

00:08:16.890 --> 00:08:16.900 align:start position:0%
a vertex sauce and fragments sauce now
 

00:08:16.900 --> 00:08:18.600 align:start position:0%
a vertex sauce and fragments sauce now
in<00:08:17.140><c> this</c><00:08:17.260><c> case</c><00:08:17.500><c> you</c><00:08:17.680><c> can</c><00:08:17.830><c> see</c><00:08:17.950><c> that</c><00:08:17.980><c> this</c><00:08:18.190><c> does</c>

00:08:18.600 --> 00:08:18.610 align:start position:0%
in this case you can see that this does
 

00:08:18.610 --> 00:08:20.460 align:start position:0%
in this case you can see that this does
not<00:08:18.640><c> compile</c><00:08:19.210><c> because</c><00:08:19.690><c> we</c><00:08:19.840><c> need</c><00:08:20.020><c> to</c><00:08:20.170><c> switch</c>

00:08:20.460 --> 00:08:20.470 align:start position:0%
not compile because we need to switch
 

00:08:20.470 --> 00:08:23.280 align:start position:0%
not compile because we need to switch
this<00:08:20.740><c> to</c><00:08:21.040><c> be</c><00:08:21.160><c> C++</c><00:08:21.700><c> 17</c><00:08:22.180><c> which</c><00:08:22.660><c> it</c><00:08:22.840><c> currently</c><00:08:22.990><c> is</c>

00:08:23.280 --> 00:08:23.290 align:start position:0%
this to be C++ 17 which it currently is
 

00:08:23.290 --> 00:08:25.200 align:start position:0%
this to be C++ 17 which it currently is
not<00:08:23.500><c> so</c><00:08:23.740><c> let's</c><00:08:23.920><c> just</c><00:08:24.130><c> do</c><00:08:24.430><c> that</c><00:08:24.460><c> here</c><00:08:25.000><c> it</c><00:08:25.120><c> is</c>

00:08:25.200 --> 00:08:25.210 align:start position:0%
not so let's just do that here it is
 

00:08:25.210 --> 00:08:27.090 align:start position:0%
not so let's just do that here it is
language<00:08:25.360><c> standard</c><00:08:26.020><c> and</c><00:08:26.260><c> we'll</c><00:08:26.470><c> set</c><00:08:26.710><c> that</c><00:08:26.740><c> to</c>

00:08:27.090 --> 00:08:27.100 align:start position:0%
language standard and we'll set that to
 

00:08:27.100 --> 00:08:29.790 align:start position:0%
language standard and we'll set that to
C++<00:08:27.570><c> 17</c><00:08:28.570><c> now</c><00:08:29.050><c> you</c><00:08:29.110><c> can</c><00:08:29.230><c> see</c><00:08:29.350><c> the</c><00:08:29.470><c> error</c><00:08:29.620><c> goes</c>

00:08:29.790 --> 00:08:29.800 align:start position:0%
C++ 17 now you can see the error goes
 

00:08:29.800 --> 00:08:32.070 align:start position:0%
C++ 17 now you can see the error goes
away<00:08:30.040><c> and</c><00:08:30.250><c> this</c><00:08:30.460><c> is</c><00:08:30.520><c> what</c><00:08:30.850><c> we're</c><00:08:31.030><c> left</c><00:08:31.210><c> with</c><00:08:31.390><c> so</c>

00:08:32.070 --> 00:08:32.080 align:start position:0%
away and this is what we're left with so
 

00:08:32.080 --> 00:08:34.620 align:start position:0%
away and this is what we're left with so
really<00:08:32.590><c> simple</c><00:08:33.010><c> really</c><00:08:33.580><c> clean</c><00:08:33.850><c> code</c><00:08:34.120><c> if</c><00:08:34.390><c> we</c><00:08:34.510><c> go</c>

00:08:34.620 --> 00:08:34.630 align:start position:0%
really simple really clean code if we go
 

00:08:34.630 --> 00:08:36.030 align:start position:0%
really simple really clean code if we go
back<00:08:34.840><c> to</c><00:08:34.870><c> our</c><00:08:35.110><c> header</c><00:08:35.320><c> file</c><00:08:35.560><c> you</c><00:08:35.650><c> can</c><00:08:35.770><c> see</c><00:08:35.920><c> we</c>

00:08:36.030 --> 00:08:36.040 align:start position:0%
back to our header file you can see we
 

00:08:36.040 --> 00:08:37.560 align:start position:0%
back to our header file you can see we
got<00:08:36.190><c> rid</c><00:08:36.520><c> of</c><00:08:36.550><c> that</c><00:08:36.670><c> shader</c><00:08:36.970><c> sauce</c><00:08:37.210><c> struct</c>

00:08:37.560 --> 00:08:37.570 align:start position:0%
got rid of that shader sauce struct
 

00:08:37.570 --> 00:08:39.480 align:start position:0%
got rid of that shader sauce struct
altogether<00:08:38.200><c> we</c><00:08:38.380><c> know</c><00:08:38.440><c> how</c><00:08:38.590><c> one</c><00:08:38.950><c> less</c><00:08:39.190><c> type</c>

00:08:39.480 --> 00:08:39.490 align:start position:0%
altogether we know how one less type
 

00:08:39.490 --> 00:08:41.130 align:start position:0%
altogether we know how one less type
floating<00:08:39.940><c> around</c><00:08:40.030><c> which</c><00:08:40.360><c> is</c><00:08:40.510><c> a</c><00:08:40.540><c> lot</c><00:08:40.750><c> cleaner</c><00:08:41.020><c> a</c>

00:08:41.130 --> 00:08:41.140 align:start position:0%
floating around which is a lot cleaner a
 

00:08:41.140 --> 00:08:43.110 align:start position:0%
floating around which is a lot cleaner a
lot<00:08:41.380><c> easier</c><00:08:41.770><c> because</c><00:08:42.220><c> this</c><00:08:42.550><c> is</c><00:08:42.729><c> really</c><00:08:43.000><c> the</c>

00:08:43.110 --> 00:08:43.120 align:start position:0%
lot easier because this is really the
 

00:08:43.120 --> 00:08:45.570 align:start position:0%
lot easier because this is really the
only<00:08:43.720><c> case</c><00:08:44.410><c> in</c><00:08:44.710><c> our</c><00:08:44.800><c> code</c><00:08:45.100><c> where</c><00:08:45.280><c> we</c><00:08:45.310><c> actually</c>

00:08:45.570 --> 00:08:45.580 align:start position:0%
only case in our code where we actually
 

00:08:45.580 --> 00:08:48.720 align:start position:0%
only case in our code where we actually
want<00:08:46.210><c> to</c><00:08:46.270><c> use</c><00:08:46.390><c> that</c><00:08:47.230><c> shader</c><00:08:47.590><c> saw</c><00:08:47.860><c> struct</c><00:08:48.310><c> this</c>

00:08:48.720 --> 00:08:48.730 align:start position:0%
want to use that shader saw struct this
 

00:08:48.730 --> 00:08:50.530 align:start position:0%
want to use that shader saw struct this
was<00:08:48.910><c> used</c><00:08:49.180><c> all</c><00:08:49.420><c> around</c><00:08:49.690><c> our</c><00:08:49.780><c> code</c><00:08:50.020><c> base</c>

00:08:50.530 --> 00:08:50.540 align:start position:0%
was used all around our code base
 

00:08:50.540 --> 00:08:51.759 align:start position:0%
was used all around our code base
you<00:08:50.750><c> wouldn't</c><00:08:51.019><c> want</c><00:08:51.139><c> to</c><00:08:51.199><c> wear</c><00:08:51.410><c> this</c><00:08:51.500><c> into</c><00:08:51.680><c> a</c>

00:08:51.759 --> 00:08:51.769 align:start position:0%
you wouldn't want to wear this into a
 

00:08:51.769 --> 00:08:53.319 align:start position:0%
you wouldn't want to wear this into a
tuple<00:08:51.980><c> and</c><00:08:52.339><c> use</c><00:08:52.490><c> structured</c><00:08:52.880><c> bindings</c><00:08:53.240><c> like</c>

00:08:53.319 --> 00:08:53.329 align:start position:0%
tuple and use structured bindings like
 

00:08:53.329 --> 00:08:55.120 align:start position:0%
tuple and use structured bindings like
this<00:08:53.480><c> but</c><00:08:53.990><c> in</c><00:08:54.079><c> this</c><00:08:54.199><c> case</c><00:08:54.440><c> it</c><00:08:54.680><c> just</c><00:08:54.709><c> makes</c><00:08:55.009><c> so</c>

00:08:55.120 --> 00:08:55.130 align:start position:0%
this but in this case it just makes so
 

00:08:55.130 --> 00:08:58.060 align:start position:0%
this but in this case it just makes so
much<00:08:55.250><c> sense</c><00:08:55.279><c> why</c><00:08:56.120><c> have</c><00:08:56.540><c> a</c><00:08:56.810><c> type</c><00:08:57.139><c> that</c><00:08:57.740><c> you</c><00:08:57.829><c> only</c>

00:08:58.060 --> 00:08:58.070 align:start position:0%
much sense why have a type that you only
 

00:08:58.070 --> 00:09:00.610 align:start position:0%
much sense why have a type that you only
use<00:08:58.399><c> once</c><00:08:58.820><c> that</c><00:08:59.149><c> I</c><00:08:59.360><c> don't</c><00:08:59.959><c> really</c><00:09:00.230><c> like</c><00:09:00.440><c> the</c>

00:09:00.610 --> 00:09:00.620 align:start position:0%
use once that I don't really like the
 

00:09:00.620 --> 00:09:02.199 align:start position:0%
use once that I don't really like the
idea<00:09:00.680><c> of</c><00:09:01.040><c> that</c><00:09:01.190><c> because</c><00:09:01.490><c> it</c><00:09:01.639><c> just</c><00:09:01.730><c> clutters</c><00:09:02.120><c> up</c>

00:09:02.199 --> 00:09:02.209 align:start position:0%
idea of that because it just clutters up
 

00:09:02.209 --> 00:09:03.610 align:start position:0%
idea of that because it just clutters up
your<00:09:02.360><c> code</c><00:09:02.570><c> base</c><00:09:02.720><c> you</c><00:09:02.779><c> have</c><00:09:02.990><c> an</c><00:09:03.170><c> extra</c><00:09:03.440><c> type</c>

00:09:03.610 --> 00:09:03.620 align:start position:0%
your code base you have an extra type
 

00:09:03.620 --> 00:09:05.920 align:start position:0%
your code base you have an extra type
floating<00:09:03.980><c> around</c><00:09:04.070><c> not</c><00:09:05.000><c> necessary</c><00:09:05.509><c> you</c><00:09:05.779><c> can</c>

00:09:05.920 --> 00:09:05.930 align:start position:0%
floating around not necessary you can
 

00:09:05.930 --> 00:09:07.180 align:start position:0%
floating around not necessary you can
just<00:09:06.079><c> use</c><00:09:06.230><c> it</c><00:09:06.410><c> structured</c><00:09:06.740><c> bindings</c><00:09:07.040><c> and</c>

00:09:07.180 --> 00:09:07.190 align:start position:0%
just use it structured bindings and
 

00:09:07.190 --> 00:09:09.579 align:start position:0%
just use it structured bindings and
tuples<00:09:07.459><c> or</c><00:09:07.550><c> pairs</c><00:09:07.790><c> in</c><00:09:07.970><c> this</c><00:09:08.480><c> case</c><00:09:08.810><c> and</c><00:09:09.380><c> I</c><00:09:09.470><c> hope</c>

00:09:09.579 --> 00:09:09.589 align:start position:0%
tuples or pairs in this case and I hope
 

00:09:09.589 --> 00:09:11.019 align:start position:0%
tuples or pairs in this case and I hope
you<00:09:09.649><c> guys</c><00:09:09.769><c> enjoyed</c><00:09:10.250><c> this</c><00:09:10.370><c> video</c><00:09:10.550><c> and</c><00:09:10.850><c> that</c><00:09:10.970><c> you</c>

00:09:11.019 --> 00:09:11.029 align:start position:0%
you guys enjoyed this video and that you
 

00:09:11.029 --> 00:09:12.249 align:start position:0%
you guys enjoyed this video and that you
kind<00:09:11.209><c> of</c><00:09:11.300><c> benefited</c><00:09:11.750><c> from</c><00:09:11.810><c> seeing</c><00:09:12.139><c> a</c>

00:09:12.249 --> 00:09:12.259 align:start position:0%
kind of benefited from seeing a
 

00:09:12.259 --> 00:09:14.050 align:start position:0%
kind of benefited from seeing a
real-world<00:09:12.620><c> example</c><00:09:13.069><c> if</c><00:09:13.639><c> you</c><00:09:13.730><c> did</c><00:09:13.850><c> you</c><00:09:13.940><c> can</c>

00:09:14.050 --> 00:09:14.060 align:start position:0%
real-world example if you did you can
 

00:09:14.060 --> 00:09:15.699 align:start position:0%
real-world example if you did you can
drop<00:09:14.209><c> a</c><00:09:14.269><c> like</c><00:09:14.569><c> below</c><00:09:14.870><c> you</c><00:09:15.050><c> can</c><00:09:15.199><c> also</c><00:09:15.319><c> help</c>

00:09:15.699 --> 00:09:15.709 align:start position:0%
drop a like below you can also help
 

00:09:15.709 --> 00:09:17.680 align:start position:0%
drop a like below you can also help
support<00:09:15.829><c> this</c><00:09:16.220><c> channel</c><00:09:16.279><c> by</c><00:09:17.060><c> going</c><00:09:17.269><c> to</c><00:09:17.360><c> patron</c>

00:09:17.680 --> 00:09:17.690 align:start position:0%
support this channel by going to patron
 

00:09:17.690 --> 00:09:19.870 align:start position:0%
support this channel by going to patron
home<00:09:17.959><c> for</c><00:09:18.139><c> slash</c><00:09:18.350><c> that</c><00:09:18.769><c> show</c><00:09:19.040><c> huge</c><00:09:19.579><c> thank</c><00:09:19.819><c> you</c>

00:09:19.870 --> 00:09:19.880 align:start position:0%
home for slash that show huge thank you
 

00:09:19.880 --> 00:09:21.610 align:start position:0%
home for slash that show huge thank you
as<00:09:20.120><c> always</c><00:09:20.360><c> to</c><00:09:20.480><c> all</c><00:09:20.720><c> the</c><00:09:20.870><c> patrons</c><00:09:21.230><c> that</c><00:09:21.319><c> made</c>

00:09:21.610 --> 00:09:21.620 align:start position:0%
as always to all the patrons that made
 

00:09:21.620 --> 00:09:22.930 align:start position:0%
as always to all the patrons that made
this<00:09:21.980><c> video</c><00:09:22.310><c> possible</c>

00:09:22.930 --> 00:09:22.940 align:start position:0%
this video possible
 

00:09:22.940 --> 00:09:24.579 align:start position:0%
this video possible
drop<00:09:23.389><c> a</c><00:09:23.420><c> comment</c><00:09:23.660><c> below</c><00:09:23.899><c> on</c><00:09:24.170><c> what</c><00:09:24.230><c> you</c><00:09:24.470><c> would</c>

00:09:24.579 --> 00:09:24.589 align:start position:0%
drop a comment below on what you would
 

00:09:24.589 --> 00:09:26.470 align:start position:0%
drop a comment below on what you would
like<00:09:24.740><c> to</c><00:09:24.860><c> see</c><00:09:25.009><c> covered</c><00:09:25.190><c> in</c><00:09:25.430><c> C++</c><00:09:25.880><c> next</c><00:09:26.089><c> I</c><00:09:26.240><c> do</c>

00:09:26.470 --> 00:09:26.480 align:start position:0%
like to see covered in C++ next I do
 

00:09:26.480 --> 00:09:28.660 align:start position:0%
like to see covered in C++ next I do
have<00:09:27.050><c> a</c><00:09:27.079><c> very</c><00:09:27.649><c> long</c><00:09:27.949><c> list</c><00:09:28.190><c> I</c><00:09:28.370><c> think</c><00:09:28.550><c> there's</c>

00:09:28.660 --> 00:09:28.670 align:start position:0%
have a very long list I think there's
 

00:09:28.670 --> 00:09:30.280 align:start position:0%
have a very long list I think there's
like<00:09:28.759><c> 20</c><00:09:29.269><c> items</c><00:09:29.600><c> are</c><00:09:29.750><c> sort</c><00:09:29.930><c> of</c><00:09:29.959><c> what</c><00:09:30.110><c> I'm</c><00:09:30.199><c> gonna</c>

00:09:30.280 --> 00:09:30.290 align:start position:0%
like 20 items are sort of what I'm gonna
 

00:09:30.290 --> 00:09:32.259 align:start position:0%
like 20 items are sort of what I'm gonna
get<00:09:30.560><c> through</c><00:09:30.769><c> I'm</c><00:09:30.860><c> gonna</c><00:09:30.980><c> try</c><00:09:31.339><c> and</c><00:09:31.639><c> put</c><00:09:32.120><c> out</c><00:09:32.149><c> a</c>

00:09:32.259 --> 00:09:32.269 align:start position:0%
get through I'm gonna try and put out a
 

00:09:32.269 --> 00:09:34.540 align:start position:0%
get through I'm gonna try and put out a
video<00:09:32.420><c> for</c><00:09:32.750><c> you</c><00:09:32.810><c> as</c><00:09:32.990><c> often</c><00:09:33.259><c> as</c><00:09:33.560><c> possible</c><00:09:33.620><c> so</c>

00:09:34.540 --> 00:09:34.550 align:start position:0%
video for you as often as possible so
 

00:09:34.550 --> 00:09:35.740 align:start position:0%
video for you as often as possible so
make<00:09:34.730><c> sure</c><00:09:34.759><c> that</c><00:09:34.880><c> you</c><00:09:35.029><c> subscribe</c><00:09:35.209><c> if</c><00:09:35.600><c> you</c>

00:09:35.740 --> 00:09:35.750 align:start position:0%
make sure that you subscribe if you
 

00:09:35.750 --> 00:09:37.480 align:start position:0%
make sure that you subscribe if you
haven't<00:09:36.110><c> already</c><00:09:36.199><c> and</c><00:09:36.680><c> I</c><00:09:37.009><c> will</c><00:09:37.069><c> see</c><00:09:37.160><c> you</c><00:09:37.310><c> next</c>

00:09:37.480 --> 00:09:37.490 align:start position:0%
haven't already and I will see you next
 

00:09:37.490 --> 00:09:39.690 align:start position:0%
haven't already and I will see you next
time<00:09:37.579><c> goodbye</c>

00:09:39.690 --> 00:09:39.700 align:start position:0%
time goodbye
 

00:09:39.700 --> 00:10:03.710 align:start position:0%
time goodbye
[Music]

