WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.510 align:start position:0%
 
hey<00:00:00.080><c> what's</c><00:00:00.240><c> up</c><00:00:00.320><c> guys</c><00:00:00.640><c> my</c><00:00:00.799><c> name</c><00:00:00.960><c> is</c><00:00:01.120><c> asiana</c>

00:00:01.510 --> 00:00:01.520 align:start position:0%
hey what's up guys my name is asiana
 

00:00:01.520 --> 00:00:04.070 align:start position:0%
hey what's up guys my name is asiana
welcome<00:00:01.920><c> back</c><00:00:02.159><c> to</c><00:00:02.320><c> my</c><00:00:02.560><c> c</c><00:00:02.800><c> plus</c><00:00:03.040><c> plus</c><00:00:03.360><c> series</c>

00:00:04.070 --> 00:00:04.080 align:start position:0%
welcome back to my c plus plus series
 

00:00:04.080 --> 00:00:05.829 align:start position:0%
welcome back to my c plus plus series
so<00:00:04.400><c> continuing</c><00:00:04.880><c> on</c><00:00:05.120><c> with</c><00:00:05.279><c> our</c><00:00:05.440><c> journey</c>

00:00:05.829 --> 00:00:05.839 align:start position:0%
so continuing on with our journey
 

00:00:05.839 --> 00:00:07.349 align:start position:0%
so continuing on with our journey
through<00:00:06.240><c> data</c><00:00:06.560><c> structures</c><00:00:06.960><c> we're</c><00:00:07.120><c> going</c><00:00:07.279><c> to</c>

00:00:07.349 --> 00:00:07.359 align:start position:0%
through data structures we're going to
 

00:00:07.359 --> 00:00:10.230 align:start position:0%
through data structures we're going to
be<00:00:07.520><c> taking</c><00:00:07.839><c> a</c><00:00:07.919><c> look</c><00:00:08.080><c> at</c><00:00:08.320><c> dynamic</c><00:00:09.040><c> or</c><00:00:09.280><c> growable</c>

00:00:10.230 --> 00:00:10.240 align:start position:0%
be taking a look at dynamic or growable
 

00:00:10.240 --> 00:00:11.669 align:start position:0%
be taking a look at dynamic or growable
resizable<00:00:10.880><c> arrays</c><00:00:11.200><c> whatever</c><00:00:11.440><c> you</c><00:00:11.519><c> want</c><00:00:11.599><c> to</c>

00:00:11.669 --> 00:00:11.679 align:start position:0%
resizable arrays whatever you want to
 

00:00:11.679 --> 00:00:13.830 align:start position:0%
resizable arrays whatever you want to
call<00:00:11.920><c> them</c><00:00:12.160><c> essentially</c><00:00:12.639><c> the</c><00:00:12.880><c> scd</c><00:00:13.440><c> vector</c>

00:00:13.830 --> 00:00:13.840 align:start position:0%
call them essentially the scd vector
 

00:00:13.840 --> 00:00:14.310 align:start position:0%
call them essentially the scd vector
class

00:00:14.310 --> 00:00:14.320 align:start position:0%
class
 

00:00:14.320 --> 00:00:15.669 align:start position:0%
class
that's<00:00:14.639><c> given</c><00:00:14.880><c> to</c><00:00:14.960><c> us</c><00:00:15.200><c> as</c><00:00:15.280><c> part</c><00:00:15.440><c> of</c><00:00:15.519><c> the</c>

00:00:15.669 --> 00:00:15.679 align:start position:0%
that's given to us as part of the
 

00:00:15.679 --> 00:00:17.349 align:start position:0%
that's given to us as part of the
standard<00:00:15.920><c> template</c><00:00:16.320><c> library</c><00:00:16.960><c> now</c><00:00:17.119><c> this</c><00:00:17.279><c> is</c>

00:00:17.349 --> 00:00:17.359 align:start position:0%
standard template library now this is
 

00:00:17.359 --> 00:00:18.790 align:start position:0%
standard template library now this is
not<00:00:17.520><c> to</c><00:00:17.680><c> be</c><00:00:17.840><c> confused</c><00:00:18.160><c> with</c><00:00:18.320><c> a</c><00:00:18.400><c> more</c><00:00:18.560><c> common</c>

00:00:18.790 --> 00:00:18.800 align:start position:0%
not to be confused with a more common
 

00:00:18.800 --> 00:00:19.750 align:start position:0%
not to be confused with a more common
mathematical<00:00:19.359><c> term</c>

00:00:19.750 --> 00:00:19.760 align:start position:0%
mathematical term
 

00:00:19.760 --> 00:00:21.510 align:start position:0%
mathematical term
vector<00:00:20.080><c> which</c><00:00:20.240><c> usually</c><00:00:20.640><c> refers</c><00:00:20.960><c> to</c><00:00:21.119><c> some</c><00:00:21.359><c> kind</c>

00:00:21.510 --> 00:00:21.520 align:start position:0%
vector which usually refers to some kind
 

00:00:21.520 --> 00:00:23.830 align:start position:0%
vector which usually refers to some kind
of<00:00:21.680><c> direction</c><00:00:22.480><c> or</c><00:00:22.720><c> position</c>

00:00:23.830 --> 00:00:23.840 align:start position:0%
of direction or position
 

00:00:23.840 --> 00:00:26.310 align:start position:0%
of direction or position
in<00:00:24.080><c> two</c><00:00:24.400><c> three</c><00:00:24.720><c> or</c><00:00:24.880><c> four</c><00:00:25.119><c> dimensional</c><00:00:25.599><c> space</c><00:00:26.160><c> a</c>

00:00:26.310 --> 00:00:26.320 align:start position:0%
in two three or four dimensional space a
 

00:00:26.320 --> 00:00:27.589 align:start position:0%
in two three or four dimensional space a
vector<00:00:26.720><c> in</c><00:00:26.880><c> this</c><00:00:27.119><c> sense</c>

00:00:27.589 --> 00:00:27.599 align:start position:0%
vector in this sense
 

00:00:27.599 --> 00:00:30.150 align:start position:0%
vector in this sense
refers<00:00:28.000><c> to</c><00:00:28.320><c> just</c><00:00:28.800><c> an</c><00:00:29.199><c> array</c><00:00:29.840><c> and</c><00:00:29.920><c> this</c>

00:00:30.150 --> 00:00:30.160 align:start position:0%
refers to just an array and this
 

00:00:30.160 --> 00:00:32.069 align:start position:0%
refers to just an array and this
actually<00:00:30.480><c> also</c><00:00:30.720><c> has</c><00:00:30.880><c> a</c><00:00:30.960><c> mathematical</c><00:00:31.599><c> basis</c>

00:00:32.069 --> 00:00:32.079 align:start position:0%
actually also has a mathematical basis
 

00:00:32.079 --> 00:00:34.229 align:start position:0%
actually also has a mathematical basis
where<00:00:32.320><c> vector</c><00:00:32.640><c> can</c><00:00:32.880><c> also</c><00:00:33.200><c> be</c><00:00:33.360><c> defined</c>

00:00:34.229 --> 00:00:34.239 align:start position:0%
where vector can also be defined
 

00:00:34.239 --> 00:00:36.549 align:start position:0%
where vector can also be defined
as<00:00:34.480><c> an</c><00:00:34.640><c> ordered</c><00:00:34.960><c> sequence</c><00:00:35.440><c> of</c><00:00:35.600><c> values</c><00:00:36.239><c> which</c>

00:00:36.549 --> 00:00:36.559 align:start position:0%
as an ordered sequence of values which
 

00:00:36.559 --> 00:00:38.709 align:start position:0%
as an ordered sequence of values which
is<00:00:36.800><c> kind</c><00:00:37.040><c> of</c><00:00:37.120><c> what</c><00:00:37.360><c> this</c><00:00:37.600><c> contiguous</c><00:00:38.239><c> array</c>

00:00:38.709 --> 00:00:38.719 align:start position:0%
is kind of what this contiguous array
 

00:00:38.719 --> 00:00:40.549 align:start position:0%
is kind of what this contiguous array
is<00:00:39.120><c> if</c><00:00:39.200><c> you're</c><00:00:39.440><c> not</c><00:00:39.680><c> familiar</c><00:00:40.239><c> with</c>

00:00:40.549 --> 00:00:40.559 align:start position:0%
is if you're not familiar with
 

00:00:40.559 --> 00:00:42.389 align:start position:0%
is if you're not familiar with
scd-vector<00:00:41.360><c> i</c><00:00:41.440><c> suggest</c><00:00:41.840><c> that</c><00:00:41.920><c> you</c><00:00:42.079><c> check</c><00:00:42.320><c> out</c>

00:00:42.389 --> 00:00:42.399 align:start position:0%
scd-vector i suggest that you check out
 

00:00:42.399 --> 00:00:44.069 align:start position:0%
scd-vector i suggest that you check out
the<00:00:42.559><c> videos</c><00:00:42.879><c> that</c><00:00:42.960><c> i've</c><00:00:43.120><c> made</c><00:00:43.360><c> on</c><00:00:43.440><c> that</c><00:00:43.600><c> topic</c>

00:00:44.069 --> 00:00:44.079 align:start position:0%
the videos that i've made on that topic
 

00:00:44.079 --> 00:00:45.990 align:start position:0%
the videos that i've made on that topic
already<00:00:44.960><c> today</c><00:00:45.200><c> we're</c><00:00:45.360><c> going</c><00:00:45.440><c> to</c><00:00:45.520><c> be</c><00:00:45.680><c> taking</c><00:00:45.920><c> a</c>

00:00:45.990 --> 00:00:46.000 align:start position:0%
already today we're going to be taking a
 

00:00:46.000 --> 00:00:48.069 align:start position:0%
already today we're going to be taking a
look<00:00:46.160><c> at</c><00:00:46.239><c> how</c><00:00:46.480><c> we</c><00:00:46.640><c> can</c><00:00:46.960><c> write</c><00:00:47.360><c> something</c>

00:00:48.069 --> 00:00:48.079 align:start position:0%
look at how we can write something
 

00:00:48.079 --> 00:00:51.430 align:start position:0%
look at how we can write something
similar<00:00:48.719><c> to</c><00:00:49.280><c> the</c><00:00:49.600><c> scd</c><00:00:50.320><c> vector</c><00:00:50.800><c> class</c><00:00:51.280><c> we're</c>

00:00:51.430 --> 00:00:51.440 align:start position:0%
similar to the scd vector class we're
 

00:00:51.440 --> 00:00:52.950 align:start position:0%
similar to the scd vector class we're
going<00:00:51.600><c> to</c><00:00:51.680><c> be</c><00:00:51.840><c> writing</c><00:00:52.079><c> this</c><00:00:52.320><c> ourselves</c><00:00:52.800><c> from</c>

00:00:52.950 --> 00:00:52.960 align:start position:0%
going to be writing this ourselves from
 

00:00:52.960 --> 00:00:54.229 align:start position:0%
going to be writing this ourselves from
scratch<00:00:53.280><c> with</c><00:00:53.360><c> the</c><00:00:53.440><c> purpose</c><00:00:53.760><c> of</c><00:00:53.840><c> learning</c><00:00:54.160><c> a</c>

00:00:54.229 --> 00:00:54.239 align:start position:0%
scratch with the purpose of learning a
 

00:00:54.239 --> 00:00:55.110 align:start position:0%
scratch with the purpose of learning a
little<00:00:54.399><c> bit</c><00:00:54.559><c> more</c>

00:00:55.110 --> 00:00:55.120 align:start position:0%
little bit more
 

00:00:55.120 --> 00:00:56.950 align:start position:0%
little bit more
about<00:00:55.440><c> data</c><00:00:55.680><c> structures</c><00:00:56.160><c> and</c><00:00:56.320><c> about</c><00:00:56.559><c> how</c><00:00:56.719><c> this</c>

00:00:56.950 --> 00:00:56.960 align:start position:0%
about data structures and about how this
 

00:00:56.960 --> 00:00:58.549 align:start position:0%
about data structures and about how this
vector<00:00:57.280><c> class</c><00:00:57.760><c> works</c>

00:00:58.549 --> 00:00:58.559 align:start position:0%
vector class works
 

00:00:58.559 --> 00:01:00.470 align:start position:0%
vector class works
and<00:00:58.800><c> as</c><00:00:59.039><c> such</c><00:00:59.359><c> our</c><00:00:59.520><c> goal</c><00:00:59.760><c> is</c><00:00:59.920><c> to</c><00:01:00.000><c> essentially</c>

00:01:00.470 --> 00:01:00.480 align:start position:0%
and as such our goal is to essentially
 

00:01:00.480 --> 00:01:02.630 align:start position:0%
and as such our goal is to essentially
replicate<00:01:00.960><c> the</c><00:01:01.199><c> behavior</c><00:01:01.760><c> the</c><00:01:01.840><c> same</c><00:01:02.079><c> behavior</c>

00:01:02.630 --> 00:01:02.640 align:start position:0%
replicate the behavior the same behavior
 

00:01:02.640 --> 00:01:03.189 align:start position:0%
replicate the behavior the same behavior
of<00:01:02.879><c> that</c>

00:01:03.189 --> 00:01:03.199 align:start position:0%
of that
 

00:01:03.199 --> 00:01:05.030 align:start position:0%
of that
std<00:01:03.600><c> vector</c><00:01:03.920><c> class</c><00:01:04.239><c> so</c><00:01:04.400><c> that</c><00:01:04.479><c> you</c><00:01:04.640><c> should</c><00:01:04.879><c> be</c>

00:01:05.030 --> 00:01:05.040 align:start position:0%
std vector class so that you should be
 

00:01:05.040 --> 00:01:06.950 align:start position:0%
std vector class so that you should be
able<00:01:05.199><c> to</c><00:01:05.439><c> more</c><00:01:05.600><c> or</c><00:01:05.680><c> less</c><00:01:06.000><c> interchange</c><00:01:06.560><c> it</c>

00:01:06.950 --> 00:01:06.960 align:start position:0%
able to more or less interchange it
 

00:01:06.960 --> 00:01:09.190 align:start position:0%
able to more or less interchange it
we<00:01:07.119><c> did</c><00:01:07.280><c> the</c><00:01:07.360><c> same</c><00:01:07.760><c> thing</c><00:01:08.080><c> with</c><00:01:08.320><c> just</c><00:01:08.560><c> the</c><00:01:08.799><c> sc</c>

00:01:09.190 --> 00:01:09.200 align:start position:0%
we did the same thing with just the sc
 

00:01:09.200 --> 00:01:11.030 align:start position:0%
we did the same thing with just the sc
array<00:01:09.520><c> class</c><00:01:09.840><c> which</c><00:01:10.000><c> is</c><00:01:10.159><c> like</c><00:01:10.320><c> a</c><00:01:10.479><c> fixed</c>

00:01:11.030 --> 00:01:11.040 align:start position:0%
array class which is like a fixed
 

00:01:11.040 --> 00:01:13.270 align:start position:0%
array class which is like a fixed
size<00:01:11.280><c> stuck</c><00:01:11.680><c> out</c><00:01:12.000><c> array</c><00:01:12.640><c> check</c><00:01:12.880><c> out</c><00:01:13.040><c> that</c>

00:01:13.270 --> 00:01:13.280 align:start position:0%
size stuck out array check out that
 

00:01:13.280 --> 00:01:14.870 align:start position:0%
size stuck out array check out that
video<00:01:13.600><c> if</c><00:01:13.760><c> you</c><00:01:13.840><c> haven't</c><00:01:14.080><c> already</c><00:01:14.479><c> let's</c><00:01:14.720><c> talk</c>

00:01:14.870 --> 00:01:14.880 align:start position:0%
video if you haven't already let's talk
 

00:01:14.880 --> 00:01:16.230 align:start position:0%
video if you haven't already let's talk
a<00:01:14.960><c> little</c><00:01:15.119><c> bit</c><00:01:15.280><c> about</c><00:01:15.520><c> what</c><00:01:15.759><c> it</c><00:01:15.920><c> actually</c>

00:01:16.230 --> 00:01:16.240 align:start position:0%
a little bit about what it actually
 

00:01:16.240 --> 00:01:19.030 align:start position:0%
a little bit about what it actually
takes<00:01:16.640><c> to</c><00:01:16.880><c> write</c><00:01:17.200><c> a</c><00:01:17.439><c> vector</c><00:01:17.759><c> class</c><00:01:18.080><c> but</c><00:01:18.240><c> first</c>

00:01:19.030 --> 00:01:19.040 align:start position:0%
takes to write a vector class but first
 

00:01:19.040 --> 00:01:21.670 align:start position:0%
takes to write a vector class but first
this<00:01:19.280><c> video</c><00:01:19.680><c> is</c><00:01:20.080><c> sponsored</c><00:01:20.640><c> by</c><00:01:21.119><c> skillshare</c>

00:01:21.670 --> 00:01:21.680 align:start position:0%
this video is sponsored by skillshare
 

00:01:21.680 --> 00:01:22.550 align:start position:0%
this video is sponsored by skillshare
for<00:01:21.840><c> those</c><00:01:22.000><c> of</c><00:01:22.080><c> you</c><00:01:22.159><c> who</c><00:01:22.240><c> don't</c><00:01:22.400><c> know</c>

00:01:22.550 --> 00:01:22.560 align:start position:0%
for those of you who don't know
 

00:01:22.560 --> 00:01:23.990 align:start position:0%
for those of you who don't know
skillshare<00:01:23.119><c> is</c><00:01:23.280><c> a</c><00:01:23.439><c> massive</c>

00:01:23.990 --> 00:01:24.000 align:start position:0%
skillshare is a massive
 

00:01:24.000 --> 00:01:26.149 align:start position:0%
skillshare is a massive
online<00:01:24.400><c> learning</c><00:01:24.720><c> community</c><00:01:25.439><c> where</c><00:01:25.759><c> millions</c>

00:01:26.149 --> 00:01:26.159 align:start position:0%
online learning community where millions
 

00:01:26.159 --> 00:01:27.990 align:start position:0%
online learning community where millions
of<00:01:26.320><c> creative</c><00:01:26.799><c> and</c><00:01:27.040><c> curious</c><00:01:27.439><c> people</c><00:01:27.759><c> come</c>

00:01:27.990 --> 00:01:28.000 align:start position:0%
of creative and curious people come
 

00:01:28.000 --> 00:01:28.630 align:start position:0%
of creative and curious people come
together

00:01:28.630 --> 00:01:28.640 align:start position:0%
together
 

00:01:28.640 --> 00:01:31.190 align:start position:0%
together
to<00:01:28.799><c> take</c><00:01:28.960><c> the</c><00:01:29.119><c> next</c><00:01:29.439><c> step</c><00:01:29.759><c> in</c><00:01:30.159><c> their</c><00:01:30.479><c> creative</c>

00:01:31.190 --> 00:01:31.200 align:start position:0%
to take the next step in their creative
 

00:01:31.200 --> 00:01:33.109 align:start position:0%
to take the next step in their creative
journey<00:01:31.600><c> skillshare</c><00:01:32.159><c> has</c><00:01:32.400><c> thousands</c><00:01:32.960><c> of</c>

00:01:33.109 --> 00:01:33.119 align:start position:0%
journey skillshare has thousands of
 

00:01:33.119 --> 00:01:35.109 align:start position:0%
journey skillshare has thousands of
different<00:01:33.439><c> classes</c><00:01:33.920><c> for</c><00:01:34.000><c> you</c><00:01:34.159><c> to</c><00:01:34.240><c> choose</c><00:01:34.560><c> from</c>

00:01:35.109 --> 00:01:35.119 align:start position:0%
different classes for you to choose from
 

00:01:35.119 --> 00:01:35.990 align:start position:0%
different classes for you to choose from
whether<00:01:35.360><c> you're</c><00:01:35.520><c> interested</c><00:01:35.840><c> in</c>

00:01:35.990 --> 00:01:36.000 align:start position:0%
whether you're interested in
 

00:01:36.000 --> 00:01:38.550 align:start position:0%
whether you're interested in
illustration<00:01:37.040><c> or</c><00:01:37.360><c> photography</c><00:01:38.240><c> or</c>

00:01:38.550 --> 00:01:38.560 align:start position:0%
illustration or photography or
 

00:01:38.560 --> 00:01:41.190 align:start position:0%
illustration or photography or
even<00:01:38.880><c> just</c><00:01:39.439><c> something</c><00:01:39.920><c> as</c><00:01:40.159><c> simple</c><00:01:40.640><c> as</c><00:01:40.880><c> being</c>

00:01:41.190 --> 00:01:41.200 align:start position:0%
even just something as simple as being
 

00:01:41.200 --> 00:01:41.990 align:start position:0%
even just something as simple as being
productive

00:01:41.990 --> 00:01:42.000 align:start position:0%
productive
 

00:01:42.000 --> 00:01:44.469 align:start position:0%
productive
because<00:01:42.720><c> who</c><00:01:42.960><c> doesn't</c><00:01:43.360><c> have</c><00:01:43.680><c> issues</c><00:01:44.240><c> with</c>

00:01:44.469 --> 00:01:44.479 align:start position:0%
because who doesn't have issues with
 

00:01:44.479 --> 00:01:46.149 align:start position:0%
because who doesn't have issues with
that<00:01:44.799><c> i</c><00:01:44.960><c> really</c><00:01:45.200><c> like</c><00:01:45.439><c> how</c><00:01:45.600><c> most</c><00:01:45.840><c> of</c><00:01:45.920><c> their</c>

00:01:46.149 --> 00:01:46.159 align:start position:0%
that i really like how most of their
 

00:01:46.159 --> 00:01:47.990 align:start position:0%
that i really like how most of their
classes<00:01:46.640><c> are</c><00:01:46.799><c> really</c><00:01:47.200><c> high</c><00:01:47.439><c> quality</c><00:01:47.920><c> and</c>

00:01:47.990 --> 00:01:48.000 align:start position:0%
classes are really high quality and
 

00:01:48.000 --> 00:01:49.190 align:start position:0%
classes are really high quality and
they're<00:01:48.320><c> also</c>

00:01:49.190 --> 00:01:49.200 align:start position:0%
they're also
 

00:01:49.200 --> 00:01:51.350 align:start position:0%
they're also
nice<00:01:49.520><c> and</c><00:01:49.759><c> bite-sized</c><00:01:50.399><c> meaning</c><00:01:50.720><c> each</c><00:01:50.960><c> little</c>

00:01:51.350 --> 00:01:51.360 align:start position:0%
nice and bite-sized meaning each little
 

00:01:51.360 --> 00:01:53.429 align:start position:0%
nice and bite-sized meaning each little
episode<00:01:51.920><c> or</c><00:01:52.159><c> each</c><00:01:52.399><c> stage</c><00:01:52.720><c> of</c><00:01:52.880><c> the</c><00:01:52.960><c> class</c><00:01:53.280><c> can</c>

00:01:53.429 --> 00:01:53.439 align:start position:0%
episode or each stage of the class can
 

00:01:53.439 --> 00:01:54.149 align:start position:0%
episode or each stage of the class can
be<00:01:53.680><c> washed</c>

00:01:54.149 --> 00:01:54.159 align:start position:0%
be washed
 

00:01:54.159 --> 00:01:56.709 align:start position:0%
be washed
in<00:01:54.479><c> about</c><00:01:54.880><c> five</c><00:01:55.119><c> minutes</c><00:01:55.600><c> and</c><00:01:55.840><c> coming</c><00:01:56.159><c> in</c><00:01:56.399><c> at</c>

00:01:56.709 --> 00:01:56.719 align:start position:0%
in about five minutes and coming in at
 

00:01:56.719 --> 00:01:58.630 align:start position:0%
in about five minutes and coming in at
just<00:01:57.119><c> under</c><00:01:57.360><c> ten</c><00:01:57.600><c> dollars</c><00:01:58.000><c> a</c><00:01:58.079><c> month</c><00:01:58.320><c> for</c><00:01:58.479><c> an</c>

00:01:58.630 --> 00:01:58.640 align:start position:0%
just under ten dollars a month for an
 

00:01:58.640 --> 00:01:59.990 align:start position:0%
just under ten dollars a month for an
annual<00:01:59.040><c> subscription</c>

00:01:59.990 --> 00:02:00.000 align:start position:0%
annual subscription
 

00:02:00.000 --> 00:02:01.990 align:start position:0%
annual subscription
it's<00:02:00.159><c> a</c><00:02:00.320><c> great</c><00:02:00.640><c> way</c><00:02:00.880><c> to</c><00:02:01.119><c> add</c><00:02:01.439><c> a</c><00:02:01.600><c> few</c><00:02:01.759><c> more</c>

00:02:01.990 --> 00:02:02.000 align:start position:0%
it's a great way to add a few more
 

00:02:02.000 --> 00:02:03.109 align:start position:0%
it's a great way to add a few more
skills<00:02:02.640><c> into</c>

00:02:03.109 --> 00:02:03.119 align:start position:0%
skills into
 

00:02:03.119 --> 00:02:04.789 align:start position:0%
skills into
your<00:02:03.439><c> lives</c><00:02:03.840><c> skillshare</c><00:02:04.320><c> have</c><00:02:04.479><c> been</c><00:02:04.560><c> nice</c>

00:02:04.789 --> 00:02:04.799 align:start position:0%
your lives skillshare have been nice
 

00:02:04.799 --> 00:02:06.550 align:start position:0%
your lives skillshare have been nice
enough<00:02:05.040><c> to</c><00:02:05.200><c> offer</c><00:02:05.439><c> the</c><00:02:05.520><c> first</c><00:02:05.759><c> 1000</c><00:02:06.240><c> people</c>

00:02:06.550 --> 00:02:06.560 align:start position:0%
enough to offer the first 1000 people
 

00:02:06.560 --> 00:02:08.070 align:start position:0%
enough to offer the first 1000 people
who<00:02:06.719><c> sign</c><00:02:06.960><c> up</c><00:02:07.200><c> using</c><00:02:07.439><c> the</c><00:02:07.600><c> link</c><00:02:07.920><c> in</c><00:02:08.000><c> the</c>

00:02:08.070 --> 00:02:08.080 align:start position:0%
who sign up using the link in the
 

00:02:08.080 --> 00:02:09.190 align:start position:0%
who sign up using the link in the
description<00:02:08.479><c> below</c>

00:02:09.190 --> 00:02:09.200 align:start position:0%
description below
 

00:02:09.200 --> 00:02:11.990 align:start position:0%
description below
two<00:02:09.679><c> free</c><00:02:10.000><c> months</c><00:02:10.479><c> of</c><00:02:10.800><c> skillshare</c><00:02:11.440><c> premium</c>

00:02:11.990 --> 00:02:12.000 align:start position:0%
two free months of skillshare premium
 

00:02:12.000 --> 00:02:12.869 align:start position:0%
two free months of skillshare premium
two<00:02:12.160><c> months</c>

00:02:12.869 --> 00:02:12.879 align:start position:0%
two months
 

00:02:12.879 --> 00:02:15.110 align:start position:0%
two months
to<00:02:13.120><c> learn</c><00:02:13.440><c> whatever</c><00:02:13.920><c> you</c><00:02:14.080><c> like</c><00:02:14.720><c> check</c><00:02:14.879><c> out</c><00:02:15.040><c> the</c>

00:02:15.110 --> 00:02:15.120 align:start position:0%
to learn whatever you like check out the
 

00:02:15.120 --> 00:02:16.390 align:start position:0%
to learn whatever you like check out the
link<00:02:15.280><c> in</c><00:02:15.360><c> description</c><00:02:15.680><c> below</c><00:02:16.000><c> guys</c>

00:02:16.390 --> 00:02:16.400 align:start position:0%
link in description below guys
 

00:02:16.400 --> 00:02:17.910 align:start position:0%
link in description below guys
and<00:02:16.720><c> take</c><00:02:16.959><c> a</c><00:02:17.040><c> look</c><00:02:17.280><c> at</c><00:02:17.440><c> all</c><00:02:17.599><c> the</c><00:02:17.680><c> different</c>

00:02:17.910 --> 00:02:17.920 align:start position:0%
and take a look at all the different
 

00:02:17.920 --> 00:02:20.229 align:start position:0%
and take a look at all the different
classes<00:02:18.640><c> that</c><00:02:18.800><c> skillshare</c><00:02:19.440><c> has</c><00:02:19.680><c> to</c><00:02:19.920><c> offer</c>

00:02:20.229 --> 00:02:20.239 align:start position:0%
classes that skillshare has to offer
 

00:02:20.239 --> 00:02:21.270 align:start position:0%
classes that skillshare has to offer
speaking<00:02:20.640><c> of</c><00:02:20.720><c> learning</c>

00:02:21.270 --> 00:02:21.280 align:start position:0%
speaking of learning
 

00:02:21.280 --> 00:02:24.150 align:start position:0%
speaking of learning
what<00:02:21.440><c> does</c><00:02:21.680><c> it</c><00:02:22.000><c> actually</c><00:02:22.480><c> take</c><00:02:23.200><c> to</c><00:02:23.440><c> write</c><00:02:24.000><c> a</c>

00:02:24.150 --> 00:02:24.160 align:start position:0%
what does it actually take to write a
 

00:02:24.160 --> 00:02:26.229 align:start position:0%
what does it actually take to write a
vector<00:02:24.480><c> class</c><00:02:24.879><c> how</c><00:02:25.040><c> do</c><00:02:25.200><c> we</c><00:02:25.360><c> do</c><00:02:25.599><c> something</c><00:02:26.000><c> like</c>

00:02:26.229 --> 00:02:26.239 align:start position:0%
vector class how do we do something like
 

00:02:26.239 --> 00:02:26.630 align:start position:0%
vector class how do we do something like
this

00:02:26.630 --> 00:02:26.640 align:start position:0%
this
 

00:02:26.640 --> 00:02:28.470 align:start position:0%
this
now<00:02:26.800><c> personally</c><00:02:27.280><c> speaking</c><00:02:27.680><c> i</c><00:02:27.760><c> think</c><00:02:28.080><c> writing</c>

00:02:28.470 --> 00:02:28.480 align:start position:0%
now personally speaking i think writing
 

00:02:28.480 --> 00:02:29.910 align:start position:0%
now personally speaking i think writing
out<00:02:28.720><c> all</c><00:02:28.800><c> of</c><00:02:28.879><c> these</c><00:02:29.040><c> data</c><00:02:29.280><c> structures</c><00:02:29.680><c> even</c>

00:02:29.910 --> 00:02:29.920 align:start position:0%
out all of these data structures even
 

00:02:29.920 --> 00:02:31.190 align:start position:0%
out all of these data structures even
though<00:02:30.000><c> they</c><00:02:30.160><c> already</c><00:02:30.480><c> exist</c><00:02:30.800><c> and</c><00:02:30.959><c> you</c><00:02:31.040><c> don't</c>

00:02:31.190 --> 00:02:31.200 align:start position:0%
though they already exist and you don't
 

00:02:31.200 --> 00:02:32.550 align:start position:0%
though they already exist and you don't
definitely<00:02:31.519><c> need</c><00:02:31.680><c> to</c><00:02:31.760><c> do</c><00:02:32.000><c> this</c><00:02:32.160><c> to</c><00:02:32.319><c> actually</c>

00:02:32.550 --> 00:02:32.560 align:start position:0%
definitely need to do this to actually
 

00:02:32.560 --> 00:02:33.750 align:start position:0%
definitely need to do this to actually
write<00:02:32.720><c> any</c><00:02:32.959><c> programs</c>

00:02:33.750 --> 00:02:33.760 align:start position:0%
write any programs
 

00:02:33.760 --> 00:02:35.670 align:start position:0%
write any programs
doing<00:02:34.080><c> this</c><00:02:34.400><c> is</c><00:02:34.560><c> going</c><00:02:34.720><c> to</c><00:02:34.879><c> help</c><00:02:35.120><c> you</c><00:02:35.360><c> a</c><00:02:35.440><c> great</c>

00:02:35.670 --> 00:02:35.680 align:start position:0%
doing this is going to help you a great
 

00:02:35.680 --> 00:02:37.030 align:start position:0%
doing this is going to help you a great
deal<00:02:35.920><c> if</c><00:02:36.000><c> you're</c><00:02:36.160><c> learning</c><00:02:36.480><c> the</c><00:02:36.560><c> language</c><00:02:36.959><c> or</c>

00:02:37.030 --> 00:02:37.040 align:start position:0%
deal if you're learning the language or
 

00:02:37.040 --> 00:02:38.150 align:start position:0%
deal if you're learning the language or
if<00:02:37.200><c> you're</c><00:02:37.280><c> looking</c><00:02:37.599><c> at</c>

00:02:38.150 --> 00:02:38.160 align:start position:0%
if you're looking at
 

00:02:38.160 --> 00:02:40.150 align:start position:0%
if you're looking at
becoming<00:02:38.640><c> better</c><00:02:38.879><c> at</c><00:02:39.040><c> c</c><00:02:39.280><c> plus</c><00:02:39.519><c> plus</c><00:02:39.840><c> the</c><00:02:39.920><c> cool</c>

00:02:40.150 --> 00:02:40.160 align:start position:0%
becoming better at c plus plus the cool
 

00:02:40.160 --> 00:02:41.830 align:start position:0%
becoming better at c plus plus the cool
thing<00:02:40.319><c> with</c><00:02:40.480><c> data</c><00:02:40.800><c> structures</c><00:02:41.280><c> is</c><00:02:41.360><c> that</c><00:02:41.599><c> they</c>

00:02:41.830 --> 00:02:41.840 align:start position:0%
thing with data structures is that they
 

00:02:41.840 --> 00:02:42.229 align:start position:0%
thing with data structures is that they
deal

00:02:42.229 --> 00:02:42.239 align:start position:0%
deal
 

00:02:42.239 --> 00:02:44.550 align:start position:0%
deal
with<00:02:42.800><c> data</c><00:02:43.120><c> that's</c><00:02:43.519><c> what</c><00:02:43.840><c> you</c><00:02:44.160><c> should</c><00:02:44.400><c> be</c>

00:02:44.550 --> 00:02:44.560 align:start position:0%
with data that's what you should be
 

00:02:44.560 --> 00:02:45.509 align:start position:0%
with data that's what you should be
dealing<00:02:44.959><c> with</c>

00:02:45.509 --> 00:02:45.519 align:start position:0%
dealing with
 

00:02:45.519 --> 00:02:47.110 align:start position:0%
dealing with
and<00:02:45.680><c> thinking</c><00:02:46.000><c> about</c><00:02:46.400><c> when</c><00:02:46.640><c> you're</c><00:02:46.800><c> writing</c>

00:02:47.110 --> 00:02:47.120 align:start position:0%
and thinking about when you're writing
 

00:02:47.120 --> 00:02:48.790 align:start position:0%
and thinking about when you're writing
your<00:02:47.360><c> code</c><00:02:47.760><c> and</c><00:02:47.920><c> as</c><00:02:48.160><c> such</c>

00:02:48.790 --> 00:02:48.800 align:start position:0%
your code and as such
 

00:02:48.800 --> 00:02:50.550 align:start position:0%
your code and as such
even<00:02:49.040><c> though</c><00:02:49.200><c> something</c><00:02:49.760><c> as</c><00:02:49.920><c> simple</c><00:02:50.239><c> as</c><00:02:50.400><c> a</c>

00:02:50.550 --> 00:02:50.560 align:start position:0%
even though something as simple as a
 

00:02:50.560 --> 00:02:51.990 align:start position:0%
even though something as simple as a
vector<00:02:50.959><c> or</c><00:02:51.040><c> an</c><00:02:51.200><c> array</c>

00:02:51.990 --> 00:02:52.000 align:start position:0%
vector or an array
 

00:02:52.000 --> 00:02:53.750 align:start position:0%
vector or an array
might<00:02:52.319><c> seem</c><00:02:52.560><c> really</c><00:02:52.879><c> simple</c><00:02:53.360><c> you</c><00:02:53.519><c> can</c>

00:02:53.750 --> 00:02:53.760 align:start position:0%
might seem really simple you can
 

00:02:53.760 --> 00:02:55.350 align:start position:0%
might seem really simple you can
actually<00:02:54.400><c> extend</c><00:02:54.879><c> it</c>

00:02:55.350 --> 00:02:55.360 align:start position:0%
actually extend it
 

00:02:55.360 --> 00:02:56.710 align:start position:0%
actually extend it
quite<00:02:55.680><c> a</c><00:02:55.760><c> lot</c><00:02:56.000><c> i</c><00:02:56.080><c> mean</c><00:02:56.239><c> take</c><00:02:56.400><c> a</c><00:02:56.480><c> look</c><00:02:56.560><c> at</c><00:02:56.640><c> the</c>

00:02:56.710 --> 00:02:56.720 align:start position:0%
quite a lot i mean take a look at the
 

00:02:56.720 --> 00:02:59.030 align:start position:0%
quite a lot i mean take a look at the
standard<00:02:57.040><c> template</c><00:02:57.440><c> library</c><00:02:57.760><c> code</c><00:02:58.080><c> it's</c><00:02:58.319><c> so</c>

00:02:59.030 --> 00:02:59.040 align:start position:0%
standard template library code it's so
 

00:02:59.040 --> 00:03:01.670 align:start position:0%
standard template library code it's so
big<00:02:59.440><c> and</c><00:02:59.680><c> complex</c><00:03:00.400><c> because</c><00:03:00.879><c> it</c><00:03:01.040><c> deals</c><00:03:01.360><c> with</c>

00:03:01.670 --> 00:03:01.680 align:start position:0%
big and complex because it deals with
 

00:03:01.680 --> 00:03:03.270 align:start position:0%
big and complex because it deals with
every<00:03:02.080><c> little</c><00:03:02.319><c> corner</c><00:03:02.720><c> case</c>

00:03:03.270 --> 00:03:03.280 align:start position:0%
every little corner case
 

00:03:03.280 --> 00:03:04.949 align:start position:0%
every little corner case
it<00:03:03.440><c> deals</c><00:03:03.840><c> really</c><00:03:04.080><c> with</c><00:03:04.319><c> everything</c><00:03:04.720><c> and</c><00:03:04.879><c> it</c>

00:03:04.949 --> 00:03:04.959 align:start position:0%
it deals really with everything and it
 

00:03:04.959 --> 00:03:06.550 align:start position:0%
it deals really with everything and it
supports<00:03:05.440><c> all</c><00:03:05.519><c> of</c><00:03:05.599><c> the</c><00:03:05.680><c> newest</c><00:03:06.080><c> language</c>

00:03:06.550 --> 00:03:06.560 align:start position:0%
supports all of the newest language
 

00:03:06.560 --> 00:03:07.190 align:start position:0%
supports all of the newest language
features

00:03:07.190 --> 00:03:07.200 align:start position:0%
features
 

00:03:07.200 --> 00:03:08.869 align:start position:0%
features
so<00:03:07.440><c> even</c><00:03:07.599><c> if</c><00:03:07.760><c> you</c><00:03:07.840><c> think</c><00:03:08.080><c> writing</c><00:03:08.400><c> a</c><00:03:08.480><c> vector</c>

00:03:08.869 --> 00:03:08.879 align:start position:0%
so even if you think writing a vector
 

00:03:08.879 --> 00:03:10.710 align:start position:0%
so even if you think writing a vector
might<00:03:09.040><c> be</c><00:03:09.280><c> a</c><00:03:09.360><c> little</c><00:03:09.599><c> bit</c><00:03:09.760><c> too</c><00:03:10.000><c> simple</c><00:03:10.319><c> for</c><00:03:10.480><c> you</c>

00:03:10.710 --> 00:03:10.720 align:start position:0%
might be a little bit too simple for you
 

00:03:10.720 --> 00:03:12.710 align:start position:0%
might be a little bit too simple for you
think<00:03:10.959><c> again</c><00:03:11.360><c> because</c><00:03:11.599><c> i'm</c><00:03:11.840><c> sure</c><00:03:12.159><c> you</c><00:03:12.319><c> can</c><00:03:12.480><c> get</c>

00:03:12.710 --> 00:03:12.720 align:start position:0%
think again because i'm sure you can get
 

00:03:12.720 --> 00:03:13.190 align:start position:0%
think again because i'm sure you can get
a<00:03:12.800><c> lot</c>

00:03:13.190 --> 00:03:13.200 align:start position:0%
a lot
 

00:03:13.200 --> 00:03:14.630 align:start position:0%
a lot
out<00:03:13.360><c> of</c><00:03:13.440><c> it</c><00:03:13.599><c> i</c><00:03:13.760><c> also</c><00:03:14.000><c> think</c><00:03:14.159><c> that</c><00:03:14.319><c> a</c><00:03:14.400><c> good</c><00:03:14.480><c> way</c>

00:03:14.630 --> 00:03:14.640 align:start position:0%
out of it i also think that a good way
 

00:03:14.640 --> 00:03:16.390 align:start position:0%
out of it i also think that a good way
to<00:03:14.720><c> follow</c><00:03:15.040><c> this</c><00:03:15.280><c> series</c><00:03:15.680><c> as</c><00:03:15.840><c> we</c><00:03:16.080><c> start</c>

00:03:16.390 --> 00:03:16.400 align:start position:0%
to follow this series as we start
 

00:03:16.400 --> 00:03:17.990 align:start position:0%
to follow this series as we start
exploring<00:03:16.800><c> more</c><00:03:16.959><c> and</c><00:03:17.040><c> more</c><00:03:17.200><c> data</c><00:03:17.519><c> structures</c>

00:03:17.990 --> 00:03:18.000 align:start position:0%
exploring more and more data structures
 

00:03:18.000 --> 00:03:21.670 align:start position:0%
exploring more and more data structures
is<00:03:18.159><c> to</c><00:03:18.400><c> try</c><00:03:18.800><c> and</c><00:03:19.120><c> write</c><00:03:19.920><c> it</c><00:03:20.400><c> on</c><00:03:20.720><c> your</c><00:03:21.120><c> own</c><00:03:21.440><c> pause</c>

00:03:21.670 --> 00:03:21.680 align:start position:0%
is to try and write it on your own pause
 

00:03:21.680 --> 00:03:23.110 align:start position:0%
is to try and write it on your own pause
the<00:03:21.840><c> video</c><00:03:22.159><c> right</c><00:03:22.319><c> now</c><00:03:22.640><c> and</c><00:03:22.800><c> try</c><00:03:22.959><c> and</c>

00:03:23.110 --> 00:03:23.120 align:start position:0%
the video right now and try and
 

00:03:23.120 --> 00:03:24.630 align:start position:0%
the video right now and try and
implement<00:03:23.519><c> your</c><00:03:23.760><c> own</c><00:03:23.920><c> vector</c><00:03:24.239><c> class</c>

00:03:24.630 --> 00:03:24.640 align:start position:0%
implement your own vector class
 

00:03:24.640 --> 00:03:26.229 align:start position:0%
implement your own vector class
first<00:03:25.040><c> think</c><00:03:25.200><c> about</c><00:03:25.360><c> what</c><00:03:25.519><c> a</c><00:03:25.680><c> vector</c><00:03:25.920><c> class</c>

00:03:26.229 --> 00:03:26.239 align:start position:0%
first think about what a vector class
 

00:03:26.239 --> 00:03:27.830 align:start position:0%
first think about what a vector class
actually<00:03:26.560><c> is</c><00:03:26.720><c> we'll</c><00:03:26.879><c> cover</c><00:03:27.120><c> that</c><00:03:27.360><c> in</c><00:03:27.519><c> just</c><00:03:27.760><c> a</c>

00:03:27.830 --> 00:03:27.840 align:start position:0%
actually is we'll cover that in just a
 

00:03:27.840 --> 00:03:28.550 align:start position:0%
actually is we'll cover that in just a
second

00:03:28.550 --> 00:03:28.560 align:start position:0%
second
 

00:03:28.560 --> 00:03:30.789 align:start position:0%
second
and<00:03:28.799><c> try</c><00:03:29.120><c> and</c><00:03:29.360><c> write</c><00:03:29.680><c> it</c><00:03:29.920><c> out</c><00:03:30.159><c> yourself</c><00:03:30.720><c> and</c>

00:03:30.789 --> 00:03:30.799 align:start position:0%
and try and write it out yourself and
 

00:03:30.799 --> 00:03:31.990 align:start position:0%
and try and write it out yourself and
then<00:03:30.959><c> compare</c><00:03:31.360><c> your</c><00:03:31.519><c> solution</c>

00:03:31.990 --> 00:03:32.000 align:start position:0%
then compare your solution
 

00:03:32.000 --> 00:03:33.750 align:start position:0%
then compare your solution
with<00:03:32.159><c> mine</c><00:03:32.400><c> that's</c><00:03:32.560><c> a</c><00:03:32.640><c> really</c><00:03:32.879><c> good</c><00:03:33.120><c> exercise</c>

00:03:33.750 --> 00:03:33.760 align:start position:0%
with mine that's a really good exercise
 

00:03:33.760 --> 00:03:35.110 align:start position:0%
with mine that's a really good exercise
and<00:03:33.920><c> it's</c><00:03:34.080><c> also</c><00:03:34.319><c> a</c><00:03:34.400><c> good</c><00:03:34.640><c> way</c>

00:03:35.110 --> 00:03:35.120 align:start position:0%
and it's also a good way
 

00:03:35.120 --> 00:03:36.470 align:start position:0%
and it's also a good way
to<00:03:35.280><c> make</c><00:03:35.440><c> sure</c><00:03:35.599><c> that</c><00:03:35.760><c> you're</c><00:03:36.000><c> actually</c>

00:03:36.470 --> 00:03:36.480 align:start position:0%
to make sure that you're actually
 

00:03:36.480 --> 00:03:38.789 align:start position:0%
to make sure that you're actually
thinking<00:03:36.959><c> about</c><00:03:37.200><c> how</c><00:03:37.360><c> to</c><00:03:37.519><c> do</c><00:03:37.680><c> things</c><00:03:38.000><c> yourself</c>

00:03:38.789 --> 00:03:38.799 align:start position:0%
thinking about how to do things yourself
 

00:03:38.799 --> 00:03:40.550 align:start position:0%
thinking about how to do things yourself
and<00:03:39.120><c> learning</c><00:03:39.519><c> instead</c><00:03:39.840><c> of</c><00:03:40.000><c> just</c><00:03:40.159><c> copying</c>

00:03:40.550 --> 00:03:40.560 align:start position:0%
and learning instead of just copying
 

00:03:40.560 --> 00:03:42.550 align:start position:0%
and learning instead of just copying
down<00:03:40.799><c> my</c><00:03:41.040><c> code</c><00:03:41.440><c> and</c><00:03:41.599><c> moving</c><00:03:42.000><c> on</c><00:03:42.239><c> with</c><00:03:42.400><c> your</c>

00:03:42.550 --> 00:03:42.560 align:start position:0%
down my code and moving on with your
 

00:03:42.560 --> 00:03:42.949 align:start position:0%
down my code and moving on with your
life

00:03:42.949 --> 00:03:42.959 align:start position:0%
life
 

00:03:42.959 --> 00:03:44.710 align:start position:0%
life
so<00:03:43.120><c> what</c><00:03:43.280><c> is</c><00:03:43.440><c> this</c><00:03:43.680><c> vector</c><00:03:44.080><c> data</c><00:03:44.400><c> structure</c>

00:03:44.710 --> 00:03:44.720 align:start position:0%
so what is this vector data structure
 

00:03:44.720 --> 00:03:46.869 align:start position:0%
so what is this vector data structure
well<00:03:44.959><c> i</c><00:03:45.120><c> mentioned</c><00:03:45.519><c> that</c><00:03:45.680><c> it</c><00:03:45.840><c> is</c><00:03:46.000><c> a</c><00:03:46.159><c> resizable</c>

00:03:46.869 --> 00:03:46.879 align:start position:0%
well i mentioned that it is a resizable
 

00:03:46.879 --> 00:03:47.509 align:start position:0%
well i mentioned that it is a resizable
array

00:03:47.509 --> 00:03:47.519 align:start position:0%
array
 

00:03:47.519 --> 00:03:49.509 align:start position:0%
array
and<00:03:47.599><c> that's</c><00:03:47.840><c> probably</c><00:03:48.319><c> the</c><00:03:48.879><c> the</c><00:03:49.200><c> biggest</c>

00:03:49.509 --> 00:03:49.519 align:start position:0%
and that's probably the the biggest
 

00:03:49.519 --> 00:03:50.550 align:start position:0%
and that's probably the the biggest
thing<00:03:49.760><c> to</c><00:03:49.920><c> note</c><00:03:50.159><c> here</c>

00:03:50.550 --> 00:03:50.560 align:start position:0%
thing to note here
 

00:03:50.560 --> 00:03:52.470 align:start position:0%
thing to note here
but<00:03:50.799><c> the</c><00:03:50.959><c> other</c><00:03:51.200><c> huge</c><00:03:51.519><c> thing</c><00:03:51.760><c> that</c><00:03:51.920><c> i</c><00:03:52.080><c> think</c><00:03:52.319><c> of</c>

00:03:52.470 --> 00:03:52.480 align:start position:0%
but the other huge thing that i think of
 

00:03:52.480 --> 00:03:54.869 align:start position:0%
but the other huge thing that i think of
when<00:03:52.720><c> i</c><00:03:52.799><c> think</c><00:03:53.120><c> of</c><00:03:53.280><c> the</c><00:03:53.439><c> scd</c><00:03:53.920><c> vector</c><00:03:54.239><c> class</c>

00:03:54.869 --> 00:03:54.879 align:start position:0%
when i think of the scd vector class
 

00:03:54.879 --> 00:03:57.350 align:start position:0%
when i think of the scd vector class
is<00:03:55.040><c> that</c><00:03:55.200><c> the</c><00:03:55.360><c> data</c><00:03:55.760><c> there</c><00:03:56.080><c> is</c><00:03:56.319><c> heap</c><00:03:56.720><c> allocated</c>

00:03:57.350 --> 00:03:57.360 align:start position:0%
is that the data there is heap allocated
 

00:03:57.360 --> 00:03:59.429 align:start position:0%
is that the data there is heap allocated
this<00:03:57.599><c> is</c><00:03:57.840><c> a</c><00:03:57.920><c> direct</c><00:03:58.319><c> contrast</c><00:03:58.879><c> to</c><00:03:59.040><c> what</c><00:03:59.120><c> we</c><00:03:59.280><c> had</c>

00:03:59.429 --> 00:03:59.439 align:start position:0%
this is a direct contrast to what we had
 

00:03:59.439 --> 00:04:01.110 align:start position:0%
this is a direct contrast to what we had
with<00:03:59.680><c> the</c><00:03:59.840><c> standard</c><00:04:00.239><c> array</c><00:04:00.560><c> class</c>

00:04:01.110 --> 00:04:01.120 align:start position:0%
with the standard array class
 

00:04:01.120 --> 00:04:03.670 align:start position:0%
with the standard array class
because<00:04:01.519><c> that</c><00:04:01.840><c> was</c><00:04:02.159><c> completely</c><00:04:02.720><c> on</c><00:04:02.799><c> the</c><00:04:03.040><c> stack</c>

00:04:03.670 --> 00:04:03.680 align:start position:0%
because that was completely on the stack
 

00:04:03.680 --> 00:04:05.670 align:start position:0%
because that was completely on the stack
as<00:04:03.920><c> such</c><00:04:04.159><c> it</c><00:04:04.239><c> was</c><00:04:04.400><c> completely</c><00:04:04.959><c> fixed</c><00:04:05.360><c> it</c><00:04:05.519><c> was</c>

00:04:05.670 --> 00:04:05.680 align:start position:0%
as such it was completely fixed it was
 

00:04:05.680 --> 00:04:07.429 align:start position:0%
as such it was completely fixed it was
not<00:04:05.920><c> only</c><00:04:06.239><c> fixed</c><00:04:06.480><c> but</c><00:04:06.720><c> we</c><00:04:06.879><c> had</c><00:04:07.040><c> to</c><00:04:07.200><c> actually</c>

00:04:07.429 --> 00:04:07.439 align:start position:0%
not only fixed but we had to actually
 

00:04:07.439 --> 00:04:08.710 align:start position:0%
not only fixed but we had to actually
determine<00:04:07.920><c> the</c><00:04:08.000><c> size</c>

00:04:08.710 --> 00:04:08.720 align:start position:0%
determine the size
 

00:04:08.720 --> 00:04:10.949 align:start position:0%
determine the size
at<00:04:08.879><c> compile</c><00:04:09.439><c> time</c><00:04:09.680><c> whereas</c><00:04:10.000><c> with</c><00:04:10.239><c> vector</c>

00:04:10.949 --> 00:04:10.959 align:start position:0%
at compile time whereas with vector
 

00:04:10.959 --> 00:04:12.550 align:start position:0%
at compile time whereas with vector
apart<00:04:11.280><c> from</c><00:04:11.439><c> being</c><00:04:11.680><c> dynamic</c><00:04:12.239><c> so</c><00:04:12.400><c> we</c><00:04:12.480><c> don't</c>

00:04:12.550 --> 00:04:12.560 align:start position:0%
apart from being dynamic so we don't
 

00:04:12.560 --> 00:04:13.990 align:start position:0%
apart from being dynamic so we don't
even<00:04:12.799><c> have</c><00:04:12.879><c> to</c><00:04:13.040><c> think</c><00:04:13.280><c> about</c><00:04:13.439><c> the</c><00:04:13.599><c> size</c>

00:04:13.990 --> 00:04:14.000 align:start position:0%
even have to think about the size
 

00:04:14.000 --> 00:04:16.390 align:start position:0%
even have to think about the size
if<00:04:14.080><c> we</c><00:04:14.239><c> don't</c><00:04:14.480><c> want</c><00:04:14.720><c> to</c><00:04:15.200><c> although</c><00:04:15.760><c> we</c><00:04:16.000><c> can</c><00:04:16.239><c> we</c>

00:04:16.390 --> 00:04:16.400 align:start position:0%
if we don't want to although we can we
 

00:04:16.400 --> 00:04:18.229 align:start position:0%
if we don't want to although we can we
have<00:04:16.560><c> that</c><00:04:16.799><c> option</c><00:04:17.120><c> to</c><00:04:17.280><c> kind</c><00:04:17.519><c> of</c>

00:04:18.229 --> 00:04:18.239 align:start position:0%
have that option to kind of
 

00:04:18.239 --> 00:04:21.270 align:start position:0%
have that option to kind of
initialize<00:04:18.799><c> it</c><00:04:18.959><c> with</c><00:04:19.280><c> a</c><00:04:19.519><c> given</c><00:04:20.000><c> size</c><00:04:20.799><c> but</c><00:04:21.040><c> even</c>

00:04:21.270 --> 00:04:21.280 align:start position:0%
initialize it with a given size but even
 

00:04:21.280 --> 00:04:23.030 align:start position:0%
initialize it with a given size but even
so<00:04:21.519><c> we</c><00:04:21.680><c> don't</c><00:04:21.840><c> have</c><00:04:21.919><c> to</c><00:04:22.079><c> think</c><00:04:22.240><c> about</c><00:04:22.479><c> the</c><00:04:22.720><c> size</c>

00:04:23.030 --> 00:04:23.040 align:start position:0%
so we don't have to think about the size
 

00:04:23.040 --> 00:04:24.550 align:start position:0%
so we don't have to think about the size
at<00:04:23.199><c> compile</c><00:04:23.680><c> time</c><00:04:23.919><c> because</c>

00:04:24.550 --> 00:04:24.560 align:start position:0%
at compile time because
 

00:04:24.560 --> 00:04:26.830 align:start position:0%
at compile time because
we<00:04:24.800><c> just</c><00:04:25.040><c> push</c><00:04:25.360><c> back</c><00:04:25.680><c> more</c><00:04:25.840><c> and</c><00:04:26.000><c> more</c><00:04:26.240><c> data</c><00:04:26.560><c> it</c>

00:04:26.830 --> 00:04:26.840 align:start position:0%
we just push back more and more data it
 

00:04:26.840 --> 00:04:28.070 align:start position:0%
we just push back more and more data it
resizes

00:04:28.070 --> 00:04:28.080 align:start position:0%
resizes
 

00:04:28.080 --> 00:04:30.710 align:start position:0%
resizes
everything<00:04:28.479><c> there</c><00:04:28.720><c> is</c><00:04:28.960><c> dynamic</c><00:04:29.600><c> and</c><00:04:30.000><c> runtime</c>

00:04:30.710 --> 00:04:30.720 align:start position:0%
everything there is dynamic and runtime
 

00:04:30.720 --> 00:04:32.629 align:start position:0%
everything there is dynamic and runtime
that<00:04:31.040><c> is</c><00:04:31.199><c> a</c><00:04:31.280><c> huge</c><00:04:31.600><c> difference</c><00:04:32.160><c> and</c><00:04:32.320><c> because</c><00:04:32.560><c> of</c>

00:04:32.629 --> 00:04:32.639 align:start position:0%
that is a huge difference and because of
 

00:04:32.639 --> 00:04:34.230 align:start position:0%
that is a huge difference and because of
that<00:04:32.800><c> there</c><00:04:32.960><c> are</c><00:04:33.040><c> so</c><00:04:33.280><c> many</c><00:04:33.520><c> reasons</c><00:04:33.919><c> why</c><00:04:34.160><c> you</c>

00:04:34.230 --> 00:04:34.240 align:start position:0%
that there are so many reasons why you
 

00:04:34.240 --> 00:04:36.230 align:start position:0%
that there are so many reasons why you
would<00:04:34.400><c> want</c><00:04:34.639><c> to</c><00:04:34.800><c> choose</c><00:04:35.199><c> the</c><00:04:35.440><c> array</c><00:04:35.840><c> class</c>

00:04:36.230 --> 00:04:36.240 align:start position:0%
would want to choose the array class
 

00:04:36.240 --> 00:04:37.590 align:start position:0%
would want to choose the array class
over<00:04:36.400><c> the</c><00:04:36.479><c> vector</c><00:04:36.800><c> class</c><00:04:37.199><c> because</c><00:04:37.360><c> if</c><00:04:37.520><c> you</c>

00:04:37.590 --> 00:04:37.600 align:start position:0%
over the vector class because if you
 

00:04:37.600 --> 00:04:38.390 align:start position:0%
over the vector class because if you
don't<00:04:37.840><c> need</c>

00:04:38.390 --> 00:04:38.400 align:start position:0%
don't need
 

00:04:38.400 --> 00:04:40.550 align:start position:0%
don't need
heap<00:04:38.639><c> allocations</c><00:04:39.360><c> then</c><00:04:39.919><c> don't</c><00:04:40.160><c> use</c><00:04:40.400><c> them</c>

00:04:40.550 --> 00:04:40.560 align:start position:0%
heap allocations then don't use them
 

00:04:40.560 --> 00:04:42.070 align:start position:0%
heap allocations then don't use them
they're<00:04:40.720><c> going</c><00:04:40.880><c> to</c><00:04:40.960><c> slow</c><00:04:41.199><c> down</c><00:04:41.360><c> your</c><00:04:41.520><c> program</c>

00:04:42.070 --> 00:04:42.080 align:start position:0%
they're going to slow down your program
 

00:04:42.080 --> 00:04:43.670 align:start position:0%
they're going to slow down your program
so<00:04:42.240><c> with</c><00:04:42.400><c> that</c><00:04:42.639><c> in</c><00:04:42.720><c> mind</c><00:04:42.880><c> the</c><00:04:43.040><c> core</c><00:04:43.199><c> mechanics</c>

00:04:43.670 --> 00:04:43.680 align:start position:0%
so with that in mind the core mechanics
 

00:04:43.680 --> 00:04:45.590 align:start position:0%
so with that in mind the core mechanics
of<00:04:43.840><c> a</c><00:04:43.919><c> vector</c><00:04:44.240><c> class</c><00:04:44.880><c> really</c><00:04:45.280><c> are</c>

00:04:45.590 --> 00:04:45.600 align:start position:0%
of a vector class really are
 

00:04:45.600 --> 00:04:47.670 align:start position:0%
of a vector class really are
quite<00:04:46.000><c> simple</c><00:04:46.560><c> if</c><00:04:46.720><c> you</c><00:04:46.800><c> think</c><00:04:46.960><c> about</c><00:04:47.199><c> them</c><00:04:47.600><c> i</c>

00:04:47.670 --> 00:04:47.680 align:start position:0%
quite simple if you think about them i
 

00:04:47.680 --> 00:04:48.950 align:start position:0%
quite simple if you think about them i
mean<00:04:48.000><c> all</c><00:04:48.160><c> we</c><00:04:48.320><c> really</c><00:04:48.560><c> need</c>

00:04:48.950 --> 00:04:48.960 align:start position:0%
mean all we really need
 

00:04:48.960 --> 00:04:51.510 align:start position:0%
mean all we really need
is<00:04:49.280><c> a</c><00:04:49.919><c> pointer</c><00:04:50.320><c> to</c><00:04:50.560><c> some</c><00:04:50.720><c> heap</c><00:04:51.040><c> allocated</c>

00:04:51.510 --> 00:04:51.520 align:start position:0%
is a pointer to some heap allocated
 

00:04:51.520 --> 00:04:52.150 align:start position:0%
is a pointer to some heap allocated
memory

00:04:52.150 --> 00:04:52.160 align:start position:0%
memory
 

00:04:52.160 --> 00:04:53.749 align:start position:0%
memory
that's<00:04:52.400><c> going</c><00:04:52.639><c> to</c><00:04:52.800><c> be</c><00:04:52.960><c> our</c><00:04:53.199><c> actual</c><00:04:53.520><c> data</c>

00:04:53.749 --> 00:04:53.759 align:start position:0%
that's going to be our actual data
 

00:04:53.759 --> 00:04:55.350 align:start position:0%
that's going to be our actual data
buffer<00:04:54.080><c> that's</c><00:04:54.320><c> where</c><00:04:54.479><c> we</c><00:04:54.639><c> store</c>

00:04:55.350 --> 00:04:55.360 align:start position:0%
buffer that's where we store
 

00:04:55.360 --> 00:04:57.189 align:start position:0%
buffer that's where we store
all<00:04:55.520><c> of</c><00:04:55.600><c> the</c><00:04:55.759><c> elements</c><00:04:56.160><c> inside</c><00:04:56.400><c> the</c><00:04:56.560><c> array</c><00:04:57.040><c> and</c>

00:04:57.189 --> 00:04:57.199 align:start position:0%
all of the elements inside the array and
 

00:04:57.199 --> 00:04:59.189 align:start position:0%
all of the elements inside the array and
as<00:04:57.360><c> we</c><00:04:57.600><c> keep</c><00:04:57.840><c> pushing</c><00:04:58.240><c> back</c><00:04:58.479><c> more</c><00:04:58.800><c> and</c><00:04:58.960><c> more</c>

00:04:59.189 --> 00:04:59.199 align:start position:0%
as we keep pushing back more and more
 

00:04:59.199 --> 00:05:00.950 align:start position:0%
as we keep pushing back more and more
elements<00:04:59.759><c> we're</c><00:04:59.919><c> going</c><00:05:00.160><c> to</c><00:05:00.240><c> get</c><00:05:00.400><c> to</c><00:05:00.560><c> a</c><00:05:00.720><c> point</c>

00:05:00.950 --> 00:05:00.960 align:start position:0%
elements we're going to get to a point
 

00:05:00.960 --> 00:05:02.390 align:start position:0%
elements we're going to get to a point
where<00:05:01.199><c> we</c><00:05:01.360><c> don't</c><00:05:01.680><c> have</c><00:05:01.919><c> enough</c>

00:05:02.390 --> 00:05:02.400 align:start position:0%
where we don't have enough
 

00:05:02.400 --> 00:05:04.870 align:start position:0%
where we don't have enough
room<00:05:02.960><c> to</c><00:05:03.199><c> store</c><00:05:03.680><c> our</c><00:05:03.919><c> new</c><00:05:04.240><c> element</c><00:05:04.639><c> because</c>

00:05:04.870 --> 00:05:04.880 align:start position:0%
room to store our new element because
 

00:05:04.880 --> 00:05:06.550 align:start position:0%
room to store our new element because
we've<00:05:05.120><c> obviously</c><00:05:05.440><c> allocated</c><00:05:06.000><c> a</c><00:05:06.080><c> fixed</c><00:05:06.320><c> size</c>

00:05:06.550 --> 00:05:06.560 align:start position:0%
we've obviously allocated a fixed size
 

00:05:06.560 --> 00:05:07.270 align:start position:0%
we've obviously allocated a fixed size
of<00:05:06.639><c> memory</c>

00:05:07.270 --> 00:05:07.280 align:start position:0%
of memory
 

00:05:07.280 --> 00:05:09.590 align:start position:0%
of memory
we<00:05:07.440><c> can't</c><00:05:07.680><c> just</c><00:05:08.080><c> grow</c><00:05:08.400><c> it</c><00:05:08.800><c> what</c><00:05:08.960><c> do</c><00:05:09.120><c> we</c><00:05:09.280><c> do</c><00:05:09.440><c> when</c>

00:05:09.590 --> 00:05:09.600 align:start position:0%
we can't just grow it what do we do when
 

00:05:09.600 --> 00:05:10.390 align:start position:0%
we can't just grow it what do we do when
we<00:05:09.840><c> hit</c>

00:05:10.390 --> 00:05:10.400 align:start position:0%
we hit
 

00:05:10.400 --> 00:05:12.950 align:start position:0%
we hit
that<00:05:10.880><c> wall</c><00:05:11.280><c> well</c><00:05:11.600><c> it's</c><00:05:11.919><c> pretty</c><00:05:12.240><c> simple</c><00:05:12.639><c> all</c><00:05:12.800><c> we</c>

00:05:12.950 --> 00:05:12.960 align:start position:0%
that wall well it's pretty simple all we
 

00:05:12.960 --> 00:05:14.790 align:start position:0%
that wall well it's pretty simple all we
really<00:05:13.199><c> need</c><00:05:13.360><c> to</c><00:05:13.520><c> do</c><00:05:13.759><c> is</c><00:05:14.000><c> allocate</c><00:05:14.479><c> a</c>

00:05:14.790 --> 00:05:14.800 align:start position:0%
really need to do is allocate a
 

00:05:14.800 --> 00:05:17.350 align:start position:0%
really need to do is allocate a
new<00:05:14.960><c> block</c><00:05:15.280><c> of</c><00:05:15.440><c> memory</c><00:05:16.160><c> that</c><00:05:16.479><c> has</c><00:05:16.720><c> enough</c><00:05:17.039><c> room</c>

00:05:17.350 --> 00:05:17.360 align:start position:0%
new block of memory that has enough room
 

00:05:17.360 --> 00:05:19.830 align:start position:0%
new block of memory that has enough room
for<00:05:17.520><c> this</c><00:05:17.759><c> new</c><00:05:18.000><c> element</c><00:05:18.400><c> and</c><00:05:18.560><c> possibly</c><00:05:19.039><c> more</c>

00:05:19.830 --> 00:05:19.840 align:start position:0%
for this new element and possibly more
 

00:05:19.840 --> 00:05:21.510 align:start position:0%
for this new element and possibly more
then<00:05:20.080><c> just</c><00:05:20.320><c> copy</c><00:05:20.639><c> across</c><00:05:21.120><c> all</c><00:05:21.199><c> of</c><00:05:21.360><c> our</c>

00:05:21.510 --> 00:05:21.520 align:start position:0%
then just copy across all of our
 

00:05:21.520 --> 00:05:23.110 align:start position:0%
then just copy across all of our
elements<00:05:21.919><c> from</c><00:05:22.080><c> our</c><00:05:22.240><c> old</c><00:05:22.400><c> block</c><00:05:22.639><c> of</c><00:05:22.720><c> memory</c>

00:05:23.110 --> 00:05:23.120 align:start position:0%
elements from our old block of memory
 

00:05:23.120 --> 00:05:24.710 align:start position:0%
elements from our old block of memory
into<00:05:23.280><c> our</c><00:05:23.440><c> new</c><00:05:23.600><c> block</c><00:05:23.840><c> of</c><00:05:23.919><c> memory</c>

00:05:24.710 --> 00:05:24.720 align:start position:0%
into our new block of memory
 

00:05:24.720 --> 00:05:27.110 align:start position:0%
into our new block of memory
and<00:05:24.800><c> then</c><00:05:25.039><c> delete</c><00:05:25.360><c> the</c><00:05:25.520><c> old</c><00:05:25.680><c> block</c><00:05:26.000><c> of</c><00:05:26.080><c> memory</c>

00:05:27.110 --> 00:05:27.120 align:start position:0%
and then delete the old block of memory
 

00:05:27.120 --> 00:05:28.870 align:start position:0%
and then delete the old block of memory
that's<00:05:27.440><c> it</c><00:05:27.600><c> now</c><00:05:27.759><c> if</c><00:05:27.919><c> i've</c><00:05:28.080><c> trained</c><00:05:28.320><c> you</c><00:05:28.560><c> well</c>

00:05:28.870 --> 00:05:28.880 align:start position:0%
that's it now if i've trained you well
 

00:05:28.880 --> 00:05:30.790 align:start position:0%
that's it now if i've trained you well
that<00:05:29.199><c> might</c><00:05:29.520><c> seem</c><00:05:29.840><c> like</c><00:05:30.080><c> a</c><00:05:30.240><c> lot</c>

00:05:30.790 --> 00:05:30.800 align:start position:0%
that might seem like a lot
 

00:05:30.800 --> 00:05:32.790 align:start position:0%
that might seem like a lot
i<00:05:30.880><c> mean</c><00:05:31.039><c> we're</c><00:05:31.280><c> allocating</c><00:05:31.840><c> this</c><00:05:32.320><c> larger</c>

00:05:32.790 --> 00:05:32.800 align:start position:0%
i mean we're allocating this larger
 

00:05:32.800 --> 00:05:34.710 align:start position:0%
i mean we're allocating this larger
block<00:05:33.039><c> of</c><00:05:33.120><c> memory</c><00:05:33.520><c> we're</c><00:05:33.759><c> copying</c><00:05:34.160><c> across</c><00:05:34.560><c> all</c>

00:05:34.710 --> 00:05:34.720 align:start position:0%
block of memory we're copying across all
 

00:05:34.720 --> 00:05:36.469 align:start position:0%
block of memory we're copying across all
the<00:05:34.960><c> elements</c><00:05:35.360><c> from</c><00:05:35.520><c> the</c><00:05:35.600><c> old</c><00:05:35.840><c> block</c><00:05:36.160><c> into</c><00:05:36.320><c> the</c>

00:05:36.469 --> 00:05:36.479 align:start position:0%
the elements from the old block into the
 

00:05:36.479 --> 00:05:37.670 align:start position:0%
the elements from the old block into the
new<00:05:36.639><c> block</c><00:05:36.960><c> of</c><00:05:37.039><c> memory</c>

00:05:37.670 --> 00:05:37.680 align:start position:0%
new block of memory
 

00:05:37.680 --> 00:05:39.670 align:start position:0%
new block of memory
then<00:05:37.919><c> freeing</c><00:05:38.240><c> the</c><00:05:38.320><c> old</c><00:05:38.479><c> block</c><00:05:38.639><c> memory</c><00:05:39.440><c> that</c>

00:05:39.670 --> 00:05:39.680 align:start position:0%
then freeing the old block memory that
 

00:05:39.680 --> 00:05:41.350 align:start position:0%
then freeing the old block memory that
kind<00:05:39.840><c> of</c><00:05:40.000><c> sounds</c><00:05:40.560><c> not</c><00:05:40.720><c> that</c><00:05:40.960><c> great</c><00:05:41.199><c> for</c>

00:05:41.350 --> 00:05:41.360 align:start position:0%
kind of sounds not that great for
 

00:05:41.360 --> 00:05:42.870 align:start position:0%
kind of sounds not that great for
performance<00:05:41.919><c> right</c>

00:05:42.870 --> 00:05:42.880 align:start position:0%
performance right
 

00:05:42.880 --> 00:05:45.189 align:start position:0%
performance right
right<00:05:43.440><c> that's</c><00:05:43.680><c> why</c><00:05:43.919><c> vector</c><00:05:44.160><c> resizing</c><00:05:44.880><c> and</c><00:05:45.039><c> all</c>

00:05:45.189 --> 00:05:45.199 align:start position:0%
right that's why vector resizing and all
 

00:05:45.199 --> 00:05:46.629 align:start position:0%
right that's why vector resizing and all
these<00:05:45.360><c> heap</c><00:05:45.600><c> allocations</c><00:05:46.160><c> really</c><00:05:46.400><c> aren't</c>

00:05:46.629 --> 00:05:46.639 align:start position:0%
these heap allocations really aren't
 

00:05:46.639 --> 00:05:47.830 align:start position:0%
these heap allocations really aren't
great<00:05:46.880><c> we</c><00:05:46.960><c> might</c><00:05:47.120><c> explore</c><00:05:47.440><c> them</c><00:05:47.600><c> in</c><00:05:47.680><c> more</c>

00:05:47.830 --> 00:05:47.840 align:start position:0%
great we might explore them in more
 

00:05:47.840 --> 00:05:49.350 align:start position:0%
great we might explore them in more
depth<00:05:48.080><c> a</c><00:05:48.160><c> little</c><00:05:48.320><c> bit</c><00:05:48.479><c> later</c><00:05:48.800><c> i</c><00:05:48.960><c> did</c><00:05:49.120><c> actually</c>

00:05:49.350 --> 00:05:49.360 align:start position:0%
depth a little bit later i did actually
 

00:05:49.360 --> 00:05:51.029 align:start position:0%
depth a little bit later i did actually
make<00:05:49.520><c> a</c><00:05:49.600><c> video</c><00:05:49.840><c> about</c><00:05:50.080><c> optimizing</c><00:05:50.639><c> the</c><00:05:50.720><c> usage</c>

00:05:51.029 --> 00:05:51.039 align:start position:0%
make a video about optimizing the usage
 

00:05:51.039 --> 00:05:52.150 align:start position:0%
make a video about optimizing the usage
of<00:05:51.280><c> std</c><00:05:51.600><c> vector</c>

00:05:52.150 --> 00:05:52.160 align:start position:0%
of std vector
 

00:05:52.160 --> 00:05:54.070 align:start position:0%
of std vector
to<00:05:52.320><c> try</c><00:05:52.479><c> and</c><00:05:52.639><c> avoid</c><00:05:52.960><c> these</c><00:05:53.280><c> resizes</c><00:05:53.840><c> because</c>

00:05:54.070 --> 00:05:54.080 align:start position:0%
to try and avoid these resizes because
 

00:05:54.080 --> 00:05:55.909 align:start position:0%
to try and avoid these resizes because
every<00:05:54.320><c> time</c><00:05:54.560><c> we</c><00:05:54.800><c> have</c><00:05:54.960><c> to</c><00:05:55.199><c> grow</c><00:05:55.600><c> our</c>

00:05:55.909 --> 00:05:55.919 align:start position:0%
every time we have to grow our
 

00:05:55.919 --> 00:05:58.710 align:start position:0%
every time we have to grow our
array<00:05:56.639><c> we</c><00:05:56.800><c> have</c><00:05:56.960><c> to</c><00:05:57.039><c> grow</c><00:05:57.199><c> our</c><00:05:57.360><c> vector</c><00:05:58.319><c> that's</c>

00:05:58.710 --> 00:05:58.720 align:start position:0%
array we have to grow our vector that's
 

00:05:58.720 --> 00:05:59.590 align:start position:0%
array we have to grow our vector that's
usually<00:05:59.199><c> not</c>

00:05:59.590 --> 00:05:59.600 align:start position:0%
usually not
 

00:05:59.600 --> 00:06:01.350 align:start position:0%
usually not
not<00:05:59.840><c> not</c><00:06:00.160><c> just</c><00:06:00.319><c> not</c><00:06:00.560><c> great</c><00:06:00.720><c> for</c><00:06:00.880><c> performance</c>

00:06:01.350 --> 00:06:01.360 align:start position:0%
not not just not great for performance
 

00:06:01.360 --> 00:06:02.950 align:start position:0%
not not just not great for performance
and<00:06:01.520><c> we</c><00:06:01.600><c> want</c><00:06:01.680><c> to</c><00:06:01.840><c> avoid</c><00:06:02.160><c> it</c><00:06:02.319><c> especially</c><00:06:02.800><c> if</c>

00:06:02.950 --> 00:06:02.960 align:start position:0%
and we want to avoid it especially if
 

00:06:02.960 --> 00:06:03.510 align:start position:0%
and we want to avoid it especially if
our

00:06:03.510 --> 00:06:03.520 align:start position:0%
our
 

00:06:03.520 --> 00:06:05.350 align:start position:0%
our
vector<00:06:03.919><c> happens</c><00:06:04.240><c> to</c><00:06:04.319><c> have</c><00:06:04.479><c> a</c><00:06:04.479><c> lot</c><00:06:04.639><c> of</c><00:06:04.800><c> elements</c>

00:06:05.350 --> 00:06:05.360 align:start position:0%
vector happens to have a lot of elements
 

00:06:05.360 --> 00:06:07.749 align:start position:0%
vector happens to have a lot of elements
inside<00:06:05.759><c> it</c><00:06:06.000><c> now</c><00:06:06.319><c> based</c><00:06:06.639><c> on</c><00:06:06.800><c> the</c><00:06:06.880><c> description</c>

00:06:07.749 --> 00:06:07.759 align:start position:0%
inside it now based on the description
 

00:06:07.759 --> 00:06:10.550 align:start position:0%
inside it now based on the description
that<00:06:07.919><c> i've</c><00:06:08.080><c> given</c><00:06:08.479><c> now</c><00:06:09.280><c> go</c><00:06:09.520><c> ahead</c><00:06:10.000><c> and</c><00:06:10.319><c> think</c>

00:06:10.550 --> 00:06:10.560 align:start position:0%
that i've given now go ahead and think
 

00:06:10.560 --> 00:06:12.469 align:start position:0%
that i've given now go ahead and think
about<00:06:10.800><c> how</c><00:06:10.960><c> you</c><00:06:11.039><c> would</c><00:06:11.280><c> implement</c><00:06:11.600><c> this</c><00:06:11.759><c> class</c>

00:06:12.469 --> 00:06:12.479 align:start position:0%
about how you would implement this class
 

00:06:12.479 --> 00:06:14.230 align:start position:0%
about how you would implement this class
and<00:06:12.720><c> if</c><00:06:12.960><c> you're</c><00:06:13.280><c> really</c><00:06:13.600><c> cool</c><00:06:13.840><c> maybe</c><00:06:14.080><c> you'll</c>

00:06:14.230 --> 00:06:14.240 align:start position:0%
and if you're really cool maybe you'll
 

00:06:14.240 --> 00:06:15.510 align:start position:0%
and if you're really cool maybe you'll
actually<00:06:14.560><c> try</c><00:06:14.800><c> and</c><00:06:14.880><c> write</c><00:06:15.120><c> it</c>

00:06:15.510 --> 00:06:15.520 align:start position:0%
actually try and write it
 

00:06:15.520 --> 00:06:17.670 align:start position:0%
actually try and write it
your<00:06:15.759><c> own</c><00:06:15.919><c> way</c><00:06:16.400><c> right</c><00:06:16.639><c> now</c><00:06:16.960><c> if</c><00:06:17.039><c> you're</c><00:06:17.280><c> serious</c>

00:06:17.670 --> 00:06:17.680 align:start position:0%
your own way right now if you're serious
 

00:06:17.680 --> 00:06:19.029 align:start position:0%
your own way right now if you're serious
about<00:06:17.919><c> getting</c><00:06:18.160><c> better</c><00:06:18.479><c> at</c><00:06:18.639><c> c</c>

00:06:19.029 --> 00:06:19.039 align:start position:0%
about getting better at c
 

00:06:19.039 --> 00:06:20.629 align:start position:0%
about getting better at c
plus<00:06:19.199><c> and</c><00:06:19.280><c> learning</c><00:06:19.520><c> all</c><00:06:19.759><c> these</c><00:06:19.919><c> things</c><00:06:20.400><c> then</c>

00:06:20.629 --> 00:06:20.639 align:start position:0%
plus and learning all these things then
 

00:06:20.639 --> 00:06:22.150 align:start position:0%
plus and learning all these things then
definitely<00:06:20.960><c> do</c><00:06:21.120><c> that</c><00:06:21.280><c> before</c><00:06:21.600><c> you</c><00:06:21.680><c> watch</c><00:06:22.000><c> the</c>

00:06:22.150 --> 00:06:22.160 align:start position:0%
definitely do that before you watch the
 

00:06:22.160 --> 00:06:22.950 align:start position:0%
definitely do that before you watch the
rest<00:06:22.560><c> of</c>

00:06:22.950 --> 00:06:22.960 align:start position:0%
rest of
 

00:06:22.960 --> 00:06:24.870 align:start position:0%
rest of
this<00:06:23.199><c> video</c><00:06:23.680><c> on</c><00:06:23.840><c> top</c><00:06:24.000><c> of</c><00:06:24.080><c> the</c><00:06:24.160><c> brief</c><00:06:24.479><c> overview</c>

00:06:24.870 --> 00:06:24.880 align:start position:0%
this video on top of the brief overview
 

00:06:24.880 --> 00:06:26.390 align:start position:0%
this video on top of the brief overview
that<00:06:25.039><c> i've</c><00:06:25.280><c> just</c><00:06:25.600><c> given</c>

00:06:26.390 --> 00:06:26.400 align:start position:0%
that i've just given
 

00:06:26.400 --> 00:06:28.070 align:start position:0%
that i've just given
there's<00:06:26.720><c> a</c><00:06:26.800><c> lot</c><00:06:26.960><c> of</c><00:06:27.120><c> optimizations</c><00:06:27.840><c> and</c><00:06:27.919><c> a</c><00:06:27.919><c> lot</c>

00:06:28.070 --> 00:06:28.080 align:start position:0%
there's a lot of optimizations and a lot
 

00:06:28.080 --> 00:06:30.070 align:start position:0%
there's a lot of optimizations and a lot
of<00:06:28.160><c> room</c><00:06:28.400><c> for</c><00:06:28.560><c> optimizations</c><00:06:29.440><c> for</c><00:06:29.600><c> example</c>

00:06:30.070 --> 00:06:30.080 align:start position:0%
of room for optimizations for example
 

00:06:30.080 --> 00:06:31.830 align:start position:0%
of room for optimizations for example
instead<00:06:30.319><c> of</c><00:06:30.560><c> copying</c><00:06:31.039><c> across</c><00:06:31.440><c> all</c><00:06:31.600><c> of</c><00:06:31.680><c> the</c>

00:06:31.830 --> 00:06:31.840 align:start position:0%
instead of copying across all of the
 

00:06:31.840 --> 00:06:33.430 align:start position:0%
instead of copying across all of the
elements<00:06:32.240><c> from</c><00:06:32.400><c> the</c><00:06:32.479><c> old</c><00:06:32.800><c> block</c><00:06:33.039><c> into</c><00:06:33.199><c> the</c><00:06:33.280><c> new</c>

00:06:33.430 --> 00:06:33.440 align:start position:0%
elements from the old block into the new
 

00:06:33.440 --> 00:06:33.990 align:start position:0%
elements from the old block into the new
block

00:06:33.990 --> 00:06:34.000 align:start position:0%
block
 

00:06:34.000 --> 00:06:35.909 align:start position:0%
block
it's<00:06:34.160><c> a</c><00:06:34.240><c> lot</c><00:06:34.479><c> better</c><00:06:34.720><c> to</c><00:06:34.880><c> try</c><00:06:35.120><c> and</c><00:06:35.360><c> move</c><00:06:35.680><c> those</c>

00:06:35.909 --> 00:06:35.919 align:start position:0%
it's a lot better to try and move those
 

00:06:35.919 --> 00:06:37.909 align:start position:0%
it's a lot better to try and move those
elements<00:06:36.639><c> from</c><00:06:36.800><c> the</c><00:06:36.880><c> odd</c><00:06:37.120><c> block</c><00:06:37.440><c> into</c><00:06:37.680><c> the</c><00:06:37.759><c> new</c>

00:06:37.909 --> 00:06:37.919 align:start position:0%
elements from the odd block into the new
 

00:06:37.919 --> 00:06:39.990 align:start position:0%
elements from the odd block into the new
block<00:06:38.319><c> using</c><00:06:38.560><c> move</c><00:06:38.800><c> semantics</c><00:06:39.360><c> which</c><00:06:39.600><c> i</c><00:06:39.759><c> also</c>

00:06:39.990 --> 00:06:40.000 align:start position:0%
block using move semantics which i also
 

00:06:40.000 --> 00:06:40.790 align:start position:0%
block using move semantics which i also
talked<00:06:40.240><c> about</c>

00:06:40.790 --> 00:06:40.800 align:start position:0%
talked about
 

00:06:40.800 --> 00:06:42.710 align:start position:0%
talked about
in<00:06:40.960><c> a</c><00:06:41.120><c> recent</c><00:06:41.600><c> video</c><00:06:42.000><c> if</c><00:06:42.160><c> you're</c><00:06:42.319><c> storing</c><00:06:42.639><c> a</c>

00:06:42.710 --> 00:06:42.720 align:start position:0%
in a recent video if you're storing a
 

00:06:42.720 --> 00:06:44.870 align:start position:0%
in a recent video if you're storing a
vector<00:06:43.120><c> of</c><00:06:43.520><c> a</c><00:06:43.600><c> thousand</c><00:06:44.080><c> strings</c><00:06:44.560><c> and</c><00:06:44.720><c> you</c>

00:06:44.870 --> 00:06:44.880 align:start position:0%
vector of a thousand strings and you
 

00:06:44.880 --> 00:06:46.309 align:start position:0%
vector of a thousand strings and you
move<00:06:45.120><c> them</c><00:06:45.280><c> instead</c><00:06:45.520><c> of</c><00:06:45.600><c> copying</c><00:06:45.919><c> them</c><00:06:46.160><c> for</c>

00:06:46.309 --> 00:06:46.319 align:start position:0%
move them instead of copying them for
 

00:06:46.319 --> 00:06:46.870 align:start position:0%
move them instead of copying them for
example

00:06:46.870 --> 00:06:46.880 align:start position:0%
example
 

00:06:46.880 --> 00:06:48.230 align:start position:0%
example
that's<00:06:47.120><c> going</c><00:06:47.280><c> to</c><00:06:47.520><c> provide</c><00:06:47.840><c> a</c><00:06:48.000><c> huge</c>

00:06:48.230 --> 00:06:48.240 align:start position:0%
that's going to provide a huge
 

00:06:48.240 --> 00:06:50.469 align:start position:0%
that's going to provide a huge
performance<00:06:48.800><c> benefit</c><00:06:49.360><c> so</c><00:06:49.599><c> definitely</c>

00:06:50.469 --> 00:06:50.479 align:start position:0%
performance benefit so definitely
 

00:06:50.479 --> 00:06:52.950 align:start position:0%
performance benefit so definitely
move<00:06:50.800><c> instead</c><00:06:51.120><c> of</c><00:06:51.280><c> copy</c><00:06:52.000><c> in</c><00:06:52.160><c> that</c><00:06:52.400><c> case</c><00:06:52.800><c> but</c>

00:06:52.950 --> 00:06:52.960 align:start position:0%
move instead of copy in that case but
 

00:06:52.960 --> 00:06:54.309 align:start position:0%
move instead of copy in that case but
anyway<00:06:53.360><c> as</c><00:06:53.520><c> i</c><00:06:53.680><c> mentioned</c>

00:06:54.309 --> 00:06:54.319 align:start position:0%
anyway as i mentioned
 

00:06:54.319 --> 00:06:55.830 align:start position:0%
anyway as i mentioned
there<00:06:54.560><c> are</c><00:06:54.639><c> so</c><00:06:54.880><c> many</c><00:06:55.039><c> things</c><00:06:55.280><c> we</c><00:06:55.360><c> could</c><00:06:55.520><c> add</c><00:06:55.759><c> to</c>

00:06:55.830 --> 00:06:55.840 align:start position:0%
there are so many things we could add to
 

00:06:55.840 --> 00:06:57.189 align:start position:0%
there are so many things we could add to
this<00:06:56.000><c> vector</c><00:06:56.319><c> class</c><00:06:56.639><c> and</c><00:06:56.720><c> this</c><00:06:56.880><c> video</c><00:06:57.039><c> will</c>

00:06:57.189 --> 00:06:57.199 align:start position:0%
this vector class and this video will
 

00:06:57.199 --> 00:06:58.629 align:start position:0%
this vector class and this video will
probably<00:06:57.440><c> be</c><00:06:57.680><c> hours</c><00:06:58.080><c> long</c>

00:06:58.629 --> 00:06:58.639 align:start position:0%
probably be hours long
 

00:06:58.639 --> 00:07:00.309 align:start position:0%
probably be hours long
what<00:06:58.800><c> we're</c><00:06:58.960><c> going</c><00:06:59.039><c> to</c><00:06:59.120><c> take</c><00:06:59.360><c> a</c><00:06:59.440><c> look</c><00:06:59.680><c> at</c><00:06:59.840><c> today</c>

00:07:00.309 --> 00:07:00.319 align:start position:0%
what we're going to take a look at today
 

00:07:00.319 --> 00:07:01.990 align:start position:0%
what we're going to take a look at today
is<00:07:00.479><c> a</c><00:07:00.720><c> basic</c><00:07:01.280><c> implementation</c>

00:07:01.990 --> 00:07:02.000 align:start position:0%
is a basic implementation
 

00:07:02.000 --> 00:07:03.670 align:start position:0%
is a basic implementation
with<00:07:02.240><c> just</c><00:07:02.479><c> the</c><00:07:02.720><c> base</c><00:07:03.039><c> features</c><00:07:03.440><c> that</c><00:07:03.599><c> you</c>

00:07:03.670 --> 00:07:03.680 align:start position:0%
with just the base features that you
 

00:07:03.680 --> 00:07:05.029 align:start position:0%
with just the base features that you
would<00:07:03.840><c> probably</c><00:07:04.240><c> want</c><00:07:04.400><c> to</c><00:07:04.560><c> implement</c>

00:07:05.029 --> 00:07:05.039 align:start position:0%
would probably want to implement
 

00:07:05.039 --> 00:07:07.589 align:start position:0%
would probably want to implement
first<00:07:05.680><c> in</c><00:07:05.840><c> a</c><00:07:05.919><c> vector</c><00:07:06.240><c> class</c><00:07:07.039><c> and</c><00:07:07.120><c> then</c><00:07:07.440><c> in</c><00:07:07.520><c> the</c>

00:07:07.589 --> 00:07:07.599 align:start position:0%
first in a vector class and then in the
 

00:07:07.599 --> 00:07:09.510 align:start position:0%
first in a vector class and then in the
future<00:07:07.919><c> we</c><00:07:08.080><c> may</c><00:07:08.240><c> revisit</c><00:07:08.639><c> this</c><00:07:08.880><c> and</c><00:07:09.039><c> extend</c><00:07:09.360><c> it</c>

00:07:09.510 --> 00:07:09.520 align:start position:0%
future we may revisit this and extend it
 

00:07:09.520 --> 00:07:10.710 align:start position:0%
future we may revisit this and extend it
a<00:07:09.599><c> little</c><00:07:09.759><c> bit</c><00:07:10.000><c> more</c><00:07:10.319><c> with</c>

00:07:10.710 --> 00:07:10.720 align:start position:0%
a little bit more with
 

00:07:10.720 --> 00:07:12.870 align:start position:0%
a little bit more with
some<00:07:10.880><c> of</c><00:07:10.960><c> the</c><00:07:11.120><c> more</c><00:07:11.440><c> advanced</c><00:07:12.240><c> features</c><00:07:12.720><c> so</c>

00:07:12.870 --> 00:07:12.880 align:start position:0%
some of the more advanced features so
 

00:07:12.880 --> 00:07:14.390 align:start position:0%
some of the more advanced features so
without<00:07:13.120><c> further</c><00:07:13.360><c> ado</c><00:07:13.680><c> let's</c><00:07:13.919><c> dive</c><00:07:14.160><c> in</c><00:07:14.319><c> and</c>

00:07:14.390 --> 00:07:14.400 align:start position:0%
without further ado let's dive in and
 

00:07:14.400 --> 00:07:16.550 align:start position:0%
without further ado let's dive in and
take<00:07:14.560><c> a</c><00:07:14.639><c> look</c><00:07:14.880><c> at</c><00:07:15.039><c> how</c><00:07:15.280><c> we</c><00:07:15.440><c> can</c><00:07:15.599><c> write</c><00:07:15.919><c> a</c><00:07:16.160><c> vector</c>

00:07:16.550 --> 00:07:16.560 align:start position:0%
take a look at how we can write a vector
 

00:07:16.560 --> 00:07:17.029 align:start position:0%
take a look at how we can write a vector
class

00:07:17.029 --> 00:07:17.039 align:start position:0%
class
 

00:07:17.039 --> 00:07:18.950 align:start position:0%
class
so<00:07:17.280><c> as</c><00:07:17.440><c> mentioned</c><00:07:17.840><c> last</c><00:07:18.080><c> time</c><00:07:18.240><c> we</c><00:07:18.400><c> took</c><00:07:18.639><c> a</c><00:07:18.720><c> look</c>

00:07:18.950 --> 00:07:18.960 align:start position:0%
so as mentioned last time we took a look
 

00:07:18.960 --> 00:07:20.550 align:start position:0%
so as mentioned last time we took a look
at<00:07:19.120><c> static</c><00:07:19.599><c> arrays</c><00:07:20.000><c> and</c><00:07:20.080><c> this</c><00:07:20.160><c> was</c><00:07:20.319><c> some</c><00:07:20.479><c> of</c>

00:07:20.550 --> 00:07:20.560 align:start position:0%
at static arrays and this was some of
 

00:07:20.560 --> 00:07:22.309 align:start position:0%
at static arrays and this was some of
the<00:07:20.720><c> example</c><00:07:21.120><c> code</c><00:07:21.360><c> that</c><00:07:21.520><c> we</c><00:07:21.680><c> used</c>

00:07:22.309 --> 00:07:22.319 align:start position:0%
the example code that we used
 

00:07:22.319 --> 00:07:24.950 align:start position:0%
the example code that we used
to<00:07:22.479><c> test</c><00:07:22.800><c> that</c><00:07:22.960><c> out</c><00:07:23.520><c> i</c><00:07:23.759><c> really</c><00:07:24.080><c> like</c><00:07:24.639><c> writing</c>

00:07:24.950 --> 00:07:24.960 align:start position:0%
to test that out i really like writing
 

00:07:24.960 --> 00:07:26.710 align:start position:0%
to test that out i really like writing
down<00:07:25.199><c> some</c><00:07:25.440><c> example</c><00:07:25.840><c> code</c><00:07:26.080><c> for</c><00:07:26.240><c> a</c><00:07:26.319><c> class</c><00:07:26.560><c> that</c>

00:07:26.710 --> 00:07:26.720 align:start position:0%
down some example code for a class that
 

00:07:26.720 --> 00:07:28.309 align:start position:0%
down some example code for a class that
i'm<00:07:26.880><c> about</c><00:07:27.120><c> to</c><00:07:27.280><c> write</c><00:07:27.520><c> in</c><00:07:27.599><c> a</c><00:07:27.680><c> lot</c><00:07:27.759><c> of</c><00:07:27.840><c> cases</c>

00:07:28.309 --> 00:07:28.319 align:start position:0%
i'm about to write in a lot of cases
 

00:07:28.319 --> 00:07:30.469 align:start position:0%
i'm about to write in a lot of cases
because<00:07:28.560><c> it</c><00:07:28.720><c> helps</c><00:07:29.120><c> a</c><00:07:29.280><c> lot</c><00:07:29.520><c> with</c><00:07:29.680><c> the</c><00:07:29.840><c> api</c>

00:07:30.469 --> 00:07:30.479 align:start position:0%
because it helps a lot with the api
 

00:07:30.479 --> 00:07:32.550 align:start position:0%
because it helps a lot with the api
design<00:07:31.280><c> so</c><00:07:31.440><c> what</c><00:07:31.599><c> i'll</c><00:07:31.759><c> do</c><00:07:31.919><c> here</c><00:07:32.240><c> is</c><00:07:32.400><c> i'll</c>

00:07:32.550 --> 00:07:32.560 align:start position:0%
design so what i'll do here is i'll
 

00:07:32.560 --> 00:07:33.909 align:start position:0%
design so what i'll do here is i'll
pretend<00:07:32.880><c> that</c><00:07:32.960><c> the</c><00:07:33.039><c> vector</c><00:07:33.360><c> class</c><00:07:33.599><c> already</c>

00:07:33.909 --> 00:07:33.919 align:start position:0%
pretend that the vector class already
 

00:07:33.919 --> 00:07:35.270 align:start position:0%
pretend that the vector class already
exists<00:07:34.240><c> even</c><00:07:34.400><c> though</c><00:07:34.560><c> it</c><00:07:34.639><c> doesn't</c>

00:07:35.270 --> 00:07:35.280 align:start position:0%
exists even though it doesn't
 

00:07:35.280 --> 00:07:37.189 align:start position:0%
exists even though it doesn't
and<00:07:35.520><c> let's</c><00:07:35.759><c> go</c><00:07:35.919><c> ahead</c><00:07:36.160><c> and</c><00:07:36.319><c> write</c><00:07:36.560><c> down</c><00:07:36.880><c> this</c>

00:07:37.189 --> 00:07:37.199 align:start position:0%
and let's go ahead and write down this
 

00:07:37.199 --> 00:07:39.189 align:start position:0%
and let's go ahead and write down this
exact<00:07:37.599><c> same</c><00:07:37.919><c> example</c><00:07:38.479><c> basically</c><00:07:38.960><c> i'll</c><00:07:39.039><c> just</c>

00:07:39.189 --> 00:07:39.199 align:start position:0%
exact same example basically i'll just
 

00:07:39.199 --> 00:07:40.390 align:start position:0%
exact same example basically i'll just
call<00:07:39.440><c> this</c><00:07:39.680><c> vector</c>

00:07:40.390 --> 00:07:40.400 align:start position:0%
call this vector
 

00:07:40.400 --> 00:07:42.710 align:start position:0%
call this vector
and<00:07:40.560><c> then</c><00:07:40.880><c> i'm</c><00:07:41.039><c> just</c><00:07:41.280><c> going</c><00:07:41.520><c> to</c><00:07:42.080><c> use</c><00:07:42.319><c> it</c><00:07:42.479><c> as</c><00:07:42.639><c> i</c>

00:07:42.710 --> 00:07:42.720 align:start position:0%
and then i'm just going to use it as i
 

00:07:42.720 --> 00:07:44.629 align:start position:0%
and then i'm just going to use it as i
would<00:07:42.880><c> with</c><00:07:43.039><c> a</c><00:07:43.120><c> vector</c><00:07:43.599><c> so</c><00:07:43.840><c> i'll</c><00:07:44.000><c> push</c><00:07:44.319><c> back</c>

00:07:44.629 --> 00:07:44.639 align:start position:0%
would with a vector so i'll push back
 

00:07:44.639 --> 00:07:46.230 align:start position:0%
would with a vector so i'll push back
maybe<00:07:45.039><c> a</c><00:07:45.199><c> string</c><00:07:45.599><c> here</c><00:07:45.840><c> called</c>

00:07:46.230 --> 00:07:46.240 align:start position:0%
maybe a string here called
 

00:07:46.240 --> 00:07:47.749 align:start position:0%
maybe a string here called
cherno<00:07:46.639><c> or</c><00:07:46.800><c> something</c><00:07:47.039><c> like</c><00:07:47.199><c> that</c><00:07:47.440><c> and</c><00:07:47.520><c> then</c>

00:07:47.749 --> 00:07:47.759 align:start position:0%
cherno or something like that and then
 

00:07:47.759 --> 00:07:49.830 align:start position:0%
cherno or something like that and then
of<00:07:47.840><c> course</c><00:07:48.160><c> i'll</c><00:07:48.400><c> also</c><00:07:48.879><c> push</c><00:07:49.120><c> back</c>

00:07:49.830 --> 00:07:49.840 align:start position:0%
of course i'll also push back
 

00:07:49.840 --> 00:07:52.550 align:start position:0%
of course i'll also push back
c<00:07:50.080><c> plus</c><00:07:50.319><c> plus</c><00:07:50.800><c> so</c><00:07:51.360><c> obviously</c><00:07:51.759><c> a</c><00:07:51.919><c> very</c><00:07:52.240><c> basic</c>

00:07:52.550 --> 00:07:52.560 align:start position:0%
c plus plus so obviously a very basic
 

00:07:52.560 --> 00:07:54.390 align:start position:0%
c plus plus so obviously a very basic
test<00:07:52.879><c> here</c><00:07:53.039><c> we're</c><00:07:53.120><c> going</c><00:07:53.280><c> to</c><00:07:53.360><c> expand</c><00:07:53.680><c> this</c><00:07:53.840><c> api</c>

00:07:54.390 --> 00:07:54.400 align:start position:0%
test here we're going to expand this api
 

00:07:54.400 --> 00:07:57.270 align:start position:0%
test here we're going to expand this api
a<00:07:54.479><c> lot</c><00:07:54.800><c> more</c><00:07:55.360><c> but</c><00:07:55.599><c> this</c><00:07:55.840><c> is</c><00:07:56.080><c> kind</c><00:07:56.319><c> of</c><00:07:56.479><c> like</c><00:07:56.800><c> my</c>

00:07:57.270 --> 00:07:57.280 align:start position:0%
a lot more but this is kind of like my
 

00:07:57.280 --> 00:07:57.990 align:start position:0%
a lot more but this is kind of like my
bare<00:07:57.520><c> bones</c>

00:07:57.990 --> 00:07:58.000 align:start position:0%
bare bones
 

00:07:58.000 --> 00:07:59.510 align:start position:0%
bare bones
vector<00:07:58.319><c> class</c><00:07:58.720><c> we</c><00:07:58.800><c> should</c><00:07:58.960><c> be</c><00:07:59.120><c> able</c><00:07:59.199><c> to</c><00:07:59.360><c> just</c>

00:07:59.510 --> 00:07:59.520 align:start position:0%
vector class we should be able to just
 

00:07:59.520 --> 00:08:01.430 align:start position:0%
vector class we should be able to just
easily<00:07:59.840><c> create</c><00:08:00.160><c> it</c><00:08:00.240><c> like</c><00:08:00.479><c> this</c><00:08:00.800><c> with</c><00:08:01.120><c> no</c>

00:08:01.430 --> 00:08:01.440 align:start position:0%
easily create it like this with no
 

00:08:01.440 --> 00:08:02.790 align:start position:0%
easily create it like this with no
concept<00:08:01.919><c> of</c><00:08:02.080><c> size</c>

00:08:02.790 --> 00:08:02.800 align:start position:0%
concept of size
 

00:08:02.800 --> 00:08:04.469 align:start position:0%
concept of size
and<00:08:02.960><c> then</c><00:08:03.120><c> push</c><00:08:03.440><c> back</c><00:08:03.759><c> at</c><00:08:03.919><c> least</c><00:08:04.240><c> like</c><00:08:04.400><c> a</c>

00:08:04.469 --> 00:08:04.479 align:start position:0%
and then push back at least like a
 

00:08:04.479 --> 00:08:06.869 align:start position:0%
and then push back at least like a
couple<00:08:04.800><c> elements</c><00:08:05.680><c> and</c><00:08:05.919><c> see</c><00:08:06.160><c> it</c><00:08:06.400><c> hopefully</c>

00:08:06.869 --> 00:08:06.879 align:start position:0%
couple elements and see it hopefully
 

00:08:06.879 --> 00:08:08.469 align:start position:0%
couple elements and see it hopefully
grow<00:08:07.199><c> with</c><00:08:07.360><c> that</c><00:08:07.599><c> in</c><00:08:07.680><c> mind</c><00:08:08.000><c> now</c><00:08:08.160><c> what</c><00:08:08.400><c> i'm</c>

00:08:08.469 --> 00:08:08.479 align:start position:0%
grow with that in mind now what i'm
 

00:08:08.479 --> 00:08:10.070 align:start position:0%
grow with that in mind now what i'm
going<00:08:08.560><c> to</c><00:08:08.639><c> do</c><00:08:08.879><c> to</c><00:08:09.199><c> test</c><00:08:09.440><c> this</c><00:08:09.599><c> out</c>

00:08:10.070 --> 00:08:10.080 align:start position:0%
going to do to test this out
 

00:08:10.080 --> 00:08:12.309 align:start position:0%
going to do to test this out
is<00:08:10.240><c> i'll</c><00:08:10.479><c> also</c><00:08:11.199><c> type</c><00:08:11.520><c> in</c><00:08:11.680><c> something</c><00:08:12.080><c> like</c><00:08:12.240><c> a</c>

00:08:12.309 --> 00:08:12.319 align:start position:0%
is i'll also type in something like a
 

00:08:12.319 --> 00:08:13.990 align:start position:0%
is i'll also type in something like a
vector<00:08:12.639><c> i'll</c><00:08:12.800><c> add</c><00:08:13.039><c> a</c><00:08:13.120><c> third</c><00:08:13.440><c> element</c><00:08:13.759><c> here</c>

00:08:13.990 --> 00:08:14.000 align:start position:0%
vector i'll add a third element here
 

00:08:14.000 --> 00:08:15.189 align:start position:0%
vector i'll add a third element here
because<00:08:14.240><c> as</c><00:08:14.400><c> you'll</c><00:08:14.560><c> see</c><00:08:14.639><c> in</c><00:08:14.720><c> a</c><00:08:14.800><c> minute</c><00:08:15.039><c> we're</c>

00:08:15.189 --> 00:08:15.199 align:start position:0%
because as you'll see in a minute we're
 

00:08:15.199 --> 00:08:16.150 align:start position:0%
because as you'll see in a minute we're
actually<00:08:15.440><c> going</c><00:08:15.599><c> to</c>

00:08:16.150 --> 00:08:16.160 align:start position:0%
actually going to
 

00:08:16.160 --> 00:08:18.070 align:start position:0%
actually going to
initialize<00:08:16.720><c> our</c><00:08:16.879><c> vector</c><00:08:17.280><c> to</c><00:08:17.360><c> have</c><00:08:17.520><c> a</c><00:08:17.680><c> size</c><00:08:17.919><c> of</c>

00:08:18.070 --> 00:08:18.080 align:start position:0%
initialize our vector to have a size of
 

00:08:18.080 --> 00:08:19.430 align:start position:0%
initialize our vector to have a size of
two<00:08:18.720><c> by</c><00:08:18.879><c> default</c>

00:08:19.430 --> 00:08:19.440 align:start position:0%
two by default
 

00:08:19.440 --> 00:08:21.029 align:start position:0%
two by default
okay<00:08:19.680><c> so</c><00:08:19.759><c> now</c><00:08:19.919><c> that</c><00:08:20.000><c> we</c><00:08:20.160><c> have</c><00:08:20.319><c> a</c><00:08:20.400><c> very</c><00:08:20.720><c> basic</c>

00:08:21.029 --> 00:08:21.039 align:start position:0%
okay so now that we have a very basic
 

00:08:21.039 --> 00:08:23.110 align:start position:0%
okay so now that we have a very basic
example<00:08:21.919><c> let's</c><00:08:22.240><c> jump</c><00:08:22.479><c> into</c><00:08:22.800><c> this</c>

00:08:23.110 --> 00:08:23.120 align:start position:0%
example let's jump into this
 

00:08:23.120 --> 00:08:24.869 align:start position:0%
example let's jump into this
vector.h<00:08:23.759><c> file</c><00:08:23.919><c> which</c><00:08:24.080><c> is</c><00:08:24.240><c> completely</c><00:08:24.560><c> blank</c>

00:08:24.869 --> 00:08:24.879 align:start position:0%
vector.h file which is completely blank
 

00:08:24.879 --> 00:08:26.469 align:start position:0%
vector.h file which is completely blank
and<00:08:24.960><c> take</c><00:08:25.199><c> a</c><00:08:25.280><c> look</c><00:08:25.440><c> at</c><00:08:25.520><c> how</c><00:08:25.680><c> we</c><00:08:25.919><c> would</c><00:08:26.160><c> write</c>

00:08:26.469 --> 00:08:26.479 align:start position:0%
and take a look at how we would write
 

00:08:26.479 --> 00:08:27.270 align:start position:0%
and take a look at how we would write
this

00:08:27.270 --> 00:08:27.280 align:start position:0%
this
 

00:08:27.280 --> 00:08:28.469 align:start position:0%
this
so<00:08:27.520><c> obviously</c><00:08:27.840><c> it's</c><00:08:28.000><c> going</c><00:08:28.160><c> to</c><00:08:28.240><c> be</c><00:08:28.400><c> a</c>

00:08:28.469 --> 00:08:28.479 align:start position:0%
so obviously it's going to be a
 

00:08:28.479 --> 00:08:31.510 align:start position:0%
so obviously it's going to be a
templated<00:08:29.680><c> type</c><00:08:30.080><c> here</c><00:08:30.400><c> a</c><00:08:30.560><c> templated</c><00:08:31.039><c> class</c><00:08:31.360><c> i</c>

00:08:31.510 --> 00:08:31.520 align:start position:0%
templated type here a templated class i
 

00:08:31.520 --> 00:08:32.870 align:start position:0%
templated type here a templated class i
should<00:08:31.680><c> say</c><00:08:32.000><c> so</c><00:08:32.159><c> last</c><00:08:32.320><c> time</c><00:08:32.479><c> when</c><00:08:32.640><c> we</c><00:08:32.719><c> wrote</c>

00:08:32.870 --> 00:08:32.880 align:start position:0%
should say so last time when we wrote
 

00:08:32.880 --> 00:08:34.389 align:start position:0%
should say so last time when we wrote
this<00:08:33.039><c> array</c><00:08:33.279><c> class</c><00:08:33.519><c> we</c><00:08:33.680><c> actually</c><00:08:34.080><c> kind</c><00:08:34.320><c> of</c>

00:08:34.389 --> 00:08:34.399 align:start position:0%
this array class we actually kind of
 

00:08:34.399 --> 00:08:35.990 align:start position:0%
this array class we actually kind of
made<00:08:34.640><c> a</c><00:08:34.719><c> very</c><00:08:34.880><c> simple</c><00:08:35.120><c> version</c><00:08:35.440><c> of</c><00:08:35.599><c> it</c>

00:08:35.990 --> 00:08:36.000 align:start position:0%
made a very simple version of it
 

00:08:36.000 --> 00:08:37.670 align:start position:0%
made a very simple version of it
without<00:08:36.399><c> any</c><00:08:36.640><c> templates</c><00:08:37.120><c> so</c><00:08:37.200><c> if</c><00:08:37.360><c> templates</c>

00:08:37.670 --> 00:08:37.680 align:start position:0%
without any templates so if templates
 

00:08:37.680 --> 00:08:38.949 align:start position:0%
without any templates so if templates
are<00:08:37.760><c> still</c><00:08:37.919><c> something</c><00:08:38.240><c> that</c><00:08:38.320><c> confuse</c><00:08:38.719><c> you</c><00:08:38.880><c> a</c>

00:08:38.949 --> 00:08:38.959 align:start position:0%
are still something that confuse you a
 

00:08:38.959 --> 00:08:39.430 align:start position:0%
are still something that confuse you a
little<00:08:39.120><c> bit</c>

00:08:39.430 --> 00:08:39.440 align:start position:0%
little bit
 

00:08:39.440 --> 00:08:40.630 align:start position:0%
little bit
it's<00:08:39.599><c> probably</c><00:08:39.839><c> worth</c><00:08:40.080><c> going</c><00:08:40.240><c> back</c><00:08:40.399><c> to</c><00:08:40.479><c> that</c>

00:08:40.630 --> 00:08:40.640 align:start position:0%
it's probably worth going back to that
 

00:08:40.640 --> 00:08:41.990 align:start position:0%
it's probably worth going back to that
video<00:08:40.959><c> and</c><00:08:41.039><c> taking</c><00:08:41.360><c> a</c><00:08:41.440><c> look</c><00:08:41.599><c> at</c><00:08:41.680><c> how</c><00:08:41.839><c> i</c>

00:08:41.990 --> 00:08:42.000 align:start position:0%
video and taking a look at how i
 

00:08:42.000 --> 00:08:43.589 align:start position:0%
video and taking a look at how i
implemented<00:08:42.479><c> array</c><00:08:42.719><c> without</c><00:08:43.039><c> templates</c>

00:08:43.589 --> 00:08:43.599 align:start position:0%
implemented array without templates
 

00:08:43.599 --> 00:08:45.190 align:start position:0%
implemented array without templates
before<00:08:43.919><c> then</c><00:08:44.159><c> moving</c><00:08:44.399><c> on</c><00:08:44.560><c> to</c><00:08:44.720><c> templates</c>

00:08:45.190 --> 00:08:45.200 align:start position:0%
before then moving on to templates
 

00:08:45.200 --> 00:08:46.389 align:start position:0%
before then moving on to templates
because<00:08:45.360><c> i</c><00:08:45.440><c> think</c><00:08:45.519><c> that'll</c><00:08:45.839><c> probably</c><00:08:46.240><c> help</c>

00:08:46.389 --> 00:08:46.399 align:start position:0%
because i think that'll probably help
 

00:08:46.399 --> 00:08:47.430 align:start position:0%
because i think that'll probably help
you<00:08:46.560><c> out</c>

00:08:47.430 --> 00:08:47.440 align:start position:0%
you out
 

00:08:47.440 --> 00:08:50.230 align:start position:0%
you out
but<00:08:47.760><c> since</c><00:08:48.080><c> we're</c><00:08:48.480><c> big</c><00:08:48.720><c> boys</c><00:08:49.120><c> now</c><00:08:49.839><c> we're</c><00:08:50.000><c> going</c>

00:08:50.230 --> 00:08:50.240 align:start position:0%
but since we're big boys now we're going
 

00:08:50.240 --> 00:08:51.509 align:start position:0%
but since we're big boys now we're going
to<00:08:50.399><c> just</c><00:08:50.640><c> implement</c>

00:08:51.509 --> 00:08:51.519 align:start position:0%
to just implement
 

00:08:51.519 --> 00:08:54.310 align:start position:0%
to just implement
a<00:08:52.000><c> templated</c><00:08:52.480><c> version</c><00:08:52.880><c> of</c><00:08:53.040><c> the</c><00:08:53.200><c> vector</c><00:08:53.760><c> class</c>

00:08:54.310 --> 00:08:54.320 align:start position:0%
a templated version of the vector class
 

00:08:54.320 --> 00:08:56.070 align:start position:0%
a templated version of the vector class
here<00:08:54.560><c> so</c><00:08:54.800><c> obviously</c><00:08:55.040><c> you</c><00:08:55.040><c> need</c><00:08:55.200><c> a</c><00:08:55.279><c> constructor</c>

00:08:56.070 --> 00:08:56.080 align:start position:0%
here so obviously you need a constructor
 

00:08:56.080 --> 00:08:56.949 align:start position:0%
here so obviously you need a constructor
and<00:08:56.240><c> the</c><00:08:56.320><c> primary</c><00:08:56.640><c> thing</c><00:08:56.800><c> that</c><00:08:56.880><c> this</c>

00:08:56.949 --> 00:08:56.959 align:start position:0%
and the primary thing that this
 

00:08:56.959 --> 00:08:58.310 align:start position:0%
and the primary thing that this
constructor<00:08:57.440><c> has</c><00:08:57.600><c> to</c><00:08:57.760><c> do</c><00:08:57.920><c> is</c><00:08:58.000><c> actually</c>

00:08:58.310 --> 00:08:58.320 align:start position:0%
constructor has to do is actually
 

00:08:58.320 --> 00:09:00.310 align:start position:0%
constructor has to do is actually
allocate<00:08:58.720><c> some</c><00:08:58.880><c> memory</c><00:08:59.279><c> for</c><00:08:59.440><c> us</c><00:08:59.600><c> to</c><00:08:59.760><c> store</c>

00:09:00.310 --> 00:09:00.320 align:start position:0%
allocate some memory for us to store
 

00:09:00.320 --> 00:09:01.670 align:start position:0%
allocate some memory for us to store
now<00:09:00.480><c> you</c><00:09:00.560><c> don't</c><00:09:00.720><c> necessarily</c><00:09:01.279><c> have</c><00:09:01.440><c> to</c><00:09:01.519><c> do</c>

00:09:01.670 --> 00:09:01.680 align:start position:0%
now you don't necessarily have to do
 

00:09:01.680 --> 00:09:02.949 align:start position:0%
now you don't necessarily have to do
this<00:09:01.839><c> you</c><00:09:01.920><c> could</c><00:09:02.080><c> just</c><00:09:02.240><c> say</c><00:09:02.399><c> that</c><00:09:02.560><c> okay</c><00:09:02.800><c> if</c><00:09:02.880><c> we</c>

00:09:02.949 --> 00:09:02.959 align:start position:0%
this you could just say that okay if we
 

00:09:02.959 --> 00:09:04.230 align:start position:0%
this you could just say that okay if we
create<00:09:03.200><c> an</c><00:09:03.360><c> empty</c><00:09:03.600><c> vector</c>

00:09:04.230 --> 00:09:04.240 align:start position:0%
create an empty vector
 

00:09:04.240 --> 00:09:06.070 align:start position:0%
create an empty vector
then<00:09:04.640><c> no</c><00:09:04.880><c> memory</c><00:09:05.120><c> allocation</c><00:09:05.519><c> whatsoever</c>

00:09:06.070 --> 00:09:06.080 align:start position:0%
then no memory allocation whatsoever
 

00:09:06.080 --> 00:09:07.509 align:start position:0%
then no memory allocation whatsoever
only<00:09:06.320><c> when</c><00:09:06.480><c> we</c><00:09:06.560><c> push</c><00:09:06.800><c> back</c><00:09:06.959><c> that</c><00:09:07.200><c> first</c>

00:09:07.509 --> 00:09:07.519 align:start position:0%
only when we push back that first
 

00:09:07.519 --> 00:09:09.430 align:start position:0%
only when we push back that first
element<00:09:07.839><c> we'll</c><00:09:08.000><c> allocate</c><00:09:08.480><c> memory</c>

00:09:09.430 --> 00:09:09.440 align:start position:0%
element we'll allocate memory
 

00:09:09.440 --> 00:09:11.430 align:start position:0%
element we'll allocate memory
in<00:09:09.680><c> the</c><00:09:10.160><c> interest</c><00:09:10.640><c> of</c><00:09:10.720><c> keeping</c><00:09:11.040><c> this</c><00:09:11.200><c> a</c><00:09:11.279><c> little</c>

00:09:11.430 --> 00:09:11.440 align:start position:0%
in the interest of keeping this a little
 

00:09:11.440 --> 00:09:12.870 align:start position:0%
in the interest of keeping this a little
bit<00:09:11.600><c> more</c><00:09:11.760><c> simple</c><00:09:12.080><c> though</c><00:09:12.320><c> i</c><00:09:12.480><c> am</c><00:09:12.640><c> actually</c>

00:09:12.870 --> 00:09:12.880 align:start position:0%
bit more simple though i am actually
 

00:09:12.880 --> 00:09:14.790 align:start position:0%
bit more simple though i am actually
going<00:09:13.120><c> to</c><00:09:13.200><c> allocate</c><00:09:13.680><c> enough</c><00:09:14.000><c> room</c><00:09:14.240><c> for</c><00:09:14.480><c> two</c>

00:09:14.790 --> 00:09:14.800 align:start position:0%
going to allocate enough room for two
 

00:09:14.800 --> 00:09:16.230 align:start position:0%
going to allocate enough room for two
elements<00:09:15.200><c> here</c><00:09:15.519><c> just</c><00:09:15.680><c> because</c><00:09:15.920><c> this</c><00:09:16.080><c> will</c>

00:09:16.230 --> 00:09:16.240 align:start position:0%
elements here just because this will
 

00:09:16.240 --> 00:09:17.670 align:start position:0%
elements here just because this will
simplify<00:09:16.800><c> a</c><00:09:16.959><c> little</c><00:09:17.120><c> bit</c><00:09:17.279><c> of</c><00:09:17.360><c> the</c><00:09:17.440><c> whole</c>

00:09:17.670 --> 00:09:17.680 align:start position:0%
simplify a little bit of the whole
 

00:09:17.680 --> 00:09:19.590 align:start position:0%
simplify a little bit of the whole
growing<00:09:18.160><c> math</c><00:09:18.480><c> operations</c><00:09:18.959><c> that</c><00:09:19.120><c> we</c><00:09:19.279><c> end</c><00:09:19.440><c> up</c>

00:09:19.590 --> 00:09:19.600 align:start position:0%
growing math operations that we end up
 

00:09:19.600 --> 00:09:20.630 align:start position:0%
growing math operations that we end up
doing

00:09:20.630 --> 00:09:20.640 align:start position:0%
doing
 

00:09:20.640 --> 00:09:23.430 align:start position:0%
doing
so<00:09:20.880><c> what</c><00:09:21.279><c> exactly</c><00:09:21.920><c> does</c><00:09:22.160><c> a</c><00:09:22.320><c> vector</c><00:09:22.800><c> store</c><00:09:23.200><c> well</c>

00:09:23.430 --> 00:09:23.440 align:start position:0%
so what exactly does a vector store well
 

00:09:23.440 --> 00:09:24.389 align:start position:0%
so what exactly does a vector store well
an<00:09:23.600><c> array</c><00:09:23.920><c> of</c><00:09:24.000><c> course</c>

00:09:24.389 --> 00:09:24.399 align:start position:0%
an array of course
 

00:09:24.399 --> 00:09:26.710 align:start position:0%
an array of course
stores<00:09:24.800><c> just</c><00:09:24.959><c> a</c><00:09:25.040><c> stack</c><00:09:25.360><c> allocated</c><00:09:26.000><c> array</c><00:09:26.480><c> of</c>

00:09:26.710 --> 00:09:26.720 align:start position:0%
stores just a stack allocated array of
 

00:09:26.720 --> 00:09:27.829 align:start position:0%
stores just a stack allocated array of
this<00:09:27.040><c> type</c><00:09:27.360><c> here</c>

00:09:27.829 --> 00:09:27.839 align:start position:0%
this type here
 

00:09:27.839 --> 00:09:30.710 align:start position:0%
this type here
with<00:09:28.080><c> this</c><00:09:28.399><c> kind</c><00:09:28.640><c> of</c><00:09:28.959><c> compile</c><00:09:29.519><c> time</c><00:09:30.080><c> template</c>

00:09:30.710 --> 00:09:30.720 align:start position:0%
with this kind of compile time template
 

00:09:30.720 --> 00:09:31.829 align:start position:0%
with this kind of compile time template
parameter<00:09:31.279><c> size</c>

00:09:31.829 --> 00:09:31.839 align:start position:0%
parameter size
 

00:09:31.839 --> 00:09:34.949 align:start position:0%
parameter size
whereas<00:09:32.320><c> this</c><00:09:32.959><c> is</c><00:09:33.120><c> going</c><00:09:33.360><c> to</c><00:09:33.600><c> store</c><00:09:34.080><c> instead</c><00:09:34.640><c> a</c>

00:09:34.949 --> 00:09:34.959 align:start position:0%
whereas this is going to store instead a
 

00:09:34.959 --> 00:09:37.750 align:start position:0%
whereas this is going to store instead a
pointer<00:09:35.680><c> to</c><00:09:36.000><c> whatever</c><00:09:36.640><c> our</c><00:09:36.880><c> type</c><00:09:37.360><c> is</c><00:09:37.600><c> and</c>

00:09:37.750 --> 00:09:37.760 align:start position:0%
pointer to whatever our type is and
 

00:09:37.760 --> 00:09:38.630 align:start position:0%
pointer to whatever our type is and
we'll<00:09:37.920><c> call</c><00:09:38.080><c> this</c><00:09:38.399><c> m</c>

00:09:38.630 --> 00:09:38.640 align:start position:0%
we'll call this m
 

00:09:38.640 --> 00:09:40.550 align:start position:0%
we'll call this m
underscore<00:09:39.360><c> data</c><00:09:39.760><c> we'll</c><00:09:39.920><c> set</c><00:09:40.080><c> it</c><00:09:40.240><c> equal</c><00:09:40.399><c> to</c>

00:09:40.550 --> 00:09:40.560 align:start position:0%
underscore data we'll set it equal to
 

00:09:40.560 --> 00:09:42.630 align:start position:0%
underscore data we'll set it equal to
null<00:09:40.800><c> pointer</c><00:09:41.279><c> by</c><00:09:41.440><c> default</c><00:09:42.000><c> just</c><00:09:42.160><c> so</c><00:09:42.320><c> that</c><00:09:42.480><c> our</c>

00:09:42.630 --> 00:09:42.640 align:start position:0%
null pointer by default just so that our
 

00:09:42.640 --> 00:09:44.230 align:start position:0%
null pointer by default just so that our
code<00:09:42.880><c> is</c><00:09:42.959><c> a</c><00:09:42.959><c> little</c><00:09:43.120><c> bit</c><00:09:43.279><c> easier</c><00:09:43.519><c> to</c><00:09:43.680><c> debug</c><00:09:44.160><c> and</c>

00:09:44.230 --> 00:09:44.240 align:start position:0%
code is a little bit easier to debug and
 

00:09:44.240 --> 00:09:46.310 align:start position:0%
code is a little bit easier to debug and
then<00:09:44.560><c> we</c><00:09:44.720><c> also</c><00:09:44.959><c> need</c><00:09:45.120><c> to</c><00:09:45.200><c> keep</c><00:09:45.440><c> track</c><00:09:45.680><c> of</c><00:09:45.920><c> two</c>

00:09:46.310 --> 00:09:46.320 align:start position:0%
then we also need to keep track of two
 

00:09:46.320 --> 00:09:48.070 align:start position:0%
then we also need to keep track of two
different<00:09:46.640><c> size</c><00:09:46.959><c> variables</c>

00:09:48.070 --> 00:09:48.080 align:start position:0%
different size variables
 

00:09:48.080 --> 00:09:49.430 align:start position:0%
different size variables
we<00:09:48.240><c> want</c><00:09:48.399><c> to</c><00:09:48.480><c> keep</c><00:09:48.640><c> track</c><00:09:48.880><c> of</c><00:09:49.040><c> a</c><00:09:49.120><c> variable</c>

00:09:49.430 --> 00:09:49.440 align:start position:0%
we want to keep track of a variable
 

00:09:49.440 --> 00:09:51.509 align:start position:0%
we want to keep track of a variable
called<00:09:50.000><c> size</c><00:09:50.480><c> which</c><00:09:50.720><c> is</c><00:09:50.800><c> going</c><00:09:51.040><c> to</c><00:09:51.200><c> be</c>

00:09:51.509 --> 00:09:51.519 align:start position:0%
called size which is going to be
 

00:09:51.519 --> 00:09:53.990 align:start position:0%
called size which is going to be
the<00:09:51.920><c> number</c><00:09:52.320><c> of</c><00:09:52.640><c> elements</c><00:09:53.120><c> that</c><00:09:53.360><c> are</c><00:09:53.519><c> actually</c>

00:09:53.990 --> 00:09:54.000 align:start position:0%
the number of elements that are actually
 

00:09:54.000 --> 00:09:55.190 align:start position:0%
the number of elements that are actually
inside<00:09:54.399><c> our</c><00:09:54.560><c> vector</c>

00:09:55.190 --> 00:09:55.200 align:start position:0%
inside our vector
 

00:09:55.200 --> 00:09:56.470 align:start position:0%
inside our vector
so<00:09:55.360><c> in</c><00:09:55.519><c> other</c><00:09:55.600><c> words</c><00:09:55.839><c> if</c><00:09:55.920><c> we</c><00:09:56.000><c> take</c><00:09:56.160><c> a</c><00:09:56.240><c> look</c><00:09:56.399><c> at</c>

00:09:56.470 --> 00:09:56.480 align:start position:0%
so in other words if we take a look at
 

00:09:56.480 --> 00:09:58.389 align:start position:0%
so in other words if we take a look at
this<00:09:57.040><c> we'll</c><00:09:57.200><c> push</c><00:09:57.519><c> back</c><00:09:57.760><c> one</c><00:09:58.000><c> element</c>

00:09:58.389 --> 00:09:58.399 align:start position:0%
this we'll push back one element
 

00:09:58.399 --> 00:10:00.389 align:start position:0%
this we'll push back one element
our<00:09:58.480><c> size</c><00:09:58.720><c> should</c><00:09:58.880><c> be</c><00:09:59.040><c> one</c><00:09:59.440><c> two</c><00:09:59.680><c> should</c><00:09:59.839><c> be</c><00:10:00.000><c> two</c>

00:10:00.389 --> 00:10:00.399 align:start position:0%
our size should be one two should be two
 

00:10:00.399 --> 00:10:01.670 align:start position:0%
our size should be one two should be two
three<00:10:00.640><c> should</c><00:10:00.880><c> be</c><00:10:01.120><c> three</c>

00:10:01.670 --> 00:10:01.680 align:start position:0%
three should be three
 

00:10:01.680 --> 00:10:03.350 align:start position:0%
three should be three
it's<00:10:01.920><c> going</c><00:10:02.160><c> to</c><00:10:02.399><c> actually</c><00:10:02.720><c> keep</c><00:10:02.959><c> track</c><00:10:03.200><c> of</c><00:10:03.279><c> how</c>

00:10:03.350 --> 00:10:03.360 align:start position:0%
it's going to actually keep track of how
 

00:10:03.360 --> 00:10:05.350 align:start position:0%
it's going to actually keep track of how
many<00:10:03.600><c> elements</c><00:10:04.079><c> we</c><00:10:04.240><c> have</c><00:10:04.640><c> additionally</c>

00:10:05.350 --> 00:10:05.360 align:start position:0%
many elements we have additionally
 

00:10:05.360 --> 00:10:07.110 align:start position:0%
many elements we have additionally
though<00:10:05.600><c> we're</c><00:10:05.839><c> going</c><00:10:06.079><c> to</c><00:10:06.240><c> store</c><00:10:06.560><c> a</c><00:10:06.640><c> variable</c>

00:10:07.110 --> 00:10:07.120 align:start position:0%
though we're going to store a variable
 

00:10:07.120 --> 00:10:07.509 align:start position:0%
though we're going to store a variable
called

00:10:07.509 --> 00:10:07.519 align:start position:0%
called
 

00:10:07.519 --> 00:10:09.910 align:start position:0%
called
capacity<00:10:08.399><c> and</c><00:10:08.560><c> this</c><00:10:08.800><c> is</c><00:10:08.959><c> going</c><00:10:09.200><c> to</c><00:10:09.360><c> be</c><00:10:09.600><c> how</c>

00:10:09.910 --> 00:10:09.920 align:start position:0%
capacity and this is going to be how
 

00:10:09.920 --> 00:10:12.230 align:start position:0%
capacity and this is going to be how
much<00:10:10.399><c> memory</c><00:10:10.880><c> we</c><00:10:11.120><c> have</c><00:10:11.279><c> allocated</c><00:10:11.920><c> so</c><00:10:12.079><c> how</c>

00:10:12.230 --> 00:10:12.240 align:start position:0%
much memory we have allocated so how
 

00:10:12.240 --> 00:10:14.630 align:start position:0%
much memory we have allocated so how
many<00:10:12.640><c> elements</c><00:10:13.200><c> worth</c><00:10:13.519><c> of</c><00:10:13.760><c> memory</c><00:10:14.240><c> have</c><00:10:14.399><c> we</c>

00:10:14.630 --> 00:10:14.640 align:start position:0%
many elements worth of memory have we
 

00:10:14.640 --> 00:10:16.470 align:start position:0%
many elements worth of memory have we
actually<00:10:15.120><c> allocated</c><00:10:15.680><c> not</c><00:10:15.839><c> necessarily</c>

00:10:16.470 --> 00:10:16.480 align:start position:0%
actually allocated not necessarily
 

00:10:16.480 --> 00:10:18.630 align:start position:0%
actually allocated not necessarily
present<00:10:16.880><c> inside</c><00:10:17.120><c> the</c><00:10:17.279><c> vector</c><00:10:17.680><c> at</c><00:10:17.760><c> the</c><00:10:17.920><c> moment</c>

00:10:18.630 --> 00:10:18.640 align:start position:0%
present inside the vector at the moment
 

00:10:18.640 --> 00:10:20.630 align:start position:0%
present inside the vector at the moment
but<00:10:18.800><c> how</c><00:10:18.959><c> much</c><00:10:19.200><c> could</c><00:10:19.440><c> we</c><00:10:19.600><c> store</c><00:10:20.240><c> without</c>

00:10:20.630 --> 00:10:20.640 align:start position:0%
but how much could we store without
 

00:10:20.640 --> 00:10:21.910 align:start position:0%
but how much could we store without
having<00:10:20.880><c> to</c><00:10:21.040><c> reallocate</c>

00:10:21.910 --> 00:10:21.920 align:start position:0%
having to reallocate
 

00:10:21.920 --> 00:10:23.509 align:start position:0%
having to reallocate
so<00:10:22.079><c> why</c><00:10:22.240><c> do</c><00:10:22.399><c> we</c><00:10:22.480><c> need</c><00:10:22.640><c> these</c><00:10:22.880><c> two</c><00:10:23.120><c> variables</c>

00:10:23.509 --> 00:10:23.519 align:start position:0%
so why do we need these two variables
 

00:10:23.519 --> 00:10:25.110 align:start position:0%
so why do we need these two variables
why<00:10:23.760><c> not</c><00:10:23.920><c> just</c><00:10:24.079><c> have</c><00:10:24.320><c> a</c><00:10:24.480><c> size</c>

00:10:25.110 --> 00:10:25.120 align:start position:0%
why not just have a size
 

00:10:25.120 --> 00:10:26.790 align:start position:0%
why not just have a size
well<00:10:25.360><c> we</c><00:10:25.519><c> could</c><00:10:25.760><c> and</c><00:10:25.839><c> that</c><00:10:26.000><c> would</c><00:10:26.160><c> be</c><00:10:26.399><c> totally</c>

00:10:26.790 --> 00:10:26.800 align:start position:0%
well we could and that would be totally
 

00:10:26.800 --> 00:10:28.389 align:start position:0%
well we could and that would be totally
fine<00:10:27.120><c> and</c><00:10:27.200><c> you</c><00:10:27.440><c> could</c><00:10:27.600><c> write</c><00:10:27.839><c> a</c><00:10:27.920><c> vector</c><00:10:28.240><c> that</c>

00:10:28.389 --> 00:10:28.399 align:start position:0%
fine and you could write a vector that
 

00:10:28.399 --> 00:10:29.910 align:start position:0%
fine and you could write a vector that
way<00:10:28.720><c> it</c><00:10:28.959><c> would</c><00:10:29.200><c> work</c>

00:10:29.910 --> 00:10:29.920 align:start position:0%
way it would work
 

00:10:29.920 --> 00:10:31.670 align:start position:0%
way it would work
the<00:10:30.079><c> problem</c><00:10:30.480><c> though</c><00:10:30.800><c> is</c><00:10:30.959><c> that</c><00:10:31.040><c> you'll</c><00:10:31.279><c> be</c>

00:10:31.670 --> 00:10:31.680 align:start position:0%
the problem though is that you'll be
 

00:10:31.680 --> 00:10:33.190 align:start position:0%
the problem though is that you'll be
reallocating<00:10:32.399><c> the</c><00:10:32.560><c> memory</c>

00:10:33.190 --> 00:10:33.200 align:start position:0%
reallocating the memory
 

00:10:33.200 --> 00:10:35.430 align:start position:0%
reallocating the memory
a<00:10:33.279><c> lot</c><00:10:33.519><c> more</c><00:10:33.760><c> often</c><00:10:34.160><c> if</c><00:10:34.320><c> you</c><00:10:34.480><c> saw</c><00:10:34.959><c> just</c><00:10:35.200><c> the</c>

00:10:35.430 --> 00:10:35.440 align:start position:0%
a lot more often if you saw just the
 

00:10:35.440 --> 00:10:37.509 align:start position:0%
a lot more often if you saw just the
exact<00:10:35.920><c> amount</c><00:10:36.160><c> of</c><00:10:36.240><c> memory</c><00:10:36.640><c> required</c>

00:10:37.509 --> 00:10:37.519 align:start position:0%
exact amount of memory required
 

00:10:37.519 --> 00:10:39.110 align:start position:0%
exact amount of memory required
to<00:10:37.760><c> store</c><00:10:38.160><c> the</c><00:10:38.240><c> number</c><00:10:38.480><c> of</c><00:10:38.640><c> elements</c><00:10:38.959><c> that</c><00:10:39.040><c> are</c>

00:10:39.110 --> 00:10:39.120 align:start position:0%
to store the number of elements that are
 

00:10:39.120 --> 00:10:40.710 align:start position:0%
to store the number of elements that are
currently<00:10:39.600><c> inside</c><00:10:39.920><c> that</c><00:10:40.240><c> vector</c>

00:10:40.710 --> 00:10:40.720 align:start position:0%
currently inside that vector
 

00:10:40.720 --> 00:10:43.590 align:start position:0%
currently inside that vector
so<00:10:41.040><c> for</c><00:10:41.279><c> example</c><00:10:41.839><c> if</c><00:10:42.079><c> i</c><00:10:42.240><c> pushed</c><00:10:42.720><c> back</c><00:10:43.120><c> a</c><00:10:43.279><c> lot</c><00:10:43.440><c> of</c>

00:10:43.590 --> 00:10:43.600 align:start position:0%
so for example if i pushed back a lot of
 

00:10:43.600 --> 00:10:45.350 align:start position:0%
so for example if i pushed back a lot of
these<00:10:43.839><c> and</c><00:10:44.000><c> i</c><00:10:44.079><c> mean</c><00:10:44.399><c> a</c><00:10:44.560><c> lot</c>

00:10:45.350 --> 00:10:45.360 align:start position:0%
these and i mean a lot
 

00:10:45.360 --> 00:10:48.310 align:start position:0%
these and i mean a lot
we<00:10:45.600><c> don't</c><00:10:45.920><c> want</c><00:10:46.079><c> to</c><00:10:46.399><c> reallocate</c><00:10:47.360><c> every</c><00:10:47.839><c> time</c>

00:10:48.310 --> 00:10:48.320 align:start position:0%
we don't want to reallocate every time
 

00:10:48.320 --> 00:10:48.710 align:start position:0%
we don't want to reallocate every time
we

00:10:48.710 --> 00:10:48.720 align:start position:0%
we
 

00:10:48.720 --> 00:10:51.269 align:start position:0%
we
push<00:10:49.200><c> back</c><00:10:49.519><c> an</c><00:10:49.760><c> element</c><00:10:50.640><c> that's</c><00:10:50.880><c> going</c><00:10:51.040><c> to</c><00:10:51.120><c> be</c>

00:10:51.269 --> 00:10:51.279 align:start position:0%
push back an element that's going to be
 

00:10:51.279 --> 00:10:52.470 align:start position:0%
push back an element that's going to be
terribly<00:10:51.760><c> inefficient</c>

00:10:52.470 --> 00:10:52.480 align:start position:0%
terribly inefficient
 

00:10:52.480 --> 00:10:54.069 align:start position:0%
terribly inefficient
instead<00:10:52.800><c> what</c><00:10:52.959><c> we</c><00:10:53.040><c> want</c><00:10:53.200><c> to</c><00:10:53.279><c> do</c><00:10:53.440><c> is</c><00:10:53.600><c> use</c><00:10:53.839><c> some</c>

00:10:54.069 --> 00:10:54.079 align:start position:0%
instead what we want to do is use some
 

00:10:54.079 --> 00:10:55.750 align:start position:0%
instead what we want to do is use some
kind<00:10:54.320><c> of</c><00:10:54.720><c> like</c><00:10:55.120><c> growing</c>

00:10:55.750 --> 00:10:55.760 align:start position:0%
kind of like growing
 

00:10:55.760 --> 00:10:57.829 align:start position:0%
kind of like growing
function<00:10:56.320><c> essentially</c><00:10:57.040><c> that's</c><00:10:57.360><c> going</c><00:10:57.519><c> to</c><00:10:57.680><c> say</c>

00:10:57.829 --> 00:10:57.839 align:start position:0%
function essentially that's going to say
 

00:10:57.839 --> 00:10:59.670 align:start position:0%
function essentially that's going to say
that<00:10:58.079><c> okay</c><00:10:58.399><c> well</c><00:10:58.640><c> let's</c><00:10:58.880><c> start</c><00:10:59.200><c> for</c><00:10:59.360><c> example</c>

00:10:59.670 --> 00:10:59.680 align:start position:0%
that okay well let's start for example
 

00:10:59.680 --> 00:11:01.269 align:start position:0%
that okay well let's start for example
with<00:10:59.920><c> a</c><00:11:00.000><c> size</c><00:11:00.240><c> of</c><00:11:00.480><c> two</c>

00:11:01.269 --> 00:11:01.279 align:start position:0%
with a size of two
 

00:11:01.279 --> 00:11:03.430 align:start position:0%
with a size of two
and<00:11:01.360><c> then</c><00:11:01.600><c> maybe</c><00:11:02.240><c> every</c><00:11:02.560><c> time</c><00:11:02.880><c> we</c><00:11:03.120><c> have</c><00:11:03.279><c> to</c>

00:11:03.430 --> 00:11:03.440 align:start position:0%
and then maybe every time we have to
 

00:11:03.440 --> 00:11:04.310 align:start position:0%
and then maybe every time we have to
reallocate

00:11:04.310 --> 00:11:04.320 align:start position:0%
reallocate
 

00:11:04.320 --> 00:11:06.389 align:start position:0%
reallocate
because<00:11:04.560><c> a</c><00:11:04.880><c> new</c><00:11:05.120><c> element</c><00:11:05.440><c> is</c><00:11:05.519><c> pushed</c><00:11:05.760><c> back</c>

00:11:06.389 --> 00:11:06.399 align:start position:0%
because a new element is pushed back
 

00:11:06.399 --> 00:11:07.670 align:start position:0%
because a new element is pushed back
let's<00:11:06.640><c> maybe</c><00:11:07.040><c> double</c>

00:11:07.670 --> 00:11:07.680 align:start position:0%
let's maybe double
 

00:11:07.680 --> 00:11:09.590 align:start position:0%
let's maybe double
our<00:11:07.920><c> capacity</c><00:11:08.480><c> so</c><00:11:08.640><c> let's</c><00:11:08.880><c> allocate</c><00:11:09.360><c> enough</c>

00:11:09.590 --> 00:11:09.600 align:start position:0%
our capacity so let's allocate enough
 

00:11:09.600 --> 00:11:11.750 align:start position:0%
our capacity so let's allocate enough
for<00:11:09.839><c> four</c><00:11:10.480><c> that</c><00:11:10.640><c> way</c><00:11:10.880><c> we</c><00:11:10.959><c> don't</c><00:11:11.120><c> have</c><00:11:11.360><c> to</c>

00:11:11.750 --> 00:11:11.760 align:start position:0%
for four that way we don't have to
 

00:11:11.760 --> 00:11:13.350 align:start position:0%
for four that way we don't have to
allocate<00:11:12.160><c> again</c><00:11:12.399><c> when</c><00:11:12.560><c> we</c><00:11:12.720><c> push</c><00:11:12.959><c> the</c><00:11:13.040><c> fourth</c>

00:11:13.350 --> 00:11:13.360 align:start position:0%
allocate again when we push the fourth
 

00:11:13.360 --> 00:11:15.030 align:start position:0%
allocate again when we push the fourth
element<00:11:13.760><c> in</c><00:11:14.320><c> when</c><00:11:14.480><c> we</c><00:11:14.560><c> push</c><00:11:14.720><c> the</c><00:11:14.800><c> fifth</c>

00:11:15.030 --> 00:11:15.040 align:start position:0%
element in when we push the fifth
 

00:11:15.040 --> 00:11:16.870 align:start position:0%
element in when we push the fifth
element<00:11:15.360><c> in</c><00:11:15.600><c> maybe</c><00:11:15.839><c> it'll</c><00:11:16.079><c> double</c><00:11:16.399><c> again</c>

00:11:16.870 --> 00:11:16.880 align:start position:0%
element in maybe it'll double again
 

00:11:16.880 --> 00:11:18.949 align:start position:0%
element in maybe it'll double again
and<00:11:17.040><c> it'll</c><00:11:17.200><c> go</c><00:11:17.360><c> to</c><00:11:17.519><c> eight</c><00:11:18.079><c> that</c><00:11:18.320><c> way</c><00:11:18.640><c> these</c>

00:11:18.949 --> 00:11:18.959 align:start position:0%
and it'll go to eight that way these
 

00:11:18.959 --> 00:11:20.310 align:start position:0%
and it'll go to eight that way these
three<00:11:19.200><c> are</c><00:11:19.279><c> going</c><00:11:19.360><c> to</c><00:11:19.519><c> be</c><00:11:19.600><c> pushed</c><00:11:19.920><c> back</c>

00:11:20.310 --> 00:11:20.320 align:start position:0%
three are going to be pushed back
 

00:11:20.320 --> 00:11:22.069 align:start position:0%
three are going to be pushed back
no<00:11:20.560><c> problem</c><00:11:21.200><c> and</c><00:11:21.360><c> then</c><00:11:21.519><c> when</c><00:11:21.680><c> we</c><00:11:21.760><c> push</c><00:11:21.920><c> back</c>

00:11:22.069 --> 00:11:22.079 align:start position:0%
no problem and then when we push back
 

00:11:22.079 --> 00:11:24.150 align:start position:0%
no problem and then when we push back
the<00:11:22.240><c> ninth</c><00:11:22.560><c> one</c><00:11:22.800><c> it'll</c><00:11:23.040><c> double</c><00:11:23.279><c> to</c><00:11:23.440><c> 16</c><00:11:23.920><c> and</c><00:11:24.000><c> so</c>

00:11:24.150 --> 00:11:24.160 align:start position:0%
the ninth one it'll double to 16 and so
 

00:11:24.160 --> 00:11:25.590 align:start position:0%
the ninth one it'll double to 16 and so
on<00:11:24.240><c> so</c><00:11:24.480><c> forth</c><00:11:24.640><c> so</c><00:11:24.800><c> in</c><00:11:24.880><c> other</c><00:11:25.040><c> words</c>

00:11:25.590 --> 00:11:25.600 align:start position:0%
on so forth so in other words
 

00:11:25.600 --> 00:11:27.509 align:start position:0%
on so forth so in other words
we'll<00:11:26.000><c> drastically</c><00:11:26.560><c> reduce</c><00:11:26.959><c> the</c><00:11:27.040><c> number</c><00:11:27.360><c> of</c>

00:11:27.509 --> 00:11:27.519 align:start position:0%
we'll drastically reduce the number of
 

00:11:27.519 --> 00:11:29.190 align:start position:0%
we'll drastically reduce the number of
reallocations<00:11:28.399><c> we</c><00:11:28.560><c> need</c>

00:11:29.190 --> 00:11:29.200 align:start position:0%
reallocations we need
 

00:11:29.200 --> 00:11:30.790 align:start position:0%
reallocations we need
to<00:11:29.360><c> ensure</c><00:11:29.680><c> that</c><00:11:29.760><c> we</c><00:11:29.920><c> have</c><00:11:30.000><c> enough</c><00:11:30.320><c> storage</c><00:11:30.640><c> to</c>

00:11:30.790 --> 00:11:30.800 align:start position:0%
to ensure that we have enough storage to
 

00:11:30.800 --> 00:11:32.710 align:start position:0%
to ensure that we have enough storage to
store<00:11:31.120><c> all</c><00:11:31.279><c> of</c><00:11:31.360><c> these</c><00:11:31.680><c> elements</c><00:11:32.079><c> now</c><00:11:32.320><c> doubling</c>

00:11:32.710 --> 00:11:32.720 align:start position:0%
store all of these elements now doubling
 

00:11:32.720 --> 00:11:34.230 align:start position:0%
store all of these elements now doubling
the<00:11:32.800><c> capacity</c><00:11:33.440><c> every</c><00:11:33.680><c> time</c><00:11:33.839><c> we</c><00:11:34.000><c> need</c><00:11:34.079><c> to</c>

00:11:34.230 --> 00:11:34.240 align:start position:0%
the capacity every time we need to
 

00:11:34.240 --> 00:11:36.150 align:start position:0%
the capacity every time we need to
reallocate<00:11:34.880><c> is</c><00:11:35.200><c> definitely</c><00:11:35.680><c> something</c><00:11:36.000><c> you</c>

00:11:36.150 --> 00:11:36.160 align:start position:0%
reallocate is definitely something you
 

00:11:36.160 --> 00:11:38.230 align:start position:0%
reallocate is definitely something you
could<00:11:36.399><c> do</c><00:11:36.560><c> but</c><00:11:36.720><c> we're</c><00:11:36.959><c> going</c><00:11:37.120><c> to</c><00:11:37.279><c> do</c><00:11:37.440><c> something</c>

00:11:38.230 --> 00:11:38.240 align:start position:0%
could do but we're going to do something
 

00:11:38.240 --> 00:11:40.069 align:start position:0%
could do but we're going to do something
a<00:11:38.320><c> little</c><00:11:38.640><c> bit</c><00:11:38.800><c> more</c><00:11:39.040><c> conservative</c><00:11:39.680><c> in</c><00:11:39.760><c> terms</c>

00:11:40.069 --> 00:11:40.079 align:start position:0%
a little bit more conservative in terms
 

00:11:40.079 --> 00:11:42.230 align:start position:0%
a little bit more conservative in terms
of<00:11:40.160><c> space</c><00:11:40.560><c> what</c><00:11:40.720><c> we're</c><00:11:40.959><c> going</c><00:11:41.200><c> to</c><00:11:41.360><c> do</c><00:11:41.920><c> is</c>

00:11:42.230 --> 00:11:42.240 align:start position:0%
of space what we're going to do is
 

00:11:42.240 --> 00:11:44.630 align:start position:0%
of space what we're going to do is
add<00:11:42.480><c> on</c><00:11:42.720><c> half</c><00:11:43.120><c> of</c><00:11:43.360><c> the</c><00:11:43.519><c> current</c><00:11:43.920><c> capacity</c><00:11:44.480><c> so</c>

00:11:44.630 --> 00:11:44.640 align:start position:0%
add on half of the current capacity so
 

00:11:44.640 --> 00:11:45.509 align:start position:0%
add on half of the current capacity so
in<00:11:44.720><c> other</c><00:11:44.880><c> words</c><00:11:45.120><c> we'll</c>

00:11:45.509 --> 00:11:45.519 align:start position:0%
in other words we'll
 

00:11:45.519 --> 00:11:48.230 align:start position:0%
in other words we'll
we'll<00:11:45.760><c> grow</c><00:11:46.079><c> from</c><00:11:46.320><c> two</c><00:11:46.560><c> to</c><00:11:46.720><c> three</c><00:11:47.519><c> from</c><00:11:47.839><c> three</c>

00:11:48.230 --> 00:11:48.240 align:start position:0%
we'll grow from two to three from three
 

00:11:48.240 --> 00:11:50.230 align:start position:0%
we'll grow from two to three from three
to<00:11:48.480><c> four</c><00:11:48.800><c> from</c><00:11:49.040><c> four</c><00:11:49.279><c> to</c><00:11:49.519><c> six</c>

00:11:50.230 --> 00:11:50.240 align:start position:0%
to four from four to six
 

00:11:50.240 --> 00:11:52.470 align:start position:0%
to four from four to six
from<00:11:50.560><c> six</c><00:11:50.800><c> to</c><00:11:51.040><c> nine</c><00:11:51.360><c> and</c><00:11:51.519><c> so</c><00:11:51.680><c> on</c><00:11:51.839><c> and</c><00:11:51.920><c> so</c><00:11:52.160><c> forth</c>

00:11:52.470 --> 00:11:52.480 align:start position:0%
from six to nine and so on and so forth
 

00:11:52.480 --> 00:11:53.509 align:start position:0%
from six to nine and so on and so forth
just<00:11:52.639><c> because</c><00:11:52.880><c> it's</c><00:11:53.040><c> a</c><00:11:53.040><c> little</c><00:11:53.200><c> bit</c><00:11:53.360><c> more</c>

00:11:53.509 --> 00:11:53.519 align:start position:0%
just because it's a little bit more
 

00:11:53.519 --> 00:11:54.870 align:start position:0%
just because it's a little bit more
conservative<00:11:54.000><c> on</c><00:11:54.160><c> memory</c>

00:11:54.870 --> 00:11:54.880 align:start position:0%
conservative on memory
 

00:11:54.880 --> 00:11:56.389 align:start position:0%
conservative on memory
but<00:11:55.040><c> this</c><00:11:55.279><c> is</c><00:11:55.440><c> the</c><00:11:55.519><c> beauty</c><00:11:55.839><c> of</c><00:11:55.920><c> writing</c><00:11:56.240><c> your</c>

00:11:56.389 --> 00:11:56.399 align:start position:0%
but this is the beauty of writing your
 

00:11:56.399 --> 00:11:57.829 align:start position:0%
but this is the beauty of writing your
own<00:11:56.560><c> data</c><00:11:56.800><c> structures</c><00:11:57.200><c> you</c><00:11:57.360><c> can</c><00:11:57.519><c> actually</c>

00:11:57.829 --> 00:11:57.839 align:start position:0%
own data structures you can actually
 

00:11:57.839 --> 00:11:59.190 align:start position:0%
own data structures you can actually
easily<00:11:58.240><c> control</c><00:11:58.720><c> that</c>

00:11:59.190 --> 00:11:59.200 align:start position:0%
easily control that
 

00:11:59.200 --> 00:12:01.110 align:start position:0%
easily control that
to<00:11:59.440><c> tailor</c><00:11:59.839><c> it</c><00:11:59.920><c> towards</c><00:12:00.160><c> a</c><00:12:00.320><c> specific</c><00:12:00.720><c> need</c><00:12:01.040><c> in</c>

00:12:01.110 --> 00:12:01.120 align:start position:0%
to tailor it towards a specific need in
 

00:12:01.120 --> 00:12:02.870 align:start position:0%
to tailor it towards a specific need in
your<00:12:01.360><c> application</c><00:12:01.920><c> maybe</c><00:12:02.240><c> you</c><00:12:02.480><c> know</c>

00:12:02.870 --> 00:12:02.880 align:start position:0%
your application maybe you know
 

00:12:02.880 --> 00:12:04.069 align:start position:0%
your application maybe you know
that<00:12:03.040><c> you're</c><00:12:03.279><c> going</c><00:12:03.440><c> to</c><00:12:03.519><c> be</c><00:12:03.600><c> pushing</c><00:12:03.839><c> back</c><00:12:04.000><c> a</c>

00:12:04.069 --> 00:12:04.079 align:start position:0%
that you're going to be pushing back a
 

00:12:04.079 --> 00:12:05.750 align:start position:0%
that you're going to be pushing back a
lot<00:12:04.240><c> of</c><00:12:04.399><c> elements</c><00:12:04.880><c> and</c><00:12:05.040><c> you</c><00:12:05.120><c> want</c><00:12:05.279><c> it</c><00:12:05.360><c> to</c><00:12:05.519><c> be</c><00:12:05.600><c> a</c>

00:12:05.750 --> 00:12:05.760 align:start position:0%
lot of elements and you want it to be a
 

00:12:05.760 --> 00:12:07.350 align:start position:0%
lot of elements and you want it to be a
little<00:12:05.920><c> bit</c><00:12:06.079><c> more</c><00:12:06.320><c> generous</c><00:12:06.880><c> with</c><00:12:07.040><c> the</c><00:12:07.200><c> amount</c>

00:12:07.350 --> 00:12:07.360 align:start position:0%
little bit more generous with the amount
 

00:12:07.360 --> 00:12:09.190 align:start position:0%
little bit more generous with the amount
of<00:12:07.519><c> memory</c><00:12:08.000><c> it</c><00:12:08.160><c> allocates</c><00:12:08.639><c> that's</c><00:12:08.800><c> totally</c>

00:12:09.190 --> 00:12:09.200 align:start position:0%
of memory it allocates that's totally
 

00:12:09.200 --> 00:12:09.670 align:start position:0%
of memory it allocates that's totally
fine

00:12:09.670 --> 00:12:09.680 align:start position:0%
fine
 

00:12:09.680 --> 00:12:11.509 align:start position:0%
fine
but<00:12:09.839><c> then</c><00:12:10.079><c> again</c><00:12:10.480><c> keep</c><00:12:10.720><c> in</c><00:12:10.800><c> mind</c><00:12:10.959><c> that</c><00:12:11.200><c> usually</c>

00:12:11.509 --> 00:12:11.519 align:start position:0%
but then again keep in mind that usually
 

00:12:11.519 --> 00:12:12.710 align:start position:0%
but then again keep in mind that usually
with<00:12:11.760><c> vectors</c><00:12:12.160><c> you</c><00:12:12.320><c> can</c>

00:12:12.710 --> 00:12:12.720 align:start position:0%
with vectors you can
 

00:12:12.720 --> 00:12:15.350 align:start position:0%
with vectors you can
actually<00:12:13.120><c> specify</c><00:12:14.079><c> an</c><00:12:14.320><c> initial</c><00:12:14.720><c> size</c><00:12:15.040><c> or</c><00:12:15.200><c> an</c>

00:12:15.350 --> 00:12:15.360 align:start position:0%
actually specify an initial size or an
 

00:12:15.360 --> 00:12:16.550 align:start position:0%
actually specify an initial size or an
initial<00:12:15.680><c> allocation</c>

00:12:16.550 --> 00:12:16.560 align:start position:0%
initial allocation
 

00:12:16.560 --> 00:12:18.310 align:start position:0%
initial allocation
to<00:12:16.720><c> prevent</c><00:12:17.040><c> having</c><00:12:17.279><c> to</c><00:12:17.440><c> reallocate</c><00:12:18.160><c> every</c>

00:12:18.310 --> 00:12:18.320 align:start position:0%
to prevent having to reallocate every
 

00:12:18.320 --> 00:12:19.670 align:start position:0%
to prevent having to reallocate every
time<00:12:18.560><c> you</c><00:12:18.639><c> push</c><00:12:18.880><c> back</c><00:12:19.279><c> new</c>

00:12:19.670 --> 00:12:19.680 align:start position:0%
time you push back new
 

00:12:19.680 --> 00:12:21.590 align:start position:0%
time you push back new
elements<00:12:20.160><c> anyway</c><00:12:20.480><c> back</c><00:12:20.720><c> in</c><00:12:20.800><c> the</c><00:12:20.880><c> vector</c><00:12:21.200><c> class</c>

00:12:21.590 --> 00:12:21.600 align:start position:0%
elements anyway back in the vector class
 

00:12:21.600 --> 00:12:23.190 align:start position:0%
elements anyway back in the vector class
that's<00:12:21.760><c> why</c><00:12:21.920><c> we</c><00:12:22.079><c> have</c><00:12:22.320><c> these</c><00:12:22.560><c> two</c><00:12:22.720><c> because</c><00:12:22.959><c> one</c>

00:12:23.190 --> 00:12:23.200 align:start position:0%
that's why we have these two because one
 

00:12:23.200 --> 00:12:24.629 align:start position:0%
that's why we have these two because one
is<00:12:23.279><c> the</c><00:12:23.519><c> actual</c><00:12:23.760><c> amount</c><00:12:23.920><c> of</c><00:12:24.079><c> elements</c><00:12:24.399><c> inside</c>

00:12:24.629 --> 00:12:24.639 align:start position:0%
is the actual amount of elements inside
 

00:12:24.639 --> 00:12:25.430 align:start position:0%
is the actual amount of elements inside
the<00:12:24.800><c> vector</c>

00:12:25.430 --> 00:12:25.440 align:start position:0%
the vector
 

00:12:25.440 --> 00:12:27.190 align:start position:0%
the vector
whereas<00:12:25.760><c> the</c><00:12:25.839><c> other</c><00:12:26.000><c> one</c><00:12:26.240><c> keeps</c><00:12:26.480><c> track</c><00:12:26.720><c> of</c><00:12:26.959><c> our</c>

00:12:27.190 --> 00:12:27.200 align:start position:0%
whereas the other one keeps track of our
 

00:12:27.200 --> 00:12:29.190 align:start position:0%
whereas the other one keeps track of our
capacity<00:12:27.760><c> for</c><00:12:27.920><c> elements</c><00:12:28.399><c> how</c><00:12:28.560><c> much</c><00:12:28.880><c> could</c><00:12:29.040><c> we</c>

00:12:29.190 --> 00:12:29.200 align:start position:0%
capacity for elements how much could we
 

00:12:29.200 --> 00:12:29.829 align:start position:0%
capacity for elements how much could we
store

00:12:29.829 --> 00:12:29.839 align:start position:0%
store
 

00:12:29.839 --> 00:12:31.829 align:start position:0%
store
with<00:12:30.079><c> our</c><00:12:30.240><c> current</c><00:12:30.639><c> memory</c><00:12:31.040><c> allocation</c><00:12:31.680><c> so</c>

00:12:31.829 --> 00:12:31.839 align:start position:0%
with our current memory allocation so
 

00:12:31.839 --> 00:12:33.430 align:start position:0%
with our current memory allocation so
the<00:12:31.920><c> most</c><00:12:32.160><c> important</c><00:12:32.560><c> function</c><00:12:32.880><c> here</c><00:12:33.120><c> then</c><00:12:33.279><c> in</c>

00:12:33.430 --> 00:12:33.440 align:start position:0%
the most important function here then in
 

00:12:33.440 --> 00:12:34.949 align:start position:0%
the most important function here then in
the<00:12:33.519><c> beginning</c><00:12:34.000><c> is</c><00:12:34.160><c> going</c><00:12:34.320><c> to</c><00:12:34.480><c> be</c><00:12:34.639><c> something</c>

00:12:34.949 --> 00:12:34.959 align:start position:0%
the beginning is going to be something
 

00:12:34.959 --> 00:12:35.910 align:start position:0%
the beginning is going to be something
that<00:12:35.120><c> i'm</c><00:12:35.279><c> going</c><00:12:35.440><c> to</c><00:12:35.600><c> call</c>

00:12:35.910 --> 00:12:35.920 align:start position:0%
that i'm going to call
 

00:12:35.920 --> 00:12:38.069 align:start position:0%
that i'm going to call
re-alec<00:12:36.639><c> reallocate</c><00:12:37.360><c> what</c><00:12:37.519><c> this</c><00:12:37.680><c> is</c><00:12:37.760><c> going</c><00:12:38.000><c> to</c>

00:12:38.069 --> 00:12:38.079 align:start position:0%
re-alec reallocate what this is going to
 

00:12:38.079 --> 00:12:39.910 align:start position:0%
re-alec reallocate what this is going to
do<00:12:38.320><c> is</c><00:12:38.480><c> reallocate</c><00:12:39.120><c> our</c><00:12:39.279><c> memory</c>

00:12:39.910 --> 00:12:39.920 align:start position:0%
do is reallocate our memory
 

00:12:39.920 --> 00:12:42.310 align:start position:0%
do is reallocate our memory
and<00:12:40.079><c> it's</c><00:12:40.320><c> basically</c><00:12:40.720><c> got</c><00:12:41.600><c> three</c><00:12:41.839><c> things</c><00:12:42.160><c> that</c>

00:12:42.310 --> 00:12:42.320 align:start position:0%
and it's basically got three things that
 

00:12:42.320 --> 00:12:43.750 align:start position:0%
and it's basically got three things that
it<00:12:42.399><c> really</c><00:12:42.720><c> needs</c><00:12:42.959><c> to</c><00:12:43.120><c> do</c>

00:12:43.750 --> 00:12:43.760 align:start position:0%
it really needs to do
 

00:12:43.760 --> 00:12:45.590 align:start position:0%
it really needs to do
let's<00:12:43.920><c> make</c><00:12:44.079><c> this</c><00:12:44.320><c> a</c><00:12:44.560><c> private</c><00:12:44.959><c> function</c>

00:12:45.590 --> 00:12:45.600 align:start position:0%
let's make this a private function
 

00:12:45.600 --> 00:12:46.870 align:start position:0%
let's make this a private function
because<00:12:45.839><c> we</c><00:12:45.920><c> shouldn't</c><00:12:46.160><c> be</c><00:12:46.320><c> calling</c><00:12:46.639><c> this</c>

00:12:46.870 --> 00:12:46.880 align:start position:0%
because we shouldn't be calling this
 

00:12:46.880 --> 00:12:47.509 align:start position:0%
because we shouldn't be calling this
outside

00:12:47.509 --> 00:12:47.519 align:start position:0%
outside
 

00:12:47.519 --> 00:12:49.430 align:start position:0%
outside
of<00:12:47.839><c> this</c><00:12:48.079><c> class</c><00:12:48.560><c> and</c><00:12:48.639><c> i'm</c><00:12:48.800><c> actually</c><00:12:49.120><c> going</c><00:12:49.360><c> to</c>

00:12:49.430 --> 00:12:49.440 align:start position:0%
of this class and i'm actually going to
 

00:12:49.440 --> 00:12:50.790 align:start position:0%
of this class and i'm actually going to
take<00:12:49.760><c> in</c><00:12:49.920><c> a</c><00:12:50.079><c> size</c><00:12:50.480><c> t</c>

00:12:50.790 --> 00:12:50.800 align:start position:0%
take in a size t
 

00:12:50.800 --> 00:12:52.389 align:start position:0%
take in a size t
here<00:12:50.959><c> which</c><00:12:51.200><c> is</c><00:12:51.279><c> going</c><00:12:51.440><c> to</c><00:12:51.600><c> be</c><00:12:51.760><c> our</c><00:12:52.079><c> new</c>

00:12:52.389 --> 00:12:52.399 align:start position:0%
here which is going to be our new
 

00:12:52.399 --> 00:12:55.030 align:start position:0%
here which is going to be our new
capacity<00:12:53.200><c> and</c><00:12:53.600><c> initially</c><00:12:54.160><c> i'm</c><00:12:54.399><c> going</c><00:12:54.639><c> to</c>

00:12:55.030 --> 00:12:55.040 align:start position:0%
capacity and initially i'm going to
 

00:12:55.040 --> 00:12:57.590 align:start position:0%
capacity and initially i'm going to
allocate<00:12:55.760><c> enough</c><00:12:56.079><c> room</c><00:12:56.480><c> for</c><00:12:56.720><c> two</c><00:12:57.120><c> elements</c>

00:12:57.590 --> 00:12:57.600 align:start position:0%
allocate enough room for two elements
 

00:12:57.600 --> 00:12:58.310 align:start position:0%
allocate enough room for two elements
here<00:12:58.000><c> so</c>

00:12:58.310 --> 00:12:58.320 align:start position:0%
here so
 

00:12:58.320 --> 00:13:00.389 align:start position:0%
here so
what<00:12:58.480><c> does</c><00:12:58.720><c> this</c><00:12:58.959><c> function</c><00:12:59.360><c> need</c><00:12:59.519><c> to</c><00:12:59.680><c> do</c><00:13:00.000><c> well</c>

00:13:00.389 --> 00:13:00.399 align:start position:0%
what does this function need to do well
 

00:13:00.399 --> 00:13:01.509 align:start position:0%
what does this function need to do well
step<00:13:00.720><c> one</c><00:13:01.200><c> is</c>

00:13:01.509 --> 00:13:01.519 align:start position:0%
step one is
 

00:13:01.519 --> 00:13:03.350 align:start position:0%
step one is
it<00:13:01.680><c> needs</c><00:13:01.920><c> to</c><00:13:02.160><c> allocate</c><00:13:02.639><c> a</c><00:13:02.800><c> new</c><00:13:02.959><c> block</c><00:13:03.279><c> of</c>

00:13:03.350 --> 00:13:03.360 align:start position:0%
it needs to allocate a new block of
 

00:13:03.360 --> 00:13:05.430 align:start position:0%
it needs to allocate a new block of
memory<00:13:03.920><c> now</c><00:13:04.079><c> a</c><00:13:04.160><c> more</c><00:13:04.399><c> complicated</c>

00:13:05.430 --> 00:13:05.440 align:start position:0%
memory now a more complicated
 

00:13:05.440 --> 00:13:06.949 align:start position:0%
memory now a more complicated
vector<00:13:05.839><c> implementations</c><00:13:06.560><c> such</c><00:13:06.800><c> as</c>

00:13:06.949 --> 00:13:06.959 align:start position:0%
vector implementations such as
 

00:13:06.959 --> 00:13:08.550 align:start position:0%
vector implementations such as
scd-vector<00:13:07.680><c> you</c><00:13:07.760><c> have</c><00:13:07.920><c> the</c><00:13:08.160><c> option</c><00:13:08.399><c> of</c>

00:13:08.550 --> 00:13:08.560 align:start position:0%
scd-vector you have the option of
 

00:13:08.560 --> 00:13:10.470 align:start position:0%
scd-vector you have the option of
specifying<00:13:09.279><c> a</c><00:13:09.440><c> custom</c><00:13:09.839><c> allocator</c><00:13:10.320><c> and</c><00:13:10.399><c> this</c>

00:13:10.470 --> 00:13:10.480 align:start position:0%
specifying a custom allocator and this
 

00:13:10.480 --> 00:13:11.829 align:start position:0%
specifying a custom allocator and this
can<00:13:10.639><c> be</c><00:13:10.800><c> really</c><00:13:11.120><c> useful</c>

00:13:11.829 --> 00:13:11.839 align:start position:0%
can be really useful
 

00:13:11.839 --> 00:13:13.670 align:start position:0%
can be really useful
if<00:13:12.000><c> you're</c><00:13:12.160><c> designing</c><00:13:12.800><c> a</c><00:13:12.959><c> piece</c><00:13:13.200><c> of</c><00:13:13.279><c> software</c>

00:13:13.670 --> 00:13:13.680 align:start position:0%
if you're designing a piece of software
 

00:13:13.680 --> 00:13:15.190 align:start position:0%
if you're designing a piece of software
that<00:13:13.760><c> you</c><00:13:13.920><c> really</c><00:13:14.160><c> want</c><00:13:14.320><c> to</c><00:13:14.399><c> perform</c><00:13:14.800><c> well</c><00:13:15.040><c> and</c>

00:13:15.190 --> 00:13:15.200 align:start position:0%
that you really want to perform well and
 

00:13:15.200 --> 00:13:16.550 align:start position:0%
that you really want to perform well and
maybe<00:13:15.440><c> you're</c><00:13:15.519><c> giving</c><00:13:15.760><c> it</c><00:13:15.920><c> an</c><00:13:16.000><c> allocator</c><00:13:16.480><c> that</c>

00:13:16.550 --> 00:13:16.560 align:start position:0%
maybe you're giving it an allocator that
 

00:13:16.560 --> 00:13:18.069 align:start position:0%
maybe you're giving it an allocator that
won't<00:13:16.800><c> necessarily</c><00:13:17.440><c> hit</c><00:13:17.600><c> the</c><00:13:17.760><c> heap</c>

00:13:18.069 --> 00:13:18.079 align:start position:0%
won't necessarily hit the heap
 

00:13:18.079 --> 00:13:19.829 align:start position:0%
won't necessarily hit the heap
every<00:13:18.240><c> time</c><00:13:18.480><c> it</c><00:13:18.560><c> has</c><00:13:18.720><c> to</c><00:13:18.800><c> allocate</c><00:13:19.519><c> we're</c><00:13:19.680><c> not</c>

00:13:19.829 --> 00:13:19.839 align:start position:0%
every time it has to allocate we're not
 

00:13:19.839 --> 00:13:20.949 align:start position:0%
every time it has to allocate we're not
going<00:13:19.920><c> to</c><00:13:20.000><c> bother</c><00:13:20.240><c> with</c><00:13:20.399><c> that</c><00:13:20.639><c> with</c><00:13:20.800><c> our</c>

00:13:20.949 --> 00:13:20.959 align:start position:0%
going to bother with that with our
 

00:13:20.959 --> 00:13:22.389 align:start position:0%
going to bother with that with our
simple<00:13:21.200><c> implementation</c><00:13:21.839><c> here</c><00:13:22.000><c> though</c><00:13:22.160><c> we'll</c>

00:13:22.389 --> 00:13:22.399 align:start position:0%
simple implementation here though we'll
 

00:13:22.399 --> 00:13:23.590 align:start position:0%
simple implementation here though we'll
just<00:13:22.480><c> use</c><00:13:22.720><c> the</c><00:13:22.800><c> new</c><00:13:23.040><c> operator</c>

00:13:23.590 --> 00:13:23.600 align:start position:0%
just use the new operator
 

00:13:23.600 --> 00:13:25.910 align:start position:0%
just use the new operator
then<00:13:23.760><c> what</c><00:13:23.920><c> it</c><00:13:24.000><c> needs</c><00:13:24.240><c> to</c><00:13:24.399><c> do</c><00:13:24.720><c> is</c><00:13:25.120><c> copy</c><00:13:25.600><c> all</c><00:13:25.760><c> of</c>

00:13:25.910 --> 00:13:25.920 align:start position:0%
then what it needs to do is copy all of
 

00:13:25.920 --> 00:13:28.389 align:start position:0%
then what it needs to do is copy all of
our<00:13:26.160><c> existing</c><00:13:26.720><c> elements</c><00:13:27.200><c> in</c><00:13:27.360><c> our</c><00:13:27.519><c> vector</c>

00:13:28.389 --> 00:13:28.399 align:start position:0%
our existing elements in our vector
 

00:13:28.399 --> 00:13:30.389 align:start position:0%
our existing elements in our vector
over<00:13:28.720><c> into</c><00:13:28.959><c> this</c><00:13:29.120><c> new</c><00:13:29.360><c> block</c><00:13:29.600><c> of</c><00:13:29.680><c> memory</c>

00:13:30.389 --> 00:13:30.399 align:start position:0%
over into this new block of memory
 

00:13:30.399 --> 00:13:31.750 align:start position:0%
over into this new block of memory
remember<00:13:30.800><c> even</c><00:13:30.959><c> though</c><00:13:31.120><c> we're</c><00:13:31.279><c> using</c><00:13:31.519><c> this</c><00:13:31.680><c> in</c>

00:13:31.750 --> 00:13:31.760 align:start position:0%
remember even though we're using this in
 

00:13:31.760 --> 00:13:33.269 align:start position:0%
remember even though we're using this in
the<00:13:31.839><c> constructor</c><00:13:32.320><c> here</c><00:13:32.480><c> where</c><00:13:32.639><c> we</c><00:13:32.720><c> have</c><00:13:32.959><c> no</c>

00:13:33.269 --> 00:13:33.279 align:start position:0%
the constructor here where we have no
 

00:13:33.279 --> 00:13:35.509 align:start position:0%
the constructor here where we have no
elements<00:13:34.000><c> this</c><00:13:34.240><c> could</c><00:13:34.399><c> be</c><00:13:34.560><c> used</c><00:13:34.800><c> for</c><00:13:34.880><c> resizing</c>

00:13:35.509 --> 00:13:35.519 align:start position:0%
elements this could be used for resizing
 

00:13:35.519 --> 00:13:37.430 align:start position:0%
elements this could be used for resizing
from<00:13:35.760><c> say</c><00:13:36.079><c> four</c><00:13:36.320><c> to</c><00:13:36.560><c> six</c><00:13:36.880><c> so</c><00:13:37.040><c> in</c><00:13:37.120><c> other</c><00:13:37.279><c> words</c>

00:13:37.430 --> 00:13:37.440 align:start position:0%
from say four to six so in other words
 

00:13:37.440 --> 00:13:39.030 align:start position:0%
from say four to six so in other words
if<00:13:37.519><c> we</c><00:13:37.600><c> push</c><00:13:37.839><c> in</c><00:13:38.000><c> our</c><00:13:38.160><c> fifth</c><00:13:38.399><c> element</c><00:13:38.720><c> perhaps</c>

00:13:39.030 --> 00:13:39.040 align:start position:0%
if we push in our fifth element perhaps
 

00:13:39.040 --> 00:13:39.829 align:start position:0%
if we push in our fifth element perhaps
we<00:13:39.199><c> want</c><00:13:39.360><c> to</c>

00:13:39.829 --> 00:13:39.839 align:start position:0%
we want to
 

00:13:39.839 --> 00:13:42.389 align:start position:0%
we want to
resize<00:13:40.399><c> this</c><00:13:40.480><c> to</c><00:13:40.639><c> a</c><00:13:40.720><c> capacity</c><00:13:41.279><c> of</c><00:13:41.519><c> six</c><00:13:42.240><c> once</c>

00:13:42.389 --> 00:13:42.399 align:start position:0%
resize this to a capacity of six once
 

00:13:42.399 --> 00:13:44.150 align:start position:0%
resize this to a capacity of six once
we've<00:13:42.639><c> allocated</c><00:13:43.120><c> a</c><00:13:43.199><c> new</c><00:13:43.360><c> block</c><00:13:43.600><c> of</c><00:13:43.680><c> memory</c>

00:13:44.150 --> 00:13:44.160 align:start position:0%
we've allocated a new block of memory
 

00:13:44.160 --> 00:13:45.430 align:start position:0%
we've allocated a new block of memory
which<00:13:44.480><c> is</c><00:13:44.639><c> enough</c>

00:13:45.430 --> 00:13:45.440 align:start position:0%
which is enough
 

00:13:45.440 --> 00:13:47.189 align:start position:0%
which is enough
to<00:13:45.600><c> hold</c><00:13:45.839><c> all</c><00:13:46.000><c> of</c><00:13:46.160><c> our</c><00:13:46.320><c> elements</c><00:13:46.800><c> or</c><00:13:46.959><c> in</c><00:13:47.040><c> this</c>

00:13:47.189 --> 00:13:47.199 align:start position:0%
to hold all of our elements or in this
 

00:13:47.199 --> 00:13:49.189 align:start position:0%
to hold all of our elements or in this
case<00:13:47.440><c> it's</c><00:13:47.600><c> going</c><00:13:47.760><c> to</c><00:13:47.920><c> be</c><00:13:48.399><c> the</c><00:13:48.560><c> size</c><00:13:48.880><c> of</c><00:13:49.040><c> new</c>

00:13:49.189 --> 00:13:49.199 align:start position:0%
case it's going to be the size of new
 

00:13:49.199 --> 00:13:50.389 align:start position:0%
case it's going to be the size of new
capacity<00:13:49.839><c> here</c>

00:13:50.389 --> 00:13:50.399 align:start position:0%
capacity here
 

00:13:50.399 --> 00:13:52.069 align:start position:0%
capacity here
once<00:13:50.639><c> we've</c><00:13:50.800><c> done</c><00:13:51.040><c> that</c><00:13:51.279><c> we</c><00:13:51.440><c> need</c><00:13:51.600><c> to</c><00:13:51.680><c> copy</c>

00:13:52.069 --> 00:13:52.079 align:start position:0%
once we've done that we need to copy
 

00:13:52.079 --> 00:13:54.150 align:start position:0%
once we've done that we need to copy
across<00:13:52.560><c> all</c><00:13:52.720><c> of</c><00:13:52.880><c> our</c><00:13:53.199><c> old</c><00:13:53.519><c> elements</c>

00:13:54.150 --> 00:13:54.160 align:start position:0%
across all of our old elements
 

00:13:54.160 --> 00:13:56.470 align:start position:0%
across all of our old elements
into<00:13:54.480><c> this</c><00:13:54.720><c> new</c><00:13:54.880><c> block</c><00:13:55.120><c> of</c><00:13:55.199><c> memory</c><00:13:56.000><c> so</c><00:13:56.160><c> that's</c>

00:13:56.470 --> 00:13:56.480 align:start position:0%
into this new block of memory so that's
 

00:13:56.480 --> 00:13:57.269 align:start position:0%
into this new block of memory so that's
the<00:13:56.560><c> next</c><00:13:56.800><c> step</c>

00:13:57.269 --> 00:13:57.279 align:start position:0%
the next step
 

00:13:57.279 --> 00:13:59.269 align:start position:0%
the next step
copy<00:13:57.680><c> now</c><00:13:57.920><c> i'm</c><00:13:58.079><c> saying</c><00:13:58.480><c> copy</c><00:13:59.040><c> but</c>

00:13:59.269 --> 00:13:59.279 align:start position:0%
copy now i'm saying copy but
 

00:13:59.279 --> 00:14:01.430 align:start position:0%
copy now i'm saying copy but
realistically<00:14:00.079><c> you</c><00:14:00.240><c> want</c><00:14:00.480><c> to</c><00:14:00.720><c> try</c><00:14:00.959><c> and</c><00:14:01.120><c> move</c>

00:14:01.430 --> 00:14:01.440 align:start position:0%
realistically you want to try and move
 

00:14:01.440 --> 00:14:03.350 align:start position:0%
realistically you want to try and move
them<00:14:01.680><c> for</c><00:14:01.920><c> sure</c><00:14:02.320><c> because</c><00:14:02.639><c> copying</c><00:14:03.040><c> them</c><00:14:03.279><c> is</c>

00:14:03.350 --> 00:14:03.360 align:start position:0%
them for sure because copying them is
 

00:14:03.360 --> 00:14:04.230 align:start position:0%
them for sure because copying them is
going<00:14:03.600><c> to</c><00:14:03.760><c> be</c>

00:14:04.230 --> 00:14:04.240 align:start position:0%
going to be
 

00:14:04.240 --> 00:14:05.829 align:start position:0%
going to be
not<00:14:04.480><c> only</c><00:14:04.720><c> a</c><00:14:04.800><c> waste</c><00:14:05.040><c> of</c><00:14:05.120><c> performance</c><00:14:05.680><c> it's</c>

00:14:05.829 --> 00:14:05.839 align:start position:0%
not only a waste of performance it's
 

00:14:05.839 --> 00:14:07.590 align:start position:0%
not only a waste of performance it's
just<00:14:06.000><c> going</c><00:14:06.160><c> to</c><00:14:06.240><c> be</c><00:14:06.399><c> unnecessary</c><00:14:07.279><c> because</c>

00:14:07.590 --> 00:14:07.600 align:start position:0%
just going to be unnecessary because
 

00:14:07.600 --> 00:14:08.389 align:start position:0%
just going to be unnecessary because
clearly

00:14:08.389 --> 00:14:08.399 align:start position:0%
clearly
 

00:14:08.399 --> 00:14:10.550 align:start position:0%
clearly
we're<00:14:08.560><c> going</c><00:14:08.800><c> to</c><00:14:08.880><c> be</c><00:14:09.120><c> deleting</c><00:14:09.839><c> the</c><00:14:10.079><c> old</c><00:14:10.320><c> block</c>

00:14:10.550 --> 00:14:10.560 align:start position:0%
we're going to be deleting the old block
 

00:14:10.560 --> 00:14:12.710 align:start position:0%
we're going to be deleting the old block
of<00:14:10.639><c> memory</c><00:14:11.120><c> which</c><00:14:11.360><c> is</c><00:14:11.519><c> our</c><00:14:11.760><c> third</c><00:14:12.079><c> step</c>

00:14:12.710 --> 00:14:12.720 align:start position:0%
of memory which is our third step
 

00:14:12.720 --> 00:14:15.990 align:start position:0%
of memory which is our third step
so<00:14:12.959><c> copy</c><00:14:13.279><c> slash</c><00:14:13.760><c> move</c><00:14:14.480><c> alt</c><00:14:14.959><c> elements</c><00:14:15.519><c> into</c>

00:14:15.990 --> 00:14:16.000 align:start position:0%
so copy slash move alt elements into
 

00:14:16.000 --> 00:14:18.069 align:start position:0%
so copy slash move alt elements into
new<00:14:16.160><c> block</c><00:14:16.639><c> this</c><00:14:16.880><c> is</c><00:14:16.959><c> what</c><00:14:17.199><c> our</c><00:14:17.360><c> reallocation</c>

00:14:18.069 --> 00:14:18.079 align:start position:0%
new block this is what our reallocation
 

00:14:18.079 --> 00:14:19.269 align:start position:0%
new block this is what our reallocation
function<00:14:18.560><c> looks</c><00:14:18.800><c> like</c>

00:14:19.269 --> 00:14:19.279 align:start position:0%
function looks like
 

00:14:19.279 --> 00:14:21.110 align:start position:0%
function looks like
so<00:14:19.600><c> now</c><00:14:19.760><c> let's</c><00:14:20.000><c> implement</c><00:14:20.399><c> it</c><00:14:20.560><c> it's</c><00:14:20.720><c> not</c><00:14:20.880><c> going</c>

00:14:21.110 --> 00:14:21.120 align:start position:0%
so now let's implement it it's not going
 

00:14:21.120 --> 00:14:23.030 align:start position:0%
so now let's implement it it's not going
to<00:14:21.199><c> be</c><00:14:21.360><c> too</c><00:14:21.519><c> hard</c><00:14:21.839><c> first</c><00:14:22.079><c> i'm</c><00:14:22.240><c> going</c><00:14:22.320><c> to</c><00:14:22.480><c> make</c><00:14:22.720><c> a</c>

00:14:23.030 --> 00:14:23.040 align:start position:0%
to be too hard first i'm going to make a
 

00:14:23.040 --> 00:14:25.189 align:start position:0%
to be too hard first i'm going to make a
t<00:14:23.279><c> pointer</c><00:14:23.680><c> here</c><00:14:24.079><c> we'll</c><00:14:24.240><c> call</c><00:14:24.399><c> this</c><00:14:24.639><c> new</c><00:14:24.800><c> block</c>

00:14:25.189 --> 00:14:25.199 align:start position:0%
t pointer here we'll call this new block
 

00:14:25.199 --> 00:14:27.030 align:start position:0%
t pointer here we'll call this new block
and<00:14:25.279><c> this</c><00:14:25.519><c> is</c><00:14:25.680><c> going</c><00:14:25.920><c> to</c><00:14:26.079><c> just</c><00:14:26.320><c> simply</c><00:14:26.639><c> be</c>

00:14:27.030 --> 00:14:27.040 align:start position:0%
and this is going to just simply be
 

00:14:27.040 --> 00:14:30.069 align:start position:0%
and this is going to just simply be
nu<00:14:27.360><c> t</c><00:14:28.000><c> with</c><00:14:28.240><c> our</c><00:14:28.480><c> new</c><00:14:28.720><c> capacity</c><00:14:29.600><c> simple</c>

00:14:30.069 --> 00:14:30.079 align:start position:0%
nu t with our new capacity simple
 

00:14:30.079 --> 00:14:33.189 align:start position:0%
nu t with our new capacity simple
as<00:14:30.320><c> that</c><00:14:30.959><c> now</c><00:14:31.199><c> we</c><00:14:31.360><c> could</c><00:14:31.680><c> use</c><00:14:32.079><c> like</c><00:14:32.480><c> maybe</c><00:14:33.040><c> a</c>

00:14:33.189 --> 00:14:33.199 align:start position:0%
as that now we could use like maybe a
 

00:14:33.199 --> 00:14:35.030 align:start position:0%
as that now we could use like maybe a
unique<00:14:33.519><c> pointer</c><00:14:33.920><c> here</c><00:14:34.160><c> or</c><00:14:34.320><c> a</c><00:14:34.399><c> shared</c><00:14:34.639><c> pointer</c>

00:14:35.030 --> 00:14:35.040 align:start position:0%
unique pointer here or a shared pointer
 

00:14:35.040 --> 00:14:35.990 align:start position:0%
unique pointer here or a shared pointer
or<00:14:35.120><c> something</c><00:14:35.360><c> like</c><00:14:35.519><c> that</c>

00:14:35.990 --> 00:14:36.000 align:start position:0%
or something like that
 

00:14:36.000 --> 00:14:38.550 align:start position:0%
or something like that
i<00:14:36.320><c> never</c><00:14:36.959><c> like</c><00:14:37.279><c> using</c><00:14:37.600><c> smart</c><00:14:37.920><c> pointers</c><00:14:38.399><c> when</c>

00:14:38.550 --> 00:14:38.560 align:start position:0%
i never like using smart pointers when
 

00:14:38.560 --> 00:14:39.189 align:start position:0%
i never like using smart pointers when
i'm<00:14:38.720><c> kind</c><00:14:38.959><c> of</c>

00:14:39.189 --> 00:14:39.199 align:start position:0%
i'm kind of
 

00:14:39.199 --> 00:14:40.790 align:start position:0%
i'm kind of
this<00:14:39.519><c> low</c><00:14:39.680><c> level</c><00:14:40.000><c> into</c><00:14:40.240><c> things</c><00:14:40.480><c> if</c><00:14:40.639><c> i'm</c>

00:14:40.790 --> 00:14:40.800 align:start position:0%
this low level into things if i'm
 

00:14:40.800 --> 00:14:43.430 align:start position:0%
this low level into things if i'm
dealing<00:14:41.120><c> with</c><00:14:41.360><c> like</c><00:14:41.680><c> allocations</c><00:14:42.639><c> and</c>

00:14:43.430 --> 00:14:43.440 align:start position:0%
dealing with like allocations and
 

00:14:43.440 --> 00:14:45.590 align:start position:0%
dealing with like allocations and
custom<00:14:43.920><c> data</c><00:14:44.240><c> structures</c><00:14:45.040><c> i</c><00:14:45.279><c> think</c><00:14:45.440><c> that</c>

00:14:45.590 --> 00:14:45.600 align:start position:0%
custom data structures i think that
 

00:14:45.600 --> 00:14:46.870 align:start position:0%
custom data structures i think that
using<00:14:45.920><c> smart</c><00:14:46.240><c> pointers</c>

00:14:46.870 --> 00:14:46.880 align:start position:0%
using smart pointers
 

00:14:46.880 --> 00:14:49.110 align:start position:0%
using smart pointers
is<00:14:47.040><c> just</c><00:14:47.279><c> an</c><00:14:47.519><c> unnecessary</c><00:14:48.160><c> layer</c><00:14:48.560><c> on</c><00:14:48.720><c> top</c><00:14:48.959><c> of</c>

00:14:49.110 --> 00:14:49.120 align:start position:0%
is just an unnecessary layer on top of
 

00:14:49.120 --> 00:14:50.150 align:start position:0%
is just an unnecessary layer on top of
everything<00:14:49.760><c> else</c>

00:14:50.150 --> 00:14:50.160 align:start position:0%
everything else
 

00:14:50.160 --> 00:14:51.910 align:start position:0%
everything else
if<00:14:50.240><c> we're</c><00:14:50.399><c> designing</c><00:14:50.800><c> a</c><00:14:50.880><c> data</c><00:14:51.199><c> structure</c><00:14:51.680><c> we</c>

00:14:51.910 --> 00:14:51.920 align:start position:0%
if we're designing a data structure we
 

00:14:51.920 --> 00:14:53.269 align:start position:0%
if we're designing a data structure we
want<00:14:52.079><c> to</c><00:14:52.240><c> access</c><00:14:52.639><c> memory</c>

00:14:53.269 --> 00:14:53.279 align:start position:0%
want to access memory
 

00:14:53.279 --> 00:14:55.829 align:start position:0%
want to access memory
as<00:14:53.519><c> low</c><00:14:53.680><c> level</c><00:14:54.079><c> as</c><00:14:54.240><c> we</c><00:14:54.639><c> can</c><00:14:55.040><c> so</c><00:14:55.199><c> that's</c><00:14:55.440><c> why</c><00:14:55.680><c> i'm</c>

00:14:55.829 --> 00:14:55.839 align:start position:0%
as low level as we can so that's why i'm
 

00:14:55.839 --> 00:14:57.670 align:start position:0%
as low level as we can so that's why i'm
using<00:14:56.160><c> raw</c><00:14:56.399><c> pointers</c><00:14:56.880><c> here</c><00:14:57.040><c> so</c><00:14:57.199><c> once</c><00:14:57.440><c> we've</c>

00:14:57.670 --> 00:14:57.680 align:start position:0%
using raw pointers here so once we've
 

00:14:57.680 --> 00:14:59.750 align:start position:0%
using raw pointers here so once we've
allocated<00:14:58.240><c> this</c><00:14:58.399><c> block</c><00:14:58.720><c> we</c><00:14:58.880><c> now</c><00:14:59.120><c> need</c><00:14:59.360><c> to</c>

00:14:59.750 --> 00:14:59.760 align:start position:0%
allocated this block we now need to
 

00:14:59.760 --> 00:15:02.069 align:start position:0%
allocated this block we now need to
move<00:15:00.079><c> everything</c><00:15:00.560><c> from</c><00:15:00.800><c> the</c><00:15:01.040><c> old</c><00:15:01.360><c> block</c><00:15:01.839><c> into</c>

00:15:02.069 --> 00:15:02.079 align:start position:0%
move everything from the old block into
 

00:15:02.079 --> 00:15:03.670 align:start position:0%
move everything from the old block into
the<00:15:02.160><c> new</c><00:15:02.320><c> block</c><00:15:02.720><c> so</c><00:15:02.880><c> to</c><00:15:02.959><c> do</c><00:15:03.120><c> that</c>

00:15:03.670 --> 00:15:03.680 align:start position:0%
the new block so to do that
 

00:15:03.680 --> 00:15:05.590 align:start position:0%
the new block so to do that
we'll<00:15:03.839><c> simply</c><00:15:04.160><c> write</c><00:15:04.399><c> a</c><00:15:04.480><c> for</c><00:15:04.720><c> loop</c><00:15:05.040><c> that</c><00:15:05.279><c> goes</c>

00:15:05.590 --> 00:15:05.600 align:start position:0%
we'll simply write a for loop that goes
 

00:15:05.600 --> 00:15:07.269 align:start position:0%
we'll simply write a for loop that goes
through<00:15:06.000><c> all</c><00:15:06.160><c> of</c><00:15:06.240><c> the</c><00:15:06.399><c> elements</c>

00:15:07.269 --> 00:15:07.279 align:start position:0%
through all of the elements
 

00:15:07.279 --> 00:15:09.189 align:start position:0%
through all of the elements
that<00:15:07.519><c> currently</c><00:15:07.920><c> exist</c><00:15:08.399><c> so</c><00:15:08.560><c> we</c><00:15:08.639><c> can</c><00:15:08.800><c> just</c><00:15:08.959><c> use</c>

00:15:09.189 --> 00:15:09.199 align:start position:0%
that currently exist so we can just use
 

00:15:09.199 --> 00:15:10.949 align:start position:0%
that currently exist so we can just use
m<00:15:09.440><c> size</c><00:15:09.760><c> here</c><00:15:10.079><c> and</c><00:15:10.240><c> we'll</c><00:15:10.480><c> just</c>

00:15:10.949 --> 00:15:10.959 align:start position:0%
m size here and we'll just
 

00:15:10.959 --> 00:15:13.670 align:start position:0%
m size here and we'll just
copy<00:15:11.199><c> them</c><00:15:11.440><c> across</c><00:15:12.240><c> and</c><00:15:12.399><c> we</c><00:15:12.560><c> can</c><00:15:12.720><c> do</c><00:15:12.880><c> that</c><00:15:13.279><c> like</c>

00:15:13.670 --> 00:15:13.680 align:start position:0%
copy them across and we can do that like
 

00:15:13.680 --> 00:15:14.069 align:start position:0%
copy them across and we can do that like
this

00:15:14.069 --> 00:15:14.079 align:start position:0%
this
 

00:15:14.079 --> 00:15:15.590 align:start position:0%
this
now<00:15:14.240><c> we</c><00:15:14.399><c> are</c><00:15:14.560><c> copying</c><00:15:14.880><c> them</c><00:15:15.040><c> currently</c><00:15:15.440><c> we're</c>

00:15:15.590 --> 00:15:15.600 align:start position:0%
now we are copying them currently we're
 

00:15:15.600 --> 00:15:16.949 align:start position:0%
now we are copying them currently we're
going<00:15:15.680><c> to</c><00:15:15.760><c> take</c><00:15:15.839><c> a</c><00:15:15.920><c> look</c><00:15:16.079><c> at</c><00:15:16.160><c> moving</c><00:15:16.480><c> them</c><00:15:16.720><c> in</c><00:15:16.880><c> a</c>

00:15:16.949 --> 00:15:16.959 align:start position:0%
going to take a look at moving them in a
 

00:15:16.959 --> 00:15:18.470 align:start position:0%
going to take a look at moving them in a
little<00:15:17.120><c> bit</c><00:15:17.360><c> so</c><00:15:17.519><c> why</c><00:15:17.680><c> are</c><00:15:17.760><c> we</c><00:15:17.920><c> written</c><00:15:18.160><c> a</c><00:15:18.240><c> for</c>

00:15:18.470 --> 00:15:18.480 align:start position:0%
little bit so why are we written a for
 

00:15:18.480 --> 00:15:20.870 align:start position:0%
little bit so why are we written a for
loop<00:15:18.720><c> why</c><00:15:18.959><c> can't</c><00:15:19.199><c> we</c><00:15:19.360><c> just</c><00:15:19.600><c> use</c><00:15:19.839><c> mem</c><00:15:20.160><c> copy</c>

00:15:20.870 --> 00:15:20.880 align:start position:0%
loop why can't we just use mem copy
 

00:15:20.880 --> 00:15:22.790 align:start position:0%
loop why can't we just use mem copy
well<00:15:21.199><c> we</c><00:15:21.360><c> can't</c><00:15:21.519><c> use</c><00:15:21.680><c> mam</c><00:15:21.920><c> copy</c><00:15:22.240><c> because</c><00:15:22.560><c> we</c>

00:15:22.790 --> 00:15:22.800 align:start position:0%
well we can't use mam copy because we
 

00:15:22.800 --> 00:15:24.230 align:start position:0%
well we can't use mam copy because we
actually<00:15:23.120><c> need</c><00:15:23.279><c> to</c><00:15:23.360><c> be</c><00:15:23.519><c> hitting</c><00:15:23.839><c> the</c><00:15:23.920><c> copy</c>

00:15:24.230 --> 00:15:24.240 align:start position:0%
actually need to be hitting the copy
 

00:15:24.240 --> 00:15:26.389 align:start position:0%
actually need to be hitting the copy
constructor<00:15:24.800><c> of</c><00:15:24.959><c> all</c><00:15:25.120><c> of</c><00:15:25.199><c> these</c><00:15:25.519><c> elements</c>

00:15:26.389 --> 00:15:26.399 align:start position:0%
constructor of all of these elements
 

00:15:26.399 --> 00:15:28.230 align:start position:0%
constructor of all of these elements
if<00:15:26.560><c> we</c><00:15:26.639><c> had</c><00:15:26.800><c> a</c><00:15:26.880><c> bunch</c><00:15:27.120><c> of</c><00:15:27.360><c> integers</c><00:15:27.839><c> or</c><00:15:27.920><c> floats</c>

00:15:28.230 --> 00:15:28.240 align:start position:0%
if we had a bunch of integers or floats
 

00:15:28.240 --> 00:15:29.590 align:start position:0%
if we had a bunch of integers or floats
or<00:15:28.399><c> any</c><00:15:28.480><c> kind</c><00:15:28.639><c> of</c><00:15:28.720><c> primitive</c><00:15:29.120><c> type</c>

00:15:29.590 --> 00:15:29.600 align:start position:0%
or any kind of primitive type
 

00:15:29.600 --> 00:15:31.590 align:start position:0%
or any kind of primitive type
that's<00:15:29.920><c> totally</c><00:15:30.399><c> fine</c><00:15:30.800><c> we</c><00:15:30.959><c> can</c><00:15:31.120><c> just</c><00:15:31.360><c> use</c>

00:15:31.590 --> 00:15:31.600 align:start position:0%
that's totally fine we can just use
 

00:15:31.600 --> 00:15:32.629 align:start position:0%
that's totally fine we can just use
memcopy

00:15:32.629 --> 00:15:32.639 align:start position:0%
memcopy
 

00:15:32.639 --> 00:15:35.350 align:start position:0%
memcopy
but<00:15:32.959><c> for</c><00:15:33.360><c> more</c><00:15:33.600><c> complex</c><00:15:34.160><c> types</c><00:15:34.480><c> like</c><00:15:34.720><c> classes</c>

00:15:35.350 --> 00:15:35.360 align:start position:0%
but for more complex types like classes
 

00:15:35.360 --> 00:15:36.230 align:start position:0%
but for more complex types like classes
that<00:15:35.600><c> might</c><00:15:35.839><c> have</c>

00:15:36.230 --> 00:15:36.240 align:start position:0%
that might have
 

00:15:36.240 --> 00:15:38.069 align:start position:0%
that might have
allocations<00:15:36.959><c> of</c><00:15:37.120><c> their</c><00:15:37.440><c> own</c><00:15:37.759><c> which</c><00:15:37.920><c> the</c>

00:15:38.069 --> 00:15:38.079 align:start position:0%
allocations of their own which the
 

00:15:38.079 --> 00:15:39.990 align:start position:0%
allocations of their own which the
copyconstructor<00:15:38.800><c> will</c><00:15:38.959><c> then</c><00:15:39.199><c> perform</c><00:15:39.600><c> a</c><00:15:39.759><c> deep</c>

00:15:39.990 --> 00:15:40.000 align:start position:0%
copyconstructor will then perform a deep
 

00:15:40.000 --> 00:15:41.430 align:start position:0%
copyconstructor will then perform a deep
copy<00:15:40.399><c> on</c><00:15:40.639><c> it</c><00:15:40.639><c> it's</c><00:15:40.800><c> important</c><00:15:41.120><c> for</c><00:15:41.199><c> us</c><00:15:41.360><c> to</c>

00:15:41.430 --> 00:15:41.440 align:start position:0%
copy on it it's important for us to
 

00:15:41.440 --> 00:15:42.870 align:start position:0%
copy on it it's important for us to
actually<00:15:41.680><c> make</c><00:15:41.920><c> sure</c><00:15:42.160><c> that</c><00:15:42.320><c> we're</c><00:15:42.560><c> calling</c>

00:15:42.870 --> 00:15:42.880 align:start position:0%
actually make sure that we're calling
 

00:15:42.880 --> 00:15:44.710 align:start position:0%
actually make sure that we're calling
that<00:15:43.120><c> copy</c><00:15:43.440><c> constructor</c><00:15:44.079><c> otherwise</c><00:15:44.560><c> our</c>

00:15:44.710 --> 00:15:44.720 align:start position:0%
that copy constructor otherwise our
 

00:15:44.720 --> 00:15:46.710 align:start position:0%
that copy constructor otherwise our
classes<00:15:45.199><c> and</c><00:15:45.360><c> more</c><00:15:45.519><c> complex</c><00:15:45.920><c> types</c><00:15:46.240><c> won't</c><00:15:46.480><c> get</c>

00:15:46.710 --> 00:15:46.720 align:start position:0%
classes and more complex types won't get
 

00:15:46.720 --> 00:15:47.829 align:start position:0%
classes and more complex types won't get
copied<00:15:47.120><c> correctly</c>

00:15:47.829 --> 00:15:47.839 align:start position:0%
copied correctly
 

00:15:47.839 --> 00:15:49.509 align:start position:0%
copied correctly
after<00:15:48.160><c> we've</c><00:15:48.320><c> copied</c><00:15:48.720><c> everything</c><00:15:49.120><c> into</c><00:15:49.360><c> this</c>

00:15:49.509 --> 00:15:49.519 align:start position:0%
after we've copied everything into this
 

00:15:49.519 --> 00:15:51.350 align:start position:0%
after we've copied everything into this
new<00:15:49.680><c> block</c><00:15:50.000><c> we</c><00:15:50.160><c> can</c><00:15:50.399><c> just</c><00:15:50.800><c> delete</c>

00:15:51.350 --> 00:15:51.360 align:start position:0%
new block we can just delete
 

00:15:51.360 --> 00:15:53.670 align:start position:0%
new block we can just delete
our<00:15:51.680><c> old</c><00:15:51.920><c> block</c><00:15:52.320><c> which</c><00:15:52.560><c> is</c><00:15:52.880><c> of</c><00:15:52.959><c> course</c><00:15:53.279><c> called</c>

00:15:53.670 --> 00:15:53.680 align:start position:0%
our old block which is of course called
 

00:15:53.680 --> 00:15:54.389 align:start position:0%
our old block which is of course called
mdata

00:15:54.389 --> 00:15:54.399 align:start position:0%
mdata
 

00:15:54.399 --> 00:15:57.030 align:start position:0%
mdata
we<00:15:54.560><c> can</c><00:15:54.720><c> then</c><00:15:55.199><c> set</c><00:15:55.600><c> mdata</c><00:15:56.160><c> to</c><00:15:56.320><c> be</c><00:15:56.560><c> our</c><00:15:56.880><c> new</c>

00:15:57.030 --> 00:15:57.040 align:start position:0%
we can then set mdata to be our new
 

00:15:57.040 --> 00:15:58.150 align:start position:0%
we can then set mdata to be our new
block<00:15:57.440><c> and</c><00:15:57.600><c> finally</c>

00:15:58.150 --> 00:15:58.160 align:start position:0%
block and finally
 

00:15:58.160 --> 00:16:01.030 align:start position:0%
block and finally
make<00:15:58.320><c> sure</c><00:15:58.480><c> that</c><00:15:58.720><c> our</c><00:15:58.880><c> capacity</c><00:15:59.600><c> matches</c><00:16:00.560><c> our</c>

00:16:01.030 --> 00:16:01.040 align:start position:0%
make sure that our capacity matches our
 

00:16:01.040 --> 00:16:02.069 align:start position:0%
make sure that our capacity matches our
new<00:16:01.279><c> capacity</c>

00:16:02.069 --> 00:16:02.079 align:start position:0%
new capacity
 

00:16:02.079 --> 00:16:04.629 align:start position:0%
new capacity
size<00:16:02.399><c> here</c><00:16:02.720><c> remains</c><00:16:03.199><c> intact</c><00:16:03.839><c> because</c><00:16:04.480><c> it's</c>

00:16:04.629 --> 00:16:04.639 align:start position:0%
size here remains intact because it's
 

00:16:04.639 --> 00:16:06.870 align:start position:0%
size here remains intact because it's
not<00:16:04.800><c> the</c><00:16:04.959><c> responsibility</c><00:16:05.600><c> of</c><00:16:05.759><c> reallocation</c>

00:16:06.870 --> 00:16:06.880 align:start position:0%
not the responsibility of reallocation
 

00:16:06.880 --> 00:16:08.790 align:start position:0%
not the responsibility of reallocation
to<00:16:07.120><c> actually</c><00:16:07.680><c> set</c><00:16:07.839><c> the</c><00:16:08.000><c> size</c><00:16:08.399><c> it's</c><00:16:08.560><c> more</c><00:16:08.720><c> or</c>

00:16:08.790 --> 00:16:08.800 align:start position:0%
to actually set the size it's more or
 

00:16:08.800 --> 00:16:11.110 align:start position:0%
to actually set the size it's more or
less<00:16:09.120><c> in</c><00:16:09.360><c> charge</c><00:16:09.759><c> of</c><00:16:10.000><c> the</c><00:16:10.160><c> capacity</c>

00:16:11.110 --> 00:16:11.120 align:start position:0%
less in charge of the capacity
 

00:16:11.120 --> 00:16:13.189 align:start position:0%
less in charge of the capacity
now<00:16:11.279><c> there's</c><00:16:11.519><c> one</c><00:16:11.839><c> little</c><00:16:12.240><c> flaw</c><00:16:12.560><c> here</c><00:16:13.040><c> and</c>

00:16:13.189 --> 00:16:13.199 align:start position:0%
now there's one little flaw here and
 

00:16:13.199 --> 00:16:14.790 align:start position:0%
now there's one little flaw here and
that<00:16:13.360><c> is</c><00:16:13.519><c> that</c><00:16:13.680><c> this</c><00:16:13.920><c> will</c><00:16:14.160><c> theoretically</c>

00:16:14.790 --> 00:16:14.800 align:start position:0%
that is that this will theoretically
 

00:16:14.800 --> 00:16:15.990 align:start position:0%
that is that this will theoretically
only<00:16:15.199><c> work</c><00:16:15.519><c> for</c>

00:16:15.990 --> 00:16:16.000 align:start position:0%
only work for
 

00:16:16.000 --> 00:16:19.350 align:start position:0%
only work for
growing<00:16:16.639><c> our</c><00:16:16.880><c> size</c><00:16:17.360><c> if</c><00:16:17.519><c> we</c><00:16:17.680><c> want</c><00:16:17.920><c> to</c><00:16:18.639><c> downsize</c>

00:16:19.350 --> 00:16:19.360 align:start position:0%
growing our size if we want to downsize
 

00:16:19.360 --> 00:16:21.030 align:start position:0%
growing our size if we want to downsize
our<00:16:19.600><c> allocation</c><00:16:20.160><c> from</c><00:16:20.399><c> a</c><00:16:20.480><c> larger</c>

00:16:21.030 --> 00:16:21.040 align:start position:0%
our allocation from a larger
 

00:16:21.040 --> 00:16:23.269 align:start position:0%
our allocation from a larger
block<00:16:21.360><c> to</c><00:16:21.519><c> a</c><00:16:21.680><c> smaller</c><00:16:22.079><c> block</c><00:16:22.560><c> it</c><00:16:22.800><c> this</c><00:16:23.120><c> for</c>

00:16:23.269 --> 00:16:23.279 align:start position:0%
block to a smaller block it this for
 

00:16:23.279 --> 00:16:24.790 align:start position:0%
block to a smaller block it this for
loop<00:16:23.600><c> isn't</c><00:16:23.759><c> really</c><00:16:24.000><c> going</c><00:16:24.240><c> to</c><00:16:24.399><c> work</c>

00:16:24.790 --> 00:16:24.800 align:start position:0%
loop isn't really going to work
 

00:16:24.800 --> 00:16:26.949 align:start position:0%
loop isn't really going to work
because<00:16:25.199><c> it</c><00:16:25.360><c> of</c><00:16:25.440><c> course</c><00:16:25.680><c> relies</c><00:16:26.160><c> on</c><00:16:26.320><c> m</c><00:16:26.639><c> size</c>

00:16:26.949 --> 00:16:26.959 align:start position:0%
because it of course relies on m size
 

00:16:26.959 --> 00:16:28.230 align:start position:0%
because it of course relies on m size
being<00:16:27.360><c> smaller</c>

00:16:28.230 --> 00:16:28.240 align:start position:0%
being smaller
 

00:16:28.240 --> 00:16:30.069 align:start position:0%
being smaller
than<00:16:28.399><c> this</c><00:16:28.639><c> new</c><00:16:28.880><c> capacity</c><00:16:29.519><c> otherwise</c><00:16:29.920><c> we're</c>

00:16:30.069 --> 00:16:30.079 align:start position:0%
than this new capacity otherwise we're
 

00:16:30.079 --> 00:16:31.509 align:start position:0%
than this new capacity otherwise we're
going<00:16:30.320><c> to</c><00:16:30.720><c> overflow</c>

00:16:31.509 --> 00:16:31.519 align:start position:0%
going to overflow
 

00:16:31.519 --> 00:16:33.590 align:start position:0%
going to overflow
our<00:16:31.759><c> array</c><00:16:32.160><c> here</c><00:16:32.720><c> we</c><00:16:32.880><c> can</c><00:16:33.040><c> just</c><00:16:33.199><c> do</c><00:16:33.279><c> a</c><00:16:33.440><c> little</c>

00:16:33.590 --> 00:16:33.600 align:start position:0%
our array here we can just do a little
 

00:16:33.600 --> 00:16:35.430 align:start position:0%
our array here we can just do a little
check<00:16:33.839><c> though</c><00:16:34.079><c> to</c><00:16:34.240><c> make</c><00:16:34.399><c> sure</c><00:16:34.560><c> that</c><00:16:34.880><c> if</c><00:16:35.040><c> we</c><00:16:35.199><c> are</c>

00:16:35.430 --> 00:16:35.440 align:start position:0%
check though to make sure that if we are
 

00:16:35.440 --> 00:16:36.470 align:start position:0%
check though to make sure that if we are
downsizing

00:16:36.470 --> 00:16:36.480 align:start position:0%
downsizing
 

00:16:36.480 --> 00:16:39.269 align:start position:0%
downsizing
we<00:16:36.720><c> only</c><00:16:37.040><c> copy</c><00:16:37.600><c> up</c><00:16:37.759><c> to</c><00:16:38.000><c> new</c><00:16:38.160><c> capacity</c><00:16:38.800><c> size</c><00:16:39.120><c> of</c>

00:16:39.269 --> 00:16:39.279 align:start position:0%
we only copy up to new capacity size of
 

00:16:39.279 --> 00:16:39.990 align:start position:0%
we only copy up to new capacity size of
elements

00:16:39.990 --> 00:16:40.000 align:start position:0%
elements
 

00:16:40.000 --> 00:16:41.910 align:start position:0%
elements
and<00:16:40.160><c> so</c><00:16:40.320><c> to</c><00:16:40.480><c> do</c><00:16:40.639><c> that</c><00:16:40.880><c> i'll</c><00:16:41.120><c> just</c><00:16:41.360><c> write</c><00:16:41.759><c> a</c>

00:16:41.910 --> 00:16:41.920 align:start position:0%
and so to do that i'll just write a
 

00:16:41.920 --> 00:16:43.829 align:start position:0%
and so to do that i'll just write a
quick<00:16:42.240><c> if</c><00:16:42.480><c> statement</c><00:16:42.880><c> here</c><00:16:43.199><c> that</c><00:16:43.440><c> we'll</c><00:16:43.600><c> just</c>

00:16:43.829 --> 00:16:43.839 align:start position:0%
quick if statement here that we'll just
 

00:16:43.839 --> 00:16:45.829 align:start position:0%
quick if statement here that we'll just
check<00:16:44.079><c> to</c><00:16:44.240><c> see</c><00:16:44.480><c> if</c><00:16:44.639><c> new</c><00:16:44.800><c> capacity</c><00:16:45.519><c> is</c>

00:16:45.829 --> 00:16:45.839 align:start position:0%
check to see if new capacity is
 

00:16:45.839 --> 00:16:48.629 align:start position:0%
check to see if new capacity is
less<00:16:46.160><c> than</c><00:16:46.480><c> size</c><00:16:47.440><c> and</c><00:16:47.600><c> if</c><00:16:47.839><c> the</c><00:16:47.920><c> new</c><00:16:48.079><c> capacity</c>

00:16:48.629 --> 00:16:48.639 align:start position:0%
less than size and if the new capacity
 

00:16:48.639 --> 00:16:50.470 align:start position:0%
less than size and if the new capacity
is<00:16:48.800><c> less</c><00:16:49.040><c> than</c><00:16:49.199><c> our</c><00:16:49.440><c> current</c><00:16:49.839><c> size</c>

00:16:50.470 --> 00:16:50.480 align:start position:0%
is less than our current size
 

00:16:50.480 --> 00:16:53.030 align:start position:0%
is less than our current size
we'll<00:16:50.720><c> simply</c><00:16:51.120><c> set</c><00:16:51.440><c> size</c><00:16:51.839><c> to</c><00:16:52.000><c> new</c><00:16:52.160><c> capacity</c>

00:16:53.030 --> 00:16:53.040 align:start position:0%
we'll simply set size to new capacity
 

00:16:53.040 --> 00:16:54.389 align:start position:0%
we'll simply set size to new capacity
and<00:16:53.199><c> make</c><00:16:53.360><c> sure</c><00:16:53.519><c> that</c><00:16:53.680><c> we</c><00:16:53.839><c> use</c><00:16:54.000><c> this</c>

00:16:54.389 --> 00:16:54.399 align:start position:0%
and make sure that we use this
 

00:16:54.399 --> 00:16:56.629 align:start position:0%
and make sure that we use this
size<00:16:54.720><c> variable</c><00:16:55.120><c> here</c><00:16:55.759><c> now</c><00:16:56.000><c> since</c><00:16:56.240><c> we</c><00:16:56.480><c> are</c>

00:16:56.629 --> 00:16:56.639 align:start position:0%
size variable here now since we are
 

00:16:56.639 --> 00:16:57.910 align:start position:0%
size variable here now since we are
reallocating<00:16:57.440><c> though</c>

00:16:57.910 --> 00:16:57.920 align:start position:0%
reallocating though
 

00:16:57.920 --> 00:16:59.749 align:start position:0%
reallocating though
which<00:16:58.160><c> means</c><00:16:58.399><c> that</c><00:16:58.560><c> this</c><00:16:58.800><c> new</c><00:16:58.959><c> block</c><00:16:59.440><c> is</c><00:16:59.680><c> in</c>

00:16:59.749 --> 00:16:59.759 align:start position:0%
which means that this new block is in
 

00:16:59.759 --> 00:17:01.189 align:start position:0%
which means that this new block is in
fact<00:17:00.160><c> not</c><00:17:00.320><c> going</c><00:17:00.560><c> to</c><00:17:00.720><c> contain</c>

00:17:01.189 --> 00:17:01.199 align:start position:0%
fact not going to contain
 

00:17:01.199 --> 00:17:03.430 align:start position:0%
fact not going to contain
m<00:17:01.360><c> size</c><00:17:01.680><c> anymore</c><00:17:02.240><c> we</c><00:17:02.399><c> should</c><00:17:02.639><c> actually</c><00:17:03.040><c> update</c>

00:17:03.430 --> 00:17:03.440 align:start position:0%
m size anymore we should actually update
 

00:17:03.440 --> 00:17:04.230 align:start position:0%
m size anymore we should actually update
the<00:17:03.600><c> size</c>

00:17:04.230 --> 00:17:04.240 align:start position:0%
the size
 

00:17:04.240 --> 00:17:05.990 align:start position:0%
the size
and<00:17:04.400><c> because</c><00:17:04.640><c> of</c><00:17:04.720><c> that</c><00:17:04.880><c> we</c><00:17:05.039><c> can</c><00:17:05.199><c> simplify</c><00:17:05.760><c> this</c>

00:17:05.990 --> 00:17:06.000 align:start position:0%
and because of that we can simplify this
 

00:17:06.000 --> 00:17:07.829 align:start position:0%
and because of that we can simplify this
a<00:17:06.079><c> little</c><00:17:06.319><c> bit</c><00:17:06.640><c> and</c><00:17:06.799><c> just</c><00:17:07.039><c> change</c><00:17:07.360><c> it</c><00:17:07.439><c> to</c><00:17:07.600><c> be</c>

00:17:07.829 --> 00:17:07.839 align:start position:0%
a little bit and just change it to be
 

00:17:07.839 --> 00:17:09.350 align:start position:0%
a little bit and just change it to be
m<00:17:08.079><c> size</c><00:17:08.400><c> like</c><00:17:08.559><c> this</c><00:17:08.720><c> so</c><00:17:08.880><c> we're</c><00:17:09.039><c> actually</c>

00:17:09.350 --> 00:17:09.360 align:start position:0%
m size like this so we're actually
 

00:17:09.360 --> 00:17:11.110 align:start position:0%
m size like this so we're actually
directly<00:17:09.839><c> going</c><00:17:10.000><c> to</c><00:17:10.160><c> be</c><00:17:10.319><c> changing</c><00:17:10.720><c> the</c><00:17:10.880><c> size</c>

00:17:11.110 --> 00:17:11.120 align:start position:0%
directly going to be changing the size
 

00:17:11.120 --> 00:17:12.150 align:start position:0%
directly going to be changing the size
of<00:17:11.280><c> our</c><00:17:11.360><c> vector</c>

00:17:12.150 --> 00:17:12.160 align:start position:0%
of our vector
 

00:17:12.160 --> 00:17:14.549 align:start position:0%
of our vector
if<00:17:12.480><c> for</c><00:17:12.640><c> some</c><00:17:12.880><c> reason</c><00:17:13.360><c> we</c><00:17:13.520><c> downsize</c><00:17:14.160><c> it</c><00:17:14.400><c> now</c>

00:17:14.549 --> 00:17:14.559 align:start position:0%
if for some reason we downsize it now
 

00:17:14.559 --> 00:17:16.069 align:start position:0%
if for some reason we downsize it now
this<00:17:14.799><c> is</c><00:17:14.959><c> definitely</c><00:17:15.520><c> something</c><00:17:15.839><c> that</c><00:17:16.000><c> you</c>

00:17:16.069 --> 00:17:16.079 align:start position:0%
this is definitely something that you
 

00:17:16.079 --> 00:17:17.829 align:start position:0%
this is definitely something that you
could<00:17:16.319><c> argue</c><00:17:16.640><c> is</c><00:17:16.799><c> not</c><00:17:16.959><c> the</c><00:17:17.039><c> responsibility</c><00:17:17.760><c> of</c>

00:17:17.829 --> 00:17:17.839 align:start position:0%
could argue is not the responsibility of
 

00:17:17.839 --> 00:17:18.949 align:start position:0%
could argue is not the responsibility of
this<00:17:18.079><c> reality</c><00:17:18.480><c> function</c>

00:17:18.949 --> 00:17:18.959 align:start position:0%
this reality function
 

00:17:18.959 --> 00:17:20.630 align:start position:0%
this reality function
and<00:17:19.120><c> i</c><00:17:19.280><c> would</c><00:17:19.439><c> probably</c><00:17:19.760><c> agree</c><00:17:20.000><c> with</c><00:17:20.160><c> you</c><00:17:20.480><c> but</c>

00:17:20.630 --> 00:17:20.640 align:start position:0%
and i would probably agree with you but
 

00:17:20.640 --> 00:17:22.230 align:start position:0%
and i would probably agree with you but
to<00:17:20.720><c> keep</c><00:17:20.959><c> things</c><00:17:21.120><c> simple</c><00:17:21.760><c> we're</c><00:17:21.919><c> going</c><00:17:22.079><c> to</c>

00:17:22.230 --> 00:17:22.240 align:start position:0%
to keep things simple we're going to
 

00:17:22.240 --> 00:17:23.510 align:start position:0%
to keep things simple we're going to
leave<00:17:22.400><c> it</c><00:17:22.480><c> like</c><00:17:22.640><c> this</c><00:17:22.880><c> that's</c><00:17:23.199><c> it</c>

00:17:23.510 --> 00:17:23.520 align:start position:0%
leave it like this that's it
 

00:17:23.520 --> 00:17:25.350 align:start position:0%
leave it like this that's it
that<00:17:23.679><c> is</c><00:17:23.839><c> our</c><00:17:24.000><c> entire</c><00:17:24.319><c> reallocation</c><00:17:25.039><c> function</c>

00:17:25.350 --> 00:17:25.360 align:start position:0%
that is our entire reallocation function
 

00:17:25.360 --> 00:17:27.110 align:start position:0%
that is our entire reallocation function
we<00:17:25.520><c> should</c><00:17:25.760><c> now</c><00:17:26.000><c> be</c><00:17:26.160><c> able</c><00:17:26.319><c> to</c><00:17:26.559><c> easily</c>

00:17:27.110 --> 00:17:27.120 align:start position:0%
we should now be able to easily
 

00:17:27.120 --> 00:17:29.350 align:start position:0%
we should now be able to easily
grow<00:17:27.439><c> or</c><00:17:27.600><c> shrink</c><00:17:28.000><c> our</c><00:17:28.160><c> vector</c><00:17:28.640><c> as</c><00:17:28.799><c> needed</c><00:17:29.200><c> so</c>

00:17:29.350 --> 00:17:29.360 align:start position:0%
grow or shrink our vector as needed so
 

00:17:29.360 --> 00:17:30.710 align:start position:0%
grow or shrink our vector as needed so
now<00:17:29.600><c> let's</c><00:17:29.840><c> write</c><00:17:30.080><c> a</c><00:17:30.240><c> simple</c>

00:17:30.710 --> 00:17:30.720 align:start position:0%
now let's write a simple
 

00:17:30.720 --> 00:17:32.950 align:start position:0%
now let's write a simple
pushback<00:17:31.360><c> function</c><00:17:32.080><c> now</c><00:17:32.240><c> these</c><00:17:32.480><c> are</c><00:17:32.559><c> usually</c>

00:17:32.950 --> 00:17:32.960 align:start position:0%
pushback function now these are usually
 

00:17:32.960 --> 00:17:34.230 align:start position:0%
pushback function now these are usually
void<00:17:33.440><c> in</c><00:17:33.520><c> the</c><00:17:33.679><c> stl</c>

00:17:34.230 --> 00:17:34.240 align:start position:0%
void in the stl
 

00:17:34.240 --> 00:17:36.549 align:start position:0%
void in the stl
i<00:17:34.559><c> like</c><00:17:34.720><c> to</c><00:17:34.960><c> actually</c><00:17:35.200><c> have</c><00:17:35.360><c> them</c><00:17:35.600><c> return</c><00:17:36.000><c> the</c>

00:17:36.549 --> 00:17:36.559 align:start position:0%
i like to actually have them return the
 

00:17:36.559 --> 00:17:37.830 align:start position:0%
i like to actually have them return the
element<00:17:36.799><c> that</c><00:17:36.880><c> we're</c><00:17:37.039><c> pushing</c><00:17:37.360><c> back</c><00:17:37.600><c> but</c>

00:17:37.830 --> 00:17:37.840 align:start position:0%
element that we're pushing back but
 

00:17:37.840 --> 00:17:39.430 align:start position:0%
element that we're pushing back but
again<00:17:38.080><c> to</c><00:17:38.240><c> keep</c><00:17:38.400><c> things</c><00:17:38.640><c> simple</c>

00:17:39.430 --> 00:17:39.440 align:start position:0%
again to keep things simple
 

00:17:39.440 --> 00:17:42.470 align:start position:0%
again to keep things simple
we'll<00:17:40.160><c> keep</c><00:17:40.400><c> them</c><00:17:41.039><c> void</c><00:17:41.360><c> here</c><00:17:42.000><c> so</c><00:17:42.160><c> what</c><00:17:42.320><c> we're</c>

00:17:42.470 --> 00:17:42.480 align:start position:0%
we'll keep them void here so what we're
 

00:17:42.480 --> 00:17:43.270 align:start position:0%
we'll keep them void here so what we're
going<00:17:42.559><c> to</c><00:17:42.640><c> do</c><00:17:42.880><c> here</c>

00:17:43.270 --> 00:17:43.280 align:start position:0%
going to do here
 

00:17:43.280 --> 00:17:45.029 align:start position:0%
going to do here
is<00:17:43.520><c> push</c><00:17:43.760><c> back</c><00:17:43.919><c> an</c><00:17:44.080><c> element</c><00:17:44.400><c> so</c><00:17:44.480><c> how</c><00:17:44.640><c> do</c><00:17:44.799><c> we</c><00:17:44.880><c> do</c>

00:17:45.029 --> 00:17:45.039 align:start position:0%
is push back an element so how do we do
 

00:17:45.039 --> 00:17:46.789 align:start position:0%
is push back an element so how do we do
that<00:17:45.200><c> well</c><00:17:45.440><c> it's</c><00:17:45.679><c> pretty</c><00:17:45.919><c> simple</c><00:17:46.320><c> we</c><00:17:46.400><c> can</c><00:17:46.559><c> just</c>

00:17:46.789 --> 00:17:46.799 align:start position:0%
that well it's pretty simple we can just
 

00:17:46.799 --> 00:17:47.990 align:start position:0%
that well it's pretty simple we can just
say<00:17:47.039><c> mdata</c>

00:17:47.990 --> 00:17:48.000 align:start position:0%
say mdata
 

00:17:48.000 --> 00:17:50.789 align:start position:0%
say mdata
at<00:17:48.320><c> m</c><00:17:48.640><c> size</c><00:17:49.440><c> equals</c><00:17:49.919><c> value</c><00:17:50.400><c> and</c><00:17:50.480><c> then</c><00:17:50.640><c> we</c>

00:17:50.789 --> 00:17:50.799 align:start position:0%
at m size equals value and then we
 

00:17:50.799 --> 00:17:51.990 align:start position:0%
at m size equals value and then we
should<00:17:50.960><c> obviously</c><00:17:51.440><c> increment</c>

00:17:51.990 --> 00:17:52.000 align:start position:0%
should obviously increment
 

00:17:52.000 --> 00:17:54.070 align:start position:0%
should obviously increment
size<00:17:52.400><c> so</c><00:17:52.559><c> we</c><00:17:52.720><c> can</c><00:17:52.880><c> either</c><00:17:53.039><c> do</c><00:17:53.200><c> that</c><00:17:53.440><c> here</c><00:17:53.919><c> or</c>

00:17:54.070 --> 00:17:54.080 align:start position:0%
size so we can either do that here or
 

00:17:54.080 --> 00:17:55.669 align:start position:0%
size so we can either do that here or
maybe<00:17:54.400><c> to</c><00:17:54.559><c> keep</c><00:17:54.720><c> things</c><00:17:55.039><c> a</c><00:17:55.039><c> little</c><00:17:55.280><c> bit</c><00:17:55.440><c> more</c>

00:17:55.669 --> 00:17:55.679 align:start position:0%
maybe to keep things a little bit more
 

00:17:55.679 --> 00:17:56.310 align:start position:0%
maybe to keep things a little bit more
simple

00:17:56.310 --> 00:17:56.320 align:start position:0%
simple
 

00:17:56.320 --> 00:17:59.190 align:start position:0%
simple
we<00:17:56.480><c> can</c><00:17:56.640><c> do</c><00:17:56.799><c> it</c><00:17:57.120><c> down</c><00:17:57.440><c> here</c><00:17:57.840><c> this</c><00:17:58.160><c> is</c><00:17:58.240><c> the</c><00:17:58.480><c> basic</c>

00:17:59.190 --> 00:17:59.200 align:start position:0%
we can do it down here this is the basic
 

00:17:59.200 --> 00:18:01.190 align:start position:0%
we can do it down here this is the basic
way<00:17:59.440><c> that</c><00:17:59.600><c> we</c><00:17:59.840><c> put</c><00:18:00.080><c> things</c><00:18:00.400><c> into</c><00:18:00.640><c> an</c><00:18:00.799><c> array</c><00:18:01.120><c> of</c>

00:18:01.190 --> 00:18:01.200 align:start position:0%
way that we put things into an array of
 

00:18:01.200 --> 00:18:01.830 align:start position:0%
way that we put things into an array of
course

00:18:01.830 --> 00:18:01.840 align:start position:0%
course
 

00:18:01.840 --> 00:18:03.750 align:start position:0%
course
but<00:18:02.000><c> the</c><00:18:02.080><c> problem</c><00:18:02.400><c> is</c><00:18:02.640><c> if</c><00:18:02.799><c> we're</c><00:18:03.039><c> trying</c><00:18:03.360><c> to</c>

00:18:03.750 --> 00:18:03.760 align:start position:0%
but the problem is if we're trying to
 

00:18:03.760 --> 00:18:05.909 align:start position:0%
but the problem is if we're trying to
push<00:18:04.080><c> back</c><00:18:04.480><c> an</c><00:18:04.640><c> element</c><00:18:05.120><c> and</c><00:18:05.200><c> there's</c><00:18:05.440><c> no</c><00:18:05.679><c> room</c>

00:18:05.909 --> 00:18:05.919 align:start position:0%
push back an element and there's no room
 

00:18:05.919 --> 00:18:06.549 align:start position:0%
push back an element and there's no room
for<00:18:06.160><c> it</c>

00:18:06.549 --> 00:18:06.559 align:start position:0%
for it
 

00:18:06.559 --> 00:18:09.110 align:start position:0%
for it
we<00:18:06.799><c> need</c><00:18:06.960><c> to</c><00:18:07.120><c> call</c><00:18:07.360><c> this</c><00:18:07.600><c> really</c><00:18:08.160><c> function</c><00:18:08.960><c> so</c>

00:18:09.110 --> 00:18:09.120 align:start position:0%
we need to call this really function so
 

00:18:09.120 --> 00:18:11.270 align:start position:0%
we need to call this really function so
to<00:18:09.280><c> do</c><00:18:09.440><c> that</c><00:18:09.679><c> we</c><00:18:09.840><c> simply</c><00:18:10.240><c> check</c><00:18:10.480><c> to</c><00:18:10.640><c> see</c>

00:18:11.270 --> 00:18:11.280 align:start position:0%
to do that we simply check to see
 

00:18:11.280 --> 00:18:14.230 align:start position:0%
to do that we simply check to see
if<00:18:11.600><c> size</c><00:18:12.160><c> is</c><00:18:12.480><c> greater</c><00:18:12.799><c> than</c><00:18:13.120><c> or</c><00:18:13.360><c> equal</c><00:18:13.600><c> to</c><00:18:14.080><c> the</c>

00:18:14.230 --> 00:18:14.240 align:start position:0%
if size is greater than or equal to the
 

00:18:14.240 --> 00:18:16.390 align:start position:0%
if size is greater than or equal to the
capacity<00:18:14.960><c> so</c><00:18:15.120><c> in</c><00:18:15.200><c> other</c><00:18:15.360><c> words</c><00:18:15.679><c> if</c><00:18:15.840><c> we're</c><00:18:16.160><c> at</c>

00:18:16.390 --> 00:18:16.400 align:start position:0%
capacity so in other words if we're at
 

00:18:16.400 --> 00:18:17.750 align:start position:0%
capacity so in other words if we're at
capacity<00:18:17.039><c> or</c><00:18:17.200><c> somehow</c>

00:18:17.750 --> 00:18:17.760 align:start position:0%
capacity or somehow
 

00:18:17.760 --> 00:18:20.310 align:start position:0%
capacity or somehow
over<00:18:18.080><c> it</c><00:18:18.480><c> then</c><00:18:18.720><c> we</c><00:18:18.880><c> need</c><00:18:19.039><c> to</c><00:18:19.280><c> reallocate</c><00:18:20.160><c> with</c>

00:18:20.310 --> 00:18:20.320 align:start position:0%
over it then we need to reallocate with
 

00:18:20.320 --> 00:18:21.110 align:start position:0%
over it then we need to reallocate with
some<00:18:20.559><c> kind</c><00:18:20.799><c> of</c>

00:18:21.110 --> 00:18:21.120 align:start position:0%
some kind of
 

00:18:21.120 --> 00:18:23.350 align:start position:0%
some kind of
new<00:18:21.360><c> capacity</c><00:18:22.080><c> so</c><00:18:22.320><c> to</c><00:18:22.480><c> do</c><00:18:22.640><c> that</c><00:18:22.799><c> we'll</c><00:18:23.039><c> simply</c>

00:18:23.350 --> 00:18:23.360 align:start position:0%
new capacity so to do that we'll simply
 

00:18:23.360 --> 00:18:24.549 align:start position:0%
new capacity so to do that we'll simply
call<00:18:23.679><c> realic</c>

00:18:24.549 --> 00:18:24.559 align:start position:0%
call realic
 

00:18:24.559 --> 00:18:26.150 align:start position:0%
call realic
and<00:18:24.799><c> as</c><00:18:25.039><c> mentioned</c><00:18:25.520><c> before</c><00:18:25.840><c> what</c><00:18:26.000><c> we're</c><00:18:26.080><c> going</c>

00:18:26.150 --> 00:18:26.160 align:start position:0%
and as mentioned before what we're going
 

00:18:26.160 --> 00:18:27.190 align:start position:0%
and as mentioned before what we're going
to<00:18:26.240><c> do</c><00:18:26.400><c> is</c><00:18:26.480><c> we're</c><00:18:26.640><c> going</c><00:18:26.720><c> to</c><00:18:26.799><c> take</c><00:18:27.039><c> our</c>

00:18:27.190 --> 00:18:27.200 align:start position:0%
to do is we're going to take our
 

00:18:27.200 --> 00:18:28.070 align:start position:0%
to do is we're going to take our
capacity

00:18:28.070 --> 00:18:28.080 align:start position:0%
capacity
 

00:18:28.080 --> 00:18:30.630 align:start position:0%
capacity
and<00:18:28.240><c> add</c><00:18:28.640><c> half</c><00:18:29.039><c> of</c><00:18:29.200><c> our</c><00:18:29.360><c> capacity</c><00:18:29.919><c> to</c><00:18:30.160><c> it</c><00:18:30.480><c> so</c>

00:18:30.630 --> 00:18:30.640 align:start position:0%
and add half of our capacity to it so
 

00:18:30.640 --> 00:18:32.549 align:start position:0%
and add half of our capacity to it so
we're<00:18:30.799><c> basically</c><00:18:31.200><c> growing</c><00:18:31.440><c> this</c><00:18:31.679><c> by</c><00:18:31.840><c> 1.5</c>

00:18:32.549 --> 00:18:32.559 align:start position:0%
we're basically growing this by 1.5
 

00:18:32.559 --> 00:18:33.029 align:start position:0%
we're basically growing this by 1.5
times

00:18:33.029 --> 00:18:33.039 align:start position:0%
times
 

00:18:33.039 --> 00:18:34.710 align:start position:0%
times
every<00:18:33.440><c> time</c><00:18:33.840><c> we</c><00:18:34.000><c> need</c><00:18:34.160><c> to</c><00:18:34.320><c> grow</c><00:18:34.480><c> which</c><00:18:34.640><c> is</c>

00:18:34.710 --> 00:18:34.720 align:start position:0%
every time we need to grow which is
 

00:18:34.720 --> 00:18:36.710 align:start position:0%
every time we need to grow which is
effectively<00:18:35.200><c> growing</c><00:18:35.520><c> by</c><00:18:35.840><c> 50</c>

00:18:36.710 --> 00:18:36.720 align:start position:0%
effectively growing by 50
 

00:18:36.720 --> 00:18:39.190 align:start position:0%
effectively growing by 50
and<00:18:36.880><c> that</c><00:18:37.200><c> is</c><00:18:37.440><c> it</c><00:18:38.000><c> we're</c><00:18:38.240><c> now</c><00:18:38.559><c> copying</c><00:18:38.960><c> this</c>

00:18:39.190 --> 00:18:39.200 align:start position:0%
and that is it we're now copying this
 

00:18:39.200 --> 00:18:39.909 align:start position:0%
and that is it we're now copying this
element

00:18:39.909 --> 00:18:39.919 align:start position:0%
element
 

00:18:39.919 --> 00:18:41.590 align:start position:0%
element
over<00:18:40.160><c> here</c><00:18:40.480><c> which</c><00:18:40.720><c> is</c><00:18:40.880><c> pretty</c><00:18:41.120><c> cool</c><00:18:41.440><c> now</c>

00:18:41.590 --> 00:18:41.600 align:start position:0%
over here which is pretty cool now
 

00:18:41.600 --> 00:18:43.350 align:start position:0%
over here which is pretty cool now
finally<00:18:42.080><c> it's</c><00:18:42.240><c> probably</c><00:18:42.640><c> good</c><00:18:42.799><c> to</c><00:18:43.039><c> actually</c>

00:18:43.350 --> 00:18:43.360 align:start position:0%
finally it's probably good to actually
 

00:18:43.360 --> 00:18:45.270 align:start position:0%
finally it's probably good to actually
see<00:18:43.600><c> what</c><00:18:43.840><c> our</c><00:18:44.000><c> size</c><00:18:44.400><c> is</c><00:18:44.720><c> that</c><00:18:44.880><c> might</c><00:18:45.039><c> be</c>

00:18:45.270 --> 00:18:45.280 align:start position:0%
see what our size is that might be
 

00:18:45.280 --> 00:18:47.029 align:start position:0%
see what our size is that might be
important<00:18:45.679><c> so</c><00:18:45.840><c> let's</c><00:18:46.160><c> make</c><00:18:46.400><c> a</c>

00:18:47.029 --> 00:18:47.039 align:start position:0%
important so let's make a
 

00:18:47.039 --> 00:18:49.430 align:start position:0%
important so let's make a
size<00:18:47.360><c> function</c><00:18:47.760><c> here</c><00:18:48.000><c> which</c><00:18:48.160><c> just</c><00:18:48.400><c> returns</c><00:18:48.960><c> m</c>

00:18:49.430 --> 00:18:49.440 align:start position:0%
size function here which just returns m
 

00:18:49.440 --> 00:18:51.590 align:start position:0%
size function here which just returns m
size<00:18:50.000><c> and</c><00:18:50.240><c> finally</c><00:18:50.640><c> for</c><00:18:50.880><c> mach</c><00:18:51.200><c> 1</c>

00:18:51.590 --> 00:18:51.600 align:start position:0%
size and finally for mach 1
 

00:18:51.600 --> 00:18:54.070 align:start position:0%
size and finally for mach 1
of<00:18:51.679><c> this</c><00:18:51.919><c> vector</c><00:18:52.320><c> class</c><00:18:52.960><c> we're</c><00:18:53.200><c> going</c><00:18:53.440><c> to</c><00:18:53.760><c> add</c>

00:18:54.070 --> 00:18:54.080 align:start position:0%
of this vector class we're going to add
 

00:18:54.080 --> 00:18:55.110 align:start position:0%
of this vector class we're going to add
an<00:18:54.400><c> operator</c>

00:18:55.110 --> 00:18:55.120 align:start position:0%
an operator
 

00:18:55.120 --> 00:18:56.950 align:start position:0%
an operator
our<00:18:55.440><c> index</c><00:18:55.840><c> operator</c><00:18:56.240><c> here</c><00:18:56.400><c> so</c><00:18:56.559><c> that</c><00:18:56.720><c> we</c><00:18:56.799><c> can</c>

00:18:56.950 --> 00:18:56.960 align:start position:0%
our index operator here so that we can
 

00:18:56.960 --> 00:18:58.310 align:start position:0%
our index operator here so that we can
actually<00:18:57.679><c> access</c>

00:18:58.310 --> 00:18:58.320 align:start position:0%
actually access
 

00:18:58.320 --> 00:19:00.150 align:start position:0%
actually access
our<00:18:58.559><c> data</c><00:18:58.960><c> so</c><00:18:59.120><c> we'll</c><00:18:59.280><c> write</c><00:18:59.440><c> a</c><00:18:59.520><c> const</c><00:18:59.919><c> version</c>

00:19:00.150 --> 00:19:00.160 align:start position:0%
our data so we'll write a const version
 

00:19:00.160 --> 00:19:02.630 align:start position:0%
our data so we'll write a const version
of<00:19:00.320><c> this</c><00:19:00.799><c> and</c><00:19:00.960><c> a</c><00:19:01.120><c> non-const</c><00:19:01.760><c> version</c><00:19:02.080><c> of</c><00:19:02.240><c> this</c>

00:19:02.630 --> 00:19:02.640 align:start position:0%
of this and a non-const version of this
 

00:19:02.640 --> 00:19:05.430 align:start position:0%
of this and a non-const version of this
which<00:19:02.880><c> will</c><00:19:03.039><c> simply</c><00:19:03.440><c> return</c><00:19:03.919><c> mdata</c><00:19:04.559><c> at</c><00:19:04.880><c> index</c>

00:19:05.430 --> 00:19:05.440 align:start position:0%
which will simply return mdata at index
 

00:19:05.440 --> 00:19:06.070 align:start position:0%
which will simply return mdata at index
and<00:19:05.600><c> of</c><00:19:05.679><c> course</c>

00:19:06.070 --> 00:19:06.080 align:start position:0%
and of course
 

00:19:06.080 --> 00:19:08.230 align:start position:0%
and of course
i<00:19:06.160><c> will</c><00:19:06.480><c> also</c><00:19:06.880><c> write</c><00:19:07.200><c> a</c><00:19:07.360><c> non-const</c><00:19:07.919><c> version</c><00:19:08.160><c> of</c>

00:19:08.230 --> 00:19:08.240 align:start position:0%
i will also write a non-const version of
 

00:19:08.240 --> 00:19:09.830 align:start position:0%
i will also write a non-const version of
this<00:19:08.480><c> in</c><00:19:08.559><c> case</c><00:19:08.799><c> we</c><00:19:08.960><c> actually</c><00:19:09.200><c> want</c><00:19:09.440><c> to</c><00:19:09.520><c> use</c><00:19:09.679><c> it</c>

00:19:09.830 --> 00:19:09.840 align:start position:0%
this in case we actually want to use it
 

00:19:09.840 --> 00:19:11.029 align:start position:0%
this in case we actually want to use it
to<00:19:10.000><c> modify</c>

00:19:11.029 --> 00:19:11.039 align:start position:0%
to modify
 

00:19:11.039 --> 00:19:13.590 align:start position:0%
to modify
the<00:19:11.440><c> value</c><00:19:11.919><c> inside</c><00:19:12.240><c> the</c><00:19:12.400><c> array</c><00:19:12.960><c> okay</c><00:19:13.280><c> so</c>

00:19:13.590 --> 00:19:13.600 align:start position:0%
the value inside the array okay so
 

00:19:13.600 --> 00:19:15.350 align:start position:0%
the value inside the array okay so
clearly<00:19:14.000><c> there's</c><00:19:14.160><c> a</c><00:19:14.320><c> flaw</c><00:19:14.559><c> here</c><00:19:14.880><c> which</c><00:19:15.120><c> is</c>

00:19:15.350 --> 00:19:15.360 align:start position:0%
clearly there's a flaw here which is
 

00:19:15.360 --> 00:19:16.549 align:start position:0%
clearly there's a flaw here which is
what<00:19:15.520><c> do</c><00:19:15.679><c> we</c><00:19:15.840><c> do</c>

00:19:16.549 --> 00:19:16.559 align:start position:0%
what do we do
 

00:19:16.559 --> 00:19:18.230 align:start position:0%
what do we do
if<00:19:16.799><c> we're</c><00:19:16.960><c> trying</c><00:19:17.280><c> to</c><00:19:17.440><c> access</c><00:19:17.760><c> an</c><00:19:17.919><c> index</c>

00:19:18.230 --> 00:19:18.240 align:start position:0%
if we're trying to access an index
 

00:19:18.240 --> 00:19:19.669 align:start position:0%
if we're trying to access an index
outside<00:19:18.480><c> of</c><00:19:18.559><c> the</c><00:19:18.640><c> bounds</c><00:19:18.880><c> of</c><00:19:18.960><c> the</c><00:19:19.039><c> array</c>

00:19:19.669 --> 00:19:19.679 align:start position:0%
outside of the bounds of the array
 

00:19:19.679 --> 00:19:21.270 align:start position:0%
outside of the bounds of the array
typically<00:19:20.160><c> the</c><00:19:20.240><c> way</c><00:19:20.400><c> that</c><00:19:20.480><c> the</c><00:19:20.640><c> vector</c><00:19:20.960><c> class</c>

00:19:21.270 --> 00:19:21.280 align:start position:0%
typically the way that the vector class
 

00:19:21.280 --> 00:19:22.870 align:start position:0%
typically the way that the vector class
in<00:19:21.360><c> the</c><00:19:21.440><c> stl</c><00:19:21.840><c> would</c><00:19:22.000><c> handle</c><00:19:22.240><c> this</c><00:19:22.480><c> is</c><00:19:22.640><c> it</c><00:19:22.720><c> would</c>

00:19:22.870 --> 00:19:22.880 align:start position:0%
in the stl would handle this is it would
 

00:19:22.880 --> 00:19:24.230 align:start position:0%
in the stl would handle this is it would
have<00:19:23.039><c> an</c><00:19:23.200><c> assert</c><00:19:23.600><c> here</c>

00:19:24.230 --> 00:19:24.240 align:start position:0%
have an assert here
 

00:19:24.240 --> 00:19:26.870 align:start position:0%
have an assert here
if<00:19:24.480><c> this</c><00:19:24.720><c> index</c><00:19:25.039><c> was</c><00:19:25.280><c> greater</c><00:19:26.080><c> than</c><00:19:26.320><c> our</c><00:19:26.480><c> size</c>

00:19:26.870 --> 00:19:26.880 align:start position:0%
if this index was greater than our size
 

00:19:26.880 --> 00:19:28.870 align:start position:0%
if this index was greater than our size
but<00:19:27.039><c> only</c><00:19:27.360><c> in</c><00:19:27.520><c> debug</c><00:19:27.919><c> mode</c><00:19:28.240><c> or</c><00:19:28.400><c> if</c><00:19:28.480><c> you've</c><00:19:28.640><c> got</c>

00:19:28.870 --> 00:19:28.880 align:start position:0%
but only in debug mode or if you've got
 

00:19:28.880 --> 00:19:29.350 align:start position:0%
but only in debug mode or if you've got
like

00:19:29.350 --> 00:19:29.360 align:start position:0%
like
 

00:19:29.360 --> 00:19:31.590 align:start position:0%
like
stl<00:19:29.840><c> debugging</c><00:19:30.320><c> enabled</c><00:19:30.720><c> essentially</c><00:19:31.280><c> so</c><00:19:31.440><c> you</c>

00:19:31.590 --> 00:19:31.600 align:start position:0%
stl debugging enabled essentially so you
 

00:19:31.600 --> 00:19:33.029 align:start position:0%
stl debugging enabled essentially so you
could<00:19:31.760><c> do</c><00:19:31.919><c> that</c><00:19:32.160><c> you</c><00:19:32.240><c> could</c><00:19:32.400><c> just</c><00:19:32.559><c> say</c><00:19:32.799><c> if</c>

00:19:33.029 --> 00:19:33.039 align:start position:0%
could do that you could just say if
 

00:19:33.039 --> 00:19:33.830 align:start position:0%
could do that you could just say if
index

00:19:33.830 --> 00:19:33.840 align:start position:0%
index
 

00:19:33.840 --> 00:19:36.310 align:start position:0%
index
is<00:19:34.000><c> greater</c><00:19:34.240><c> than</c><00:19:34.480><c> or</c><00:19:34.720><c> equal</c><00:19:34.960><c> to</c><00:19:35.120><c> m</c><00:19:35.360><c> size</c><00:19:36.080><c> then</c>

00:19:36.310 --> 00:19:36.320 align:start position:0%
is greater than or equal to m size then
 

00:19:36.320 --> 00:19:38.549 align:start position:0%
is greater than or equal to m size then
maybe<00:19:36.799><c> you</c><00:19:36.960><c> want</c><00:19:37.200><c> to</c><00:19:37.360><c> like</c><00:19:37.679><c> assert</c><00:19:38.160><c> here</c><00:19:38.400><c> or</c>

00:19:38.549 --> 00:19:38.559 align:start position:0%
maybe you want to like assert here or
 

00:19:38.559 --> 00:19:39.830 align:start position:0%
maybe you want to like assert here or
something<00:19:38.799><c> like</c><00:19:38.960><c> that</c><00:19:39.200><c> we're</c><00:19:39.360><c> not</c><00:19:39.520><c> going</c><00:19:39.679><c> to</c>

00:19:39.830 --> 00:19:39.840 align:start position:0%
something like that we're not going to
 

00:19:39.840 --> 00:19:41.190 align:start position:0%
something like that we're not going to
bother<00:19:40.080><c> doing</c><00:19:40.320><c> that</c><00:19:40.480><c> here</c><00:19:40.640><c> today</c>

00:19:41.190 --> 00:19:41.200 align:start position:0%
bother doing that here today
 

00:19:41.200 --> 00:19:42.470 align:start position:0%
bother doing that here today
but<00:19:41.360><c> that</c><00:19:41.600><c> is</c><00:19:41.679><c> definitely</c><00:19:42.080><c> something</c><00:19:42.400><c> that</c>

00:19:42.470 --> 00:19:42.480 align:start position:0%
but that is definitely something that
 

00:19:42.480 --> 00:19:43.909 align:start position:0%
but that is definitely something that
you<00:19:42.640><c> would</c><00:19:42.720><c> probably</c><00:19:42.960><c> want</c><00:19:43.200><c> to</c><00:19:43.280><c> do</c><00:19:43.520><c> because</c><00:19:43.760><c> if</c>

00:19:43.909 --> 00:19:43.919 align:start position:0%
you would probably want to do because if
 

00:19:43.919 --> 00:19:45.830 align:start position:0%
you would probably want to do because if
you<00:19:44.000><c> just</c><00:19:44.160><c> simply</c><00:19:44.480><c> do</c><00:19:44.640><c> an</c><00:19:44.720><c> assert</c><00:19:45.120><c> here</c><00:19:45.520><c> then</c>

00:19:45.830 --> 00:19:45.840 align:start position:0%
you just simply do an assert here then
 

00:19:45.840 --> 00:19:47.190 align:start position:0%
you just simply do an assert here then
it<00:19:45.919><c> will</c><00:19:46.080><c> be</c><00:19:46.160><c> stripped</c><00:19:46.480><c> from</c><00:19:46.640><c> release</c><00:19:46.960><c> builds</c>

00:19:47.190 --> 00:19:47.200 align:start position:0%
it will be stripped from release builds
 

00:19:47.200 --> 00:19:48.710 align:start position:0%
it will be stripped from release builds
anyway<00:19:47.600><c> and</c><00:19:47.760><c> you</c><00:19:47.919><c> won't</c><00:19:48.160><c> suffer</c><00:19:48.559><c> any</c>

00:19:48.710 --> 00:19:48.720 align:start position:0%
anyway and you won't suffer any
 

00:19:48.720 --> 00:19:49.909 align:start position:0%
anyway and you won't suffer any
performance<00:19:49.200><c> penalties</c>

00:19:49.909 --> 00:19:49.919 align:start position:0%
performance penalties
 

00:19:49.919 --> 00:19:51.669 align:start position:0%
performance penalties
but<00:19:50.160><c> in</c><00:19:50.240><c> debug</c><00:19:50.640><c> builds</c><00:19:51.039><c> you'll</c><00:19:51.280><c> have</c><00:19:51.440><c> that</c>

00:19:51.669 --> 00:19:51.679 align:start position:0%
but in debug builds you'll have that
 

00:19:51.679 --> 00:19:53.510 align:start position:0%
but in debug builds you'll have that
extra<00:19:52.160><c> debug</c><00:19:52.559><c> ability</c><00:19:52.960><c> and</c><00:19:53.039><c> that</c><00:19:53.280><c> extra</c>

00:19:53.510 --> 00:19:53.520 align:start position:0%
extra debug ability and that extra
 

00:19:53.520 --> 00:19:54.870 align:start position:0%
extra debug ability and that extra
information<00:19:54.000><c> of</c><00:19:54.080><c> just</c><00:19:54.240><c> knowing</c><00:19:54.559><c> if</c><00:19:54.640><c> you're</c>

00:19:54.870 --> 00:19:54.880 align:start position:0%
information of just knowing if you're
 

00:19:54.880 --> 00:19:56.470 align:start position:0%
information of just knowing if you're
accidentally<00:19:55.440><c> going</c><00:19:55.679><c> outside</c><00:19:56.000><c> of</c><00:19:56.080><c> the</c><00:19:56.160><c> bounds</c>

00:19:56.470 --> 00:19:56.480 align:start position:0%
accidentally going outside of the bounds
 

00:19:56.480 --> 00:19:57.430 align:start position:0%
accidentally going outside of the bounds
of<00:19:56.559><c> your</c><00:19:56.799><c> array</c>

00:19:57.430 --> 00:19:57.440 align:start position:0%
of your array
 

00:19:57.440 --> 00:19:59.270 align:start position:0%
of your array
anyway<00:19:57.840><c> here</c><00:19:58.080><c> is</c><00:19:58.160><c> our</c><00:19:58.400><c> extremely</c><00:19:58.960><c> simple</c>

00:19:59.270 --> 00:19:59.280 align:start position:0%
anyway here is our extremely simple
 

00:19:59.280 --> 00:20:00.870 align:start position:0%
anyway here is our extremely simple
vector<00:19:59.600><c> class</c><00:19:59.919><c> don't</c><00:20:00.160><c> worry</c><00:20:00.400><c> we're</c><00:20:00.559><c> going</c><00:20:00.720><c> to</c>

00:20:00.870 --> 00:20:00.880 align:start position:0%
vector class don't worry we're going to
 

00:20:00.880 --> 00:20:02.390 align:start position:0%
vector class don't worry we're going to
improve<00:20:01.120><c> it</c><00:20:01.280><c> in</c><00:20:01.360><c> a</c><00:20:01.440><c> minute</c><00:20:01.760><c> but</c><00:20:01.919><c> i</c><00:20:02.000><c> do</c><00:20:02.159><c> want</c><00:20:02.320><c> to</c>

00:20:02.390 --> 00:20:02.400 align:start position:0%
improve it in a minute but i do want to
 

00:20:02.400 --> 00:20:03.430 align:start position:0%
improve it in a minute but i do want to
test<00:20:02.720><c> it</c><00:20:02.799><c> out</c><00:20:02.960><c> here</c>

00:20:03.430 --> 00:20:03.440 align:start position:0%
test it out here
 

00:20:03.440 --> 00:20:04.710 align:start position:0%
test it out here
so<00:20:03.600><c> what</c><00:20:03.760><c> i'll</c><00:20:03.919><c> do</c><00:20:04.000><c> is</c><00:20:04.159><c> i'll</c><00:20:04.320><c> add</c><00:20:04.480><c> three</c>

00:20:04.710 --> 00:20:04.720 align:start position:0%
so what i'll do is i'll add three
 

00:20:04.720 --> 00:20:05.990 align:start position:0%
so what i'll do is i'll add three
elements<00:20:05.120><c> here</c><00:20:05.280><c> because</c><00:20:05.520><c> remember</c><00:20:05.760><c> that</c>

00:20:05.990 --> 00:20:06.000 align:start position:0%
elements here because remember that
 

00:20:06.000 --> 00:20:07.830 align:start position:0%
elements here because remember that
should<00:20:06.320><c> trigger</c><00:20:06.640><c> a</c><00:20:06.799><c> reallocation</c>

00:20:07.830 --> 00:20:07.840 align:start position:0%
should trigger a reallocation
 

00:20:07.840 --> 00:20:09.990 align:start position:0%
should trigger a reallocation
i<00:20:08.000><c> want</c><00:20:08.159><c> to</c><00:20:08.320><c> quickly</c><00:20:08.799><c> write</c><00:20:09.120><c> a</c><00:20:09.360><c> function</c><00:20:09.760><c> here</c>

00:20:09.990 --> 00:20:10.000 align:start position:0%
i want to quickly write a function here
 

00:20:10.000 --> 00:20:12.149 align:start position:0%
i want to quickly write a function here
though<00:20:10.320><c> that's</c><00:20:10.559><c> going</c><00:20:10.799><c> to</c><00:20:10.960><c> actually</c><00:20:11.360><c> print</c>

00:20:12.149 --> 00:20:12.159 align:start position:0%
though that's going to actually print
 

00:20:12.159 --> 00:20:13.750 align:start position:0%
though that's going to actually print
our<00:20:12.400><c> vector</c><00:20:12.799><c> now</c><00:20:12.960><c> because</c><00:20:13.200><c> we</c><00:20:13.360><c> don't</c><00:20:13.520><c> know</c>

00:20:13.750 --> 00:20:13.760 align:start position:0%
our vector now because we don't know
 

00:20:13.760 --> 00:20:15.350 align:start position:0%
our vector now because we don't know
what<00:20:14.000><c> type</c><00:20:14.320><c> it</c><00:20:14.480><c> is</c><00:20:14.559><c> we'll</c><00:20:14.720><c> have</c><00:20:14.880><c> to</c><00:20:14.960><c> make</c><00:20:15.120><c> this</c>

00:20:15.350 --> 00:20:15.360 align:start position:0%
what type it is we'll have to make this
 

00:20:15.360 --> 00:20:16.630 align:start position:0%
what type it is we'll have to make this
a<00:20:15.440><c> template</c><00:20:15.919><c> function</c>

00:20:16.630 --> 00:20:16.640 align:start position:0%
a template function
 

00:20:16.640 --> 00:20:18.310 align:start position:0%
a template function
because<00:20:16.880><c> of</c><00:20:17.039><c> course</c><00:20:17.280><c> this</c><00:20:17.440><c> could</c><00:20:17.600><c> be</c><00:20:17.760><c> a</c><00:20:17.840><c> vector</c>

00:20:18.310 --> 00:20:18.320 align:start position:0%
because of course this could be a vector
 

00:20:18.320 --> 00:20:20.390 align:start position:0%
because of course this could be a vector
of<00:20:18.559><c> any</c><00:20:18.880><c> type</c><00:20:19.200><c> so</c><00:20:19.360><c> let's</c><00:20:19.679><c> go</c><00:20:19.919><c> ahead</c>

00:20:20.390 --> 00:20:20.400 align:start position:0%
of any type so let's go ahead
 

00:20:20.400 --> 00:20:22.789 align:start position:0%
of any type so let's go ahead
and<00:20:20.720><c> take</c><00:20:20.960><c> in</c><00:20:21.120><c> a</c><00:20:21.600><c> const</c><00:20:21.919><c> vector</c><00:20:22.240><c> of</c><00:20:22.400><c> t</c><00:20:22.640><c> we'll</c>

00:20:22.789 --> 00:20:22.799 align:start position:0%
and take in a const vector of t we'll
 

00:20:22.799 --> 00:20:23.990 align:start position:0%
and take in a const vector of t we'll
call<00:20:22.960><c> this</c><00:20:23.200><c> vector</c>

00:20:23.990 --> 00:20:24.000 align:start position:0%
call this vector
 

00:20:24.000 --> 00:20:25.750 align:start position:0%
call this vector
then<00:20:24.159><c> we'll</c><00:20:24.400><c> write</c><00:20:24.640><c> a</c><00:20:24.799><c> for</c><00:20:24.960><c> loop</c><00:20:25.200><c> which</c><00:20:25.440><c> goes</c>

00:20:25.750 --> 00:20:25.760 align:start position:0%
then we'll write a for loop which goes
 

00:20:25.760 --> 00:20:27.750 align:start position:0%
then we'll write a for loop which goes
through<00:20:26.320><c> all</c><00:20:26.480><c> of</c><00:20:26.559><c> the</c><00:20:26.720><c> elements</c><00:20:27.120><c> here</c><00:20:27.280><c> so</c><00:20:27.520><c> size</c>

00:20:27.750 --> 00:20:27.760 align:start position:0%
through all of the elements here so size
 

00:20:27.760 --> 00:20:27.990 align:start position:0%
through all of the elements here so size
t

00:20:27.990 --> 00:20:28.000 align:start position:0%
t
 

00:20:28.000 --> 00:20:31.270 align:start position:0%
t
i<00:20:28.159><c> equals</c><00:20:28.400><c> zero</c><00:20:29.120><c> i</c><00:20:29.440><c> is</c><00:20:29.600><c> less</c><00:20:29.840><c> than</c><00:20:30.080><c> vector</c><00:20:30.960><c> dot</c>

00:20:31.270 --> 00:20:31.280 align:start position:0%
i equals zero i is less than vector dot
 

00:20:31.280 --> 00:20:32.789 align:start position:0%
i equals zero i is less than vector dot
size<00:20:31.760><c> i</c><00:20:32.000><c> plus</c><00:20:32.320><c> plus</c>

00:20:32.789 --> 00:20:32.799 align:start position:0%
size i plus plus
 

00:20:32.799 --> 00:20:36.310 align:start position:0%
size i plus plus
and<00:20:32.880><c> then</c><00:20:33.120><c> we'll</c><00:20:33.280><c> just</c><00:20:33.440><c> print</c><00:20:33.919><c> vector</c><00:20:34.799><c> i</c><00:20:35.600><c> see</c>

00:20:36.310 --> 00:20:36.320 align:start position:0%
and then we'll just print vector i see
 

00:20:36.320 --> 00:20:37.110 align:start position:0%
and then we'll just print vector i see
out

00:20:37.110 --> 00:20:37.120 align:start position:0%
out
 

00:20:37.120 --> 00:20:39.350 align:start position:0%
out
vector<00:20:37.600><c> i</c><00:20:38.080><c> i'll</c><00:20:38.320><c> also</c><00:20:38.559><c> just</c><00:20:38.799><c> add</c><00:20:38.960><c> in</c><00:20:39.120><c> a</c><00:20:39.200><c> little</c>

00:20:39.350 --> 00:20:39.360 align:start position:0%
vector i i'll also just add in a little
 

00:20:39.360 --> 00:20:41.110 align:start position:0%
vector i i'll also just add in a little
divider<00:20:39.840><c> here</c><00:20:40.000><c> in</c><00:20:40.080><c> case</c><00:20:40.320><c> we</c><00:20:40.400><c> want</c><00:20:40.559><c> to</c><00:20:40.720><c> print</c>

00:20:41.110 --> 00:20:41.120 align:start position:0%
divider here in case we want to print
 

00:20:41.120 --> 00:20:43.110 align:start position:0%
divider here in case we want to print
many<00:20:41.360><c> of</c><00:20:41.440><c> these</c><00:20:41.679><c> at</c><00:20:41.760><c> once</c><00:20:42.159><c> okay</c><00:20:42.480><c> cool</c><00:20:42.720><c> so</c><00:20:42.880><c> now</c>

00:20:43.110 --> 00:20:43.120 align:start position:0%
many of these at once okay cool so now
 

00:20:43.120 --> 00:20:44.710 align:start position:0%
many of these at once okay cool so now
if<00:20:43.280><c> i</c><00:20:43.440><c> call</c><00:20:43.679><c> print</c><00:20:44.080><c> vector</c>

00:20:44.710 --> 00:20:44.720 align:start position:0%
if i call print vector
 

00:20:44.720 --> 00:20:47.029 align:start position:0%
if i call print vector
with<00:20:44.960><c> this</c><00:20:45.280><c> vector</c><00:20:45.840><c> let's</c><00:20:46.080><c> see</c><00:20:46.320><c> what</c><00:20:46.480><c> we</c><00:20:46.640><c> get</c>

00:20:47.029 --> 00:20:47.039 align:start position:0%
with this vector let's see what we get
 

00:20:47.039 --> 00:20:48.310 align:start position:0%
with this vector let's see what we get
all<00:20:47.120><c> right</c><00:20:47.360><c> check</c><00:20:47.520><c> this</c><00:20:47.760><c> out</c><00:20:47.919><c> so</c><00:20:48.080><c> we</c><00:20:48.159><c> get</c>

00:20:48.310 --> 00:20:48.320 align:start position:0%
all right check this out so we get
 

00:20:48.320 --> 00:20:50.070 align:start position:0%
all right check this out so we get
churno<00:20:48.640><c> c</c><00:20:48.799><c> plus</c><00:20:49.039><c> plus</c><00:20:49.280><c> and</c><00:20:49.440><c> vector</c><00:20:49.840><c> and</c><00:20:50.000><c> of</c>

00:20:50.070 --> 00:20:50.080 align:start position:0%
churno c plus plus and vector and of
 

00:20:50.080 --> 00:20:50.870 align:start position:0%
churno c plus plus and vector and of
course<00:20:50.320><c> we</c>

00:20:50.870 --> 00:20:50.880 align:start position:0%
course we
 

00:20:50.880 --> 00:20:52.390 align:start position:0%
course we
we<00:20:51.039><c> never</c><00:20:51.280><c> specified</c><00:20:51.679><c> a</c><00:20:51.760><c> size</c><00:20:52.080><c> or</c><00:20:52.159><c> anything</c>

00:20:52.390 --> 00:20:52.400 align:start position:0%
we never specified a size or anything
 

00:20:52.400 --> 00:20:53.909 align:start position:0%
we never specified a size or anything
like<00:20:52.559><c> that</c><00:20:53.120><c> our</c><00:20:53.360><c> vector</c>

00:20:53.909 --> 00:20:53.919 align:start position:0%
like that our vector
 

00:20:53.919 --> 00:20:55.510 align:start position:0%
like that our vector
seems<00:20:54.240><c> to</c><00:20:54.480><c> work</c><00:20:54.799><c> let's</c><00:20:54.960><c> go</c><00:20:55.039><c> ahead</c><00:20:55.280><c> and</c><00:20:55.360><c> just</c>

00:20:55.510 --> 00:20:55.520 align:start position:0%
seems to work let's go ahead and just
 

00:20:55.520 --> 00:20:57.270 align:start position:0%
seems to work let's go ahead and just
add<00:20:55.840><c> vector</c><00:20:56.159><c> a</c><00:20:56.240><c> few</c><00:20:56.400><c> more</c><00:20:56.640><c> times</c>

00:20:57.270 --> 00:20:57.280 align:start position:0%
add vector a few more times
 

00:20:57.280 --> 00:20:59.830 align:start position:0%
add vector a few more times
as<00:20:57.520><c> a</c><00:20:57.600><c> basic</c><00:20:58.080><c> test</c><00:20:58.400><c> and</c><00:20:58.559><c> of</c><00:20:58.720><c> course</c><00:20:59.120><c> here</c><00:20:59.360><c> it</c><00:20:59.520><c> is</c>

00:20:59.830 --> 00:20:59.840 align:start position:0%
as a basic test and of course here it is
 

00:20:59.840 --> 00:21:00.549 align:start position:0%
as a basic test and of course here it is
it<00:21:00.000><c> works</c>

00:21:00.549 --> 00:21:00.559 align:start position:0%
it works
 

00:21:00.559 --> 00:21:02.470 align:start position:0%
it works
fine<00:21:00.960><c> if</c><00:21:01.120><c> we</c><00:21:01.280><c> put</c><00:21:01.520><c> a</c><00:21:01.600><c> little</c><00:21:01.840><c> break</c><00:21:02.080><c> point</c><00:21:02.320><c> over</c>

00:21:02.470 --> 00:21:02.480 align:start position:0%
fine if we put a little break point over
 

00:21:02.480 --> 00:21:03.909 align:start position:0%
fine if we put a little break point over
here<00:21:02.720><c> just</c><00:21:02.880><c> so</c><00:21:03.039><c> that</c><00:21:03.120><c> we</c><00:21:03.280><c> can</c>

00:21:03.909 --> 00:21:03.919 align:start position:0%
here just so that we can
 

00:21:03.919 --> 00:21:06.230 align:start position:0%
here just so that we can
see<00:21:04.159><c> where</c><00:21:04.400><c> our</c><00:21:04.640><c> vector</c><00:21:05.039><c> is</c><00:21:05.200><c> at</c><00:21:05.760><c> we</c><00:21:05.919><c> can</c><00:21:06.080><c> see</c>

00:21:06.230 --> 00:21:06.240 align:start position:0%
see where our vector is at we can see
 

00:21:06.240 --> 00:21:08.149 align:start position:0%
see where our vector is at we can see
that<00:21:06.400><c> we</c><00:21:06.480><c> have</c><00:21:06.720><c> a</c><00:21:06.799><c> size</c><00:21:07.039><c> of</c><00:21:07.200><c> eight</c><00:21:07.520><c> a</c><00:21:07.600><c> capacity</c>

00:21:08.149 --> 00:21:08.159 align:start position:0%
that we have a size of eight a capacity
 

00:21:08.159 --> 00:21:09.830 align:start position:0%
that we have a size of eight a capacity
of<00:21:08.320><c> nine</c><00:21:08.640><c> of</c><00:21:08.720><c> course</c><00:21:09.039><c> because</c><00:21:09.280><c> it</c><00:21:09.440><c> went</c><00:21:09.600><c> from</c>

00:21:09.830 --> 00:21:09.840 align:start position:0%
of nine of course because it went from
 

00:21:09.840 --> 00:21:10.950 align:start position:0%
of nine of course because it went from
six<00:21:10.080><c> to</c><00:21:10.240><c> nine</c>

00:21:10.950 --> 00:21:10.960 align:start position:0%
six to nine
 

00:21:10.960 --> 00:21:13.909 align:start position:0%
six to nine
and<00:21:11.280><c> everything</c><00:21:11.760><c> seems</c><00:21:12.240><c> pretty</c><00:21:12.559><c> good</c><00:21:12.880><c> to</c><00:21:13.200><c> me</c>

00:21:13.909 --> 00:21:13.919 align:start position:0%
and everything seems pretty good to me
 

00:21:13.919 --> 00:21:14.630 align:start position:0%
and everything seems pretty good to me
okay

00:21:14.630 --> 00:21:14.640 align:start position:0%
okay
 

00:21:14.640 --> 00:21:16.310 align:start position:0%
okay
so<00:21:14.960><c> let's</c><00:21:15.200><c> talk</c><00:21:15.440><c> a</c><00:21:15.520><c> little</c><00:21:15.679><c> bit</c><00:21:15.919><c> about</c><00:21:16.080><c> this</c>

00:21:16.310 --> 00:21:16.320 align:start position:0%
so let's talk a little bit about this
 

00:21:16.320 --> 00:21:18.070 align:start position:0%
so let's talk a little bit about this
whole<00:21:16.559><c> copying</c><00:21:16.960><c> thing</c><00:21:17.200><c> and</c><00:21:17.360><c> also</c><00:21:17.600><c> write</c><00:21:17.760><c> a</c><00:21:17.840><c> new</c>

00:21:18.070 --> 00:21:18.080 align:start position:0%
whole copying thing and also write a new
 

00:21:18.080 --> 00:21:19.830 align:start position:0%
whole copying thing and also write a new
function<00:21:18.480><c> called</c><00:21:18.799><c> in</c><00:21:18.960><c> placeback</c>

00:21:19.830 --> 00:21:19.840 align:start position:0%
function called in placeback
 

00:21:19.840 --> 00:21:21.590 align:start position:0%
function called in placeback
which<00:21:20.080><c> is</c><00:21:20.159><c> a</c><00:21:20.240><c> very</c><00:21:20.559><c> very</c><00:21:20.799><c> useful</c><00:21:21.120><c> function</c><00:21:21.440><c> to</c>

00:21:21.590 --> 00:21:21.600 align:start position:0%
which is a very very useful function to
 

00:21:21.600 --> 00:21:23.909 align:start position:0%
which is a very very useful function to
have<00:21:22.240><c> inside</c><00:21:22.640><c> our</c><00:21:22.880><c> vector</c><00:21:23.200><c> class</c><00:21:23.600><c> what</c><00:21:23.840><c> i'll</c>

00:21:23.909 --> 00:21:23.919 align:start position:0%
have inside our vector class what i'll
 

00:21:23.919 --> 00:21:25.990 align:start position:0%
have inside our vector class what i'll
do<00:21:24.159><c> to</c><00:21:24.320><c> demonstrate</c><00:21:24.960><c> this</c><00:21:25.200><c> is</c><00:21:25.360><c> i'll</c><00:21:25.600><c> simply</c>

00:21:25.990 --> 00:21:26.000 align:start position:0%
do to demonstrate this is i'll simply
 

00:21:26.000 --> 00:21:28.310 align:start position:0%
do to demonstrate this is i'll simply
write<00:21:26.240><c> a</c><00:21:26.480><c> struct</c><00:21:26.960><c> here</c><00:21:27.120><c> called</c><00:21:27.440><c> vector3</c>

00:21:28.310 --> 00:21:28.320 align:start position:0%
write a struct here called vector3
 

00:21:28.320 --> 00:21:29.590 align:start position:0%
write a struct here called vector3
just<00:21:28.480><c> going</c><00:21:28.559><c> to</c><00:21:28.640><c> be</c><00:21:28.720><c> like</c><00:21:28.880><c> a</c><00:21:28.960><c> mathematical</c>

00:21:29.590 --> 00:21:29.600 align:start position:0%
just going to be like a mathematical
 

00:21:29.600 --> 00:21:31.350 align:start position:0%
just going to be like a mathematical
kind<00:21:29.760><c> of</c><00:21:29.840><c> three</c><00:21:30.080><c> component</c><00:21:30.480><c> vector</c><00:21:30.799><c> here</c>

00:21:31.350 --> 00:21:31.360 align:start position:0%
kind of three component vector here
 

00:21:31.360 --> 00:21:33.510 align:start position:0%
kind of three component vector here
xyz<00:21:32.080><c> we're</c><00:21:32.240><c> going</c><00:21:32.400><c> to</c><00:21:32.559><c> write</c><00:21:32.799><c> a</c><00:21:32.880><c> constructor</c>

00:21:33.510 --> 00:21:33.520 align:start position:0%
xyz we're going to write a constructor
 

00:21:33.520 --> 00:21:34.630 align:start position:0%
xyz we're going to write a constructor
here<00:21:33.760><c> that</c><00:21:34.000><c> takes</c><00:21:34.320><c> in</c>

00:21:34.630 --> 00:21:34.640 align:start position:0%
here that takes in
 

00:21:34.640 --> 00:21:36.149 align:start position:0%
here that takes in
well<00:21:34.880><c> let's</c><00:21:35.200><c> write</c><00:21:35.360><c> a</c><00:21:35.440><c> default</c><00:21:35.760><c> constructor</c>

00:21:36.149 --> 00:21:36.159 align:start position:0%
well let's write a default constructor
 

00:21:36.159 --> 00:21:38.310 align:start position:0%
well let's write a default constructor
that<00:21:36.320><c> does</c><00:21:36.559><c> nothing</c><00:21:37.280><c> maybe</c><00:21:37.600><c> i'll</c><00:21:37.760><c> initialize</c>

00:21:38.310 --> 00:21:38.320 align:start position:0%
that does nothing maybe i'll initialize
 

00:21:38.320 --> 00:21:40.470 align:start position:0%
that does nothing maybe i'll initialize
these<00:21:38.640><c> to</c><00:21:38.880><c> zero</c><00:21:39.200><c> just</c><00:21:39.360><c> to</c><00:21:39.520><c> be</c><00:21:39.679><c> nice</c><00:21:40.000><c> here</c><00:21:40.320><c> then</c>

00:21:40.470 --> 00:21:40.480 align:start position:0%
these to zero just to be nice here then
 

00:21:40.480 --> 00:21:41.750 align:start position:0%
these to zero just to be nice here then
i'm<00:21:40.640><c> going</c><00:21:40.799><c> to</c><00:21:40.880><c> write</c><00:21:41.120><c> just</c><00:21:41.280><c> a</c><00:21:41.440><c> scalar</c>

00:21:41.750 --> 00:21:41.760 align:start position:0%
i'm going to write just a scalar
 

00:21:41.760 --> 00:21:42.549 align:start position:0%
i'm going to write just a scalar
constructor

00:21:42.549 --> 00:21:42.559 align:start position:0%
constructor
 

00:21:42.559 --> 00:21:44.710 align:start position:0%
constructor
that<00:21:42.799><c> sets</c><00:21:43.200><c> each</c><00:21:43.440><c> of</c><00:21:43.600><c> these</c><00:21:43.919><c> to</c><00:21:44.159><c> whatever</c><00:21:44.559><c> the</c>

00:21:44.710 --> 00:21:44.720 align:start position:0%
that sets each of these to whatever the
 

00:21:44.720 --> 00:21:46.549 align:start position:0%
that sets each of these to whatever the
scalar<00:21:45.200><c> is</c><00:21:45.360><c> set</c><00:21:45.600><c> to</c><00:21:45.840><c> in</c><00:21:45.919><c> fact</c><00:21:46.080><c> i</c><00:21:46.240><c> might</c><00:21:46.400><c> just</c>

00:21:46.549 --> 00:21:46.559 align:start position:0%
scalar is set to in fact i might just
 

00:21:46.559 --> 00:21:47.669 align:start position:0%
scalar is set to in fact i might just
drop<00:21:46.720><c> this</c><00:21:46.960><c> down</c><00:21:47.120><c> here</c>

00:21:47.669 --> 00:21:47.679 align:start position:0%
drop this down here
 

00:21:47.679 --> 00:21:49.990 align:start position:0%
drop this down here
to<00:21:47.840><c> make</c><00:21:48.080><c> it</c><00:21:48.320><c> a</c><00:21:48.400><c> little</c><00:21:48.720><c> bit</c><00:21:48.960><c> easier</c><00:21:49.360><c> to</c><00:21:49.679><c> read</c>

00:21:49.990 --> 00:21:50.000 align:start position:0%
to make it a little bit easier to read
 

00:21:50.000 --> 00:21:50.950 align:start position:0%
to make it a little bit easier to read
so<00:21:50.159><c> we'll</c><00:21:50.320><c> do</c><00:21:50.559><c> x</c>

00:21:50.950 --> 00:21:50.960 align:start position:0%
so we'll do x
 

00:21:50.960 --> 00:21:53.029 align:start position:0%
so we'll do x
y<00:21:51.200><c> z</c><00:21:51.600><c> is</c><00:21:51.760><c> set</c><00:21:52.000><c> to</c><00:21:52.080><c> the</c><00:21:52.240><c> scalar</c><00:21:52.640><c> and</c><00:21:52.799><c> then</c>

00:21:53.029 --> 00:21:53.039 align:start position:0%
y z is set to the scalar and then
 

00:21:53.039 --> 00:21:55.190 align:start position:0%
y z is set to the scalar and then
finally<00:21:53.520><c> we'll</c><00:21:53.760><c> also</c><00:21:54.080><c> write</c><00:21:54.400><c> a</c><00:21:54.559><c> constructor</c>

00:21:55.190 --> 00:21:55.200 align:start position:0%
finally we'll also write a constructor
 

00:21:55.200 --> 00:21:55.990 align:start position:0%
finally we'll also write a constructor
here<00:21:55.440><c> that</c><00:21:55.600><c> just</c>

00:21:55.990 --> 00:21:56.000 align:start position:0%
here that just
 

00:21:56.000 --> 00:21:59.110 align:start position:0%
here that just
takes<00:21:56.320><c> in</c><00:21:56.640><c> x</c><00:21:56.960><c> y</c><00:21:57.200><c> and</c><00:21:57.360><c> z</c><00:21:57.840><c> and</c><00:21:58.000><c> just</c><00:21:58.400><c> sets</c><00:21:58.640><c> that</c><00:21:58.880><c> up</c>

00:21:59.110 --> 00:21:59.120 align:start position:0%
takes in x y and z and just sets that up
 

00:21:59.120 --> 00:22:01.510 align:start position:0%
takes in x y and z and just sets that up
okay<00:21:59.440><c> cool</c><00:21:59.679><c> so</c><00:21:59.840><c> the</c><00:22:00.000><c> point</c><00:22:00.240><c> of</c><00:22:00.400><c> this</c><00:22:00.799><c> is</c><00:22:01.440><c> of</c>

00:22:01.510 --> 00:22:01.520 align:start position:0%
okay cool so the point of this is of
 

00:22:01.520 --> 00:22:03.909 align:start position:0%
okay cool so the point of this is of
course<00:22:01.840><c> to</c><00:22:02.000><c> write</c><00:22:02.240><c> a</c><00:22:02.320><c> copy</c><00:22:02.640><c> constructor</c><00:22:03.200><c> here</c>

00:22:03.909 --> 00:22:03.919 align:start position:0%
course to write a copy constructor here
 

00:22:03.919 --> 00:22:05.909 align:start position:0%
course to write a copy constructor here
which<00:22:04.400><c> obviously</c><00:22:04.799><c> isn't</c><00:22:05.039><c> necessary</c><00:22:05.600><c> for</c><00:22:05.760><c> this</c>

00:22:05.909 --> 00:22:05.919 align:start position:0%
which obviously isn't necessary for this
 

00:22:05.919 --> 00:22:07.590 align:start position:0%
which obviously isn't necessary for this
class<00:22:06.240><c> but</c><00:22:06.400><c> the</c><00:22:06.480><c> reason</c><00:22:06.720><c> we're</c><00:22:06.880><c> doing</c><00:22:07.120><c> this</c><00:22:07.440><c> is</c>

00:22:07.590 --> 00:22:07.600 align:start position:0%
class but the reason we're doing this is
 

00:22:07.600 --> 00:22:09.029 align:start position:0%
class but the reason we're doing this is
so<00:22:07.760><c> that</c><00:22:07.840><c> we</c><00:22:08.000><c> can</c><00:22:08.240><c> actually</c><00:22:08.640><c> see</c>

00:22:09.029 --> 00:22:09.039 align:start position:0%
so that we can actually see
 

00:22:09.039 --> 00:22:11.190 align:start position:0%
so that we can actually see
when<00:22:09.360><c> our</c><00:22:09.600><c> vectors</c><00:22:10.000><c> are</c><00:22:10.080><c> being</c><00:22:10.559><c> copied</c><00:22:11.039><c> so</c>

00:22:11.190 --> 00:22:11.200 align:start position:0%
when our vectors are being copied so
 

00:22:11.200 --> 00:22:12.549 align:start position:0%
when our vectors are being copied so
we'll<00:22:11.360><c> just</c><00:22:11.520><c> say</c><00:22:11.760><c> copy</c>

00:22:12.549 --> 00:22:12.559 align:start position:0%
we'll just say copy
 

00:22:12.559 --> 00:22:14.070 align:start position:0%
we'll just say copy
and<00:22:12.880><c> we'll</c><00:22:13.120><c> of</c><00:22:13.200><c> course</c><00:22:13.440><c> need</c><00:22:13.600><c> to</c><00:22:13.760><c> actually</c>

00:22:14.070 --> 00:22:14.080 align:start position:0%
and we'll of course need to actually
 

00:22:14.080 --> 00:22:16.230 align:start position:0%
and we'll of course need to actually
copy<00:22:14.400><c> our</c><00:22:14.559><c> data</c><00:22:14.960><c> and</c><00:22:15.120><c> i'll</c><00:22:15.280><c> also</c><00:22:15.600><c> write</c><00:22:15.919><c> a</c>

00:22:16.230 --> 00:22:16.240 align:start position:0%
copy our data and i'll also write a
 

00:22:16.240 --> 00:22:18.310 align:start position:0%
copy our data and i'll also write a
destructor<00:22:16.960><c> here</c><00:22:17.360><c> which</c><00:22:17.600><c> is</c><00:22:17.679><c> going</c><00:22:17.840><c> to</c><00:22:18.000><c> say</c>

00:22:18.310 --> 00:22:18.320 align:start position:0%
destructor here which is going to say
 

00:22:18.320 --> 00:22:19.510 align:start position:0%
destructor here which is going to say
destroy<00:22:19.039><c> and</c><00:22:19.120><c> then</c>

00:22:19.510 --> 00:22:19.520 align:start position:0%
destroy and then
 

00:22:19.520 --> 00:22:21.750 align:start position:0%
destroy and then
finally<00:22:20.080><c> i'll</c><00:22:20.320><c> write</c><00:22:20.559><c> a</c><00:22:20.880><c> move</c><00:22:21.200><c> constructor</c>

00:22:21.750 --> 00:22:21.760 align:start position:0%
finally i'll write a move constructor
 

00:22:21.760 --> 00:22:23.190 align:start position:0%
finally i'll write a move constructor
here<00:22:22.000><c> so</c><00:22:22.159><c> now</c><00:22:22.320><c> of</c><00:22:22.400><c> course</c><00:22:22.640><c> we</c><00:22:22.799><c> should</c><00:22:22.960><c> be</c><00:22:23.039><c> able</c>

00:22:23.190 --> 00:22:23.200 align:start position:0%
here so now of course we should be able
 

00:22:23.200 --> 00:22:24.470 align:start position:0%
here so now of course we should be able
to<00:22:23.360><c> detect</c><00:22:23.840><c> copies</c>

00:22:24.470 --> 00:22:24.480 align:start position:0%
to detect copies
 

00:22:24.480 --> 00:22:26.870 align:start position:0%
to detect copies
moves<00:22:24.880><c> and</c><00:22:25.280><c> destroys</c><00:22:26.080><c> which</c><00:22:26.320><c> is</c><00:22:26.480><c> pretty</c><00:22:26.640><c> cool</c>

00:22:26.870 --> 00:22:26.880 align:start position:0%
moves and destroys which is pretty cool
 

00:22:26.880 --> 00:22:27.990 align:start position:0%
moves and destroys which is pretty cool
last<00:22:27.039><c> thing</c><00:22:27.200><c> we're</c><00:22:27.280><c> kind</c><00:22:27.440><c> of</c><00:22:27.520><c> missing</c><00:22:27.840><c> is</c><00:22:27.919><c> the</c>

00:22:27.990 --> 00:22:28.000 align:start position:0%
last thing we're kind of missing is the
 

00:22:28.000 --> 00:22:29.510 align:start position:0%
last thing we're kind of missing is the
constructor<00:22:28.480><c> but</c><00:22:28.640><c> we</c><00:22:28.799><c> won't</c><00:22:29.120><c> worry</c><00:22:29.360><c> about</c>

00:22:29.510 --> 00:22:29.520 align:start position:0%
constructor but we won't worry about
 

00:22:29.520 --> 00:22:30.070 align:start position:0%
constructor but we won't worry about
that

00:22:30.070 --> 00:22:30.080 align:start position:0%
that
 

00:22:30.080 --> 00:22:32.230 align:start position:0%
that
so<00:22:30.320><c> let's</c><00:22:30.559><c> change</c><00:22:30.799><c> this</c><00:22:31.039><c> over</c><00:22:31.440><c> to</c><00:22:31.679><c> actually</c><00:22:32.000><c> be</c>

00:22:32.230 --> 00:22:32.240 align:start position:0%
so let's change this over to actually be
 

00:22:32.240 --> 00:22:33.830 align:start position:0%
so let's change this over to actually be
our<00:22:32.480><c> vector</c><00:22:32.880><c> so</c><00:22:33.039><c> we</c><00:22:33.120><c> now</c><00:22:33.280><c> have</c><00:22:33.360><c> a</c><00:22:33.440><c> vector</c><00:22:33.760><c> of</c>

00:22:33.830 --> 00:22:33.840 align:start position:0%
our vector so we now have a vector of
 

00:22:33.840 --> 00:22:34.630 align:start position:0%
our vector so we now have a vector of
vector<00:22:34.159><c> threes</c>

00:22:34.630 --> 00:22:34.640 align:start position:0%
vector threes
 

00:22:34.640 --> 00:22:36.310 align:start position:0%
vector threes
i'm<00:22:34.799><c> gonna</c><00:22:35.039><c> go</c><00:22:35.200><c> ahead</c><00:22:35.520><c> and</c><00:22:35.760><c> create</c><00:22:36.080><c> some</c><00:22:36.240><c> of</c>

00:22:36.310 --> 00:22:36.320 align:start position:0%
i'm gonna go ahead and create some of
 

00:22:36.320 --> 00:22:37.990 align:start position:0%
i'm gonna go ahead and create some of
these<00:22:36.559><c> so</c><00:22:36.720><c> maybe</c><00:22:37.200><c> one</c><00:22:37.360><c> of</c><00:22:37.520><c> these</c>

00:22:37.990 --> 00:22:38.000 align:start position:0%
these so maybe one of these
 

00:22:38.000 --> 00:22:40.310 align:start position:0%
these so maybe one of these
will<00:22:38.159><c> be</c><00:22:38.400><c> a</c><00:22:38.559><c> scalar</c><00:22:39.120><c> i'll</c><00:22:39.600><c> i'll</c><00:22:39.760><c> remove</c><00:22:40.159><c> some</c>

00:22:40.310 --> 00:22:40.320 align:start position:0%
will be a scalar i'll i'll remove some
 

00:22:40.320 --> 00:22:42.070 align:start position:0%
will be a scalar i'll i'll remove some
of<00:22:40.400><c> these</c><00:22:40.640><c> just</c><00:22:40.799><c> to</c><00:22:40.880><c> make</c><00:22:41.039><c> this</c><00:22:41.200><c> less</c><00:22:41.440><c> complex</c>

00:22:42.070 --> 00:22:42.080 align:start position:0%
of these just to make this less complex
 

00:22:42.080 --> 00:22:45.750 align:start position:0%
of these just to make this less complex
one<00:22:42.320><c> of</c><00:22:42.400><c> them</c><00:22:42.799><c> will</c><00:22:43.039><c> take</c><00:22:43.360><c> in</c><00:22:43.840><c> xyz</c><00:22:44.880><c> here</c>

00:22:45.750 --> 00:22:45.760 align:start position:0%
one of them will take in xyz here
 

00:22:45.760 --> 00:22:47.750 align:start position:0%
one of them will take in xyz here
and<00:22:45.840><c> then</c><00:22:46.000><c> one</c><00:22:46.159><c> of</c><00:22:46.240><c> them</c><00:22:46.480><c> maybe</c><00:22:46.799><c> will</c><00:22:46.960><c> just</c><00:22:47.200><c> be</c>

00:22:47.750 --> 00:22:47.760 align:start position:0%
and then one of them maybe will just be
 

00:22:47.760 --> 00:22:49.510 align:start position:0%
and then one of them maybe will just be
a<00:22:47.919><c> default</c><00:22:48.320><c> constructor</c><00:22:48.880><c> so</c><00:22:49.039><c> we</c><00:22:49.120><c> have</c><00:22:49.280><c> three</c>

00:22:49.510 --> 00:22:49.520 align:start position:0%
a default constructor so we have three
 

00:22:49.520 --> 00:22:50.870 align:start position:0%
a default constructor so we have three
of<00:22:49.600><c> these</c><00:22:49.760><c> let's</c><00:22:50.000><c> hit</c><00:22:50.159><c> a</c><00:22:50.240><c> five</c><00:22:50.480><c> and</c><00:22:50.559><c> see</c><00:22:50.799><c> what</c>

00:22:50.870 --> 00:22:50.880 align:start position:0%
of these let's hit a five and see what
 

00:22:50.880 --> 00:22:53.029 align:start position:0%
of these let's hit a five and see what
we<00:22:50.960><c> get</c><00:22:51.200><c> now</c><00:22:51.440><c> in</c><00:22:51.520><c> my</c><00:22:51.679><c> haste</c><00:22:52.000><c> here</c><00:22:52.240><c> i</c><00:22:52.400><c> of</c><00:22:52.480><c> course</c>

00:22:53.029 --> 00:22:53.039 align:start position:0%
we get now in my haste here i of course
 

00:22:53.039 --> 00:22:55.909 align:start position:0%
we get now in my haste here i of course
didn't<00:22:53.760><c> actually</c><00:22:54.240><c> provide</c><00:22:54.880><c> any</c><00:22:55.360><c> assignment</c>

00:22:55.909 --> 00:22:55.919 align:start position:0%
didn't actually provide any assignment
 

00:22:55.919 --> 00:22:57.510 align:start position:0%
didn't actually provide any assignment
or<00:22:56.080><c> move</c><00:22:56.400><c> operators</c><00:22:56.799><c> so</c><00:22:56.960><c> let's</c><00:22:57.120><c> quickly</c><00:22:57.360><c> do</c>

00:22:57.510 --> 00:22:57.520 align:start position:0%
or move operators so let's quickly do
 

00:22:57.520 --> 00:22:59.190 align:start position:0%
or move operators so let's quickly do
that<00:22:57.840><c> and</c><00:22:58.000><c> now</c><00:22:58.240><c> with</c><00:22:58.400><c> these</c><00:22:58.640><c> two</c><00:22:58.799><c> assignment</c>

00:22:59.190 --> 00:22:59.200 align:start position:0%
that and now with these two assignment
 

00:22:59.200 --> 00:23:00.950 align:start position:0%
that and now with these two assignment
operators<00:22:59.600><c> present</c><00:22:59.919><c> let's</c><00:23:00.159><c> hit</c><00:23:00.320><c> a</c><00:23:00.480><c> five</c>

00:23:00.950 --> 00:23:00.960 align:start position:0%
operators present let's hit a five
 

00:23:00.960 --> 00:23:02.870 align:start position:0%
operators present let's hit a five
we<00:23:01.120><c> need</c><00:23:01.280><c> to</c><00:23:01.440><c> also</c><00:23:01.679><c> make</c><00:23:01.919><c> sure</c><00:23:02.080><c> that</c><00:23:02.240><c> we</c><00:23:02.400><c> print</c>

00:23:02.870 --> 00:23:02.880 align:start position:0%
we need to also make sure that we print
 

00:23:02.880 --> 00:23:04.630 align:start position:0%
we need to also make sure that we print
vector3<00:23:03.440><c> correctly</c><00:23:03.919><c> because</c><00:23:04.080><c> there's</c><00:23:04.320><c> no</c><00:23:04.480><c> way</c>

00:23:04.630 --> 00:23:04.640 align:start position:0%
vector3 correctly because there's no way
 

00:23:04.640 --> 00:23:06.230 align:start position:0%
vector3 correctly because there's no way
to<00:23:04.720><c> just</c><00:23:04.880><c> print</c><00:23:05.120><c> it</c><00:23:05.200><c> like</c><00:23:05.360><c> a</c><00:23:05.440><c> string</c><00:23:05.760><c> like</c><00:23:05.840><c> this</c>

00:23:06.230 --> 00:23:06.240 align:start position:0%
to just print it like a string like this
 

00:23:06.240 --> 00:23:08.710 align:start position:0%
to just print it like a string like this
so<00:23:06.559><c> to</c><00:23:06.720><c> make</c><00:23:06.880><c> that</c><00:23:07.120><c> happen</c><00:23:07.840><c> we'll</c><00:23:08.080><c> just</c><00:23:08.400><c> copy</c>

00:23:08.710 --> 00:23:08.720 align:start position:0%
so to make that happen we'll just copy
 

00:23:08.720 --> 00:23:09.750 align:start position:0%
so to make that happen we'll just copy
and<00:23:08.799><c> paste</c><00:23:09.120><c> this</c><00:23:09.280><c> and</c><00:23:09.440><c> write</c><00:23:09.600><c> a</c>

00:23:09.750 --> 00:23:09.760 align:start position:0%
and paste this and write a
 

00:23:09.760 --> 00:23:10.710 align:start position:0%
and paste this and write a
specialization

00:23:10.710 --> 00:23:10.720 align:start position:0%
specialization
 

00:23:10.720 --> 00:23:12.630 align:start position:0%
specialization
for<00:23:10.960><c> our</c><00:23:11.200><c> templated</c><00:23:11.679><c> print</c><00:23:12.080><c> function</c><00:23:12.400><c> here</c>

00:23:12.630 --> 00:23:12.640 align:start position:0%
for our templated print function here
 

00:23:12.640 --> 00:23:13.990 align:start position:0%
for our templated print function here
that<00:23:12.799><c> just</c><00:23:12.960><c> takes</c><00:23:13.200><c> in</c><00:23:13.360><c> a</c><00:23:13.440><c> vector</c>

00:23:13.990 --> 00:23:14.000 align:start position:0%
that just takes in a vector
 

00:23:14.000 --> 00:23:16.230 align:start position:0%
that just takes in a vector
of<00:23:14.320><c> vector</c><00:23:14.640><c> threes</c><00:23:15.120><c> specifically</c><00:23:15.840><c> and</c><00:23:16.000><c> we'll</c>

00:23:16.230 --> 00:23:16.240 align:start position:0%
of vector threes specifically and we'll
 

00:23:16.240 --> 00:23:17.270 align:start position:0%
of vector threes specifically and we'll
print<00:23:16.559><c> x</c><00:23:16.960><c> y</c>

00:23:17.270 --> 00:23:17.280 align:start position:0%
print x y
 

00:23:17.280 --> 00:23:19.830 align:start position:0%
print x y
and<00:23:17.600><c> z</c><00:23:18.000><c> okay</c><00:23:18.320><c> cool</c><00:23:18.720><c> now</c><00:23:18.960><c> if</c><00:23:19.039><c> we</c><00:23:19.200><c> hit</c><00:23:19.360><c> a</c><00:23:19.440><c> five</c>

00:23:19.830 --> 00:23:19.840 align:start position:0%
and z okay cool now if we hit a five
 

00:23:19.840 --> 00:23:21.270 align:start position:0%
and z okay cool now if we hit a five
everything<00:23:20.159><c> should</c><00:23:20.400><c> work</c><00:23:20.640><c> and</c><00:23:20.799><c> of</c><00:23:20.880><c> course</c><00:23:21.120><c> we</c>

00:23:21.270 --> 00:23:21.280 align:start position:0%
everything should work and of course we
 

00:23:21.280 --> 00:23:21.990 align:start position:0%
everything should work and of course we
need<00:23:21.440><c> to</c><00:23:21.520><c> make</c><00:23:21.679><c> sure</c>

00:23:21.990 --> 00:23:22.000 align:start position:0%
need to make sure
 

00:23:22.000 --> 00:23:23.750 align:start position:0%
need to make sure
that<00:23:22.159><c> this</c><00:23:22.480><c> print</c><00:23:22.799><c> vector</c><00:23:23.120><c> function</c><00:23:23.600><c> is</c>

00:23:23.750 --> 00:23:23.760 align:start position:0%
that this print vector function is
 

00:23:23.760 --> 00:23:25.190 align:start position:0%
that this print vector function is
actually<00:23:24.080><c> underneath</c><00:23:24.559><c> this</c><00:23:24.880><c> struct</c>

00:23:25.190 --> 00:23:25.200 align:start position:0%
actually underneath this struct
 

00:23:25.200 --> 00:23:26.149 align:start position:0%
actually underneath this struct
declaration

00:23:26.149 --> 00:23:26.159 align:start position:0%
declaration
 

00:23:26.159 --> 00:23:27.669 align:start position:0%
declaration
otherwise<00:23:26.559><c> it</c><00:23:26.640><c> has</c><00:23:26.799><c> no</c><00:23:26.960><c> idea</c><00:23:27.120><c> what</c><00:23:27.280><c> a</c><00:23:27.360><c> vector</c>

00:23:27.669 --> 00:23:27.679 align:start position:0%
otherwise it has no idea what a vector
 

00:23:27.679 --> 00:23:29.270 align:start position:0%
otherwise it has no idea what a vector
three<00:23:28.000><c> is</c><00:23:28.320><c> okay</c><00:23:28.559><c> let's</c><00:23:28.720><c> hit</c><00:23:28.960><c> a</c><00:23:29.039><c> five</c>

00:23:29.270 --> 00:23:29.280 align:start position:0%
three is okay let's hit a five
 

00:23:29.280 --> 00:23:30.950 align:start position:0%
three is okay let's hit a five
everything<00:23:29.600><c> should</c><00:23:29.840><c> now</c><00:23:30.080><c> finally</c><00:23:30.559><c> work</c>

00:23:30.950 --> 00:23:30.960 align:start position:0%
everything should now finally work
 

00:23:30.960 --> 00:23:32.230 align:start position:0%
everything should now finally work
all<00:23:31.039><c> right</c><00:23:31.200><c> so</c><00:23:31.360><c> we</c><00:23:31.520><c> have</c><00:23:31.600><c> a</c><00:23:31.679><c> lot</c><00:23:31.840><c> of</c><00:23:32.000><c> stuff</c>

00:23:32.230 --> 00:23:32.240 align:start position:0%
all right so we have a lot of stuff
 

00:23:32.240 --> 00:23:33.909 align:start position:0%
all right so we have a lot of stuff
happening<00:23:32.640><c> here</c><00:23:32.799><c> we</c><00:23:32.960><c> have</c><00:23:33.120><c> a</c><00:23:33.200><c> copy</c><00:23:33.520><c> we</c><00:23:33.679><c> have</c><00:23:33.840><c> a</c>

00:23:33.909 --> 00:23:33.919 align:start position:0%
happening here we have a copy we have a
 

00:23:33.919 --> 00:23:35.750 align:start position:0%
happening here we have a copy we have a
destroy<00:23:34.400><c> we</c><00:23:34.559><c> have</c><00:23:34.640><c> a</c><00:23:34.720><c> copy</c><00:23:35.039><c> copy</c><00:23:35.360><c> destroy</c>

00:23:35.750 --> 00:23:35.760 align:start position:0%
destroy we have a copy copy destroy
 

00:23:35.760 --> 00:23:36.950 align:start position:0%
destroy we have a copy copy destroy
destroy<00:23:36.159><c> copy</c><00:23:36.480><c> destroy</c>

00:23:36.950 --> 00:23:36.960 align:start position:0%
destroy copy destroy
 

00:23:36.960 --> 00:23:38.710 align:start position:0%
destroy copy destroy
lots<00:23:37.200><c> of</c><00:23:37.280><c> stuff</c><00:23:37.520><c> going</c><00:23:37.840><c> on</c><00:23:38.080><c> but</c><00:23:38.320><c> finally</c><00:23:38.640><c> of</c>

00:23:38.710 --> 00:23:38.720 align:start position:0%
lots of stuff going on but finally of
 

00:23:38.720 --> 00:23:40.310 align:start position:0%
lots of stuff going on but finally of
course<00:23:38.960><c> we</c><00:23:39.120><c> get</c><00:23:39.280><c> this</c><00:23:39.440><c> result</c><00:23:39.840><c> now</c>

00:23:40.310 --> 00:23:40.320 align:start position:0%
course we get this result now
 

00:23:40.320 --> 00:23:42.950 align:start position:0%
course we get this result now
this<00:23:40.559><c> whole</c><00:23:41.120><c> next</c><00:23:41.600><c> step</c><00:23:42.000><c> of</c><00:23:42.159><c> this</c><00:23:42.400><c> video</c><00:23:42.799><c> is</c>

00:23:42.950 --> 00:23:42.960 align:start position:0%
this whole next step of this video is
 

00:23:42.960 --> 00:23:44.070 align:start position:0%
this whole next step of this video is
going<00:23:43.120><c> to</c><00:23:43.279><c> be</c><00:23:43.520><c> all</c><00:23:43.679><c> about</c>

00:23:44.070 --> 00:23:44.080 align:start position:0%
going to be all about
 

00:23:44.080 --> 00:23:46.310 align:start position:0%
going to be all about
reducing<00:23:44.720><c> these</c><00:23:45.039><c> copies</c><00:23:45.520><c> and</c><00:23:45.760><c> destroys</c>

00:23:46.310 --> 00:23:46.320 align:start position:0%
reducing these copies and destroys
 

00:23:46.320 --> 00:23:47.830 align:start position:0%
reducing these copies and destroys
because<00:23:46.559><c> we</c><00:23:46.640><c> just</c><00:23:46.799><c> simply</c><00:23:47.120><c> don't</c><00:23:47.360><c> need</c><00:23:47.520><c> to</c><00:23:47.679><c> be</c>

00:23:47.830 --> 00:23:47.840 align:start position:0%
because we just simply don't need to be
 

00:23:47.840 --> 00:23:48.470 align:start position:0%
because we just simply don't need to be
doing

00:23:48.470 --> 00:23:48.480 align:start position:0%
doing
 

00:23:48.480 --> 00:23:50.310 align:start position:0%
doing
so<00:23:48.799><c> many</c><00:23:49.039><c> copies</c><00:23:49.520><c> every</c><00:23:49.679><c> time</c><00:23:49.840><c> we</c><00:23:50.000><c> want</c><00:23:50.080><c> to</c><00:23:50.159><c> do</c>

00:23:50.310 --> 00:23:50.320 align:start position:0%
so many copies every time we want to do
 

00:23:50.320 --> 00:23:51.590 align:start position:0%
so many copies every time we want to do
this<00:23:50.480><c> in</c><00:23:50.559><c> fact</c><00:23:50.799><c> you</c><00:23:50.880><c> can</c><00:23:50.960><c> see</c><00:23:51.120><c> we're</c><00:23:51.279><c> pushing</c>

00:23:51.590 --> 00:23:51.600 align:start position:0%
this in fact you can see we're pushing
 

00:23:51.600 --> 00:23:53.110 align:start position:0%
this in fact you can see we're pushing
back<00:23:51.840><c> three</c><00:23:52.000><c> different</c><00:23:52.320><c> vectors</c>

00:23:53.110 --> 00:23:53.120 align:start position:0%
back three different vectors
 

00:23:53.120 --> 00:23:55.430 align:start position:0%
back three different vectors
we're<00:23:53.360><c> actually</c><00:23:53.600><c> copying</c><00:23:53.919><c> this</c><00:23:54.240><c> four</c><00:23:54.559><c> times</c>

00:23:55.430 --> 00:23:55.440 align:start position:0%
we're actually copying this four times
 

00:23:55.440 --> 00:23:57.750 align:start position:0%
we're actually copying this four times
now<00:23:55.840><c> for</c><00:23:56.080><c> a</c><00:23:56.400><c> vector</c><00:23:56.880><c> i</c><00:23:56.960><c> want</c><00:23:57.120><c> to</c><00:23:57.200><c> stress</c><00:23:57.600><c> that</c>

00:23:57.750 --> 00:23:57.760 align:start position:0%
now for a vector i want to stress that
 

00:23:57.760 --> 00:23:58.149 align:start position:0%
now for a vector i want to stress that
this

00:23:58.149 --> 00:23:58.159 align:start position:0%
this
 

00:23:58.159 --> 00:23:59.510 align:start position:0%
this
there's<00:23:58.320><c> nothing</c><00:23:58.559><c> really</c><00:23:58.799><c> you</c><00:23:58.880><c> can</c><00:23:59.039><c> do</c><00:23:59.200><c> about</c>

00:23:59.510 --> 00:23:59.520 align:start position:0%
there's nothing really you can do about
 

00:23:59.520 --> 00:24:01.350 align:start position:0%
there's nothing really you can do about
that<00:24:00.000><c> and</c><00:24:00.159><c> it's</c><00:24:00.400><c> also</c><00:24:00.720><c> not</c><00:24:00.880><c> something</c><00:24:01.200><c> that's</c>

00:24:01.350 --> 00:24:01.360 align:start position:0%
that and it's also not something that's
 

00:24:01.360 --> 00:24:03.029 align:start position:0%
that and it's also not something that's
even<00:24:01.600><c> worth</c><00:24:01.840><c> optimizing</c><00:24:02.400><c> because</c><00:24:02.720><c> this</c>

00:24:03.029 --> 00:24:03.039 align:start position:0%
even worth optimizing because this
 

00:24:03.039 --> 00:24:05.750 align:start position:0%
even worth optimizing because this
is<00:24:03.600><c> just</c><00:24:03.919><c> simply</c><00:24:04.480><c> three</c><00:24:04.799><c> floats</c><00:24:05.279><c> copying</c>

00:24:05.750 --> 00:24:05.760 align:start position:0%
is just simply three floats copying
 

00:24:05.760 --> 00:24:07.830 align:start position:0%
is just simply three floats copying
three<00:24:05.919><c> floats</c><00:24:06.320><c> which</c><00:24:06.480><c> is</c><00:24:06.559><c> 12</c><00:24:06.799><c> bytes</c><00:24:07.039><c> of</c><00:24:07.120><c> memory</c>

00:24:07.830 --> 00:24:07.840 align:start position:0%
three floats which is 12 bytes of memory
 

00:24:07.840 --> 00:24:10.070 align:start position:0%
three floats which is 12 bytes of memory
is<00:24:08.240><c> never</c><00:24:08.640><c> really</c><00:24:08.960><c> a</c><00:24:09.120><c> problem</c><00:24:09.760><c> you</c><00:24:09.919><c> would</c>

00:24:10.070 --> 00:24:10.080 align:start position:0%
is never really a problem you would
 

00:24:10.080 --> 00:24:12.310 align:start position:0%
is never really a problem you would
probably<00:24:10.559><c> never</c><00:24:10.880><c> want</c><00:24:11.039><c> to</c><00:24:11.200><c> optimize</c><00:24:11.679><c> that</c>

00:24:12.310 --> 00:24:12.320 align:start position:0%
probably never want to optimize that
 

00:24:12.320 --> 00:24:13.909 align:start position:0%
probably never want to optimize that
but<00:24:12.559><c> just</c><00:24:12.799><c> think</c><00:24:13.039><c> of</c><00:24:13.120><c> vector</c><00:24:13.440><c> 3</c><00:24:13.760><c> as</c>

00:24:13.909 --> 00:24:13.919 align:start position:0%
but just think of vector 3 as
 

00:24:13.919 --> 00:24:15.590 align:start position:0%
but just think of vector 3 as
potentially<00:24:14.559><c> a</c><00:24:14.640><c> string</c><00:24:15.039><c> or</c><00:24:15.200><c> something</c><00:24:15.520><c> that</c>

00:24:15.590 --> 00:24:15.600 align:start position:0%
potentially a string or something that
 

00:24:15.600 --> 00:24:16.710 align:start position:0%
potentially a string or something that
might<00:24:15.919><c> actually</c><00:24:16.159><c> have</c><00:24:16.320><c> a</c><00:24:16.400><c> heap</c>

00:24:16.710 --> 00:24:16.720 align:start position:0%
might actually have a heap
 

00:24:16.720 --> 00:24:19.830 align:start position:0%
might actually have a heap
allocation<00:24:17.600><c> every</c><00:24:17.919><c> time</c><00:24:18.240><c> we</c><00:24:18.400><c> do</c><00:24:18.640><c> copy</c><00:24:19.279><c> we</c><00:24:19.679><c> have</c>

00:24:19.830 --> 00:24:19.840 align:start position:0%
allocation every time we do copy we have
 

00:24:19.840 --> 00:24:20.310 align:start position:0%
allocation every time we do copy we have
to

00:24:20.310 --> 00:24:20.320 align:start position:0%
to
 

00:24:20.320 --> 00:24:22.230 align:start position:0%
to
reallocate<00:24:20.960><c> that</c><00:24:21.200><c> heap</c><00:24:21.440><c> memory</c><00:24:21.840><c> somewhere</c>

00:24:22.230 --> 00:24:22.240 align:start position:0%
reallocate that heap memory somewhere
 

00:24:22.240 --> 00:24:23.430 align:start position:0%
reallocate that heap memory somewhere
else<00:24:22.880><c> and</c><00:24:23.039><c> then</c>

00:24:23.430 --> 00:24:23.440 align:start position:0%
else and then
 

00:24:23.440 --> 00:24:25.909 align:start position:0%
else and then
free<00:24:23.840><c> the</c><00:24:24.000><c> old</c><00:24:24.320><c> one</c><00:24:24.720><c> this</c><00:24:24.960><c> is</c><00:24:25.120><c> obviously</c><00:24:25.679><c> not</c>

00:24:25.909 --> 00:24:25.919 align:start position:0%
free the old one this is obviously not
 

00:24:25.919 --> 00:24:27.110 align:start position:0%
free the old one this is obviously not
very<00:24:26.080><c> good</c><00:24:26.240><c> for</c><00:24:26.400><c> performance</c>

00:24:27.110 --> 00:24:27.120 align:start position:0%
very good for performance
 

00:24:27.120 --> 00:24:29.510 align:start position:0%
very good for performance
and<00:24:27.360><c> there</c><00:24:27.679><c> are</c><00:24:27.919><c> ways</c><00:24:28.320><c> to</c><00:24:28.640><c> improve</c><00:24:29.200><c> that</c><00:24:29.440><c> and</c>

00:24:29.510 --> 00:24:29.520 align:start position:0%
and there are ways to improve that and
 

00:24:29.520 --> 00:24:31.269 align:start position:0%
and there are ways to improve that and
that's<00:24:29.760><c> what</c><00:24:29.919><c> this</c><00:24:30.080><c> is</c><00:24:30.159><c> going</c><00:24:30.400><c> to</c><00:24:30.480><c> be</c><00:24:30.640><c> about</c>

00:24:31.269 --> 00:24:31.279 align:start position:0%
that's what this is going to be about
 

00:24:31.279 --> 00:24:33.269 align:start position:0%
that's what this is going to be about
so<00:24:31.679><c> first</c><00:24:32.000><c> step</c><00:24:32.320><c> you'll</c><00:24:32.559><c> notice</c><00:24:32.880><c> here</c><00:24:33.039><c> that</c>

00:24:33.269 --> 00:24:33.279 align:start position:0%
so first step you'll notice here that
 

00:24:33.279 --> 00:24:35.269 align:start position:0%
so first step you'll notice here that
all<00:24:33.440><c> of</c><00:24:33.520><c> these</c><00:24:33.840><c> are</c><00:24:34.080><c> actually</c><00:24:34.559><c> temporaries</c>

00:24:35.269 --> 00:24:35.279 align:start position:0%
all of these are actually temporaries
 

00:24:35.279 --> 00:24:36.710 align:start position:0%
all of these are actually temporaries
these<00:24:35.520><c> are</c><00:24:35.600><c> not</c><00:24:35.840><c> variables</c><00:24:36.240><c> that</c><00:24:36.320><c> exist</c>

00:24:36.710 --> 00:24:36.720 align:start position:0%
these are not variables that exist
 

00:24:36.720 --> 00:24:37.909 align:start position:0%
these are not variables that exist
elsewhere<00:24:37.120><c> and</c><00:24:37.200><c> then</c><00:24:37.440><c> finally</c><00:24:37.760><c> we're</c>

00:24:37.909 --> 00:24:37.919 align:start position:0%
elsewhere and then finally we're
 

00:24:37.919 --> 00:24:39.350 align:start position:0%
elsewhere and then finally we're
deciding<00:24:38.240><c> to</c><00:24:38.320><c> push</c><00:24:38.480><c> them</c><00:24:38.640><c> back</c><00:24:38.720><c> into</c><00:24:38.960><c> a</c><00:24:39.039><c> vector</c>

00:24:39.350 --> 00:24:39.360 align:start position:0%
deciding to push them back into a vector
 

00:24:39.360 --> 00:24:41.110 align:start position:0%
deciding to push them back into a vector
no<00:24:39.679><c> the</c><00:24:39.840><c> only</c><00:24:40.080><c> reason</c><00:24:40.400><c> they're</c><00:24:40.640><c> here</c><00:24:40.960><c> is</c>

00:24:41.110 --> 00:24:41.120 align:start position:0%
no the only reason they're here is
 

00:24:41.120 --> 00:24:42.630 align:start position:0%
no the only reason they're here is
because<00:24:41.360><c> we</c><00:24:41.520><c> want</c><00:24:41.679><c> to</c><00:24:41.840><c> basically</c><00:24:42.320><c> give</c><00:24:42.480><c> them</c>

00:24:42.630 --> 00:24:42.640 align:start position:0%
because we want to basically give them
 

00:24:42.640 --> 00:24:43.669 align:start position:0%
because we want to basically give them
to<00:24:42.799><c> the</c><00:24:42.960><c> vector</c>

00:24:43.669 --> 00:24:43.679 align:start position:0%
to the vector
 

00:24:43.679 --> 00:24:46.070 align:start position:0%
to the vector
so<00:24:43.840><c> one</c><00:24:44.080><c> thing</c><00:24:44.240><c> that</c><00:24:44.400><c> we</c><00:24:44.559><c> could</c><00:24:44.799><c> do</c><00:24:45.440><c> is</c><00:24:45.679><c> write</c><00:24:45.919><c> a</c>

00:24:46.070 --> 00:24:46.080 align:start position:0%
so one thing that we could do is write a
 

00:24:46.080 --> 00:24:47.669 align:start position:0%
so one thing that we could do is write a
different<00:24:46.480><c> pushback</c><00:24:47.039><c> function</c>

00:24:47.669 --> 00:24:47.679 align:start position:0%
different pushback function
 

00:24:47.679 --> 00:24:49.909 align:start position:0%
different pushback function
that<00:24:47.919><c> actually</c><00:24:48.240><c> takes</c><00:24:48.480><c> in</c><00:24:48.640><c> a</c><00:24:48.720><c> temporary</c><00:24:49.679><c> so</c><00:24:49.840><c> if</c>

00:24:49.909 --> 00:24:49.919 align:start position:0%
that actually takes in a temporary so if
 

00:24:49.919 --> 00:24:50.710 align:start position:0%
that actually takes in a temporary so if
we<00:24:50.080><c> say</c><00:24:50.480><c> t</c>

00:24:50.710 --> 00:24:50.720 align:start position:0%
we say t
 

00:24:50.720 --> 00:24:52.950 align:start position:0%
we say t
ampersand<00:24:51.200><c> ampersand</c><00:24:51.679><c> to</c><00:24:51.760><c> create</c><00:24:52.159><c> an</c><00:24:52.400><c> r</c><00:24:52.559><c> value</c>

00:24:52.950 --> 00:24:52.960 align:start position:0%
ampersand ampersand to create an r value
 

00:24:52.960 --> 00:24:53.909 align:start position:0%
ampersand ampersand to create an r value
reference

00:24:53.909 --> 00:24:53.919 align:start position:0%
reference
 

00:24:53.919 --> 00:24:55.990 align:start position:0%
reference
what<00:24:54.159><c> we</c><00:24:54.240><c> can</c><00:24:54.400><c> now</c><00:24:54.640><c> do</c><00:24:54.960><c> is</c><00:24:55.200><c> effectively</c><00:24:55.840><c> the</c>

00:24:55.990 --> 00:24:56.000 align:start position:0%
what we can now do is effectively the
 

00:24:56.000 --> 00:24:57.110 align:start position:0%
what we can now do is effectively the
same<00:24:56.320><c> thing</c><00:24:56.640><c> here</c>

00:24:57.110 --> 00:24:57.120 align:start position:0%
same thing here
 

00:24:57.120 --> 00:24:59.510 align:start position:0%
same thing here
except<00:24:57.600><c> instead</c><00:24:58.000><c> of</c><00:24:58.240><c> just</c><00:24:58.640><c> simply</c><00:24:59.120><c> assigning</c>

00:24:59.510 --> 00:24:59.520 align:start position:0%
except instead of just simply assigning
 

00:24:59.520 --> 00:25:00.789 align:start position:0%
except instead of just simply assigning
mdata<00:24:59.919><c> to</c><00:25:00.159><c> value</c>

00:25:00.789 --> 00:25:00.799 align:start position:0%
mdata to value
 

00:25:00.799 --> 00:25:02.950 align:start position:0%
mdata to value
we're<00:25:00.960><c> going</c><00:25:01.200><c> to</c><00:25:01.360><c> actually</c><00:25:01.760><c> move</c><00:25:02.000><c> it</c><00:25:02.320><c> in</c><00:25:02.480><c> there</c>

00:25:02.950 --> 00:25:02.960 align:start position:0%
we're going to actually move it in there
 

00:25:02.960 --> 00:25:04.390 align:start position:0%
we're going to actually move it in there
now<00:25:03.200><c> move</c><00:25:03.520><c> just</c><00:25:03.760><c> simply</c>

00:25:04.390 --> 00:25:04.400 align:start position:0%
now move just simply
 

00:25:04.400 --> 00:25:07.029 align:start position:0%
now move just simply
casts<00:25:05.039><c> this</c><00:25:05.360><c> value</c><00:25:05.679><c> to</c><00:25:05.919><c> be</c><00:25:06.240><c> an</c><00:25:06.559><c> r</c><00:25:06.720><c> value</c>

00:25:07.029 --> 00:25:07.039 align:start position:0%
casts this value to be an r value
 

00:25:07.039 --> 00:25:08.549 align:start position:0%
casts this value to be an r value
reference<00:25:07.440><c> you</c><00:25:07.520><c> can</c><00:25:07.600><c> see</c><00:25:07.679><c> it's</c><00:25:07.919><c> already</c><00:25:08.320><c> an</c><00:25:08.480><c> r</c>

00:25:08.549 --> 00:25:08.559 align:start position:0%
reference you can see it's already an r
 

00:25:08.559 --> 00:25:09.590 align:start position:0%
reference you can see it's already an r
value<00:25:08.880><c> reference</c>

00:25:09.590 --> 00:25:09.600 align:start position:0%
value reference
 

00:25:09.600 --> 00:25:10.950 align:start position:0%
value reference
but<00:25:09.760><c> there's</c><00:25:09.919><c> a</c><00:25:10.000><c> bit</c><00:25:10.080><c> of</c><00:25:10.240><c> a</c><00:25:10.320><c> trick</c><00:25:10.559><c> which</c><00:25:10.720><c> is</c><00:25:10.880><c> as</c>

00:25:10.950 --> 00:25:10.960 align:start position:0%
but there's a bit of a trick which is as
 

00:25:10.960 --> 00:25:12.470 align:start position:0%
but there's a bit of a trick which is as
soon<00:25:11.120><c> as</c><00:25:11.200><c> you</c><00:25:11.360><c> actually</c><00:25:11.679><c> enter</c><00:25:11.919><c> a</c><00:25:12.000><c> function</c><00:25:12.320><c> if</c>

00:25:12.470 --> 00:25:12.480 align:start position:0%
soon as you actually enter a function if
 

00:25:12.480 --> 00:25:13.669 align:start position:0%
soon as you actually enter a function if
it's<00:25:12.640><c> a</c><00:25:12.720><c> parameter</c><00:25:13.120><c> like</c><00:25:13.279><c> this</c>

00:25:13.669 --> 00:25:13.679 align:start position:0%
it's a parameter like this
 

00:25:13.679 --> 00:25:15.350 align:start position:0%
it's a parameter like this
this<00:25:13.840><c> now</c><00:25:14.000><c> becomes</c><00:25:14.320><c> an</c><00:25:14.480><c> l</c><00:25:14.640><c> value</c><00:25:15.039><c> and</c><00:25:15.120><c> since</c>

00:25:15.350 --> 00:25:15.360 align:start position:0%
this now becomes an l value and since
 

00:25:15.360 --> 00:25:16.950 align:start position:0%
this now becomes an l value and since
it's<00:25:15.440><c> an</c><00:25:15.600><c> l</c><00:25:15.760><c> value</c><00:25:16.080><c> we</c><00:25:16.159><c> need</c><00:25:16.320><c> to</c><00:25:16.400><c> be</c><00:25:16.559><c> like</c><00:25:16.720><c> no</c>

00:25:16.950 --> 00:25:16.960 align:start position:0%
it's an l value we need to be like no
 

00:25:16.960 --> 00:25:18.470 align:start position:0%
it's an l value we need to be like no
no<00:25:17.279><c> i</c><00:25:17.360><c> want</c><00:25:17.520><c> this</c><00:25:17.679><c> to</c><00:25:17.760><c> be</c><00:25:17.840><c> an</c><00:25:18.000><c> r</c><00:25:18.159><c> value</c>

00:25:18.470 --> 00:25:18.480 align:start position:0%
no i want this to be an r value
 

00:25:18.480 --> 00:25:19.990 align:start position:0%
no i want this to be an r value
seriously<00:25:19.039><c> for</c><00:25:19.200><c> the</c><00:25:19.279><c> purposes</c><00:25:19.600><c> of</c><00:25:19.760><c> moving</c>

00:25:19.990 --> 00:25:20.000 align:start position:0%
seriously for the purposes of moving
 

00:25:20.000 --> 00:25:20.789 align:start position:0%
seriously for the purposes of moving
this<00:25:20.159><c> in</c><00:25:20.320><c> here</c>

00:25:20.789 --> 00:25:20.799 align:start position:0%
this in here
 

00:25:20.799 --> 00:25:23.110 align:start position:0%
this in here
so<00:25:20.960><c> now</c><00:25:21.279><c> if</c><00:25:21.440><c> this</c><00:25:21.840><c> if</c><00:25:22.000><c> this</c><00:25:22.240><c> overload</c><00:25:22.720><c> is</c><00:25:22.799><c> used</c>

00:25:23.110 --> 00:25:23.120 align:start position:0%
so now if this if this overload is used
 

00:25:23.120 --> 00:25:25.190 align:start position:0%
so now if this if this overload is used
which<00:25:23.360><c> it</c><00:25:23.440><c> will</c><00:25:23.679><c> be</c><00:25:23.919><c> for</c><00:25:24.240><c> all</c><00:25:24.400><c> of</c><00:25:24.480><c> these</c><00:25:24.720><c> cases</c>

00:25:25.190 --> 00:25:25.200 align:start position:0%
which it will be for all of these cases
 

00:25:25.200 --> 00:25:25.990 align:start position:0%
which it will be for all of these cases
because<00:25:25.440><c> they're</c><00:25:25.679><c> all</c>

00:25:25.990 --> 00:25:26.000 align:start position:0%
because they're all
 

00:25:26.000 --> 00:25:28.390 align:start position:0%
because they're all
r<00:25:26.159><c> values</c><00:25:26.720><c> we</c><00:25:26.799><c> should</c><00:25:27.039><c> not</c><00:25:27.200><c> see</c><00:25:27.520><c> any</c><00:25:27.840><c> copy</c>

00:25:28.390 --> 00:25:28.400 align:start position:0%
r values we should not see any copy
 

00:25:28.400 --> 00:25:29.830 align:start position:0%
r values we should not see any copy
coming<00:25:28.720><c> from</c><00:25:28.880><c> this</c><00:25:29.039><c> actual</c><00:25:29.360><c> pushback</c>

00:25:29.830 --> 00:25:29.840 align:start position:0%
coming from this actual pushback
 

00:25:29.840 --> 00:25:31.590 align:start position:0%
coming from this actual pushback
function<00:25:30.240><c> it</c><00:25:30.480><c> should</c><00:25:30.640><c> be</c><00:25:30.799><c> moving</c><00:25:31.200><c> it</c><00:25:31.360><c> and</c><00:25:31.520><c> if</c>

00:25:31.590 --> 00:25:31.600 align:start position:0%
function it should be moving it and if
 

00:25:31.600 --> 00:25:33.190 align:start position:0%
function it should be moving it and if
you're<00:25:31.760><c> confused</c><00:25:32.159><c> about</c><00:25:32.400><c> l</c><00:25:32.559><c> values</c><00:25:32.880><c> and</c><00:25:33.039><c> r</c>

00:25:33.190 --> 00:25:33.200 align:start position:0%
you're confused about l values and r
 

00:25:33.200 --> 00:25:34.789 align:start position:0%
you're confused about l values and r
values<00:25:33.600><c> as</c><00:25:33.679><c> well</c><00:25:33.840><c> as</c><00:25:34.000><c> move</c><00:25:34.159><c> semantics</c><00:25:34.640><c> all</c>

00:25:34.789 --> 00:25:34.799 align:start position:0%
values as well as move semantics all
 

00:25:34.799 --> 00:25:36.470 align:start position:0%
values as well as move semantics all
that<00:25:34.960><c> i</c><00:25:35.039><c> have</c><00:25:35.120><c> a</c><00:25:35.200><c> bunch</c><00:25:35.440><c> of</c><00:25:35.520><c> videos</c><00:25:35.760><c> about</c><00:25:36.080><c> that</c>

00:25:36.470 --> 00:25:36.480 align:start position:0%
that i have a bunch of videos about that
 

00:25:36.480 --> 00:25:38.149 align:start position:0%
that i have a bunch of videos about that
i'll<00:25:36.640><c> link</c><00:25:36.880><c> them</c><00:25:37.200><c> in</c><00:25:37.279><c> the</c><00:25:37.360><c> top</c><00:25:37.520><c> right</c><00:25:37.760><c> corner</c>

00:25:38.149 --> 00:25:38.159 align:start position:0%
i'll link them in the top right corner
 

00:25:38.159 --> 00:25:39.510 align:start position:0%
i'll link them in the top right corner
definitely<00:25:38.559><c> check</c><00:25:38.799><c> them</c><00:25:38.960><c> out</c><00:25:39.120><c> let's</c><00:25:39.279><c> see</c><00:25:39.440><c> what</c>

00:25:39.510 --> 00:25:39.520 align:start position:0%
definitely check them out let's see what
 

00:25:39.520 --> 00:25:41.110 align:start position:0%
definitely check them out let's see what
we<00:25:39.600><c> get</c><00:25:39.840><c> here</c><00:25:40.080><c> so</c><00:25:40.240><c> now</c><00:25:40.400><c> you</c><00:25:40.480><c> can</c><00:25:40.640><c> see</c><00:25:40.799><c> we</c><00:25:40.880><c> have</c>

00:25:41.110 --> 00:25:41.120 align:start position:0%
we get here so now you can see we have
 

00:25:41.120 --> 00:25:41.990 align:start position:0%
we get here so now you can see we have
move<00:25:41.440><c> destroy</c>

00:25:41.990 --> 00:25:42.000 align:start position:0%
move destroy
 

00:25:42.000 --> 00:25:44.390 align:start position:0%
move destroy
copy<00:25:42.240><c> copy</c><00:25:42.480><c> destroys</c><00:25:42.880><c> remove</c><00:25:43.760><c> destroy</c><00:25:44.240><c> so</c>

00:25:44.390 --> 00:25:44.400 align:start position:0%
copy copy destroys remove destroy so
 

00:25:44.400 --> 00:25:45.750 align:start position:0%
copy copy destroys remove destroy so
this<00:25:44.559><c> is</c><00:25:44.720><c> much</c><00:25:44.960><c> better</c><00:25:45.200><c> now</c><00:25:45.360><c> we're</c><00:25:45.520><c> doing</c>

00:25:45.750 --> 00:25:45.760 align:start position:0%
this is much better now we're doing
 

00:25:45.760 --> 00:25:47.350 align:start position:0%
this is much better now we're doing
moves<00:25:46.000><c> instead</c><00:25:46.240><c> of</c><00:25:46.400><c> copies</c><00:25:46.880><c> every</c><00:25:47.039><c> time</c><00:25:47.200><c> we</c>

00:25:47.350 --> 00:25:47.360 align:start position:0%
moves instead of copies every time we
 

00:25:47.360 --> 00:25:47.909 align:start position:0%
moves instead of copies every time we
push<00:25:47.600><c> back</c>

00:25:47.909 --> 00:25:47.919 align:start position:0%
push back
 

00:25:47.919 --> 00:25:49.990 align:start position:0%
push back
an<00:25:48.080><c> element</c><00:25:48.480><c> however</c><00:25:49.279><c> when</c><00:25:49.520><c> we</c><00:25:49.600><c> need</c><00:25:49.760><c> to</c>

00:25:49.990 --> 00:25:50.000 align:start position:0%
an element however when we need to
 

00:25:50.000 --> 00:25:51.510 align:start position:0%
an element however when we need to
reallocate<00:25:50.720><c> our</c><00:25:50.960><c> vector</c>

00:25:51.510 --> 00:25:51.520 align:start position:0%
reallocate our vector
 

00:25:51.520 --> 00:25:53.510 align:start position:0%
reallocate our vector
we're<00:25:51.679><c> going</c><00:25:51.919><c> back</c><00:25:52.159><c> and</c><00:25:52.320><c> copying</c><00:25:52.799><c> that</c><00:25:53.120><c> so</c><00:25:53.360><c> how</c>

00:25:53.510 --> 00:25:53.520 align:start position:0%
we're going back and copying that so how
 

00:25:53.520 --> 00:25:54.710 align:start position:0%
we're going back and copying that so how
do<00:25:53.679><c> we</c><00:25:53.840><c> fix</c><00:25:54.080><c> that</c>

00:25:54.710 --> 00:25:54.720 align:start position:0%
do we fix that
 

00:25:54.720 --> 00:25:57.029 align:start position:0%
do we fix that
well<00:25:55.279><c> pretty</c><00:25:55.600><c> simple</c><00:25:56.240><c> if</c><00:25:56.400><c> we</c><00:25:56.559><c> go</c><00:25:56.640><c> back</c><00:25:56.880><c> to</c>

00:25:57.029 --> 00:25:57.039 align:start position:0%
well pretty simple if we go back to
 

00:25:57.039 --> 00:25:57.830 align:start position:0%
well pretty simple if we go back to
vector.h

00:25:57.830 --> 00:25:57.840 align:start position:0%
vector.h
 

00:25:57.840 --> 00:26:00.149 align:start position:0%
vector.h
inside<00:25:58.159><c> this</c><00:25:58.400><c> really</c><00:25:58.880><c> function</c><00:25:59.600><c> where</c><00:25:59.840><c> i</c><00:25:59.919><c> said</c>

00:26:00.149 --> 00:26:00.159 align:start position:0%
inside this really function where i said
 

00:26:00.159 --> 00:26:01.430 align:start position:0%
inside this really function where i said
we<00:26:00.320><c> should</c><00:26:00.480><c> probably</c><00:26:00.880><c> move</c><00:26:01.120><c> this</c>

00:26:01.430 --> 00:26:01.440 align:start position:0%
we should probably move this
 

00:26:01.440 --> 00:26:03.830 align:start position:0%
we should probably move this
we<00:26:01.600><c> can</c><00:26:01.760><c> just</c><00:26:02.000><c> say</c><00:26:02.240><c> that</c><00:26:02.480><c> well</c><00:26:02.720><c> hey</c><00:26:03.039><c> let's</c><00:26:03.440><c> cast</c>

00:26:03.830 --> 00:26:03.840 align:start position:0%
we can just say that well hey let's cast
 

00:26:03.840 --> 00:26:05.909 align:start position:0%
we can just say that well hey let's cast
this<00:26:04.080><c> to</c><00:26:04.320><c> be</c><00:26:04.559><c> an</c><00:26:04.720><c> r</c><00:26:04.880><c> value</c><00:26:05.279><c> reference</c>

00:26:05.909 --> 00:26:05.919 align:start position:0%
this to be an r value reference
 

00:26:05.919 --> 00:26:07.909 align:start position:0%
this to be an r value reference
and<00:26:06.159><c> try</c><00:26:06.320><c> and</c><00:26:06.480><c> move</c><00:26:06.720><c> it</c><00:26:07.120><c> because</c><00:26:07.440><c> guess</c><00:26:07.679><c> what</c>

00:26:07.909 --> 00:26:07.919 align:start position:0%
and try and move it because guess what
 

00:26:07.919 --> 00:26:09.909 align:start position:0%
and try and move it because guess what
if<00:26:08.000><c> there's</c><00:26:08.320><c> no</c><00:26:08.480><c> move</c><00:26:08.799><c> constructor</c><00:26:09.440><c> for</c><00:26:09.600><c> this</c>

00:26:09.909 --> 00:26:09.919 align:start position:0%
if there's no move constructor for this
 

00:26:09.919 --> 00:26:10.470 align:start position:0%
if there's no move constructor for this
type

00:26:10.470 --> 00:26:10.480 align:start position:0%
type
 

00:26:10.480 --> 00:26:12.630 align:start position:0%
type
it<00:26:10.720><c> is</c><00:26:10.960><c> just</c><00:26:11.120><c> gonna</c><00:26:11.360><c> copy</c><00:26:11.760><c> it</c><00:26:11.919><c> so</c><00:26:12.240><c> everything</c>

00:26:12.630 --> 00:26:12.640 align:start position:0%
it is just gonna copy it so everything
 

00:26:12.640 --> 00:26:13.909 align:start position:0%
it is just gonna copy it so everything
will<00:26:12.799><c> be</c><00:26:12.960><c> safe</c><00:26:13.200><c> here</c><00:26:13.360><c> and</c><00:26:13.520><c> obviously</c><00:26:13.760><c> for</c>

00:26:13.909 --> 00:26:13.919 align:start position:0%
will be safe here and obviously for
 

00:26:13.919 --> 00:26:15.110 align:start position:0%
will be safe here and obviously for
primitive<00:26:14.320><c> types</c><00:26:14.640><c> like</c>

00:26:15.110 --> 00:26:15.120 align:start position:0%
primitive types like
 

00:26:15.120 --> 00:26:16.710 align:start position:0%
primitive types like
integers<00:26:15.679><c> and</c><00:26:15.760><c> floats</c><00:26:16.159><c> and</c><00:26:16.240><c> whatever</c><00:26:16.559><c> it's</c>

00:26:16.710 --> 00:26:16.720 align:start position:0%
integers and floats and whatever it's
 

00:26:16.720 --> 00:26:18.470 align:start position:0%
integers and floats and whatever it's
not<00:26:16.880><c> gonna</c><00:26:17.279><c> do</c><00:26:17.440><c> anything</c><00:26:17.760><c> really</c><00:26:18.080><c> so</c><00:26:18.240><c> there's</c>

00:26:18.470 --> 00:26:18.480 align:start position:0%
not gonna do anything really so there's
 

00:26:18.480 --> 00:26:19.909 align:start position:0%
not gonna do anything really so there's
really<00:26:18.640><c> no</c><00:26:18.880><c> downside</c><00:26:19.279><c> to</c><00:26:19.440><c> just</c>

00:26:19.909 --> 00:26:19.919 align:start position:0%
really no downside to just
 

00:26:19.919 --> 00:26:22.789 align:start position:0%
really no downside to just
making<00:26:20.320><c> this</c><00:26:20.640><c> move</c><00:26:21.039><c> if</c><00:26:21.360><c> able</c><00:26:21.679><c> to</c><00:26:22.240><c> especially</c>

00:26:22.789 --> 00:26:22.799 align:start position:0%
making this move if able to especially
 

00:26:22.799 --> 00:26:24.310 align:start position:0%
making this move if able to especially
because<00:26:23.120><c> obviously</c><00:26:23.440><c> in</c><00:26:23.520><c> this</c><00:26:23.600><c> case</c><00:26:23.919><c> we</c><00:26:24.080><c> are</c>

00:26:24.310 --> 00:26:24.320 align:start position:0%
because obviously in this case we are
 

00:26:24.320 --> 00:26:25.830 align:start position:0%
because obviously in this case we are
actually<00:26:24.559><c> trying</c><00:26:24.799><c> to</c><00:26:24.960><c> move</c><00:26:25.200><c> it</c><00:26:25.360><c> we</c><00:26:25.520><c> know</c><00:26:25.679><c> that</c>

00:26:25.830 --> 00:26:25.840 align:start position:0%
actually trying to move it we know that
 

00:26:25.840 --> 00:26:28.310 align:start position:0%
actually trying to move it we know that
the<00:26:26.000><c> old</c><00:26:26.240><c> data</c><00:26:26.640><c> is</c><00:26:26.880><c> about</c><00:26:27.200><c> to</c><00:26:27.360><c> be</c><00:26:27.520><c> deleted</c><00:26:28.159><c> if</c>

00:26:28.310 --> 00:26:28.320 align:start position:0%
the old data is about to be deleted if
 

00:26:28.320 --> 00:26:29.909 align:start position:0%
the old data is about to be deleted if
this<00:26:28.480><c> was</c><00:26:28.720><c> actually</c><00:26:29.039><c> supposed</c><00:26:29.279><c> to</c><00:26:29.440><c> be</c><00:26:29.520><c> a</c><00:26:29.600><c> copy</c>

00:26:29.909 --> 00:26:29.919 align:start position:0%
this was actually supposed to be a copy
 

00:26:29.919 --> 00:26:31.830 align:start position:0%
this was actually supposed to be a copy
we<00:26:30.080><c> would</c><00:26:30.320><c> obviously</c><00:26:30.720><c> not</c><00:26:30.880><c> want</c><00:26:31.120><c> to</c><00:26:31.279><c> move</c><00:26:31.520><c> it</c>

00:26:31.830 --> 00:26:31.840 align:start position:0%
we would obviously not want to move it
 

00:26:31.840 --> 00:26:34.230 align:start position:0%
we would obviously not want to move it
let's<00:26:32.080><c> hit</c><00:26:32.240><c> f5</c><00:26:32.720><c> okay</c><00:26:33.039><c> look</c><00:26:33.200><c> at</c><00:26:33.279><c> that</c><00:26:33.520><c> amazing</c>

00:26:34.230 --> 00:26:34.240 align:start position:0%
let's hit f5 okay look at that amazing
 

00:26:34.240 --> 00:26:35.669 align:start position:0%
let's hit f5 okay look at that amazing
no<00:26:34.480><c> more</c><00:26:34.720><c> copies</c><00:26:35.120><c> now</c>

00:26:35.669 --> 00:26:35.679 align:start position:0%
no more copies now
 

00:26:35.679 --> 00:26:38.870 align:start position:0%
no more copies now
we're<00:26:36.000><c> just</c><00:26:36.559><c> moving</c><00:26:36.960><c> our</c><00:26:37.200><c> data</c><00:26:37.520><c> across</c><00:26:38.400><c> great</c>

00:26:38.870 --> 00:26:38.880 align:start position:0%
we're just moving our data across great
 

00:26:38.880 --> 00:26:41.669 align:start position:0%
we're just moving our data across great
but<00:26:39.120><c> what</c><00:26:39.279><c> about</c><00:26:39.760><c> in</c><00:26:40.000><c> place</c><00:26:40.559><c> back</c><00:26:41.279><c> well</c><00:26:41.520><c> and</c>

00:26:41.669 --> 00:26:41.679 align:start position:0%
but what about in place back well and
 

00:26:41.679 --> 00:26:43.510 align:start position:0%
but what about in place back well and
place<00:26:42.000><c> back</c><00:26:42.320><c> is</c><00:26:42.480><c> a</c><00:26:42.559><c> little</c><00:26:42.720><c> bit</c><00:26:42.880><c> of</c><00:26:43.039><c> a</c><00:26:43.120><c> special</c>

00:26:43.510 --> 00:26:43.520 align:start position:0%
place back is a little bit of a special
 

00:26:43.520 --> 00:26:45.590 align:start position:0%
place back is a little bit of a special
function<00:26:43.919><c> that</c><00:26:44.080><c> exists</c><00:26:44.559><c> inside</c><00:26:44.960><c> the</c><00:26:45.200><c> std</c>

00:26:45.590 --> 00:26:45.600 align:start position:0%
function that exists inside the std
 

00:26:45.600 --> 00:26:47.269 align:start position:0%
function that exists inside the std
vector<00:26:45.919><c> class</c><00:26:46.320><c> and</c><00:26:46.480><c> it's</c><00:26:46.720><c> really</c><00:26:46.960><c> really</c>

00:26:47.269 --> 00:26:47.279 align:start position:0%
vector class and it's really really
 

00:26:47.279 --> 00:26:47.830 align:start position:0%
vector class and it's really really
useful

00:26:47.830 --> 00:26:47.840 align:start position:0%
useful
 

00:26:47.840 --> 00:26:49.510 align:start position:0%
useful
what<00:26:48.000><c> it</c><00:26:48.159><c> does</c><00:26:48.559><c> is</c><00:26:48.720><c> it</c><00:26:48.880><c> basically</c><00:26:49.200><c> says</c><00:26:49.440><c> that</c>

00:26:49.510 --> 00:26:49.520 align:start position:0%
what it does is it basically says that
 

00:26:49.520 --> 00:26:51.110 align:start position:0%
what it does is it basically says that
well<00:26:49.760><c> instead</c><00:26:50.000><c> of</c><00:26:50.159><c> constructing</c><00:26:50.880><c> this</c>

00:26:51.110 --> 00:26:51.120 align:start position:0%
well instead of constructing this
 

00:26:51.120 --> 00:26:53.510 align:start position:0%
well instead of constructing this
vector3<00:26:51.840><c> instance</c><00:26:52.400><c> over</c><00:26:52.720><c> here</c><00:26:53.039><c> inside</c><00:26:53.360><c> the</c>

00:26:53.510 --> 00:26:53.520 align:start position:0%
vector3 instance over here inside the
 

00:26:53.520 --> 00:26:54.789 align:start position:0%
vector3 instance over here inside the
stack<00:26:53.760><c> frame</c><00:26:54.000><c> of</c><00:26:54.240><c> main</c>

00:26:54.789 --> 00:26:54.799 align:start position:0%
stack frame of main
 

00:26:54.799 --> 00:26:57.029 align:start position:0%
stack frame of main
and<00:26:54.960><c> then</c><00:26:55.279><c> moving</c><00:26:55.679><c> it</c><00:26:56.000><c> into</c><00:26:56.480><c> that</c><00:26:56.720><c> data</c>

00:26:57.029 --> 00:26:57.039 align:start position:0%
and then moving it into that data
 

00:26:57.039 --> 00:26:58.070 align:start position:0%
and then moving it into that data
storage<00:26:57.440><c> we</c><00:26:57.520><c> have</c><00:26:57.679><c> inside</c>

00:26:58.070 --> 00:26:58.080 align:start position:0%
storage we have inside
 

00:26:58.080 --> 00:26:59.590 align:start position:0%
storage we have inside
vector<00:26:58.640><c> which</c><00:26:58.880><c> is</c><00:26:58.960><c> what</c><00:26:59.120><c> we're</c><00:26:59.279><c> currently</c>

00:26:59.590 --> 00:26:59.600 align:start position:0%
vector which is what we're currently
 

00:26:59.600 --> 00:27:01.430 align:start position:0%
vector which is what we're currently
doing<00:27:00.159><c> why</c><00:27:00.320><c> don't</c><00:27:00.480><c> you</c><00:27:00.640><c> just</c><00:27:00.799><c> give</c><00:27:00.960><c> me</c><00:27:01.200><c> all</c><00:27:01.360><c> of</c>

00:27:01.430 --> 00:27:01.440 align:start position:0%
doing why don't you just give me all of
 

00:27:01.440 --> 00:27:03.510 align:start position:0%
doing why don't you just give me all of
the<00:27:01.600><c> arguments</c><00:27:02.159><c> that</c><00:27:02.320><c> you</c><00:27:02.559><c> that</c><00:27:02.799><c> i</c><00:27:03.039><c> need</c><00:27:03.360><c> to</c>

00:27:03.510 --> 00:27:03.520 align:start position:0%
the arguments that you that i need to
 

00:27:03.520 --> 00:27:05.590 align:start position:0%
the arguments that you that i need to
actually<00:27:03.840><c> construct</c><00:27:04.480><c> a</c><00:27:04.640><c> vector3</c>

00:27:05.590 --> 00:27:05.600 align:start position:0%
actually construct a vector3
 

00:27:05.600 --> 00:27:07.830 align:start position:0%
actually construct a vector3
and<00:27:05.919><c> i'll</c><00:27:06.080><c> do</c><00:27:06.320><c> the</c><00:27:06.400><c> construction</c><00:27:07.279><c> right</c><00:27:07.520><c> there</c>

00:27:07.830 --> 00:27:07.840 align:start position:0%
and i'll do the construction right there
 

00:27:07.840 --> 00:27:10.230 align:start position:0%
and i'll do the construction right there
in<00:27:08.080><c> place</c><00:27:08.559><c> in</c><00:27:08.799><c> my</c><00:27:09.039><c> data</c><00:27:09.360><c> block</c><00:27:09.679><c> that's</c><00:27:09.919><c> what</c><00:27:10.080><c> in</c>

00:27:10.230 --> 00:27:10.240 align:start position:0%
in place in my data block that's what in
 

00:27:10.240 --> 00:27:11.269 align:start position:0%
in place in my data block that's what in
placeback<00:27:10.720><c> does</c>

00:27:11.269 --> 00:27:11.279 align:start position:0%
placeback does
 

00:27:11.279 --> 00:27:13.110 align:start position:0%
placeback does
so<00:27:11.440><c> in</c><00:27:11.520><c> other</c><00:27:11.679><c> words</c><00:27:11.919><c> if</c><00:27:12.080><c> we</c><00:27:12.320><c> were</c><00:27:12.480><c> to</c><00:27:12.640><c> rewrite</c>

00:27:13.110 --> 00:27:13.120 align:start position:0%
so in other words if we were to rewrite
 

00:27:13.120 --> 00:27:15.029 align:start position:0%
so in other words if we were to rewrite
this<00:27:13.360><c> to</c><00:27:13.520><c> be</c><00:27:13.840><c> in</c><00:27:13.919><c> place</c><00:27:14.320><c> back</c>

00:27:15.029 --> 00:27:15.039 align:start position:0%
this to be in place back
 

00:27:15.039 --> 00:27:17.750 align:start position:0%
this to be in place back
it<00:27:15.200><c> would</c><00:27:15.520><c> just</c><00:27:15.760><c> not</c><00:27:16.000><c> take</c><00:27:16.320><c> this</c><00:27:16.559><c> in</c><00:27:16.799><c> at</c><00:27:17.039><c> all</c><00:27:17.600><c> it</c>

00:27:17.750 --> 00:27:17.760 align:start position:0%
it would just not take this in at all it
 

00:27:17.760 --> 00:27:18.950 align:start position:0%
it would just not take this in at all it
would<00:27:18.000><c> literally</c><00:27:18.559><c> just</c>

00:27:18.950 --> 00:27:18.960 align:start position:0%
would literally just
 

00:27:18.960 --> 00:27:21.350 align:start position:0%
would literally just
take<00:27:19.200><c> a</c><00:27:19.440><c> list</c><00:27:19.679><c> of</c><00:27:19.919><c> arguments</c><00:27:20.559><c> in</c><00:27:20.799><c> so</c><00:27:21.039><c> it</c><00:27:21.200><c> would</c>

00:27:21.350 --> 00:27:21.360 align:start position:0%
take a list of arguments in so it would
 

00:27:21.360 --> 00:27:22.549 align:start position:0%
take a list of arguments in so it would
look<00:27:21.600><c> something</c>

00:27:22.549 --> 00:27:22.559 align:start position:0%
look something
 

00:27:22.559 --> 00:27:25.510 align:start position:0%
look something
like<00:27:23.200><c> this</c><00:27:24.000><c> and</c><00:27:24.240><c> for</c><00:27:24.399><c> this</c><00:27:24.640><c> one</c><00:27:24.960><c> well</c><00:27:25.200><c> it</c><00:27:25.279><c> would</c>

00:27:25.510 --> 00:27:25.520 align:start position:0%
like this and for this one well it would
 

00:27:25.520 --> 00:27:25.990 align:start position:0%
like this and for this one well it would
just

00:27:25.990 --> 00:27:26.000 align:start position:0%
just
 

00:27:26.000 --> 00:27:27.269 align:start position:0%
just
look<00:27:26.159><c> like</c><00:27:26.399><c> nothing</c><00:27:26.720><c> at</c><00:27:26.880><c> all</c><00:27:27.039><c> it</c><00:27:27.120><c> wouldn't</c>

00:27:27.269 --> 00:27:27.279 align:start position:0%
look like nothing at all it wouldn't
 

00:27:27.279 --> 00:27:29.350 align:start position:0%
look like nothing at all it wouldn't
take<00:27:27.520><c> any</c><00:27:27.679><c> arguments</c><00:27:28.240><c> because</c><00:27:28.480><c> we</c><00:27:28.640><c> want</c><00:27:28.799><c> to</c>

00:27:29.350 --> 00:27:29.360 align:start position:0%
take any arguments because we want to
 

00:27:29.360 --> 00:27:31.669 align:start position:0%
take any arguments because we want to
construct<00:27:29.840><c> it</c><00:27:29.919><c> with</c><00:27:30.080><c> a</c><00:27:30.240><c> default</c><00:27:30.640><c> constructor</c>

00:27:31.669 --> 00:27:31.679 align:start position:0%
construct it with a default constructor
 

00:27:31.679 --> 00:27:33.029 align:start position:0%
construct it with a default constructor
so<00:27:31.919><c> how</c><00:27:32.159><c> do</c><00:27:32.320><c> we</c><00:27:32.559><c> make</c>

00:27:33.029 --> 00:27:33.039 align:start position:0%
so how do we make
 

00:27:33.039 --> 00:27:34.870 align:start position:0%
so how do we make
this<00:27:33.360><c> work</c><00:27:33.679><c> well</c><00:27:34.000><c> we</c><00:27:34.080><c> have</c><00:27:34.240><c> to</c><00:27:34.320><c> use</c><00:27:34.480><c> variatic</c>

00:27:34.870 --> 00:27:34.880 align:start position:0%
this work well we have to use variatic
 

00:27:34.880 --> 00:27:36.310 align:start position:0%
this work well we have to use variatic
templates<00:27:35.360><c> which</c><00:27:35.520><c> of</c><00:27:35.600><c> course</c><00:27:35.760><c> are</c><00:27:35.919><c> everyone's</c>

00:27:36.310 --> 00:27:36.320 align:start position:0%
templates which of course are everyone's
 

00:27:36.320 --> 00:27:37.990 align:start position:0%
templates which of course are everyone's
favorite<00:27:36.640><c> templates</c><00:27:37.120><c> who</c><00:27:37.360><c> gets</c><00:27:37.520><c> confused</c><00:27:37.840><c> by</c>

00:27:37.990 --> 00:27:38.000 align:start position:0%
favorite templates who gets confused by
 

00:27:38.000 --> 00:27:39.909 align:start position:0%
favorite templates who gets confused by
those<00:27:38.320><c> am</c><00:27:38.480><c> i</c><00:27:38.559><c> right</c><00:27:38.799><c> but</c><00:27:38.960><c> in</c><00:27:39.120><c> all</c><00:27:39.279><c> seriousness</c>

00:27:39.909 --> 00:27:39.919 align:start position:0%
those am i right but in all seriousness
 

00:27:39.919 --> 00:27:41.830 align:start position:0%
those am i right but in all seriousness
is<00:27:40.159><c> really</c><00:27:40.480><c> not</c><00:27:40.720><c> that</c><00:27:40.880><c> difficult</c><00:27:41.440><c> what</c><00:27:41.679><c> we'll</c>

00:27:41.830 --> 00:27:41.840 align:start position:0%
is really not that difficult what we'll
 

00:27:41.840 --> 00:27:42.470 align:start position:0%
is really not that difficult what we'll
do<00:27:42.080><c> here</c>

00:27:42.470 --> 00:27:42.480 align:start position:0%
do here
 

00:27:42.480 --> 00:27:45.190 align:start position:0%
do here
is<00:27:42.640><c> we'll</c><00:27:42.960><c> write</c><00:27:43.200><c> a</c><00:27:43.279><c> template</c><00:27:44.159><c> which</c><00:27:44.399><c> takes</c><00:27:44.880><c> in</c>

00:27:45.190 --> 00:27:45.200 align:start position:0%
is we'll write a template which takes in
 

00:27:45.200 --> 00:27:45.590 align:start position:0%
is we'll write a template which takes in
a

00:27:45.590 --> 00:27:45.600 align:start position:0%
a
 

00:27:45.600 --> 00:27:47.350 align:start position:0%
a
variable<00:27:46.000><c> number</c><00:27:46.399><c> of</c><00:27:46.640><c> args</c><00:27:46.960><c> which</c><00:27:47.120><c> we</c><00:27:47.200><c> will</c>

00:27:47.350 --> 00:27:47.360 align:start position:0%
variable number of args which we will
 

00:27:47.360 --> 00:27:49.110 align:start position:0%
variable number of args which we will
call<00:27:47.600><c> args</c><00:27:48.000><c> because</c><00:27:48.159><c> that's</c><00:27:48.399><c> a</c><00:27:48.480><c> good</c><00:27:48.640><c> name</c><00:27:48.880><c> for</c>

00:27:49.110 --> 00:27:49.120 align:start position:0%
call args because that's a good name for
 

00:27:49.120 --> 00:27:49.990 align:start position:0%
call args because that's a good name for
it

00:27:49.990 --> 00:27:50.000 align:start position:0%
it
 

00:27:50.000 --> 00:27:51.990 align:start position:0%
it
we'll<00:27:50.159><c> actually</c><00:27:50.480><c> return</c><00:27:51.039><c> a</c><00:27:51.200><c> t</c><00:27:51.440><c> reference</c><00:27:51.760><c> here</c>

00:27:51.990 --> 00:27:52.000 align:start position:0%
we'll actually return a t reference here
 

00:27:52.000 --> 00:27:53.029 align:start position:0%
we'll actually return a t reference here
because<00:27:52.240><c> since</c><00:27:52.399><c> we're</c><00:27:52.559><c> constructing</c>

00:27:53.029 --> 00:27:53.039 align:start position:0%
because since we're constructing
 

00:27:53.039 --> 00:27:54.630 align:start position:0%
because since we're constructing
something<00:27:53.440><c> in</c><00:27:53.600><c> place</c><00:27:53.919><c> it's</c><00:27:54.080><c> not</c><00:27:54.159><c> really</c><00:27:54.399><c> that</c>

00:27:54.630 --> 00:27:54.640 align:start position:0%
something in place it's not really that
 

00:27:54.640 --> 00:27:56.549 align:start position:0%
something in place it's not really that
easy<00:27:54.880><c> for</c><00:27:54.960><c> us</c><00:27:55.120><c> to</c><00:27:55.200><c> get</c><00:27:55.360><c> that</c><00:27:55.600><c> object</c><00:27:56.000><c> back</c>

00:27:56.549 --> 00:27:56.559 align:start position:0%
easy for us to get that object back
 

00:27:56.559 --> 00:27:58.950 align:start position:0%
easy for us to get that object back
so<00:27:56.799><c> usually</c><00:27:57.200><c> these</c><00:27:57.360><c> functions</c><00:27:57.760><c> return</c><00:27:58.399><c> a</c><00:27:58.720><c> t</c>

00:27:58.950 --> 00:27:58.960 align:start position:0%
so usually these functions return a t
 

00:27:58.960 --> 00:28:00.710 align:start position:0%
so usually these functions return a t
reference<00:27:59.520><c> i'll</c><00:27:59.679><c> call</c><00:27:59.919><c> it</c><00:28:00.000><c> in</c><00:28:00.159><c> place</c><00:28:00.399><c> back</c><00:28:00.640><c> of</c>

00:28:00.710 --> 00:28:00.720 align:start position:0%
reference i'll call it in place back of
 

00:28:00.720 --> 00:28:02.070 align:start position:0%
reference i'll call it in place back of
course<00:28:01.039><c> and</c><00:28:01.200><c> now</c><00:28:01.360><c> we'll</c><00:28:01.520><c> just</c><00:28:01.679><c> take</c>

00:28:02.070 --> 00:28:02.080 align:start position:0%
course and now we'll just take
 

00:28:02.080 --> 00:28:04.230 align:start position:0%
course and now we'll just take
in<00:28:02.320><c> all</c><00:28:02.480><c> of</c><00:28:02.720><c> our</c><00:28:03.039><c> arguments</c><00:28:03.520><c> here</c><00:28:03.760><c> now</c><00:28:04.000><c> i</c><00:28:04.080><c> might</c>

00:28:04.230 --> 00:28:04.240 align:start position:0%
in all of our arguments here now i might
 

00:28:04.240 --> 00:28:05.510 align:start position:0%
in all of our arguments here now i might
make<00:28:04.399><c> a</c><00:28:04.480><c> video</c><00:28:04.799><c> in</c><00:28:04.880><c> the</c><00:28:04.960><c> future</c><00:28:05.279><c> about</c>

00:28:05.510 --> 00:28:05.520 align:start position:0%
make a video in the future about
 

00:28:05.520 --> 00:28:07.350 align:start position:0%
make a video in the future about
variatic<00:28:06.000><c> templates</c><00:28:06.559><c> and</c><00:28:06.720><c> when</c><00:28:06.880><c> i</c><00:28:06.960><c> do</c><00:28:07.200><c> i'll</c>

00:28:07.350 --> 00:28:07.360 align:start position:0%
variatic templates and when i do i'll
 

00:28:07.360 --> 00:28:08.870 align:start position:0%
variatic templates and when i do i'll
expand<00:28:07.679><c> a</c><00:28:07.760><c> lot</c><00:28:08.000><c> more</c><00:28:08.240><c> on</c><00:28:08.320><c> them</c><00:28:08.559><c> because</c>

00:28:08.870 --> 00:28:08.880 align:start position:0%
expand a lot more on them because
 

00:28:08.880 --> 00:28:10.149 align:start position:0%
expand a lot more on them because
honestly<00:28:09.360><c> they</c><00:28:09.600><c> definitely</c>

00:28:10.149 --> 00:28:10.159 align:start position:0%
honestly they definitely
 

00:28:10.159 --> 00:28:12.389 align:start position:0%
honestly they definitely
fill<00:28:10.399><c> up</c><00:28:10.480><c> a</c><00:28:10.640><c> video</c><00:28:11.279><c> so</c><00:28:11.440><c> we'll</c><00:28:11.600><c> make</c><00:28:11.840><c> sure</c><00:28:12.159><c> that</c>

00:28:12.389 --> 00:28:12.399 align:start position:0%
fill up a video so we'll make sure that
 

00:28:12.399 --> 00:28:14.950 align:start position:0%
fill up a video so we'll make sure that
we<00:28:12.880><c> have</c><00:28:13.120><c> our</c><00:28:13.279><c> same</c><00:28:13.520><c> reallocation</c><00:28:14.320><c> behavior</c>

00:28:14.950 --> 00:28:14.960 align:start position:0%
we have our same reallocation behavior
 

00:28:14.960 --> 00:28:18.470 align:start position:0%
we have our same reallocation behavior
and<00:28:15.039><c> then</c><00:28:15.360><c> we'll</c><00:28:15.600><c> do</c><00:28:15.919><c> m</c><00:28:16.159><c> data</c><00:28:16.799><c> m</c><00:28:17.039><c> size</c><00:28:17.600><c> equals</c><00:28:18.080><c> t</c>

00:28:18.470 --> 00:28:18.480 align:start position:0%
and then we'll do m data m size equals t
 

00:28:18.480 --> 00:28:21.029 align:start position:0%
and then we'll do m data m size equals t
so<00:28:18.640><c> we're</c><00:28:18.799><c> constructing</c><00:28:19.600><c> a</c><00:28:19.840><c> t</c><00:28:20.159><c> here</c><00:28:20.720><c> and</c><00:28:20.880><c> what</c>

00:28:21.029 --> 00:28:21.039 align:start position:0%
so we're constructing a t here and what
 

00:28:21.039 --> 00:28:21.669 align:start position:0%
so we're constructing a t here and what
we'll<00:28:21.279><c> do</c>

00:28:21.669 --> 00:28:21.679 align:start position:0%
we'll do
 

00:28:21.679 --> 00:28:24.470 align:start position:0%
we'll do
is<00:28:22.159><c> forward</c><00:28:22.640><c> all</c><00:28:22.880><c> of</c><00:28:22.960><c> our</c><00:28:23.200><c> arguments</c><00:28:24.000><c> to</c><00:28:24.320><c> the</c>

00:28:24.470 --> 00:28:24.480 align:start position:0%
is forward all of our arguments to the
 

00:28:24.480 --> 00:28:26.310 align:start position:0%
is forward all of our arguments to the
constructor<00:28:25.120><c> but</c><00:28:25.360><c> we're</c><00:28:25.520><c> going</c><00:28:25.760><c> to</c>

00:28:26.310 --> 00:28:26.320 align:start position:0%
constructor but we're going to
 

00:28:26.320 --> 00:28:28.549 align:start position:0%
constructor but we're going to
add<00:28:26.480><c> a</c><00:28:26.559><c> little</c><00:28:26.799><c> triple</c><00:28:27.120><c> dot</c><00:28:27.360><c> here</c><00:28:27.840><c> to</c><00:28:28.080><c> actually</c>

00:28:28.549 --> 00:28:28.559 align:start position:0%
add a little triple dot here to actually
 

00:28:28.559 --> 00:28:30.310 align:start position:0%
add a little triple dot here to actually
unpack<00:28:29.120><c> these</c><00:28:29.360><c> arguments</c><00:28:29.919><c> because</c><00:28:30.159><c> we</c>

00:28:30.310 --> 00:28:30.320 align:start position:0%
unpack these arguments because we
 

00:28:30.320 --> 00:28:32.070 align:start position:0%
unpack these arguments because we
basically<00:28:30.720><c> want</c><00:28:30.880><c> to</c><00:28:31.039><c> now</c><00:28:31.279><c> say</c><00:28:31.440><c> that</c><00:28:31.600><c> okay</c><00:28:31.919><c> all</c>

00:28:32.070 --> 00:28:32.080 align:start position:0%
basically want to now say that okay all
 

00:28:32.080 --> 00:28:33.510 align:start position:0%
basically want to now say that okay all
these<00:28:32.159><c> variatic</c><00:28:32.559><c> template</c><00:28:32.960><c> arguments</c><00:28:33.360><c> that</c>

00:28:33.510 --> 00:28:33.520 align:start position:0%
these variatic template arguments that
 

00:28:33.520 --> 00:28:34.950 align:start position:0%
these variatic template arguments that
we've<00:28:33.760><c> passed</c><00:28:34.159><c> over</c><00:28:34.480><c> here</c>

00:28:34.950 --> 00:28:34.960 align:start position:0%
we've passed over here
 

00:28:34.960 --> 00:28:37.669 align:start position:0%
we've passed over here
i<00:28:35.120><c> want</c><00:28:35.279><c> to</c><00:28:35.679><c> expand</c><00:28:36.159><c> them</c><00:28:36.480><c> so</c><00:28:36.640><c> that</c><00:28:36.880><c> t</c><00:28:37.200><c> gets</c><00:28:37.520><c> the</c>

00:28:37.669 --> 00:28:37.679 align:start position:0%
i want to expand them so that t gets the
 

00:28:37.679 --> 00:28:39.990 align:start position:0%
i want to expand them so that t gets the
correct<00:28:38.080><c> argument</c><00:28:38.480><c> so</c><00:28:38.640><c> for</c><00:28:38.799><c> example</c><00:28:39.200><c> with</c><00:28:39.440><c> 2</c><00:28:39.679><c> 3</c>

00:28:39.990 --> 00:28:40.000 align:start position:0%
correct argument so for example with 2 3
 

00:28:40.000 --> 00:28:42.549 align:start position:0%
correct argument so for example with 2 3
4<00:28:40.559><c> i</c><00:28:40.720><c> would</c><00:28:40.880><c> expect</c><00:28:41.440><c> to</c><00:28:41.600><c> get</c><00:28:41.840><c> three</c><00:28:42.159><c> floats</c>

00:28:42.549 --> 00:28:42.559 align:start position:0%
4 i would expect to get three floats
 

00:28:42.559 --> 00:28:43.029 align:start position:0%
4 i would expect to get three floats
like<00:28:42.720><c> that</c>

00:28:43.029 --> 00:28:43.039 align:start position:0%
like that
 

00:28:43.039 --> 00:28:44.789 align:start position:0%
like that
and<00:28:43.120><c> that's</c><00:28:43.360><c> what</c><00:28:43.520><c> we'll</c><00:28:43.760><c> get</c><00:28:44.240><c> and</c><00:28:44.399><c> of</c><00:28:44.480><c> course</c>

00:28:44.789 --> 00:28:44.799 align:start position:0%
and that's what we'll get and of course
 

00:28:44.799 --> 00:28:46.389 align:start position:0%
and that's what we'll get and of course
if<00:28:44.960><c> we</c><00:28:45.120><c> specify</c><00:28:45.600><c> something</c><00:28:45.760><c> like</c><00:28:45.919><c> two</c><00:28:46.080><c> floats</c>

00:28:46.389 --> 00:28:46.399 align:start position:0%
if we specify something like two floats
 

00:28:46.399 --> 00:28:47.750 align:start position:0%
if we specify something like two floats
something<00:28:46.640><c> that</c><00:28:46.799><c> isn't</c><00:28:46.960><c> compatible</c><00:28:47.360><c> with</c><00:28:47.520><c> a</c><00:28:47.600><c> t</c>

00:28:47.750 --> 00:28:47.760 align:start position:0%
something that isn't compatible with a t
 

00:28:47.760 --> 00:28:48.389 align:start position:0%
something that isn't compatible with a t
constructor

00:28:48.389 --> 00:28:48.399 align:start position:0%
constructor
 

00:28:48.399 --> 00:28:50.389 align:start position:0%
constructor
it's<00:28:48.640><c> not</c><00:28:48.880><c> going</c><00:28:49.120><c> to</c><00:28:49.520><c> work</c><00:28:49.840><c> and</c><00:28:50.000><c> it</c><00:28:50.080><c> will</c><00:28:50.240><c> just</c>

00:28:50.389 --> 00:28:50.399 align:start position:0%
it's not going to work and it will just
 

00:28:50.399 --> 00:28:51.830 align:start position:0%
it's not going to work and it will just
give<00:28:50.559><c> us</c><00:28:50.720><c> a</c><00:28:50.799><c> compile</c><00:28:51.200><c> error</c>

00:28:51.830 --> 00:28:51.840 align:start position:0%
give us a compile error
 

00:28:51.840 --> 00:28:55.430 align:start position:0%
give us a compile error
okay<00:28:52.720><c> that's</c><00:28:53.440><c> actually</c><00:28:54.240><c> it</c><00:28:54.559><c> let's</c><00:28:54.880><c> not</c><00:28:55.039><c> forget</c>

00:28:55.430 --> 00:28:55.440 align:start position:0%
okay that's actually it let's not forget
 

00:28:55.440 --> 00:28:57.190 align:start position:0%
okay that's actually it let's not forget
a<00:28:55.600><c> semicolon</c><00:28:56.240><c> here</c><00:28:56.480><c> and</c><00:28:56.640><c> you</c><00:28:56.720><c> can</c><00:28:56.880><c> see</c><00:28:57.039><c> that</c>

00:28:57.190 --> 00:28:57.200 align:start position:0%
a semicolon here and you can see that
 

00:28:57.200 --> 00:28:59.110 align:start position:0%
a semicolon here and you can see that
our<00:28:57.360><c> code</c><00:28:57.760><c> looks</c><00:28:58.000><c> like</c><00:28:58.240><c> it</c><00:28:58.320><c> compiles</c>

00:28:59.110 --> 00:28:59.120 align:start position:0%
our code looks like it compiles
 

00:28:59.120 --> 00:29:00.950 align:start position:0%
our code looks like it compiles
let's<00:28:59.279><c> hit</c><00:28:59.520><c> f5</c><00:29:00.080><c> now</c><00:29:00.240><c> we</c><00:29:00.320><c> get</c><00:29:00.399><c> a</c><00:29:00.480><c> build</c><00:29:00.720><c> error</c>

00:29:00.950 --> 00:29:00.960 align:start position:0%
let's hit f5 now we get a build error
 

00:29:00.960 --> 00:29:02.549 align:start position:0%
let's hit f5 now we get a build error
because<00:29:01.200><c> it</c><00:29:01.279><c> looks</c><00:29:01.440><c> like</c><00:29:01.679><c> i</c><00:29:01.840><c> have</c><00:29:02.080><c> just</c>

00:29:02.549 --> 00:29:02.559 align:start position:0%
because it looks like i have just
 

00:29:02.559 --> 00:29:04.710 align:start position:0%
because it looks like i have just
not<00:29:02.880><c> called</c><00:29:03.200><c> my</c><00:29:03.440><c> variable</c><00:29:04.159><c> with</c><00:29:04.320><c> the</c><00:29:04.480><c> right</c>

00:29:04.710 --> 00:29:04.720 align:start position:0%
not called my variable with the right
 

00:29:04.720 --> 00:29:06.710 align:start position:0%
not called my variable with the right
name<00:29:05.120><c> and</c><00:29:05.279><c> of</c><00:29:05.360><c> course</c><00:29:05.600><c> we</c><00:29:05.760><c> forgot</c><00:29:06.080><c> to</c><00:29:06.320><c> actually</c>

00:29:06.710 --> 00:29:06.720 align:start position:0%
name and of course we forgot to actually
 

00:29:06.720 --> 00:29:08.870 align:start position:0%
name and of course we forgot to actually
return<00:29:07.200><c> this</c><00:29:07.679><c> so</c><00:29:07.840><c> how</c><00:29:08.000><c> we're</c><00:29:08.159><c> going</c><00:29:08.399><c> to</c><00:29:08.480><c> return</c>

00:29:08.870 --> 00:29:08.880 align:start position:0%
return this so how we're going to return
 

00:29:08.880 --> 00:29:10.389 align:start position:0%
return this so how we're going to return
this<00:29:09.279><c> we'll</c><00:29:09.440><c> simply</c><00:29:09.840><c> return</c>

00:29:10.389 --> 00:29:10.399 align:start position:0%
this we'll simply return
 

00:29:10.399 --> 00:29:13.669 align:start position:0%
this we'll simply return
m<00:29:10.559><c> data</c><00:29:11.279><c> at</c><00:29:11.520><c> m</c><00:29:11.840><c> size</c><00:29:12.559><c> not</c><00:29:12.960><c> forgetting</c><00:29:13.440><c> to</c>

00:29:13.669 --> 00:29:13.679 align:start position:0%
m data at m size not forgetting to
 

00:29:13.679 --> 00:29:14.950 align:start position:0%
m data at m size not forgetting to
increment<00:29:14.240><c> our</c><00:29:14.480><c> size</c>

00:29:14.950 --> 00:29:14.960 align:start position:0%
increment our size
 

00:29:14.960 --> 00:29:16.870 align:start position:0%
increment our size
because<00:29:15.600><c> of</c><00:29:15.679><c> course</c><00:29:15.919><c> we</c><00:29:16.080><c> have</c><00:29:16.320><c> just</c><00:29:16.559><c> added</c>

00:29:16.870 --> 00:29:16.880 align:start position:0%
because of course we have just added
 

00:29:16.880 --> 00:29:18.470 align:start position:0%
because of course we have just added
something<00:29:17.360><c> to</c><00:29:17.600><c> our</c><00:29:17.919><c> array</c>

00:29:18.470 --> 00:29:18.480 align:start position:0%
something to our array
 

00:29:18.480 --> 00:29:20.789 align:start position:0%
something to our array
or<00:29:18.559><c> to</c><00:29:18.799><c> our</c><00:29:18.960><c> vector</c><00:29:19.440><c> all</c><00:29:19.520><c> right</c><00:29:20.080><c> so</c><00:29:20.480><c> there</c><00:29:20.640><c> you</c>

00:29:20.789 --> 00:29:20.799 align:start position:0%
or to our vector all right so there you
 

00:29:20.799 --> 00:29:22.470 align:start position:0%
or to our vector all right so there you
go<00:29:21.120><c> we</c><00:29:21.200><c> have</c><00:29:21.360><c> move</c><00:29:21.679><c> destroy</c><00:29:22.080><c> move</c><00:29:22.240><c> move</c>

00:29:22.470 --> 00:29:22.480 align:start position:0%
go we have move destroy move move
 

00:29:22.480 --> 00:29:24.149 align:start position:0%
go we have move destroy move move
destroy<00:29:22.960><c> the</c><00:29:23.120><c> destroyers</c><00:29:23.679><c> are</c><00:29:23.840><c> happening</c>

00:29:24.149 --> 00:29:24.159 align:start position:0%
destroy the destroyers are happening
 

00:29:24.159 --> 00:29:25.669 align:start position:0%
destroy the destroyers are happening
because<00:29:24.399><c> we're</c><00:29:24.640><c> actually</c><00:29:24.880><c> releasing</c><00:29:25.279><c> the</c><00:29:25.440><c> old</c>

00:29:25.669 --> 00:29:25.679 align:start position:0%
because we're actually releasing the old
 

00:29:25.679 --> 00:29:27.590 align:start position:0%
because we're actually releasing the old
variables<00:29:26.240><c> the</c><00:29:26.480><c> old</c><00:29:26.720><c> vector</c><00:29:27.120><c> 3</c>

00:29:27.590 --> 00:29:27.600 align:start position:0%
variables the old vector 3
 

00:29:27.600 --> 00:29:30.070 align:start position:0%
variables the old vector 3
instances<00:29:28.240><c> when</c><00:29:28.399><c> we</c><00:29:28.559><c> actually</c><00:29:29.120><c> move</c><00:29:29.520><c> them</c><00:29:29.919><c> but</c>

00:29:30.070 --> 00:29:30.080 align:start position:0%
instances when we actually move them but
 

00:29:30.080 --> 00:29:30.870 align:start position:0%
instances when we actually move them but
otherwise

00:29:30.870 --> 00:29:30.880 align:start position:0%
otherwise
 

00:29:30.880 --> 00:29:32.149 align:start position:0%
otherwise
this<00:29:31.120><c> is</c><00:29:31.200><c> now</c><00:29:31.360><c> looking</c><00:29:31.679><c> pretty</c><00:29:31.840><c> cool</c><00:29:32.080><c> and</c>

00:29:32.149 --> 00:29:32.159 align:start position:0%
this is now looking pretty cool and
 

00:29:32.159 --> 00:29:33.669 align:start position:0%
this is now looking pretty cool and
we're<00:29:32.320><c> constructing</c><00:29:32.799><c> all</c><00:29:32.880><c> of</c><00:29:33.039><c> our</c><00:29:33.120><c> memory</c><00:29:33.520><c> in</c>

00:29:33.669 --> 00:29:33.679 align:start position:0%
we're constructing all of our memory in
 

00:29:33.679 --> 00:29:34.789 align:start position:0%
we're constructing all of our memory in
place<00:29:34.000><c> which</c><00:29:34.320><c> of</c><00:29:34.399><c> course</c>

00:29:34.789 --> 00:29:34.799 align:start position:0%
place which of course
 

00:29:34.799 --> 00:29:37.110 align:start position:0%
place which of course
is<00:29:35.120><c> great</c><00:29:35.600><c> now</c><00:29:35.760><c> the</c><00:29:36.000><c> last</c><00:29:36.320><c> thing</c><00:29:36.559><c> i'm</c><00:29:36.720><c> going</c><00:29:36.960><c> to</c>

00:29:37.110 --> 00:29:37.120 align:start position:0%
is great now the last thing i'm going to
 

00:29:37.120 --> 00:29:39.029 align:start position:0%
is great now the last thing i'm going to
show<00:29:37.279><c> you</c><00:29:37.600><c> in</c><00:29:37.760><c> this</c><00:29:37.919><c> extremely</c><00:29:38.480><c> long</c><00:29:38.720><c> video</c>

00:29:39.029 --> 00:29:39.039 align:start position:0%
show you in this extremely long video
 

00:29:39.039 --> 00:29:39.590 align:start position:0%
show you in this extremely long video
now

00:29:39.590 --> 00:29:39.600 align:start position:0%
now
 

00:29:39.600 --> 00:29:42.070 align:start position:0%
now
is<00:29:39.840><c> what</c><00:29:40.000><c> happens</c><00:29:40.559><c> when</c><00:29:40.720><c> we</c><00:29:40.960><c> have</c><00:29:41.120><c> to</c><00:29:41.440><c> destroy</c>

00:29:42.070 --> 00:29:42.080 align:start position:0%
is what happens when we have to destroy
 

00:29:42.080 --> 00:29:42.870 align:start position:0%
is what happens when we have to destroy
everything

00:29:42.870 --> 00:29:42.880 align:start position:0%
everything
 

00:29:42.880 --> 00:29:44.710 align:start position:0%
everything
well<00:29:43.200><c> of</c><00:29:43.279><c> course</c><00:29:43.600><c> in</c><00:29:43.679><c> the</c><00:29:43.760><c> destructor</c><00:29:44.399><c> we</c><00:29:44.559><c> just</c>

00:29:44.710 --> 00:29:44.720 align:start position:0%
well of course in the destructor we just
 

00:29:44.720 --> 00:29:47.110 align:start position:0%
well of course in the destructor we just
need<00:29:44.880><c> to</c><00:29:45.039><c> make</c><00:29:45.279><c> sure</c><00:29:45.600><c> that</c><00:29:45.760><c> we</c><00:29:46.000><c> simply</c><00:29:46.480><c> delete</c>

00:29:47.110 --> 00:29:47.120 align:start position:0%
need to make sure that we simply delete
 

00:29:47.120 --> 00:29:49.350 align:start position:0%
need to make sure that we simply delete
mdata<00:29:47.840><c> it's</c><00:29:48.080><c> as</c><00:29:48.240><c> simple</c><00:29:48.559><c> as</c><00:29:48.720><c> that</c><00:29:48.960><c> make</c><00:29:49.120><c> sure</c>

00:29:49.350 --> 00:29:49.360 align:start position:0%
mdata it's as simple as that make sure
 

00:29:49.360 --> 00:29:50.149 align:start position:0%
mdata it's as simple as that make sure
you<00:29:49.520><c> use</c><00:29:49.840><c> the</c>

00:29:50.149 --> 00:29:50.159 align:start position:0%
you use the
 

00:29:50.159 --> 00:29:51.990 align:start position:0%
you use the
array<00:29:50.559><c> deletion</c><00:29:51.039><c> operator</c><00:29:51.440><c> here</c><00:29:51.600><c> to</c><00:29:51.760><c> make</c>

00:29:51.990 --> 00:29:52.000 align:start position:0%
array deletion operator here to make
 

00:29:52.000 --> 00:29:53.750 align:start position:0%
array deletion operator here to make
sure<00:29:52.159><c> that</c><00:29:52.399><c> it</c><00:29:52.640><c> both</c><00:29:52.880><c> deletes</c><00:29:53.279><c> the</c><00:29:53.440><c> entire</c>

00:29:53.750 --> 00:29:53.760 align:start position:0%
sure that it both deletes the entire
 

00:29:53.760 --> 00:29:53.990 align:start position:0%
sure that it both deletes the entire
block

00:29:53.990 --> 00:29:54.000 align:start position:0%
block
 

00:29:54.000 --> 00:29:55.909 align:start position:0%
block
of<00:29:54.080><c> memory</c><00:29:54.720><c> as</c><00:29:54.880><c> well</c><00:29:55.120><c> as</c><00:29:55.279><c> actually</c><00:29:55.600><c> calls</c><00:29:55.840><c> the</c>

00:29:55.909 --> 00:29:55.919 align:start position:0%
of memory as well as actually calls the
 

00:29:55.919 --> 00:29:57.669 align:start position:0%
of memory as well as actually calls the
destructor<00:29:56.480><c> of</c><00:29:56.720><c> each</c><00:29:56.880><c> element</c><00:29:57.279><c> here</c>

00:29:57.669 --> 00:29:57.679 align:start position:0%
destructor of each element here
 

00:29:57.679 --> 00:29:59.669 align:start position:0%
destructor of each element here
now<00:29:58.000><c> this</c><00:29:58.240><c> in</c><00:29:58.399><c> itself</c><00:29:58.880><c> by</c><00:29:59.039><c> the</c><00:29:59.120><c> way</c><00:29:59.360><c> is</c>

00:29:59.669 --> 00:29:59.679 align:start position:0%
now this in itself by the way is
 

00:29:59.679 --> 00:30:01.110 align:start position:0%
now this in itself by the way is
slightly<00:30:00.480><c> difficult</c>

00:30:01.110 --> 00:30:01.120 align:start position:0%
slightly difficult
 

00:30:01.120 --> 00:30:03.269 align:start position:0%
slightly difficult
because<00:30:01.760><c> at</c><00:30:01.919><c> the</c><00:30:02.000><c> moment</c><00:30:02.399><c> we're</c><00:30:02.559><c> not</c><00:30:02.799><c> holding</c>

00:30:03.269 --> 00:30:03.279 align:start position:0%
because at the moment we're not holding
 

00:30:03.279 --> 00:30:05.190 align:start position:0%
because at the moment we're not holding
actual<00:30:03.760><c> pointers</c><00:30:04.320><c> so</c><00:30:04.559><c> if</c><00:30:04.640><c> we</c><00:30:04.799><c> were</c>

00:30:05.190 --> 00:30:05.200 align:start position:0%
actual pointers so if we were
 

00:30:05.200 --> 00:30:07.669 align:start position:0%
actual pointers so if we were
holding<00:30:05.679><c> actual</c><00:30:06.159><c> pointers</c><00:30:06.720><c> it</c><00:30:06.880><c> would</c><00:30:07.039><c> be</c><00:30:07.279><c> in</c>

00:30:07.669 --> 00:30:07.679 align:start position:0%
holding actual pointers it would be in
 

00:30:07.679 --> 00:30:09.029 align:start position:0%
holding actual pointers it would be in
it<00:30:07.760><c> would</c><00:30:07.919><c> be</c><00:30:08.159><c> important</c><00:30:08.559><c> for</c><00:30:08.720><c> you</c><00:30:08.880><c> to</c>

00:30:09.029 --> 00:30:09.039 align:start position:0%
it would be important for you to
 

00:30:09.039 --> 00:30:10.070 align:start position:0%
it would be important for you to
actually<00:30:09.440><c> delete</c>

00:30:10.070 --> 00:30:10.080 align:start position:0%
actually delete
 

00:30:10.080 --> 00:30:12.149 align:start position:0%
actually delete
each<00:30:10.399><c> and</c><00:30:10.559><c> every</c><00:30:10.880><c> pointer</c><00:30:11.279><c> there</c><00:30:11.840><c> if</c><00:30:12.000><c> you</c>

00:30:12.149 --> 00:30:12.159 align:start position:0%
each and every pointer there if you
 

00:30:12.159 --> 00:30:13.830 align:start position:0%
each and every pointer there if you
allocate<00:30:12.559><c> memory</c><00:30:12.960><c> every</c><00:30:13.120><c> time</c><00:30:13.279><c> you</c><00:30:13.440><c> in</c><00:30:13.600><c> place</c>

00:30:13.830 --> 00:30:13.840 align:start position:0%
allocate memory every time you in place
 

00:30:13.840 --> 00:30:14.950 align:start position:0%
allocate memory every time you in place
back<00:30:14.000><c> or</c><00:30:14.159><c> push</c><00:30:14.399><c> back</c>

00:30:14.950 --> 00:30:14.960 align:start position:0%
back or push back
 

00:30:14.960 --> 00:30:16.549 align:start position:0%
back or push back
however<00:30:15.520><c> if</c><00:30:15.679><c> you've</c><00:30:15.840><c> used</c><00:30:16.000><c> a</c><00:30:16.080><c> vector</c><00:30:16.320><c> class</c>

00:30:16.549 --> 00:30:16.559 align:start position:0%
however if you've used a vector class
 

00:30:16.559 --> 00:30:17.830 align:start position:0%
however if you've used a vector class
before<00:30:16.799><c> you</c><00:30:16.960><c> know</c><00:30:17.200><c> this</c><00:30:17.440><c> isn't</c><00:30:17.679><c> the</c>

00:30:17.830 --> 00:30:17.840 align:start position:0%
before you know this isn't the
 

00:30:17.840 --> 00:30:19.590 align:start position:0%
before you know this isn't the
responsibility<00:30:18.559><c> of</c><00:30:18.640><c> the</c><00:30:18.720><c> vector</c><00:30:18.960><c> class</c>

00:30:19.590 --> 00:30:19.600 align:start position:0%
responsibility of the vector class
 

00:30:19.600 --> 00:30:21.510 align:start position:0%
responsibility of the vector class
if<00:30:19.760><c> you</c><00:30:20.080><c> create</c><00:30:20.399><c> a</c><00:30:20.559><c> vector</c><00:30:20.960><c> with</c><00:30:21.120><c> a</c><00:30:21.200><c> bunch</c><00:30:21.360><c> of</c>

00:30:21.510 --> 00:30:21.520 align:start position:0%
if you create a vector with a bunch of
 

00:30:21.520 --> 00:30:22.950 align:start position:0%
if you create a vector with a bunch of
pointers<00:30:21.919><c> which</c><00:30:22.159><c> you</c><00:30:22.320><c> allocate</c><00:30:22.640><c> and</c><00:30:22.799><c> then</c>

00:30:22.950 --> 00:30:22.960 align:start position:0%
pointers which you allocate and then
 

00:30:22.960 --> 00:30:24.470 align:start position:0%
pointers which you allocate and then
transfer<00:30:23.279><c> ownership</c><00:30:23.600><c> to</c><00:30:23.760><c> the</c><00:30:23.840><c> vector</c><00:30:24.080><c> class</c>

00:30:24.470 --> 00:30:24.480 align:start position:0%
transfer ownership to the vector class
 

00:30:24.480 --> 00:30:26.389 align:start position:0%
transfer ownership to the vector class
is<00:30:24.559><c> your</c><00:30:24.880><c> responsibility</c><00:30:25.600><c> still</c><00:30:25.840><c> to</c><00:30:26.000><c> delete</c>

00:30:26.389 --> 00:30:26.399 align:start position:0%
is your responsibility still to delete
 

00:30:26.399 --> 00:30:27.909 align:start position:0%
is your responsibility still to delete
them<00:30:26.640><c> so</c><00:30:26.799><c> this</c><00:30:27.039><c> is</c><00:30:27.120><c> not</c><00:30:27.360><c> something</c>

00:30:27.909 --> 00:30:27.919 align:start position:0%
them so this is not something
 

00:30:27.919 --> 00:30:29.430 align:start position:0%
them so this is not something
that<00:30:28.080><c> the</c><00:30:28.159><c> vector</c><00:30:28.480><c> class</c><00:30:28.720><c> should</c><00:30:28.880><c> be</c><00:30:28.960><c> handling</c>

00:30:29.430 --> 00:30:29.440 align:start position:0%
that the vector class should be handling
 

00:30:29.440 --> 00:30:30.950 align:start position:0%
that the vector class should be handling
therefore<00:30:30.240><c> this</c><00:30:30.559><c> is</c>

00:30:30.950 --> 00:30:30.960 align:start position:0%
therefore this is
 

00:30:30.960 --> 00:30:32.789 align:start position:0%
therefore this is
totally<00:30:31.520><c> fine</c><00:30:32.000><c> speaking</c><00:30:32.320><c> of</c><00:30:32.399><c> calling</c><00:30:32.720><c> the</c>

00:30:32.789 --> 00:30:32.799 align:start position:0%
totally fine speaking of calling the
 

00:30:32.799 --> 00:30:34.549 align:start position:0%
totally fine speaking of calling the
destructor<00:30:33.360><c> what</c><00:30:33.520><c> if</c><00:30:33.679><c> we</c><00:30:33.919><c> don't</c><00:30:34.240><c> want</c><00:30:34.480><c> to</c>

00:30:34.549 --> 00:30:34.559 align:start position:0%
destructor what if we don't want to
 

00:30:34.559 --> 00:30:36.310 align:start position:0%
destructor what if we don't want to
delete<00:30:34.880><c> this</c><00:30:35.039><c> data</c><00:30:35.360><c> block</c><00:30:35.600><c> what</c><00:30:35.760><c> if</c><00:30:35.919><c> we</c><00:30:36.000><c> simply</c>

00:30:36.310 --> 00:30:36.320 align:start position:0%
delete this data block what if we simply
 

00:30:36.320 --> 00:30:37.510 align:start position:0%
delete this data block what if we simply
want<00:30:36.559><c> to</c><00:30:36.640><c> resize</c><00:30:37.200><c> it</c>

00:30:37.510 --> 00:30:37.520 align:start position:0%
want to resize it
 

00:30:37.520 --> 00:30:40.630 align:start position:0%
want to resize it
by<00:30:37.760><c> using</c><00:30:38.080><c> a</c><00:30:38.159><c> function</c><00:30:38.640><c> such</c><00:30:38.960><c> as</c><00:30:39.360><c> pop</c><00:30:39.760><c> back</c><00:30:40.480><c> in</c>

00:30:40.630 --> 00:30:40.640 align:start position:0%
by using a function such as pop back in
 

00:30:40.640 --> 00:30:42.230 align:start position:0%
by using a function such as pop back in
that<00:30:40.880><c> case</c><00:30:41.200><c> what</c><00:30:41.440><c> exactly</c><00:30:41.760><c> happens</c><00:30:42.080><c> well</c>

00:30:42.230 --> 00:30:42.240 align:start position:0%
that case what exactly happens well
 

00:30:42.240 --> 00:30:44.470 align:start position:0%
that case what exactly happens well
obviously<00:30:42.640><c> size</c><00:30:42.960><c> goes</c><00:30:43.279><c> down</c><00:30:43.600><c> as</c><00:30:43.840><c> long</c><00:30:44.000><c> as</c><00:30:44.159><c> size</c>

00:30:44.470 --> 00:30:44.480 align:start position:0%
obviously size goes down as long as size
 

00:30:44.480 --> 00:30:46.549 align:start position:0%
obviously size goes down as long as size
is<00:30:44.640><c> greater</c><00:30:44.880><c> than</c><00:30:45.039><c> zero</c><00:30:45.440><c> we</c><00:30:45.600><c> don't</c><00:30:45.760><c> want</c><00:30:45.919><c> to</c>

00:30:46.549 --> 00:30:46.559 align:start position:0%
is greater than zero we don't want to
 

00:30:46.559 --> 00:30:48.389 align:start position:0%
is greater than zero we don't want to
actually<00:30:46.960><c> do</c><00:30:47.200><c> any</c><00:30:47.360><c> kind</c><00:30:47.520><c> of</c><00:30:47.679><c> resizing</c><00:30:48.320><c> if</c>

00:30:48.389 --> 00:30:48.399 align:start position:0%
actually do any kind of resizing if
 

00:30:48.399 --> 00:30:49.909 align:start position:0%
actually do any kind of resizing if
we're<00:30:48.640><c> at</c><00:30:48.799><c> zero</c><00:30:49.039><c> there's</c><00:30:49.200><c> nothing</c><00:30:49.440><c> to</c><00:30:49.600><c> pop</c>

00:30:49.909 --> 00:30:49.919 align:start position:0%
we're at zero there's nothing to pop
 

00:30:49.919 --> 00:30:50.389 align:start position:0%
we're at zero there's nothing to pop
back

00:30:50.389 --> 00:30:50.399 align:start position:0%
back
 

00:30:50.399 --> 00:30:51.750 align:start position:0%
back
but<00:30:50.559><c> the</c><00:30:50.720><c> other</c><00:30:50.880><c> important</c><00:30:51.200><c> thing</c><00:30:51.440><c> that</c><00:30:51.600><c> we</c>

00:30:51.750 --> 00:30:51.760 align:start position:0%
but the other important thing that we
 

00:30:51.760 --> 00:30:53.430 align:start position:0%
but the other important thing that we
need<00:30:52.000><c> to</c><00:30:52.240><c> actually</c><00:30:52.720><c> do</c><00:30:52.960><c> here</c>

00:30:53.430 --> 00:30:53.440 align:start position:0%
need to actually do here
 

00:30:53.440 --> 00:30:55.830 align:start position:0%
need to actually do here
is<00:30:53.679><c> called</c><00:30:54.000><c> the</c><00:30:54.159><c> destructor</c><00:30:55.120><c> and</c><00:30:55.279><c> so</c><00:30:55.520><c> to</c><00:30:55.679><c> do</c>

00:30:55.830 --> 00:30:55.840 align:start position:0%
is called the destructor and so to do
 

00:30:55.840 --> 00:30:56.870 align:start position:0%
is called the destructor and so to do
that<00:30:56.240><c> after</c><00:30:56.559><c> we</c>

00:30:56.870 --> 00:30:56.880 align:start position:0%
that after we
 

00:30:56.880 --> 00:30:58.870 align:start position:0%
that after we
actually<00:30:57.120><c> reduce</c><00:30:57.519><c> the</c><00:30:57.600><c> size</c><00:30:58.159><c> we'll</c><00:30:58.399><c> say</c><00:30:58.720><c> m</c>

00:30:58.870 --> 00:30:58.880 align:start position:0%
actually reduce the size we'll say m
 

00:30:58.880 --> 00:31:00.630 align:start position:0%
actually reduce the size we'll say m
data<00:30:59.279><c> at</c><00:30:59.519><c> m</c><00:30:59.760><c> size</c><00:31:00.159><c> which</c>

00:31:00.630 --> 00:31:00.640 align:start position:0%
data at m size which
 

00:31:00.640 --> 00:31:02.470 align:start position:0%
data at m size which
should<00:31:00.880><c> still</c><00:31:01.200><c> be</c><00:31:01.440><c> a</c><00:31:01.600><c> valid</c><00:31:02.000><c> element</c><00:31:02.399><c> of</c>

00:31:02.470 --> 00:31:02.480 align:start position:0%
should still be a valid element of
 

00:31:02.480 --> 00:31:04.710 align:start position:0%
should still be a valid element of
course<00:31:03.200><c> will</c><00:31:03.519><c> explicitly</c><00:31:04.320><c> call</c><00:31:04.640><c> the</c>

00:31:04.710 --> 00:31:04.720 align:start position:0%
course will explicitly call the
 

00:31:04.720 --> 00:31:06.149 align:start position:0%
course will explicitly call the
destructor<00:31:05.440><c> like</c><00:31:05.679><c> so</c>

00:31:06.149 --> 00:31:06.159 align:start position:0%
destructor like so
 

00:31:06.159 --> 00:31:08.870 align:start position:0%
destructor like so
this<00:31:06.320><c> will</c><00:31:06.559><c> effectively</c><00:31:07.440><c> nullify</c><00:31:08.080><c> our</c><00:31:08.320><c> object</c>

00:31:08.870 --> 00:31:08.880 align:start position:0%
this will effectively nullify our object
 

00:31:08.880 --> 00:31:10.789 align:start position:0%
this will effectively nullify our object
and<00:31:09.039><c> release</c><00:31:09.360><c> any</c><00:31:09.600><c> resources</c><00:31:10.159><c> that</c><00:31:10.240><c> it</c><00:31:10.399><c> might</c>

00:31:10.789 --> 00:31:10.799 align:start position:0%
and release any resources that it might
 

00:31:10.799 --> 00:31:11.590 align:start position:0%
and release any resources that it might
own

00:31:11.590 --> 00:31:11.600 align:start position:0%
own
 

00:31:11.600 --> 00:31:13.909 align:start position:0%
own
because<00:31:12.240><c> from</c><00:31:12.559><c> this</c><00:31:12.799><c> point</c><00:31:13.120><c> forward</c><00:31:13.679><c> you</c>

00:31:13.909 --> 00:31:13.919 align:start position:0%
because from this point forward you
 

00:31:13.919 --> 00:31:15.190 align:start position:0%
because from this point forward you
should<00:31:14.240><c> no</c><00:31:14.480><c> longer</c>

00:31:15.190 --> 00:31:15.200 align:start position:0%
should no longer
 

00:31:15.200 --> 00:31:17.509 align:start position:0%
should no longer
have<00:31:15.600><c> any</c><00:31:15.840><c> kind</c><00:31:16.080><c> of</c><00:31:16.240><c> reference</c><00:31:16.640><c> to</c><00:31:16.799><c> t</c><00:31:17.360><c> now</c>

00:31:17.509 --> 00:31:17.519 align:start position:0%
have any kind of reference to t now
 

00:31:17.519 --> 00:31:19.029 align:start position:0%
have any kind of reference to t now
there<00:31:17.760><c> is</c>

00:31:19.029 --> 00:31:19.039 align:start position:0%
there is
 

00:31:19.039 --> 00:31:20.710 align:start position:0%
there is
you<00:31:19.279><c> you</c><00:31:19.440><c> should</c><00:31:19.679><c> not</c><00:31:19.840><c> you</c><00:31:20.000><c> should</c><00:31:20.159><c> never</c><00:31:20.480><c> have</c>

00:31:20.710 --> 00:31:20.720 align:start position:0%
you you should not you should never have
 

00:31:20.720 --> 00:31:22.230 align:start position:0%
you you should not you should never have
any<00:31:20.960><c> kind</c><00:31:21.120><c> of</c><00:31:21.279><c> reference</c><00:31:21.679><c> to</c><00:31:21.760><c> this</c>

00:31:22.230 --> 00:31:22.240 align:start position:0%
any kind of reference to this
 

00:31:22.240 --> 00:31:23.909 align:start position:0%
any kind of reference to this
and<00:31:22.320><c> then</c><00:31:22.559><c> finally</c><00:31:22.960><c> since</c><00:31:23.200><c> we're</c><00:31:23.440><c> on</c><00:31:23.600><c> a</c><00:31:23.679><c> roll</c>

00:31:23.909 --> 00:31:23.919 align:start position:0%
and then finally since we're on a roll
 

00:31:23.919 --> 00:31:25.669 align:start position:0%
and then finally since we're on a roll
of<00:31:24.080><c> deleting</c><00:31:24.559><c> things</c><00:31:24.799><c> here</c><00:31:25.039><c> let's</c><00:31:25.279><c> also</c><00:31:25.519><c> write</c>

00:31:25.669 --> 00:31:25.679 align:start position:0%
of deleting things here let's also write
 

00:31:25.679 --> 00:31:26.710 align:start position:0%
of deleting things here let's also write
a<00:31:25.760><c> clear</c><00:31:26.080><c> function</c>

00:31:26.710 --> 00:31:26.720 align:start position:0%
a clear function
 

00:31:26.720 --> 00:31:28.950 align:start position:0%
a clear function
this<00:31:26.960><c> is</c><00:31:27.120><c> going</c><00:31:27.279><c> to</c><00:31:27.440><c> do</c><00:31:27.600><c> the</c><00:31:27.760><c> same</c><00:31:28.159><c> thing</c><00:31:28.559><c> as</c>

00:31:28.950 --> 00:31:28.960 align:start position:0%
this is going to do the same thing as
 

00:31:28.960 --> 00:31:30.870 align:start position:0%
this is going to do the same thing as
pop<00:31:29.279><c> back</c><00:31:29.600><c> essentially</c><00:31:30.080><c> and</c><00:31:30.159><c> you</c><00:31:30.320><c> could</c><00:31:30.480><c> just</c>

00:31:30.870 --> 00:31:30.880 align:start position:0%
pop back essentially and you could just
 

00:31:30.880 --> 00:31:32.630 align:start position:0%
pop back essentially and you could just
have<00:31:31.039><c> a</c><00:31:31.200><c> while</c><00:31:31.440><c> loop</c><00:31:31.679><c> that</c><00:31:31.840><c> just</c><00:31:32.080><c> pops</c><00:31:32.320><c> back</c>

00:31:32.630 --> 00:31:32.640 align:start position:0%
have a while loop that just pops back
 

00:31:32.640 --> 00:31:34.389 align:start position:0%
have a while loop that just pops back
until<00:31:32.960><c> size</c><00:31:33.279><c> is</c><00:31:33.360><c> zero</c><00:31:33.679><c> but</c><00:31:33.840><c> what</c><00:31:34.080><c> i'm</c><00:31:34.159><c> going</c><00:31:34.240><c> to</c>

00:31:34.389 --> 00:31:34.399 align:start position:0%
until size is zero but what i'm going to
 

00:31:34.399 --> 00:31:35.990 align:start position:0%
until size is zero but what i'm going to
do<00:31:34.559><c> is</c><00:31:34.720><c> just</c><00:31:34.960><c> take</c><00:31:35.120><c> the</c><00:31:35.279><c> more</c><00:31:35.440><c> simple</c><00:31:35.679><c> approach</c>

00:31:35.990 --> 00:31:36.000 align:start position:0%
do is just take the more simple approach
 

00:31:36.000 --> 00:31:37.190 align:start position:0%
do is just take the more simple approach
write<00:31:36.159><c> a</c><00:31:36.320><c> for</c><00:31:36.480><c> loop</c><00:31:36.720><c> which</c><00:31:36.880><c> calls</c><00:31:37.120><c> the</c>

00:31:37.190 --> 00:31:37.200 align:start position:0%
write a for loop which calls the
 

00:31:37.200 --> 00:31:38.070 align:start position:0%
write a for loop which calls the
destructor

00:31:38.070 --> 00:31:38.080 align:start position:0%
destructor
 

00:31:38.080 --> 00:31:40.230 align:start position:0%
destructor
of<00:31:38.399><c> every</c><00:31:38.880><c> single</c><00:31:39.279><c> element</c><00:31:39.679><c> here</c><00:31:39.919><c> and</c><00:31:40.000><c> then</c>

00:31:40.230 --> 00:31:40.240 align:start position:0%
of every single element here and then
 

00:31:40.240 --> 00:31:42.630 align:start position:0%
of every single element here and then
i'm<00:31:40.320><c> going</c><00:31:40.399><c> to</c><00:31:40.480><c> set</c><00:31:40.720><c> size</c><00:31:41.039><c> to</c><00:31:41.279><c> zero</c>

00:31:42.630 --> 00:31:42.640 align:start position:0%
i'm going to set size to zero
 

00:31:42.640 --> 00:31:44.950 align:start position:0%
i'm going to set size to zero
and<00:31:43.120><c> there</c><00:31:43.279><c> we</c><00:31:43.519><c> go</c><00:31:43.760><c> so</c><00:31:43.919><c> let's</c><00:31:44.320><c> let's</c><00:31:44.559><c> try</c><00:31:44.720><c> this</c>

00:31:44.950 --> 00:31:44.960 align:start position:0%
and there we go so let's let's try this
 

00:31:44.960 --> 00:31:46.710 align:start position:0%
and there we go so let's let's try this
out<00:31:45.120><c> now</c><00:31:45.360><c> let's</c><00:31:45.600><c> go</c><00:31:45.760><c> back</c><00:31:45.919><c> to</c><00:31:46.080><c> main</c>

00:31:46.710 --> 00:31:46.720 align:start position:0%
out now let's go back to main
 

00:31:46.720 --> 00:31:48.950 align:start position:0%
out now let's go back to main
i'm<00:31:46.880><c> going</c><00:31:47.120><c> to</c><00:31:47.360><c> add</c><00:31:47.760><c> maybe</c><00:31:48.080><c> a</c><00:31:48.320><c> few</c><00:31:48.640><c> more</c>

00:31:48.950 --> 00:31:48.960 align:start position:0%
i'm going to add maybe a few more
 

00:31:48.960 --> 00:31:51.269 align:start position:0%
i'm going to add maybe a few more
vectors<00:31:49.440><c> here</c><00:31:49.679><c> which</c><00:31:49.919><c> i'll</c><00:31:50.240><c> kind</c><00:31:50.480><c> of</c>

00:31:51.269 --> 00:31:51.279 align:start position:0%
vectors here which i'll kind of
 

00:31:51.279 --> 00:31:54.310 align:start position:0%
vectors here which i'll kind of
randomize<00:31:52.480><c> a</c><00:31:52.720><c> little</c><00:31:52.960><c> bit</c><00:31:53.200><c> here</c><00:31:53.519><c> just</c><00:31:53.760><c> to</c><00:31:54.080><c> have</c>

00:31:54.310 --> 00:31:54.320 align:start position:0%
randomize a little bit here just to have
 

00:31:54.320 --> 00:31:56.310 align:start position:0%
randomize a little bit here just to have
something<00:31:54.799><c> a</c><00:31:54.880><c> little</c><00:31:55.120><c> bit</c><00:31:55.279><c> more</c><00:31:55.600><c> interesting</c>

00:31:56.310 --> 00:31:56.320 align:start position:0%
something a little bit more interesting
 

00:31:56.320 --> 00:31:58.950 align:start position:0%
something a little bit more interesting
and<00:31:56.399><c> then</c><00:31:56.640><c> what</c><00:31:56.799><c> i'll</c><00:31:56.960><c> do</c><00:31:57.360><c> is</c><00:31:57.679><c> i'll</c><00:31:58.240><c> pop</c><00:31:58.480><c> back</c><00:31:58.880><c> a</c>

00:31:58.950 --> 00:31:58.960 align:start position:0%
and then what i'll do is i'll pop back a
 

00:31:58.960 --> 00:32:00.710 align:start position:0%
and then what i'll do is i'll pop back a
few<00:31:59.120><c> of</c><00:31:59.200><c> these</c><00:31:59.360><c> so</c><00:31:59.519><c> maybe</c><00:31:59.760><c> let's</c><00:32:00.000><c> do</c><00:32:00.240><c> pop</c><00:32:00.480><c> back</c>

00:32:00.710 --> 00:32:00.720 align:start position:0%
few of these so maybe let's do pop back
 

00:32:00.720 --> 00:32:01.750 align:start position:0%
few of these so maybe let's do pop back
in<00:32:00.799><c> the</c><00:32:00.960><c> middle</c><00:32:01.200><c> here</c>

00:32:01.750 --> 00:32:01.760 align:start position:0%
in the middle here
 

00:32:01.760 --> 00:32:04.549 align:start position:0%
in the middle here
let's<00:32:02.000><c> pop</c><00:32:02.240><c> back</c><00:32:02.559><c> two</c><00:32:02.880><c> things</c><00:32:03.840><c> then</c><00:32:04.080><c> let's</c>

00:32:04.549 --> 00:32:04.559 align:start position:0%
let's pop back two things then let's
 

00:32:04.559 --> 00:32:05.669 align:start position:0%
let's pop back two things then let's
maybe

00:32:05.669 --> 00:32:05.679 align:start position:0%
maybe
 

00:32:05.679 --> 00:32:09.110 align:start position:0%
maybe
clear<00:32:06.559><c> this</c><00:32:07.279><c> then</c><00:32:07.600><c> let's</c><00:32:08.000><c> maybe</c>

00:32:09.110 --> 00:32:09.120 align:start position:0%
clear this then let's maybe
 

00:32:09.120 --> 00:32:11.350 align:start position:0%
clear this then let's maybe
you<00:32:09.200><c> know</c><00:32:09.519><c> in</c><00:32:09.679><c> place</c><00:32:10.000><c> back</c><00:32:10.240><c> these</c><00:32:10.480><c> two</c><00:32:10.720><c> again</c>

00:32:11.350 --> 00:32:11.360 align:start position:0%
you know in place back these two again
 

00:32:11.360 --> 00:32:13.190 align:start position:0%
you know in place back these two again
i'll<00:32:11.600><c> add</c><00:32:11.840><c> some</c><00:32:12.080><c> print</c><00:32:12.399><c> vectors</c>

00:32:13.190 --> 00:32:13.200 align:start position:0%
i'll add some print vectors
 

00:32:13.200 --> 00:32:15.430 align:start position:0%
i'll add some print vectors
basically<00:32:13.679><c> everywhere</c><00:32:14.240><c> here</c><00:32:14.799><c> so</c><00:32:14.960><c> that</c><00:32:15.120><c> we</c><00:32:15.200><c> can</c>

00:32:15.430 --> 00:32:15.440 align:start position:0%
basically everywhere here so that we can
 

00:32:15.440 --> 00:32:16.389 align:start position:0%
basically everywhere here so that we can
see<00:32:15.600><c> what</c><00:32:15.840><c> happens</c>

00:32:16.389 --> 00:32:16.399 align:start position:0%
see what happens
 

00:32:16.399 --> 00:32:18.870 align:start position:0%
see what happens
after<00:32:17.039><c> all</c><00:32:17.120><c> of</c><00:32:17.200><c> these</c><00:32:17.440><c> stages</c><00:32:17.840><c> let's</c><00:32:18.080><c> hit</c><00:32:18.240><c> f5</c>

00:32:18.870 --> 00:32:18.880 align:start position:0%
after all of these stages let's hit f5
 

00:32:18.880 --> 00:32:20.389 align:start position:0%
after all of these stages let's hit f5
okay<00:32:19.120><c> well</c><00:32:19.279><c> we</c><00:32:19.440><c> didn't</c><00:32:19.600><c> crash</c><00:32:19.919><c> that's</c><00:32:20.159><c> good</c>

00:32:20.389 --> 00:32:20.399 align:start position:0%
okay well we didn't crash that's good
 

00:32:20.399 --> 00:32:21.029 align:start position:0%
okay well we didn't crash that's good
news

00:32:21.029 --> 00:32:21.039 align:start position:0%
news
 

00:32:21.039 --> 00:32:22.230 align:start position:0%
news
let's<00:32:21.200><c> take</c><00:32:21.360><c> a</c><00:32:21.440><c> look</c><00:32:21.519><c> at</c><00:32:21.600><c> what</c><00:32:21.760><c> happened</c><00:32:22.080><c> here</c>

00:32:22.230 --> 00:32:22.240 align:start position:0%
let's take a look at what happened here
 

00:32:22.240 --> 00:32:24.230 align:start position:0%
let's take a look at what happened here
because<00:32:22.640><c> there's</c><00:32:22.960><c> a</c><00:32:23.039><c> lot</c><00:32:23.360><c> of</c><00:32:23.519><c> stuff</c><00:32:23.919><c> moved</c>

00:32:24.230 --> 00:32:24.240 align:start position:0%
because there's a lot of stuff moved
 

00:32:24.240 --> 00:32:26.230 align:start position:0%
because there's a lot of stuff moved
forward<00:32:25.120><c> don't</c><00:32:25.279><c> really</c><00:32:25.440><c> care</c><00:32:25.600><c> about</c><00:32:26.000><c> those</c>

00:32:26.230 --> 00:32:26.240 align:start position:0%
forward don't really care about those
 

00:32:26.240 --> 00:32:27.990 align:start position:0%
forward don't really care about those
things<00:32:26.559><c> too</c><00:32:26.720><c> much</c><00:32:26.960><c> we</c><00:32:27.120><c> have</c><00:32:27.360><c> our</c><00:32:27.679><c> one</c><00:32:27.600><c> one</c>

00:32:27.990 --> 00:32:28.000 align:start position:0%
things too much we have our one one
 

00:32:28.000 --> 00:32:29.509 align:start position:0%
things too much we have our one one
one<00:32:28.159><c> which</c><00:32:28.320><c> is</c><00:32:28.399><c> our</c><00:32:28.559><c> scalar</c><00:32:28.880><c> constructor</c><00:32:29.279><c> here</c>

00:32:29.509 --> 00:32:29.519 align:start position:0%
one which is our scalar constructor here
 

00:32:29.519 --> 00:32:31.350 align:start position:0%
one which is our scalar constructor here
two<00:32:29.760><c> three</c><00:32:30.000><c> four</c><00:32:30.240><c> one</c><00:32:30.480><c> three</c><00:32:30.720><c> four</c><00:32:30.960><c> and</c><00:32:31.120><c> our</c>

00:32:31.350 --> 00:32:31.360 align:start position:0%
two three four one three four and our
 

00:32:31.360 --> 00:32:32.950 align:start position:0%
two three four one three four and our
empty<00:32:31.679><c> vector</c><00:32:32.000><c> that</c><00:32:32.159><c> looks</c><00:32:32.399><c> good</c>

00:32:32.950 --> 00:32:32.960 align:start position:0%
empty vector that looks good
 

00:32:32.960 --> 00:32:34.630 align:start position:0%
empty vector that looks good
then<00:32:33.120><c> we</c><00:32:33.279><c> print</c><00:32:33.519><c> it</c><00:32:33.679><c> then</c><00:32:33.840><c> we've</c><00:32:34.080><c> popped</c><00:32:34.399><c> back</c>

00:32:34.630 --> 00:32:34.640 align:start position:0%
then we print it then we've popped back
 

00:32:34.640 --> 00:32:36.070 align:start position:0%
then we print it then we've popped back
two<00:32:34.880><c> elements</c><00:32:35.279><c> here</c><00:32:35.440><c> which</c><00:32:35.679><c> we've</c>

00:32:36.070 --> 00:32:36.080 align:start position:0%
two elements here which we've
 

00:32:36.080 --> 00:32:37.750 align:start position:0%
two elements here which we've
destroyed<00:32:36.559><c> both</c><00:32:36.799><c> of</c><00:32:36.960><c> we're</c><00:32:37.120><c> then</c><00:32:37.360><c> printing</c>

00:32:37.750 --> 00:32:37.760 align:start position:0%
destroyed both of we're then printing
 

00:32:37.760 --> 00:32:39.350 align:start position:0%
destroyed both of we're then printing
our<00:32:37.919><c> vector</c><00:32:38.240><c> which</c><00:32:38.399><c> as</c><00:32:38.559><c> you</c><00:32:38.640><c> can</c><00:32:38.799><c> see</c><00:32:38.960><c> gives</c><00:32:39.200><c> us</c>

00:32:39.350 --> 00:32:39.360 align:start position:0%
our vector which as you can see gives us
 

00:32:39.360 --> 00:32:40.950 align:start position:0%
our vector which as you can see gives us
these<00:32:39.600><c> two</c><00:32:39.840><c> again</c><00:32:40.159><c> because</c><00:32:40.480><c> those</c><00:32:40.720><c> are</c><00:32:40.799><c> the</c>

00:32:40.950 --> 00:32:40.960 align:start position:0%
these two again because those are the
 

00:32:40.960 --> 00:32:42.789 align:start position:0%
these two again because those are the
ones<00:32:41.200><c> that</c><00:32:41.440><c> remain</c><00:32:41.840><c> inside</c><00:32:42.080><c> the</c><00:32:42.240><c> vector</c><00:32:42.640><c> we're</c>

00:32:42.789 --> 00:32:42.799 align:start position:0%
ones that remain inside the vector we're
 

00:32:42.799 --> 00:32:44.549 align:start position:0%
ones that remain inside the vector we're
then<00:32:43.039><c> in</c><00:32:43.200><c> placing</c><00:32:43.519><c> back</c><00:32:43.760><c> two</c><00:32:43.919><c> more</c><00:32:44.159><c> elements</c>

00:32:44.549 --> 00:32:44.559 align:start position:0%
then in placing back two more elements
 

00:32:44.559 --> 00:32:44.950 align:start position:0%
then in placing back two more elements
here

00:32:44.950 --> 00:32:44.960 align:start position:0%
here
 

00:32:44.960 --> 00:32:46.789 align:start position:0%
here
and<00:32:45.120><c> of</c><00:32:45.200><c> course</c><00:32:45.600><c> here</c><00:32:45.760><c> they</c><00:32:45.919><c> are</c><00:32:46.159><c> added</c><00:32:46.559><c> at</c><00:32:46.640><c> the</c>

00:32:46.789 --> 00:32:46.799 align:start position:0%
and of course here they are added at the
 

00:32:46.799 --> 00:32:48.549 align:start position:0%
and of course here they are added at the
end<00:32:47.039><c> of</c><00:32:47.200><c> our</c><00:32:47.360><c> vector</c><00:32:47.840><c> we're</c><00:32:48.080><c> then</c><00:32:48.240><c> doing</c><00:32:48.480><c> a</c>

00:32:48.549 --> 00:32:48.559 align:start position:0%
end of our vector we're then doing a
 

00:32:48.559 --> 00:32:50.710 align:start position:0%
end of our vector we're then doing a
clear<00:32:48.960><c> which</c><00:32:49.200><c> is</c><00:32:49.360><c> destroying</c><00:32:49.919><c> all</c><00:32:50.159><c> of</c><00:32:50.320><c> these</c>

00:32:50.710 --> 00:32:50.720 align:start position:0%
clear which is destroying all of these
 

00:32:50.720 --> 00:32:52.310 align:start position:0%
clear which is destroying all of these
four<00:32:50.960><c> vectors</c><00:32:51.360><c> that</c><00:32:51.440><c> we</c><00:32:51.600><c> have</c><00:32:51.760><c> here</c><00:32:52.080><c> and</c><00:32:52.159><c> then</c>

00:32:52.310 --> 00:32:52.320 align:start position:0%
four vectors that we have here and then
 

00:32:52.320 --> 00:32:53.990 align:start position:0%
four vectors that we have here and then
finally<00:32:52.720><c> we're</c><00:32:52.960><c> doing</c><00:32:53.120><c> a</c><00:32:53.279><c> move</c><00:32:53.440><c> destroy</c><00:32:53.840><c> move</c>

00:32:53.990 --> 00:32:54.000 align:start position:0%
finally we're doing a move destroy move
 

00:32:54.000 --> 00:32:55.110 align:start position:0%
finally we're doing a move destroy move
destroy<00:32:54.559><c> as</c><00:32:54.799><c> we</c>

00:32:55.110 --> 00:32:55.120 align:start position:0%
destroy as we
 

00:32:55.120 --> 00:32:57.190 align:start position:0%
destroy as we
push<00:32:55.440><c> back</c><00:32:55.760><c> two</c><00:32:56.000><c> more</c><00:32:56.240><c> elements</c><00:32:56.799><c> there</c><00:32:56.960><c> they</c>

00:32:57.190 --> 00:32:57.200 align:start position:0%
push back two more elements there they
 

00:32:57.200 --> 00:32:58.389 align:start position:0%
push back two more elements there they
are<00:32:57.360><c> and</c><00:32:57.440><c> then</c><00:32:57.600><c> we're</c><00:32:57.760><c> actually</c><00:32:58.080><c> printing</c>

00:32:58.389 --> 00:32:58.399 align:start position:0%
are and then we're actually printing
 

00:32:58.399 --> 00:32:59.269 align:start position:0%
are and then we're actually printing
that<00:32:58.720><c> vector</c>

00:32:59.269 --> 00:32:59.279 align:start position:0%
that vector
 

00:32:59.279 --> 00:33:01.669 align:start position:0%
that vector
twice<00:32:59.840><c> now</c><00:33:00.080><c> these</c><00:33:00.399><c> move</c><00:33:00.720><c> destroyers</c><00:33:01.440><c> here</c>

00:33:01.669 --> 00:33:01.679 align:start position:0%
twice now these move destroyers here
 

00:33:01.679 --> 00:33:03.350 align:start position:0%
twice now these move destroyers here
from<00:33:01.840><c> the</c><00:33:02.080><c> place</c><00:33:02.320><c> back</c><00:33:02.640><c> are</c><00:33:02.720><c> actually</c><00:33:03.039><c> coming</c>

00:33:03.350 --> 00:33:03.360 align:start position:0%
from the place back are actually coming
 

00:33:03.360 --> 00:33:04.950 align:start position:0%
from the place back are actually coming
from<00:33:03.519><c> this</c><00:33:03.679><c> function</c><00:33:04.159><c> itself</c><00:33:04.559><c> because</c><00:33:04.799><c> you</c>

00:33:04.950 --> 00:33:04.960 align:start position:0%
from this function itself because you
 

00:33:04.960 --> 00:33:06.710 align:start position:0%
from this function itself because you
can<00:33:05.120><c> see</c><00:33:05.360><c> that</c><00:33:05.600><c> it's</c><00:33:05.760><c> actually</c><00:33:06.159><c> constructing</c>

00:33:06.710 --> 00:33:06.720 align:start position:0%
can see that it's actually constructing
 

00:33:06.720 --> 00:33:08.470 align:start position:0%
can see that it's actually constructing
a<00:33:06.799><c> temporary</c><00:33:07.279><c> here</c><00:33:07.519><c> which</c><00:33:07.679><c> is</c><00:33:07.840><c> then</c><00:33:08.080><c> moving</c>

00:33:08.470 --> 00:33:08.480 align:start position:0%
a temporary here which is then moving
 

00:33:08.480 --> 00:33:10.070 align:start position:0%
a temporary here which is then moving
into<00:33:08.799><c> here</c><00:33:09.120><c> and</c><00:33:09.200><c> we</c><00:33:09.360><c> can</c><00:33:09.519><c> of</c><00:33:09.600><c> course</c><00:33:09.840><c> check</c>

00:33:10.070 --> 00:33:10.080 align:start position:0%
into here and we can of course check
 

00:33:10.080 --> 00:33:11.750 align:start position:0%
into here and we can of course check
that<00:33:10.320><c> if</c><00:33:10.480><c> we</c><00:33:10.559><c> hit</c><00:33:10.799><c> f5</c><00:33:11.200><c> and</c><00:33:11.279><c> take</c><00:33:11.440><c> a</c><00:33:11.519><c> look</c><00:33:11.679><c> at</c>

00:33:11.750 --> 00:33:11.760 align:start position:0%
that if we hit f5 and take a look at
 

00:33:11.760 --> 00:33:12.230 align:start position:0%
that if we hit f5 and take a look at
this

00:33:12.230 --> 00:33:12.240 align:start position:0%
this
 

00:33:12.240 --> 00:33:15.110 align:start position:0%
this
f10<00:33:12.720><c> is</c><00:33:13.120><c> is</c><00:33:13.279><c> doing</c><00:33:13.600><c> a</c><00:33:13.840><c> move</c><00:33:14.159><c> destroy</c><00:33:14.799><c> as</c><00:33:14.960><c> you</c>

00:33:15.110 --> 00:33:15.120 align:start position:0%
f10 is is doing a move destroy as you
 

00:33:15.120 --> 00:33:15.750 align:start position:0%
f10 is is doing a move destroy as you
can<00:33:15.279><c> see</c>

00:33:15.750 --> 00:33:15.760 align:start position:0%
can see
 

00:33:15.760 --> 00:33:17.669 align:start position:0%
can see
now<00:33:16.000><c> technically</c><00:33:16.640><c> if</c><00:33:16.799><c> you're</c><00:33:17.120><c> a</c><00:33:17.360><c> keen</c>

00:33:17.669 --> 00:33:17.679 align:start position:0%
now technically if you're a keen
 

00:33:17.679 --> 00:33:19.269 align:start position:0%
now technically if you're a keen
observer<00:33:18.559><c> you</c><00:33:18.799><c> may</c>

00:33:19.269 --> 00:33:19.279 align:start position:0%
observer you may
 

00:33:19.279 --> 00:33:21.909 align:start position:0%
observer you may
in<00:33:19.440><c> fact</c><00:33:19.679><c> deduce</c><00:33:20.080><c> that</c><00:33:20.320><c> well</c><00:33:20.799><c> is</c><00:33:20.960><c> that</c><00:33:21.519><c> any</c>

00:33:21.909 --> 00:33:21.919 align:start position:0%
in fact deduce that well is that any
 

00:33:21.919 --> 00:33:23.750 align:start position:0%
in fact deduce that well is that any
better<00:33:22.320><c> than</c><00:33:22.720><c> this</c><00:33:23.039><c> pushback</c>

00:33:23.750 --> 00:33:23.760 align:start position:0%
better than this pushback
 

00:33:23.760 --> 00:33:25.990 align:start position:0%
better than this pushback
r-value<00:33:24.240><c> reference</c><00:33:24.799><c> function</c><00:33:25.200><c> because</c><00:33:25.679><c> isn't</c>

00:33:25.990 --> 00:33:26.000 align:start position:0%
r-value reference function because isn't
 

00:33:26.000 --> 00:33:27.590 align:start position:0%
r-value reference function because isn't
it<00:33:26.240><c> just</c><00:33:26.480><c> doing</c><00:33:26.799><c> a</c><00:33:26.960><c> move</c>

00:33:27.590 --> 00:33:27.600 align:start position:0%
it just doing a move
 

00:33:27.600 --> 00:33:30.230 align:start position:0%
it just doing a move
at<00:33:27.760><c> the</c><00:33:27.919><c> end</c><00:33:28.080><c> of</c><00:33:28.159><c> the</c><00:33:28.240><c> day</c><00:33:28.559><c> anyway</c><00:33:29.440><c> even</c><00:33:29.840><c> if</c><00:33:30.080><c> it</c>

00:33:30.230 --> 00:33:30.240 align:start position:0%
at the end of the day anyway even if it
 

00:33:30.240 --> 00:33:32.149 align:start position:0%
at the end of the day anyway even if it
is<00:33:30.480><c> in</c><00:33:30.640><c> fact</c><00:33:30.960><c> constructing</c><00:33:31.519><c> the</c><00:33:31.679><c> object</c>

00:33:32.149 --> 00:33:32.159 align:start position:0%
is in fact constructing the object
 

00:33:32.159 --> 00:33:34.310 align:start position:0%
is in fact constructing the object
in<00:33:32.720><c> this</c><00:33:32.960><c> stack</c><00:33:33.279><c> frame</c><00:33:33.600><c> instead</c><00:33:33.840><c> of</c><00:33:33.919><c> the</c><00:33:34.080><c> main</c>

00:33:34.310 --> 00:33:34.320 align:start position:0%
in this stack frame instead of the main
 

00:33:34.320 --> 00:33:35.269 align:start position:0%
in this stack frame instead of the main
one<00:33:34.960><c> and</c>

00:33:35.269 --> 00:33:35.279 align:start position:0%
one and
 

00:33:35.279 --> 00:33:37.190 align:start position:0%
one and
you<00:33:35.440><c> would</c><00:33:35.519><c> be</c><00:33:35.679><c> correct</c><00:33:36.320><c> how</c><00:33:36.480><c> would</c><00:33:36.640><c> you</c><00:33:36.880><c> solve</c>

00:33:37.190 --> 00:33:37.200 align:start position:0%
you would be correct how would you solve
 

00:33:37.200 --> 00:33:39.110 align:start position:0%
you would be correct how would you solve
that<00:33:37.519><c> leave</c><00:33:37.760><c> a</c><00:33:37.840><c> comment</c><00:33:38.240><c> below</c><00:33:38.640><c> this</c><00:33:38.880><c> is</c>

00:33:39.110 --> 00:33:39.120 align:start position:0%
that leave a comment below this is
 

00:33:39.120 --> 00:33:40.310 align:start position:0%
that leave a comment below this is
like<00:33:39.360><c> a</c><00:33:39.440><c> little</c><00:33:39.600><c> bit</c><00:33:39.679><c> of</c><00:33:39.760><c> an</c><00:33:39.840><c> advanced</c>

00:33:40.310 --> 00:33:40.320 align:start position:0%
like a little bit of an advanced
 

00:33:40.320 --> 00:33:42.070 align:start position:0%
like a little bit of an advanced
exercise<00:33:40.799><c> perhaps</c><00:33:41.360><c> and</c><00:33:41.519><c> the</c><00:33:41.679><c> answer</c><00:33:42.000><c> of</c>

00:33:42.070 --> 00:33:42.080 align:start position:0%
exercise perhaps and the answer of
 

00:33:42.080 --> 00:33:44.230 align:start position:0%
exercise perhaps and the answer of
course<00:33:42.399><c> is</c><00:33:42.640><c> well</c><00:33:42.960><c> i</c><00:33:43.200><c> want</c><00:33:43.440><c> to</c><00:33:43.600><c> construct</c><00:33:44.080><c> my</c>

00:33:44.230 --> 00:33:44.240 align:start position:0%
course is well i want to construct my
 

00:33:44.240 --> 00:33:44.870 align:start position:0%
course is well i want to construct my
object

00:33:44.870 --> 00:33:44.880 align:start position:0%
object
 

00:33:44.880 --> 00:33:47.590 align:start position:0%
object
i<00:33:45.039><c> just</c><00:33:45.200><c> want</c><00:33:45.360><c> to</c><00:33:45.519><c> do</c><00:33:45.679><c> it</c><00:33:46.320><c> in</c><00:33:46.559><c> place</c><00:33:47.039><c> of</c><00:33:47.279><c> this</c>

00:33:47.590 --> 00:33:47.600 align:start position:0%
i just want to do it in place of this
 

00:33:47.600 --> 00:33:48.710 align:start position:0%
i just want to do it in place of this
actual<00:33:48.000><c> memory</c>

00:33:48.710 --> 00:33:48.720 align:start position:0%
actual memory
 

00:33:48.720 --> 00:33:50.630 align:start position:0%
actual memory
now<00:33:48.880><c> this</c><00:33:49.120><c> memory</c><00:33:49.600><c> exists</c><00:33:50.080><c> we</c><00:33:50.240><c> know</c><00:33:50.399><c> that</c><00:33:50.559><c> it</c>

00:33:50.630 --> 00:33:50.640 align:start position:0%
now this memory exists we know that it
 

00:33:50.640 --> 00:33:52.389 align:start position:0%
now this memory exists we know that it
exists<00:33:50.960><c> because</c><00:33:51.200><c> we've</c><00:33:51.519><c> actually</c><00:33:51.919><c> allocated</c>

00:33:52.389 --> 00:33:52.399 align:start position:0%
exists because we've actually allocated
 

00:33:52.399 --> 00:33:53.269 align:start position:0%
exists because we've actually allocated
that<00:33:52.559><c> memory</c>

00:33:53.269 --> 00:33:53.279 align:start position:0%
that memory
 

00:33:53.279 --> 00:33:54.950 align:start position:0%
that memory
so<00:33:53.440><c> now</c><00:33:53.600><c> it's</c><00:33:53.760><c> a</c><00:33:53.840><c> matter</c><00:33:54.080><c> of</c><00:33:54.320><c> well</c><00:33:54.640><c> instead</c><00:33:54.880><c> of</c>

00:33:54.950 --> 00:33:54.960 align:start position:0%
so now it's a matter of well instead of
 

00:33:54.960 --> 00:33:56.789 align:start position:0%
so now it's a matter of well instead of
constructing<00:33:55.440><c> this</c><00:33:55.679><c> object</c><00:33:56.000><c> on</c><00:33:56.159><c> the</c><00:33:56.240><c> stack</c><00:33:56.640><c> in</c>

00:33:56.789 --> 00:33:56.799 align:start position:0%
constructing this object on the stack in
 

00:33:56.799 --> 00:33:58.549 align:start position:0%
constructing this object on the stack in
a<00:33:56.880><c> place</c><00:33:57.200><c> back</c><00:33:57.440><c> and</c><00:33:57.519><c> then</c><00:33:57.760><c> moving</c><00:33:58.159><c> it</c><00:33:58.320><c> into</c>

00:33:58.549 --> 00:33:58.559 align:start position:0%
a place back and then moving it into
 

00:33:58.559 --> 00:33:59.990 align:start position:0%
a place back and then moving it into
mdata<00:33:59.120><c> storage</c>

00:33:59.990 --> 00:34:00.000 align:start position:0%
mdata storage
 

00:34:00.000 --> 00:34:01.830 align:start position:0%
mdata storage
how<00:34:00.159><c> about</c><00:34:00.320><c> you</c><00:34:00.399><c> just</c><00:34:00.559><c> construct</c><00:34:01.039><c> it</c><00:34:01.200><c> inside</c><00:34:01.600><c> m</c>

00:34:01.830 --> 00:34:01.840 align:start position:0%
how about you just construct it inside m
 

00:34:01.840 --> 00:34:03.990 align:start position:0%
how about you just construct it inside m
data<00:34:02.399><c> so</c><00:34:02.559><c> how</c><00:34:02.799><c> do</c><00:34:02.960><c> we</c><00:34:03.120><c> construct</c><00:34:03.600><c> things</c><00:34:03.919><c> in</c>

00:34:03.990 --> 00:34:04.000 align:start position:0%
data so how do we construct things in
 

00:34:04.000 --> 00:34:04.789 align:start position:0%
data so how do we construct things in
place

00:34:04.789 --> 00:34:04.799 align:start position:0%
place
 

00:34:04.799 --> 00:34:07.190 align:start position:0%
place
well<00:34:05.279><c> we</c><00:34:05.440><c> can</c><00:34:05.679><c> actually</c><00:34:06.000><c> use</c><00:34:06.240><c> the</c><00:34:06.480><c> placement</c>

00:34:07.190 --> 00:34:07.200 align:start position:0%
well we can actually use the placement
 

00:34:07.200 --> 00:34:08.230 align:start position:0%
well we can actually use the placement
new<00:34:07.519><c> operator</c>

00:34:08.230 --> 00:34:08.240 align:start position:0%
new operator
 

00:34:08.240 --> 00:34:09.750 align:start position:0%
new operator
now<00:34:08.399><c> and</c><00:34:08.560><c> you</c><00:34:08.639><c> might</c><00:34:08.800><c> be</c><00:34:08.960><c> scary</c><00:34:09.359><c> here</c><00:34:09.520><c> because</c>

00:34:09.750 --> 00:34:09.760 align:start position:0%
now and you might be scary here because
 

00:34:09.760 --> 00:34:11.109 align:start position:0%
now and you might be scary here because
you<00:34:09.919><c> might</c><00:34:10.079><c> associate</c><00:34:10.560><c> that</c><00:34:10.720><c> with</c><00:34:10.879><c> heap</c>

00:34:11.109 --> 00:34:11.119 align:start position:0%
you might associate that with heap
 

00:34:11.119 --> 00:34:11.909 align:start position:0%
you might associate that with heap
allocations

00:34:11.909 --> 00:34:11.919 align:start position:0%
allocations
 

00:34:11.919 --> 00:34:13.349 align:start position:0%
allocations
but<00:34:12.079><c> if</c><00:34:12.240><c> you</c><00:34:12.320><c> use</c><00:34:12.480><c> a</c><00:34:12.560><c> placement</c><00:34:12.879><c> new</c><00:34:13.119><c> you're</c>

00:34:13.349 --> 00:34:13.359 align:start position:0%
but if you use a placement new you're
 

00:34:13.359 --> 00:34:15.510 align:start position:0%
but if you use a placement new you're
providing<00:34:14.159><c> the</c><00:34:14.399><c> actual</c><00:34:14.720><c> memory</c><00:34:15.200><c> for</c><00:34:15.359><c> the</c>

00:34:15.510 --> 00:34:15.520 align:start position:0%
providing the actual memory for the
 

00:34:15.520 --> 00:34:17.190 align:start position:0%
providing the actual memory for the
object<00:34:15.919><c> to</c><00:34:16.000><c> be</c><00:34:16.159><c> constructed</c><00:34:16.639><c> in</c><00:34:16.800><c> which</c><00:34:17.040><c> is</c>

00:34:17.190 --> 00:34:17.200 align:start position:0%
object to be constructed in which is
 

00:34:17.200 --> 00:34:18.710 align:start position:0%
object to be constructed in which is
obviously<00:34:17.520><c> coincidentally</c><00:34:18.159><c> exactly</c><00:34:18.480><c> what</c><00:34:18.639><c> we</c>

00:34:18.710 --> 00:34:18.720 align:start position:0%
obviously coincidentally exactly what we
 

00:34:18.720 --> 00:34:20.069 align:start position:0%
obviously coincidentally exactly what we
want<00:34:18.960><c> here</c><00:34:19.200><c> so</c><00:34:19.359><c> what</c><00:34:19.520><c> we</c><00:34:19.599><c> can</c><00:34:19.760><c> do</c>

00:34:20.069 --> 00:34:20.079 align:start position:0%
want here so what we can do
 

00:34:20.079 --> 00:34:22.069 align:start position:0%
want here so what we can do
is<00:34:20.240><c> actually</c><00:34:20.800><c> grab</c><00:34:21.040><c> the</c><00:34:21.119><c> memory</c><00:34:21.520><c> address</c><00:34:21.919><c> of</c>

00:34:22.069 --> 00:34:22.079 align:start position:0%
is actually grab the memory address of
 

00:34:22.079 --> 00:34:23.750 align:start position:0%
is actually grab the memory address of
this<00:34:22.320><c> element</c><00:34:22.720><c> because</c><00:34:22.960><c> this</c><00:34:23.200><c> is</c><00:34:23.280><c> where</c><00:34:23.520><c> it's</c>

00:34:23.750 --> 00:34:23.760 align:start position:0%
this element because this is where it's
 

00:34:23.760 --> 00:34:24.790 align:start position:0%
this element because this is where it's
supposed<00:34:24.240><c> to</c><00:34:24.399><c> live</c>

00:34:24.790 --> 00:34:24.800 align:start position:0%
supposed to live
 

00:34:24.800 --> 00:34:27.030 align:start position:0%
supposed to live
and<00:34:24.960><c> then</c><00:34:25.200><c> simply</c><00:34:25.839><c> forward</c><00:34:26.240><c> these</c><00:34:26.480><c> arguments</c>

00:34:27.030 --> 00:34:27.040 align:start position:0%
and then simply forward these arguments
 

00:34:27.040 --> 00:34:28.629 align:start position:0%
and then simply forward these arguments
into<00:34:27.200><c> that</c><00:34:27.359><c> constructor</c><00:34:27.919><c> not</c><00:34:28.079><c> forgetting</c><00:34:28.480><c> the</c>

00:34:28.629 --> 00:34:28.639 align:start position:0%
into that constructor not forgetting the
 

00:34:28.639 --> 00:34:29.589 align:start position:0%
into that constructor not forgetting the
actual<00:34:29.040><c> type</c>

00:34:29.589 --> 00:34:29.599 align:start position:0%
actual type
 

00:34:29.599 --> 00:34:31.669 align:start position:0%
actual type
that<00:34:29.760><c> we're</c><00:34:29.919><c> trying</c><00:34:30.240><c> to</c><00:34:30.320><c> construct</c><00:34:31.040><c> so</c><00:34:31.440><c> as</c>

00:34:31.669 --> 00:34:31.679 align:start position:0%
that we're trying to construct so as
 

00:34:31.679 --> 00:34:32.629 align:start position:0%
that we're trying to construct so as
simple<00:34:32.079><c> as</c>

00:34:32.629 --> 00:34:32.639 align:start position:0%
simple as
 

00:34:32.639 --> 00:34:35.430 align:start position:0%
simple as
that<00:34:33.520><c> and</c><00:34:33.679><c> by</c><00:34:33.919><c> doing</c><00:34:34.320><c> this</c><00:34:34.800><c> if</c><00:34:34.960><c> we</c><00:34:35.119><c> pop</c><00:34:35.359><c> a</c>

00:34:35.430 --> 00:34:35.440 align:start position:0%
that and by doing this if we pop a
 

00:34:35.440 --> 00:34:37.270 align:start position:0%
that and by doing this if we pop a
breakpoint<00:34:35.919><c> here</c><00:34:36.240><c> and</c><00:34:36.399><c> relaunch</c><00:34:36.879><c> this</c>

00:34:37.270 --> 00:34:37.280 align:start position:0%
breakpoint here and relaunch this
 

00:34:37.280 --> 00:34:38.629 align:start position:0%
breakpoint here and relaunch this
we<00:34:37.440><c> have</c><00:34:37.520><c> nothing</c><00:34:37.760><c> in</c><00:34:37.919><c> our</c><00:34:38.000><c> console</c><00:34:38.480><c> at</c><00:34:38.560><c> the</c>

00:34:38.629 --> 00:34:38.639 align:start position:0%
we have nothing in our console at the
 

00:34:38.639 --> 00:34:40.950 align:start position:0%
we have nothing in our console at the
moment<00:34:38.960><c> let's</c><00:34:39.200><c> hit</c><00:34:39.359><c> f10</c><00:34:40.000><c> we</c><00:34:40.240><c> have</c><00:34:40.480><c> nothing</c><00:34:40.800><c> in</c>

00:34:40.950 --> 00:34:40.960 align:start position:0%
moment let's hit f10 we have nothing in
 

00:34:40.960 --> 00:34:41.990 align:start position:0%
moment let's hit f10 we have nothing in
our<00:34:41.040><c> console</c><00:34:41.599><c> so</c>

00:34:41.990 --> 00:34:42.000 align:start position:0%
our console so
 

00:34:42.000 --> 00:34:44.550 align:start position:0%
our console so
no<00:34:42.480><c> moves</c><00:34:42.879><c> have</c><00:34:43.040><c> been</c><00:34:43.359><c> done</c><00:34:43.679><c> and</c><00:34:43.839><c> no</c><00:34:44.079><c> destroys</c>

00:34:44.550 --> 00:34:44.560 align:start position:0%
no moves have been done and no destroys
 

00:34:44.560 --> 00:34:45.349 align:start position:0%
no moves have been done and no destroys
have<00:34:44.720><c> been</c><00:34:44.879><c> done</c>

00:34:45.349 --> 00:34:45.359 align:start position:0%
have been done
 

00:34:45.359 --> 00:34:47.669 align:start position:0%
have been done
how<00:34:45.599><c> cool</c><00:34:45.839><c> is</c><00:34:46.000><c> that</c><00:34:46.320><c> let's</c><00:34:46.560><c> hit</c><00:34:46.720><c> f5</c><00:34:47.280><c> check</c><00:34:47.520><c> this</c>

00:34:47.669 --> 00:34:47.679 align:start position:0%
how cool is that let's hit f5 check this
 

00:34:47.679 --> 00:34:49.270 align:start position:0%
how cool is that let's hit f5 check this
out<00:34:47.919><c> everything</c><00:34:48.320><c> still</c><00:34:48.560><c> works</c><00:34:48.960><c> everything</c>

00:34:49.270 --> 00:34:49.280 align:start position:0%
out everything still works everything
 

00:34:49.280 --> 00:34:51.270 align:start position:0%
out everything still works everything
looks<00:34:49.599><c> a</c><00:34:49.679><c> lot</c><00:34:49.919><c> tidier</c><00:34:50.399><c> of</c><00:34:50.480><c> course</c><00:34:50.800><c> it</c><00:34:51.040><c> still</c>

00:34:51.270 --> 00:34:51.280 align:start position:0%
looks a lot tidier of course it still
 

00:34:51.280 --> 00:34:52.790 align:start position:0%
looks a lot tidier of course it still
needs<00:34:51.440><c> to</c><00:34:51.599><c> move</c><00:34:51.839><c> and</c><00:34:52.000><c> destroy</c>

00:34:52.790 --> 00:34:52.800 align:start position:0%
needs to move and destroy
 

00:34:52.800 --> 00:34:55.750 align:start position:0%
needs to move and destroy
when<00:34:53.040><c> we</c><00:34:53.280><c> actually</c><00:34:53.760><c> reallocate</c><00:34:55.119><c> but</c><00:34:55.440><c> that's</c>

00:34:55.750 --> 00:34:55.760 align:start position:0%
when we actually reallocate but that's
 

00:34:55.760 --> 00:34:56.389 align:start position:0%
when we actually reallocate but that's
it

00:34:56.389 --> 00:34:56.399 align:start position:0%
it
 

00:34:56.399 --> 00:34:58.790 align:start position:0%
it
look<00:34:56.560><c> how</c><00:34:56.720><c> clean</c><00:34:57.040><c> this</c><00:34:57.200><c> looks</c><00:34:57.440><c> now</c><00:34:58.079><c> so</c><00:34:58.240><c> that</c><00:34:58.560><c> is</c>

00:34:58.790 --> 00:34:58.800 align:start position:0%
look how clean this looks now so that is
 

00:34:58.800 --> 00:34:59.670 align:start position:0%
look how clean this looks now so that is
the<00:34:59.040><c> advanced</c>

00:34:59.670 --> 00:34:59.680 align:start position:0%
the advanced
 

00:34:59.680 --> 00:35:01.109 align:start position:0%
the advanced
tip<00:34:59.920><c> of</c><00:35:00.000><c> the</c><00:35:00.079><c> day</c><00:35:00.480><c> don't</c><00:35:00.640><c> forget</c><00:35:00.880><c> about</c>

00:35:01.109 --> 00:35:01.119 align:start position:0%
tip of the day don't forget about
 

00:35:01.119 --> 00:35:03.430 align:start position:0%
tip of the day don't forget about
placement<00:35:01.520><c> new</c><00:35:02.079><c> for</c><00:35:02.240><c> constructing</c><00:35:02.800><c> objects</c>

00:35:03.430 --> 00:35:03.440 align:start position:0%
placement new for constructing objects
 

00:35:03.440 --> 00:35:05.589 align:start position:0%
placement new for constructing objects
in<00:35:03.839><c> place</c><00:35:04.400><c> now</c><00:35:04.720><c> even</c><00:35:04.960><c> though</c><00:35:05.119><c> we've</c><00:35:05.359><c> spent</c>

00:35:05.589 --> 00:35:05.599 align:start position:0%
in place now even though we've spent
 

00:35:05.599 --> 00:35:07.109 align:start position:0%
in place now even though we've spent
quite<00:35:05.839><c> a</c><00:35:05.920><c> long</c><00:35:06.160><c> time</c><00:35:06.400><c> writing</c><00:35:06.640><c> this</c><00:35:06.800><c> vector</c>

00:35:07.109 --> 00:35:07.119 align:start position:0%
quite a long time writing this vector
 

00:35:07.119 --> 00:35:08.790 align:start position:0%
quite a long time writing this vector
class<00:35:07.359><c> here</c><00:35:07.520><c> today</c><00:35:07.920><c> and</c><00:35:08.079><c> i</c><00:35:08.160><c> hope</c><00:35:08.400><c> that</c><00:35:08.560><c> this</c>

00:35:08.790 --> 00:35:08.800 align:start position:0%
class here today and i hope that this
 

00:35:08.800 --> 00:35:09.829 align:start position:0%
class here today and i hope that this
was<00:35:09.040><c> helpful</c><00:35:09.440><c> to</c><00:35:09.599><c> you</c>

00:35:09.829 --> 00:35:09.839 align:start position:0%
was helpful to you
 

00:35:09.839 --> 00:35:11.349 align:start position:0%
was helpful to you
there<00:35:10.000><c> are</c><00:35:10.079><c> still</c><00:35:10.320><c> so</c><00:35:10.560><c> many</c><00:35:10.800><c> things</c><00:35:11.119><c> that</c><00:35:11.200><c> one</c>

00:35:11.349 --> 00:35:11.359 align:start position:0%
there are still so many things that one
 

00:35:11.359 --> 00:35:12.870 align:start position:0%
there are still so many things that one
would<00:35:11.520><c> want</c><00:35:11.680><c> to</c><00:35:11.839><c> add</c><00:35:12.000><c> to</c><00:35:12.160><c> this</c><00:35:12.320><c> class</c>

00:35:12.870 --> 00:35:12.880 align:start position:0%
would want to add to this class
 

00:35:12.880 --> 00:35:14.710 align:start position:0%
would want to add to this class
such<00:35:13.200><c> as</c><00:35:13.520><c> probably</c><00:35:13.839><c> the</c><00:35:14.000><c> number</c><00:35:14.240><c> one</c><00:35:14.480><c> thing</c>

00:35:14.710 --> 00:35:14.720 align:start position:0%
such as probably the number one thing
 

00:35:14.720 --> 00:35:16.870 align:start position:0%
such as probably the number one thing
being<00:35:15.040><c> arrays</c><00:35:15.520><c> how</c><00:35:15.680><c> do</c><00:35:15.920><c> i</c><00:35:16.079><c> remove</c><00:35:16.480><c> elements</c>

00:35:16.870 --> 00:35:16.880 align:start position:0%
being arrays how do i remove elements
 

00:35:16.880 --> 00:35:17.750 align:start position:0%
being arrays how do i remove elements
from<00:35:17.040><c> this</c><00:35:17.359><c> well</c>

00:35:17.750 --> 00:35:17.760 align:start position:0%
from this well
 

00:35:17.760 --> 00:35:20.069 align:start position:0%
from this well
you<00:35:18.000><c> can't</c><00:35:18.400><c> at</c><00:35:18.560><c> this</c><00:35:18.720><c> stage</c><00:35:19.359><c> and</c><00:35:19.440><c> that's</c><00:35:19.760><c> why</c>

00:35:20.069 --> 00:35:20.079 align:start position:0%
you can't at this stage and that's why
 

00:35:20.079 --> 00:35:21.510 align:start position:0%
you can't at this stage and that's why
even<00:35:20.240><c> though</c><00:35:20.400><c> this</c><00:35:20.560><c> reallocation</c><00:35:21.200><c> function</c>

00:35:21.510 --> 00:35:21.520 align:start position:0%
even though this reallocation function
 

00:35:21.520 --> 00:35:23.349 align:start position:0%
even though this reallocation function
technically<00:35:21.920><c> supports</c><00:35:22.320><c> shrinking</c>

00:35:23.349 --> 00:35:23.359 align:start position:0%
technically supports shrinking
 

00:35:23.359 --> 00:35:25.349 align:start position:0%
technically supports shrinking
we're<00:35:23.680><c> not</c><00:35:23.920><c> shrinking</c><00:35:24.400><c> anywhere</c><00:35:24.960><c> and</c><00:35:25.200><c> in</c>

00:35:25.349 --> 00:35:25.359 align:start position:0%
we're not shrinking anywhere and in
 

00:35:25.359 --> 00:35:27.109 align:start position:0%
we're not shrinking anywhere and in
addition<00:35:25.680><c> to</c><00:35:25.839><c> that</c><00:35:26.000><c> what</c><00:35:26.240><c> if</c><00:35:26.400><c> i</c><00:35:26.560><c> want</c><00:35:26.800><c> to</c>

00:35:27.109 --> 00:35:27.119 align:start position:0%
addition to that what if i want to
 

00:35:27.119 --> 00:35:29.349 align:start position:0%
addition to that what if i want to
in<00:35:27.440><c> place</c><00:35:27.760><c> an</c><00:35:28.000><c> element</c><00:35:28.400><c> or</c><00:35:28.560><c> push</c><00:35:28.880><c> an</c><00:35:28.960><c> element</c>

00:35:29.349 --> 00:35:29.359 align:start position:0%
in place an element or push an element
 

00:35:29.359 --> 00:35:31.190 align:start position:0%
in place an element or push an element
into<00:35:29.599><c> the</c><00:35:29.760><c> middle</c><00:35:30.160><c> of</c><00:35:30.320><c> the</c><00:35:30.480><c> vector</c>

00:35:31.190 --> 00:35:31.200 align:start position:0%
into the middle of the vector
 

00:35:31.200 --> 00:35:33.109 align:start position:0%
into the middle of the vector
what<00:35:31.359><c> do</c><00:35:31.599><c> i</c><00:35:31.760><c> do</c><00:35:32.000><c> there</c><00:35:32.320><c> that's</c><00:35:32.560><c> also</c><00:35:32.880><c> something</c>

00:35:33.109 --> 00:35:33.119 align:start position:0%
what do i do there that's also something
 

00:35:33.119 --> 00:35:33.990 align:start position:0%
what do i do there that's also something
that<00:35:33.280><c> you</c><00:35:33.359><c> would</c><00:35:33.440><c> probably</c><00:35:33.680><c> want</c><00:35:33.839><c> to</c>

00:35:33.990 --> 00:35:34.000 align:start position:0%
that you would probably want to
 

00:35:34.000 --> 00:35:35.589 align:start position:0%
that you would probably want to
implement<00:35:34.480><c> although</c><00:35:34.800><c> keep</c><00:35:35.040><c> in</c><00:35:35.119><c> mind</c><00:35:35.280><c> that</c><00:35:35.440><c> if</c>

00:35:35.589 --> 00:35:35.599 align:start position:0%
implement although keep in mind that if
 

00:35:35.599 --> 00:35:36.790 align:start position:0%
implement although keep in mind that if
you're<00:35:35.680><c> trying</c><00:35:35.920><c> to</c><00:35:36.079><c> replace</c><00:35:36.480><c> things</c><00:35:36.720><c> and</c>

00:35:36.790 --> 00:35:36.800 align:start position:0%
you're trying to replace things and
 

00:35:36.800 --> 00:35:38.950 align:start position:0%
you're trying to replace things and
remove<00:35:37.200><c> things</c><00:35:37.440><c> from</c><00:35:37.599><c> the</c><00:35:37.680><c> middle</c><00:35:37.920><c> of</c><00:35:38.079><c> vectors</c>

00:35:38.950 --> 00:35:38.960 align:start position:0%
remove things from the middle of vectors
 

00:35:38.960 --> 00:35:40.390 align:start position:0%
remove things from the middle of vectors
maybe<00:35:39.280><c> you</c><00:35:39.440><c> don't</c><00:35:39.599><c> want</c><00:35:39.760><c> to</c><00:35:39.839><c> use</c><00:35:40.000><c> a</c><00:35:40.079><c> vector</c>

00:35:40.390 --> 00:35:40.400 align:start position:0%
maybe you don't want to use a vector
 

00:35:40.400 --> 00:35:41.910 align:start position:0%
maybe you don't want to use a vector
data<00:35:40.640><c> structure</c><00:35:41.040><c> because</c><00:35:41.440><c> of</c><00:35:41.520><c> course</c><00:35:41.839><c> the</c>

00:35:41.910 --> 00:35:41.920 align:start position:0%
data structure because of course the
 

00:35:41.920 --> 00:35:43.510 align:start position:0%
data structure because of course the
memory<00:35:42.240><c> has</c><00:35:42.400><c> to</c><00:35:42.480><c> be</c><00:35:42.640><c> contiguous</c>

00:35:43.510 --> 00:35:43.520 align:start position:0%
memory has to be contiguous
 

00:35:43.520 --> 00:35:45.430 align:start position:0%
memory has to be contiguous
and<00:35:43.760><c> therefore</c><00:35:44.240><c> you'll</c><00:35:44.480><c> trigger</c><00:35:44.960><c> potentially</c>

00:35:45.430 --> 00:35:45.440 align:start position:0%
and therefore you'll trigger potentially
 

00:35:45.440 --> 00:35:47.349 align:start position:0%
and therefore you'll trigger potentially
a<00:35:45.520><c> reallocation</c><00:35:46.400><c> or</c><00:35:46.560><c> at</c><00:35:46.720><c> the</c><00:35:46.800><c> very</c><00:35:47.040><c> least</c>

00:35:47.349 --> 00:35:47.359 align:start position:0%
a reallocation or at the very least
 

00:35:47.359 --> 00:35:48.950 align:start position:0%
a reallocation or at the very least
having<00:35:47.599><c> to</c><00:35:47.839><c> shift</c><00:35:48.079><c> and</c><00:35:48.240><c> move</c><00:35:48.560><c> all</c><00:35:48.720><c> those</c>

00:35:48.950 --> 00:35:48.960 align:start position:0%
having to shift and move all those
 

00:35:48.960 --> 00:35:49.910 align:start position:0%
having to shift and move all those
elements<00:35:49.359><c> down</c>

00:35:49.910 --> 00:35:49.920 align:start position:0%
elements down
 

00:35:49.920 --> 00:35:51.670 align:start position:0%
elements down
to<00:35:50.079><c> make</c><00:35:50.320><c> up</c><00:35:50.400><c> for</c><00:35:50.560><c> the</c><00:35:50.720><c> gap</c><00:35:51.040><c> or</c><00:35:51.200><c> the</c><00:35:51.359><c> extra</c>

00:35:51.670 --> 00:35:51.680 align:start position:0%
to make up for the gap or the extra
 

00:35:51.680 --> 00:35:53.589 align:start position:0%
to make up for the gap or the extra
space<00:35:52.079><c> that</c><00:35:52.240><c> you've</c><00:35:52.480><c> created</c><00:35:53.040><c> and</c><00:35:53.119><c> then</c><00:35:53.359><c> also</c>

00:35:53.589 --> 00:35:53.599 align:start position:0%
space that you've created and then also
 

00:35:53.599 --> 00:35:55.190 align:start position:0%
space that you've created and then also
we<00:35:53.760><c> would</c><00:35:53.920><c> probably</c><00:35:54.320><c> want</c><00:35:54.560><c> iterators</c><00:35:55.040><c> so</c>

00:35:55.190 --> 00:35:55.200 align:start position:0%
we would probably want iterators so
 

00:35:55.200 --> 00:35:56.550 align:start position:0%
we would probably want iterators so
there<00:35:55.359><c> are</c><00:35:55.520><c> still</c><00:35:55.760><c> a</c><00:35:55.839><c> number</c><00:35:56.079><c> of</c><00:35:56.160><c> things</c><00:35:56.400><c> we</c>

00:35:56.550 --> 00:35:56.560 align:start position:0%
there are still a number of things we
 

00:35:56.560 --> 00:35:57.510 align:start position:0%
there are still a number of things we
would<00:35:56.640><c> want</c><00:35:56.800><c> to</c><00:35:56.880><c> discuss</c>

00:35:57.510 --> 00:35:57.520 align:start position:0%
would want to discuss
 

00:35:57.520 --> 00:35:58.950 align:start position:0%
would want to discuss
perhaps<00:35:57.839><c> we'll</c><00:35:58.000><c> cover</c><00:35:58.240><c> them</c><00:35:58.400><c> in</c><00:35:58.480><c> a</c><00:35:58.560><c> later</c>

00:35:58.950 --> 00:35:58.960 align:start position:0%
perhaps we'll cover them in a later
 

00:35:58.960 --> 00:36:00.550 align:start position:0%
perhaps we'll cover them in a later
episode<00:35:59.520><c> of</c><00:35:59.839><c> this</c><00:36:00.160><c> c</c>

00:36:00.550 --> 00:36:00.560 align:start position:0%
episode of this c
 

00:36:00.560 --> 00:36:02.310 align:start position:0%
episode of this c
plus<00:36:00.800><c> series</c><00:36:01.280><c> but</c><00:36:01.520><c> there</c><00:36:01.680><c> you</c><00:36:01.839><c> have</c><00:36:02.000><c> it</c><00:36:02.240><c> a</c>

00:36:02.310 --> 00:36:02.320 align:start position:0%
plus series but there you have it a
 

00:36:02.320 --> 00:36:03.990 align:start position:0%
plus series but there you have it a
basic<00:36:02.720><c> implementation</c><00:36:03.599><c> of</c>

00:36:03.990 --> 00:36:04.000 align:start position:0%
basic implementation of
 

00:36:04.000 --> 00:36:07.190 align:start position:0%
basic implementation of
our<00:36:04.480><c> vector</c><00:36:04.960><c> class</c><00:36:06.000><c> haha</c><00:36:06.480><c> did</c><00:36:06.640><c> you</c><00:36:06.800><c> think</c><00:36:07.040><c> that</c>

00:36:07.190 --> 00:36:07.200 align:start position:0%
our vector class haha did you think that
 

00:36:07.200 --> 00:36:07.589 align:start position:0%
our vector class haha did you think that
was

00:36:07.589 --> 00:36:07.599 align:start position:0%
was
 

00:36:07.599 --> 00:36:11.030 align:start position:0%
was
it<00:36:08.240><c> there</c><00:36:08.560><c> is</c><00:36:08.800><c> a</c><00:36:09.040><c> glaring</c><00:36:09.760><c> flaw</c><00:36:10.480><c> that</c><00:36:10.720><c> i</c><00:36:10.800><c> have</c>

00:36:11.030 --> 00:36:11.040 align:start position:0%
it there is a glaring flaw that i have
 

00:36:11.040 --> 00:36:12.870 align:start position:0%
it there is a glaring flaw that i have
left<00:36:11.359><c> in</c><00:36:11.520><c> this</c><00:36:11.760><c> vector</c><00:36:12.160><c> class</c>

00:36:12.870 --> 00:36:12.880 align:start position:0%
left in this vector class
 

00:36:12.880 --> 00:36:15.750 align:start position:0%
left in this vector class
if<00:36:13.119><c> anyone</c><00:36:13.599><c> knows</c><00:36:14.000><c> what</c><00:36:14.240><c> it</c><00:36:14.400><c> is</c><00:36:15.200><c> please</c><00:36:15.520><c> leave</c>

00:36:15.750 --> 00:36:15.760 align:start position:0%
if anyone knows what it is please leave
 

00:36:15.760 --> 00:36:17.589 align:start position:0%
if anyone knows what it is please leave
a<00:36:15.839><c> comment</c><00:36:16.079><c> below</c><00:36:16.560><c> and</c><00:36:16.720><c> if</c><00:36:16.880><c> in</c><00:36:16.960><c> fact</c><00:36:17.200><c> if</c><00:36:17.359><c> it</c><00:36:17.440><c> was</c>

00:36:17.589 --> 00:36:17.599 align:start position:0%
a comment below and if in fact if it was
 

00:36:17.599 --> 00:36:19.109 align:start position:0%
a comment below and if in fact if it was
up<00:36:17.680><c> to</c><00:36:17.839><c> me</c><00:36:18.000><c> i'd</c><00:36:18.160><c> probably</c><00:36:18.400><c> end</c><00:36:18.560><c> the</c><00:36:18.640><c> episode</c>

00:36:19.109 --> 00:36:19.119 align:start position:0%
up to me i'd probably end the episode
 

00:36:19.119 --> 00:36:19.510 align:start position:0%
up to me i'd probably end the episode
here

00:36:19.510 --> 00:36:19.520 align:start position:0%
here
 

00:36:19.520 --> 00:36:21.270 align:start position:0%
here
and<00:36:19.680><c> have</c><00:36:19.839><c> like</c><00:36:20.079><c> it</c><00:36:20.160><c> to</c><00:36:20.320><c> be</c><00:36:20.480><c> continued</c><00:36:21.040><c> thing</c>

00:36:21.270 --> 00:36:21.280 align:start position:0%
and have like it to be continued thing
 

00:36:21.280 --> 00:36:22.710 align:start position:0%
and have like it to be continued thing
and<00:36:21.359><c> leave</c><00:36:21.520><c> this</c><00:36:21.680><c> all</c><00:36:21.839><c> on</c><00:36:22.000><c> you</c>

00:36:22.710 --> 00:36:22.720 align:start position:0%
and leave this all on you
 

00:36:22.720 --> 00:36:24.310 align:start position:0%
and leave this all on you
but<00:36:22.960><c> i</c><00:36:23.200><c> of</c><00:36:23.280><c> course</c><00:36:23.520><c> don't</c><00:36:23.680><c> want</c><00:36:23.839><c> to</c><00:36:23.920><c> publish</c><00:36:24.240><c> a</c>

00:36:24.310 --> 00:36:24.320 align:start position:0%
but i of course don't want to publish a
 

00:36:24.320 --> 00:36:26.310 align:start position:0%
but i of course don't want to publish a
video<00:36:24.560><c> with</c><00:36:25.040><c> with</c><00:36:25.359><c> bugs</c><00:36:25.680><c> in</c><00:36:25.839><c> the</c><00:36:25.920><c> code</c><00:36:26.160><c> i've</c>

00:36:26.310 --> 00:36:26.320 align:start position:0%
video with with bugs in the code i've
 

00:36:26.320 --> 00:36:27.030 align:start position:0%
video with with bugs in the code i've
written

00:36:27.030 --> 00:36:27.040 align:start position:0%
written
 

00:36:27.040 --> 00:36:29.190 align:start position:0%
written
so<00:36:27.280><c> i</c><00:36:27.359><c> am</c><00:36:27.520><c> going</c><00:36:27.599><c> to</c><00:36:27.680><c> address</c><00:36:27.920><c> this</c><00:36:28.160><c> now</c><00:36:28.960><c> the</c>

00:36:29.190 --> 00:36:29.200 align:start position:0%
so i am going to address this now the
 

00:36:29.200 --> 00:36:30.150 align:start position:0%
so i am going to address this now the
problem

00:36:30.150 --> 00:36:30.160 align:start position:0%
problem
 

00:36:30.160 --> 00:36:32.150 align:start position:0%
problem
has<00:36:30.480><c> to</c><00:36:30.560><c> do</c><00:36:30.800><c> with</c><00:36:31.040><c> how</c><00:36:31.200><c> we</c><00:36:31.520><c> allocate</c><00:36:32.000><c> and</c>

00:36:32.150 --> 00:36:32.160 align:start position:0%
has to do with how we allocate and
 

00:36:32.160 --> 00:36:33.510 align:start position:0%
has to do with how we allocate and
deallocate<00:36:32.960><c> memory</c>

00:36:33.510 --> 00:36:33.520 align:start position:0%
deallocate memory
 

00:36:33.520 --> 00:36:36.470 align:start position:0%
deallocate memory
specifically<00:36:34.160><c> the</c><00:36:34.320><c> problem</c><00:36:34.720><c> lies</c><00:36:35.520><c> in</c><00:36:36.000><c> this</c>

00:36:36.470 --> 00:36:36.480 align:start position:0%
specifically the problem lies in this
 

00:36:36.480 --> 00:36:37.030 align:start position:0%
specifically the problem lies in this
delete

00:36:37.030 --> 00:36:37.040 align:start position:0%
delete
 

00:36:37.040 --> 00:36:39.030 align:start position:0%
delete
call<00:36:37.440><c> over</c><00:36:37.760><c> here</c><00:36:38.000><c> and</c><00:36:38.160><c> also</c><00:36:38.400><c> potentially</c><00:36:38.960><c> in</c>

00:36:39.030 --> 00:36:39.040 align:start position:0%
call over here and also potentially in
 

00:36:39.040 --> 00:36:40.230 align:start position:0%
call over here and also potentially in
this<00:36:39.200><c> delete</c><00:36:39.599><c> call</c><00:36:39.839><c> here</c>

00:36:40.230 --> 00:36:40.240 align:start position:0%
this delete call here
 

00:36:40.240 --> 00:36:43.349 align:start position:0%
this delete call here
as<00:36:40.480><c> you</c><00:36:40.640><c> know</c><00:36:41.200><c> we're</c><00:36:41.680><c> manually</c><00:36:42.720><c> calling</c><00:36:43.200><c> the</c>

00:36:43.349 --> 00:36:43.359 align:start position:0%
as you know we're manually calling the
 

00:36:43.359 --> 00:36:45.430 align:start position:0%
as you know we're manually calling the
destructor<00:36:44.079><c> in</c><00:36:44.240><c> both</c><00:36:44.480><c> the</c><00:36:44.640><c> pop</c><00:36:44.880><c> back</c><00:36:45.119><c> and</c><00:36:45.280><c> the</c>

00:36:45.430 --> 00:36:45.440 align:start position:0%
destructor in both the pop back and the
 

00:36:45.440 --> 00:36:46.550 align:start position:0%
destructor in both the pop back and the
clear<00:36:45.760><c> function</c>

00:36:46.550 --> 00:36:46.560 align:start position:0%
clear function
 

00:36:46.560 --> 00:36:48.710 align:start position:0%
clear function
which<00:36:46.880><c> is</c><00:36:47.200><c> you</c><00:36:47.359><c> know</c><00:36:47.520><c> i</c><00:36:47.680><c> mean</c><00:36:48.000><c> a</c><00:36:48.079><c> lot</c><00:36:48.240><c> of</c><00:36:48.400><c> care</c>

00:36:48.710 --> 00:36:48.720 align:start position:0%
which is you know i mean a lot of care
 

00:36:48.720 --> 00:36:49.990 align:start position:0%
which is you know i mean a lot of care
needs<00:36:48.880><c> to</c><00:36:48.960><c> be</c><00:36:49.040><c> taken</c><00:36:49.359><c> when</c><00:36:49.520><c> you're</c><00:36:49.599><c> manually</c>

00:36:49.990 --> 00:36:50.000 align:start position:0%
needs to be taken when you're manually
 

00:36:50.000 --> 00:36:51.589 align:start position:0%
needs to be taken when you're manually
calling<00:36:50.240><c> the</c><00:36:50.320><c> destructor</c><00:36:50.960><c> because</c><00:36:51.280><c> the</c><00:36:51.359><c> worst</c>

00:36:51.589 --> 00:36:51.599 align:start position:0%
calling the destructor because the worst
 

00:36:51.599 --> 00:36:52.790 align:start position:0%
calling the destructor because the worst
thing<00:36:51.839><c> that</c><00:36:51.920><c> can</c><00:36:52.079><c> happen</c><00:36:52.400><c> is</c>

00:36:52.790 --> 00:36:52.800 align:start position:0%
thing that can happen is
 

00:36:52.800 --> 00:36:54.630 align:start position:0%
thing that can happen is
the<00:36:52.960><c> delete</c><00:36:53.359><c> function</c><00:36:53.920><c> also</c><00:36:54.320><c> calls</c><00:36:54.560><c> a</c>

00:36:54.630 --> 00:36:54.640 align:start position:0%
the delete function also calls a
 

00:36:54.640 --> 00:36:57.349 align:start position:0%
the delete function also calls a
destructor<00:36:55.599><c> and</c><00:36:55.760><c> for</c><00:36:56.000><c> a</c><00:36:56.079><c> type</c><00:36:56.320><c> like</c><00:36:56.640><c> vector3</c>

00:36:57.349 --> 00:36:57.359 align:start position:0%
destructor and for a type like vector3
 

00:36:57.359 --> 00:36:57.990 align:start position:0%
destructor and for a type like vector3
here

00:36:57.990 --> 00:36:58.000 align:start position:0%
here
 

00:36:58.000 --> 00:37:00.230 align:start position:0%
here
that's<00:36:58.320><c> not</c><00:36:58.560><c> really</c><00:36:58.880><c> going</c><00:36:59.040><c> to</c><00:36:59.119><c> do</c><00:36:59.280><c> any</c><00:36:59.520><c> harm</c>

00:37:00.230 --> 00:37:00.240 align:start position:0%
that's not really going to do any harm
 

00:37:00.240 --> 00:37:02.310 align:start position:0%
that's not really going to do any harm
however<00:37:00.880><c> let's</c><00:37:01.200><c> make</c><00:37:01.520><c> vector3</c>

00:37:02.310 --> 00:37:02.320 align:start position:0%
however let's make vector3
 

00:37:02.320 --> 00:37:04.550 align:start position:0%
however let's make vector3
a<00:37:02.400><c> little</c><00:37:02.640><c> bit</c><00:37:02.800><c> more</c><00:37:03.040><c> of</c><00:37:03.200><c> a</c><00:37:03.359><c> complex</c><00:37:03.920><c> type</c>

00:37:04.550 --> 00:37:04.560 align:start position:0%
a little bit more of a complex type
 

00:37:04.560 --> 00:37:05.750 align:start position:0%
a little bit more of a complex type
let's<00:37:04.800><c> go</c><00:37:04.960><c> ahead</c><00:37:05.280><c> and</c><00:37:05.359><c> just</c>

00:37:05.750 --> 00:37:05.760 align:start position:0%
let's go ahead and just
 

00:37:05.760 --> 00:37:08.630 align:start position:0%
let's go ahead and just
add<00:37:06.400><c> some</c><00:37:06.640><c> kind</c><00:37:06.960><c> of</c><00:37:07.200><c> you</c><00:37:07.280><c> know</c><00:37:07.520><c> memory</c><00:37:07.920><c> block</c>

00:37:08.630 --> 00:37:08.640 align:start position:0%
add some kind of you know memory block
 

00:37:08.640 --> 00:37:09.270 align:start position:0%
add some kind of you know memory block
into

00:37:09.270 --> 00:37:09.280 align:start position:0%
into
 

00:37:09.280 --> 00:37:11.589 align:start position:0%
into
this<00:37:09.520><c> vector3</c><00:37:10.160><c> class</c><00:37:10.560><c> i'll</c><00:37:10.720><c> go</c><00:37:10.960><c> down</c><00:37:11.200><c> here</c>

00:37:11.589 --> 00:37:11.599 align:start position:0%
this vector3 class i'll go down here
 

00:37:11.599 --> 00:37:12.390 align:start position:0%
this vector3 class i'll go down here
into

00:37:12.390 --> 00:37:12.400 align:start position:0%
into
 

00:37:12.400 --> 00:37:13.990 align:start position:0%
into
the<00:37:12.560><c> constructor</c><00:37:13.040><c> in</c><00:37:13.119><c> fact</c><00:37:13.359><c> into</c><00:37:13.680><c> all</c><00:37:13.839><c> of</c><00:37:13.920><c> the</c>

00:37:13.990 --> 00:37:14.000 align:start position:0%
the constructor in fact into all of the
 

00:37:14.000 --> 00:37:15.910 align:start position:0%
the constructor in fact into all of the
constructors<00:37:14.960><c> now</c><00:37:15.200><c> i'll</c><00:37:15.280><c> just</c><00:37:15.440><c> make</c><00:37:15.680><c> it</c><00:37:15.760><c> so</c>

00:37:15.910 --> 00:37:15.920 align:start position:0%
constructors now i'll just make it so
 

00:37:15.920 --> 00:37:17.510 align:start position:0%
constructors now i'll just make it so
that<00:37:16.079><c> we</c><00:37:16.320><c> allocate</c><00:37:16.880><c> maybe</c><00:37:17.200><c> like</c>

00:37:17.510 --> 00:37:17.520 align:start position:0%
that we allocate maybe like
 

00:37:17.520 --> 00:37:19.270 align:start position:0%
that we allocate maybe like
five<00:37:17.760><c> integers</c><00:37:18.160><c> or</c><00:37:18.240><c> whatever</c><00:37:18.560><c> on</c><00:37:18.720><c> the</c><00:37:18.880><c> heap</c><00:37:19.119><c> so</c>

00:37:19.270 --> 00:37:19.280 align:start position:0%
five integers or whatever on the heap so
 

00:37:19.280 --> 00:37:20.790 align:start position:0%
five integers or whatever on the heap so
basically<00:37:19.680><c> we've</c><00:37:19.839><c> created</c><00:37:20.160><c> a</c><00:37:20.240><c> memory</c><00:37:20.560><c> block</c>

00:37:20.790 --> 00:37:20.800 align:start position:0%
basically we've created a memory block
 

00:37:20.800 --> 00:37:22.870 align:start position:0%
basically we've created a memory block
that<00:37:20.960><c> we</c><00:37:21.119><c> now</c><00:37:21.359><c> need</c><00:37:21.599><c> to</c><00:37:21.760><c> deallocate</c>

00:37:22.870 --> 00:37:22.880 align:start position:0%
that we now need to deallocate
 

00:37:22.880 --> 00:37:25.510 align:start position:0%
that we now need to deallocate
i'll<00:37:23.119><c> add</c><00:37:23.359><c> this</c><00:37:23.680><c> exact</c><00:37:24.240><c> code</c><00:37:24.640><c> into</c><00:37:25.119><c> everywhere</c>

00:37:25.510 --> 00:37:25.520 align:start position:0%
i'll add this exact code into everywhere
 

00:37:25.520 --> 00:37:26.630 align:start position:0%
i'll add this exact code into everywhere
else<00:37:25.680><c> i'm</c><00:37:25.760><c> not</c><00:37:25.839><c> going</c><00:37:25.920><c> to</c><00:37:26.000><c> bother</c><00:37:26.240><c> formatting</c>

00:37:26.630 --> 00:37:26.640 align:start position:0%
else i'm not going to bother formatting
 

00:37:26.640 --> 00:37:27.910 align:start position:0%
else i'm not going to bother formatting
this<00:37:26.800><c> code</c><00:37:26.960><c> or</c><00:37:27.119><c> anything</c><00:37:27.359><c> like</c><00:37:27.520><c> that</c>

00:37:27.910 --> 00:37:27.920 align:start position:0%
this code or anything like that
 

00:37:27.920 --> 00:37:29.349 align:start position:0%
this code or anything like that
you<00:37:28.079><c> need</c><00:37:28.240><c> to</c><00:37:28.320><c> make</c><00:37:28.480><c> sure</c><00:37:28.640><c> that</c><00:37:28.880><c> in</c><00:37:29.040><c> the</c><00:37:29.119><c> copy</c>

00:37:29.349 --> 00:37:29.359 align:start position:0%
you need to make sure that in the copy
 

00:37:29.359 --> 00:37:31.109 align:start position:0%
you need to make sure that in the copy
constructor<00:37:29.920><c> we</c><00:37:30.079><c> actually</c><00:37:30.400><c> copy</c><00:37:30.720><c> it</c><00:37:30.880><c> i'm</c><00:37:30.960><c> not</c>

00:37:31.109 --> 00:37:31.119 align:start position:0%
constructor we actually copy it i'm not
 

00:37:31.119 --> 00:37:32.150 align:start position:0%
constructor we actually copy it i'm not
going<00:37:31.200><c> to</c><00:37:31.280><c> bother</c><00:37:31.520><c> with</c><00:37:31.680><c> that</c><00:37:31.839><c> because</c><00:37:32.000><c> we're</c>

00:37:32.150 --> 00:37:32.160 align:start position:0%
going to bother with that because we're
 

00:37:32.160 --> 00:37:33.109 align:start position:0%
going to bother with that because we're
not<00:37:32.320><c> actually</c><00:37:32.480><c> calling</c><00:37:32.800><c> the</c><00:37:32.880><c> copy</c>

00:37:33.109 --> 00:37:33.119 align:start position:0%
not actually calling the copy
 

00:37:33.119 --> 00:37:34.550 align:start position:0%
not actually calling the copy
constructor<00:37:33.599><c> anywhere</c><00:37:33.839><c> but</c><00:37:34.000><c> in</c><00:37:34.160><c> our</c><00:37:34.320><c> move</c>

00:37:34.550 --> 00:37:34.560 align:start position:0%
constructor anywhere but in our move
 

00:37:34.560 --> 00:37:36.390 align:start position:0%
constructor anywhere but in our move
constructor<00:37:35.119><c> what</c><00:37:35.200><c> we</c><00:37:35.359><c> will</c><00:37:35.599><c> do</c><00:37:35.839><c> is</c><00:37:35.920><c> just</c><00:37:36.160><c> make</c>

00:37:36.390 --> 00:37:36.400 align:start position:0%
constructor what we will do is just make
 

00:37:36.400 --> 00:37:36.870 align:start position:0%
constructor what we will do is just make
sure

00:37:36.870 --> 00:37:36.880 align:start position:0%
sure
 

00:37:36.880 --> 00:37:39.270 align:start position:0%
sure
that<00:37:37.119><c> our</c><00:37:37.359><c> memory</c><00:37:37.760><c> block</c><00:37:38.320><c> is</c><00:37:38.480><c> going</c><00:37:38.720><c> to</c><00:37:38.960><c> just</c>

00:37:39.270 --> 00:37:39.280 align:start position:0%
that our memory block is going to just
 

00:37:39.280 --> 00:37:41.030 align:start position:0%
that our memory block is going to just
be<00:37:39.440><c> equal</c><00:37:39.760><c> to</c><00:37:40.000><c> other</c><00:37:40.160><c> memory</c><00:37:40.480><c> blocks</c><00:37:40.640><c> so</c><00:37:40.800><c> we're</c>

00:37:41.030 --> 00:37:41.040 align:start position:0%
be equal to other memory blocks so we're
 

00:37:41.040 --> 00:37:42.790 align:start position:0%
be equal to other memory blocks so we're
stealing<00:37:41.440><c> that</c><00:37:41.680><c> pointer</c><00:37:42.160><c> and</c><00:37:42.240><c> then</c><00:37:42.480><c> setting</c>

00:37:42.790 --> 00:37:42.800 align:start position:0%
stealing that pointer and then setting
 

00:37:42.800 --> 00:37:44.950 align:start position:0%
stealing that pointer and then setting
other<00:37:43.040><c> memory</c><00:37:43.359><c> blocks</c><00:37:43.680><c> to</c><00:37:43.839><c> be</c><00:37:44.079><c> null</c>

00:37:44.950 --> 00:37:44.960 align:start position:0%
other memory blocks to be null
 

00:37:44.960 --> 00:37:46.470 align:start position:0%
other memory blocks to be null
we'll<00:37:45.119><c> need</c><00:37:45.280><c> to</c><00:37:45.359><c> make</c><00:37:45.599><c> sure</c><00:37:46.000><c> that</c><00:37:46.160><c> we</c><00:37:46.320><c> write</c>

00:37:46.470 --> 00:37:46.480 align:start position:0%
we'll need to make sure that we write
 

00:37:46.480 --> 00:37:47.829 align:start position:0%
we'll need to make sure that we write
this<00:37:46.640><c> code</c><00:37:46.880><c> otherwise</c><00:37:47.280><c> it's</c><00:37:47.359><c> going</c><00:37:47.440><c> to</c><00:37:47.520><c> be</c><00:37:47.599><c> our</c>

00:37:47.829 --> 00:37:47.839 align:start position:0%
this code otherwise it's going to be our
 

00:37:47.839 --> 00:37:49.190 align:start position:0%
this code otherwise it's going to be our
folder<00:37:48.240><c> nothing</c><00:37:48.560><c> works</c>

00:37:49.190 --> 00:37:49.200 align:start position:0%
folder nothing works
 

00:37:49.200 --> 00:37:51.349 align:start position:0%
folder nothing works
and<00:37:49.359><c> we'll</c><00:37:49.520><c> do</c><00:37:49.680><c> the</c><00:37:49.760><c> same</c><00:37:50.160><c> thing</c><00:37:50.480><c> for</c><00:37:50.720><c> the</c><00:37:50.960><c> move</c>

00:37:51.349 --> 00:37:51.359 align:start position:0%
and we'll do the same thing for the move
 

00:37:51.359 --> 00:37:53.349 align:start position:0%
and we'll do the same thing for the move
assignment<00:37:51.839><c> operator</c><00:37:52.320><c> and</c><00:37:52.480><c> again</c><00:37:52.720><c> the</c><00:37:52.880><c> copy</c>

00:37:53.349 --> 00:37:53.359 align:start position:0%
assignment operator and again the copy
 

00:37:53.359 --> 00:37:55.030 align:start position:0%
assignment operator and again the copy
assignment<00:37:53.760><c> operator</c><00:37:54.160><c> and</c><00:37:54.320><c> copy</c><00:37:54.560><c> constructor</c>

00:37:55.030 --> 00:37:55.040 align:start position:0%
assignment operator and copy constructor
 

00:37:55.040 --> 00:37:56.870 align:start position:0%
assignment operator and copy constructor
just<00:37:55.119><c> simply</c><00:37:55.440><c> aren't</c><00:37:55.599><c> called</c><00:37:55.920><c> anywhere</c><00:37:56.320><c> else</c>

00:37:56.870 --> 00:37:56.880 align:start position:0%
just simply aren't called anywhere else
 

00:37:56.880 --> 00:37:58.470 align:start position:0%
just simply aren't called anywhere else
and<00:37:57.040><c> in</c><00:37:57.119><c> fact</c><00:37:57.280><c> to</c><00:37:57.440><c> simplify</c><00:37:57.920><c> that</c><00:37:58.079><c> and</c><00:37:58.160><c> to</c><00:37:58.320><c> make</c>

00:37:58.470 --> 00:37:58.480 align:start position:0%
and in fact to simplify that and to make
 

00:37:58.480 --> 00:37:59.829 align:start position:0%
and in fact to simplify that and to make
sure<00:37:58.640><c> that</c><00:37:58.800><c> is</c><00:37:58.960><c> the</c><00:37:59.119><c> case</c><00:37:59.359><c> i'm</c><00:37:59.520><c> just</c><00:37:59.680><c> going</c><00:37:59.760><c> to</c>

00:37:59.829 --> 00:37:59.839 align:start position:0%
sure that is the case i'm just going to
 

00:37:59.839 --> 00:38:01.430 align:start position:0%
sure that is the case i'm just going to
make<00:38:00.079><c> sure</c><00:38:00.240><c> that</c><00:38:00.400><c> i</c><00:38:00.560><c> actually</c><00:38:00.880><c> delete</c>

00:38:01.430 --> 00:38:01.440 align:start position:0%
make sure that i actually delete
 

00:38:01.440 --> 00:38:03.030 align:start position:0%
make sure that i actually delete
both<00:38:01.680><c> of</c><00:38:01.760><c> them</c><00:38:02.240><c> so</c><00:38:02.400><c> that</c><00:38:02.480><c> we're</c><00:38:02.720><c> sure</c><00:38:02.960><c> that</c>

00:38:03.030 --> 00:38:03.040 align:start position:0%
both of them so that we're sure that
 

00:38:03.040 --> 00:38:04.790 align:start position:0%
both of them so that we're sure that
we're<00:38:03.280><c> never</c><00:38:03.680><c> accidentally</c><00:38:04.320><c> copying</c>

00:38:04.790 --> 00:38:04.800 align:start position:0%
we're never accidentally copying
 

00:38:04.800 --> 00:38:05.589 align:start position:0%
we're never accidentally copying
anything

00:38:05.589 --> 00:38:05.599 align:start position:0%
anything
 

00:38:05.599 --> 00:38:07.109 align:start position:0%
anything
so<00:38:05.760><c> now</c><00:38:06.000><c> what</c><00:38:06.160><c> we've</c><00:38:06.320><c> got</c><00:38:06.560><c> is</c><00:38:06.720><c> a</c><00:38:06.800><c> move</c>

00:38:07.109 --> 00:38:07.119 align:start position:0%
so now what we've got is a move
 

00:38:07.119 --> 00:38:08.710 align:start position:0%
so now what we've got is a move
constructor<00:38:07.680><c> that</c><00:38:07.920><c> properly</c><00:38:08.320><c> moves</c><00:38:08.560><c> that</c>

00:38:08.710 --> 00:38:08.720 align:start position:0%
constructor that properly moves that
 

00:38:08.720 --> 00:38:10.069 align:start position:0%
constructor that properly moves that
memory<00:38:09.119><c> block</c><00:38:09.440><c> and</c><00:38:09.599><c> our</c><00:38:09.760><c> general</c>

00:38:10.069 --> 00:38:10.079 align:start position:0%
memory block and our general
 

00:38:10.079 --> 00:38:11.430 align:start position:0%
memory block and our general
constructors<00:38:10.640><c> i</c><00:38:10.720><c> forgot</c><00:38:10.960><c> one</c><00:38:11.200><c> here</c><00:38:11.359><c> the</c>

00:38:11.430 --> 00:38:11.440 align:start position:0%
constructors i forgot one here the
 

00:38:11.440 --> 00:38:12.069 align:start position:0%
constructors i forgot one here the
default<00:38:11.760><c> one</c>

00:38:12.069 --> 00:38:12.079 align:start position:0%
default one
 

00:38:12.079 --> 00:38:13.990 align:start position:0%
default one
that<00:38:12.320><c> allocates</c><00:38:12.800><c> this</c><00:38:12.960><c> memory</c><00:38:13.280><c> block</c><00:38:13.599><c> finally</c>

00:38:13.990 --> 00:38:14.000 align:start position:0%
that allocates this memory block finally
 

00:38:14.000 --> 00:38:15.750 align:start position:0%
that allocates this memory block finally
we're<00:38:14.160><c> going</c><00:38:14.400><c> to</c><00:38:14.720><c> deallocate</c><00:38:15.520><c> it</c>

00:38:15.750 --> 00:38:15.760 align:start position:0%
we're going to deallocate it
 

00:38:15.760 --> 00:38:18.390 align:start position:0%
we're going to deallocate it
so<00:38:15.920><c> delete</c><00:38:16.400><c> it</c><00:38:16.960><c> inside</c><00:38:17.359><c> the</c><00:38:17.520><c> destructor</c><00:38:18.160><c> this</c>

00:38:18.390 --> 00:38:18.400 align:start position:0%
so delete it inside the destructor this
 

00:38:18.400 --> 00:38:19.670 align:start position:0%
so delete it inside the destructor this
is<00:38:18.560><c> the</c><00:38:18.800><c> proper</c>

00:38:19.670 --> 00:38:19.680 align:start position:0%
is the proper
 

00:38:19.680 --> 00:38:21.829 align:start position:0%
is the proper
usage<00:38:20.240><c> of</c><00:38:20.400><c> this</c><00:38:20.640><c> class</c><00:38:21.040><c> if</c><00:38:21.200><c> it</c><00:38:21.280><c> was</c><00:38:21.440><c> to</c><00:38:21.599><c> have</c><00:38:21.760><c> a</c>

00:38:21.829 --> 00:38:21.839 align:start position:0%
usage of this class if it was to have a
 

00:38:21.839 --> 00:38:23.670 align:start position:0%
usage of this class if it was to have a
memory<00:38:22.160><c> block</c><00:38:22.480><c> this</c><00:38:22.640><c> is</c><00:38:22.720><c> totally</c><00:38:23.119><c> fine</c><00:38:23.440><c> we</c><00:38:23.520><c> can</c>

00:38:23.670 --> 00:38:23.680 align:start position:0%
memory block this is totally fine we can
 

00:38:23.680 --> 00:38:25.190 align:start position:0%
memory block this is totally fine we can
set<00:38:23.839><c> it</c><00:38:23.920><c> to</c><00:38:24.000><c> nonpointer</c><00:38:24.480><c> if</c><00:38:24.640><c> we</c><00:38:24.720><c> want</c>

00:38:25.190 --> 00:38:25.200 align:start position:0%
set it to nonpointer if we want
 

00:38:25.200 --> 00:38:26.470 align:start position:0%
set it to nonpointer if we want
by<00:38:25.359><c> default</c><00:38:25.760><c> but</c><00:38:25.920><c> you</c><00:38:26.079><c> can</c><00:38:26.160><c> see</c><00:38:26.320><c> every</c>

00:38:26.470 --> 00:38:26.480 align:start position:0%
by default but you can see every
 

00:38:26.480 --> 00:38:28.950 align:start position:0%
by default but you can see every
constructor<00:38:27.119><c> initializes</c><00:38:27.839><c> it</c><00:38:28.079><c> anyway</c>

00:38:28.950 --> 00:38:28.960 align:start position:0%
constructor initializes it anyway
 

00:38:28.960 --> 00:38:30.790 align:start position:0%
constructor initializes it anyway
so<00:38:29.200><c> now</c><00:38:29.359><c> that</c><00:38:29.520><c> we've</c><00:38:29.680><c> got</c><00:38:30.000><c> this</c><00:38:30.560><c> let's</c>

00:38:30.790 --> 00:38:30.800 align:start position:0%
so now that we've got this let's
 

00:38:30.800 --> 00:38:32.470 align:start position:0%
so now that we've got this let's
surround<00:38:31.520><c> our</c><00:38:31.920><c> vector</c>

00:38:32.470 --> 00:38:32.480 align:start position:0%
surround our vector
 

00:38:32.480 --> 00:38:33.910 align:start position:0%
surround our vector
in<00:38:32.640><c> a</c><00:38:32.720><c> little</c><00:38:32.880><c> bit</c><00:38:32.960><c> of</c><00:38:33.119><c> a</c><00:38:33.200><c> scope</c><00:38:33.599><c> technically</c>

00:38:33.910 --> 00:38:33.920 align:start position:0%
in a little bit of a scope technically
 

00:38:33.920 --> 00:38:35.589 align:start position:0%
in a little bit of a scope technically
we<00:38:34.000><c> don't</c><00:38:34.160><c> have</c><00:38:34.240><c> to</c><00:38:34.400><c> do</c><00:38:34.560><c> this</c><00:38:34.880><c> it</c><00:38:35.040><c> should</c><00:38:35.280><c> crash</c>

00:38:35.589 --> 00:38:35.599 align:start position:0%
we don't have to do this it should crash
 

00:38:35.599 --> 00:38:36.310 align:start position:0%
we don't have to do this it should crash
anyway

00:38:36.310 --> 00:38:36.320 align:start position:0%
anyway
 

00:38:36.320 --> 00:38:38.390 align:start position:0%
anyway
but<00:38:36.480><c> just</c><00:38:36.640><c> to</c><00:38:36.800><c> be</c><00:38:36.960><c> safe</c><00:38:37.599><c> when</c><00:38:37.760><c> we</c><00:38:37.920><c> get</c><00:38:38.079><c> to</c><00:38:38.240><c> the</c>

00:38:38.390 --> 00:38:38.400 align:start position:0%
but just to be safe when we get to the
 

00:38:38.400 --> 00:38:39.510 align:start position:0%
but just to be safe when we get to the
end<00:38:38.720><c> of</c><00:38:38.960><c> this</c>

00:38:39.510 --> 00:38:39.520 align:start position:0%
end of this
 

00:38:39.520 --> 00:38:41.109 align:start position:0%
end of this
scope<00:38:39.920><c> and</c><00:38:40.160><c> our</c><00:38:40.240><c> stack</c><00:38:40.560><c> allocation</c><00:38:40.960><c> for</c>

00:38:41.109 --> 00:38:41.119 align:start position:0%
scope and our stack allocation for
 

00:38:41.119 --> 00:38:42.550 align:start position:0%
scope and our stack allocation for
vector<00:38:41.440><c> is</c><00:38:41.520><c> over</c><00:38:41.839><c> it's</c><00:38:42.000><c> going</c><00:38:42.160><c> to</c><00:38:42.320><c> try</c><00:38:42.480><c> and</c>

00:38:42.550 --> 00:38:42.560 align:start position:0%
vector is over it's going to try and
 

00:38:42.560 --> 00:38:43.510 align:start position:0%
vector is over it's going to try and
delete<00:38:42.960><c> this</c>

00:38:43.510 --> 00:38:43.520 align:start position:0%
delete this
 

00:38:43.520 --> 00:38:45.349 align:start position:0%
delete this
so<00:38:43.680><c> this</c><00:38:43.920><c> is</c><00:38:44.079><c> in</c><00:38:44.240><c> fact</c><00:38:44.560><c> going</c><00:38:44.800><c> to</c><00:38:45.040><c> call</c>

00:38:45.349 --> 00:38:45.359 align:start position:0%
so this is in fact going to call
 

00:38:45.359 --> 00:38:46.870 align:start position:0%
so this is in fact going to call
operator<00:38:45.760><c> delete</c><00:38:46.160><c> on</c><00:38:46.240><c> the</c><00:38:46.320><c> memory</c><00:38:46.640><c> block</c>

00:38:46.870 --> 00:38:46.880 align:start position:0%
operator delete on the memory block
 

00:38:46.880 --> 00:38:48.710 align:start position:0%
operator delete on the memory block
inside<00:38:47.200><c> the</c><00:38:47.440><c> vector</c><00:38:47.839><c> class</c><00:38:48.160><c> and</c><00:38:48.320><c> inside</c><00:38:48.560><c> the</c>

00:38:48.710 --> 00:38:48.720 align:start position:0%
inside the vector class and inside the
 

00:38:48.720 --> 00:38:50.069 align:start position:0%
inside the vector class and inside the
vector3<00:38:49.440><c> class</c>

00:38:50.069 --> 00:38:50.079 align:start position:0%
vector3 class
 

00:38:50.079 --> 00:38:52.150 align:start position:0%
vector3 class
sorry<00:38:50.480><c> for</c><00:38:50.720><c> picking</c><00:38:51.040><c> such</c><00:38:51.280><c> confusing</c><00:38:51.760><c> names</c>

00:38:52.150 --> 00:38:52.160 align:start position:0%
sorry for picking such confusing names
 

00:38:52.160 --> 00:38:53.510 align:start position:0%
sorry for picking such confusing names
vector<00:38:52.400><c> and</c><00:38:52.480><c> vector3</c>

00:38:53.510 --> 00:38:53.520 align:start position:0%
vector and vector3
 

00:38:53.520 --> 00:38:56.230 align:start position:0%
vector and vector3
mybad<00:38:54.560><c> it's</c><00:38:54.880><c> going</c><00:38:55.119><c> to</c><00:38:55.440><c> try</c><00:38:55.680><c> and</c><00:38:55.760><c> delete</c><00:38:56.079><c> that</c>

00:38:56.230 --> 00:38:56.240 align:start position:0%
mybad it's going to try and delete that
 

00:38:56.240 --> 00:38:57.829 align:start position:0%
mybad it's going to try and delete that
memory<00:38:56.560><c> block</c><00:38:56.960><c> this</c><00:38:57.200><c> is</c><00:38:57.280><c> going</c><00:38:57.440><c> to</c><00:38:57.520><c> prove</c>

00:38:57.829 --> 00:38:57.839 align:start position:0%
memory block this is going to prove
 

00:38:57.839 --> 00:38:59.349 align:start position:0%
memory block this is going to prove
slightly<00:38:58.160><c> problematic</c><00:38:58.800><c> because</c><00:38:59.040><c> we've</c>

00:38:59.349 --> 00:38:59.359 align:start position:0%
slightly problematic because we've
 

00:38:59.359 --> 00:38:59.990 align:start position:0%
slightly problematic because we've
popped<00:38:59.680><c> back</c>

00:38:59.990 --> 00:39:00.000 align:start position:0%
popped back
 

00:39:00.000 --> 00:39:01.750 align:start position:0%
popped back
and<00:39:00.240><c> cleared</c><00:39:00.640><c> and</c><00:39:00.800><c> done</c><00:39:01.200><c> various</c><00:39:01.599><c> other</c>

00:39:01.750 --> 00:39:01.760 align:start position:0%
and cleared and done various other
 

00:39:01.760 --> 00:39:03.030 align:start position:0%
and cleared and done various other
things<00:39:02.000><c> so</c><00:39:02.079><c> let's</c><00:39:02.240><c> hit</c><00:39:02.480><c> f5</c>

00:39:03.030 --> 00:39:03.040 align:start position:0%
things so let's hit f5
 

00:39:03.040 --> 00:39:05.589 align:start position:0%
things so let's hit f5
okay<00:39:03.359><c> look</c><00:39:03.520><c> at</c><00:39:03.599><c> that</c><00:39:03.920><c> we</c><00:39:04.160><c> get</c><00:39:04.400><c> an</c><00:39:04.720><c> error</c><00:39:05.280><c> and</c><00:39:05.440><c> if</c>

00:39:05.589 --> 00:39:05.599 align:start position:0%
okay look at that we get an error and if
 

00:39:05.599 --> 00:39:07.510 align:start position:0%
okay look at that we get an error and if
we<00:39:05.760><c> kind</c><00:39:05.920><c> of</c><00:39:06.079><c> drill</c><00:39:06.320><c> down</c><00:39:06.640><c> here</c><00:39:06.800><c> a</c><00:39:06.880><c> little</c><00:39:07.040><c> bit</c>

00:39:07.510 --> 00:39:07.520 align:start position:0%
we kind of drill down here a little bit
 

00:39:07.520 --> 00:39:08.630 align:start position:0%
we kind of drill down here a little bit
it's<00:39:07.680><c> because</c><00:39:07.920><c> we're</c><00:39:08.079><c> trying</c><00:39:08.240><c> to</c><00:39:08.320><c> delete</c><00:39:08.560><c> a</c>

00:39:08.630 --> 00:39:08.640 align:start position:0%
it's because we're trying to delete a
 

00:39:08.640 --> 00:39:10.390 align:start position:0%
it's because we're trying to delete a
memory<00:39:08.960><c> block</c><00:39:09.359><c> and</c><00:39:09.440><c> the</c><00:39:09.599><c> problem</c><00:39:09.920><c> will</c><00:39:10.160><c> be</c>

00:39:10.390 --> 00:39:10.400 align:start position:0%
memory block and the problem will be
 

00:39:10.400 --> 00:39:11.910 align:start position:0%
memory block and the problem will be
that<00:39:10.640><c> this</c><00:39:10.800><c> is</c><00:39:10.960><c> a</c><00:39:11.040><c> memory</c><00:39:11.359><c> block</c><00:39:11.599><c> that</c><00:39:11.760><c> has</c>

00:39:11.910 --> 00:39:11.920 align:start position:0%
that this is a memory block that has
 

00:39:11.920 --> 00:39:13.670 align:start position:0%
that this is a memory block that has
already<00:39:12.240><c> been</c><00:39:12.400><c> deleted</c><00:39:12.800><c> we</c><00:39:12.960><c> can</c><00:39:13.119><c> also</c>

00:39:13.670 --> 00:39:13.680 align:start position:0%
already been deleted we can also
 

00:39:13.680 --> 00:39:15.670 align:start position:0%
already been deleted we can also
try<00:39:14.079><c> and</c><00:39:14.240><c> simplify</c><00:39:14.800><c> this</c><00:39:15.040><c> a</c><00:39:15.119><c> little</c><00:39:15.359><c> bit</c><00:39:15.520><c> just</c>

00:39:15.670 --> 00:39:15.680 align:start position:0%
try and simplify this a little bit just
 

00:39:15.680 --> 00:39:16.950 align:start position:0%
try and simplify this a little bit just
to<00:39:15.839><c> pinpoint</c><00:39:16.320><c> the</c><00:39:16.480><c> problem</c>

00:39:16.950 --> 00:39:16.960 align:start position:0%
to pinpoint the problem
 

00:39:16.960 --> 00:39:19.430 align:start position:0%
to pinpoint the problem
exactly<00:39:17.839><c> if</c><00:39:18.079><c> i</c><00:39:18.160><c> just</c><00:39:18.400><c> do</c><00:39:18.640><c> a</c><00:39:18.720><c> couple</c><00:39:19.040><c> of</c><00:39:19.280><c> in</c>

00:39:19.430 --> 00:39:19.440 align:start position:0%
exactly if i just do a couple of in
 

00:39:19.440 --> 00:39:21.670 align:start position:0%
exactly if i just do a couple of in
place<00:39:19.760><c> backs</c><00:39:20.079><c> here</c><00:39:20.400><c> with</c><00:39:20.640><c> nothing</c><00:39:21.040><c> really</c><00:39:21.440><c> too</c>

00:39:21.670 --> 00:39:21.680 align:start position:0%
place backs here with nothing really too
 

00:39:21.680 --> 00:39:22.390 align:start position:0%
place backs here with nothing really too
scary

00:39:22.390 --> 00:39:22.400 align:start position:0%
scary
 

00:39:22.400 --> 00:39:23.670 align:start position:0%
scary
it's<00:39:22.640><c> going</c><00:39:22.720><c> to</c><00:39:22.880><c> work</c><00:39:23.119><c> fine</c><00:39:23.359><c> we're</c><00:39:23.520><c> not</c><00:39:23.599><c> going</c>

00:39:23.670 --> 00:39:23.680 align:start position:0%
it's going to work fine we're not going
 

00:39:23.680 --> 00:39:25.910 align:start position:0%
it's going to work fine we're not going
to<00:39:23.760><c> get</c><00:39:23.920><c> any</c><00:39:24.079><c> crashes</c><00:39:24.880><c> but</c><00:39:25.119><c> when</c><00:39:25.280><c> we</c><00:39:25.440><c> start</c><00:39:25.680><c> to</c>

00:39:25.910 --> 00:39:25.920 align:start position:0%
to get any crashes but when we start to
 

00:39:25.920 --> 00:39:27.109 align:start position:0%
to get any crashes but when we start to
actually<00:39:26.240><c> play</c><00:39:26.400><c> around</c><00:39:26.640><c> with</c><00:39:26.800><c> it</c><00:39:26.880><c> a</c><00:39:26.960><c> little</c>

00:39:27.109 --> 00:39:27.119 align:start position:0%
actually play around with it a little
 

00:39:27.119 --> 00:39:29.030 align:start position:0%
actually play around with it a little
bit<00:39:27.359><c> and</c><00:39:27.520><c> especially</c><00:39:27.920><c> with</c><00:39:28.160><c> pop</c><00:39:28.400><c> back</c><00:39:28.720><c> because</c>

00:39:29.030 --> 00:39:29.040 align:start position:0%
bit and especially with pop back because
 

00:39:29.040 --> 00:39:30.630 align:start position:0%
bit and especially with pop back because
we've<00:39:29.359><c> called</c><00:39:29.680><c> the</c><00:39:29.760><c> destructor</c>

00:39:30.630 --> 00:39:30.640 align:start position:0%
we've called the destructor
 

00:39:30.640 --> 00:39:32.950 align:start position:0%
we've called the destructor
of<00:39:30.880><c> vector</c><00:39:31.280><c> 3</c><00:39:31.839><c> which</c><00:39:32.000><c> has</c><00:39:32.240><c> in</c><00:39:32.320><c> fact</c><00:39:32.560><c> deleted</c>

00:39:32.950 --> 00:39:32.960 align:start position:0%
of vector 3 which has in fact deleted
 

00:39:32.960 --> 00:39:34.550 align:start position:0%
of vector 3 which has in fact deleted
this<00:39:33.440><c> over</c><00:39:33.839><c> here</c>

00:39:34.550 --> 00:39:34.560 align:start position:0%
this over here
 

00:39:34.560 --> 00:39:36.870 align:start position:0%
this over here
then<00:39:34.800><c> what</c><00:39:35.040><c> happens</c><00:39:35.440><c> when</c><00:39:35.760><c> we</c><00:39:36.000><c> call</c><00:39:36.400><c> this</c>

00:39:36.870 --> 00:39:36.880 align:start position:0%
then what happens when we call this
 

00:39:36.880 --> 00:39:39.030 align:start position:0%
then what happens when we call this
we're<00:39:37.040><c> going</c><00:39:37.280><c> to</c><00:39:37.440><c> land</c><00:39:37.760><c> in</c><00:39:37.920><c> a</c><00:39:38.000><c> world</c><00:39:38.320><c> of</c><00:39:38.480><c> hurt</c>

00:39:39.030 --> 00:39:39.040 align:start position:0%
we're going to land in a world of hurt
 

00:39:39.040 --> 00:39:41.270 align:start position:0%
we're going to land in a world of hurt
so<00:39:39.280><c> how</c><00:39:39.440><c> do</c><00:39:39.680><c> we</c><00:39:39.920><c> get</c><00:39:40.160><c> around</c><00:39:40.560><c> this</c><00:39:40.800><c> well</c><00:39:41.040><c> we</c>

00:39:41.270 --> 00:39:41.280 align:start position:0%
so how do we get around this well we
 

00:39:41.280 --> 00:39:42.790 align:start position:0%
so how do we get around this well we
still<00:39:41.520><c> have</c><00:39:41.760><c> to</c><00:39:41.920><c> call</c><00:39:42.079><c> the</c><00:39:42.160><c> destructor</c><00:39:42.640><c> here</c>

00:39:42.790 --> 00:39:42.800 align:start position:0%
still have to call the destructor here
 

00:39:42.800 --> 00:39:44.390 align:start position:0%
still have to call the destructor here
there's<00:39:43.040><c> no</c><00:39:43.200><c> real</c><00:39:43.359><c> way</c><00:39:43.520><c> around</c><00:39:43.839><c> that</c>

00:39:44.390 --> 00:39:44.400 align:start position:0%
there's no real way around that
 

00:39:44.400 --> 00:39:46.390 align:start position:0%
there's no real way around that
what<00:39:44.560><c> we</c><00:39:44.720><c> need</c><00:39:44.880><c> to</c><00:39:45.040><c> do</c><00:39:45.200><c> instead</c><00:39:45.760><c> is</c><00:39:46.000><c> change</c><00:39:46.240><c> the</c>

00:39:46.390 --> 00:39:46.400 align:start position:0%
what we need to do instead is change the
 

00:39:46.400 --> 00:39:47.430 align:start position:0%
what we need to do instead is change the
way<00:39:46.560><c> that</c><00:39:46.720><c> we</c><00:39:46.880><c> allocate</c>

00:39:47.430 --> 00:39:47.440 align:start position:0%
way that we allocate
 

00:39:47.440 --> 00:39:50.630 align:start position:0%
way that we allocate
and<00:39:47.520><c> de-allocate</c><00:39:48.240><c> memory</c><00:39:49.119><c> so</c><00:39:49.359><c> specifically</c>

00:39:50.630 --> 00:39:50.640 align:start position:0%
and de-allocate memory so specifically
 

00:39:50.640 --> 00:39:53.349 align:start position:0%
and de-allocate memory so specifically
vector<00:39:51.280><c> destructor</c><00:39:52.079><c> is</c><00:39:52.240><c> going</c><00:39:52.480><c> to</c><00:39:52.640><c> call</c><00:39:52.880><c> clear</c>

00:39:53.349 --> 00:39:53.359 align:start position:0%
vector destructor is going to call clear
 

00:39:53.359 --> 00:39:54.870 align:start position:0%
vector destructor is going to call clear
which<00:39:53.599><c> of</c><00:39:53.680><c> course</c><00:39:53.920><c> is</c><00:39:54.079><c> going</c><00:39:54.240><c> to</c><00:39:54.400><c> go</c><00:39:54.560><c> through</c>

00:39:54.870 --> 00:39:54.880 align:start position:0%
which of course is going to go through
 

00:39:54.880 --> 00:39:55.670 align:start position:0%
which of course is going to go through
everything

00:39:55.670 --> 00:39:55.680 align:start position:0%
everything
 

00:39:55.680 --> 00:39:58.470 align:start position:0%
everything
and<00:39:56.400><c> manually</c><00:39:56.880><c> call</c><00:39:57.119><c> the</c><00:39:57.200><c> destructor</c><00:39:58.079><c> so</c><00:39:58.240><c> now</c>

00:39:58.470 --> 00:39:58.480 align:start position:0%
and manually call the destructor so now
 

00:39:58.480 --> 00:39:59.430 align:start position:0%
and manually call the destructor so now
what<00:39:58.640><c> we</c><00:39:58.800><c> need</c><00:39:58.960><c> to</c><00:39:59.119><c> do</c>

00:39:59.430 --> 00:39:59.440 align:start position:0%
what we need to do
 

00:39:59.440 --> 00:40:01.829 align:start position:0%
what we need to do
is<00:39:59.680><c> the</c><00:40:00.079><c> new</c><00:40:00.400><c> and</c><00:40:00.560><c> delete</c><00:40:00.960><c> operators</c><00:40:01.520><c> that</c><00:40:01.599><c> we</c>

00:40:01.829 --> 00:40:01.839 align:start position:0%
is the new and delete operators that we
 

00:40:01.839 --> 00:40:02.550 align:start position:0%
is the new and delete operators that we
use

00:40:02.550 --> 00:40:02.560 align:start position:0%
use
 

00:40:02.560 --> 00:40:05.030 align:start position:0%
use
we<00:40:02.880><c> instead</c><00:40:03.280><c> want</c><00:40:03.440><c> to</c><00:40:03.520><c> use</c><00:40:03.839><c> versions</c><00:40:04.480><c> that</c><00:40:04.720><c> do</c>

00:40:05.030 --> 00:40:05.040 align:start position:0%
we instead want to use versions that do
 

00:40:05.040 --> 00:40:06.870 align:start position:0%
we instead want to use versions that do
not<00:40:05.440><c> call</c><00:40:05.680><c> the</c><00:40:05.839><c> constructor</c>

00:40:06.870 --> 00:40:06.880 align:start position:0%
not call the constructor
 

00:40:06.880 --> 00:40:09.670 align:start position:0%
not call the constructor
or<00:40:07.040><c> destructor</c><00:40:08.000><c> so</c><00:40:08.240><c> how</c><00:40:08.480><c> do</c><00:40:08.640><c> we</c><00:40:08.800><c> do</c><00:40:09.040><c> that</c><00:40:09.440><c> well</c>

00:40:09.670 --> 00:40:09.680 align:start position:0%
or destructor so how do we do that well
 

00:40:09.680 --> 00:40:09.990 align:start position:0%
or destructor so how do we do that well
keep

00:40:09.990 --> 00:40:10.000 align:start position:0%
keep
 

00:40:10.000 --> 00:40:11.750 align:start position:0%
keep
in<00:40:10.079><c> mind</c><00:40:10.480><c> this</c><00:40:10.720><c> is</c><00:40:10.960><c> there</c><00:40:11.200><c> shouldn't</c><00:40:11.440><c> be</c><00:40:11.599><c> any</c>

00:40:11.750 --> 00:40:11.760 align:start position:0%
in mind this is there shouldn't be any
 

00:40:11.760 --> 00:40:13.349 align:start position:0%
in mind this is there shouldn't be any
constructors<00:40:12.240><c> being</c><00:40:12.400><c> called</c><00:40:12.640><c> here</c><00:40:12.960><c> at</c><00:40:13.119><c> all</c>

00:40:13.349 --> 00:40:13.359 align:start position:0%
constructors being called here at all
 

00:40:13.359 --> 00:40:15.109 align:start position:0%
constructors being called here at all
anyway<00:40:13.760><c> so</c><00:40:13.920><c> there's</c><00:40:14.160><c> no</c><00:40:14.319><c> point</c><00:40:14.560><c> at</c><00:40:14.640><c> which</c><00:40:14.880><c> we</c>

00:40:15.109 --> 00:40:15.119 align:start position:0%
anyway so there's no point at which we
 

00:40:15.119 --> 00:40:17.030 align:start position:0%
anyway so there's no point at which we
need<00:40:15.359><c> to</c><00:40:15.599><c> call</c><00:40:15.920><c> a</c><00:40:16.079><c> constructor</c>

00:40:17.030 --> 00:40:17.040 align:start position:0%
need to call a constructor
 

00:40:17.040 --> 00:40:18.710 align:start position:0%
need to call a constructor
all<00:40:17.200><c> we</c><00:40:17.359><c> need</c><00:40:17.520><c> to</c><00:40:17.599><c> do</c><00:40:17.839><c> here</c><00:40:18.160><c> is</c><00:40:18.319><c> essentially</c>

00:40:18.710 --> 00:40:18.720 align:start position:0%
all we need to do here is essentially
 

00:40:18.720 --> 00:40:20.470 align:start position:0%
all we need to do here is essentially
just<00:40:18.960><c> malloc</c><00:40:19.520><c> enough</c><00:40:19.920><c> memory</c>

00:40:20.470 --> 00:40:20.480 align:start position:0%
just malloc enough memory
 

00:40:20.480 --> 00:40:22.790 align:start position:0%
just malloc enough memory
to<00:40:20.960><c> fill</c><00:40:21.200><c> up</c><00:40:21.359><c> this</c><00:40:21.599><c> new</c><00:40:21.760><c> capacity</c><00:40:22.400><c> so</c><00:40:22.560><c> how</c><00:40:22.720><c> do</c>

00:40:22.790 --> 00:40:22.800 align:start position:0%
to fill up this new capacity so how do
 

00:40:22.800 --> 00:40:23.990 align:start position:0%
to fill up this new capacity so how do
we<00:40:22.880><c> do</c><00:40:23.040><c> that</c><00:40:23.200><c> well</c><00:40:23.359><c> we're</c><00:40:23.520><c> not</c><00:40:23.680><c> actually</c><00:40:23.920><c> going</c>

00:40:23.990 --> 00:40:24.000 align:start position:0%
we do that well we're not actually going
 

00:40:24.000 --> 00:40:25.349 align:start position:0%
we do that well we're not actually going
to<00:40:24.079><c> use</c><00:40:24.240><c> mallet</c><00:40:24.480><c> because</c><00:40:24.640><c> we're</c><00:40:24.800><c> using</c>

00:40:25.349 --> 00:40:25.359 align:start position:0%
to use mallet because we're using
 

00:40:25.359 --> 00:40:27.589 align:start position:0%
to use mallet because we're using
c<00:40:25.520><c> plus</c><00:40:25.839><c> plus</c><00:40:26.400><c> instead</c><00:40:26.720><c> we're</c><00:40:26.800><c> going</c><00:40:27.040><c> to</c><00:40:27.119><c> use</c>

00:40:27.589 --> 00:40:27.599 align:start position:0%
c plus plus instead we're going to use
 

00:40:27.599 --> 00:40:29.270 align:start position:0%
c plus plus instead we're going to use
operator<00:40:28.160><c> new</c><00:40:28.480><c> i'm</c><00:40:28.640><c> just</c><00:40:28.720><c> going</c><00:40:28.880><c> to</c><00:40:28.960><c> put</c><00:40:29.119><c> into</c>

00:40:29.270 --> 00:40:29.280 align:start position:0%
operator new i'm just going to put into
 

00:40:29.280 --> 00:40:30.630 align:start position:0%
operator new i'm just going to put into
the<00:40:29.359><c> global</c><00:40:29.599><c> namespace</c><00:40:30.079><c> like</c><00:40:30.240><c> this</c><00:40:30.319><c> to</c><00:40:30.480><c> make</c>

00:40:30.630 --> 00:40:30.640 align:start position:0%
the global namespace like this to make
 

00:40:30.640 --> 00:40:31.990 align:start position:0%
the global namespace like this to make
sure<00:40:30.880><c> it</c><00:40:30.960><c> works</c><00:40:31.280><c> properly</c>

00:40:31.990 --> 00:40:32.000 align:start position:0%
sure it works properly
 

00:40:32.000 --> 00:40:34.390 align:start position:0%
sure it works properly
so<00:40:32.319><c> operator</c><00:40:32.880><c> new</c><00:40:33.280><c> and</c><00:40:33.359><c> then</c><00:40:33.680><c> into</c><00:40:34.000><c> here</c><00:40:34.240><c> we</c>

00:40:34.390 --> 00:40:34.400 align:start position:0%
so operator new and then into here we
 

00:40:34.400 --> 00:40:35.430 align:start position:0%
so operator new and then into here we
need<00:40:34.560><c> to</c><00:40:34.800><c> provide</c>

00:40:35.430 --> 00:40:35.440 align:start position:0%
need to provide
 

00:40:35.440 --> 00:40:37.190 align:start position:0%
need to provide
the<00:40:35.599><c> amount</c><00:40:35.920><c> of</c><00:40:36.160><c> space</c><00:40:36.640><c> that</c><00:40:36.720><c> we</c><00:40:36.880><c> want</c><00:40:37.040><c> to</c>

00:40:37.190 --> 00:40:37.200 align:start position:0%
the amount of space that we want to
 

00:40:37.200 --> 00:40:38.710 align:start position:0%
the amount of space that we want to
allocate<00:40:37.520><c> so</c><00:40:37.680><c> how</c><00:40:37.839><c> many</c><00:40:38.000><c> bytes</c><00:40:38.240><c> do</c><00:40:38.400><c> we</c><00:40:38.480><c> want</c><00:40:38.640><c> to</c>

00:40:38.710 --> 00:40:38.720 align:start position:0%
allocate so how many bytes do we want to
 

00:40:38.720 --> 00:40:39.349 align:start position:0%
allocate so how many bytes do we want to
allocate

00:40:39.349 --> 00:40:39.359 align:start position:0%
allocate
 

00:40:39.359 --> 00:40:41.030 align:start position:0%
allocate
well<00:40:39.599><c> this</c><00:40:39.760><c> is</c><00:40:39.839><c> going</c><00:40:39.920><c> to</c><00:40:40.000><c> be</c><00:40:40.160><c> new</c><00:40:40.319><c> capacity</c>

00:40:41.030 --> 00:40:41.040 align:start position:0%
well this is going to be new capacity
 

00:40:41.040 --> 00:40:42.470 align:start position:0%
well this is going to be new capacity
times<00:40:41.440><c> the</c><00:40:41.680><c> size</c><00:40:42.160><c> of</c>

00:40:42.470 --> 00:40:42.480 align:start position:0%
times the size of
 

00:40:42.480 --> 00:40:44.630 align:start position:0%
times the size of
our<00:40:42.800><c> type</c><00:40:43.119><c> that</c><00:40:43.280><c> we're</c><00:40:43.599><c> actually</c><00:40:44.000><c> storing</c>

00:40:44.630 --> 00:40:44.640 align:start position:0%
our type that we're actually storing
 

00:40:44.640 --> 00:40:46.230 align:start position:0%
our type that we're actually storing
like<00:40:44.880><c> that</c><00:40:45.200><c> this</c><00:40:45.359><c> is</c><00:40:45.520><c> going</c><00:40:45.680><c> to</c><00:40:45.760><c> return</c>

00:40:46.230 --> 00:40:46.240 align:start position:0%
like that this is going to return
 

00:40:46.240 --> 00:40:48.390 align:start position:0%
like that this is going to return
void<00:40:46.640><c> so</c><00:40:46.800><c> we</c><00:40:46.880><c> need</c><00:40:47.040><c> to</c><00:40:47.119><c> make</c><00:40:47.359><c> sure</c><00:40:47.599><c> in</c><00:40:47.760><c> c</c><00:40:47.920><c> plus</c>

00:40:48.390 --> 00:40:48.400 align:start position:0%
void so we need to make sure in c plus
 

00:40:48.400 --> 00:40:49.589 align:start position:0%
void so we need to make sure in c plus
to<00:40:48.560><c> cast</c><00:40:48.880><c> it</c><00:40:49.040><c> to</c><00:40:49.280><c> a</c><00:40:49.359><c> t</c>

00:40:49.589 --> 00:40:49.599 align:start position:0%
to cast it to a t
 

00:40:49.599 --> 00:40:51.750 align:start position:0%
to cast it to a t
pointer<00:40:50.480><c> same</c><00:40:50.720><c> with</c><00:40:50.880><c> delete</c><00:40:51.359><c> instead</c><00:40:51.599><c> of</c>

00:40:51.750 --> 00:40:51.760 align:start position:0%
pointer same with delete instead of
 

00:40:51.760 --> 00:40:53.270 align:start position:0%
pointer same with delete instead of
calling<00:40:52.079><c> delete</c><00:40:52.480><c> like</c><00:40:52.720><c> this</c>

00:40:53.270 --> 00:40:53.280 align:start position:0%
calling delete like this
 

00:40:53.280 --> 00:40:55.510 align:start position:0%
calling delete like this
we're<00:40:53.520><c> actually</c><00:40:53.839><c> going</c><00:40:54.079><c> to</c><00:40:54.240><c> call</c><00:40:54.640><c> operator</c>

00:40:55.510 --> 00:40:55.520 align:start position:0%
we're actually going to call operator
 

00:40:55.520 --> 00:40:56.550 align:start position:0%
we're actually going to call operator
delete<00:40:56.000><c> and</c><00:40:56.160><c> i'll</c><00:40:56.240><c> just</c>

00:40:56.550 --> 00:40:56.560 align:start position:0%
delete and i'll just
 

00:40:56.560 --> 00:40:58.069 align:start position:0%
delete and i'll just
put<00:40:56.800><c> that</c><00:40:56.880><c> global</c><00:40:57.200><c> namespace</c><00:40:57.680><c> operator</c><00:40:58.000><c> at</c>

00:40:58.069 --> 00:40:58.079 align:start position:0%
put that global namespace operator at
 

00:40:58.079 --> 00:41:00.150 align:start position:0%
put that global namespace operator at
the<00:40:58.240><c> front</c><00:40:58.480><c> there</c><00:40:59.040><c> we're</c><00:40:59.200><c> going</c><00:40:59.440><c> to</c><00:40:59.599><c> delete</c>

00:41:00.150 --> 00:41:00.160 align:start position:0%
the front there we're going to delete
 

00:41:00.160 --> 00:41:02.309 align:start position:0%
the front there we're going to delete
our<00:41:00.640><c> data</c><00:41:01.040><c> block</c><00:41:01.440><c> and</c><00:41:01.520><c> then</c><00:41:01.680><c> we</c><00:41:01.839><c> also</c><00:41:02.000><c> need</c><00:41:02.160><c> to</c>

00:41:02.309 --> 00:41:02.319 align:start position:0%
our data block and then we also need to
 

00:41:02.319 --> 00:41:03.910 align:start position:0%
our data block and then we also need to
specify<00:41:02.800><c> the</c><00:41:03.040><c> size</c><00:41:03.440><c> of</c>

00:41:03.910 --> 00:41:03.920 align:start position:0%
specify the size of
 

00:41:03.920 --> 00:41:05.270 align:start position:0%
specify the size of
memory<00:41:04.240><c> that</c><00:41:04.319><c> we're</c><00:41:04.480><c> deleting</c><00:41:04.960><c> which</c><00:41:05.200><c> of</c>

00:41:05.270 --> 00:41:05.280 align:start position:0%
memory that we're deleting which of
 

00:41:05.280 --> 00:41:07.670 align:start position:0%
memory that we're deleting which of
course<00:41:05.520><c> will</c><00:41:05.760><c> be</c><00:41:06.079><c> our</c><00:41:06.480><c> existing</c><00:41:06.960><c> capacity</c>

00:41:07.670 --> 00:41:07.680 align:start position:0%
course will be our existing capacity
 

00:41:07.680 --> 00:41:09.829 align:start position:0%
course will be our existing capacity
times<00:41:08.000><c> the</c><00:41:08.160><c> size</c><00:41:08.560><c> of</c><00:41:08.960><c> t</c><00:41:09.280><c> now</c><00:41:09.440><c> since</c><00:41:09.680><c> we're</c>

00:41:09.829 --> 00:41:09.839 align:start position:0%
times the size of t now since we're
 

00:41:09.839 --> 00:41:11.349 align:start position:0%
times the size of t now since we're
deleting<00:41:10.160><c> here</c><00:41:10.319><c> we're</c><00:41:10.480><c> not</c><00:41:10.720><c> actually</c><00:41:11.040><c> calling</c>

00:41:11.349 --> 00:41:11.359 align:start position:0%
deleting here we're not actually calling
 

00:41:11.359 --> 00:41:12.950 align:start position:0%
deleting here we're not actually calling
the<00:41:11.440><c> destructor</c><00:41:12.000><c> on</c><00:41:12.240><c> all</c><00:41:12.319><c> of</c><00:41:12.400><c> those</c><00:41:12.640><c> old</c>

00:41:12.950 --> 00:41:12.960 align:start position:0%
the destructor on all of those old
 

00:41:12.960 --> 00:41:13.670 align:start position:0%
the destructor on all of those old
elements

00:41:13.670 --> 00:41:13.680 align:start position:0%
elements
 

00:41:13.680 --> 00:41:16.069 align:start position:0%
elements
so<00:41:13.839><c> that</c><00:41:14.160><c> is</c><00:41:14.319><c> something</c><00:41:14.640><c> that</c><00:41:14.800><c> we</c><00:41:15.200><c> need</c><00:41:15.440><c> to</c><00:41:15.599><c> do</c>

00:41:16.069 --> 00:41:16.079 align:start position:0%
so that is something that we need to do
 

00:41:16.079 --> 00:41:17.670 align:start position:0%
so that is something that we need to do
keep<00:41:16.319><c> in</c><00:41:16.400><c> mind</c><00:41:16.560><c> that</c><00:41:16.720><c> we</c><00:41:16.800><c> have</c><00:41:17.040><c> actually</c>

00:41:17.670 --> 00:41:17.680 align:start position:0%
keep in mind that we have actually
 

00:41:17.680 --> 00:41:19.829 align:start position:0%
keep in mind that we have actually
moved<00:41:18.000><c> them</c><00:41:18.319><c> across</c><00:41:18.880><c> into</c><00:41:19.119><c> this</c><00:41:19.359><c> new</c><00:41:19.520><c> block</c>

00:41:19.829 --> 00:41:19.839 align:start position:0%
moved them across into this new block
 

00:41:19.839 --> 00:41:21.670 align:start position:0%
moved them across into this new block
now<00:41:20.400><c> so</c><00:41:20.640><c> it</c><00:41:20.800><c> should</c><00:41:20.960><c> be</c><00:41:21.119><c> safe</c><00:41:21.359><c> to</c><00:41:21.440><c> call</c><00:41:21.599><c> the</c>

00:41:21.670 --> 00:41:21.680 align:start position:0%
now so it should be safe to call the
 

00:41:21.680 --> 00:41:23.190 align:start position:0%
now so it should be safe to call the
destructor<00:41:22.319><c> on</c><00:41:22.480><c> those</c>

00:41:23.190 --> 00:41:23.200 align:start position:0%
destructor on those
 

00:41:23.200 --> 00:41:25.430 align:start position:0%
destructor on those
so<00:41:23.359><c> i'll</c><00:41:23.520><c> go</c><00:41:23.760><c> through</c><00:41:24.000><c> size</c><00:41:24.400><c> once</c><00:41:24.720><c> again</c><00:41:25.200><c> worth</c>

00:41:25.430 --> 00:41:25.440 align:start position:0%
so i'll go through size once again worth
 

00:41:25.440 --> 00:41:27.190 align:start position:0%
so i'll go through size once again worth
noting<00:41:25.839><c> here</c><00:41:26.000><c> that</c><00:41:26.240><c> it</c><00:41:26.400><c> should</c><00:41:26.640><c> be</c><00:41:26.880><c> our</c>

00:41:27.190 --> 00:41:27.200 align:start position:0%
noting here that it should be our
 

00:41:27.200 --> 00:41:29.510 align:start position:0%
noting here that it should be our
original<00:41:27.760><c> size</c><00:41:28.160><c> in</c><00:41:28.319><c> the</c><00:41:28.400><c> case</c><00:41:28.720><c> of</c><00:41:28.960><c> shrinking</c>

00:41:29.510 --> 00:41:29.520 align:start position:0%
original size in the case of shrinking
 

00:41:29.520 --> 00:41:30.710 align:start position:0%
original size in the case of shrinking
but<00:41:29.760><c> this</c><00:41:29.920><c> isn't</c><00:41:30.160><c> something</c><00:41:30.400><c> we're</c><00:41:30.480><c> going</c><00:41:30.640><c> to</c>

00:41:30.710 --> 00:41:30.720 align:start position:0%
but this isn't something we're going to
 

00:41:30.720 --> 00:41:32.230 align:start position:0%
but this isn't something we're going to
talk<00:41:30.880><c> about</c><00:41:31.119><c> today</c><00:41:31.440><c> because</c><00:41:31.680><c> we</c><00:41:31.839><c> don't</c><00:41:32.000><c> have</c>

00:41:32.230 --> 00:41:32.240 align:start position:0%
talk about today because we don't have
 

00:41:32.240 --> 00:41:34.150 align:start position:0%
talk about today because we don't have
shrinking<00:41:32.720><c> and</c><00:41:32.880><c> all</c><00:41:33.040><c> we're</c><00:41:33.200><c> going</c><00:41:33.359><c> to</c><00:41:33.520><c> do</c><00:41:33.839><c> is</c>

00:41:34.150 --> 00:41:34.160 align:start position:0%
shrinking and all we're going to do is
 

00:41:34.160 --> 00:41:37.030 align:start position:0%
shrinking and all we're going to do is
into<00:41:34.560><c> m</c><00:41:34.720><c> data</c><00:41:35.119><c> i</c><00:41:35.760><c> i</c><00:41:36.000><c> just</c><00:41:36.160><c> want</c><00:41:36.319><c> to</c><00:41:36.560><c> basically</c>

00:41:37.030 --> 00:41:37.040 align:start position:0%
into m data i i just want to basically
 

00:41:37.040 --> 00:41:38.550 align:start position:0%
into m data i i just want to basically
call<00:41:37.359><c> the</c><00:41:37.440><c> destructor</c><00:41:37.920><c> this</c><00:41:38.079><c> is</c><00:41:38.160><c> kind</c><00:41:38.240><c> of</c><00:41:38.319><c> like</c>

00:41:38.550 --> 00:41:38.560 align:start position:0%
call the destructor this is kind of like
 

00:41:38.560 --> 00:41:40.950 align:start position:0%
call the destructor this is kind of like
doing<00:41:38.720><c> a</c><00:41:38.880><c> clear</c><00:41:39.200><c> acceptation</c><00:41:40.000><c> clear</c><00:41:40.240><c> on</c><00:41:40.400><c> mdata</c>

00:41:40.950 --> 00:41:40.960 align:start position:0%
doing a clear acceptation clear on mdata
 

00:41:40.960 --> 00:41:42.230 align:start position:0%
doing a clear acceptation clear on mdata
in<00:41:41.119><c> fact</c><00:41:41.440><c> i</c><00:41:41.599><c> think</c>

00:41:42.230 --> 00:41:42.240 align:start position:0%
in fact i think
 

00:41:42.240 --> 00:41:44.710 align:start position:0%
in fact i think
clear<00:41:42.560><c> does</c><00:41:42.880><c> exactly</c><00:41:43.520><c> what</c><00:41:43.680><c> we</c><00:41:43.920><c> want</c><00:41:44.480><c> i</c><00:41:44.560><c> mean</c>

00:41:44.710 --> 00:41:44.720 align:start position:0%
clear does exactly what we want i mean
 

00:41:44.720 --> 00:41:46.390 align:start position:0%
clear does exactly what we want i mean
it<00:41:44.800><c> also</c><00:41:45.040><c> sets</c><00:41:45.280><c> the</c><00:41:45.359><c> size</c><00:41:45.680><c> to</c><00:41:45.839><c> zero</c>

00:41:46.390 --> 00:41:46.400 align:start position:0%
it also sets the size to zero
 

00:41:46.400 --> 00:41:47.990 align:start position:0%
it also sets the size to zero
so<00:41:46.640><c> to</c><00:41:46.720><c> make</c><00:41:46.880><c> this</c><00:41:47.040><c> a</c><00:41:47.119><c> little</c><00:41:47.280><c> bit</c><00:41:47.440><c> more</c><00:41:47.599><c> simple</c>

00:41:47.990 --> 00:41:48.000 align:start position:0%
so to make this a little bit more simple
 

00:41:48.000 --> 00:41:50.390 align:start position:0%
so to make this a little bit more simple
we<00:41:48.240><c> could</c><00:41:48.400><c> just</c><00:41:48.720><c> call</c><00:41:49.119><c> clear</c><00:41:49.520><c> like</c><00:41:49.839><c> that</c>

00:41:50.390 --> 00:41:50.400 align:start position:0%
we could just call clear like that
 

00:41:50.400 --> 00:41:52.309 align:start position:0%
we could just call clear like that
everything<00:41:50.880><c> is</c><00:41:51.040><c> safe</c><00:41:51.359><c> in</c><00:41:51.520><c> the</c><00:41:51.599><c> new</c><00:41:51.839><c> block</c>

00:41:52.309 --> 00:41:52.319 align:start position:0%
everything is safe in the new block
 

00:41:52.319 --> 00:41:53.750 align:start position:0%
everything is safe in the new block
anyway<00:41:52.800><c> and</c><00:41:52.880><c> now</c><00:41:53.040><c> that</c><00:41:53.200><c> we've</c><00:41:53.280><c> done</c><00:41:53.440><c> that</c><00:41:53.599><c> we</c>

00:41:53.750 --> 00:41:53.760 align:start position:0%
anyway and now that we've done that we
 

00:41:53.760 --> 00:41:55.270 align:start position:0%
anyway and now that we've done that we
of<00:41:53.839><c> course</c><00:41:54.079><c> reassigned</c><00:41:54.560><c> data</c><00:41:54.960><c> and</c>

00:41:55.270 --> 00:41:55.280 align:start position:0%
of course reassigned data and
 

00:41:55.280 --> 00:41:57.109 align:start position:0%
of course reassigned data and
new<00:41:55.440><c> capacity</c><00:41:56.079><c> the</c><00:41:56.160><c> only</c><00:41:56.400><c> thing</c><00:41:56.640><c> that</c><00:41:56.960><c> that</c>

00:41:57.109 --> 00:41:57.119 align:start position:0%
new capacity the only thing that that
 

00:41:57.119 --> 00:41:58.630 align:start position:0%
new capacity the only thing that that
clear<00:41:57.440><c> has</c><00:41:57.520><c> actually</c><00:41:57.760><c> done</c><00:41:58.000><c> is</c><00:41:58.079><c> also</c><00:41:58.319><c> set</c><00:41:58.480><c> our</c>

00:41:58.630 --> 00:41:58.640 align:start position:0%
clear has actually done is also set our
 

00:41:58.640 --> 00:41:59.589 align:start position:0%
clear has actually done is also set our
size<00:41:58.880><c> to</c><00:41:59.040><c> zero</c>

00:41:59.589 --> 00:41:59.599 align:start position:0%
size to zero
 

00:41:59.599 --> 00:42:01.109 align:start position:0%
size to zero
which<00:41:59.920><c> is</c><00:42:00.000><c> slightly</c><00:42:00.319><c> problematic</c><00:42:01.040><c> i'm</c>

00:42:01.109 --> 00:42:01.119 align:start position:0%
which is slightly problematic i'm
 

00:42:01.119 --> 00:42:02.390 align:start position:0%
which is slightly problematic i'm
actually<00:42:01.359><c> going</c><00:42:01.440><c> to</c><00:42:01.520><c> go</c><00:42:01.599><c> back</c><00:42:01.920><c> on</c><00:42:02.000><c> that</c><00:42:02.240><c> i'm</c>

00:42:02.390 --> 00:42:02.400 align:start position:0%
actually going to go back on that i'm
 

00:42:02.400 --> 00:42:03.910 align:start position:0%
actually going to go back on that i'm
actually<00:42:02.560><c> just</c><00:42:02.640><c> going</c><00:42:02.800><c> to</c><00:42:02.880><c> copy</c><00:42:03.280><c> this</c>

00:42:03.910 --> 00:42:03.920 align:start position:0%
actually just going to copy this
 

00:42:03.920 --> 00:42:05.510 align:start position:0%
actually just going to copy this
and<00:42:04.079><c> replace</c><00:42:04.480><c> it</c><00:42:04.560><c> with</c><00:42:04.720><c> clear</c><00:42:05.040><c> here</c><00:42:05.200><c> just</c><00:42:05.359><c> that</c>

00:42:05.510 --> 00:42:05.520 align:start position:0%
and replace it with clear here just that
 

00:42:05.520 --> 00:42:07.430 align:start position:0%
and replace it with clear here just that
we<00:42:05.839><c> leave</c><00:42:06.079><c> our</c><00:42:06.400><c> size</c><00:42:06.800><c> intact</c>

00:42:07.430 --> 00:42:07.440 align:start position:0%
we leave our size intact
 

00:42:07.440 --> 00:42:09.910 align:start position:0%
we leave our size intact
and<00:42:07.520><c> that</c><00:42:07.760><c> should</c><00:42:07.920><c> be</c><00:42:08.160><c> the</c><00:42:08.480><c> end</c><00:42:08.800><c> of</c><00:42:09.040><c> this</c><00:42:09.520><c> new</c>

00:42:09.910 --> 00:42:09.920 align:start position:0%
and that should be the end of this new
 

00:42:09.920 --> 00:42:11.990 align:start position:0%
and that should be the end of this new
realic<00:42:10.480><c> function</c><00:42:10.880><c> and</c><00:42:11.040><c> finally</c><00:42:11.440><c> of</c><00:42:11.520><c> course</c>

00:42:11.990 --> 00:42:12.000 align:start position:0%
realic function and finally of course
 

00:42:12.000 --> 00:42:14.230 align:start position:0%
realic function and finally of course
with<00:42:12.560><c> this</c><00:42:12.800><c> delete</c><00:42:13.359><c> up</c><00:42:13.520><c> here</c><00:42:13.839><c> instead</c><00:42:14.160><c> of</c>

00:42:14.230 --> 00:42:14.240 align:start position:0%
with this delete up here instead of
 

00:42:14.240 --> 00:42:16.550 align:start position:0%
with this delete up here instead of
doing<00:42:14.880><c> that</c><00:42:15.200><c> kind</c><00:42:15.359><c> of</c><00:42:15.520><c> array</c><00:42:15.839><c> delete</c><00:42:16.240><c> operator</c>

00:42:16.550 --> 00:42:16.560 align:start position:0%
doing that kind of array delete operator
 

00:42:16.560 --> 00:42:17.510 align:start position:0%
doing that kind of array delete operator
there<00:42:16.720><c> we're</c><00:42:16.880><c> going</c><00:42:17.040><c> to</c><00:42:17.200><c> call</c>

00:42:17.510 --> 00:42:17.520 align:start position:0%
there we're going to call
 

00:42:17.520 --> 00:42:19.990 align:start position:0%
there we're going to call
operator<00:42:17.920><c> delete</c><00:42:18.640><c> mdata</c><00:42:19.359><c> and</c><00:42:19.520><c> then</c><00:42:19.839><c> m</c>

00:42:19.990 --> 00:42:20.000 align:start position:0%
operator delete mdata and then m
 

00:42:20.000 --> 00:42:21.589 align:start position:0%
operator delete mdata and then m
capacity<00:42:20.640><c> time</c><00:42:20.960><c> size</c><00:42:21.200><c> of</c><00:42:21.359><c> t</c>

00:42:21.589 --> 00:42:21.599 align:start position:0%
capacity time size of t
 

00:42:21.599 --> 00:42:24.230 align:start position:0%
capacity time size of t
this<00:42:21.760><c> will</c><00:42:21.920><c> not</c><00:42:22.160><c> call</c><00:42:22.400><c> any</c><00:42:22.640><c> destructors</c><00:42:23.599><c> clear</c>

00:42:24.230 --> 00:42:24.240 align:start position:0%
this will not call any destructors clear
 

00:42:24.240 --> 00:42:25.589 align:start position:0%
this will not call any destructors clear
is<00:42:24.319><c> what</c><00:42:24.480><c> we'll</c><00:42:24.640><c> go</c><00:42:24.800><c> through</c><00:42:25.040><c> and</c><00:42:25.200><c> call</c>

00:42:25.589 --> 00:42:25.599 align:start position:0%
is what we'll go through and call
 

00:42:25.599 --> 00:42:27.910 align:start position:0%
is what we'll go through and call
all<00:42:25.839><c> of</c><00:42:26.000><c> the</c><00:42:26.160><c> destructors</c><00:42:27.280><c> so</c><00:42:27.440><c> now</c><00:42:27.599><c> if</c><00:42:27.680><c> we</c><00:42:27.760><c> go</c>

00:42:27.910 --> 00:42:27.920 align:start position:0%
all of the destructors so now if we go
 

00:42:27.920 --> 00:42:30.230 align:start position:0%
all of the destructors so now if we go
back<00:42:28.079><c> to</c><00:42:28.160><c> our</c><00:42:28.720><c> original</c><00:42:29.280><c> scenario</c><00:42:29.839><c> let's</c><00:42:30.000><c> hit</c>

00:42:30.230 --> 00:42:30.240 align:start position:0%
back to our original scenario let's hit
 

00:42:30.240 --> 00:42:32.230 align:start position:0%
back to our original scenario let's hit
f5<00:42:30.640><c> and</c><00:42:30.800><c> hopefully</c><00:42:31.359><c> we</c><00:42:31.440><c> won't</c><00:42:31.680><c> get</c><00:42:31.920><c> any</c>

00:42:32.230 --> 00:42:32.240 align:start position:0%
f5 and hopefully we won't get any
 

00:42:32.240 --> 00:42:33.030 align:start position:0%
f5 and hopefully we won't get any
crashes

00:42:33.030 --> 00:42:33.040 align:start position:0%
crashes
 

00:42:33.040 --> 00:42:34.550 align:start position:0%
crashes
and<00:42:33.200><c> you</c><00:42:33.280><c> can</c><00:42:33.440><c> see</c><00:42:33.680><c> our</c><00:42:33.920><c> program</c><00:42:34.240><c> runs</c>

00:42:34.550 --> 00:42:34.560 align:start position:0%
and you can see our program runs
 

00:42:34.560 --> 00:42:36.870 align:start position:0%
and you can see our program runs
successfully<00:42:35.520><c> no</c><00:42:35.680><c> crashes</c><00:42:36.079><c> whatsoever</c><00:42:36.640><c> we're</c>

00:42:36.870 --> 00:42:36.880 align:start position:0%
successfully no crashes whatsoever we're
 

00:42:36.880 --> 00:42:38.390 align:start position:0%
successfully no crashes whatsoever we're
still<00:42:37.119><c> firing</c><00:42:37.440><c> the</c><00:42:37.520><c> destructor</c>

00:42:38.390 --> 00:42:38.400 align:start position:0%
still firing the destructor
 

00:42:38.400 --> 00:42:40.390 align:start position:0%
still firing the destructor
wherever<00:42:38.800><c> we</c><00:42:38.960><c> need</c><00:42:39.200><c> and</c><00:42:39.359><c> that</c><00:42:39.760><c> should</c>

00:42:40.390 --> 00:42:40.400 align:start position:0%
wherever we need and that should
 

00:42:40.400 --> 00:42:42.069 align:start position:0%
wherever we need and that should
emphasis<00:42:40.880><c> on</c><00:42:41.280><c> should</c>

00:42:42.069 --> 00:42:42.079 align:start position:0%
emphasis on should
 

00:42:42.079 --> 00:42:45.670 align:start position:0%
emphasis on should
be<00:42:42.640><c> bug</c><00:42:43.200><c> free</c><00:42:43.680><c> so</c><00:42:43.920><c> that</c><00:42:44.319><c> now</c><00:42:44.720><c> hopefully</c><00:42:45.359><c> is</c>

00:42:45.670 --> 00:42:45.680 align:start position:0%
be bug free so that now hopefully is
 

00:42:45.680 --> 00:42:48.630 align:start position:0%
be bug free so that now hopefully is
our<00:42:46.160><c> more</c><00:42:46.400><c> or</c><00:42:46.560><c> less</c><00:42:46.960><c> proper</c><00:42:47.760><c> implementation</c>

00:42:48.630 --> 00:42:48.640 align:start position:0%
our more or less proper implementation
 

00:42:48.640 --> 00:42:49.190 align:start position:0%
our more or less proper implementation
of

00:42:49.190 --> 00:42:49.200 align:start position:0%
of
 

00:42:49.200 --> 00:42:52.230 align:start position:0%
of
a<00:42:49.440><c> basic</c><00:42:50.160><c> vector</c><00:42:50.880><c> class</c><00:42:51.440><c> kudos</c><00:42:51.839><c> to</c><00:42:52.000><c> those</c><00:42:52.160><c> of</c>

00:42:52.230 --> 00:42:52.240 align:start position:0%
a basic vector class kudos to those of
 

00:42:52.240 --> 00:42:53.349 align:start position:0%
a basic vector class kudos to those of
you<00:42:52.480><c> who</c><00:42:52.720><c> picked</c><00:42:53.040><c> up</c>

00:42:53.349 --> 00:42:53.359 align:start position:0%
you who picked up
 

00:42:53.359 --> 00:42:55.349 align:start position:0%
you who picked up
on<00:42:53.599><c> that</c><00:42:53.839><c> bug</c><00:42:54.319><c> since</c><00:42:54.560><c> we're</c><00:42:54.720><c> already</c><00:42:55.040><c> here</c><00:42:55.280><c> and</c>

00:42:55.349 --> 00:42:55.359 align:start position:0%
on that bug since we're already here and
 

00:42:55.359 --> 00:42:57.109 align:start position:0%
on that bug since we're already here and
this<00:42:55.599><c> video</c><00:42:55.760><c> is</c><00:42:55.920><c> already</c><00:42:56.240><c> way</c><00:42:56.480><c> too</c><00:42:56.720><c> long</c>

00:42:57.109 --> 00:42:57.119 align:start position:0%
this video is already way too long
 

00:42:57.119 --> 00:42:59.430 align:start position:0%
this video is already way too long
let's<00:42:57.359><c> quickly</c><00:42:57.680><c> do</c><00:42:57.920><c> a</c><00:42:58.079><c> test</c><00:42:58.560><c> of</c><00:42:58.800><c> this</c><00:42:59.040><c> vector</c>

00:42:59.430 --> 00:42:59.440 align:start position:0%
let's quickly do a test of this vector
 

00:42:59.440 --> 00:43:01.670 align:start position:0%
let's quickly do a test of this vector
on<00:42:59.599><c> primitive</c><00:43:00.079><c> types</c><00:43:00.400><c> this</c><00:43:00.560><c> is</c><00:43:00.720><c> also</c><00:43:01.040><c> a</c><00:43:01.119><c> really</c>

00:43:01.670 --> 00:43:01.680 align:start position:0%
on primitive types this is also a really
 

00:43:01.680 --> 00:43:03.430 align:start position:0%
on primitive types this is also a really
useful<00:43:02.079><c> thing</c><00:43:02.240><c> to</c><00:43:02.400><c> add</c><00:43:02.640><c> to</c><00:43:02.720><c> your</c><00:43:02.880><c> test</c><00:43:03.200><c> i'll</c>

00:43:03.430 --> 00:43:03.440 align:start position:0%
useful thing to add to your test i'll
 

00:43:03.440 --> 00:43:05.349 align:start position:0%
useful thing to add to your test i'll
say<00:43:03.680><c> like</c><00:43:04.000><c> int</c><00:43:04.319><c> vector</c><00:43:04.720><c> or</c><00:43:04.800><c> something</c><00:43:05.119><c> like</c>

00:43:05.349 --> 00:43:05.359 align:start position:0%
say like int vector or something like
 

00:43:05.359 --> 00:43:05.829 align:start position:0%
say like int vector or something like
that

00:43:05.829 --> 00:43:05.839 align:start position:0%
that
 

00:43:05.839 --> 00:43:07.270 align:start position:0%
that
just<00:43:06.079><c> because</c><00:43:06.319><c> when</c><00:43:06.480><c> you're</c><00:43:06.640><c> working</c><00:43:07.119><c> with</c>

00:43:07.270 --> 00:43:07.280 align:start position:0%
just because when you're working with
 

00:43:07.280 --> 00:43:08.870 align:start position:0%
just because when you're working with
class<00:43:07.680><c> types</c><00:43:08.000><c> it's</c><00:43:08.160><c> sometimes</c><00:43:08.560><c> easy</c><00:43:08.800><c> to</c>

00:43:08.870 --> 00:43:08.880 align:start position:0%
class types it's sometimes easy to
 

00:43:08.880 --> 00:43:10.150 align:start position:0%
class types it's sometimes easy to
forget<00:43:09.280><c> things</c><00:43:09.520><c> like</c><00:43:09.760><c> maybe</c>

00:43:10.150 --> 00:43:10.160 align:start position:0%
forget things like maybe
 

00:43:10.160 --> 00:43:12.710 align:start position:0%
forget things like maybe
integers<00:43:10.560><c> don't</c><00:43:10.880><c> have</c><00:43:11.440><c> destructors</c><00:43:12.240><c> and</c><00:43:12.480><c> well</c>

00:43:12.710 --> 00:43:12.720 align:start position:0%
integers don't have destructors and well
 

00:43:12.720 --> 00:43:14.309 align:start position:0%
integers don't have destructors and well
they<00:43:12.880><c> don't</c><00:43:13.200><c> but</c><00:43:13.359><c> this</c><00:43:13.520><c> was</c><00:43:13.760><c> this</c><00:43:13.920><c> code</c><00:43:14.160><c> will</c>

00:43:14.309 --> 00:43:14.319 align:start position:0%
they don't but this was this code will
 

00:43:14.319 --> 00:43:15.510 align:start position:0%
they don't but this was this code will
still<00:43:14.560><c> work</c><00:43:14.880><c> because</c>

00:43:15.510 --> 00:43:15.520 align:start position:0%
still work because
 

00:43:15.520 --> 00:43:17.349 align:start position:0%
still work because
they<00:43:15.680><c> have</c><00:43:15.839><c> like</c><00:43:16.079><c> a</c><00:43:16.160><c> default</c><00:43:16.800><c> there's</c><00:43:17.040><c> a</c><00:43:17.119><c> whole</c>

00:43:17.349 --> 00:43:17.359 align:start position:0%
they have like a default there's a whole
 

00:43:17.359 --> 00:43:18.630 align:start position:0%
they have like a default there's a whole
thing<00:43:17.520><c> about</c><00:43:17.760><c> it</c><00:43:17.839><c> which</c><00:43:18.000><c> we're</c><00:43:18.160><c> not</c><00:43:18.319><c> going</c><00:43:18.560><c> to</c>

00:43:18.630 --> 00:43:18.640 align:start position:0%
thing about it which we're not going to
 

00:43:18.640 --> 00:43:20.710 align:start position:0%
thing about it which we're not going to
get<00:43:18.880><c> into</c><00:43:19.119><c> today</c><00:43:19.440><c> but</c><00:43:19.599><c> if</c><00:43:19.760><c> i</c><00:43:19.839><c> push</c><00:43:20.079><c> back</c><00:43:20.319><c> like</c>

00:43:20.710 --> 00:43:20.720 align:start position:0%
get into today but if i push back like
 

00:43:20.720 --> 00:43:23.589 align:start position:0%
get into today but if i push back like
five<00:43:21.280><c> or</c><00:43:21.839><c> maybe</c><00:43:22.160><c> like</c><00:43:22.400><c> in</c><00:43:22.560><c> place</c><00:43:22.960><c> back</c><00:43:23.359><c> like</c>

00:43:23.589 --> 00:43:23.599 align:start position:0%
five or maybe like in place back like
 

00:43:23.599 --> 00:43:24.790 align:start position:0%
five or maybe like in place back like
something<00:43:24.079><c> else</c>

00:43:24.790 --> 00:43:24.800 align:start position:0%
something else
 

00:43:24.800 --> 00:43:27.030 align:start position:0%
something else
you<00:43:24.960><c> know</c><00:43:25.200><c> let's</c><00:43:25.520><c> maybe</c><00:43:26.000><c> uh</c><00:43:26.319><c> add</c><00:43:26.560><c> enough</c><00:43:26.880><c> to</c>

00:43:27.030 --> 00:43:27.040 align:start position:0%
you know let's maybe uh add enough to
 

00:43:27.040 --> 00:43:29.430 align:start position:0%
you know let's maybe uh add enough to
cause<00:43:27.280><c> a</c><00:43:27.359><c> reallocation</c><00:43:28.319><c> let's</c><00:43:28.640><c> try</c><00:43:28.960><c> and</c><00:43:29.119><c> do</c>

00:43:29.430 --> 00:43:29.440 align:start position:0%
cause a reallocation let's try and do
 

00:43:29.440 --> 00:43:33.030 align:start position:0%
cause a reallocation let's try and do
a<00:43:29.760><c> pop</c><00:43:30.079><c> back</c><00:43:30.640><c> like</c><00:43:30.960><c> that</c><00:43:31.280><c> and</c><00:43:31.440><c> maybe</c><00:43:32.319><c> also</c><00:43:32.720><c> a</c>

00:43:33.030 --> 00:43:33.040 align:start position:0%
a pop back like that and maybe also a
 

00:43:33.040 --> 00:43:35.829 align:start position:0%
a pop back like that and maybe also a
clear<00:43:34.240><c> and</c><00:43:34.560><c> this</c><00:43:34.800><c> would</c><00:43:35.280><c> this</c><00:43:35.520><c> is</c><00:43:35.599><c> just</c>

00:43:35.829 --> 00:43:35.839 align:start position:0%
clear and this would this is just
 

00:43:35.839 --> 00:43:36.870 align:start position:0%
clear and this would this is just
another<00:43:36.160><c> little</c><00:43:36.480><c> test</c>

00:43:36.870 --> 00:43:36.880 align:start position:0%
another little test
 

00:43:36.880 --> 00:43:38.390 align:start position:0%
another little test
to<00:43:37.119><c> make</c><00:43:37.280><c> sure</c><00:43:37.520><c> that</c><00:43:37.680><c> everything</c><00:43:38.079><c> does</c><00:43:38.319><c> in</c>

00:43:38.390 --> 00:43:38.400 align:start position:0%
to make sure that everything does in
 

00:43:38.400 --> 00:43:40.309 align:start position:0%
to make sure that everything does in
fact<00:43:39.040><c> run</c><00:43:39.280><c> and</c><00:43:39.359><c> compile</c><00:43:39.760><c> correctly</c><00:43:40.160><c> when</c>

00:43:40.309 --> 00:43:40.319 align:start position:0%
fact run and compile correctly when
 

00:43:40.319 --> 00:43:41.910 align:start position:0%
fact run and compile correctly when
we're<00:43:40.480><c> dealing</c><00:43:40.720><c> with</c><00:43:40.960><c> integers</c>

00:43:41.910 --> 00:43:41.920 align:start position:0%
we're dealing with integers
 

00:43:41.920 --> 00:43:44.230 align:start position:0%
we're dealing with integers
since<00:43:42.240><c> integers</c><00:43:42.640><c> are</c><00:43:42.720><c> easy</c><00:43:43.040><c> to</c><00:43:43.280><c> also</c><00:43:43.760><c> kind</c><00:43:44.000><c> of</c>

00:43:44.230 --> 00:43:44.240 align:start position:0%
since integers are easy to also kind of
 

00:43:44.240 --> 00:43:46.390 align:start position:0%
since integers are easy to also kind of
print<00:43:44.880><c> we</c><00:43:45.040><c> can</c><00:43:45.280><c> chuck</c><00:43:45.520><c> in</c><00:43:45.680><c> a</c><00:43:45.760><c> little</c><00:43:46.000><c> print</c>

00:43:46.390 --> 00:43:46.400 align:start position:0%
print we can chuck in a little print
 

00:43:46.400 --> 00:43:48.390 align:start position:0%
print we can chuck in a little print
vector

00:43:48.390 --> 00:43:48.400 align:start position:0%
vector
 

00:43:48.400 --> 00:43:50.150 align:start position:0%
vector
in<00:43:48.560><c> vector</c><00:43:48.880><c> like</c><00:43:49.119><c> that</c><00:43:49.440><c> and</c><00:43:49.680><c> our</c><00:43:49.760><c> template</c>

00:43:50.150 --> 00:43:50.160 align:start position:0%
in vector like that and our template
 

00:43:50.160 --> 00:43:51.589 align:start position:0%
in vector like that and our template
function<00:43:50.480><c> should</c><00:43:50.720><c> take</c><00:43:50.880><c> care</c><00:43:51.040><c> of</c><00:43:51.200><c> that</c><00:43:51.359><c> let's</c>

00:43:51.589 --> 00:43:51.599 align:start position:0%
function should take care of that let's
 

00:43:51.599 --> 00:43:52.470 align:start position:0%
function should take care of that let's
check<00:43:51.760><c> it</c><00:43:51.920><c> out</c>

00:43:52.470 --> 00:43:52.480 align:start position:0%
check it out
 

00:43:52.480 --> 00:43:53.990 align:start position:0%
check it out
and<00:43:52.640><c> there</c><00:43:52.800><c> we</c><00:43:52.960><c> go</c><00:43:53.119><c> we</c><00:43:53.280><c> have</c><00:43:53.440><c> our</c><00:43:53.599><c> integers</c>

00:43:53.990 --> 00:43:54.000 align:start position:0%
and there we go we have our integers
 

00:43:54.000 --> 00:43:55.670 align:start position:0%
and there we go we have our integers
here<00:43:54.319><c> and</c><00:43:54.480><c> here</c><00:43:55.040><c> everything</c>

00:43:55.670 --> 00:43:55.680 align:start position:0%
here and here everything
 

00:43:55.680 --> 00:43:57.670 align:start position:0%
here and here everything
seems<00:43:55.920><c> to</c><00:43:56.079><c> be</c><00:43:56.160><c> running</c><00:43:56.480><c> well</c><00:43:56.800><c> so</c><00:43:57.040><c> that</c><00:43:57.440><c> is</c>

00:43:57.670 --> 00:43:57.680 align:start position:0%
seems to be running well so that is
 

00:43:57.680 --> 00:44:00.069 align:start position:0%
seems to be running well so that is
hopefully<00:43:58.560><c> the</c><00:43:58.800><c> end</c><00:43:58.960><c> of</c><00:43:59.040><c> the</c><00:43:59.200><c> vector</c><00:43:59.520><c> class</c>

00:44:00.069 --> 00:44:00.079 align:start position:0%
hopefully the end of the vector class
 

00:44:00.079 --> 00:44:02.390 align:start position:0%
hopefully the end of the vector class
for<00:44:00.400><c> now</c><00:44:00.640><c> congratulations</c><00:44:01.599><c> if</c><00:44:01.680><c> you</c><00:44:01.839><c> made</c><00:44:02.079><c> it</c>

00:44:02.390 --> 00:44:02.400 align:start position:0%
for now congratulations if you made it
 

00:44:02.400 --> 00:44:03.190 align:start position:0%
for now congratulations if you made it
this<00:44:02.880><c> far</c>

00:44:03.190 --> 00:44:03.200 align:start position:0%
this far
 

00:44:03.200 --> 00:44:04.470 align:start position:0%
this far
anyway<00:44:03.440><c> i</c><00:44:03.440><c> hope</c><00:44:03.599><c> you</c><00:44:03.680><c> guys</c><00:44:04.000><c> enjoyed</c><00:44:04.319><c> this</c>

00:44:04.470 --> 00:44:04.480 align:start position:0%
anyway i hope you guys enjoyed this
 

00:44:04.480 --> 00:44:05.829 align:start position:0%
anyway i hope you guys enjoyed this
video<00:44:04.640><c> if</c><00:44:04.720><c> you</c><00:44:04.800><c> did</c><00:44:04.960><c> please</c><00:44:05.200><c> don't</c><00:44:05.359><c> forget</c><00:44:05.680><c> to</c>

00:44:05.829 --> 00:44:05.839 align:start position:0%
video if you did please don't forget to
 

00:44:05.839 --> 00:44:07.750 align:start position:0%
video if you did please don't forget to
hit<00:44:06.079><c> the</c><00:44:06.240><c> like</c><00:44:06.560><c> button</c><00:44:06.960><c> as</c><00:44:07.200><c> i</c><00:44:07.280><c> said</c><00:44:07.520><c> there</c><00:44:07.680><c> are</c>

00:44:07.750 --> 00:44:07.760 align:start position:0%
hit the like button as i said there are
 

00:44:07.760 --> 00:44:09.510 align:start position:0%
hit the like button as i said there are
so<00:44:07.920><c> many</c><00:44:08.160><c> more</c><00:44:08.400><c> features</c><00:44:08.880><c> i</c><00:44:08.960><c> would</c><00:44:09.119><c> want</c><00:44:09.359><c> to</c>

00:44:09.510 --> 00:44:09.520 align:start position:0%
so many more features i would want to
 

00:44:09.520 --> 00:44:11.270 align:start position:0%
so many more features i would want to
add<00:44:09.680><c> to</c><00:44:09.839><c> this</c><00:44:10.000><c> class</c><00:44:10.319><c> such</c><00:44:10.560><c> as</c><00:44:10.720><c> the</c><00:44:10.880><c> erase</c>

00:44:11.270 --> 00:44:11.280 align:start position:0%
add to this class such as the erase
 

00:44:11.280 --> 00:44:13.030 align:start position:0%
add to this class such as the erase
function<00:44:11.680><c> but</c><00:44:11.920><c> also</c><00:44:12.240><c> iterators</c><00:44:12.800><c> we</c><00:44:12.880><c> haven't</c>

00:44:13.030 --> 00:44:13.040 align:start position:0%
function but also iterators we haven't
 

00:44:13.040 --> 00:44:14.230 align:start position:0%
function but also iterators we haven't
covered<00:44:13.359><c> iterators</c>

00:44:14.230 --> 00:44:14.240 align:start position:0%
covered iterators
 

00:44:14.240 --> 00:44:15.589 align:start position:0%
covered iterators
yet<00:44:14.560><c> i'm</c><00:44:14.640><c> going</c><00:44:14.720><c> to</c><00:44:14.800><c> make</c><00:44:14.960><c> a</c><00:44:15.040><c> video</c><00:44:15.280><c> on</c><00:44:15.359><c> that</c>

00:44:15.589 --> 00:44:15.599 align:start position:0%
yet i'm going to make a video on that
 

00:44:15.599 --> 00:44:17.910 align:start position:0%
yet i'm going to make a video on that
very<00:44:15.839><c> soon</c><00:44:16.240><c> in</c><00:44:16.319><c> the</c><00:44:16.400><c> future</c><00:44:16.800><c> and</c><00:44:16.960><c> once</c><00:44:17.200><c> we</c><00:44:17.440><c> do</c>

00:44:17.910 --> 00:44:17.920 align:start position:0%
very soon in the future and once we do
 

00:44:17.920 --> 00:44:19.910 align:start position:0%
very soon in the future and once we do
i<00:44:18.000><c> want</c><00:44:18.240><c> to</c><00:44:18.319><c> revisit</c><00:44:18.800><c> both</c><00:44:19.040><c> the</c><00:44:19.200><c> array</c><00:44:19.440><c> class</c>

00:44:19.910 --> 00:44:19.920 align:start position:0%
i want to revisit both the array class
 

00:44:19.920 --> 00:44:21.910 align:start position:0%
i want to revisit both the array class
and<00:44:20.079><c> this</c><00:44:20.319><c> class</c><00:44:20.800><c> to</c><00:44:21.040><c> make</c><00:44:21.280><c> it</c><00:44:21.440><c> work</c><00:44:21.680><c> with</c>

00:44:21.910 --> 00:44:21.920 align:start position:0%
and this class to make it work with
 

00:44:21.920 --> 00:44:22.710 align:start position:0%
and this class to make it work with
things<00:44:22.240><c> like</c>

00:44:22.710 --> 00:44:22.720 align:start position:0%
things like
 

00:44:22.720 --> 00:44:24.470 align:start position:0%
things like
range<00:44:23.040><c> based</c><00:44:23.280><c> for</c><00:44:23.520><c> loops</c><00:44:23.920><c> but</c><00:44:24.079><c> anyway</c><00:44:24.319><c> i</c><00:44:24.319><c> hope</c>

00:44:24.470 --> 00:44:24.480 align:start position:0%
range based for loops but anyway i hope
 

00:44:24.480 --> 00:44:25.829 align:start position:0%
range based for loops but anyway i hope
this<00:44:24.640><c> video</c><00:44:24.880><c> was</c><00:44:25.119><c> helpful</c><00:44:25.520><c> and</c><00:44:25.599><c> that</c><00:44:25.680><c> you</c>

00:44:25.829 --> 00:44:25.839 align:start position:0%
this video was helpful and that you
 

00:44:25.839 --> 00:44:27.109 align:start position:0%
this video was helpful and that you
learned<00:44:26.160><c> something</c><00:44:26.560><c> new</c>

00:44:27.109 --> 00:44:27.119 align:start position:0%
learned something new
 

00:44:27.119 --> 00:44:29.349 align:start position:0%
learned something new
let<00:44:27.280><c> me</c><00:44:27.359><c> know</c><00:44:27.599><c> in</c><00:44:27.760><c> the</c><00:44:28.000><c> comments</c><00:44:28.480><c> below</c><00:44:28.960><c> how</c>

00:44:29.349 --> 00:44:29.359 align:start position:0%
let me know in the comments below how
 

00:44:29.359 --> 00:44:31.109 align:start position:0%
let me know in the comments below how
writing<00:44:29.680><c> your</c><00:44:29.839><c> own</c><00:44:30.000><c> implementation</c><00:44:30.640><c> of</c><00:44:30.720><c> this</c>

00:44:31.109 --> 00:44:31.119 align:start position:0%
writing your own implementation of this
 

00:44:31.119 --> 00:44:33.829 align:start position:0%
writing your own implementation of this
went<00:44:31.839><c> and</c><00:44:32.240><c> how</c><00:44:32.400><c> it</c><00:44:32.640><c> compared</c><00:44:33.119><c> to</c><00:44:33.280><c> the</c><00:44:33.440><c> solution</c>

00:44:33.829 --> 00:44:33.839 align:start position:0%
went and how it compared to the solution
 

00:44:33.839 --> 00:44:34.790 align:start position:0%
went and how it compared to the solution
that<00:44:34.079><c> i</c><00:44:34.319><c> gave</c>

00:44:34.790 --> 00:44:34.800 align:start position:0%
that i gave
 

00:44:34.800 --> 00:44:36.710 align:start position:0%
that i gave
here<00:44:35.280><c> and</c><00:44:35.599><c> if</c><00:44:35.760><c> you're</c><00:44:36.000><c> feeling</c><00:44:36.319><c> like</c><00:44:36.480><c> doing</c>

00:44:36.710 --> 00:44:36.720 align:start position:0%
here and if you're feeling like doing
 

00:44:36.720 --> 00:44:38.230 align:start position:0%
here and if you're feeling like doing
some<00:44:36.880><c> bonus</c><00:44:37.200><c> work</c><00:44:37.520><c> definitely</c>

00:44:38.230 --> 00:44:38.240 align:start position:0%
some bonus work definitely
 

00:44:38.240 --> 00:44:39.990 align:start position:0%
some bonus work definitely
take<00:44:38.560><c> a</c><00:44:38.640><c> look</c><00:44:38.880><c> at</c><00:44:39.040><c> implementing</c><00:44:39.680><c> both</c><00:44:39.920><c> the</c>

00:44:39.990 --> 00:44:40.000 align:start position:0%
take a look at implementing both the
 

00:44:40.000 --> 00:44:41.349 align:start position:0%
take a look at implementing both the
erase<00:44:40.480><c> function</c>

00:44:41.349 --> 00:44:41.359 align:start position:0%
erase function
 

00:44:41.359 --> 00:44:44.550 align:start position:0%
erase function
as<00:44:41.599><c> well</c><00:44:42.000><c> as</c><00:44:42.640><c> the</c><00:44:42.800><c> whole</c><00:44:43.119><c> iterator</c><00:44:43.839><c> situation</c>

00:44:44.550 --> 00:44:44.560 align:start position:0%
as well as the whole iterator situation
 

00:44:44.560 --> 00:44:46.390 align:start position:0%
as well as the whole iterator situation
and<00:44:44.720><c> if</c><00:44:44.880><c> you</c><00:44:44.960><c> want</c><00:44:45.119><c> to</c><00:44:45.200><c> go</c><00:44:45.440><c> even</c><00:44:45.680><c> beyond</c><00:44:46.079><c> that</c>

00:44:46.390 --> 00:44:46.400 align:start position:0%
and if you want to go even beyond that
 

00:44:46.400 --> 00:44:48.470 align:start position:0%
and if you want to go even beyond that
then<00:44:46.640><c> take</c><00:44:46.880><c> a</c><00:44:46.960><c> look</c><00:44:47.200><c> at</c><00:44:47.359><c> the</c><00:44:47.599><c> stl</c><00:44:48.160><c> version</c><00:44:48.400><c> of</c>

00:44:48.470 --> 00:44:48.480 align:start position:0%
then take a look at the stl version of
 

00:44:48.480 --> 00:44:49.510 align:start position:0%
then take a look at the stl version of
the<00:44:48.640><c> vector</c><00:44:48.960><c> class</c>

00:44:49.510 --> 00:44:49.520 align:start position:0%
the vector class
 

00:44:49.520 --> 00:44:51.510 align:start position:0%
the vector class
and<00:44:49.760><c> see</c><00:44:50.000><c> what</c><00:44:50.400><c> what</c><00:44:50.640><c> that</c><00:44:50.880><c> has</c><00:44:51.119><c> that</c><00:44:51.280><c> we're</c>

00:44:51.510 --> 00:44:51.520 align:start position:0%
and see what what that has that we're
 

00:44:51.520 --> 00:44:53.270 align:start position:0%
and see what what that has that we're
missing<00:44:51.839><c> here</c><00:44:52.319><c> and</c><00:44:52.480><c> try</c><00:44:52.640><c> and</c><00:44:52.800><c> implement</c><00:44:53.119><c> some</c>

00:44:53.270 --> 00:44:53.280 align:start position:0%
missing here and try and implement some
 

00:44:53.280 --> 00:44:54.550 align:start position:0%
missing here and try and implement some
of<00:44:53.359><c> those</c><00:44:53.599><c> features</c><00:44:53.920><c> thank</c><00:44:54.160><c> you</c><00:44:54.240><c> guys</c><00:44:54.400><c> for</c>

00:44:54.550 --> 00:44:54.560 align:start position:0%
of those features thank you guys for
 

00:44:54.560 --> 00:44:56.150 align:start position:0%
of those features thank you guys for
watching<00:44:55.040><c> don't</c><00:44:55.200><c> forget</c><00:44:55.520><c> to</c><00:44:55.599><c> check</c><00:44:55.839><c> out</c><00:44:56.000><c> your</c>

00:44:56.150 --> 00:44:56.160 align:start position:0%
watching don't forget to check out your
 

00:44:56.160 --> 00:44:58.069 align:start position:0%
watching don't forget to check out your
two<00:44:56.400><c> months</c><00:44:56.640><c> of</c><00:44:56.880><c> free</c><00:44:57.119><c> skillshare</c><00:44:57.680><c> premium</c>

00:44:58.069 --> 00:44:58.079 align:start position:0%
two months of free skillshare premium
 

00:44:58.079 --> 00:44:59.990 align:start position:0%
two months of free skillshare premium
using<00:44:58.319><c> the</c><00:44:58.400><c> link</c><00:44:58.640><c> in</c><00:44:58.720><c> the</c><00:44:58.800><c> description</c><00:44:59.200><c> below</c>

00:44:59.990 --> 00:45:00.000 align:start position:0%
using the link in the description below
 

00:45:00.000 --> 00:45:02.829 align:start position:0%
using the link in the description below
and<00:45:00.160><c> i</c><00:45:00.240><c> will</c><00:45:00.400><c> see</c><00:45:00.480><c> you</c><00:45:00.560><c> guys</c><00:45:00.720><c> next</c><00:45:00.960><c> time</c>

00:45:02.829 --> 00:45:02.839 align:start position:0%
and i will see you guys next time
 

00:45:02.839 --> 00:45:07.490 align:start position:0%
and i will see you guys next time
goodbye

00:45:07.490 --> 00:45:07.500 align:start position:0%
 
 

00:45:07.500 --> 00:45:16.829 align:start position:0%
 
[Music]

00:45:16.829 --> 00:45:16.839 align:start position:0%
 
 

00:45:16.839 --> 00:45:19.890 align:start position:0%
 
so

00:45:19.890 --> 00:45:19.900 align:start position:0%
 
 

00:45:19.900 --> 00:45:24.550 align:start position:0%
 
[Music]

00:45:24.550 --> 00:45:24.560 align:start position:0%
[Music]
 

00:45:24.560 --> 00:45:26.640 align:start position:0%
[Music]
you

