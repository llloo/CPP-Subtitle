WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.730 align:start position:0%
 
hey<00:00:00.179><c> what's</c><00:00:00.420><c> up</c><00:00:00.480><c> guys</c><00:00:00.630><c> my</c><00:00:01.020><c> name</c><00:00:01.050><c> is</c><00:00:01.199><c> Jonah</c><00:00:01.589><c> and</c>

00:00:01.730 --> 00:00:01.740 align:start position:0%
hey what's up guys my name is Jonah and
 

00:00:01.740 --> 00:00:03.350 align:start position:0%
hey what's up guys my name is Jonah and
welcome<00:00:01.949><c> back</c><00:00:01.979><c> to</c><00:00:02.280><c> my</c><00:00:02.429><c> safe</c><00:00:02.669><c> loss</c><00:00:02.850><c> loss</c><00:00:03.060><c> series</c>

00:00:03.350 --> 00:00:03.360 align:start position:0%
welcome back to my safe loss loss series
 

00:00:03.360 --> 00:00:05.420 align:start position:0%
welcome back to my safe loss loss series
so<00:00:03.750><c> today</c><00:00:04.140><c> we're</c><00:00:04.799><c> going</c><00:00:04.890><c> to</c><00:00:04.980><c> be</c><00:00:05.040><c> talking</c><00:00:05.220><c> all</c>

00:00:05.420 --> 00:00:05.430 align:start position:0%
so today we're going to be talking all
 

00:00:05.430 --> 00:00:07.010 align:start position:0%
so today we're going to be talking all
about<00:00:05.460><c> templates</c><00:00:06.240><c> and</c><00:00:06.569><c> I</c><00:00:06.600><c> know</c><00:00:06.660><c> that</c><00:00:06.870><c> you</c><00:00:06.930><c> guys</c>

00:00:07.010 --> 00:00:07.020 align:start position:0%
about templates and I know that you guys
 

00:00:07.020 --> 00:00:08.299 align:start position:0%
about templates and I know that you guys
have<00:00:07.170><c> been</c><00:00:07.200><c> requesting</c><00:00:07.350><c> this</c><00:00:07.799><c> for</c><00:00:08.040><c> a</c><00:00:08.069><c> while</c>

00:00:08.299 --> 00:00:08.309 align:start position:0%
have been requesting this for a while
 

00:00:08.309 --> 00:00:10.339 align:start position:0%
have been requesting this for a while
but<00:00:08.700><c> it</c><00:00:08.790><c> is</c><00:00:08.910><c> kind</c><00:00:09.210><c> of</c><00:00:09.360><c> an</c><00:00:09.480><c> advanced</c><00:00:09.840><c> topic</c><00:00:09.960><c> so</c><00:00:10.320><c> I</c>

00:00:10.339 --> 00:00:10.349 align:start position:0%
but it is kind of an advanced topic so I
 

00:00:10.349 --> 00:00:11.780 align:start position:0%
but it is kind of an advanced topic so I
didn't<00:00:10.559><c> want</c><00:00:10.710><c> to</c><00:00:10.740><c> jump</c><00:00:10.920><c> into</c><00:00:11.130><c> it</c><00:00:11.250><c> too</c><00:00:11.519><c> quickly</c>

00:00:11.780 --> 00:00:11.790 align:start position:0%
didn't want to jump into it too quickly
 

00:00:11.790 --> 00:00:14.390 align:start position:0%
didn't want to jump into it too quickly
but<00:00:12.599><c> today</c><00:00:12.960><c> we're</c><00:00:13.620><c> finally</c><00:00:13.830><c> going</c><00:00:14.130><c> to</c><00:00:14.160><c> start</c>

00:00:14.390 --> 00:00:14.400 align:start position:0%
but today we're finally going to start
 

00:00:14.400 --> 00:00:16.820 align:start position:0%
but today we're finally going to start
off<00:00:14.519><c> with</c><00:00:14.759><c> a</c><00:00:14.790><c> fairly</c><00:00:15.000><c> gentle</c><00:00:15.690><c> introduction</c><00:00:16.080><c> to</c>

00:00:16.820 --> 00:00:16.830 align:start position:0%
off with a fairly gentle introduction to
 

00:00:16.830 --> 00:00:19.609 align:start position:0%
off with a fairly gentle introduction to
templates<00:00:17.279><c> in</c><00:00:17.550><c> C++</c><00:00:18.240><c> so</c><00:00:18.570><c> first</c><00:00:19.050><c> of</c><00:00:19.140><c> all</c><00:00:19.260><c> what</c><00:00:19.500><c> is</c>

00:00:19.609 --> 00:00:19.619 align:start position:0%
templates in C++ so first of all what is
 

00:00:19.619 --> 00:00:21.500 align:start position:0%
templates in C++ so first of all what is
a<00:00:19.650><c> template</c><00:00:20.189><c> well</c><00:00:20.789><c> those</c><00:00:21.150><c> of</c><00:00:21.180><c> you</c><00:00:21.359><c> familiar</c>

00:00:21.500 --> 00:00:21.510 align:start position:0%
a template well those of you familiar
 

00:00:21.510 --> 00:00:23.779 align:start position:0%
a template well those of you familiar
with<00:00:21.779><c> other</c><00:00:22.109><c> languages</c><00:00:22.680><c> might</c><00:00:23.010><c> see</c><00:00:23.340><c> this</c><00:00:23.550><c> as</c>

00:00:23.779 --> 00:00:23.789 align:start position:0%
with other languages might see this as
 

00:00:23.789 --> 00:00:26.240 align:start position:0%
with other languages might see this as
kind<00:00:24.060><c> of</c><00:00:24.180><c> generics</c><00:00:24.869><c> Riesling</c><00:00:25.590><c> Java</c><00:00:25.859><c> or</c><00:00:26.070><c> C</c>

00:00:26.240 --> 00:00:26.250 align:start position:0%
kind of generics Riesling Java or C
 

00:00:26.250 --> 00:00:27.820 align:start position:0%
kind of generics Riesling Java or C
sharp<00:00:26.279><c> they're</c><00:00:26.760><c> kind</c><00:00:26.939><c> of</c><00:00:26.970><c> called</c><00:00:27.180><c> generic</c>

00:00:27.820 --> 00:00:27.830 align:start position:0%
sharp they're kind of called generic
 

00:00:27.830 --> 00:00:30.230 align:start position:0%
sharp they're kind of called generic
templates<00:00:28.830><c> are</c><00:00:28.980><c> completely</c><00:00:29.400><c> different</c><00:00:29.550><c> well</c>

00:00:30.230 --> 00:00:30.240 align:start position:0%
templates are completely different well
 

00:00:30.240 --> 00:00:32.030 align:start position:0%
templates are completely different well
they're<00:00:30.480><c> not</c><00:00:30.570><c> completely</c><00:00:31.199><c> different</c><00:00:31.560><c> but</c>

00:00:32.030 --> 00:00:32.040 align:start position:0%
they're not completely different but
 

00:00:32.040 --> 00:00:34.400 align:start position:0%
they're not completely different but
they<00:00:32.219><c> are</c><00:00:32.369><c> like</c><00:00:33.090><c> infinitely</c><00:00:33.750><c> more</c><00:00:33.899><c> powerful</c>

00:00:34.400 --> 00:00:34.410 align:start position:0%
they are like infinitely more powerful
 

00:00:34.410 --> 00:00:36.920 align:start position:0%
they are like infinitely more powerful
than<00:00:34.680><c> generics</c><00:00:35.610><c> in</c><00:00:35.760><c> those</c><00:00:35.940><c> managed</c><00:00:36.390><c> languages</c>

00:00:36.920 --> 00:00:36.930 align:start position:0%
than generics in those managed languages
 

00:00:36.930 --> 00:00:40.130 align:start position:0%
than generics in those managed languages
right<00:00:37.160><c> templates</c><00:00:38.160><c> are</c><00:00:38.640><c> almost</c><00:00:39.360><c> like</c><00:00:39.600><c> a</c><00:00:39.809><c> bit</c><00:00:40.020><c> of</c>

00:00:40.130 --> 00:00:40.140 align:start position:0%
right templates are almost like a bit of
 

00:00:40.140 --> 00:00:42.410 align:start position:0%
right templates are almost like a bit of
a<00:00:40.200><c> macro</c><00:00:40.500><c> they</c><00:00:41.280><c> let</c><00:00:41.550><c> you</c><00:00:41.700><c> do</c><00:00:41.910><c> pretty</c><00:00:42.239><c> much</c>

00:00:42.410 --> 00:00:42.420 align:start position:0%
a macro they let you do pretty much
 

00:00:42.420 --> 00:00:44.479 align:start position:0%
a macro they let you do pretty much
anything<00:00:43.079><c> whereas</c><00:00:43.590><c> generics</c><00:00:44.070><c> is</c><00:00:44.250><c> very</c>

00:00:44.479 --> 00:00:44.489 align:start position:0%
anything whereas generics is very
 

00:00:44.489 --> 00:00:46.520 align:start position:0%
anything whereas generics is very
heavily<00:00:44.820><c> limited</c><00:00:45.390><c> by</c><00:00:45.510><c> the</c><00:00:45.570><c> type</c><00:00:45.840><c> system</c><00:00:46.320><c> and</c>

00:00:46.520 --> 00:00:46.530 align:start position:0%
heavily limited by the type system and
 

00:00:46.530 --> 00:00:49.340 align:start position:0%
heavily limited by the type system and
by<00:00:47.160><c> a</c><00:00:47.190><c> lot</c><00:00:47.579><c> of</c><00:00:47.610><c> other</c><00:00:47.820><c> factors</c><00:00:48.350><c> templates</c>

00:00:49.340 --> 00:00:49.350 align:start position:0%
by a lot of other factors templates
 

00:00:49.350 --> 00:00:52.520 align:start position:0%
by a lot of other factors templates
specifically<00:00:49.890><c> are</c><00:00:50.719><c> much</c><00:00:51.719><c> more</c><00:00:51.960><c> powerful</c><00:00:52.440><c> and</c>

00:00:52.520 --> 00:00:52.530 align:start position:0%
specifically are much more powerful and
 

00:00:52.530 --> 00:00:53.689 align:start position:0%
specifically are much more powerful and
we're<00:00:52.680><c> gonna</c><00:00:52.770><c> see</c><00:00:52.980><c> this</c><00:00:53.129><c> as</c><00:00:53.309><c> we</c><00:00:53.460><c> go</c><00:00:53.610><c> along</c>

00:00:53.689 --> 00:00:53.699 align:start position:0%
we're gonna see this as we go along
 

00:00:53.699 --> 00:00:55.340 align:start position:0%
we're gonna see this as we go along
don't<00:00:54.480><c> worry</c><00:00:54.629><c> I'm</c><00:00:54.750><c> gonna</c><00:00:54.870><c> probably</c><00:00:55.050><c> end</c><00:00:55.199><c> up</c>

00:00:55.340 --> 00:00:55.350 align:start position:0%
don't worry I'm gonna probably end up
 

00:00:55.350 --> 00:00:56.959 align:start position:0%
don't worry I'm gonna probably end up
having<00:00:55.500><c> like</c><00:00:55.800><c> dozens</c><00:00:56.309><c> of</c><00:00:56.460><c> videos</c><00:00:56.789><c> on</c>

00:00:56.959 --> 00:00:56.969 align:start position:0%
having like dozens of videos on
 

00:00:56.969 --> 00:00:59.479 align:start position:0%
having like dozens of videos on
templates<00:00:57.480><c> or</c><00:00:57.629><c> something</c><00:00:57.899><c> like</c><00:00:58.020><c> that</c><00:00:58.230><c> so</c><00:00:58.829><c> by</c>

00:00:59.479 --> 00:00:59.489 align:start position:0%
templates or something like that so by
 

00:00:59.489 --> 00:01:01.549 align:start position:0%
templates or something like that so by
no<00:00:59.550><c> means</c><00:00:59.910><c> is</c><00:01:00.149><c> this</c><00:01:00.270><c> gonna</c><00:01:00.510><c> be</c><00:01:00.600><c> the</c><00:01:00.930><c> only</c><00:01:01.320><c> video</c>

00:01:01.549 --> 00:01:01.559 align:start position:0%
no means is this gonna be the only video
 

00:01:01.559 --> 00:01:03.290 align:start position:0%
no means is this gonna be the only video
I<00:01:01.620><c> make</c><00:01:01.859><c> on</c><00:01:02.039><c> templates</c><00:01:02.489><c> templates</c><00:01:02.820><c> are</c><00:01:03.030><c> such</c><00:01:03.270><c> a</c>

00:01:03.290 --> 00:01:03.300 align:start position:0%
I make on templates templates are such a
 

00:01:03.300 --> 00:01:05.440 align:start position:0%
I make on templates templates are such a
huge<00:01:03.719><c> and</c><00:01:03.899><c> complex</c><00:01:03.930><c> topic</c><00:01:04.680><c> and</c><00:01:04.769><c> can</c><00:01:05.040><c> be</c>

00:01:05.440 --> 00:01:05.450 align:start position:0%
huge and complex topic and can be
 

00:01:05.450 --> 00:01:08.390 align:start position:0%
huge and complex topic and can be
incredibly<00:01:06.450><c> crazy</c><00:01:06.960><c> so</c><00:01:07.799><c> we're</c><00:01:08.130><c> gonna</c><00:01:08.220><c> be</c>

00:01:08.390 --> 00:01:08.400 align:start position:0%
incredibly crazy so we're gonna be
 

00:01:08.400 --> 00:01:09.920 align:start position:0%
incredibly crazy so we're gonna be
exploring<00:01:08.670><c> all</c><00:01:08.909><c> of</c><00:01:09.060><c> that</c><00:01:09.180><c> as</c><00:01:09.360><c> a</c><00:01:09.390><c> serious</c><00:01:09.659><c> goes</c>

00:01:09.920 --> 00:01:09.930 align:start position:0%
exploring all of that as a serious goes
 

00:01:09.930 --> 00:01:11.690 align:start position:0%
exploring all of that as a serious goes
on<00:01:10.080><c> so</c><00:01:10.439><c> first</c><00:01:10.650><c> of</c><00:01:10.770><c> all</c><00:01:10.860><c> well</c><00:01:11.280><c> what</c><00:01:11.549><c> is</c><00:01:11.670><c> a</c>

00:01:11.690 --> 00:01:11.700 align:start position:0%
on so first of all well what is a
 

00:01:11.700 --> 00:01:14.210 align:start position:0%
on so first of all well what is a
template<00:01:12.180><c> a</c><00:01:12.390><c> template</c><00:01:13.110><c> basically</c><00:01:13.409><c> allows</c><00:01:13.860><c> you</c>

00:01:14.210 --> 00:01:14.220 align:start position:0%
template a template basically allows you
 

00:01:14.220 --> 00:01:17.359 align:start position:0%
template a template basically allows you
to<00:01:14.600><c> define</c><00:01:15.600><c> a</c><00:01:15.810><c> template</c><00:01:16.350><c> that</c><00:01:16.619><c> will</c><00:01:17.159><c> be</c>

00:01:17.359 --> 00:01:17.369 align:start position:0%
to define a template that will be
 

00:01:17.369 --> 00:01:21.440 align:start position:0%
to define a template that will be
compiled<00:01:18.590><c> but</c><00:01:19.590><c> like</c><00:01:19.770><c> by</c><00:01:20.159><c> your</c><00:01:20.400><c> usage</c><00:01:20.880><c> if</c><00:01:21.119><c> that</c>

00:01:21.440 --> 00:01:21.450 align:start position:0%
compiled but like by your usage if that
 

00:01:21.450 --> 00:01:23.179 align:start position:0%
compiled but like by your usage if that
makes<00:01:21.659><c> sense</c><00:01:21.780><c> you</c><00:01:22.110><c> can</c><00:01:22.290><c> get</c><00:01:22.500><c> the</c><00:01:22.650><c> compiler</c><00:01:23.040><c> to</c>

00:01:23.179 --> 00:01:23.189 align:start position:0%
makes sense you can get the compiler to
 

00:01:23.189 --> 00:01:25.490 align:start position:0%
makes sense you can get the compiler to
write<00:01:23.520><c> code</c><00:01:23.820><c> for</c><00:01:23.880><c> you</c><00:01:24.479><c> based</c><00:01:25.020><c> on</c><00:01:25.200><c> a</c><00:01:25.229><c> set</c><00:01:25.470><c> of</c>

00:01:25.490 --> 00:01:25.500 align:start position:0%
write code for you based on a set of
 

00:01:25.500 --> 00:01:27.200 align:start position:0%
write code for you based on a set of
rules<00:01:25.619><c> that's</c><00:01:26.100><c> really</c><00:01:26.490><c> what</c><00:01:26.640><c> a</c><00:01:26.670><c> template</c><00:01:27.060><c> is</c>

00:01:27.200 --> 00:01:27.210 align:start position:0%
rules that's really what a template is
 

00:01:27.210 --> 00:01:29.420 align:start position:0%
rules that's really what a template is
just<00:01:27.509><c> the</c><00:01:27.869><c> compiler</c><00:01:28.259><c> writing</c><00:01:28.770><c> code</c><00:01:29.009><c> for</c><00:01:29.280><c> you</c>

00:01:29.420 --> 00:01:29.430 align:start position:0%
just the compiler writing code for you
 

00:01:29.430 --> 00:01:30.890 align:start position:0%
just the compiler writing code for you
based<00:01:29.670><c> on</c><00:01:29.850><c> the</c><00:01:29.970><c> rules</c><00:01:30.150><c> that</c><00:01:30.299><c> you've</c><00:01:30.420><c> given</c><00:01:30.600><c> it</c>

00:01:30.890 --> 00:01:30.900 align:start position:0%
based on the rules that you've given it
 

00:01:30.900 --> 00:01:33.020 align:start position:0%
based on the rules that you've given it
when<00:01:31.140><c> I</c><00:01:31.170><c> write</c><00:01:31.470><c> a</c><00:01:31.500><c> function</c><00:01:31.890><c> for</c><00:01:32.310><c> example</c><00:01:32.369><c> and</c>

00:01:33.020 --> 00:01:33.030 align:start position:0%
when I write a function for example and
 

00:01:33.030 --> 00:01:35.450 align:start position:0%
when I write a function for example and
I<00:01:33.240><c> use</c><00:01:33.479><c> a</c><00:01:33.720><c> template</c><00:01:34.170><c> in</c><00:01:34.350><c> that</c><00:01:34.500><c> function</c><00:01:34.740><c> what</c>

00:01:35.450 --> 00:01:35.460 align:start position:0%
I use a template in that function what
 

00:01:35.460 --> 00:01:36.770 align:start position:0%
I use a template in that function what
I'm<00:01:35.579><c> actually</c><00:01:35.759><c> doing</c><00:01:35.939><c> is</c><00:01:36.270><c> creating</c><00:01:36.509><c> almost</c>

00:01:36.770 --> 00:01:36.780 align:start position:0%
I'm actually doing is creating almost
 

00:01:36.780 --> 00:01:38.929 align:start position:0%
I'm actually doing is creating almost
like<00:01:37.020><c> a</c><00:01:37.049><c> blueprint</c><00:01:37.650><c> so</c><00:01:38.310><c> that</c><00:01:38.460><c> what</c><00:01:38.610><c> I</c><00:01:38.640><c> decide</c>

00:01:38.929 --> 00:01:38.939 align:start position:0%
like a blueprint so that what I decide
 

00:01:38.939 --> 00:01:40.429 align:start position:0%
like a blueprint so that what I decide
to<00:01:39.060><c> call</c><00:01:39.270><c> that</c><00:01:39.420><c> function</c><00:01:39.689><c> I</c><00:01:40.020><c> can</c><00:01:40.200><c> specify</c>

00:01:40.429 --> 00:01:40.439 align:start position:0%
to call that function I can specify
 

00:01:40.439 --> 00:01:42.560 align:start position:0%
to call that function I can specify
certain<00:01:40.890><c> parameters</c><00:01:41.549><c> which</c><00:01:41.579><c> determine</c><00:01:42.329><c> what</c>

00:01:42.560 --> 00:01:42.570 align:start position:0%
certain parameters which determine what
 

00:01:42.570 --> 00:01:44.630 align:start position:0%
certain parameters which determine what
code<00:01:42.869><c> actually</c><00:01:43.320><c> gets</c><00:01:43.500><c> put</c><00:01:43.770><c> into</c><00:01:43.950><c> the</c><00:01:44.100><c> template</c>

00:01:44.630 --> 00:01:44.640 align:start position:0%
code actually gets put into the template
 

00:01:44.640 --> 00:01:46.789 align:start position:0%
code actually gets put into the template
and<00:01:44.850><c> that</c><00:01:44.909><c> is</c><00:01:45.750><c> all</c><00:01:45.930><c> kind</c><00:01:46.170><c> of</c><00:01:46.229><c> determined</c><00:01:46.710><c> by</c>

00:01:46.789 --> 00:01:46.799 align:start position:0%
and that is all kind of determined by
 

00:01:46.799 --> 00:01:48.170 align:start position:0%
and that is all kind of determined by
the<00:01:46.860><c> way</c><00:01:47.040><c> that</c><00:01:47.220><c> I</c><00:01:47.250><c> actually</c><00:01:47.460><c> use</c><00:01:47.909><c> that</c>

00:01:48.170 --> 00:01:48.180 align:start position:0%
the way that I actually use that
 

00:01:48.180 --> 00:01:50.090 align:start position:0%
the way that I actually use that
function<00:01:48.750><c> again</c><00:01:48.899><c> it's</c><00:01:49.770><c> a</c><00:01:49.860><c> little</c><00:01:49.979><c> bit</c>

00:01:50.090 --> 00:01:50.100 align:start position:0%
function again it's a little bit
 

00:01:50.100 --> 00:01:52.429 align:start position:0%
function again it's a little bit
difficult<00:01:50.549><c> to</c><00:01:50.579><c> explain</c><00:01:50.700><c> and</c><00:01:51.270><c> in</c><00:01:51.810><c> fact</c><00:01:52.079><c> I</c><00:01:52.200><c> could</c>

00:01:52.429 --> 00:01:52.439 align:start position:0%
difficult to explain and in fact I could
 

00:01:52.439 --> 00:01:54.139 align:start position:0%
difficult to explain and in fact I could
just<00:01:52.740><c> give</c><00:01:52.950><c> you</c><00:01:53.100><c> the</c><00:01:53.250><c> definition</c><00:01:53.280><c> that's</c><00:01:54.030><c> on</c>

00:01:54.139 --> 00:01:54.149 align:start position:0%
just give you the definition that's on
 

00:01:54.149 --> 00:01:56.179 align:start position:0%
just give you the definition that's on
like<00:01:54.329><c> say</c><00:01:54.509><c> BP</c><00:01:54.810><c> reference</c><00:01:55.259><c> or</c><00:01:55.409><c> on</c><00:01:55.530><c> Wikipedia</c>

00:01:56.179 --> 00:01:56.189 align:start position:0%
like say BP reference or on Wikipedia
 

00:01:56.189 --> 00:01:58.100 align:start position:0%
like say BP reference or on Wikipedia
I'm<00:01:56.490><c> trying</c><00:01:56.939><c> not</c><00:01:57.060><c> to</c><00:01:57.119><c> do</c><00:01:57.329><c> that</c><00:01:57.509><c> obviously</c><00:01:57.630><c> I</c>

00:01:58.100 --> 00:01:58.110 align:start position:0%
I'm trying not to do that obviously I
 

00:01:58.110 --> 00:02:00.200 align:start position:0%
I'm trying not to do that obviously I
think<00:01:58.469><c> the</c><00:01:58.619><c> best</c><00:01:58.890><c> way</c><00:01:59.100><c> is</c><00:01:59.340><c> just</c><00:01:59.670><c> gonna</c><00:01:59.969><c> be</c><00:02:00.090><c> to</c>

00:02:00.200 --> 00:02:00.210 align:start position:0%
think the best way is just gonna be to
 

00:02:00.210 --> 00:02:01.580 align:start position:0%
think the best way is just gonna be to
show<00:02:00.390><c> you</c><00:02:00.450><c> what</c><00:02:00.780><c> it</c><00:02:00.840><c> actually</c><00:02:00.930><c> looks</c><00:02:01.290><c> like</c><00:02:01.409><c> in</c>

00:02:01.580 --> 00:02:01.590 align:start position:0%
show you what it actually looks like in
 

00:02:01.590 --> 00:02:03.260 align:start position:0%
show you what it actually looks like in
the<00:02:01.680><c> code</c><00:02:01.860><c> so</c><00:02:02.159><c> a</c><00:02:02.189><c> good</c><00:02:02.399><c> example</c><00:02:02.700><c> of</c><00:02:02.969><c> why</c><00:02:03.240><c> I</c>

00:02:03.260 --> 00:02:03.270 align:start position:0%
the code so a good example of why I
 

00:02:03.270 --> 00:02:05.300 align:start position:0%
the code so a good example of why I
might<00:02:03.600><c> want</c><00:02:03.630><c> to</c><00:02:03.869><c> use</c><00:02:03.930><c> a</c><00:02:04.079><c> template</c><00:02:04.619><c> is</c><00:02:04.799><c> if</c><00:02:05.219><c> I</c>

00:02:05.300 --> 00:02:05.310 align:start position:0%
might want to use a template is if I
 

00:02:05.310 --> 00:02:07.130 align:start position:0%
might want to use a template is if I
want<00:02:05.520><c> to</c><00:02:05.579><c> create</c><00:02:05.850><c> a</c><00:02:05.909><c> function</c><00:02:06.210><c> that</c><00:02:06.960><c> is</c>

00:02:07.130 --> 00:02:07.140 align:start position:0%
want to create a function that is
 

00:02:07.140 --> 00:02:09.290 align:start position:0%
want to create a function that is
largely<00:02:07.560><c> going</c><00:02:07.890><c> to</c><00:02:08.009><c> be</c><00:02:08.129><c> the</c><00:02:08.550><c> same</c><00:02:08.849><c> but</c><00:02:09.090><c> may</c>

00:02:09.290 --> 00:02:09.300 align:start position:0%
largely going to be the same but may
 

00:02:09.300 --> 00:02:11.570 align:start position:0%
largely going to be the same but may
take<00:02:09.569><c> in</c><00:02:09.780><c> different</c><00:02:09.929><c> types</c><00:02:10.470><c> maybe</c><00:02:11.099><c> I</c><00:02:11.250><c> have</c><00:02:11.550><c> a</c>

00:02:11.570 --> 00:02:11.580 align:start position:0%
take in different types maybe I have a
 

00:02:11.580 --> 00:02:12.309 align:start position:0%
take in different types maybe I have a
print

00:02:12.309 --> 00:02:12.319 align:start position:0%
print
 

00:02:12.319 --> 00:02:14.709 align:start position:0%
print
that<00:02:12.530><c> I</c><00:02:12.560><c> want</c><00:02:12.890><c> to</c><00:02:13.099><c> use</c><00:02:13.549><c> to</c><00:02:13.730><c> print</c><00:02:13.939><c> integers</c><00:02:14.510><c> so</c>

00:02:14.709 --> 00:02:14.719 align:start position:0%
that I want to use to print integers so
 

00:02:14.719 --> 00:02:17.080 align:start position:0%
that I want to use to print integers so
I<00:02:14.750><c> might</c><00:02:15.049><c> do</c><00:02:15.200><c> something</c><00:02:15.439><c> like</c><00:02:15.590><c> print</c><00:02:16.459><c> in</c><00:02:16.640><c> value</c>

00:02:17.080 --> 00:02:17.090 align:start position:0%
I might do something like print in value
 

00:02:17.090 --> 00:02:18.429 align:start position:0%
I might do something like print in value
and<00:02:17.239><c> all</c><00:02:17.299><c> this</c><00:02:17.390><c> is</c><00:02:17.510><c> gonna</c><00:02:17.659><c> do</c><00:02:17.870><c> is</c><00:02:18.019><c> see</c><00:02:18.260><c> out</c><00:02:18.409><c> my</c>

00:02:18.429 --> 00:02:18.439 align:start position:0%
and all this is gonna do is see out my
 

00:02:18.439 --> 00:02:20.679 align:start position:0%
and all this is gonna do is see out my
value<00:02:19.219><c> and</c><00:02:19.459><c> if</c><00:02:19.700><c> I</c><00:02:19.790><c> go</c><00:02:19.909><c> back</c><00:02:20.090><c> down</c><00:02:20.209><c> to</c><00:02:20.269><c> main</c><00:02:20.659><c> I</c>

00:02:20.679 --> 00:02:20.689 align:start position:0%
value and if I go back down to main I
 

00:02:20.689 --> 00:02:22.780 align:start position:0%
value and if I go back down to main I
can<00:02:21.049><c> call</c><00:02:21.260><c> print</c><00:02:21.590><c> with</c><00:02:21.769><c> a</c><00:02:21.799><c> value</c><00:02:22.159><c> such</c><00:02:22.400><c> as</c><00:02:22.549><c> five</c>

00:02:22.780 --> 00:02:22.790 align:start position:0%
can call print with a value such as five
 

00:02:22.790 --> 00:02:25.209 align:start position:0%
can call print with a value such as five
and<00:02:23.090><c> everything</c><00:02:23.780><c> will</c><00:02:23.900><c> be</c><00:02:24.019><c> fine</c><00:02:24.290><c> now</c><00:02:24.500><c> what</c><00:02:25.099><c> if</c>

00:02:25.209 --> 00:02:25.219 align:start position:0%
and everything will be fine now what if
 

00:02:25.219 --> 00:02:26.530 align:start position:0%
and everything will be fine now what if
I<00:02:25.310><c> want</c><00:02:25.489><c> to</c><00:02:25.549><c> actually</c><00:02:25.670><c> use</c><00:02:25.849><c> a</c><00:02:25.969><c> string</c><00:02:26.359><c> there</c>

00:02:26.530 --> 00:02:26.540 align:start position:0%
I want to actually use a string there
 

00:02:26.540 --> 00:02:29.050 align:start position:0%
I want to actually use a string there
instead<00:02:26.870><c> like</c><00:02:27.170><c> Hello</c><00:02:27.590><c> so</c><00:02:28.370><c> suddenly</c><00:02:28.730><c> I</c><00:02:28.819><c> need</c><00:02:28.970><c> to</c>

00:02:29.050 --> 00:02:29.060 align:start position:0%
instead like Hello so suddenly I need to
 

00:02:29.060 --> 00:02:30.309 align:start position:0%
instead like Hello so suddenly I need to
actually<00:02:29.329><c> define</c><00:02:29.510><c> another</c><00:02:29.689><c> overload</c><00:02:30.200><c> for</c>

00:02:30.309 --> 00:02:30.319 align:start position:0%
actually define another overload for
 

00:02:30.319 --> 00:02:32.229 align:start position:0%
actually define another overload for
this<00:02:30.439><c> function</c><00:02:30.620><c> which</c><00:02:31.340><c> actually</c><00:02:31.730><c> takes</c><00:02:32.000><c> in</c><00:02:32.150><c> a</c>

00:02:32.229 --> 00:02:32.239 align:start position:0%
this function which actually takes in a
 

00:02:32.239 --> 00:02:36.190 align:start position:0%
this function which actually takes in a
string<00:02:33.849><c> so</c><00:02:34.849><c> just</c><00:02:35.030><c> like</c><00:02:35.150><c> this</c><00:02:35.359><c> note</c><00:02:35.959><c> that</c><00:02:35.989><c> I'm</c>

00:02:36.190 --> 00:02:36.200 align:start position:0%
string so just like this note that I'm
 

00:02:36.200 --> 00:02:37.509 align:start position:0%
string so just like this note that I'm
actually<00:02:36.470><c> passing</c><00:02:36.769><c> this</c><00:02:36.859><c> string</c><00:02:37.069><c> by</c><00:02:37.220><c> value</c>

00:02:37.509 --> 00:02:37.519 align:start position:0%
actually passing this string by value
 

00:02:37.519 --> 00:02:39.280 align:start position:0%
actually passing this string by value
here<00:02:37.670><c> because</c><00:02:37.939><c> I</c><00:02:38.030><c> want</c><00:02:38.209><c> to</c><00:02:38.269><c> kind</c><00:02:38.510><c> of</c><00:02:38.599><c> have</c><00:02:39.139><c> it</c>

00:02:39.280 --> 00:02:39.290 align:start position:0%
here because I want to kind of have it
 

00:02:39.290 --> 00:02:41.020 align:start position:0%
here because I want to kind of have it
be<00:02:39.409><c> the</c><00:02:39.560><c> same</c><00:02:39.799><c> as</c><00:02:40.040><c> my</c><00:02:40.159><c> print</c><00:02:40.459><c> function</c><00:02:40.819><c> here</c>

00:02:41.020 --> 00:02:41.030 align:start position:0%
be the same as my print function here
 

00:02:41.030 --> 00:02:42.729 align:start position:0%
be the same as my print function here
which<00:02:41.180><c> also</c><00:02:41.359><c> takes</c><00:02:41.629><c> in</c><00:02:41.840><c> the</c><00:02:41.959><c> integer</c><00:02:42.230><c> by</c><00:02:42.379><c> value</c>

00:02:42.729 --> 00:02:42.739 align:start position:0%
which also takes in the integer by value
 

00:02:42.739 --> 00:02:44.619 align:start position:0%
which also takes in the integer by value
then<00:02:43.280><c> I'm</c><00:02:43.400><c> going</c><00:02:43.609><c> to</c><00:02:43.730><c> basically</c><00:02:43.939><c> end</c><00:02:44.510><c> up</c>

00:02:44.619 --> 00:02:44.629 align:start position:0%
then I'm going to basically end up
 

00:02:44.629 --> 00:02:47.259 align:start position:0%
then I'm going to basically end up
copying<00:02:45.079><c> and</c><00:02:45.230><c> pasting</c><00:02:45.379><c> this</c><00:02:45.950><c> code</c><00:02:46.310><c> this</c><00:02:46.970><c> works</c>

00:02:47.259 --> 00:02:47.269 align:start position:0%
copying and pasting this code this works
 

00:02:47.269 --> 00:02:48.610 align:start position:0%
copying and pasting this code this works
fine<00:02:47.599><c> in</c><00:02:47.870><c> order</c><00:02:48.109><c> for</c><00:02:48.230><c> this</c><00:02:48.349><c> to</c><00:02:48.470><c> actually</c>

00:02:48.610 --> 00:02:48.620 align:start position:0%
fine in order for this to actually
 

00:02:48.620 --> 00:02:50.170 align:start position:0%
fine in order for this to actually
compile<00:02:49.099><c> though</c><00:02:49.250><c> we</c><00:02:49.430><c> do</c><00:02:49.579><c> need</c><00:02:49.760><c> to</c><00:02:49.849><c> include</c>

00:02:50.170 --> 00:02:50.180 align:start position:0%
compile though we do need to include
 

00:02:50.180 --> 00:02:54.399 align:start position:0%
compile though we do need to include
string<00:02:52.540><c> now</c><00:02:53.540><c> what</c><00:02:53.720><c> if</c><00:02:53.810><c> I</c><00:02:53.870><c> want</c><00:02:54.049><c> to</c><00:02:54.079><c> print</c><00:02:54.260><c> a</c>

00:02:54.399 --> 00:02:54.409 align:start position:0%
string now what if I want to print a
 

00:02:54.409 --> 00:02:56.679 align:start position:0%
string now what if I want to print a
float<00:02:54.709><c> well</c><00:02:55.400><c> you</c><00:02:55.519><c> kind</c><00:02:55.730><c> of</c><00:02:55.790><c> are</c><00:02:56.269><c> seeing</c><00:02:56.569><c> the</c>

00:02:56.679 --> 00:02:56.689 align:start position:0%
float well you kind of are seeing the
 

00:02:56.689 --> 00:02:58.149 align:start position:0%
float well you kind of are seeing the
picture<00:02:56.959><c> here</c><00:02:57.169><c> I</c><00:02:57.200><c> hope</c><00:02:57.439><c> if</c><00:02:57.560><c> I</c><00:02:57.650><c> want</c><00:02:57.829><c> to</c><00:02:57.889><c> print</c><00:02:58.010><c> a</c>

00:02:58.149 --> 00:02:58.159 align:start position:0%
picture here I hope if I want to print a
 

00:02:58.159 --> 00:03:00.220 align:start position:0%
picture here I hope if I want to print a
float<00:02:58.370><c> like</c><00:02:58.579><c> five</c><00:02:58.849><c> point</c><00:02:59.120><c> five</c><00:02:59.299><c> then</c><00:02:59.930><c> I</c><00:03:00.049><c> also</c>

00:03:00.220 --> 00:03:00.230 align:start position:0%
float like five point five then I also
 

00:03:00.230 --> 00:03:01.899 align:start position:0%
float like five point five then I also
need<00:03:00.500><c> to</c><00:03:00.530><c> basically</c><00:03:00.980><c> copy</c><00:03:01.250><c> and</c><00:03:01.489><c> paste</c><00:03:01.730><c> this</c>

00:03:01.899 --> 00:03:01.909 align:start position:0%
need to basically copy and paste this
 

00:03:01.909 --> 00:03:03.610 align:start position:0%
need to basically copy and paste this
function<00:03:02.329><c> again</c><00:03:02.750><c> so</c><00:03:03.049><c> now</c><00:03:03.169><c> I</c><00:03:03.200><c> have</c><00:03:03.409><c> three</c>

00:03:03.610 --> 00:03:03.620 align:start position:0%
function again so now I have three
 

00:03:03.620 --> 00:03:05.589 align:start position:0%
function again so now I have three
different<00:03:03.739><c> functions</c><00:03:04.280><c> here</c><00:03:04.340><c> which</c><00:03:05.209><c> basically</c>

00:03:05.589 --> 00:03:05.599 align:start position:0%
different functions here which basically
 

00:03:05.599 --> 00:03:07.449 align:start position:0%
different functions here which basically
the<00:03:06.079><c> only</c><00:03:06.290><c> thing</c><00:03:06.409><c> that</c><00:03:06.560><c> changes</c><00:03:06.889><c> here</c><00:03:07.129><c> is</c><00:03:07.280><c> the</c>

00:03:07.449 --> 00:03:07.459 align:start position:0%
the only thing that changes here is the
 

00:03:07.459 --> 00:03:09.280 align:start position:0%
the only thing that changes here is the
actual<00:03:07.639><c> type</c><00:03:08.120><c> of</c><00:03:08.329><c> data</c><00:03:08.540><c> I'm</c><00:03:08.720><c> passing</c><00:03:09.109><c> in</c>

00:03:09.280 --> 00:03:09.290 align:start position:0%
actual type of data I'm passing in
 

00:03:09.290 --> 00:03:11.679 align:start position:0%
actual type of data I'm passing in
because<00:03:09.919><c> C</c><00:03:10.159><c> out</c><00:03:10.370><c> can</c><00:03:10.700><c> of</c><00:03:10.790><c> course</c><00:03:11.000><c> accept</c><00:03:11.419><c> any</c>

00:03:11.679 --> 00:03:11.689 align:start position:0%
because C out can of course accept any
 

00:03:11.689 --> 00:03:15.009 align:start position:0%
because C out can of course accept any
kind<00:03:12.079><c> of</c><00:03:12.260><c> primitive</c><00:03:12.829><c> or</c><00:03:13.069><c> or</c><00:03:14.000><c> built-in</c><00:03:14.480><c> C++</c>

00:03:15.009 --> 00:03:15.019 align:start position:0%
kind of primitive or or built-in C++
 

00:03:15.019 --> 00:03:16.990 align:start position:0%
kind of primitive or or built-in C++
type<00:03:15.200><c> that</c><00:03:15.470><c> we're</c><00:03:15.590><c> actually</c><00:03:15.769><c> using</c><00:03:16.129><c> here</c><00:03:16.639><c> so</c>

00:03:16.990 --> 00:03:17.000 align:start position:0%
type that we're actually using here so
 

00:03:17.000 --> 00:03:19.300 align:start position:0%
type that we're actually using here so
what<00:03:17.209><c> we've</c><00:03:17.329><c> ended</c><00:03:17.510><c> up</c><00:03:17.750><c> with</c><00:03:17.810><c> is</c><00:03:18.319><c> manually</c>

00:03:19.300 --> 00:03:19.310 align:start position:0%
what we've ended up with is manually
 

00:03:19.310 --> 00:03:21.219 align:start position:0%
what we've ended up with is manually
defining<00:03:19.819><c> three</c><00:03:20.150><c> different</c><00:03:20.479><c> overloads</c><00:03:20.900><c> for</c><00:03:21.199><c> a</c>

00:03:21.219 --> 00:03:21.229 align:start position:0%
defining three different overloads for a
 

00:03:21.229 --> 00:03:24.399 align:start position:0%
defining three different overloads for a
print<00:03:21.560><c> function</c><00:03:22.060><c> that's</c><00:03:23.060><c> okay</c><00:03:23.690><c> some</c><00:03:24.379><c> people</c>

00:03:24.399 --> 00:03:24.409 align:start position:0%
print function that's okay some people
 

00:03:24.409 --> 00:03:26.500 align:start position:0%
print function that's okay some people
actually<00:03:24.799><c> prefer</c><00:03:25.099><c> to</c><00:03:25.340><c> do</c><00:03:25.579><c> it</c><00:03:25.699><c> this</c><00:03:25.729><c> way</c><00:03:26.060><c> but</c>

00:03:26.500 --> 00:03:26.510 align:start position:0%
actually prefer to do it this way but
 

00:03:26.510 --> 00:03:27.399 align:start position:0%
actually prefer to do it this way but
what<00:03:26.629><c> if</c><00:03:26.750><c> we</c><00:03:26.840><c> could</c><00:03:26.930><c> just</c><00:03:27.109><c> define</c><00:03:27.229><c> that</c>

00:03:27.399 --> 00:03:27.409 align:start position:0%
what if we could just define that
 

00:03:27.409 --> 00:03:30.430 align:start position:0%
what if we could just define that
function<00:03:27.739><c> once</c><00:03:28.549><c> a</c><00:03:28.940><c> good</c><00:03:29.449><c> goal</c><00:03:29.840><c> for</c><00:03:29.870><c> software</c>

00:03:30.430 --> 00:03:30.440 align:start position:0%
function once a good goal for software
 

00:03:30.440 --> 00:03:32.469 align:start position:0%
function once a good goal for software
engineering<00:03:30.829><c> in</c><00:03:31.040><c> general</c><00:03:31.069><c> really</c><00:03:31.760><c> is</c><00:03:32.090><c> to</c><00:03:32.269><c> kind</c>

00:03:32.469 --> 00:03:32.479 align:start position:0%
engineering in general really is to kind
 

00:03:32.479 --> 00:03:34.869 align:start position:0%
engineering in general really is to kind
of<00:03:32.540><c> avoid</c><00:03:32.780><c> code</c><00:03:33.109><c> duplication</c><00:03:33.290><c> right</c><00:03:34.220><c> because</c>

00:03:34.869 --> 00:03:34.879 align:start position:0%
of avoid code duplication right because
 

00:03:34.879 --> 00:03:36.909 align:start position:0%
of avoid code duplication right because
if<00:03:35.030><c> we</c><00:03:35.180><c> decide</c><00:03:35.479><c> to</c><00:03:35.629><c> actually</c><00:03:35.780><c> change</c><00:03:36.379><c> one</c><00:03:36.889><c> of</c>

00:03:36.909 --> 00:03:36.919 align:start position:0%
if we decide to actually change one of
 

00:03:36.919 --> 00:03:38.589 align:start position:0%
if we decide to actually change one of
these<00:03:37.099><c> print</c><00:03:37.549><c> functions</c><00:03:38.000><c> to</c><00:03:38.120><c> do</c><00:03:38.239><c> something</c>

00:03:38.589 --> 00:03:38.599 align:start position:0%
these print functions to do something
 

00:03:38.599 --> 00:03:41.110 align:start position:0%
these print functions to do something
extraordinary<00:03:39.019><c> we</c><00:03:39.650><c> decide</c><00:03:39.949><c> to</c><00:03:40.099><c> go</c><00:03:40.220><c> from</c><00:03:40.489><c> using</c>

00:03:41.110 --> 00:03:41.120 align:start position:0%
extraordinary we decide to go from using
 

00:03:41.120 --> 00:03:43.119 align:start position:0%
extraordinary we decide to go from using
C<00:03:41.329><c> out</c><00:03:41.540><c> to</c><00:03:41.810><c> print</c><00:03:42.109><c> air</c><00:03:42.319><c> for</c><00:03:42.590><c> one</c><00:03:42.620><c> of</c><00:03:42.859><c> our</c><00:03:42.949><c> own</c>

00:03:43.119 --> 00:03:43.129 align:start position:0%
C out to print air for one of our own
 

00:03:43.129 --> 00:03:45.189 align:start position:0%
C out to print air for one of our own
custom<00:03:43.639><c> logging</c><00:03:43.970><c> functions</c><00:03:44.419><c> we</c><00:03:44.959><c> have</c><00:03:44.989><c> to</c>

00:03:45.189 --> 00:03:45.199 align:start position:0%
custom logging functions we have to
 

00:03:45.199 --> 00:03:46.539 align:start position:0%
custom logging functions we have to
change<00:03:45.440><c> it</c><00:03:45.620><c> in</c><00:03:45.709><c> all</c><00:03:45.859><c> of</c><00:03:45.979><c> the</c><00:03:46.099><c> places</c><00:03:46.519><c> that</c>

00:03:46.539 --> 00:03:46.549 align:start position:0%
change it in all of the places that
 

00:03:46.549 --> 00:03:48.369 align:start position:0%
change it in all of the places that
we've<00:03:46.819><c> actually</c><00:03:47.000><c> defined</c><00:03:47.569><c> that</c><00:03:47.750><c> right</c><00:03:48.109><c> so</c><00:03:48.290><c> in</c>

00:03:48.369 --> 00:03:48.379 align:start position:0%
we've actually defined that right so in
 

00:03:48.379 --> 00:03:50.379 align:start position:0%
we've actually defined that right so in
this<00:03:48.470><c> case</c><00:03:48.680><c> in</c><00:03:48.889><c> all</c><00:03:49.370><c> three</c><00:03:49.699><c> print</c><00:03:49.970><c> functions</c>

00:03:50.379 --> 00:03:50.389 align:start position:0%
this case in all three print functions
 

00:03:50.389 --> 00:03:52.509 align:start position:0%
this case in all three print functions
we<00:03:50.540><c> have</c><00:03:50.569><c> to</c><00:03:50.870><c> actually</c><00:03:51.229><c> just</c><00:03:51.470><c> occurred</c><00:03:51.829><c> what</c>

00:03:52.509 --> 00:03:52.519 align:start position:0%
we have to actually just occurred what
 

00:03:52.519 --> 00:03:53.770 align:start position:0%
we have to actually just occurred what
if<00:03:52.609><c> we</c><00:03:52.699><c> could</c><00:03:52.819><c> just</c><00:03:52.849><c> write</c><00:03:53.060><c> that</c><00:03:53.269><c> code</c><00:03:53.449><c> once</c>

00:03:53.770 --> 00:03:53.780 align:start position:0%
if we could just write that code once
 

00:03:53.780 --> 00:03:56.949 align:start position:0%
if we could just write that code once
and<00:03:54.109><c> then</c><00:03:54.889><c> somehow</c><00:03:55.459><c> be</c><00:03:55.909><c> able</c><00:03:56.030><c> to</c><00:03:56.329><c> fill</c><00:03:56.599><c> in</c><00:03:56.629><c> the</c>

00:03:56.949 --> 00:03:56.959 align:start position:0%
and then somehow be able to fill in the
 

00:03:56.959 --> 00:03:59.979 align:start position:0%
and then somehow be able to fill in the
blank<00:03:57.290><c> for</c><00:03:57.620><c> the</c><00:03:57.889><c> type</c><00:03:58.299><c> that's</c><00:03:59.299><c> where</c><00:03:59.750><c> we</c><00:03:59.840><c> can</c>

00:03:59.979 --> 00:03:59.989 align:start position:0%
blank for the type that's where we can
 

00:03:59.989 --> 00:04:02.020 align:start position:0%
blank for the type that's where we can
use<00:04:00.079><c> a</c><00:04:00.109><c> template</c><00:04:00.530><c> so</c><00:04:01.459><c> instead</c><00:04:01.729><c> of</c><00:04:01.849><c> writing</c>

00:04:02.020 --> 00:04:02.030 align:start position:0%
use a template so instead of writing
 

00:04:02.030 --> 00:04:03.550 align:start position:0%
use a template so instead of writing
this<00:04:02.209><c> code</c><00:04:02.449><c> this</c><00:04:02.750><c> many</c><00:04:02.989><c> times</c><00:04:03.229><c> what</c><00:04:03.439><c> I'm</c>

00:04:03.550 --> 00:04:03.560 align:start position:0%
this code this many times what I'm
 

00:04:03.560 --> 00:04:05.500 align:start position:0%
this code this many times what I'm
actually<00:04:03.739><c> going</c><00:04:04.129><c> to</c><00:04:04.310><c> do</c><00:04:04.459><c> is</c><00:04:05.000><c> just</c><00:04:05.180><c> convert</c>

00:04:05.500 --> 00:04:05.510 align:start position:0%
actually going to do is just convert
 

00:04:05.510 --> 00:04:07.689 align:start position:0%
actually going to do is just convert
this<00:04:05.629><c> into</c><00:04:05.840><c> being</c><00:04:06.079><c> a</c><00:04:06.199><c> template</c><00:04:06.650><c> the</c><00:04:07.400><c> way</c><00:04:07.549><c> that</c>

00:04:07.689 --> 00:04:07.699 align:start position:0%
this into being a template the way that
 

00:04:07.699 --> 00:04:09.429 align:start position:0%
this into being a template the way that
we<00:04:07.790><c> do</c><00:04:07.939><c> this</c><00:04:08.090><c> in</c><00:04:08.299><c> tactically</c><00:04:08.780><c> is</c><00:04:08.930><c> before</c><00:04:09.349><c> the</c>

00:04:09.429 --> 00:04:09.439 align:start position:0%
we do this in tactically is before the
 

00:04:09.439 --> 00:04:12.819 align:start position:0%
we do this in tactically is before the
return<00:04:09.709><c> type</c><00:04:10.009><c> we</c><00:04:10.549><c> write</c><00:04:10.790><c> template</c><00:04:11.409><c> then</c><00:04:12.409><c> open</c>

00:04:12.819 --> 00:04:12.829 align:start position:0%
return type we write template then open
 

00:04:12.829 --> 00:04:16.569 align:start position:0%
return type we write template then open
an<00:04:12.949><c> angular</c><00:04:13.280><c> bracket</c><00:04:13.669><c> type</c><00:04:14.419><c> name</c><00:04:14.750><c> and</c><00:04:15.579><c> then</c>

00:04:16.569 --> 00:04:16.579 align:start position:0%
an angular bracket type name and then
 

00:04:16.579 --> 00:04:17.529 align:start position:0%
an angular bracket type name and then
give<00:04:16.789><c> it</c><00:04:16.820><c> a</c><00:04:17.060><c> name</c>

00:04:17.529 --> 00:04:17.539 align:start position:0%
give it a name
 

00:04:17.539 --> 00:04:19.930 align:start position:0%
give it a name
typically<00:04:17.870><c> T</c><00:04:18.229><c> is</c><00:04:18.409><c> used</c><00:04:18.709><c> and</c><00:04:18.949><c> then</c><00:04:19.370><c> finally</c><00:04:19.789><c> we</c>

00:04:19.930 --> 00:04:19.940 align:start position:0%
typically T is used and then finally we
 

00:04:19.940 --> 00:04:21.789 align:start position:0%
typically T is used and then finally we
can<00:04:19.970><c> use</c><00:04:20.150><c> T</c><00:04:20.510><c> instead</c><00:04:21.049><c> of</c><00:04:21.169><c> our</c><00:04:21.289><c> actual</c><00:04:21.590><c> type</c>

00:04:21.789 --> 00:04:21.799 align:start position:0%
can use T instead of our actual type
 

00:04:21.799 --> 00:04:24.399 align:start position:0%
can use T instead of our actual type
over<00:04:22.130><c> here</c><00:04:22.400><c> so</c><00:04:22.909><c> this</c><00:04:23.029><c> becomes</c><00:04:23.180><c> void</c><00:04:23.690><c> print</c><00:04:24.080><c> T</c>

00:04:24.399 --> 00:04:24.409 align:start position:0%
over here so this becomes void print T
 

00:04:24.409 --> 00:04:25.440 align:start position:0%
over here so this becomes void print T
value

00:04:25.440 --> 00:04:25.450 align:start position:0%
value
 

00:04:25.450 --> 00:04:27.240 align:start position:0%
value
suddenly<00:04:25.780><c> if</c><00:04:26.050><c> I</c><00:04:26.260><c> actually</c><00:04:26.440><c> compile</c><00:04:27.040><c> this</c><00:04:27.190><c> code</c>

00:04:27.240 --> 00:04:27.250 align:start position:0%
suddenly if I actually compile this code
 

00:04:27.250 --> 00:04:29.520 align:start position:0%
suddenly if I actually compile this code
by<00:04:27.580><c> hitting</c><00:04:27.760><c> ctrl</c><00:04:28.210><c> f7</c><00:04:28.390><c> you</c><00:04:29.110><c> can</c><00:04:29.290><c> see</c><00:04:29.470><c> it</c>

00:04:29.520 --> 00:04:29.530 align:start position:0%
by hitting ctrl f7 you can see it
 

00:04:29.530 --> 00:04:31.320 align:start position:0%
by hitting ctrl f7 you can see it
compiles<00:04:29.920><c> just</c><00:04:30.100><c> fine</c><00:04:30.370><c> and</c><00:04:30.550><c> if</c><00:04:30.640><c> in</c><00:04:30.820><c> fact</c><00:04:31.030><c> if</c><00:04:31.210><c> I</c>

00:04:31.320 --> 00:04:31.330 align:start position:0%
compiles just fine and if in fact if I
 

00:04:31.330 --> 00:04:33.390 align:start position:0%
compiles just fine and if in fact if I
run<00:04:31.540><c> my</c><00:04:31.570><c> try</c><00:04:31.900><c> by</c><00:04:32.080><c> hitting</c><00:04:32.260><c> f5</c><00:04:32.650><c> look</c><00:04:33.130><c> at</c><00:04:33.220><c> that</c>

00:04:33.390 --> 00:04:33.400 align:start position:0%
run my try by hitting f5 look at that
 

00:04:33.400 --> 00:04:35.250 align:start position:0%
run my try by hitting f5 look at that
all<00:04:33.670><c> three</c><00:04:34.210><c> all</c><00:04:34.450><c> three</c><00:04:34.510><c> functions</c><00:04:35.110><c> actually</c>

00:04:35.250 --> 00:04:35.260 align:start position:0%
all three all three functions actually
 

00:04:35.260 --> 00:04:37.500 align:start position:0%
all three all three functions actually
work<00:04:35.680><c> even</c><00:04:36.460><c> though</c><00:04:36.550><c> we've</c><00:04:36.700><c> just</c><00:04:36.940><c> written</c><00:04:37.120><c> one</c>

00:04:37.500 --> 00:04:37.510 align:start position:0%
work even though we've just written one
 

00:04:37.510 --> 00:04:39.840 align:start position:0%
work even though we've just written one
function<00:04:38.140><c> so</c><00:04:38.380><c> how</c><00:04:38.650><c> on</c><00:04:38.860><c> earth</c><00:04:39.010><c> does</c><00:04:39.430><c> this</c><00:04:39.460><c> work</c>

00:04:39.840 --> 00:04:39.850 align:start position:0%
function so how on earth does this work
 

00:04:39.850 --> 00:04:41.610 align:start position:0%
function so how on earth does this work
and<00:04:40.120><c> what's</c><00:04:40.300><c> actually</c><00:04:40.480><c> happening</c><00:04:41.080><c> here</c><00:04:41.320><c> well</c>

00:04:41.610 --> 00:04:41.620 align:start position:0%
and what's actually happening here well
 

00:04:41.620 --> 00:04:42.930 align:start position:0%
and what's actually happening here well
the<00:04:41.740><c> first</c><00:04:41.950><c> thing</c><00:04:42.160><c> that</c><00:04:42.340><c> gives</c><00:04:42.460><c> away</c><00:04:42.670><c> that</c>

00:04:42.930 --> 00:04:42.940 align:start position:0%
the first thing that gives away that
 

00:04:42.940 --> 00:04:44.850 align:start position:0%
the first thing that gives away that
this<00:04:43.030><c> is</c><00:04:43.090><c> an</c><00:04:43.330><c> actual</c><00:04:43.540><c> template</c><00:04:44.050><c> is</c><00:04:44.230><c> well</c><00:04:44.680><c> the</c>

00:04:44.850 --> 00:04:44.860 align:start position:0%
this is an actual template is well the
 

00:04:44.860 --> 00:04:47.160 align:start position:0%
this is an actual template is well the
word<00:04:45.040><c> template</c><00:04:45.610><c> right</c><00:04:46.030><c> this</c><00:04:46.600><c> means</c><00:04:46.840><c> that</c><00:04:47.050><c> this</c>

00:04:47.160 --> 00:04:47.170 align:start position:0%
word template right this means that this
 

00:04:47.170 --> 00:04:49.290 align:start position:0%
word template right this means that this
is<00:04:47.230><c> a</c><00:04:47.350><c> template</c><00:04:48.010><c> that</c><00:04:48.250><c> will</c><00:04:48.460><c> be</c><00:04:48.610><c> evaluated</c><00:04:49.150><c> at</c>

00:04:49.290 --> 00:04:49.300 align:start position:0%
is a template that will be evaluated at
 

00:04:49.300 --> 00:04:51.360 align:start position:0%
is a template that will be evaluated at
compile<00:04:49.720><c> time</c><00:04:49.750><c> so</c><00:04:50.320><c> basically</c><00:04:50.560><c> this</c><00:04:51.040><c> is</c><00:04:51.100><c> an</c>

00:04:51.360 --> 00:04:51.370 align:start position:0%
compile time so basically this is an
 

00:04:51.370 --> 00:04:53.640 align:start position:0%
compile time so basically this is an
actual<00:04:51.790><c> code</c><00:04:52.300><c> this</c><00:04:52.570><c> isn't</c><00:04:52.900><c> actually</c><00:04:53.050><c> a</c><00:04:53.320><c> real</c>

00:04:53.640 --> 00:04:53.650 align:start position:0%
actual code this isn't actually a real
 

00:04:53.650 --> 00:04:56.400 align:start position:0%
actual code this isn't actually a real
function<00:04:54.250><c> this</c><00:04:54.730><c> only</c><00:04:55.030><c> gets</c><00:04:55.450><c> created</c><00:04:56.050><c> when</c><00:04:56.290><c> we</c>

00:04:56.400 --> 00:04:56.410 align:start position:0%
function this only gets created when we
 

00:04:56.410 --> 00:04:58.470 align:start position:0%
function this only gets created when we
actually<00:04:56.590><c> call</c><00:04:57.130><c> it</c><00:04:57.340><c> and</c><00:04:57.520><c> when</c><00:04:57.850><c> we</c><00:04:58.030><c> call</c><00:04:58.300><c> it</c>

00:04:58.470 --> 00:04:58.480 align:start position:0%
actually call it and when we call it
 

00:04:58.480 --> 00:05:00.900 align:start position:0%
actually call it and when we call it
based<00:04:58.750><c> on</c><00:04:58.960><c> how</c><00:04:59.320><c> we</c><00:04:59.380><c> call</c><00:04:59.980><c> it</c><00:05:00.160><c> with</c><00:05:00.370><c> what</c><00:05:00.580><c> types</c>

00:05:00.900 --> 00:05:00.910 align:start position:0%
based on how we call it with what types
 

00:05:00.910 --> 00:05:03.150 align:start position:0%
based on how we call it with what types
does<00:05:01.660><c> this</c><00:05:01.840><c> actually</c><00:05:02.350><c> get</c><00:05:02.530><c> created</c><00:05:03.070><c> and</c>

00:05:03.150 --> 00:05:03.160 align:start position:0%
does this actually get created and
 

00:05:03.160 --> 00:05:05.370 align:start position:0%
does this actually get created and
compiled<00:05:03.700><c> as</c><00:05:04.000><c> source</c><00:05:04.390><c> code</c><00:05:04.510><c> now</c><00:05:05.020><c> this</c><00:05:05.170><c> next</c>

00:05:05.370 --> 00:05:05.380 align:start position:0%
compiled as source code now this next
 

00:05:05.380 --> 00:05:06.750 align:start position:0%
compiled as source code now this next
part<00:05:05.620><c> is</c><00:05:05.800><c> something</c><00:05:06.070><c> called</c><00:05:06.250><c> a</c><00:05:06.310><c> template</c>

00:05:06.750 --> 00:05:06.760 align:start position:0%
part is something called a template
 

00:05:06.760 --> 00:05:08.970 align:start position:0%
part is something called a template
parameter<00:05:07.450><c> in</c><00:05:07.630><c> this</c><00:05:08.020><c> case</c><00:05:08.290><c> we've</c><00:05:08.500><c> chosen</c><00:05:08.530><c> to</c>

00:05:08.970 --> 00:05:08.980 align:start position:0%
parameter in this case we've chosen to
 

00:05:08.980 --> 00:05:11.280 align:start position:0%
parameter in this case we've chosen to
use<00:05:09.010><c> type</c><00:05:09.490><c> name</c><00:05:09.820><c> as</c><00:05:10.060><c> the</c><00:05:10.420><c> type</c><00:05:10.690><c> of</c><00:05:10.930><c> template</c>

00:05:11.280 --> 00:05:11.290 align:start position:0%
use type name as the type of template
 

00:05:11.290 --> 00:05:14.250 align:start position:0%
use type name as the type of template
parameter<00:05:11.770><c> and</c><00:05:11.920><c> then</c><00:05:12.310><c> T</c><00:05:12.670><c> is</c><00:05:12.910><c> just</c><00:05:12.970><c> a</c><00:05:13.690><c> name</c><00:05:14.020><c> so</c>

00:05:14.250 --> 00:05:14.260 align:start position:0%
parameter and then T is just a name so
 

00:05:14.260 --> 00:05:15.450 align:start position:0%
parameter and then T is just a name so
this<00:05:14.350><c> could</c><00:05:14.530><c> be</c><00:05:14.560><c> anything</c><00:05:14.680><c> we</c><00:05:15.160><c> could</c><00:05:15.310><c> call</c>

00:05:15.450 --> 00:05:15.460 align:start position:0%
this could be anything we could call
 

00:05:15.460 --> 00:05:17.460 align:start position:0%
this could be anything we could call
this<00:05:15.580><c> type</c><00:05:15.850><c> with</c><00:05:16.480><c> the</c><00:05:16.510><c> call</c><00:05:16.750><c> this</c><00:05:16.900><c> churn</c><00:05:17.200><c> over</c>

00:05:17.460 --> 00:05:17.470 align:start position:0%
this type with the call this churn over
 

00:05:17.470 --> 00:05:18.840 align:start position:0%
this type with the call this churn over
the<00:05:17.560><c> course</c><00:05:17.740><c> anything</c><00:05:18.010><c> we</c><00:05:18.220><c> really</c><00:05:18.460><c> wanted</c><00:05:18.670><c> to</c>

00:05:18.840 --> 00:05:18.850 align:start position:0%
the course anything we really wanted to
 

00:05:18.850 --> 00:05:21.380 align:start position:0%
the course anything we really wanted to
and<00:05:19.210><c> so</c><00:05:20.050><c> what</c><00:05:20.230><c> happens</c><00:05:20.560><c> is</c><00:05:20.710><c> this</c><00:05:20.950><c> specific</c>

00:05:21.380 --> 00:05:21.390 align:start position:0%
and so what happens is this specific
 

00:05:21.390 --> 00:05:23.700 align:start position:0%
and so what happens is this specific
variable<00:05:22.390><c> name</c><00:05:22.600><c> this</c><00:05:22.810><c> template</c><00:05:23.200><c> kind</c><00:05:23.620><c> of</c>

00:05:23.700 --> 00:05:23.710 align:start position:0%
variable name this template kind of
 

00:05:23.710 --> 00:05:26.130 align:start position:0%
variable name this template kind of
argument<00:05:24.340><c> name</c><00:05:24.580><c> we</c><00:05:25.180><c> can</c><00:05:25.360><c> use</c><00:05:25.540><c> that</c><00:05:25.750><c> throughout</c>

00:05:26.130 --> 00:05:26.140 align:start position:0%
argument name we can use that throughout
 

00:05:26.140 --> 00:05:28.290 align:start position:0%
argument name we can use that throughout
our<00:05:26.290><c> actual</c><00:05:26.590><c> template</c><00:05:27.040><c> code</c><00:05:27.310><c> to</c><00:05:27.700><c> substitute</c>

00:05:28.290 --> 00:05:28.300 align:start position:0%
our actual template code to substitute
 

00:05:28.300 --> 00:05:31.110 align:start position:0%
our actual template code to substitute
whatever<00:05:28.780><c> type</c><00:05:29.170><c> in</c><00:05:29.440><c> this</c><00:05:29.590><c> case</c><00:05:29.860><c> gets</c><00:05:30.220><c> used</c><00:05:30.640><c> so</c>

00:05:31.110 --> 00:05:31.120 align:start position:0%
whatever type in this case gets used so
 

00:05:31.120 --> 00:05:32.760 align:start position:0%
whatever type in this case gets used so
what<00:05:31.360><c> we've</c><00:05:31.570><c> done</c><00:05:31.810><c> is</c><00:05:32.110><c> instead</c><00:05:32.500><c> of</c><00:05:32.620><c> just</c>

00:05:32.760 --> 00:05:32.770 align:start position:0%
what we've done is instead of just
 

00:05:32.770 --> 00:05:35.550 align:start position:0%
what we've done is instead of just
writing<00:05:32.950><c> int</c><00:05:33.430><c> value</c><00:05:34.120><c> like</c><00:05:34.300><c> that</c><00:05:34.330><c> where</c><00:05:35.290><c> we've</c>

00:05:35.550 --> 00:05:35.560 align:start position:0%
writing int value like that where we've
 

00:05:35.560 --> 00:05:37.800 align:start position:0%
writing int value like that where we've
written<00:05:35.890><c> T</c><00:05:36.190><c> value</c><00:05:36.670><c> which</c><00:05:37.060><c> means</c><00:05:37.300><c> that</c><00:05:37.480><c> when</c><00:05:37.660><c> we</c>

00:05:37.800 --> 00:05:37.810 align:start position:0%
written T value which means that when we
 

00:05:37.810 --> 00:05:40.290 align:start position:0%
written T value which means that when we
actually<00:05:38.260><c> call</c><00:05:38.500><c> this</c><00:05:38.530><c> code</c><00:05:39.040><c> whatever</c><00:05:39.610><c> type</c><00:05:40.060><c> we</c>

00:05:40.290 --> 00:05:40.300 align:start position:0%
actually call this code whatever type we
 

00:05:40.300 --> 00:05:42.600 align:start position:0%
actually call this code whatever type we
specify<00:05:40.840><c> here</c><00:05:41.290><c> is</c><00:05:41.440><c> the</c><00:05:41.860><c> type</c><00:05:42.070><c> that</c><00:05:42.100><c> actually</c>

00:05:42.600 --> 00:05:42.610 align:start position:0%
specify here is the type that actually
 

00:05:42.610 --> 00:05:45.150 align:start position:0%
specify here is the type that actually
goes<00:05:42.820><c> into</c><00:05:43.180><c> this</c><00:05:43.900><c> argument</c><00:05:44.230><c> now</c><00:05:44.860><c> this</c><00:05:45.010><c> is</c><00:05:45.130><c> a</c>

00:05:45.150 --> 00:05:45.160 align:start position:0%
goes into this argument now this is a
 

00:05:45.160 --> 00:05:46.770 align:start position:0%
goes into this argument now this is a
little<00:05:45.340><c> bit</c><00:05:45.430><c> harder</c><00:05:45.730><c> to</c><00:05:45.820><c> read</c><00:05:46.030><c> in</c><00:05:46.300><c> this</c><00:05:46.510><c> case</c>

00:05:46.770 --> 00:05:46.780 align:start position:0%
little bit harder to read in this case
 

00:05:46.780 --> 00:05:48.180 align:start position:0%
little bit harder to read in this case
because<00:05:47.080><c> when</c><00:05:47.200><c> I</c><00:05:47.230><c> actually</c><00:05:47.530><c> specifying</c><00:05:48.010><c> the</c>

00:05:48.180 --> 00:05:48.190 align:start position:0%
because when I actually specifying the
 

00:05:48.190 --> 00:05:50.310 align:start position:0%
because when I actually specifying the
type<00:05:48.300><c> explicitly</c><00:05:49.300><c> it's</c><00:05:49.840><c> just</c><00:05:50.110><c> kind</c><00:05:50.260><c> of</c>

00:05:50.310 --> 00:05:50.320 align:start position:0%
type explicitly it's just kind of
 

00:05:50.320 --> 00:05:52.410 align:start position:0%
type explicitly it's just kind of
getting<00:05:50.470><c> it</c><00:05:50.710><c> implicitly</c><00:05:51.250><c> from</c><00:05:51.580><c> the</c><00:05:51.700><c> actual</c>

00:05:52.410 --> 00:05:52.420 align:start position:0%
getting it implicitly from the actual
 

00:05:52.420 --> 00:05:54.450 align:start position:0%
getting it implicitly from the actual
parameters<00:05:52.990><c> here</c><00:05:53.230><c> in</c><00:05:53.350><c> this</c><00:05:53.500><c> case</c><00:05:53.770><c> but</c><00:05:54.280><c> what</c><00:05:54.370><c> we</c>

00:05:54.450 --> 00:05:54.460 align:start position:0%
parameters here in this case but what we
 

00:05:54.460 --> 00:05:56.340 align:start position:0%
parameters here in this case but what we
can<00:05:54.670><c> do</c><00:05:54.850><c> is</c><00:05:54.940><c> when</c><00:05:55.060><c> we</c><00:05:55.150><c> call</c><00:05:55.390><c> print</c><00:05:55.750><c> we</c><00:05:56.320><c> can</c>

00:05:56.340 --> 00:05:56.350 align:start position:0%
can do is when we call print we can
 

00:05:56.350 --> 00:05:58.410 align:start position:0%
can do is when we call print we can
actually<00:05:56.650><c> specify</c><00:05:57.010><c> using</c><00:05:57.550><c> angular</c><00:05:58.000><c> brackets</c>

00:05:58.410 --> 00:05:58.420 align:start position:0%
actually specify using angular brackets
 

00:05:58.420 --> 00:05:59.970 align:start position:0%
actually specify using angular brackets
here<00:05:58.540><c> the</c><00:05:58.750><c> type</c><00:05:58.960><c> that</c><00:05:59.200><c> we</c><00:05:59.320><c> want</c><00:05:59.590><c> so</c><00:05:59.830><c> for</c>

00:05:59.970 --> 00:05:59.980 align:start position:0%
here the type that we want so for
 

00:05:59.980 --> 00:06:02.040 align:start position:0%
here the type that we want so for
example<00:06:00.400><c> print</c><00:06:00.640><c> int</c><00:06:01.030><c> if</c><00:06:01.360><c> I</c><00:06:01.540><c> let's</c><00:06:01.750><c> just</c><00:06:01.810><c> get</c>

00:06:02.040 --> 00:06:02.050 align:start position:0%
example print int if I let's just get
 

00:06:02.050 --> 00:06:03.780 align:start position:0%
example print int if I let's just get
rid<00:06:02.140><c> of</c><00:06:02.230><c> these</c><00:06:02.350><c> and</c><00:06:02.590><c> keep</c><00:06:03.130><c> it</c><00:06:03.250><c> real</c><00:06:03.400><c> simple</c><00:06:03.580><c> for</c>

00:06:03.780 --> 00:06:03.790 align:start position:0%
rid of these and keep it real simple for
 

00:06:03.790 --> 00:06:05.640 align:start position:0%
rid of these and keep it real simple for
now<00:06:03.940><c> so</c><00:06:04.540><c> what</c><00:06:04.660><c> we've</c><00:06:04.810><c> done</c><00:06:04.930><c> here</c><00:06:05.200><c> is</c><00:06:05.440><c> we've</c>

00:06:05.640 --> 00:06:05.650 align:start position:0%
now so what we've done here is we've
 

00:06:05.650 --> 00:06:07.950 align:start position:0%
now so what we've done here is we've
pulled<00:06:05.890><c> the</c><00:06:06.010><c> print</c><00:06:06.340><c> function</c><00:06:06.820><c> with</c><00:06:07.450><c> the</c><00:06:07.660><c> type</c>

00:06:07.950 --> 00:06:07.960 align:start position:0%
pulled the print function with the type
 

00:06:07.960 --> 00:06:11.010 align:start position:0%
pulled the print function with the type
int<00:06:08.320><c> this</c><00:06:09.250><c> this</c><00:06:09.790><c> template</c><00:06:10.210><c> argument</c><00:06:10.720><c> here</c>

00:06:11.010 --> 00:06:11.020 align:start position:0%
int this this template argument here
 

00:06:11.020 --> 00:06:13.050 align:start position:0%
int this this template argument here
accepts<00:06:11.740><c> a</c><00:06:11.890><c> type</c><00:06:12.130><c> name</c><00:06:12.430><c> now</c><00:06:12.610><c> you</c><00:06:12.640><c> can</c><00:06:12.940><c> also</c>

00:06:13.050 --> 00:06:13.060 align:start position:0%
accepts a type name now you can also
 

00:06:13.060 --> 00:06:15.240 align:start position:0%
accepts a type name now you can also
write<00:06:13.330><c> this</c><00:06:13.480><c> as</c><00:06:13.660><c> class</c><00:06:13.960><c> by</c><00:06:14.290><c> the</c><00:06:14.350><c> way</c><00:06:14.530><c> it</c><00:06:14.770><c> is</c>

00:06:15.240 --> 00:06:15.250 align:start position:0%
write this as class by the way it is
 

00:06:15.250 --> 00:06:17.490 align:start position:0%
write this as class by the way it is
exactly<00:06:15.820><c> the</c><00:06:16.060><c> same</c><00:06:16.270><c> synonymous</c><00:06:16.930><c> right</c><00:06:17.170><c> class</c>

00:06:17.490 --> 00:06:17.500 align:start position:0%
exactly the same synonymous right class
 

00:06:17.500 --> 00:06:20.280 align:start position:0%
exactly the same synonymous right class
class<00:06:18.160><c> type</c><00:06:18.490><c> name</c><00:06:18.700><c> I</c><00:06:18.940><c> tend</c><00:06:19.540><c> to</c><00:06:19.630><c> use</c><00:06:19.690><c> type</c><00:06:20.050><c> name</c>

00:06:20.280 --> 00:06:20.290 align:start position:0%
class type name I tend to use type name
 

00:06:20.290 --> 00:06:22.620 align:start position:0%
class type name I tend to use type name
because<00:06:20.680><c> class</c><00:06:20.940><c> by</c><00:06:21.940><c> just</c><00:06:22.120><c> reading</c><00:06:22.270><c> the</c><00:06:22.480><c> code</c>

00:06:22.620 --> 00:06:22.630 align:start position:0%
because class by just reading the code
 

00:06:22.630 --> 00:06:24.480 align:start position:0%
because class by just reading the code
class<00:06:22.990><c> kind</c><00:06:23.470><c> of</c><00:06:23.560><c> implies</c><00:06:23.860><c> that</c><00:06:23.890><c> it</c><00:06:24.130><c> has</c><00:06:24.250><c> to</c><00:06:24.370><c> be</c>

00:06:24.480 --> 00:06:24.490 align:start position:0%
class kind of implies that it has to be
 

00:06:24.490 --> 00:06:27.420 align:start position:0%
class kind of implies that it has to be
a<00:06:24.520><c> class</c><00:06:25.060><c> type</c><00:06:25.450><c> that's</c><00:06:26.290><c> not</c><00:06:26.560><c> true</c><00:06:26.830><c> as</c><00:06:27.100><c> you</c><00:06:27.310><c> can</c>

00:06:27.420 --> 00:06:27.430 align:start position:0%
a class type that's not true as you can
 

00:06:27.430 --> 00:06:28.770 align:start position:0%
a class type that's not true as you can
see<00:06:27.550><c> this</c><00:06:27.670><c> coastal</c><00:06:28.090><c> compiles</c><00:06:28.510><c> even</c><00:06:28.690><c> though</c>

00:06:28.770 --> 00:06:28.780 align:start position:0%
see this coastal compiles even though
 

00:06:28.780 --> 00:06:31.500 align:start position:0%
see this coastal compiles even though
I'm<00:06:28.870><c> using</c><00:06:28.930><c> int</c><00:06:29.380><c> so</c><00:06:29.920><c> because</c><00:06:30.790><c> of</c><00:06:30.940><c> that</c><00:06:31.030><c> I</c><00:06:31.270><c> tend</c>

00:06:31.500 --> 00:06:31.510 align:start position:0%
I'm using int so because of that I tend
 

00:06:31.510 --> 00:06:33.840 align:start position:0%
I'm using int so because of that I tend
to<00:06:31.570><c> just</c><00:06:31.690><c> use</c><00:06:31.960><c> type</c><00:06:32.230><c> name</c><00:06:32.500><c> because</c><00:06:33.160><c> it</c><00:06:33.610><c> just</c>

00:06:33.840 --> 00:06:33.850 align:start position:0%
to just use type name because it just
 

00:06:33.850 --> 00:06:34.490 align:start position:0%
to just use type name because it just
makes<00:06:34.180><c> more</c>

00:06:34.490 --> 00:06:34.500 align:start position:0%
makes more
 

00:06:34.500 --> 00:06:37.130 align:start position:0%
makes more
so<00:06:35.070><c> we</c><00:06:35.220><c> write</c><00:06:35.430><c> type</c><00:06:35.700><c> name</c><00:06:35.940><c> T</c><00:06:36.270><c> which</c><00:06:36.750><c> means</c><00:06:36.780><c> that</c>

00:06:37.130 --> 00:06:37.140 align:start position:0%
so we write type name T which means that
 

00:06:37.140 --> 00:06:38.600 align:start position:0%
so we write type name T which means that
the<00:06:37.260><c> first</c><00:06:37.530><c> half</c><00:06:37.770><c> of</c><00:06:37.800><c> that</c><00:06:37.890><c> argument</c><00:06:38.130><c> that</c><00:06:38.460><c> we</c>

00:06:38.600 --> 00:06:38.610 align:start position:0%
the first half of that argument that we
 

00:06:38.610 --> 00:06:41.150 align:start position:0%
the first half of that argument that we
have<00:06:38.850><c> here</c><00:06:39.240><c> is</c><00:06:39.600><c> an</c><00:06:39.840><c> actual</c><00:06:40.020><c> type</c><00:06:40.410><c> so</c><00:06:40.830><c> we</c><00:06:40.980><c> can</c>

00:06:41.150 --> 00:06:41.160 align:start position:0%
have here is an actual type so we can
 

00:06:41.160 --> 00:06:43.550 align:start position:0%
have here is an actual type so we can
write<00:06:41.310><c> end</c><00:06:41.610><c> here</c><00:06:41.910><c> we</c><00:06:42.390><c> can</c><00:06:42.570><c> write</c><00:06:42.690><c> STD</c><00:06:43.200><c> string</c>

00:06:43.550 --> 00:06:43.560 align:start position:0%
write end here we can write STD string
 

00:06:43.560 --> 00:06:45.140 align:start position:0%
write end here we can write STD string
we<00:06:43.830><c> can</c><00:06:43.980><c> write</c><00:06:44.130><c> whatever</c><00:06:44.430><c> we</c><00:06:44.580><c> want</c><00:06:44.790><c> obviously</c>

00:06:45.140 --> 00:06:45.150 align:start position:0%
we can write whatever we want obviously
 

00:06:45.150 --> 00:06:47.000 align:start position:0%
we can write whatever we want obviously
if<00:06:45.210><c> we</c><00:06:45.300><c> write</c><00:06:45.480><c> STD</c><00:06:45.930><c> string</c><00:06:46.230><c> then</c><00:06:46.860><c> what</c>

00:06:47.000 --> 00:06:47.010 align:start position:0%
if we write STD string then what
 

00:06:47.010 --> 00:06:48.770 align:start position:0%
if we write STD string then what
actually<00:06:47.310><c> happens</c><00:06:47.640><c> as</c><00:06:47.790><c> T</c><00:06:48.030><c> gets</c><00:06:48.210><c> replaced</c><00:06:48.570><c> with</c>

00:06:48.770 --> 00:06:48.780 align:start position:0%
actually happens as T gets replaced with
 

00:06:48.780 --> 00:06:51.020 align:start position:0%
actually happens as T gets replaced with
the<00:06:49.080><c> type</c><00:06:49.260><c> that</c><00:06:49.410><c> we've</c><00:06:49.530><c> specified</c><00:06:49.800><c> STD</c><00:06:50.730><c> string</c>

00:06:51.020 --> 00:06:51.030 align:start position:0%
the type that we've specified STD string
 

00:06:51.030 --> 00:06:52.970 align:start position:0%
the type that we've specified STD string
which<00:06:51.570><c> means</c><00:06:51.600><c> that</c><00:06:51.960><c> we</c><00:06:52.050><c> are</c><00:06:52.170><c> obviously</c><00:06:52.380><c> are</c>

00:06:52.970 --> 00:06:52.980 align:start position:0%
which means that we are obviously are
 

00:06:52.980 --> 00:06:55.760 align:start position:0%
which means that we are obviously are
taking<00:06:53.550><c> in</c><00:06:53.700><c> a</c><00:06:53.880><c> string</c><00:06:54.360><c> value</c><00:06:54.540><c> hence</c><00:06:55.350><c> why</c><00:06:55.710><c> this</c>

00:06:55.760 --> 00:06:55.770 align:start position:0%
taking in a string value hence why this
 

00:06:55.770 --> 00:06:57.260 align:start position:0%
taking in a string value hence why this
code<00:06:56.070><c> is</c><00:06:56.160><c> not</c><00:06:56.280><c> compiling</c><00:06:56.670><c> so</c><00:06:57.000><c> we</c><00:06:57.090><c> actually</c>

00:06:57.260 --> 00:06:57.270 align:start position:0%
code is not compiling so we actually
 

00:06:57.270 --> 00:06:59.540 align:start position:0%
code is not compiling so we actually
have<00:06:57.510><c> to</c><00:06:57.630><c> write</c><00:06:57.750><c> something</c><00:06:58.080><c> here</c><00:06:58.440><c> like</c><00:06:59.070><c> China</c>

00:06:59.540 --> 00:06:59.550 align:start position:0%
have to write something here like China
 

00:06:59.550 --> 00:07:01.220 align:start position:0%
have to write something here like China
or<00:06:59.820><c> something</c><00:07:00.000><c> now</c><00:07:00.510><c> if</c><00:07:00.600><c> we</c><00:07:00.690><c> go</c><00:07:00.810><c> back</c><00:07:00.990><c> to</c><00:07:01.020><c> our</c>

00:07:01.220 --> 00:07:01.230 align:start position:0%
or something now if we go back to our
 

00:07:01.230 --> 00:07:04.970 align:start position:0%
or something now if we go back to our
five<00:07:01.530><c> example</c><00:07:02.570><c> we</c><00:07:03.570><c> can</c><00:07:03.750><c> specify</c><00:07:03.960><c> int</c><00:07:04.500><c> here</c><00:07:04.800><c> but</c>

00:07:04.970 --> 00:07:04.980 align:start position:0%
five example we can specify int here but
 

00:07:04.980 --> 00:07:07.250 align:start position:0%
five example we can specify int here but
we<00:07:05.100><c> don't</c><00:07:05.310><c> have</c><00:07:05.520><c> to</c><00:07:05.820><c> if</c><00:07:06.090><c> it's</c><00:07:06.360><c> possible</c><00:07:06.600><c> for</c>

00:07:07.250 --> 00:07:07.260 align:start position:0%
we don't have to if it's possible for
 

00:07:07.260 --> 00:07:09.560 align:start position:0%
we don't have to if it's possible for
the<00:07:07.830><c> type</c><00:07:08.040><c> to</c><00:07:08.220><c> actually</c><00:07:08.550><c> be</c><00:07:08.700><c> worked</c><00:07:08.970><c> out</c><00:07:09.210><c> by</c>

00:07:09.560 --> 00:07:09.570 align:start position:0%
the type to actually be worked out by
 

00:07:09.570 --> 00:07:11.870 align:start position:0%
the type to actually be worked out by
the<00:07:09.680><c> argument</c><00:07:10.680><c> that</c><00:07:10.770><c> we</c><00:07:10.920><c> use</c><00:07:11.130><c> here</c><00:07:11.370><c> either</c><00:07:11.550><c> by</c>

00:07:11.870 --> 00:07:11.880 align:start position:0%
the argument that we use here either by
 

00:07:11.880 --> 00:07:13.910 align:start position:0%
the argument that we use here either by
the<00:07:11.940><c> return</c><00:07:12.480><c> value</c><00:07:12.900><c> which</c><00:07:13.050><c> which</c><00:07:13.500><c> we</c><00:07:13.650><c> can</c><00:07:13.800><c> talk</c>

00:07:13.910 --> 00:07:13.920 align:start position:0%
the return value which which we can talk
 

00:07:13.920 --> 00:07:16.460 align:start position:0%
the return value which which we can talk
about<00:07:14.040><c> later</c><00:07:14.280><c> or</c><00:07:14.640><c> by</c><00:07:15.270><c> the</c><00:07:15.330><c> actual</c><00:07:15.810><c> parameter</c>

00:07:16.460 --> 00:07:16.470 align:start position:0%
about later or by the actual parameter
 

00:07:16.470 --> 00:07:18.290 align:start position:0%
about later or by the actual parameter
here<00:07:16.710><c> so</c><00:07:16.950><c> in</c><00:07:17.070><c> other</c><00:07:17.160><c> words</c><00:07:17.430><c> a</c><00:07:17.640><c> plus</c><00:07:17.820><c> boss</c><00:07:18.000><c> knows</c>

00:07:18.290 --> 00:07:18.300 align:start position:0%
here so in other words a plus boss knows
 

00:07:18.300 --> 00:07:20.450 align:start position:0%
here so in other words a plus boss knows
that<00:07:18.540><c> five</c><00:07:18.780><c> is</c><00:07:18.990><c> an</c><00:07:19.140><c> integer</c><00:07:19.470><c> it</c><00:07:20.190><c> can</c>

00:07:20.450 --> 00:07:20.460 align:start position:0%
that five is an integer it can
 

00:07:20.460 --> 00:07:22.580 align:start position:0%
that five is an integer it can
automatically<00:07:20.970><c> deduce</c><00:07:21.450><c> what</c><00:07:21.900><c> type</c><00:07:22.200><c> T</c><00:07:22.530><c> should</c>

00:07:22.580 --> 00:07:22.590 align:start position:0%
automatically deduce what type T should
 

00:07:22.590 --> 00:07:24.530 align:start position:0%
automatically deduce what type T should
be<00:07:22.800><c> which</c><00:07:23.160><c> is</c><00:07:23.310><c> why</c><00:07:23.460><c> we</c><00:07:23.700><c> don't</c><00:07:23.880><c> actually</c><00:07:24.210><c> have</c>

00:07:24.530 --> 00:07:24.540 align:start position:0%
be which is why we don't actually have
 

00:07:24.540 --> 00:07:26.210 align:start position:0%
be which is why we don't actually have
to<00:07:24.690><c> specify</c><00:07:25.230><c> it</c><00:07:25.290><c> using</c><00:07:25.710><c> those</c><00:07:25.830><c> angular</c>

00:07:26.210 --> 00:07:26.220 align:start position:0%
to specify it using those angular
 

00:07:26.220 --> 00:07:28.250 align:start position:0%
to specify it using those angular
brackets<00:07:26.640><c> which</c><00:07:27.150><c> makes</c><00:07:27.360><c> our</c><00:07:27.540><c> job</c><00:07:27.720><c> a</c><00:07:27.840><c> bit</c><00:07:27.990><c> even</c>

00:07:28.250 --> 00:07:28.260 align:start position:0%
brackets which makes our job a bit even
 

00:07:28.260 --> 00:07:30.020 align:start position:0%
brackets which makes our job a bit even
easier<00:07:28.560><c> now</c><00:07:28.919><c> that</c><00:07:29.100><c> being</c><00:07:29.310><c> said</c><00:07:29.370><c> let</c><00:07:29.760><c> me</c><00:07:29.850><c> show</c>

00:07:30.020 --> 00:07:30.030 align:start position:0%
easier now that being said let me show
 

00:07:30.030 --> 00:07:32.090 align:start position:0%
easier now that being said let me show
you<00:07:30.120><c> explicitly</c><00:07:30.720><c> what</c><00:07:30.900><c> actually</c><00:07:31.200><c> happens</c><00:07:31.590><c> if</c>

00:07:32.090 --> 00:07:32.100 align:start position:0%
you explicitly what actually happens if
 

00:07:32.100 --> 00:07:34.340 align:start position:0%
you explicitly what actually happens if
you<00:07:32.400><c> do</c><00:07:32.550><c> not</c><00:07:32.730><c> write</c><00:07:33.120><c> anything</c><00:07:33.690><c> so</c><00:07:34.169><c> I'm</c><00:07:34.320><c> not</c>

00:07:34.340 --> 00:07:34.350 align:start position:0%
you do not write anything so I'm not
 

00:07:34.350 --> 00:07:37.190 align:start position:0%
you do not write anything so I'm not
using<00:07:34.680><c> this</c><00:07:34.890><c> print</c><00:07:35.160><c> function</c><00:07:35.580><c> at</c><00:07:35.760><c> all</c><00:07:36.200><c> this</c>

00:07:37.190 --> 00:07:37.200 align:start position:0%
using this print function at all this
 

00:07:37.200 --> 00:07:39.200 align:start position:0%
using this print function at all this
print<00:07:37.590><c> function</c><00:07:38.040><c> does</c><00:07:38.460><c> not</c><00:07:38.669><c> really</c><00:07:39.000><c> exist</c>

00:07:39.200 --> 00:07:39.210 align:start position:0%
print function does not really exist
 

00:07:39.210 --> 00:07:41.720 align:start position:0%
print function does not really exist
this<00:07:39.870><c> print</c><00:07:40.290><c> function</c><00:07:40.740><c> is</c><00:07:40.890><c> just</c><00:07:41.160><c> a</c><00:07:41.250><c> template</c>

00:07:41.720 --> 00:07:41.730 align:start position:0%
this print function is just a template
 

00:07:41.730 --> 00:07:44.510 align:start position:0%
this print function is just a template
which<00:07:42.360><c> actually</c><00:07:42.690><c> gets</c><00:07:42.870><c> created</c><00:07:43.500><c> when</c><00:07:44.040><c> we</c><00:07:44.250><c> call</c>

00:07:44.510 --> 00:07:44.520 align:start position:0%
which actually gets created when we call
 

00:07:44.520 --> 00:07:46.250 align:start position:0%
which actually gets created when we call
the<00:07:44.669><c> print</c><00:07:44.940><c> function</c><00:07:45.330><c> with</c><00:07:45.780><c> the</c><00:07:45.960><c> given</c>

00:07:46.250 --> 00:07:46.260 align:start position:0%
the print function with the given
 

00:07:46.260 --> 00:07:48.080 align:start position:0%
the print function with the given
template<00:07:46.620><c> argument</c><00:07:47.070><c> and</c><00:07:47.220><c> I</c><00:07:47.520><c> can</c><00:07:47.700><c> even</c><00:07:47.910><c> prove</c>

00:07:48.080 --> 00:07:48.090 align:start position:0%
template argument and I can even prove
 

00:07:48.090 --> 00:07:50.300 align:start position:0%
template argument and I can even prove
this<00:07:48.300><c> by</c><00:07:48.570><c> making</c><00:07:49.020><c> a</c><00:07:49.200><c> syntax</c><00:07:49.680><c> error</c><00:07:49.830><c> here</c><00:07:50.160><c> so</c>

00:07:50.300 --> 00:07:50.310 align:start position:0%
this by making a syntax error here so
 

00:07:50.310 --> 00:07:52.310 align:start position:0%
this by making a syntax error here so
let's<00:07:50.460><c> just</c><00:07:50.610><c> say</c><00:07:50.700><c> instead</c><00:07:50.910><c> of</c><00:07:50.970><c> value</c><00:07:51.450><c> I</c><00:07:51.660><c> forget</c>

00:07:52.310 --> 00:07:52.320 align:start position:0%
let's just say instead of value I forget
 

00:07:52.320 --> 00:07:54.440 align:start position:0%
let's just say instead of value I forget
not<00:07:52.680><c> a</c><00:07:52.740><c> know</c><00:07:52.919><c> the</c><00:07:53.250><c> e</c><00:07:53.580><c> or</c><00:07:53.910><c> something</c><00:07:54.270><c> so</c><00:07:54.390><c> I'm</c>

00:07:54.440 --> 00:07:54.450 align:start position:0%
not a know the e or something so I'm
 

00:07:54.450 --> 00:07:55.940 align:start position:0%
not a know the e or something so I'm
just<00:07:54.600><c> printing</c><00:07:54.780><c> value</c><00:07:55.229><c> now</c><00:07:55.380><c> clearly</c><00:07:55.680><c> this</c><00:07:55.800><c> is</c>

00:07:55.940 --> 00:07:55.950 align:start position:0%
just printing value now clearly this is
 

00:07:55.950 --> 00:07:57.890 align:start position:0%
just printing value now clearly this is
an<00:07:56.070><c> error</c><00:07:56.340><c> because</c><00:07:56.880><c> there</c><00:07:57.210><c> is</c><00:07:57.360><c> no</c><00:07:57.510><c> variable</c>

00:07:57.890 --> 00:07:57.900 align:start position:0%
an error because there is no variable
 

00:07:57.900 --> 00:08:00.080 align:start position:0%
an error because there is no variable
called<00:07:58.110><c> value</c><00:07:58.470><c> so</c><00:07:58.979><c> if</c><00:07:59.070><c> I</c><00:07:59.160><c> hit</c><00:07:59.340><c> control</c><00:07:59.550><c> f7</c><00:07:59.760><c> to</c>

00:08:00.080 --> 00:08:00.090 align:start position:0%
called value so if I hit control f7 to
 

00:08:00.090 --> 00:08:02.150 align:start position:0%
called value so if I hit control f7 to
compile<00:08:00.390><c> my</c><00:08:00.540><c> code</c><00:08:00.780><c> look</c><00:08:01.320><c> at</c><00:08:01.440><c> that</c><00:08:01.560><c> it</c><00:08:01.710><c> compiles</c>

00:08:02.150 --> 00:08:02.160 align:start position:0%
compile my code look at that it compiles
 

00:08:02.160 --> 00:08:03.950 align:start position:0%
compile my code look at that it compiles
just<00:08:02.550><c> fine</c><00:08:02.850><c> and</c><00:08:03.120><c> that's</c><00:08:03.479><c> because</c><00:08:03.840><c> the</c>

00:08:03.950 --> 00:08:03.960 align:start position:0%
just fine and that's because the
 

00:08:03.960 --> 00:08:06.290 align:start position:0%
just fine and that's because the
template<00:08:04.380><c> doesn't</c><00:08:04.620><c> really</c><00:08:04.979><c> exist</c><00:08:05.280><c> until</c><00:08:06.090><c> we</c>

00:08:06.290 --> 00:08:06.300 align:start position:0%
template doesn't really exist until we
 

00:08:06.300 --> 00:08:08.690 align:start position:0%
template doesn't really exist until we
call<00:08:06.690><c> it</c><00:08:06.930><c> if</c><00:08:07.290><c> I</c><00:08:07.590><c> go</c><00:08:07.770><c> back</c><00:08:07.950><c> to</c><00:08:07.979><c> my</c><00:08:08.100><c> code</c><00:08:08.460><c> and</c><00:08:08.520><c> I</c>

00:08:08.690 --> 00:08:08.700 align:start position:0%
call it if I go back to my code and I
 

00:08:08.700 --> 00:08:10.490 align:start position:0%
call it if I go back to my code and I
actually<00:08:08.910><c> try</c><00:08:09.330><c> and</c><00:08:09.479><c> call</c><00:08:09.690><c> print</c><00:08:10.050><c> with</c><00:08:10.260><c> like</c>

00:08:10.490 --> 00:08:10.500 align:start position:0%
actually try and call print with like
 

00:08:10.500 --> 00:08:12.680 align:start position:0%
actually try and call print with like
the<00:08:10.650><c> value</c><00:08:10.950><c> 5</c><00:08:11.190><c> or</c><00:08:11.400><c> something</c><00:08:11.669><c> and</c><00:08:11.790><c> hit</c><00:08:11.970><c> control</c>

00:08:12.680 --> 00:08:12.690 align:start position:0%
the value 5 or something and hit control
 

00:08:12.690 --> 00:08:13.190 align:start position:0%
the value 5 or something and hit control
f7

00:08:13.190 --> 00:08:13.200 align:start position:0%
f7
 

00:08:13.200 --> 00:08:16.010 align:start position:0%
f7
at<00:08:13.320><c> that</c><00:08:13.919><c> point</c><00:08:14.160><c> you</c><00:08:14.370><c> can</c><00:08:14.520><c> see</c><00:08:14.790><c> I</c><00:08:15.030><c> actually</c><00:08:15.540><c> do</c>

00:08:16.010 --> 00:08:16.020 align:start position:0%
at that point you can see I actually do
 

00:08:16.020 --> 00:08:18.320 align:start position:0%
at that point you can see I actually do
get<00:08:16.500><c> an</c><00:08:16.740><c> error</c><00:08:16.979><c> here</c><00:08:17.310><c> telling</c><00:08:17.760><c> me</c><00:08:17.790><c> the</c><00:08:18.000><c> value</c>

00:08:18.320 --> 00:08:18.330 align:start position:0%
get an error here telling me the value
 

00:08:18.330 --> 00:08:20.510 align:start position:0%
get an error here telling me the value
is<00:08:18.479><c> an</c><00:08:18.660><c> undeclared</c><00:08:19.200><c> identifier</c><00:08:19.470><c> and</c><00:08:20.250><c> again</c>

00:08:20.510 --> 00:08:20.520 align:start position:0%
is an undeclared identifier and again
 

00:08:20.520 --> 00:08:22.190 align:start position:0%
is an undeclared identifier and again
that's<00:08:20.729><c> because</c><00:08:20.910><c> the</c><00:08:21.240><c> template</c><00:08:21.630><c> only</c><00:08:21.990><c> gets</c>

00:08:22.190 --> 00:08:22.200 align:start position:0%
that's because the template only gets
 

00:08:22.200 --> 00:08:24.830 align:start position:0%
that's because the template only gets
created<00:08:22.680><c> when</c><00:08:22.919><c> we</c><00:08:23.070><c> actually</c><00:08:23.580><c> call</c><00:08:24.150><c> it</c><00:08:24.180><c> because</c>

00:08:24.830 --> 00:08:24.840 align:start position:0%
created when we actually call it because
 

00:08:24.840 --> 00:08:26.510 align:start position:0%
created when we actually call it because
it's<00:08:25.140><c> just</c><00:08:25.350><c> a</c><00:08:25.440><c> template</c><00:08:25.860><c> it's</c><00:08:26.040><c> not</c><00:08:26.160><c> actual</c>

00:08:26.510 --> 00:08:26.520 align:start position:0%
it's just a template it's not actual
 

00:08:26.520 --> 00:08:29.120 align:start position:0%
it's just a template it's not actual
card<00:08:26.880><c> it</c><00:08:27.240><c> gets</c><00:08:27.479><c> materialized</c><00:08:28.320><c> I</c><00:08:28.530><c> guess</c><00:08:28.710><c> into</c>

00:08:29.120 --> 00:08:29.130 align:start position:0%
card it gets materialized I guess into
 

00:08:29.130 --> 00:08:31.520 align:start position:0%
card it gets materialized I guess into
real<00:08:29.490><c> code</c><00:08:29.850><c> that</c><00:08:30.570><c> gets</c><00:08:30.780><c> sent</c><00:08:30.960><c> to</c><00:08:31.050><c> the</c><00:08:31.169><c> compiler</c>

00:08:31.520 --> 00:08:31.530 align:start position:0%
real code that gets sent to the compiler
 

00:08:31.530 --> 00:08:33.770 align:start position:0%
real code that gets sent to the compiler
and<00:08:31.770><c> compiled</c><00:08:32.159><c> based</c><00:08:32.789><c> on</c><00:08:33.120><c> the</c><00:08:33.270><c> usage</c><00:08:33.599><c> of</c><00:08:33.719><c> the</c>

00:08:33.770 --> 00:08:33.780 align:start position:0%
and compiled based on the usage of the
 

00:08:33.780 --> 00:08:36.920 align:start position:0%
and compiled based on the usage of the
template<00:08:34.200><c> now</c><00:08:34.680><c> MSV</c><00:08:35.280><c> c</c><00:08:35.520><c> won't</c><00:08:36.270><c> tell</c><00:08:36.719><c> you</c><00:08:36.839><c> about</c>

00:08:36.920 --> 00:08:36.930 align:start position:0%
template now MSV c won't tell you about
 

00:08:36.930 --> 00:08:38.630 align:start position:0%
template now MSV c won't tell you about
errors<00:08:37.409><c> in</c><00:08:37.650><c> templates</c><00:08:38.130><c> that</c><00:08:38.370><c> you're</c><00:08:38.490><c> not</c>

00:08:38.630 --> 00:08:38.640 align:start position:0%
errors in templates that you're not
 

00:08:38.640 --> 00:08:40.940 align:start position:0%
errors in templates that you're not
actually<00:08:39.089><c> using</c><00:08:39.360><c> some</c><00:08:40.020><c> compilers</c><00:08:40.500><c> like</c><00:08:40.680><c> clang</c>

00:08:40.940 --> 00:08:40.950 align:start position:0%
actually using some compilers like clang
 

00:08:40.950 --> 00:08:43.230 align:start position:0%
actually using some compilers like clang
actually<00:08:41.400><c> will</c><00:08:41.729><c> so</c><00:08:42.030><c> it</c><00:08:42.150><c> is</c><00:08:42.419><c> kind</c><00:08:42.750><c> of</c><00:08:42.810><c> compiled</c>

00:08:43.230 --> 00:08:43.240 align:start position:0%
actually will so it is kind of compiled
 

00:08:43.240 --> 00:08:45.030 align:start position:0%
actually will so it is kind of compiled
dependent<00:08:43.690><c> but</c><00:08:44.229><c> in</c><00:08:44.350><c> this</c><00:08:44.440><c> case</c><00:08:44.620><c> you</c><00:08:44.800><c> can</c><00:08:44.920><c> see</c>

00:08:45.030 --> 00:08:45.040 align:start position:0%
dependent but in this case you can see
 

00:08:45.040 --> 00:08:46.829 align:start position:0%
dependent but in this case you can see
we<00:08:45.190><c> don't</c><00:08:45.250><c> actually</c><00:08:45.430><c> get</c><00:08:45.730><c> any</c><00:08:45.910><c> errors</c><00:08:46.330><c> we've</c>

00:08:46.829 --> 00:08:46.839 align:start position:0%
we don't actually get any errors we've
 

00:08:46.839 --> 00:08:48.420 align:start position:0%
we don't actually get any errors we've
written<00:08:47.050><c> code</c><00:08:47.320><c> that's</c><00:08:47.560><c> not</c><00:08:47.740><c> really</c><00:08:48.070><c> correct</c>

00:08:48.420 --> 00:08:48.430 align:start position:0%
written code that's not really correct
 

00:08:48.430 --> 00:08:50.250 align:start position:0%
written code that's not really correct
but<00:08:48.610><c> until</c><00:08:48.910><c> we</c><00:08:49.029><c> call</c><00:08:49.209><c> the</c><00:08:49.300><c> template</c><00:08:49.690><c> it</c>

00:08:50.250 --> 00:08:50.260 align:start position:0%
but until we call the template it
 

00:08:50.260 --> 00:08:51.600 align:start position:0%
but until we call the template it
doesn't<00:08:50.500><c> exist</c><00:08:50.860><c> so</c><00:08:51.100><c> we</c><00:08:51.339><c> don't</c><00:08:51.490><c> get</c><00:08:51.550><c> any</c>

00:08:51.600 --> 00:08:51.610 align:start position:0%
doesn't exist so we don't get any
 

00:08:51.610 --> 00:08:53.220 align:start position:0%
doesn't exist so we don't get any
compiler<00:08:52.029><c> errors</c><00:08:52.330><c> so</c><00:08:52.720><c> what</c><00:08:52.899><c> actually</c><00:08:52.990><c> happens</c>

00:08:53.220 --> 00:08:53.230 align:start position:0%
compiler errors so what actually happens
 

00:08:53.230 --> 00:08:56.460 align:start position:0%
compiler errors so what actually happens
when<00:08:53.890><c> we</c><00:08:54.279><c> compile</c><00:08:54.970><c> this</c><00:08:55.209><c> template</c><00:08:55.690><c> is</c><00:08:56.110><c> it</c>

00:08:56.460 --> 00:08:56.470 align:start position:0%
when we compile this template is it
 

00:08:56.470 --> 00:08:57.990 align:start position:0%
when we compile this template is it
knows<00:08:56.709><c> in</c><00:08:56.890><c> this</c><00:08:57.040><c> case</c><00:08:57.250><c> that</c><00:08:57.490><c> we</c><00:08:57.610><c> have</c><00:08:57.730><c> used</c>

00:08:57.990 --> 00:08:58.000 align:start position:0%
knows in this case that we have used
 

00:08:58.000 --> 00:09:00.000 align:start position:0%
knows in this case that we have used
five<00:08:58.360><c> here</c><00:08:58.839><c> right</c><00:08:59.200><c> which</c><00:08:59.529><c> means</c><00:08:59.709><c> that</c><00:08:59.920><c> the</c>

00:09:00.000 --> 00:09:00.010 align:start position:0%
five here right which means that the
 

00:09:00.010 --> 00:09:03.389 align:start position:0%
five here right which means that the
type<00:09:00.250><c> name</c><00:09:00.550><c> is</c><00:09:00.880><c> actually</c><00:09:01.510><c> an</c><00:09:01.720><c> integer</c><00:09:02.529><c> so</c><00:09:03.250><c> what</c>

00:09:03.389 --> 00:09:03.399 align:start position:0%
type name is actually an integer so what
 

00:09:03.399 --> 00:09:05.699 align:start position:0%
type name is actually an integer so what
happens<00:09:03.820><c> is</c><00:09:04.060><c> it</c><00:09:04.480><c> basically</c><00:09:05.050><c> fills</c><00:09:05.440><c> in</c><00:09:05.620><c> the</c>

00:09:05.699 --> 00:09:05.709 align:start position:0%
happens is it basically fills in the
 

00:09:05.709 --> 00:09:07.920 align:start position:0%
happens is it basically fills in the
blanks<00:09:06.070><c> here</c><00:09:06.310><c> so</c><00:09:06.730><c> it</c><00:09:07.000><c> would</c><00:09:07.120><c> be</c><00:09:07.240><c> equivalent</c><00:09:07.480><c> as</c>

00:09:07.920 --> 00:09:07.930 align:start position:0%
blanks here so it would be equivalent as
 

00:09:07.930 --> 00:09:09.810 align:start position:0%
blanks here so it would be equivalent as
to<00:09:08.470><c> if</c><00:09:08.589><c> we</c><00:09:08.770><c> just</c><00:09:08.980><c> copied</c><00:09:09.279><c> and</c><00:09:09.339><c> pasted</c><00:09:09.670><c> this</c>

00:09:09.810 --> 00:09:09.820 align:start position:0%
to if we just copied and pasted this
 

00:09:09.820 --> 00:09:12.570 align:start position:0%
to if we just copied and pasted this
method<00:09:10.209><c> and</c><00:09:10.390><c> then</c><00:09:10.600><c> replace</c><00:09:10.930><c> T</c><00:09:11.380><c> with</c><00:09:11.680><c> an</c><00:09:12.190><c> actual</c>

00:09:12.570 --> 00:09:12.580 align:start position:0%
method and then replace T with an actual
 

00:09:12.580 --> 00:09:14.010 align:start position:0%
method and then replace T with an actual
int<00:09:12.880><c> because</c><00:09:13.450><c> that's</c><00:09:13.630><c> what</c><00:09:13.750><c> we're</c><00:09:13.899><c> calling</c>

00:09:14.010 --> 00:09:14.020 align:start position:0%
int because that's what we're calling
 

00:09:14.020 --> 00:09:16.470 align:start position:0%
int because that's what we're calling
here<00:09:14.410><c> and</c><00:09:14.860><c> now</c><00:09:15.070><c> this</c><00:09:15.339><c> is</c><00:09:15.399><c> a</c><00:09:15.700><c> real</c><00:09:16.149><c> function</c>

00:09:16.470 --> 00:09:16.480 align:start position:0%
here and now this is a real function
 

00:09:16.480 --> 00:09:18.360 align:start position:0%
here and now this is a real function
that<00:09:16.839><c> has</c><00:09:17.020><c> to</c><00:09:17.170><c> get</c><00:09:17.350><c> linked</c><00:09:17.800><c> and</c><00:09:17.980><c> everything</c>

00:09:18.360 --> 00:09:18.370 align:start position:0%
that has to get linked and everything
 

00:09:18.370 --> 00:09:20.370 align:start position:0%
that has to get linked and everything
when<00:09:18.880><c> we</c><00:09:19.000><c> actually</c><00:09:19.360><c> compile</c><00:09:19.750><c> and</c><00:09:19.990><c> Link</c><00:09:20.050><c> this</c>

00:09:20.370 --> 00:09:20.380 align:start position:0%
when we actually compile and Link this
 

00:09:20.380 --> 00:09:22.260 align:start position:0%
when we actually compile and Link this
code<00:09:20.680><c> so</c><00:09:21.100><c> let's</c><00:09:21.250><c> just</c><00:09:21.399><c> fix</c><00:09:21.580><c> that</c><00:09:21.640><c> syntax</c><00:09:22.089><c> error</c>

00:09:22.260 --> 00:09:22.270 align:start position:0%
code so let's just fix that syntax error
 

00:09:22.270 --> 00:09:23.850 align:start position:0%
code so let's just fix that syntax error
we<00:09:22.480><c> had</c><00:09:22.630><c> there</c><00:09:22.870><c> and</c><00:09:23.050><c> that</c><00:09:23.260><c> is</c><00:09:23.380><c> actually</c><00:09:23.709><c> what</c>

00:09:23.850 --> 00:09:23.860 align:start position:0%
we had there and that is actually what
 

00:09:23.860 --> 00:09:26.190 align:start position:0%
we had there and that is actually what
happens<00:09:24.250><c> in</c><00:09:24.430><c> this</c><00:09:24.580><c> case</c><00:09:24.820><c> now</c><00:09:25.510><c> when</c><00:09:25.839><c> we</c><00:09:25.990><c> call</c>

00:09:26.190 --> 00:09:26.200 align:start position:0%
happens in this case now when we call
 

00:09:26.200 --> 00:09:28.350 align:start position:0%
happens in this case now when we call
print<00:09:26.560><c> with</c><00:09:26.800><c> a</c><00:09:26.830><c> different</c><00:09:27.459><c> argument</c><00:09:27.640><c> like</c><00:09:28.149><c> a</c>

00:09:28.350 --> 00:09:28.360 align:start position:0%
print with a different argument like a
 

00:09:28.360 --> 00:09:31.050 align:start position:0%
print with a different argument like a
flirt<00:09:28.810><c> for</c><00:09:29.110><c> example</c><00:09:29.620><c> another</c><00:09:30.399><c> version</c><00:09:30.820><c> of</c>

00:09:31.050 --> 00:09:31.060 align:start position:0%
flirt for example another version of
 

00:09:31.060 --> 00:09:32.910 align:start position:0%
flirt for example another version of
this<00:09:31.209><c> template</c><00:09:31.690><c> actually</c><00:09:31.870><c> gets</c><00:09:32.320><c> created</c><00:09:32.800><c> so</c>

00:09:32.910 --> 00:09:32.920 align:start position:0%
this template actually gets created so
 

00:09:32.920 --> 00:09:34.800 align:start position:0%
this template actually gets created so
this<00:09:33.040><c> gets</c><00:09:33.220><c> copied</c><00:09:33.700><c> and</c><00:09:33.820><c> pasted</c><00:09:34.270><c> and</c><00:09:34.390><c> then</c>

00:09:34.800 --> 00:09:34.810 align:start position:0%
this gets copied and pasted and then
 

00:09:34.810 --> 00:09:36.690 align:start position:0%
this gets copied and pasted and then
instead<00:09:35.020><c> of</c><00:09:35.080><c> T</c><00:09:35.350><c> this</c><00:09:35.830><c> time</c><00:09:36.070><c> we're</c><00:09:36.310><c> using</c><00:09:36.339><c> a</c>

00:09:36.690 --> 00:09:36.700 align:start position:0%
instead of T this time we're using a
 

00:09:36.700 --> 00:09:38.940 align:start position:0%
instead of T this time we're using a
flirt<00:09:36.970><c> so</c><00:09:37.779><c> you</c><00:09:37.839><c> kind</c><00:09:38.080><c> of</c><00:09:38.140><c> get</c><00:09:38.440><c> the</c><00:09:38.560><c> picture</c>

00:09:38.940 --> 00:09:38.950 align:start position:0%
flirt so you kind of get the picture
 

00:09:38.950 --> 00:09:40.860 align:start position:0%
flirt so you kind of get the picture
really<00:09:39.430><c> all</c><00:09:39.850><c> this</c><00:09:40.089><c> is</c><00:09:40.240><c> is</c><00:09:40.420><c> a</c><00:09:40.450><c> template</c>

00:09:40.860 --> 00:09:40.870 align:start position:0%
really all this is is a template
 

00:09:40.870 --> 00:09:43.079 align:start position:0%
really all this is is a template
specifying<00:09:41.470><c> how</c><00:09:41.709><c> to</c><00:09:41.770><c> create</c><00:09:42.279><c> methods</c><00:09:42.700><c> and</c>

00:09:43.079 --> 00:09:43.089 align:start position:0%
specifying how to create methods and
 

00:09:43.089 --> 00:09:45.030 align:start position:0%
specifying how to create methods and
these<00:09:43.270><c> methods</c><00:09:43.750><c> all</c><00:09:43.870><c> these</c><00:09:43.990><c> functions</c><00:09:44.470><c> can</c><00:09:45.010><c> be</c>

00:09:45.030 --> 00:09:45.040 align:start position:0%
these methods all these functions can be
 

00:09:45.040 --> 00:09:46.889 align:start position:0%
these methods all these functions can be
created<00:09:45.459><c> or</c><00:09:45.580><c> automatically</c><00:09:46.149><c> by</c><00:09:46.390><c> the</c><00:09:46.450><c> compiler</c>

00:09:46.889 --> 00:09:46.899 align:start position:0%
created or automatically by the compiler
 

00:09:46.899 --> 00:09:49.230 align:start position:0%
created or automatically by the compiler
based<00:09:47.620><c> on</c><00:09:47.829><c> your</c><00:09:48.100><c> usage</c><00:09:48.339><c> of</c><00:09:48.640><c> them</c><00:09:48.850><c> which</c><00:09:49.060><c> is</c>

00:09:49.230 --> 00:09:49.240 align:start position:0%
based on your usage of them which is
 

00:09:49.240 --> 00:09:51.269 align:start position:0%
based on your usage of them which is
pretty<00:09:49.570><c> cool</c><00:09:49.870><c> now</c><00:09:50.110><c> templates</c><00:09:50.589><c> are</c><00:09:50.860><c> by</c><00:09:51.100><c> no</c>

00:09:51.269 --> 00:09:51.279 align:start position:0%
pretty cool now templates are by no
 

00:09:51.279 --> 00:09:53.190 align:start position:0%
pretty cool now templates are by no
means<00:09:51.339><c> just</c><00:09:51.820><c> limited</c><00:09:52.149><c> to</c><00:09:52.180><c> types</c><00:09:52.690><c> or</c><00:09:53.020><c> anything</c>

00:09:53.190 --> 00:09:53.200 align:start position:0%
means just limited to types or anything
 

00:09:53.200 --> 00:09:54.810 align:start position:0%
means just limited to types or anything
like<00:09:53.440><c> that</c><00:09:53.500><c> and</c><00:09:53.920><c> they're</c><00:09:54.310><c> not</c><00:09:54.339><c> limited</c><00:09:54.790><c> to</c>

00:09:54.810 --> 00:09:54.820 align:start position:0%
like that and they're not limited to
 

00:09:54.820 --> 00:09:56.550 align:start position:0%
like that and they're not limited to
functions<00:09:55.329><c> either</c><00:09:55.570><c> you</c><00:09:55.810><c> can</c><00:09:55.959><c> actually</c><00:09:56.350><c> create</c>

00:09:56.550 --> 00:09:56.560 align:start position:0%
functions either you can actually create
 

00:09:56.560 --> 00:09:59.040 align:start position:0%
functions either you can actually create
entire<00:09:56.950><c> classes</c><00:09:57.579><c> based</c><00:09:58.120><c> on</c><00:09:58.329><c> templates</c><00:09:58.779><c> and</c><00:09:58.930><c> in</c>

00:09:59.040 --> 00:09:59.050 align:start position:0%
entire classes based on templates and in
 

00:09:59.050 --> 00:10:01.410 align:start position:0%
entire classes based on templates and in
fact<00:09:59.290><c> that's</c><00:09:59.920><c> a</c><00:10:00.100><c> lot</c><00:10:00.250><c> of</c><00:10:00.279><c> what</c><00:10:00.610><c> the</c><00:10:00.790><c> standard</c>

00:10:01.410 --> 00:10:01.420 align:start position:0%
fact that's a lot of what the standard
 

00:10:01.420 --> 00:10:04.139 align:start position:0%
fact that's a lot of what the standard
template<00:10:01.839><c> library</c><00:10:01.899><c> actually</c><00:10:02.560><c> is</c><00:10:03.010><c> in</c><00:10:03.220><c> C++</c><00:10:03.820><c> it's</c>

00:10:04.139 --> 00:10:04.149 align:start position:0%
template library actually is in C++ it's
 

00:10:04.149 --> 00:10:06.660 align:start position:0%
template library actually is in C++ it's
just<00:10:04.420><c> completely</c><00:10:04.930><c> using</c><00:10:05.500><c> templates</c><00:10:06.010><c> let's</c>

00:10:06.660 --> 00:10:06.670 align:start position:0%
just completely using templates let's
 

00:10:06.670 --> 00:10:07.980 align:start position:0%
just completely using templates let's
take<00:10:06.850><c> a</c><00:10:06.880><c> look</c><00:10:07.060><c> at</c><00:10:07.149><c> an</c><00:10:07.240><c> example</c><00:10:07.510><c> where</c><00:10:07.810><c> we're</c>

00:10:07.980 --> 00:10:07.990 align:start position:0%
take a look at an example where we're
 

00:10:07.990 --> 00:10:09.810 align:start position:0%
take a look at an example where we're
not<00:10:08.050><c> actually</c><00:10:08.110><c> using</c><00:10:08.380><c> a</c><00:10:08.649><c> type</c><00:10:08.860><c> as</c><00:10:09.130><c> a</c><00:10:09.430><c> template</c>

00:10:09.810 --> 00:10:09.820 align:start position:0%
not actually using a type as a template
 

00:10:09.820 --> 00:10:12.030 align:start position:0%
not actually using a type as a template
argument<00:10:10.240><c> and</c><00:10:10.390><c> let's</c><00:10:11.350><c> do</c><00:10:11.500><c> it</c><00:10:11.529><c> for</c><00:10:11.800><c> a</c><00:10:11.829><c> class</c>

00:10:12.030 --> 00:10:12.040 align:start position:0%
argument and let's do it for a class
 

00:10:12.040 --> 00:10:13.620 align:start position:0%
argument and let's do it for a class
instead<00:10:12.310><c> of</c><00:10:12.459><c> for</c><00:10:12.670><c> a</c><00:10:12.700><c> function</c><00:10:13.060><c> let's</c><00:10:13.329><c> just</c><00:10:13.510><c> get</c>

00:10:13.620 --> 00:10:13.630 align:start position:0%
instead of for a function let's just get
 

00:10:13.630 --> 00:10:15.360 align:start position:0%
instead of for a function let's just get
rid<00:10:13.720><c> of</c><00:10:13.779><c> this</c><00:10:13.899><c> print</c><00:10:14.260><c> function</c><00:10:15.130><c> that</c><00:10:15.220><c> we've</c>

00:10:15.360 --> 00:10:15.370 align:start position:0%
rid of this print function that we've
 

00:10:15.370 --> 00:10:16.860 align:start position:0%
rid of this print function that we've
created<00:10:15.550><c> over</c><00:10:15.850><c> here</c><00:10:16.060><c> and</c><00:10:16.300><c> let's</c><00:10:16.630><c> create</c><00:10:16.690><c> a</c>

00:10:16.860 --> 00:10:16.870 align:start position:0%
created over here and let's create a
 

00:10:16.870 --> 00:10:18.210 align:start position:0%
created over here and let's create a
class<00:10:17.050><c> suppose</c><00:10:17.380><c> that</c><00:10:17.500><c> I</c><00:10:17.560><c> wanted</c><00:10:17.770><c> to</c><00:10:17.829><c> create</c><00:10:17.950><c> an</c>

00:10:18.210 --> 00:10:18.220 align:start position:0%
class suppose that I wanted to create an
 

00:10:18.220 --> 00:10:20.850 align:start position:0%
class suppose that I wanted to create an
array<00:10:18.579><c> but</c><00:10:19.149><c> I</c><00:10:19.180><c> wanted</c><00:10:19.480><c> this</c><00:10:19.660><c> array</c><00:10:20.110><c> class</c><00:10:20.470><c> to</c>

00:10:20.850 --> 00:10:20.860 align:start position:0%
array but I wanted this array class to
 

00:10:20.860 --> 00:10:22.800 align:start position:0%
array but I wanted this array class to
actually<00:10:21.250><c> be</c><00:10:21.370><c> created</c><00:10:21.760><c> on</c><00:10:21.820><c> the</c><00:10:21.880><c> stack</c><00:10:22.270><c> so</c><00:10:22.570><c> what</c>

00:10:22.800 --> 00:10:22.810 align:start position:0%
actually be created on the stack so what
 

00:10:22.810 --> 00:10:24.449 align:start position:0%
actually be created on the stack so what
I<00:10:22.839><c> basically</c><00:10:23.140><c> mean</c><00:10:23.380><c> is</c><00:10:23.620><c> let's</c><00:10:23.950><c> just</c><00:10:24.130><c> create</c><00:10:24.370><c> a</c>

00:10:24.449 --> 00:10:24.459 align:start position:0%
I basically mean is let's just create a
 

00:10:24.459 --> 00:10:26.460 align:start position:0%
I basically mean is let's just create a
class<00:10:24.670><c> called</c><00:10:25.000><c> array</c><00:10:25.300><c> and</c><00:10:25.839><c> then</c><00:10:25.959><c> over</c><00:10:26.440><c> here</c>

00:10:26.460 --> 00:10:26.470 align:start position:0%
class called array and then over here
 

00:10:26.470 --> 00:10:29.100 align:start position:0%
class called array and then over here
maybe<00:10:27.399><c> it's</c><00:10:27.670><c> an</c><00:10:27.790><c> integer</c><00:10:28.120><c> array</c><00:10:28.420><c> in</c><00:10:28.720><c> this</c><00:10:28.839><c> case</c>

00:10:29.100 --> 00:10:29.110 align:start position:0%
maybe it's an integer array in this case
 

00:10:29.110 --> 00:10:31.470 align:start position:0%
maybe it's an integer array in this case
I<00:10:29.380><c> actually</c><00:10:30.010><c> want</c><00:10:30.430><c> to</c><00:10:30.459><c> have</c><00:10:30.670><c> an</c><00:10:30.760><c> array</c><00:10:31.029><c> that</c>

00:10:31.470 --> 00:10:31.480 align:start position:0%
I actually want to have an array that
 

00:10:31.480 --> 00:10:34.199 align:start position:0%
I actually want to have an array that
has<00:10:31.690><c> some</c><00:10:32.140><c> kind</c><00:10:32.560><c> of</c><00:10:32.770><c> size</c><00:10:33.310><c> that</c><00:10:33.670><c> is</c><00:10:33.760><c> determined</c>

00:10:34.199 --> 00:10:34.209 align:start position:0%
has some kind of size that is determined
 

00:10:34.209 --> 00:10:37.139 align:start position:0%
has some kind of size that is determined
at<00:10:34.270><c> compile</c><00:10:34.630><c> time</c><00:10:34.660><c> now</c><00:10:35.500><c> I</c><00:10:35.529><c> can't</c><00:10:36.070><c> just</c><00:10:36.430><c> kind</c><00:10:36.940><c> of</c>

00:10:37.139 --> 00:10:37.149 align:start position:0%
at compile time now I can't just kind of
 

00:10:37.149 --> 00:10:39.540 align:start position:0%
at compile time now I can't just kind of
put<00:10:37.660><c> in</c><00:10:37.810><c> a</c><00:10:38.079><c> variable</c><00:10:38.620><c> size</c><00:10:38.980><c> or</c><00:10:39.220><c> anything</c><00:10:39.370><c> like</c>

00:10:39.540 --> 00:10:39.550 align:start position:0%
put in a variable size or anything like
 

00:10:39.550 --> 00:10:41.370 align:start position:0%
put in a variable size or anything like
that<00:10:39.610><c> because</c><00:10:40.360><c> since</c><00:10:40.779><c> this</c><00:10:40.899><c> is</c><00:10:41.050><c> a</c><00:10:41.079><c> stack</c>

00:10:41.370 --> 00:10:41.380 align:start position:0%
that because since this is a stack
 

00:10:41.380 --> 00:10:43.290 align:start position:0%
that because since this is a stack
allocated<00:10:41.860><c> array</c><00:10:42.279><c> it</c><00:10:42.459><c> actually</c><00:10:42.820><c> has</c><00:10:43.000><c> to</c><00:10:43.149><c> be</c>

00:10:43.290 --> 00:10:43.300 align:start position:0%
allocated array it actually has to be
 

00:10:43.300 --> 00:10:44.970 align:start position:0%
allocated array it actually has to be
known<00:10:43.480><c> at</c><00:10:43.720><c> compile</c><00:10:44.079><c> time</c><00:10:44.110><c> now</c><00:10:44.529><c> obviously</c><00:10:44.829><c> we</c>

00:10:44.970 --> 00:10:44.980 align:start position:0%
known at compile time now obviously we
 

00:10:44.980 --> 00:10:46.500 align:start position:0%
known at compile time now obviously we
could<00:10:45.130><c> use</c><00:10:45.339><c> alakay</c><00:10:45.760><c> or</c><00:10:45.940><c> something</c><00:10:46.240><c> like</c><00:10:46.329><c> that</c>

00:10:46.500 --> 00:10:46.510 align:start position:0%
could use alakay or something like that
 

00:10:46.510 --> 00:10:48.510 align:start position:0%
could use alakay or something like that
to<00:10:46.660><c> grow</c><00:10:46.779><c> the</c><00:10:46.899><c> stack</c><00:10:47.140><c> dynamically</c><00:10:47.800><c> we're</c><00:10:48.430><c> not</c>

00:10:48.510 --> 00:10:48.520 align:start position:0%
to grow the stack dynamically we're not
 

00:10:48.520 --> 00:10:50.040 align:start position:0%
to grow the stack dynamically we're not
going<00:10:48.640><c> to</c><00:10:48.670><c> use</c><00:10:48.790><c> any</c><00:10:48.940><c> of</c><00:10:49.029><c> that</c><00:10:49.120><c> in</c><00:10:49.480><c> this</c><00:10:49.630><c> example</c>

00:10:50.040 --> 00:10:50.050 align:start position:0%
going to use any of that in this example
 

00:10:50.050 --> 00:10:52.650 align:start position:0%
going to use any of that in this example
we<00:10:50.440><c> just</c><00:10:50.770><c> want</c><00:10:51.010><c> to</c><00:10:51.130><c> basically</c><00:10:51.640><c> create</c><00:10:52.420><c> a</c>

00:10:52.650 --> 00:10:52.660 align:start position:0%
we just want to basically create a
 

00:10:52.660 --> 00:10:53.280 align:start position:0%
we just want to basically create a
normal

00:10:53.280 --> 00:10:53.290 align:start position:0%
normal
 

00:10:53.290 --> 00:10:55.590 align:start position:0%
normal
kind<00:10:53.650><c> of</c><00:10:53.710><c> see</c><00:10:54.040><c> style</c><00:10:54.400><c> array</c><00:10:54.700><c> on</c><00:10:54.940><c> the</c><00:10:54.970><c> stack</c><00:10:55.090><c> so</c>

00:10:55.590 --> 00:10:55.600 align:start position:0%
kind of see style array on the stack so
 

00:10:55.600 --> 00:10:57.330 align:start position:0%
kind of see style array on the stack so
this<00:10:55.870><c> size</c><00:10:56.080><c> value</c><00:10:56.440><c> does</c><00:10:56.620><c> in</c><00:10:56.740><c> fact</c><00:10:56.920><c> have</c><00:10:57.100><c> to</c><00:10:57.250><c> be</c>

00:10:57.330 --> 00:10:57.340 align:start position:0%
this size value does in fact have to be
 

00:10:57.340 --> 00:10:59.400 align:start position:0%
this size value does in fact have to be
known<00:10:57.490><c> at</c><00:10:57.580><c> compile</c><00:10:57.910><c> time</c><00:10:57.940><c> now</c><00:10:58.630><c> templates</c><00:10:59.140><c> are</c>

00:10:59.400 --> 00:10:59.410 align:start position:0%
known at compile time now templates are
 

00:10:59.410 --> 00:11:01.260 align:start position:0%
known at compile time now templates are
evaluated<00:11:00.100><c> at</c><00:11:00.190><c> compile</c><00:11:00.490><c> time</c><00:11:00.520><c> so</c><00:11:01.000><c> this</c><00:11:01.120><c> is</c>

00:11:01.260 --> 00:11:01.270 align:start position:0%
evaluated at compile time so this is
 

00:11:01.270 --> 00:11:03.240 align:start position:0%
evaluated at compile time so this is
perfect<00:11:01.720><c> what</c><00:11:02.230><c> I</c><00:11:02.290><c> can</c><00:11:02.500><c> do</c><00:11:02.650><c> is</c><00:11:02.830><c> convert</c><00:11:03.130><c> this</c>

00:11:03.240 --> 00:11:03.250 align:start position:0%
perfect what I can do is convert this
 

00:11:03.250 --> 00:11:05.370 align:start position:0%
perfect what I can do is convert this
class<00:11:03.520><c> into</c><00:11:03.850><c> being</c><00:11:04.030><c> a</c><00:11:04.150><c> template</c><00:11:04.660><c> but</c><00:11:05.170><c> instead</c>

00:11:05.370 --> 00:11:05.380 align:start position:0%
class into being a template but instead
 

00:11:05.380 --> 00:11:07.650 align:start position:0%
class into being a template but instead
of<00:11:05.440><c> using</c><00:11:05.650><c> type</c><00:11:06.070><c> name</c><00:11:06.370><c> as</c><00:11:06.580><c> it</c><00:11:06.880><c> as</c><00:11:07.030><c> my</c><00:11:07.270><c> template</c>

00:11:07.650 --> 00:11:07.660 align:start position:0%
of using type name as it as my template
 

00:11:07.660 --> 00:11:10.320 align:start position:0%
of using type name as it as my template
argument<00:11:08.170><c> I</c><00:11:08.350><c> can</c><00:11:08.680><c> actually</c><00:11:09.100><c> use</c><00:11:09.640><c> just</c><00:11:10.210><c> an</c>

00:11:10.320 --> 00:11:10.330 align:start position:0%
argument I can actually use just an
 

00:11:10.330 --> 00:11:13.170 align:start position:0%
argument I can actually use just an
integer<00:11:10.780><c> right</c><00:11:11.410><c> I'll</c><00:11:11.950><c> call</c><00:11:12.190><c> this</c><00:11:12.310><c> n</c><00:11:12.520><c> which</c><00:11:12.970><c> is</c>

00:11:13.170 --> 00:11:13.180 align:start position:0%
integer right I'll call this n which is
 

00:11:13.180 --> 00:11:15.000 align:start position:0%
integer right I'll call this n which is
basically<00:11:13.690><c> just</c><00:11:13.930><c> as</c><00:11:14.110><c> for</c><00:11:14.290><c> number</c><00:11:14.440><c> and</c><00:11:14.830><c> then</c>

00:11:15.000 --> 00:11:15.010 align:start position:0%
basically just as for number and then
 

00:11:15.010 --> 00:11:16.500 align:start position:0%
basically just as for number and then
instead<00:11:15.220><c> of</c><00:11:15.280><c> size</c><00:11:15.580><c> over</c><00:11:15.820><c> here</c><00:11:16.030><c> I'm</c><00:11:16.180><c> going</c><00:11:16.390><c> to</c>

00:11:16.500 --> 00:11:16.510 align:start position:0%
instead of size over here I'm going to
 

00:11:16.510 --> 00:11:18.540 align:start position:0%
instead of size over here I'm going to
write<00:11:16.720><c> n</c><00:11:16.930><c> and</c><00:11:17.380><c> then</c><00:11:17.740><c> finally</c><00:11:18.130><c> I'll</c><00:11:18.250><c> just</c><00:11:18.280><c> add</c>

00:11:18.540 --> 00:11:18.550 align:start position:0%
write n and then finally I'll just add
 

00:11:18.550 --> 00:11:20.370 align:start position:0%
write n and then finally I'll just add
one<00:11:18.910><c> public</c><00:11:19.330><c> function</c><00:11:19.720><c> to</c><00:11:19.840><c> this</c><00:11:19.930><c> array</c><00:11:20.200><c> which</c>

00:11:20.370 --> 00:11:20.380 align:start position:0%
one public function to this array which
 

00:11:20.380 --> 00:11:21.870 align:start position:0%
one public function to this array which
is<00:11:20.500><c> just</c><00:11:20.680><c> going</c><00:11:20.800><c> to</c><00:11:20.890><c> return</c><00:11:21.220><c> the</c><00:11:21.370><c> size</c><00:11:21.610><c> of</c><00:11:21.790><c> the</c>

00:11:21.870 --> 00:11:21.880 align:start position:0%
is just going to return the size of the
 

00:11:21.880 --> 00:11:23.790 align:start position:0%
is just going to return the size of the
array<00:11:22.090><c> so</c><00:11:22.120><c> I'll</c><00:11:22.420><c> write</c><00:11:22.630><c> int</c><00:11:22.900><c> get</c><00:11:23.170><c> size</c><00:11:23.470><c> and</c>

00:11:23.790 --> 00:11:23.800 align:start position:0%
array so I'll write int get size and
 

00:11:23.800 --> 00:11:26.790 align:start position:0%
array so I'll write int get size and
then<00:11:24.190><c> I'll</c><00:11:24.280><c> just</c><00:11:24.460><c> return</c><00:11:24.790><c> and</c><00:11:25.090><c> okay</c><00:11:25.960><c> so</c><00:11:26.620><c> what's</c>

00:11:26.790 --> 00:11:26.800 align:start position:0%
then I'll just return and okay so what's
 

00:11:26.800 --> 00:11:28.830 align:start position:0%
then I'll just return and okay so what's
going<00:11:27.040><c> to</c><00:11:27.070><c> happen</c><00:11:27.430><c> here</c><00:11:27.640><c> is</c><00:11:27.700><c> exactly</c><00:11:28.330><c> the</c><00:11:28.540><c> same</c>

00:11:28.830 --> 00:11:28.840 align:start position:0%
going to happen here is exactly the same
 

00:11:28.840 --> 00:11:30.600 align:start position:0%
going to happen here is exactly the same
thing<00:11:29.200><c> that</c><00:11:29.740><c> actually</c><00:11:29.890><c> happened</c><00:11:30.460><c> with</c><00:11:30.550><c> our</c>

00:11:30.600 --> 00:11:30.610 align:start position:0%
thing that actually happened with our
 

00:11:30.610 --> 00:11:33.060 align:start position:0%
thing that actually happened with our
function<00:11:31.180><c> when</c><00:11:31.660><c> we</c><00:11:31.810><c> call</c><00:11:32.080><c> this</c><00:11:32.230><c> array</c><00:11:32.470><c> and</c><00:11:32.920><c> we</c>

00:11:33.060 --> 00:11:33.070 align:start position:0%
function when we call this array and we
 

00:11:33.070 --> 00:11:36.300 align:start position:0%
function when we call this array and we
specify<00:11:33.670><c> a</c><00:11:34.030><c> size</c><00:11:34.420><c> like</c><00:11:34.720><c> five</c><00:11:35.110><c> and</c><00:11:36.010><c> I'll</c><00:11:36.130><c> just</c>

00:11:36.300 --> 00:11:36.310 align:start position:0%
specify a size like five and I'll just
 

00:11:36.310 --> 00:11:39.390 align:start position:0%
specify a size like five and I'll just
call<00:11:36.490><c> this</c><00:11:36.700><c> array</c><00:11:37.140><c> what</c><00:11:38.140><c> happens</c><00:11:38.500><c> is</c><00:11:38.680><c> if</c><00:11:38.920><c> this</c>

00:11:39.390 --> 00:11:39.400 align:start position:0%
call this array what happens is if this
 

00:11:39.400 --> 00:11:41.790 align:start position:0%
call this array what happens is if this
card<00:11:39.760><c> gets</c><00:11:40.060><c> compiled</c><00:11:40.630><c> based</c><00:11:40.930><c> on</c><00:11:41.140><c> its</c><00:11:41.290><c> usage</c><00:11:41.620><c> so</c>

00:11:41.790 --> 00:11:41.800 align:start position:0%
card gets compiled based on its usage so
 

00:11:41.800 --> 00:11:43.140 align:start position:0%
card gets compiled based on its usage so
in<00:11:41.860><c> this</c><00:11:41.950><c> case</c><00:11:42.130><c> five</c><00:11:42.460><c> is</c><00:11:42.670><c> the</c><00:11:42.700><c> template</c>

00:11:43.140 --> 00:11:43.150 align:start position:0%
in this case five is the template
 

00:11:43.150 --> 00:11:45.180 align:start position:0%
in this case five is the template
argument<00:11:43.690><c> which</c><00:11:44.170><c> means</c><00:11:44.410><c> that</c><00:11:44.560><c> a</c><00:11:44.710><c> version</c><00:11:44.920><c> of</c>

00:11:45.180 --> 00:11:45.190 align:start position:0%
argument which means that a version of
 

00:11:45.190 --> 00:11:47.910 align:start position:0%
argument which means that a version of
this<00:11:45.310><c> class</c><00:11:45.520><c> gets</c><00:11:46.060><c> created</c><00:11:46.630><c> which</c><00:11:47.170><c> replaces</c><00:11:47.560><c> n</c>

00:11:47.910 --> 00:11:47.920 align:start position:0%
this class gets created which replaces n
 

00:11:47.920 --> 00:11:50.610 align:start position:0%
this class gets created which replaces n
with<00:11:48.640><c> five</c><00:11:48.970><c> like</c><00:11:49.300><c> that</c><00:11:49.540><c> and</c><00:11:49.870><c> like</c><00:11:50.050><c> that</c><00:11:50.110><c> so</c>

00:11:50.610 --> 00:11:50.620 align:start position:0%
with five like that and like that so
 

00:11:50.620 --> 00:11:52.470 align:start position:0%
with five like that and like that so
this<00:11:50.770><c> is</c><00:11:50.950><c> actually</c><00:11:51.550><c> what</c><00:11:51.760><c> we</c><00:11:51.910><c> end</c><00:11:52.060><c> up</c><00:11:52.240><c> with</c>

00:11:52.470 --> 00:11:52.480 align:start position:0%
this is actually what we end up with
 

00:11:52.480 --> 00:11:54.660 align:start position:0%
this is actually what we end up with
this<00:11:52.720><c> is</c><00:11:52.960><c> the</c><00:11:53.140><c> code</c><00:11:53.380><c> that</c><00:11:53.500><c> we</c><00:11:53.650><c> end</c><00:11:53.980><c> up</c><00:11:54.160><c> with</c><00:11:54.430><c> and</c>

00:11:54.660 --> 00:11:54.670 align:start position:0%
this is the code that we end up with and
 

00:11:54.670 --> 00:11:56.970 align:start position:0%
this is the code that we end up with and
then<00:11:54.850><c> of</c><00:11:54.940><c> course</c><00:11:55.150><c> if</c><00:11:55.300><c> I</c><00:11:55.420><c> call</c><00:11:55.720><c> a</c><00:11:56.050><c> raid</c><00:11:56.530><c> or</c><00:11:56.710><c> get</c>

00:11:56.970 --> 00:11:56.980 align:start position:0%
then of course if I call a raid or get
 

00:11:56.980 --> 00:11:59.400 align:start position:0%
then of course if I call a raid or get
size<00:11:57.280><c> here</c><00:11:57.730><c> and</c><00:11:57.910><c> print</c><00:11:58.600><c> that</c><00:11:58.750><c> to</c><00:11:58.930><c> the</c><00:11:59.020><c> console</c>

00:11:59.400 --> 00:11:59.410 align:start position:0%
size here and print that to the console
 

00:11:59.410 --> 00:12:00.720 align:start position:0%
size here and print that to the console
or<00:11:59.590><c> get</c><00:11:59.740><c> rid</c><00:11:59.860><c> of</c><00:11:59.920><c> this</c><00:12:00.040><c> extra</c><00:12:00.340><c> copy</c><00:12:00.550><c> I've</c>

00:12:00.720 --> 00:12:00.730 align:start position:0%
or get rid of this extra copy I've
 

00:12:00.730 --> 00:12:02.970 align:start position:0%
or get rid of this extra copy I've
created<00:12:00.970><c> here</c><00:12:01.360><c> that's</c><00:12:01.780><c> my</c><00:12:01.930><c> card</c><00:12:02.230><c> let's</c><00:12:02.500><c> hit</c><00:12:02.620><c> f5</c>

00:12:02.970 --> 00:12:02.980 align:start position:0%
created here that's my card let's hit f5
 

00:12:02.980 --> 00:12:05.040 align:start position:0%
created here that's my card let's hit f5
you<00:12:03.460><c> can</c><00:12:03.610><c> see</c><00:12:03.760><c> that</c><00:12:03.910><c> I</c><00:12:03.970><c> get</c><00:12:04.030><c> five</c><00:12:04.390><c> printing</c><00:12:04.840><c> so</c>

00:12:05.040 --> 00:12:05.050 align:start position:0%
you can see that I get five printing so
 

00:12:05.050 --> 00:12:06.720 align:start position:0%
you can see that I get five printing so
that's<00:12:05.230><c> how</c><00:12:05.440><c> it</c><00:12:05.590><c> works</c><00:12:05.800><c> so</c><00:12:06.250><c> you</c><00:12:06.280><c> can</c><00:12:06.430><c> see</c><00:12:06.580><c> that</c>

00:12:06.720 --> 00:12:06.730 align:start position:0%
that's how it works so you can see that
 

00:12:06.730 --> 00:12:08.130 align:start position:0%
that's how it works so you can see that
we<00:12:06.790><c> don't</c><00:12:06.940><c> just</c><00:12:07.120><c> have</c><00:12:07.330><c> to</c><00:12:07.360><c> use</c><00:12:07.630><c> types</c><00:12:07.900><c> we</c><00:12:08.110><c> can</c>

00:12:08.130 --> 00:12:08.140 align:start position:0%
we don't just have to use types we can
 

00:12:08.140 --> 00:12:10.800 align:start position:0%
we don't just have to use types we can
even<00:12:08.500><c> use</c><00:12:08.680><c> integers</c><00:12:09.340><c> or</c><00:12:09.460><c> other</c><00:12:09.760><c> data</c><00:12:10.030><c> types</c><00:12:10.330><c> to</c>

00:12:10.800 --> 00:12:10.810 align:start position:0%
even use integers or other data types to
 

00:12:10.810 --> 00:12:12.390 align:start position:0%
even use integers or other data types to
basically<00:12:11.080><c> specify</c><00:12:11.590><c> how</c><00:12:11.920><c> we</c><00:12:11.980><c> want</c><00:12:12.310><c> to</c>

00:12:12.390 --> 00:12:12.400 align:start position:0%
basically specify how we want to
 

00:12:12.400 --> 00:12:14.760 align:start position:0%
basically specify how we want to
generate<00:12:12.850><c> a</c><00:12:13.060><c> class</c><00:12:13.420><c> an</c><00:12:13.780><c> entire</c><00:12:14.170><c> class</c><00:12:14.440><c> in</c><00:12:14.650><c> this</c>

00:12:14.760 --> 00:12:14.770 align:start position:0%
generate a class an entire class in this
 

00:12:14.770 --> 00:12:17.160 align:start position:0%
generate a class an entire class in this
case<00:12:14.980><c> let's</c><00:12:15.610><c> go</c><00:12:15.730><c> one</c><00:12:15.880><c> step</c><00:12:16.060><c> further</c><00:12:16.270><c> suppose</c>

00:12:17.160 --> 00:12:17.170 align:start position:0%
case let's go one step further suppose
 

00:12:17.170 --> 00:12:18.300 align:start position:0%
case let's go one step further suppose
it<00:12:17.350><c> is</c><00:12:17.440><c> said</c><00:12:17.560><c> of</c><00:12:17.590><c> this</c><00:12:17.740><c> being</c><00:12:17.980><c> an</c><00:12:18.070><c> INT</c>

00:12:18.300 --> 00:12:18.310 align:start position:0%
it is said of this being an INT
 

00:12:18.310 --> 00:12:20.220 align:start position:0%
it is said of this being an INT
explicitly<00:12:18.940><c> oh</c><00:12:18.970><c> I</c><00:12:19.090><c> also</c><00:12:19.480><c> wanted</c><00:12:19.840><c> to</c><00:12:19.900><c> make</c><00:12:20.050><c> the</c>

00:12:20.220 --> 00:12:20.230 align:start position:0%
explicitly oh I also wanted to make the
 

00:12:20.230 --> 00:12:22.710 align:start position:0%
explicitly oh I also wanted to make the
type<00:12:20.590><c> actually</c><00:12:21.490><c> variable</c><00:12:22.120><c> so</c><00:12:22.270><c> I</c><00:12:22.300><c> wanted</c><00:12:22.570><c> to</c><00:12:22.630><c> be</c>

00:12:22.710 --> 00:12:22.720 align:start position:0%
type actually variable so I wanted to be
 

00:12:22.720 --> 00:12:24.870 align:start position:0%
type actually variable so I wanted to be
able<00:12:22.810><c> to</c><00:12:22.990><c> specify</c><00:12:23.260><c> what</c><00:12:23.800><c> type</c><00:12:24.190><c> this</c><00:12:24.520><c> array</c>

00:12:24.870 --> 00:12:24.880 align:start position:0%
able to specify what type this array
 

00:12:24.880 --> 00:12:27.630 align:start position:0%
able to specify what type this array
actually<00:12:25.060><c> contains</c><00:12:25.750><c> at</c><00:12:26.290><c> compile</c><00:12:26.710><c> time</c><00:12:26.740><c> well</c><00:12:27.610><c> I</c>

00:12:27.630 --> 00:12:27.640 align:start position:0%
actually contains at compile time well I
 

00:12:27.640 --> 00:12:29.310 align:start position:0%
actually contains at compile time well I
can<00:12:27.940><c> add</c><00:12:28.060><c> another</c><00:12:28.150><c> template</c><00:12:28.660><c> arguments</c><00:12:29.140><c> let's</c>

00:12:29.310 --> 00:12:29.320 align:start position:0%
can add another template arguments let's
 

00:12:29.320 --> 00:12:31.230 align:start position:0%
can add another template arguments let's
add<00:12:29.470><c> this</c><00:12:29.590><c> one</c><00:12:29.770><c> before</c><00:12:30.190><c> the</c><00:12:30.340><c> number</c><00:12:30.520><c> so</c><00:12:31.150><c> I'll</c>

00:12:31.230 --> 00:12:31.240 align:start position:0%
add this one before the number so I'll
 

00:12:31.240 --> 00:12:34.350 align:start position:0%
add this one before the number so I'll
just<00:12:31.330><c> write</c><00:12:31.510><c> type</c><00:12:31.840><c> name</c><00:12:32.110><c> T</c><00:12:32.740><c> and</c><00:12:33.190><c> then</c><00:12:33.760><c> int</c><00:12:34.060><c> n</c>

00:12:34.350 --> 00:12:34.360 align:start position:0%
just write type name T and then int n
 

00:12:34.360 --> 00:12:36.420 align:start position:0%
just write type name T and then int n
right<00:12:34.930><c> so</c><00:12:35.530><c> now</c><00:12:35.650><c> I'm</c><00:12:35.710><c> going</c><00:12:35.860><c> to</c><00:12:35.950><c> replace</c><00:12:36.220><c> this</c>

00:12:36.420 --> 00:12:36.430 align:start position:0%
right so now I'm going to replace this
 

00:12:36.430 --> 00:12:38.790 align:start position:0%
right so now I'm going to replace this
int<00:12:36.730><c> with</c><00:12:36.970><c> T</c><00:12:37.300><c> and</c><00:12:37.510><c> suddenly</c><00:12:37.960><c> what</c><00:12:38.170><c> I've</c><00:12:38.290><c> got</c><00:12:38.530><c> is</c>

00:12:38.790 --> 00:12:38.800 align:start position:0%
int with T and suddenly what I've got is
 

00:12:38.800 --> 00:12:41.520 align:start position:0%
int with T and suddenly what I've got is
an<00:12:39.250><c> array</c><00:12:39.550><c> of</c><00:12:39.580><c> type</c><00:12:40.210><c> T</c><00:12:40.630><c> which</c><00:12:40.900><c> is</c><00:12:41.020><c> specified</c><00:12:41.230><c> at</c>

00:12:41.520 --> 00:12:41.530 align:start position:0%
an array of type T which is specified at
 

00:12:41.530 --> 00:12:44.160 align:start position:0%
an array of type T which is specified at
compile<00:12:41.860><c> time</c><00:12:41.890><c> by</c><00:12:42.550><c> the</c><00:12:42.610><c> template</c><00:12:43.090><c> that</c><00:12:43.330><c> is</c><00:12:44.020><c> of</c>

00:12:44.160 --> 00:12:44.170 align:start position:0%
compile time by the template that is of
 

00:12:44.170 --> 00:12:46.020 align:start position:0%
compile time by the template that is of
size<00:12:44.380><c> n</c><00:12:44.740><c> which</c><00:12:45.040><c> is</c><00:12:45.160><c> also</c><00:12:45.340><c> specified</c><00:12:45.700><c> by</c>

00:12:46.020 --> 00:12:46.030 align:start position:0%
size n which is also specified by
 

00:12:46.030 --> 00:12:47.610 align:start position:0%
size n which is also specified by
compile<00:12:46.360><c> times</c><00:12:46.600><c> so</c><00:12:46.810><c> now</c><00:12:46.930><c> over</c><00:12:47.080><c> here</c><00:12:47.410><c> what</c><00:12:47.590><c> I</c>

00:12:47.610 --> 00:12:47.620 align:start position:0%
compile times so now over here what I
 

00:12:47.620 --> 00:12:49.320 align:start position:0%
compile times so now over here what I
actually<00:12:47.800><c> call</c><00:12:48.160><c> this</c><00:12:48.280><c> array</c><00:12:48.430><c> I</c><00:12:48.790><c> have</c><00:12:49.240><c> to</c>

00:12:49.320 --> 00:12:49.330 align:start position:0%
actually call this array I have to
 

00:12:49.330 --> 00:12:51.810 align:start position:0%
actually call this array I have to
specify<00:12:49.540><c> int</c><00:12:50.140><c> as</c><00:12:50.350><c> an</c><00:12:50.470><c> example</c><00:12:50.770><c> and</c><00:12:51.160><c> five</c><00:12:51.430><c> for</c>

00:12:51.810 --> 00:12:51.820 align:start position:0%
specify int as an example and five for
 

00:12:51.820 --> 00:12:53.670 align:start position:0%
specify int as an example and five for
my<00:12:51.940><c> size</c><00:12:52.180><c> and</c><00:12:52.540><c> I</c><00:12:52.870><c> can</c><00:12:53.050><c> obviously</c><00:12:53.170><c> change</c><00:12:53.590><c> this</c>

00:12:53.670 --> 00:12:53.680 align:start position:0%
my size and I can obviously change this
 

00:12:53.680 --> 00:12:55.500 align:start position:0%
my size and I can obviously change this
to<00:12:53.800><c> be</c><00:12:53.890><c> anything</c><00:12:54.070><c> I</c><00:12:54.220><c> want</c><00:12:54.460><c> like</c><00:12:54.670><c> SAEs</c><00:12:55.180><c> string</c>

00:12:55.500 --> 00:12:55.510 align:start position:0%
to be anything I want like SAEs string
 

00:12:55.510 --> 00:12:58.200 align:start position:0%
to be anything I want like SAEs string
and<00:12:55.770><c> 50</c><00:12:56.770><c> or</c><00:12:57.070><c> whatever</c><00:12:57.250><c> and</c><00:12:57.670><c> you</c><00:12:57.790><c> can</c><00:12:57.940><c> see</c><00:12:58.090><c> that</c>

00:12:58.200 --> 00:12:58.210 align:start position:0%
and 50 or whatever and you can see that
 

00:12:58.210 --> 00:12:59.640 align:start position:0%
and 50 or whatever and you can see that
what<00:12:58.390><c> I've</c><00:12:58.480><c> created</c><00:12:58.630><c> is</c><00:12:58.990><c> kind</c><00:12:59.260><c> of</c><00:12:59.320><c> a</c><00:12:59.440><c> class</c>

00:12:59.640 --> 00:12:59.650 align:start position:0%
what I've created is kind of a class
 

00:12:59.650 --> 00:13:01.800 align:start position:0%
what I've created is kind of a class
that<00:13:00.070><c> gets</c><00:13:00.220><c> automatically</c><00:13:00.790><c> created</c><00:13:01.210><c> every</c>

00:13:01.800 --> 00:13:01.810 align:start position:0%
that gets automatically created every
 

00:13:01.810 --> 00:13:03.900 align:start position:0%
that gets automatically created every
time<00:13:01.990><c> I</c><00:13:02.020><c> actually</c><00:13:02.260><c> use</c><00:13:02.680><c> this</c><00:13:02.950><c> array</c><00:13:03.340><c> so</c><00:13:03.730><c> that's</c>

00:13:03.900 --> 00:13:03.910 align:start position:0%
time I actually use this array so that's
 

00:13:03.910 --> 00:13:04.920 align:start position:0%
time I actually use this array so that's
pretty<00:13:04.060><c> cool</c><00:13:04.270><c> and</c><00:13:04.570><c> what</c><00:13:04.660><c> we've</c><00:13:04.780><c> actually</c>

00:13:04.920 --> 00:13:04.930 align:start position:0%
pretty cool and what we've actually
 

00:13:04.930 --> 00:13:05.670 align:start position:0%
pretty cool and what we've actually
created

00:13:05.670 --> 00:13:05.680 align:start position:0%
created
 

00:13:05.680 --> 00:13:07.650 align:start position:0%
created
is<00:13:06.129><c> very</c><00:13:06.490><c> similar</c><00:13:06.910><c> to</c><00:13:07.029><c> how</c><00:13:07.180><c> the</c><00:13:07.240><c> standard</c>

00:13:07.650 --> 00:13:07.660 align:start position:0%
is very similar to how the standard
 

00:13:07.660 --> 00:13:09.150 align:start position:0%
is very similar to how the standard
array<00:13:07.749><c> class</c><00:13:08.079><c> actually</c><00:13:08.649><c> works</c><00:13:08.860><c> in</c><00:13:09.069><c> the</c>

00:13:09.150 --> 00:13:09.160 align:start position:0%
array class actually works in the
 

00:13:09.160 --> 00:13:11.129 align:start position:0%
array class actually works in the
standard<00:13:09.490><c> template</c><00:13:09.879><c> library</c><00:13:09.930><c> that</c><00:13:10.930><c> say</c><00:13:11.079><c> the</c>

00:13:11.129 --> 00:13:11.139 align:start position:0%
standard template library that say the
 

00:13:11.139 --> 00:13:12.929 align:start position:0%
standard template library that say the
say<00:13:11.319><c> plus</c><00:13:11.499><c> plus</c><00:13:11.740><c> right</c><00:13:12.189><c> it</c><00:13:12.369><c> just</c><00:13:12.579><c> has</c><00:13:12.730><c> two</c>

00:13:12.929 --> 00:13:12.939 align:start position:0%
say plus plus right it just has two
 

00:13:12.939 --> 00:13:15.150 align:start position:0%
say plus plus right it just has two
template<00:13:13.329><c> arguments</c><00:13:13.809><c> type</c><00:13:14.019><c> and</c><00:13:14.259><c> size</c><00:13:14.410><c> and</c><00:13:14.740><c> it</c>

00:13:15.150 --> 00:13:15.160 align:start position:0%
template arguments type and size and it
 

00:13:15.160 --> 00:13:16.710 align:start position:0%
template arguments type and size and it
creates<00:13:15.519><c> an</c><00:13:15.639><c> array</c><00:13:15.730><c> very</c><00:13:16.089><c> similar</c><00:13:16.420><c> to</c><00:13:16.509><c> the</c><00:13:16.600><c> way</c>

00:13:16.710 --> 00:13:16.720 align:start position:0%
creates an array very similar to the way
 

00:13:16.720 --> 00:13:18.359 align:start position:0%
creates an array very similar to the way
that<00:13:16.839><c> we've</c><00:13:16.990><c> actually</c><00:13:17.170><c> done</c><00:13:17.350><c> it</c><00:13:17.589><c> here</c><00:13:17.889><c> now</c>

00:13:18.359 --> 00:13:18.369 align:start position:0%
that we've actually done it here now
 

00:13:18.369 --> 00:13:20.699 align:start position:0%
that we've actually done it here now
this<00:13:18.519><c> is</c><00:13:18.579><c> a</c><00:13:18.910><c> sort</c><00:13:19.209><c> of</c><00:13:19.360><c> matter</c><00:13:19.809><c> programming</c><00:13:20.619><c> in</c>

00:13:20.699 --> 00:13:20.709 align:start position:0%
this is a sort of matter programming in
 

00:13:20.709 --> 00:13:22.679 align:start position:0%
this is a sort of matter programming in
C++<00:13:20.889><c> because</c><00:13:21.399><c> you</c><00:13:21.639><c> can</c><00:13:21.790><c> see</c><00:13:21.970><c> instead</c><00:13:22.629><c> of</c>

00:13:22.679 --> 00:13:22.689 align:start position:0%
C++ because you can see instead of
 

00:13:22.689 --> 00:13:24.210 align:start position:0%
C++ because you can see instead of
actually<00:13:23.079><c> programming</c><00:13:23.470><c> what</c><00:13:23.709><c> our</c><00:13:23.829><c> code</c><00:13:24.009><c> does</c>

00:13:24.210 --> 00:13:24.220 align:start position:0%
actually programming what our code does
 

00:13:24.220 --> 00:13:26.579 align:start position:0%
actually programming what our code does
at<00:13:24.339><c> runtime</c><00:13:24.550><c> were</c><00:13:24.999><c> kind</c><00:13:25.269><c> of</c><00:13:25.360><c> programming</c><00:13:25.899><c> what</c>

00:13:26.579 --> 00:13:26.589 align:start position:0%
at runtime were kind of programming what
 

00:13:26.589 --> 00:13:28.230 align:start position:0%
at runtime were kind of programming what
the<00:13:26.740><c> compiler</c><00:13:27.160><c> will</c><00:13:27.429><c> actually</c><00:13:27.819><c> do</c><00:13:27.999><c> during</c>

00:13:28.230 --> 00:13:28.240 align:start position:0%
the compiler will actually do during
 

00:13:28.240 --> 00:13:30.629 align:start position:0%
the compiler will actually do during
compile<00:13:28.720><c> time</c><00:13:28.990><c> and</c><00:13:29.199><c> this</c><00:13:29.679><c> is</c><00:13:29.860><c> extremely</c>

00:13:30.629 --> 00:13:30.639 align:start position:0%
compile time and this is extremely
 

00:13:30.639 --> 00:13:32.970 align:start position:0%
compile time and this is extremely
powerful<00:13:30.939><c> now</c><00:13:31.720><c> what</c><00:13:31.959><c> we're</c><00:13:32.170><c> doing</c><00:13:32.470><c> here</c><00:13:32.769><c> I</c>

00:13:32.970 --> 00:13:32.980 align:start position:0%
powerful now what we're doing here I
 

00:13:32.980 --> 00:13:34.590 align:start position:0%
powerful now what we're doing here I
think<00:13:33.429><c> this</c><00:13:33.519><c> is</c><00:13:33.579><c> a</c><00:13:33.699><c> pretty</c><00:13:33.970><c> good</c><00:13:34.179><c> kind</c><00:13:34.569><c> of</c>

00:13:34.590 --> 00:13:34.600 align:start position:0%
think this is a pretty good kind of
 

00:13:34.600 --> 00:13:36.299 align:start position:0%
think this is a pretty good kind of
gentle<00:13:34.990><c> introduction</c><00:13:35.319><c> we've</c><00:13:35.709><c> even</c><00:13:35.949><c> kind</c><00:13:36.249><c> of</c>

00:13:36.299 --> 00:13:36.309 align:start position:0%
gentle introduction we've even kind of
 

00:13:36.309 --> 00:13:37.769 align:start position:0%
gentle introduction we've even kind of
gone<00:13:36.550><c> as</c><00:13:37.059><c> far</c><00:13:37.269><c> as</c><00:13:37.329><c> to</c><00:13:37.480><c> create</c><00:13:37.600><c> multiple</c>

00:13:37.769 --> 00:13:37.779 align:start position:0%
gone as far as to create multiple
 

00:13:37.779 --> 00:13:39.480 align:start position:0%
gone as far as to create multiple
template<00:13:38.290><c> arguments</c><00:13:38.769><c> and</c><00:13:38.860><c> use</c><00:13:39.009><c> integers</c>

00:13:39.480 --> 00:13:39.490 align:start position:0%
template arguments and use integers
 

00:13:39.490 --> 00:13:41.790 align:start position:0%
template arguments and use integers
instead<00:13:39.850><c> of</c><00:13:39.939><c> just</c><00:13:40.149><c> kind</c><00:13:40.329><c> of</c><00:13:40.360><c> type</c><00:13:40.569><c> names</c><00:13:40.809><c> but</c>

00:13:41.790 --> 00:13:41.800 align:start position:0%
instead of just kind of type names but
 

00:13:41.800 --> 00:13:43.530 align:start position:0%
instead of just kind of type names but
this<00:13:41.949><c> is</c><00:13:42.160><c> just</c><00:13:42.369><c> scratching</c><00:13:42.610><c> the</c><00:13:42.850><c> surface</c><00:13:42.939><c> I</c>

00:13:43.530 --> 00:13:43.540 align:start position:0%
this is just scratching the surface I
 

00:13:43.540 --> 00:13:47.040 align:start position:0%
this is just scratching the surface I
mean<00:13:43.869><c> this</c><00:13:44.709><c> can</c><00:13:44.980><c> get</c><00:13:45.129><c> really</c><00:13:45.939><c> crazy</c><00:13:46.240><c> really</c>

00:13:47.040 --> 00:13:47.050 align:start position:0%
mean this can get really crazy really
 

00:13:47.050 --> 00:13:49.230 align:start position:0%
mean this can get really crazy really
quickly<00:13:47.499><c> and</c><00:13:47.679><c> because</c><00:13:48.490><c> of</c><00:13:48.610><c> that</c><00:13:48.730><c> I</c><00:13:48.910><c> kind</c><00:13:49.179><c> of</c>

00:13:49.230 --> 00:13:49.240 align:start position:0%
quickly and because of that I kind of
 

00:13:49.240 --> 00:13:51.210 align:start position:0%
quickly and because of that I kind of
want<00:13:49.420><c> to</c><00:13:49.449><c> talk</c><00:13:49.600><c> about</c><00:13:49.779><c> where</c><00:13:50.410><c> you</c><00:13:50.649><c> might</c><00:13:50.889><c> want</c>

00:13:51.210 --> 00:13:51.220 align:start position:0%
want to talk about where you might want
 

00:13:51.220 --> 00:13:53.040 align:start position:0%
want to talk about where you might want
to<00:13:51.279><c> use</c><00:13:51.490><c> templates</c><00:13:51.999><c> and</c><00:13:52.240><c> where</c><00:13:52.449><c> you</c><00:13:52.569><c> might</c><00:13:52.749><c> not</c>

00:13:53.040 --> 00:13:53.050 align:start position:0%
to use templates and where you might not
 

00:13:53.050 --> 00:13:54.900 align:start position:0%
to use templates and where you might not
want<00:13:53.290><c> to</c><00:13:53.350><c> use</c><00:13:53.589><c> templates</c><00:13:54.040><c> so</c><00:13:54.279><c> this</c><00:13:54.459><c> part</c><00:13:54.759><c> is</c>

00:13:54.900 --> 00:13:54.910 align:start position:0%
want to use templates so this part is
 

00:13:54.910 --> 00:13:57.030 align:start position:0%
want to use templates so this part is
kind<00:13:55.209><c> of</c><00:13:55.329><c> entirely</c><00:13:56.079><c> subjective</c><00:13:56.499><c> it's</c>

00:13:57.030 --> 00:13:57.040 align:start position:0%
kind of entirely subjective it's
 

00:13:57.040 --> 00:14:00.809 align:start position:0%
kind of entirely subjective it's
opinionated<00:13:57.790><c> but</c><00:13:58.480><c> in</c><00:13:58.720><c> my</c><00:13:58.869><c> experience</c><00:13:59.639><c> this</c><00:14:00.639><c> is</c>

00:14:00.809 --> 00:14:00.819 align:start position:0%
opinionated but in my experience this is
 

00:14:00.819 --> 00:14:02.009 align:start position:0%
opinionated but in my experience this is
this<00:14:01.119><c> is</c><00:14:01.300><c> how</c><00:14:01.420><c> it</c><00:14:01.449><c> works</c><00:14:01.749><c> right</c>

00:14:02.009 --> 00:14:02.019 align:start position:0%
this is how it works right
 

00:14:02.019 --> 00:14:04.079 align:start position:0%
this is how it works right
so<00:14:02.439><c> first</c><00:14:02.649><c> of</c><00:14:02.800><c> all</c><00:14:02.889><c> a</c><00:14:03.129><c> whole</c><00:14:03.579><c> bunch</c><00:14:03.790><c> of</c><00:14:03.879><c> game</c>

00:14:04.079 --> 00:14:04.089 align:start position:0%
so first of all a whole bunch of game
 

00:14:04.089 --> 00:14:06.119 align:start position:0%
so first of all a whole bunch of game
studios<00:14:04.540><c> out</c><00:14:04.689><c> there</c><00:14:04.929><c> or</c><00:14:05.079><c> software</c><00:14:05.559><c> companies</c>

00:14:06.119 --> 00:14:06.129 align:start position:0%
studios out there or software companies
 

00:14:06.129 --> 00:14:08.040 align:start position:0%
studios out there or software companies
whatever<00:14:06.429><c> actually</c><00:14:07.059><c> just</c><00:14:07.420><c> outright</c><00:14:07.629><c> down</c>

00:14:08.040 --> 00:14:08.050 align:start position:0%
whatever actually just outright down
 

00:14:08.050 --> 00:14:10.199 align:start position:0%
whatever actually just outright down
templates<00:14:08.559><c> they</c><00:14:08.800><c> say</c><00:14:08.980><c> never</c><00:14:09.490><c> use</c><00:14:09.759><c> templates</c>

00:14:10.199 --> 00:14:10.209 align:start position:0%
templates they say never use templates
 

00:14:10.209 --> 00:14:11.819 align:start position:0%
templates they say never use templates
ever<00:14:10.449><c> now</c><00:14:10.870><c> I</c><00:14:10.899><c> think</c><00:14:11.230><c> that's</c><00:14:11.379><c> a</c><00:14:11.470><c> little</c><00:14:11.559><c> bit</c>

00:14:11.819 --> 00:14:11.829 align:start position:0%
ever now I think that's a little bit
 

00:14:11.829 --> 00:14:14.249 align:start position:0%
ever now I think that's a little bit
kind<00:14:12.490><c> of</c><00:14:12.550><c> overreacting</c><00:14:13.329><c> to</c><00:14:13.629><c> the</c><00:14:13.720><c> situation</c>

00:14:14.249 --> 00:14:14.259 align:start position:0%
kind of overreacting to the situation
 

00:14:14.259 --> 00:14:16.049 align:start position:0%
kind of overreacting to the situation
because<00:14:14.860><c> I</c><00:14:14.949><c> think</c><00:14:15.009><c> the</c><00:14:15.279><c> templates</c><00:14:15.670><c> can</c><00:14:15.910><c> be</c>

00:14:16.049 --> 00:14:16.059 align:start position:0%
because I think the templates can be
 

00:14:16.059 --> 00:14:19.230 align:start position:0%
because I think the templates can be
extremely<00:14:16.870><c> useful</c><00:14:17.309><c> for</c><00:14:18.309><c> situations</c><00:14:18.459><c> where</c>

00:14:19.230 --> 00:14:19.240 align:start position:0%
extremely useful for situations where
 

00:14:19.240 --> 00:14:21.119 align:start position:0%
extremely useful for situations where
like<00:14:19.720><c> I</c><00:14:19.870><c> don't</c><00:14:20.079><c> know</c><00:14:20.170><c> like</c><00:14:20.290><c> a</c><00:14:20.350><c> logging</c><00:14:20.740><c> system</c>

00:14:21.119 --> 00:14:21.129 align:start position:0%
like I don't know like a logging system
 

00:14:21.129 --> 00:14:22.769 align:start position:0%
like I don't know like a logging system
or<00:14:21.279><c> something</c><00:14:21.550><c> like</c><00:14:21.639><c> that</c><00:14:21.699><c> you</c><00:14:22.059><c> have</c><00:14:22.269><c> every</c>

00:14:22.769 --> 00:14:22.779 align:start position:0%
or something like that you have every
 

00:14:22.779 --> 00:14:25.799 align:start position:0%
or something like that you have every
possible<00:14:23.379><c> type</c><00:14:23.649><c> that</c><00:14:24.249><c> you</c><00:14:24.370><c> want</c><00:14:24.550><c> to</c><00:14:24.670><c> log</c><00:14:24.879><c> do</c>

00:14:25.799 --> 00:14:25.809 align:start position:0%
possible type that you want to log do
 

00:14:25.809 --> 00:14:27.929 align:start position:0%
possible type that you want to log do
you<00:14:25.899><c> really</c><00:14:26.259><c> have</c><00:14:26.439><c> to</c><00:14:26.679><c> like</c><00:14:26.920><c> specify</c><00:14:27.220><c> an</c>

00:14:27.929 --> 00:14:27.939 align:start position:0%
you really have to like specify an
 

00:14:27.939 --> 00:14:30.660 align:start position:0%
you really have to like specify an
overload<00:14:28.329><c> for</c><00:14:28.600><c> every</c><00:14:28.839><c> single</c><00:14:29.139><c> function</c><00:14:29.670><c> well</c>

00:14:30.660 --> 00:14:30.670 align:start position:0%
overload for every single function well
 

00:14:30.670 --> 00:14:32.579 align:start position:0%
overload for every single function well
you<00:14:31.269><c> can</c><00:14:31.420><c> automate</c><00:14:31.720><c> that</c><00:14:31.929><c> with</c><00:14:32.139><c> templates</c>

00:14:32.579 --> 00:14:32.589 align:start position:0%
you can automate that with templates
 

00:14:32.589 --> 00:14:34.410 align:start position:0%
you can automate that with templates
right<00:14:32.800><c> you</c><00:14:32.980><c> can</c><00:14:33.160><c> get</c><00:14:33.399><c> the</c><00:14:33.519><c> compiler</c><00:14:33.939><c> to</c><00:14:34.209><c> write</c>

00:14:34.410 --> 00:14:34.420 align:start position:0%
right you can get the compiler to write
 

00:14:34.420 --> 00:14:36.660 align:start position:0%
right you can get the compiler to write
code<00:14:34.689><c> for</c><00:14:34.749><c> you</c><00:14:35.379><c> based</c><00:14:35.889><c> on</c><00:14:36.100><c> a</c><00:14:36.129><c> set</c><00:14:36.370><c> of</c><00:14:36.459><c> rules</c>

00:14:36.660 --> 00:14:36.670 align:start position:0%
code for you based on a set of rules
 

00:14:36.670 --> 00:14:38.309 align:start position:0%
code for you based on a set of rules
that's<00:14:36.970><c> really</c><00:14:37.360><c> what</c><00:14:37.509><c> a</c><00:14:37.540><c> template</c><00:14:37.929><c> is</c><00:14:38.079><c> just</c>

00:14:38.309 --> 00:14:38.319 align:start position:0%
that's really what a template is just
 

00:14:38.319 --> 00:14:40.559 align:start position:0%
that's really what a template is just
the<00:14:38.769><c> compiler</c><00:14:39.129><c> writing</c><00:14:39.670><c> code</c><00:14:39.879><c> for</c><00:14:39.910><c> you</c><00:14:40.300><c> based</c>

00:14:40.559 --> 00:14:40.569 align:start position:0%
the compiler writing code for you based
 

00:14:40.569 --> 00:14:41.910 align:start position:0%
the compiler writing code for you based
on<00:14:40.720><c> the</c><00:14:40.839><c> rules</c><00:14:41.050><c> that</c><00:14:41.110><c> you've</c><00:14:41.319><c> given</c><00:14:41.499><c> it</c><00:14:41.769><c> and</c>

00:14:41.910 --> 00:14:41.920 align:start position:0%
on the rules that you've given it and
 

00:14:41.920 --> 00:14:44.280 align:start position:0%
on the rules that you've given it and
based<00:14:42.370><c> on</c><00:14:42.550><c> the</c><00:14:42.639><c> usage</c><00:14:42.819><c> of</c><00:14:43.240><c> that</c><00:14:43.300><c> function</c><00:14:44.199><c> or</c>

00:14:44.280 --> 00:14:44.290 align:start position:0%
based on the usage of that function or
 

00:14:44.290 --> 00:14:46.829 align:start position:0%
based on the usage of that function or
class<00:14:44.350><c> or</c><00:14:44.589><c> anything</c><00:14:44.860><c> like</c><00:14:45.040><c> that</c><00:14:45.100><c> right</c><00:14:45.839><c> that</c>

00:14:46.829 --> 00:14:46.839 align:start position:0%
class or anything like that right that
 

00:14:46.839 --> 00:14:49.470 align:start position:0%
class or anything like that right that
being<00:14:47.079><c> said</c><00:14:47.290><c> if</c><00:14:48.129><c> you</c><00:14:48.309><c> start</c><00:14:48.519><c> using</c><00:14:48.730><c> templates</c>

00:14:49.470 --> 00:14:49.480 align:start position:0%
being said if you start using templates
 

00:14:49.480 --> 00:14:50.730 align:start position:0%
being said if you start using templates
if<00:14:49.660><c> you</c><00:14:49.720><c> start</c><00:14:50.049><c> getting</c><00:14:50.290><c> really</c><00:14:50.499><c> really</c>

00:14:50.730 --> 00:14:50.740 align:start position:0%
if you start getting really really
 

00:14:50.740 --> 00:14:52.439 align:start position:0%
if you start getting really really
complex<00:14:51.279><c> with</c><00:14:51.549><c> your</c><00:14:51.670><c> templates</c><00:14:52.120><c> and</c><00:14:52.360><c> you</c>

00:14:52.439 --> 00:14:52.449 align:start position:0%
complex with your templates and you
 

00:14:52.449 --> 00:14:54.749 align:start position:0%
complex with your templates and you
start<00:14:52.720><c> just</c><00:14:52.990><c> having</c><00:14:53.079><c> it</c><00:14:53.470><c> generate</c><00:14:53.889><c> an</c><00:14:54.100><c> entire</c>

00:14:54.749 --> 00:14:54.759 align:start position:0%
start just having it generate an entire
 

00:14:54.759 --> 00:14:56.819 align:start position:0%
start just having it generate an entire
like<00:14:55.059><c> meta</c><00:14:55.299><c> language</c><00:14:55.660><c> for</c><00:14:55.899><c> you</c><00:14:56.049><c> and</c><00:14:56.230><c> I've</c><00:14:56.559><c> seen</c>

00:14:56.819 --> 00:14:56.829 align:start position:0%
like meta language for you and I've seen
 

00:14:56.829 --> 00:14:59.970 align:start position:0%
like meta language for you and I've seen
code<00:14:57.160><c> that</c><00:14:58.350><c> would</c><00:14:59.350><c> probably</c><00:14:59.589><c> give</c><00:14:59.889><c> you</c>

00:14:59.970 --> 00:14:59.980 align:start position:0%
code that would probably give you
 

00:14:59.980 --> 00:15:01.769 align:start position:0%
code that would probably give you
nightmares<00:15:00.160><c> like</c><00:15:00.670><c> seriously</c><00:15:01.329><c> you</c><00:15:01.480><c> can</c><00:15:01.629><c> go</c>

00:15:01.769 --> 00:15:01.779 align:start position:0%
nightmares like seriously you can go
 

00:15:01.779 --> 00:15:04.530 align:start position:0%
nightmares like seriously you can go
really<00:15:02.170><c> far</c><00:15:02.319><c> with</c><00:15:02.379><c> templates</c><00:15:02.920><c> that</c><00:15:03.850><c> might</c><00:15:04.299><c> be</c>

00:15:04.530 --> 00:15:04.540 align:start position:0%
really far with templates that might be
 

00:15:04.540 --> 00:15:07.439 align:start position:0%
really far with templates that might be
pushing<00:15:04.809><c> it</c><00:15:05.049><c> right</c><00:15:05.889><c> that</c><00:15:06.429><c> might</c><00:15:06.819><c> be</c><00:15:06.850><c> going</c><00:15:07.329><c> a</c>

00:15:07.439 --> 00:15:07.449 align:start position:0%
pushing it right that might be going a
 

00:15:07.449 --> 00:15:09.179 align:start position:0%
pushing it right that might be going a
little<00:15:07.540><c> bit</c><00:15:07.809><c> too</c><00:15:07.959><c> far</c><00:15:08.199><c> because</c><00:15:08.769><c> there's</c><00:15:09.129><c> a</c>

00:15:09.179 --> 00:15:09.189 align:start position:0%
little bit too far because there's a
 

00:15:09.189 --> 00:15:11.129 align:start position:0%
little bit too far because there's a
point<00:15:09.490><c> where</c><00:15:10.029><c> the</c><00:15:10.119><c> templates</c><00:15:10.540><c> become</c><00:15:10.899><c> so</c>

00:15:11.129 --> 00:15:11.139 align:start position:0%
point where the templates become so
 

00:15:11.139 --> 00:15:13.319 align:start position:0%
point where the templates become so
complex<00:15:11.529><c> that</c><00:15:12.189><c> if</c><00:15:12.309><c> there's</c><00:15:12.490><c> an</c><00:15:12.610><c> issue</c><00:15:12.819><c> with</c><00:15:13.179><c> it</c>

00:15:13.319 --> 00:15:13.329 align:start position:0%
complex that if there's an issue with it
 

00:15:13.329 --> 00:15:15.820 align:start position:0%
complex that if there's an issue with it
no<00:15:13.990><c> one</c><00:15:14.230><c> can</c><00:15:14.259><c> understand</c><00:15:14.920><c> what's</c><00:15:15.189><c> going</c>

00:15:15.820 --> 00:15:15.830 align:start position:0%
no one can understand what's going
 

00:15:15.830 --> 00:15:18.340 align:start position:0%
no one can understand what's going
and<00:15:16.550><c> you'll</c><00:15:16.880><c> literally</c><00:15:17.360><c> have</c><00:15:17.660><c> to</c><00:15:17.870><c> just</c><00:15:18.080><c> get</c>

00:15:18.340 --> 00:15:18.350 align:start position:0%
and you'll literally have to just get
 

00:15:18.350 --> 00:15:20.680 align:start position:0%
and you'll literally have to just get
like<00:15:18.620><c> a</c><00:15:18.680><c> notebook</c><00:15:19.070><c> get</c><00:15:19.730><c> a</c><00:15:19.760><c> piece</c><00:15:20.000><c> of</c><00:15:20.180><c> paper</c><00:15:20.330><c> and</c>

00:15:20.680 --> 00:15:20.690 align:start position:0%
like a notebook get a piece of paper and
 

00:15:20.690 --> 00:15:22.300 align:start position:0%
like a notebook get a piece of paper and
start<00:15:21.230><c> filling</c><00:15:21.560><c> in</c><00:15:21.770><c> all</c><00:15:21.830><c> these</c><00:15:22.040><c> types</c>

00:15:22.300 --> 00:15:22.310 align:start position:0%
start filling in all these types
 

00:15:22.310 --> 00:15:23.770 align:start position:0%
start filling in all these types
manually<00:15:22.850><c> of</c><00:15:22.970><c> course</c><00:15:23.180><c> you</c><00:15:23.300><c> can</c><00:15:23.510><c> get</c><00:15:23.690><c> the</c>

00:15:23.770 --> 00:15:23.780 align:start position:0%
manually of course you can get the
 

00:15:23.780 --> 00:15:26.080 align:start position:0%
manually of course you can get the
compiler<00:15:24.170><c> to</c><00:15:24.260><c> actually</c><00:15:24.710><c> tell</c><00:15:25.370><c> you</c><00:15:25.550><c> what</c><00:15:25.790><c> code</c>

00:15:26.080 --> 00:15:26.090 align:start position:0%
compiler to actually tell you what code
 

00:15:26.090 --> 00:15:28.420 align:start position:0%
compiler to actually tell you what code
is<00:15:26.180><c> generating</c><00:15:26.720><c> and</c><00:15:26.840><c> all</c><00:15:26.930><c> of</c><00:15:27.020><c> that</c><00:15:27.250><c> but</c><00:15:28.250><c> even</c>

00:15:28.420 --> 00:15:28.430 align:start position:0%
is generating and all of that but even
 

00:15:28.430 --> 00:15:32.980 align:start position:0%
is generating and all of that but even
so<00:15:29.140><c> like</c><00:15:30.140><c> at</c><00:15:30.410><c> work</c><00:15:31.240><c> we've</c><00:15:32.240><c> had</c><00:15:32.480><c> cases</c><00:15:32.690><c> where</c>

00:15:32.980 --> 00:15:32.990 align:start position:0%
so like at work we've had cases where
 

00:15:32.990 --> 00:15:34.630 align:start position:0%
so like at work we've had cases where
we've<00:15:33.350><c> just</c><00:15:33.380><c> had</c><00:15:33.710><c> to</c><00:15:33.740><c> sit</c><00:15:34.040><c> down</c><00:15:34.280><c> and</c><00:15:34.460><c> spend</c>

00:15:34.630 --> 00:15:34.640 align:start position:0%
we've just had to sit down and spend
 

00:15:34.640 --> 00:15:37.060 align:start position:0%
we've just had to sit down and spend
three<00:15:35.030><c> hours</c><00:15:35.060><c> figuring</c><00:15:35.900><c> out</c><00:15:36.050><c> what</c><00:15:36.650><c> code</c><00:15:36.920><c> has</c>

00:15:37.060 --> 00:15:37.070 align:start position:0%
three hours figuring out what code has
 

00:15:37.070 --> 00:15:38.800 align:start position:0%
three hours figuring out what code has
actually<00:15:37.370><c> been</c><00:15:37.490><c> compiled</c><00:15:37.880><c> and</c><00:15:38.120><c> what's</c><00:15:38.630><c> going</c>

00:15:38.800 --> 00:15:38.810 align:start position:0%
actually been compiled and what's going
 

00:15:38.810 --> 00:15:40.030 align:start position:0%
actually been compiled and what's going
on<00:15:38.960><c> with</c><00:15:39.110><c> our</c><00:15:39.230><c> templates</c><00:15:39.650><c> and</c><00:15:39.770><c> why</c><00:15:39.890><c> they're</c>

00:15:40.030 --> 00:15:40.040 align:start position:0%
on with our templates and why they're
 

00:15:40.040 --> 00:15:42.790 align:start position:0%
on with our templates and why they're
not<00:15:40.100><c> working</c><00:15:40.160><c> when</c><00:15:41.150><c> that</c><00:15:41.360><c> happens</c><00:15:41.870><c> I</c><00:15:42.140><c> think</c>

00:15:42.790 --> 00:15:42.800 align:start position:0%
not working when that happens I think
 

00:15:42.800 --> 00:15:43.570 align:start position:0%
not working when that happens I think
you've<00:15:42.950><c> gone</c><00:15:43.100><c> too</c><00:15:43.310><c> far</c>

00:15:43.570 --> 00:15:43.580 align:start position:0%
you've gone too far
 

00:15:43.580 --> 00:15:45.850 align:start position:0%
you've gone too far
and<00:15:43.850><c> I</c><00:15:44.420><c> don't</c><00:15:44.480><c> think</c><00:15:44.750><c> that</c><00:15:45.080><c> you</c><00:15:45.170><c> should</c><00:15:45.530><c> get</c>

00:15:45.850 --> 00:15:45.860 align:start position:0%
and I don't think that you should get
 

00:15:45.860 --> 00:15:47.710 align:start position:0%
and I don't think that you should get
too<00:15:46.160><c> crazy</c><00:15:46.430><c> with</c><00:15:46.640><c> templates</c><00:15:47.120><c> even</c><00:15:47.540><c> though</c><00:15:47.660><c> you</c>

00:15:47.710 --> 00:15:47.720 align:start position:0%
too crazy with templates even though you
 

00:15:47.720 --> 00:15:49.750 align:start position:0%
too crazy with templates even though you
can<00:15:48.020><c> there</c><00:15:48.530><c> is</c><00:15:48.680><c> a</c><00:15:48.710><c> point</c><00:15:49.070><c> where</c><00:15:49.310><c> doing</c><00:15:49.430><c> things</c>

00:15:49.750 --> 00:15:49.760 align:start position:0%
can there is a point where doing things
 

00:15:49.760 --> 00:15:51.130 align:start position:0%
can there is a point where doing things
manually<00:15:50.180><c> and</c><00:15:50.420><c> writing</c><00:15:50.660><c> out</c><00:15:50.780><c> code</c><00:15:50.990><c> yourself</c>

00:15:51.130 --> 00:15:51.140 align:start position:0%
manually and writing out code yourself
 

00:15:51.140 --> 00:15:53.140 align:start position:0%
manually and writing out code yourself
is<00:15:51.620><c> actually</c><00:15:52.040><c> going</c><00:15:52.340><c> to</c><00:15:52.490><c> benefit</c><00:15:52.850><c> you</c><00:15:53.030><c> and</c>

00:15:53.140 --> 00:15:53.150 align:start position:0%
is actually going to benefit you and
 

00:15:53.150 --> 00:15:54.970 align:start position:0%
is actually going to benefit you and
your<00:15:53.210><c> team</c><00:15:53.540><c> a</c><00:15:53.570><c> lot</c><00:15:53.900><c> more</c><00:15:54.140><c> than</c><00:15:54.620><c> trying</c><00:15:54.860><c> to</c>

00:15:54.970 --> 00:15:54.980 align:start position:0%
your team a lot more than trying to
 

00:15:54.980 --> 00:15:56.680 align:start position:0%
your team a lot more than trying to
create<00:15:55.250><c> this</c><00:15:55.400><c> massive</c><00:15:55.640><c> template</c><00:15:56.150><c> magic</c><00:15:56.540><c> that</c>

00:15:56.680 --> 00:15:56.690 align:start position:0%
create this massive template magic that
 

00:15:56.690 --> 00:15:58.960 align:start position:0%
create this massive template magic that
just<00:15:56.990><c> does</c><00:15:57.170><c> everything</c><00:15:57.470><c> for</c><00:15:57.800><c> you</c><00:15:58.010><c> but</c><00:15:58.040><c> is</c><00:15:58.370><c> kind</c>

00:15:58.960 --> 00:15:58.970 align:start position:0%
just does everything for you but is kind
 

00:15:58.970 --> 00:16:00.430 align:start position:0%
just does everything for you but is kind
of<00:15:59.030><c> fragile</c><00:15:59.240><c> and</c><00:15:59.630><c> very</c><00:15:59.780><c> difficult</c><00:16:00.350><c> to</c>

00:16:00.430 --> 00:16:00.440 align:start position:0%
of fragile and very difficult to
 

00:16:00.440 --> 00:16:01.960 align:start position:0%
of fragile and very difficult to
understand<00:16:00.860><c> so</c><00:16:01.070><c> I</c><00:16:01.130><c> don't</c><00:16:01.340><c> think</c><00:16:01.520><c> the</c><00:16:01.580><c> template</c>

00:16:01.960 --> 00:16:01.970 align:start position:0%
understand so I don't think the template
 

00:16:01.970 --> 00:16:04.540 align:start position:0%
understand so I don't think the template
should<00:16:02.180><c> be</c><00:16:02.440><c> completely</c><00:16:03.440><c> banned</c><00:16:03.710><c> but</c><00:16:04.310><c> I</c><00:16:04.340><c> also</c>

00:16:04.540 --> 00:16:04.550 align:start position:0%
should be completely banned but I also
 

00:16:04.550 --> 00:16:06.910 align:start position:0%
should be completely banned but I also
don't<00:16:04.820><c> think</c><00:16:04.970><c> that</c><00:16:05.420><c> you</c><00:16:05.960><c> should</c><00:16:06.140><c> go</c><00:16:06.320><c> crazy</c>

00:16:06.910 --> 00:16:06.920 align:start position:0%
don't think that you should go crazy
 

00:16:06.920 --> 00:16:10.120 align:start position:0%
don't think that you should go crazy
templates<00:16:07.550><c> and</c><00:16:07.700><c> abuse</c><00:16:08.360><c> them</c><00:16:08.870><c> a</c><00:16:09.140><c> lot</c><00:16:09.320><c> anyway</c>

00:16:10.120 --> 00:16:10.130 align:start position:0%
templates and abuse them a lot anyway
 

00:16:10.130 --> 00:16:11.680 align:start position:0%
templates and abuse them a lot anyway
we're<00:16:10.820><c> gonna</c><00:16:10.880><c> have</c><00:16:11.090><c> a</c><00:16:11.120><c> lot</c><00:16:11.270><c> more</c><00:16:11.300><c> videos</c><00:16:11.510><c> about</c>

00:16:11.680 --> 00:16:11.690 align:start position:0%
we're gonna have a lot more videos about
 

00:16:11.690 --> 00:16:12.940 align:start position:0%
we're gonna have a lot more videos about
templates<00:16:12.140><c> because</c><00:16:12.290><c> there's</c><00:16:12.530><c> a</c><00:16:12.560><c> lot</c><00:16:12.740><c> more</c>

00:16:12.940 --> 00:16:12.950 align:start position:0%
templates because there's a lot more
 

00:16:12.950 --> 00:16:14.500 align:start position:0%
templates because there's a lot more
than<00:16:13.070><c> I</c><00:16:13.130><c> want</c><00:16:13.280><c> to</c><00:16:13.310><c> talk</c><00:16:13.490><c> about</c><00:16:13.640><c> is</c><00:16:14.180><c> just</c>

00:16:14.500 --> 00:16:14.510 align:start position:0%
than I want to talk about is just
 

00:16:14.510 --> 00:16:15.700 align:start position:0%
than I want to talk about is just
scratching<00:16:14.660><c> the</c><00:16:14.870><c> surface</c><00:16:14.960><c> once</c><00:16:15.470><c> we</c><00:16:15.590><c> actually</c>

00:16:15.700 --> 00:16:15.710 align:start position:0%
scratching the surface once we actually
 

00:16:15.710 --> 00:16:18.070 align:start position:0%
scratching the surface once we actually
get<00:16:15.980><c> into</c><00:16:16.190><c> kind</c><00:16:16.580><c> of</c><00:16:16.700><c> the</c><00:16:17.210><c> game</c><00:16:17.450><c> engine</c><00:16:17.690><c> series</c>

00:16:18.070 --> 00:16:18.080 align:start position:0%
get into kind of the game engine series
 

00:16:18.080 --> 00:16:19.840 align:start position:0%
get into kind of the game engine series
as<00:16:18.320><c> well</c><00:16:18.470><c> will</c><00:16:18.710><c> people</c><00:16:18.920><c> start</c><00:16:19.310><c> to</c><00:16:19.430><c> see</c><00:16:19.580><c> real</c>

00:16:19.840 --> 00:16:19.850 align:start position:0%
as well will people start to see real
 

00:16:19.850 --> 00:16:22.630 align:start position:0%
as well will people start to see real
examples<00:16:20.420><c> of</c><00:16:20.920><c> where</c><00:16:21.920><c> we</c><00:16:22.040><c> might</c><00:16:22.280><c> want</c><00:16:22.520><c> to</c><00:16:22.550><c> use</c>

00:16:22.630 --> 00:16:22.640 align:start position:0%
examples of where we might want to use
 

00:16:22.640 --> 00:16:25.720 align:start position:0%
examples of where we might want to use
templates<00:16:23.440><c> off</c><00:16:24.440><c> the</c><00:16:24.620><c> top</c><00:16:24.770><c> of</c><00:16:24.800><c> my</c><00:16:24.950><c> head</c><00:16:25.160><c> I</c><00:16:25.370><c> think</c>

00:16:25.720 --> 00:16:25.730 align:start position:0%
templates off the top of my head I think
 

00:16:25.730 --> 00:16:29.050 align:start position:0%
templates off the top of my head I think
two<00:16:26.180><c> kind</c><00:16:26.480><c> of</c><00:16:26.570><c> really</c><00:16:27.190><c> important</c><00:16:28.190><c> places</c>

00:16:29.050 --> 00:16:29.060 align:start position:0%
two kind of really important places
 

00:16:29.060 --> 00:16:30.490 align:start position:0%
two kind of really important places
where<00:16:29.300><c> I</c><00:16:29.330><c> would</c><00:16:29.570><c> definitely</c><00:16:29.960><c> use</c><00:16:30.080><c> templates</c>

00:16:30.490 --> 00:16:30.500 align:start position:0%
where I would definitely use templates
 

00:16:30.500 --> 00:16:32.080 align:start position:0%
where I would definitely use templates
are<00:16:30.710><c> things</c><00:16:30.890><c> like</c><00:16:31.040><c> logging</c><00:16:31.280><c> systems</c><00:16:31.790><c> and</c><00:16:31.970><c> also</c>

00:16:32.080 --> 00:16:32.090 align:start position:0%
are things like logging systems and also
 

00:16:32.090 --> 00:16:34.390 align:start position:0%
are things like logging systems and also
even<00:16:32.750><c> like</c><00:16:33.020><c> a</c><00:16:33.050><c> material</c><00:16:33.590><c> system</c><00:16:34.010><c> like</c><00:16:34.370><c> for</c>

00:16:34.390 --> 00:16:34.400 align:start position:0%
even like a material system like for
 

00:16:34.400 --> 00:16:36.160 align:start position:0%
even like a material system like for
rendering<00:16:34.970><c> graphics</c><00:16:35.510><c> right</c><00:16:35.720><c> when</c><00:16:35.930><c> you</c><00:16:35.990><c> have</c><00:16:36.140><c> a</c>

00:16:36.160 --> 00:16:36.170 align:start position:0%
rendering graphics right when you have a
 

00:16:36.170 --> 00:16:38.590 align:start position:0%
rendering graphics right when you have a
uniform<00:16:36.680><c> buffer</c><00:16:37.520><c> that</c><00:16:37.700><c> can</c><00:16:37.850><c> contain</c><00:16:38.150><c> various</c>

00:16:38.590 --> 00:16:38.600 align:start position:0%
uniform buffer that can contain various
 

00:16:38.600 --> 00:16:40.570 align:start position:0%
uniform buffer that can contain various
different<00:16:38.930><c> types</c><00:16:39.130><c> templating</c><00:16:40.130><c> that</c><00:16:40.280><c> to</c><00:16:40.490><c> an</c>

00:16:40.570 --> 00:16:40.580 align:start position:0%
different types templating that to an
 

00:16:40.580 --> 00:16:42.760 align:start position:0%
different types templating that to an
extent<00:16:40.910><c> can</c><00:16:41.150><c> be</c><00:16:41.300><c> extremely</c><00:16:41.750><c> useful</c><00:16:41.810><c> anyway</c><00:16:42.680><c> I</c>

00:16:42.760 --> 00:16:42.770 align:start position:0%
extent can be extremely useful anyway I
 

00:16:42.770 --> 00:16:43.930 align:start position:0%
extent can be extremely useful anyway I
hope<00:16:42.860><c> you</c><00:16:42.950><c> guys</c><00:16:43.100><c> enjoy</c><00:16:43.280><c> this</c><00:16:43.400><c> video</c><00:16:43.550><c> if</c><00:16:43.820><c> you</c>

00:16:43.930 --> 00:16:43.940 align:start position:0%
hope you guys enjoy this video if you
 

00:16:43.940 --> 00:16:45.730 align:start position:0%
hope you guys enjoy this video if you
did<00:16:44.090><c> you</c><00:16:44.210><c> can</c><00:16:44.300><c> hit</c><00:16:44.480><c> that</c><00:16:44.540><c> like</c><00:16:44.870><c> button</c><00:16:44.900><c> you</c><00:16:45.620><c> can</c>

00:16:45.730 --> 00:16:45.740 align:start position:0%
did you can hit that like button you can
 

00:16:45.740 --> 00:16:47.110 align:start position:0%
did you can hit that like button you can
also<00:16:45.830><c> you</c><00:16:46.190><c> can</c><00:16:46.370><c> you</c><00:16:46.460><c> can</c><00:16:46.580><c> help</c><00:16:46.700><c> support</c><00:16:46.850><c> this</c>

00:16:47.110 --> 00:16:47.120 align:start position:0%
also you can you can help support this
 

00:16:47.120 --> 00:16:48.580 align:start position:0%
also you can you can help support this
series<00:16:47.510><c> in</c><00:16:47.630><c> all</c><00:16:47.750><c> the</c><00:16:47.870><c> series</c><00:16:48.200><c> that</c><00:16:48.320><c> I</c><00:16:48.410><c> make</c>

00:16:48.580 --> 00:16:48.590 align:start position:0%
series in all the series that I make
 

00:16:48.590 --> 00:16:50.170 align:start position:0%
series in all the series that I make
here<00:16:48.950><c> on</c><00:16:49.070><c> my</c><00:16:49.190><c> channel</c><00:16:49.520><c> by</c><00:16:49.610><c> going</c><00:16:49.820><c> to</c><00:16:49.910><c> pay</c><00:16:50.000><c> for</c><00:16:50.030><c> a</c>

00:16:50.170 --> 00:16:50.180 align:start position:0%
here on my channel by going to pay for a
 

00:16:50.180 --> 00:16:52.330 align:start position:0%
here on my channel by going to pay for a
Mac<00:16:50.300><c> on</c><00:16:50.420><c> 4/2</c><00:16:50.870><c> Cherno</c><00:16:51.080><c> massive</c><00:16:51.860><c> shout</c><00:16:52.040><c> out</c><00:16:52.190><c> as</c>

00:16:52.330 --> 00:16:52.340 align:start position:0%
Mac on 4/2 Cherno massive shout out as
 

00:16:52.340 --> 00:16:54.070 align:start position:0%
Mac on 4/2 Cherno massive shout out as
always<00:16:52.670><c> to</c><00:16:52.940><c> all</c><00:16:53.060><c> the</c><00:16:53.240><c> wonderful</c><00:16:53.510><c> supporters</c>

00:16:54.070 --> 00:16:54.080 align:start position:0%
always to all the wonderful supporters
 

00:16:54.080 --> 00:16:56.230 align:start position:0%
always to all the wonderful supporters
that<00:16:54.230><c> helped</c><00:16:54.440><c> make</c><00:16:54.770><c> this</c><00:16:55.010><c> possible</c><00:16:55.150><c> there</c><00:16:56.150><c> are</c>

00:16:56.230 --> 00:16:56.240 align:start position:0%
that helped make this possible there are
 

00:16:56.240 --> 00:16:57.340 align:start position:0%
that helped make this possible there are
some<00:16:56.360><c> pretty</c><00:16:56.510><c> cool</c><00:16:56.660><c> rewards</c><00:16:56.990><c> that</c><00:16:57.080><c> you</c><00:16:57.140><c> can</c>

00:16:57.340 --> 00:16:57.350 align:start position:0%
some pretty cool rewards that you can
 

00:16:57.350 --> 00:16:58.780 align:start position:0%
some pretty cool rewards that you can
get<00:16:57.560><c> such</c><00:16:57.770><c> as</c><00:16:57.890><c> access</c><00:16:58.250><c> to</c><00:16:58.280><c> all</c><00:16:58.460><c> the</c><00:16:58.580><c> source</c>

00:16:58.780 --> 00:16:58.790 align:start position:0%
get such as access to all the source
 

00:16:58.790 --> 00:17:00.550 align:start position:0%
get such as access to all the source
code<00:16:59.060><c> from</c><00:16:59.210><c> my</c><00:16:59.390><c> OpenGL</c><00:16:59.840><c> series</c><00:17:00.200><c> as</c><00:17:00.350><c> well</c><00:17:00.500><c> as</c>

00:17:00.550 --> 00:17:00.560 align:start position:0%
code from my OpenGL series as well as
 

00:17:00.560 --> 00:17:02.740 align:start position:0%
code from my OpenGL series as well as
the<00:17:00.740><c> soon</c><00:17:00.920><c> to</c><00:17:00.950><c> come</c><00:17:01.190><c> game</c><00:17:01.430><c> engine</c><00:17:01.730><c> series</c><00:17:01.940><c> by</c>

00:17:02.740 --> 00:17:02.750 align:start position:0%
the soon to come game engine series by
 

00:17:02.750 --> 00:17:04.960 align:start position:0%
the soon to come game engine series by
supporting<00:17:03.230><c> then</c><00:17:03.410><c> you</c><00:17:03.500><c> also</c><00:17:03.680><c> get</c><00:17:03.980><c> like</c><00:17:04.520><c> for</c>

00:17:04.960 --> 00:17:04.970 align:start position:0%
supporting then you also get like for
 

00:17:04.970 --> 00:17:06.280 align:start position:0%
supporting then you also get like for
the<00:17:05.030><c> top</c><00:17:05.180><c> tier</c><00:17:05.360><c> supporters</c><00:17:05.840><c> we</c><00:17:05.930><c> do</c><00:17:06.020><c> this</c><00:17:06.140><c> thing</c>

00:17:06.280 --> 00:17:06.290 align:start position:0%
the top tier supporters we do this thing
 

00:17:06.290 --> 00:17:07.540 align:start position:0%
the top tier supporters we do this thing
while<00:17:06.440><c> we</c><00:17:06.530><c> basically</c><00:17:06.740><c> hang</c><00:17:07.040><c> out</c><00:17:07.160><c> for</c><00:17:07.370><c> an</c><00:17:07.460><c> hour</c>

00:17:07.540 --> 00:17:07.550 align:start position:0%
while we basically hang out for an hour
 

00:17:07.550 --> 00:17:09.070 align:start position:0%
while we basically hang out for an hour
once<00:17:08.060><c> a</c><00:17:08.180><c> month</c><00:17:08.330><c> and</c><00:17:08.510><c> we</c><00:17:08.570><c> just</c><00:17:08.720><c> talk</c><00:17:08.870><c> about</c>

00:17:09.070 --> 00:17:09.080 align:start position:0%
once a month and we just talk about
 

00:17:09.080 --> 00:17:10.780 align:start position:0%
once a month and we just talk about
whatever<00:17:09.260><c> the</c><00:17:09.830><c> next</c><00:17:09.980><c> one</c><00:17:10.190><c> is</c><00:17:10.250><c> actually</c><00:17:10.490><c> coming</c>

00:17:10.780 --> 00:17:10.790 align:start position:0%
whatever the next one is actually coming
 

00:17:10.790 --> 00:17:13.030 align:start position:0%
whatever the next one is actually coming
up<00:17:10.880><c> in</c><00:17:11.060><c> like</c><00:17:11.180><c> a</c><00:17:11.240><c> week</c><00:17:11.570><c> so</c><00:17:11.810><c> definitely</c><00:17:12.440><c> sign</c><00:17:12.860><c> up</c>

00:17:13.030 --> 00:17:13.040 align:start position:0%
up in like a week so definitely sign up
 

00:17:13.040 --> 00:17:14.560 align:start position:0%
up in like a week so definitely sign up
for<00:17:13.220><c> that</c><00:17:13.340><c> if</c><00:17:13.550><c> you're</c><00:17:13.670><c> interested</c><00:17:13.820><c> and</c><00:17:14.150><c> then</c>

00:17:14.560 --> 00:17:14.570 align:start position:0%
for that if you're interested and then
 

00:17:14.570 --> 00:17:16.180 align:start position:0%
for that if you're interested and then
also<00:17:14.750><c> you'll</c><00:17:15.020><c> get</c><00:17:15.140><c> videos</c><00:17:15.470><c> early</c><00:17:15.890><c> and</c><00:17:16.010><c> a</c><00:17:16.040><c> whole</c>

00:17:16.180 --> 00:17:16.190 align:start position:0%
also you'll get videos early and a whole
 

00:17:16.190 --> 00:17:18.580 align:start position:0%
also you'll get videos early and a whole
bunch<00:17:16.400><c> of</c><00:17:16.490><c> other</c><00:17:16.670><c> rewards</c><00:17:17.150><c> but</c><00:17:17.990><c> most</c><00:17:18.380><c> of</c><00:17:18.470><c> all</c>

00:17:18.580 --> 00:17:18.590 align:start position:0%
bunch of other rewards but most of all
 

00:17:18.590 --> 00:17:19.750 align:start position:0%
bunch of other rewards but most of all
you're<00:17:18.740><c> helping</c><00:17:18.980><c> to</c><00:17:19.010><c> support</c><00:17:19.340><c> this</c><00:17:19.430><c> series</c>

00:17:19.750 --> 00:17:19.760 align:start position:0%
you're helping to support this series
 

00:17:19.760 --> 00:17:21.580 align:start position:0%
you're helping to support this series
which<00:17:19.940><c> is</c><00:17:20.030><c> awesome</c><00:17:20.450><c> because</c><00:17:20.840><c> I</c><00:17:20.960><c> can</c><00:17:21.170><c> basically</c>

00:17:21.580 --> 00:17:21.590 align:start position:0%
which is awesome because I can basically
 

00:17:21.590 --> 00:17:23.470 align:start position:0%
which is awesome because I can basically
just<00:17:21.800><c> lets</c><00:17:22.010><c> me</c><00:17:22.100><c> make</c><00:17:22.220><c> more</c><00:17:22.400><c> videos</c><00:17:22.460><c> you</c><00:17:22.970><c> can</c>

00:17:23.470 --> 00:17:23.480 align:start position:0%
just lets me make more videos you can
 

00:17:23.480 --> 00:17:25.480 align:start position:0%
just lets me make more videos you can
also<00:17:23.630><c> join</c><00:17:23.870><c> discord</c><00:17:24.380><c> I</c><00:17:24.590><c> have</c><00:17:25.100><c> just</c><00:17:25.310><c> called</c>

00:17:25.480 --> 00:17:25.490 align:start position:0%
also join discord I have just called
 

00:17:25.490 --> 00:17:26.330 align:start position:0%
also join discord I have just called
server<00:17:25.760><c> over</c>

00:17:26.330 --> 00:17:26.340 align:start position:0%
server over
 

00:17:26.340 --> 00:17:28.250 align:start position:0%
server over
-<00:17:26.490><c> sherrilyn</c><00:17:26.790><c> home</c><00:17:26.970><c> slash</c><00:17:27.180><c> discord</c><00:17:27.690><c> that's</c>

00:17:28.250 --> 00:17:28.260 align:start position:0%
- sherrilyn home slash discord that's
 

00:17:28.260 --> 00:17:29.960 align:start position:0%
- sherrilyn home slash discord that's
basically<00:17:28.680><c> just</c><00:17:28.800><c> a</c><00:17:29.070><c> community</c><00:17:29.550><c> of</c><00:17:29.610><c> people</c>

00:17:29.960 --> 00:17:29.970 align:start position:0%
basically just a community of people
 

00:17:29.970 --> 00:17:31.100 align:start position:0%
basically just a community of people
where<00:17:30.090><c> you</c><00:17:30.120><c> can</c><00:17:30.270><c> talk</c><00:17:30.450><c> about</c><00:17:30.690><c> whatever</c><00:17:30.930><c> you</c>

00:17:31.100 --> 00:17:31.110 align:start position:0%
where you can talk about whatever you
 

00:17:31.110 --> 00:17:32.690 align:start position:0%
where you can talk about whatever you
want<00:17:31.230><c> including</c><00:17:31.860><c> this</c><00:17:31.950><c> programming</c><00:17:32.490><c> stuff</c>

00:17:32.690 --> 00:17:32.700 align:start position:0%
want including this programming stuff
 

00:17:32.700 --> 00:17:34.340 align:start position:0%
want including this programming stuff
and<00:17:32.940><c> just</c><00:17:33.360><c> discuss</c><00:17:33.630><c> it</c><00:17:33.690><c> with</c><00:17:33.900><c> other</c><00:17:33.930><c> people</c>

00:17:34.340 --> 00:17:34.350 align:start position:0%
and just discuss it with other people
 

00:17:34.350 --> 00:17:35.600 align:start position:0%
and just discuss it with other people
ask<00:17:34.500><c> for</c><00:17:34.590><c> help</c><00:17:34.800><c> with</c><00:17:34.950><c> your</c><00:17:34.980><c> kirtan</c><00:17:35.340><c> all</c><00:17:35.430><c> that</c>

00:17:35.600 --> 00:17:35.610 align:start position:0%
ask for help with your kirtan all that
 

00:17:35.610 --> 00:17:36.860 align:start position:0%
ask for help with your kirtan all that
definitely<00:17:36.090><c> encourage</c><00:17:36.330><c> you</c><00:17:36.390><c> guys</c><00:17:36.570><c> to</c><00:17:36.630><c> join</c>

00:17:36.860 --> 00:17:36.870 align:start position:0%
definitely encourage you guys to join
 

00:17:36.870 --> 00:17:39.440 align:start position:0%
definitely encourage you guys to join
that<00:17:37.080><c> and</c><00:17:37.350><c> as</c><00:17:38.070><c> always</c><00:17:38.250><c> I</c><00:17:38.670><c> will</c><00:17:39.000><c> see</c><00:17:39.030><c> you</c><00:17:39.270><c> in</c><00:17:39.420><c> the</c>

00:17:39.440 --> 00:17:39.450 align:start position:0%
that and as always I will see you in the
 

00:17:39.450 --> 00:17:41.740 align:start position:0%
that and as always I will see you in the
next<00:17:39.720><c> video</c><00:17:39.960><c> goodbye</c>

00:17:41.740 --> 00:17:41.750 align:start position:0%
next video goodbye
 

00:17:41.750 --> 00:17:56.920 align:start position:0%
next video goodbye
[Music]

