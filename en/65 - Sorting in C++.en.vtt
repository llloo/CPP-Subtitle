WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.640 align:start position:0%
 
hey<00:00:00.269><c> what's</c><00:00:00.480><c> up</c><00:00:00.570><c> guys</c><00:00:00.750><c> my</c><00:00:01.110><c> name</c><00:00:01.140><c> is</c><00:00:01.319><c> a</c><00:00:01.380><c> turn-on</c>

00:00:01.640 --> 00:00:01.650 align:start position:0%
hey what's up guys my name is a turn-on
 

00:00:01.650 --> 00:00:03.710 align:start position:0%
hey what's up guys my name is a turn-on
welcome<00:00:01.979><c> back</c><00:00:02.100><c> to</c><00:00:02.220><c> my</c><00:00:02.310><c> stable</c><00:00:02.520><c> spas</c><00:00:02.820><c> series</c><00:00:03.240><c> so</c>

00:00:03.710 --> 00:00:03.720 align:start position:0%
welcome back to my stable spas series so
 

00:00:03.720 --> 00:00:04.910 align:start position:0%
welcome back to my stable spas series so
today<00:00:04.080><c> we</c><00:00:04.230><c> will</c><00:00:04.290><c> be</c><00:00:04.380><c> talking</c><00:00:04.560><c> all</c><00:00:04.890><c> about</c>

00:00:04.910 --> 00:00:04.920 align:start position:0%
today we will be talking all about
 

00:00:04.920 --> 00:00:08.210 align:start position:0%
today we will be talking all about
sorting<00:00:05.850><c> in</c><00:00:06.060><c> C++</c><00:00:06.750><c> so</c><00:00:07.049><c> talking</c><00:00:07.770><c> about</c><00:00:07.799><c> various</c>

00:00:08.210 --> 00:00:08.220 align:start position:0%
sorting in C++ so talking about various
 

00:00:08.220 --> 00:00:09.650 align:start position:0%
sorting in C++ so talking about various
different<00:00:08.250><c> data</c><00:00:08.670><c> structures</c><00:00:09.240><c> and</c><00:00:09.389><c> as</c><00:00:09.510><c> the</c>

00:00:09.650 --> 00:00:09.660 align:start position:0%
different data structures and as the
 

00:00:09.660 --> 00:00:11.660 align:start position:0%
different data structures and as the
series<00:00:10.080><c> goes</c><00:00:10.110><c> on</c><00:00:10.590><c> we</c><00:00:10.769><c> will</c><00:00:10.950><c> continue</c><00:00:11.490><c> talking</c>

00:00:11.660 --> 00:00:11.670 align:start position:0%
series goes on we will continue talking
 

00:00:11.670 --> 00:00:14.169 align:start position:0%
series goes on we will continue talking
about<00:00:12.059><c> various</c><00:00:12.900><c> data</c><00:00:13.139><c> structures</c><00:00:13.620><c> because</c>

00:00:14.169 --> 00:00:14.179 align:start position:0%
about various data structures because
 

00:00:14.179 --> 00:00:16.490 align:start position:0%
about various data structures because
data<00:00:15.179><c> structures</c><00:00:15.660><c> are</c><00:00:15.809><c> how</c><00:00:15.960><c> you</c><00:00:16.020><c> store</c><00:00:16.470><c> data</c>

00:00:16.490 --> 00:00:16.500 align:start position:0%
data structures are how you store data
 

00:00:16.500 --> 00:00:18.200 align:start position:0%
data structures are how you store data
and<00:00:17.130><c> data</c><00:00:17.340><c> is</c><00:00:17.520><c> very</c><00:00:17.670><c> important</c><00:00:18.000><c> when</c><00:00:18.119><c> you're</c>

00:00:18.200 --> 00:00:18.210 align:start position:0%
and data is very important when you're
 

00:00:18.210 --> 00:00:19.580 align:start position:0%
and data is very important when you're
programming<00:00:18.539><c> and</c><00:00:18.779><c> dealing</c><00:00:18.990><c> with</c><00:00:19.020><c> signals</c><00:00:19.410><c> bus</c>

00:00:19.580 --> 00:00:19.590 align:start position:0%
programming and dealing with signals bus
 

00:00:19.590 --> 00:00:22.010 align:start position:0%
programming and dealing with signals bus
what<00:00:20.400><c> we</c><00:00:20.490><c> haven't</c><00:00:20.760><c> talked</c><00:00:20.939><c> about</c><00:00:21.000><c> yet</c><00:00:21.390><c> is</c><00:00:21.660><c> how</c>

00:00:22.010 --> 00:00:22.020 align:start position:0%
what we haven't talked about yet is how
 

00:00:22.020 --> 00:00:24.080 align:start position:0%
what we haven't talked about yet is how
do<00:00:22.080><c> you</c><00:00:22.289><c> sort</c><00:00:22.650><c> the</c><00:00:22.890><c> data</c><00:00:23.039><c> that</c><00:00:23.369><c> you</c><00:00:23.460><c> have</c><00:00:23.490><c> so</c>

00:00:24.080 --> 00:00:24.090 align:start position:0%
do you sort the data that you have so
 

00:00:24.090 --> 00:00:25.820 align:start position:0%
do you sort the data that you have so
suppose<00:00:24.390><c> that</c><00:00:24.539><c> I</c><00:00:24.600><c> have</c><00:00:24.630><c> a</c><00:00:24.840><c> vector</c><00:00:25.260><c> or</c><00:00:25.289><c> an</c><00:00:25.529><c> array</c>

00:00:25.820 --> 00:00:25.830 align:start position:0%
suppose that I have a vector or an array
 

00:00:25.830 --> 00:00:29.330 align:start position:0%
suppose that I have a vector or an array
of<00:00:26.099><c> values</c><00:00:27.140><c> integers</c><00:00:28.140><c> and</c><00:00:28.349><c> I</c><00:00:28.740><c> want</c><00:00:28.980><c> them</c><00:00:29.130><c> to</c><00:00:29.160><c> be</c>

00:00:29.330 --> 00:00:29.340 align:start position:0%
of values integers and I want them to be
 

00:00:29.340 --> 00:00:32.659 align:start position:0%
of values integers and I want them to be
sorted<00:00:29.910><c> by</c><00:00:30.179><c> their</c><00:00:30.720><c> value</c><00:00:31.170><c> or</c><00:00:31.410><c> by</c><00:00:31.800><c> some</c><00:00:32.189><c> kind</c><00:00:32.489><c> of</c>

00:00:32.659 --> 00:00:32.669 align:start position:0%
sorted by their value or by some kind of
 

00:00:32.669 --> 00:00:34.850 align:start position:0%
sorted by their value or by some kind of
predicate<00:00:33.360><c> how</c><00:00:33.960><c> do</c><00:00:34.020><c> I</c><00:00:34.110><c> actually</c><00:00:34.410><c> gets</c>

00:00:34.850 --> 00:00:34.860 align:start position:0%
predicate how do I actually gets
 

00:00:34.860 --> 00:00:36.380 align:start position:0%
predicate how do I actually gets
impossible<00:00:35.130><c> to</c><00:00:35.460><c> sort</c><00:00:35.670><c> something</c><00:00:35.880><c> for</c><00:00:36.120><c> me</c><00:00:36.239><c> now</c>

00:00:36.380 --> 00:00:36.390 align:start position:0%
impossible to sort something for me now
 

00:00:36.390 --> 00:00:37.910 align:start position:0%
impossible to sort something for me now
obviously<00:00:36.870><c> you</c><00:00:37.020><c> could</c><00:00:37.290><c> just</c><00:00:37.469><c> write</c><00:00:37.620><c> your</c><00:00:37.800><c> own</c>

00:00:37.910 --> 00:00:37.920 align:start position:0%
obviously you could just write your own
 

00:00:37.920 --> 00:00:39.709 align:start position:0%
obviously you could just write your own
algorithm<00:00:38.370><c> like</c><00:00:38.489><c> bubble</c><00:00:38.879><c> sort</c><00:00:39.090><c> a</c><00:00:39.270><c> quick</c><00:00:39.480><c> sort</c>

00:00:39.709 --> 00:00:39.719 align:start position:0%
algorithm like bubble sort a quick sort
 

00:00:39.719 --> 00:00:41.450 align:start position:0%
algorithm like bubble sort a quick sort
or<00:00:40.290><c> any</c><00:00:40.469><c> kind</c><00:00:40.680><c> of</c><00:00:40.770><c> algorithm</c><00:00:41.190><c> that</c><00:00:41.280><c> just</c>

00:00:41.450 --> 00:00:41.460 align:start position:0%
or any kind of algorithm that just
 

00:00:41.460 --> 00:00:43.490 align:start position:0%
or any kind of algorithm that just
iterates<00:00:41.850><c> through</c><00:00:41.940><c> the</c><00:00:42.180><c> list</c><00:00:42.390><c> and</c><00:00:42.600><c> source</c><00:00:43.320><c> the</c>

00:00:43.490 --> 00:00:43.500 align:start position:0%
iterates through the list and source the
 

00:00:43.500 --> 00:00:44.630 align:start position:0%
iterates through the list and source the
elements<00:00:43.829><c> into</c><00:00:44.070><c> the</c><00:00:44.160><c> order</c><00:00:44.430><c> that</c><00:00:44.520><c> you</c><00:00:44.610><c> want</c>

00:00:44.630 --> 00:00:44.640 align:start position:0%
elements into the order that you want
 

00:00:44.640 --> 00:00:46.520 align:start position:0%
elements into the order that you want
them<00:00:44.850><c> to</c><00:00:45.000><c> be</c><00:00:45.090><c> sorted</c><00:00:45.480><c> in</c><00:00:45.660><c> that's</c><00:00:45.870><c> totally</c><00:00:46.289><c> fine</c>

00:00:46.520 --> 00:00:46.530 align:start position:0%
them to be sorted in that's totally fine
 

00:00:46.530 --> 00:00:48.319 align:start position:0%
them to be sorted in that's totally fine
and<00:00:46.800><c> there</c><00:00:47.250><c> are</c><00:00:47.340><c> cases</c><00:00:47.550><c> when</c><00:00:47.850><c> you</c><00:00:47.969><c> would</c><00:00:48.149><c> want</c>

00:00:48.319 --> 00:00:48.329 align:start position:0%
and there are cases when you would want
 

00:00:48.329 --> 00:00:49.310 align:start position:0%
and there are cases when you would want
to<00:00:48.539><c> do</c><00:00:48.660><c> something</c><00:00:48.960><c> like</c><00:00:49.050><c> that</c>

00:00:49.310 --> 00:00:49.320 align:start position:0%
to do something like that
 

00:00:49.320 --> 00:00:52.310 align:start position:0%
to do something like that
however<00:00:50.449><c> usually</c><00:00:51.449><c> if</c><00:00:51.809><c> you're</c><00:00:51.930><c> dealing</c><00:00:52.140><c> with</c>

00:00:52.310 --> 00:00:52.320 align:start position:0%
however usually if you're dealing with
 

00:00:52.320 --> 00:00:54.950 align:start position:0%
however usually if you're dealing with
simple<00:00:52.860><c> sports</c><00:00:53.129><c> kind</c><00:00:53.430><c> of</c><00:00:53.550><c> with</c><00:00:54.210><c> its</c><00:00:54.480><c> inbuilt</c>

00:00:54.950 --> 00:00:54.960 align:start position:0%
simple sports kind of with its inbuilt
 

00:00:54.960 --> 00:00:57.529 align:start position:0%
simple sports kind of with its inbuilt
collection<00:00:55.469><c> types</c><00:00:55.710><c> like</c><00:00:55.980><c> STD</c><00:00:56.489><c> vector</c><00:00:56.910><c> there's</c>

00:00:57.529 --> 00:00:57.539 align:start position:0%
collection types like STD vector there's
 

00:00:57.539 --> 00:00:59.180 align:start position:0%
collection types like STD vector there's
no<00:00:57.690><c> reason</c><00:00:58.079><c> for</c><00:00:58.109><c> you</c><00:00:58.350><c> to</c><00:00:58.410><c> have</c><00:00:58.590><c> to</c><00:00:58.710><c> write</c><00:00:59.010><c> an</c>

00:00:59.180 --> 00:00:59.190 align:start position:0%
no reason for you to have to write an
 

00:00:59.190 --> 00:01:01.400 align:start position:0%
no reason for you to have to write an
algorithm<00:00:59.489><c> yourself</c><00:01:00.059><c> if</c><00:01:00.300><c> you</c><00:01:00.899><c> could</c><00:01:01.020><c> just</c><00:01:01.230><c> get</c>

00:01:01.400 --> 00:01:01.410 align:start position:0%
algorithm yourself if you could just get
 

00:01:01.410 --> 00:01:03.319 align:start position:0%
algorithm yourself if you could just get
the<00:01:01.859><c> disabled</c><00:01:02.460><c> spot</c><00:01:02.609><c> library</c><00:01:03.000><c> to</c><00:01:03.120><c> do</c><00:01:03.239><c> the</c>

00:01:03.319 --> 00:01:03.329 align:start position:0%
the disabled spot library to do the
 

00:01:03.329 --> 00:01:05.690 align:start position:0%
the disabled spot library to do the
sorting<00:01:03.600><c> for</c><00:01:03.870><c> you</c><00:01:04.049><c> and</c><00:01:04.320><c> that's</c><00:01:05.220><c> why</c><00:01:05.460><c> today</c>

00:01:05.690 --> 00:01:05.700 align:start position:0%
sorting for you and that's why today
 

00:01:05.700 --> 00:01:07.100 align:start position:0%
sorting for you and that's why today
we're<00:01:05.820><c> going</c><00:01:05.909><c> to</c><00:01:06.000><c> focus</c><00:01:06.119><c> on</c><00:01:06.330><c> something</c><00:01:06.869><c> called</c>

00:01:07.100 --> 00:01:07.110 align:start position:0%
we're going to focus on something called
 

00:01:07.110 --> 00:01:09.710 align:start position:0%
we're going to focus on something called
STD<00:01:07.710><c> sort</c><00:01:08.040><c> which</c><00:01:08.700><c> is</c><00:01:08.880><c> a</c><00:01:08.909><c> sort</c><00:01:09.210><c> function</c><00:01:09.390><c> that's</c>

00:01:09.710 --> 00:01:09.720 align:start position:0%
STD sort which is a sort function that's
 

00:01:09.720 --> 00:01:11.179 align:start position:0%
STD sort which is a sort function that's
kind<00:01:09.900><c> of</c><00:01:09.930><c> built</c><00:01:10.140><c> into</c><00:01:10.560><c> this</c><00:01:10.740><c> tablecloth</c>

00:01:11.179 --> 00:01:11.189 align:start position:0%
kind of built into this tablecloth
 

00:01:11.189 --> 00:01:13.670 align:start position:0%
kind of built into this tablecloth
library<00:01:11.640><c> that</c><00:01:12.240><c> can</c><00:01:12.479><c> actually</c><00:01:12.630><c> perform</c><00:01:13.380><c> that</c>

00:01:13.670 --> 00:01:13.680 align:start position:0%
library that can actually perform that
 

00:01:13.680 --> 00:01:15.200 align:start position:0%
library that can actually perform that
sorting<00:01:14.040><c> for</c><00:01:14.250><c> you</c><00:01:14.369><c> over</c><00:01:14.670><c> any</c><00:01:14.850><c> kind</c><00:01:15.150><c> of</c>

00:01:15.200 --> 00:01:15.210 align:start position:0%
sorting for you over any kind of
 

00:01:15.210 --> 00:01:16.820 align:start position:0%
sorting for you over any kind of
iterator<00:01:15.630><c> that</c><00:01:15.840><c> you</c><00:01:15.900><c> provide</c><00:01:16.229><c> it</c><00:01:16.350><c> with</c><00:01:16.500><c> so</c><00:01:16.740><c> if</c>

00:01:16.820 --> 00:01:16.830 align:start position:0%
iterator that you provide it with so if
 

00:01:16.830 --> 00:01:18.530 align:start position:0%
iterator that you provide it with so if
we<00:01:16.950><c> pop</c><00:01:17.130><c> over</c><00:01:17.280><c> to</c><00:01:17.369><c> CBP</c><00:01:17.790><c> reference</c><00:01:18.119><c> so</c><00:01:18.210><c> come</c><00:01:18.420><c> and</c>

00:01:18.530 --> 00:01:18.540 align:start position:0%
we pop over to CBP reference so come and
 

00:01:18.540 --> 00:01:20.270 align:start position:0%
we pop over to CBP reference so come and
take<00:01:18.570><c> a</c><00:01:18.689><c> look</c><00:01:18.720><c> at</c><00:01:18.900><c> STDs</c><00:01:19.320><c> so</c><00:01:19.350><c> it</c><00:01:19.590><c> you</c><00:01:19.799><c> can</c><00:01:19.950><c> see</c><00:01:20.130><c> we</c>

00:01:20.270 --> 00:01:20.280 align:start position:0%
take a look at STDs so it you can see we
 

00:01:20.280 --> 00:01:22.100 align:start position:0%
take a look at STDs so it you can see we
have<00:01:20.400><c> this</c><00:01:20.520><c> function</c><00:01:20.729><c> here</c><00:01:21.150><c> that</c><00:01:21.659><c> will</c><00:01:21.840><c> sort</c>

00:01:22.100 --> 00:01:22.110 align:start position:0%
have this function here that will sort
 

00:01:22.110 --> 00:01:23.660 align:start position:0%
have this function here that will sort
elements<00:01:22.710><c> in</c><00:01:22.860><c> a</c><00:01:22.950><c> certain</c><00:01:23.220><c> range</c><00:01:23.340><c> that</c><00:01:23.610><c> we</c>

00:01:23.660 --> 00:01:23.670 align:start position:0%
elements in a certain range that we
 

00:01:23.670 --> 00:01:24.920 align:start position:0%
elements in a certain range that we
provide<00:01:23.970><c> it</c><00:01:24.060><c> with</c><00:01:24.210><c> and</c><00:01:24.420><c> what</c><00:01:24.570><c> we</c><00:01:24.689><c> have</c><00:01:24.810><c> to</c>

00:01:24.920 --> 00:01:24.930 align:start position:0%
provide it with and what we have to
 

00:01:24.930 --> 00:01:26.929 align:start position:0%
provide it with and what we have to
provide<00:01:25.170><c> it</c><00:01:25.320><c> with</c><00:01:25.350><c> is</c><00:01:25.920><c> essentially</c><00:01:26.520><c> just</c><00:01:26.729><c> an</c>

00:01:26.929 --> 00:01:26.939 align:start position:0%
provide it with is essentially just an
 

00:01:26.939 --> 00:01:28.969 align:start position:0%
provide it with is essentially just an
iterator<00:01:27.450><c> and</c><00:01:27.689><c> beginning</c><00:01:28.140><c> interrater</c><00:01:28.619><c> and</c><00:01:28.860><c> an</c>

00:01:28.969 --> 00:01:28.979 align:start position:0%
iterator and beginning interrater and an
 

00:01:28.979 --> 00:01:30.740 align:start position:0%
iterator and beginning interrater and an
end<00:01:29.220><c> iterate</c><00:01:29.729><c> and</c><00:01:29.850><c> everything</c><00:01:30.210><c> inside</c><00:01:30.509><c> that</c>

00:01:30.740 --> 00:01:30.750 align:start position:0%
end iterate and everything inside that
 

00:01:30.750 --> 00:01:32.690 align:start position:0%
end iterate and everything inside that
iterator<00:01:31.140><c> will</c><00:01:31.380><c> be</c><00:01:31.500><c> sorted</c><00:01:32.100><c> based</c><00:01:32.340><c> on</c><00:01:32.640><c> a</c>

00:01:32.690 --> 00:01:32.700 align:start position:0%
iterator will be sorted based on a
 

00:01:32.700 --> 00:01:34.039 align:start position:0%
iterator will be sorted based on a
certain<00:01:33.000><c> predicate</c><00:01:33.479><c> that</c><00:01:33.509><c> we</c><00:01:33.659><c> provide</c><00:01:33.930><c> it</c>

00:01:34.039 --> 00:01:34.049 align:start position:0%
certain predicate that we provide it
 

00:01:34.049 --> 00:01:35.359 align:start position:0%
certain predicate that we provide it
with<00:01:34.079><c> so</c><00:01:34.530><c> what</c><00:01:34.680><c> we</c><00:01:34.770><c> can</c><00:01:34.860><c> do</c><00:01:34.979><c> is</c><00:01:35.100><c> kind</c><00:01:35.280><c> of</c><00:01:35.310><c> just</c>

00:01:35.359 --> 00:01:35.369 align:start position:0%
with so what we can do is kind of just
 

00:01:35.369 --> 00:01:36.800 align:start position:0%
with so what we can do is kind of just
not<00:01:35.670><c> provide</c><00:01:36.030><c> it</c><00:01:36.150><c> with</c><00:01:36.270><c> any</c><00:01:36.479><c> kind</c><00:01:36.780><c> of</c>

00:01:36.800 --> 00:01:36.810 align:start position:0%
not provide it with any kind of
 

00:01:36.810 --> 00:01:38.420 align:start position:0%
not provide it with any kind of
predicate<00:01:37.259><c> and</c><00:01:37.439><c> we'll</c><00:01:37.590><c> just</c><00:01:37.770><c> attempt</c><00:01:38.100><c> to</c><00:01:38.159><c> sort</c>

00:01:38.420 --> 00:01:38.430 align:start position:0%
predicate and we'll just attempt to sort
 

00:01:38.430 --> 00:01:40.580 align:start position:0%
predicate and we'll just attempt to sort
of<00:01:38.549><c> kind</c><00:01:38.820><c> of</c><00:01:38.909><c> in</c><00:01:39.060><c> order</c><00:01:39.540><c> based</c><00:01:39.810><c> on</c><00:01:39.930><c> the</c><00:01:40.079><c> type</c><00:01:40.290><c> or</c>

00:01:40.580 --> 00:01:40.590 align:start position:0%
of kind of in order based on the type or
 

00:01:40.590 --> 00:01:42.940 align:start position:0%
of kind of in order based on the type or
we<00:01:41.159><c> can</c><00:01:41.310><c> actually</c><00:01:41.640><c> give</c><00:01:41.850><c> it</c><00:01:42.000><c> some</c><00:01:42.240><c> kind</c><00:01:42.450><c> of</c>

00:01:42.940 --> 00:01:42.950 align:start position:0%
we can actually give it some kind of
 

00:01:42.950 --> 00:01:44.870 align:start position:0%
we can actually give it some kind of
function<00:01:43.950><c> for</c><00:01:44.159><c> it</c><00:01:44.280><c> to</c><00:01:44.399><c> actually</c><00:01:44.549><c> use</c><00:01:44.850><c> for</c>

00:01:44.870 --> 00:01:44.880 align:start position:0%
function for it to actually use for
 

00:01:44.880 --> 00:01:46.639 align:start position:0%
function for it to actually use for
comparison<00:01:45.689><c> and</c><00:01:45.899><c> we</c><00:01:46.020><c> can</c><00:01:46.140><c> provide</c><00:01:46.380><c> it</c><00:01:46.530><c> with</c><00:01:46.560><c> a</c>

00:01:46.639 --> 00:01:46.649 align:start position:0%
comparison and we can provide it with a
 

00:01:46.649 --> 00:01:48.319 align:start position:0%
comparison and we can provide it with a
lambda<00:01:46.920><c> as</c><00:01:47.250><c> well</c><00:01:47.460><c> which</c><00:01:47.700><c> we'll</c><00:01:47.880><c> take</c><00:01:48.030><c> a</c><00:01:48.090><c> look</c>

00:01:48.319 --> 00:01:48.329 align:start position:0%
lambda as well which we'll take a look
 

00:01:48.329 --> 00:01:49.789 align:start position:0%
lambda as well which we'll take a look
at<00:01:48.479><c> it</c><00:01:48.810><c> doesn't</c><00:01:49.049><c> have</c><00:01:49.140><c> any</c><00:01:49.290><c> kind</c><00:01:49.439><c> of</c><00:01:49.530><c> return</c>

00:01:49.789 --> 00:01:49.799 align:start position:0%
at it doesn't have any kind of return
 

00:01:49.799 --> 00:01:51.679 align:start position:0%
at it doesn't have any kind of return
value<00:01:50.250><c> and</c><00:01:50.399><c> the</c><00:01:50.460><c> complexity</c><00:01:51.030><c> for</c><00:01:51.210><c> sorting</c><00:01:51.479><c> is</c>

00:01:51.679 --> 00:01:51.689 align:start position:0%
value and the complexity for sorting is
 

00:01:51.689 --> 00:01:54.469 align:start position:0%
value and the complexity for sorting is
n<00:01:51.899><c> times</c><00:01:52.200><c> log</c><00:01:52.530><c> n</c><00:01:52.710><c> which</c><00:01:53.009><c> is</c><00:01:53.130><c> fairly</c><00:01:53.610><c> good</c><00:01:53.759><c> so</c><00:01:54.420><c> if</c>

00:01:54.469 --> 00:01:54.479 align:start position:0%
n times log n which is fairly good so if
 

00:01:54.479 --> 00:01:55.999 align:start position:0%
n times log n which is fairly good so if
we<00:01:54.570><c> jump</c><00:01:54.810><c> back</c><00:01:54.840><c> here</c><00:01:55.290><c> into</c><00:01:55.530><c> our</c><00:01:55.649><c> source</c><00:01:55.950><c> code</c>

00:01:55.999 --> 00:01:56.009 align:start position:0%
we jump back here into our source code
 

00:01:56.009 --> 00:01:58.310 align:start position:0%
we jump back here into our source code
let's<00:01:56.399><c> take</c><00:01:56.579><c> a</c><00:01:56.610><c> look</c><00:01:56.790><c> at</c><00:01:56.909><c> a</c><00:01:56.939><c> basic</c><00:01:57.119><c> example</c><00:01:57.360><c> so</c>

00:01:58.310 --> 00:01:58.320 align:start position:0%
let's take a look at a basic example so
 

00:01:58.320 --> 00:01:59.330 align:start position:0%
let's take a look at a basic example so
what<00:01:58.439><c> I'll</c><00:01:58.530><c> do</c><00:01:58.649><c> here</c><00:01:58.829><c> is</c><00:01:58.890><c> I'll</c><00:01:58.979><c> create</c><00:01:59.189><c> a</c>

00:01:59.330 --> 00:01:59.340 align:start position:0%
what I'll do here is I'll create a
 

00:01:59.340 --> 00:02:00.859 align:start position:0%
what I'll do here is I'll create a
vector<00:01:59.549><c> it</c><00:01:59.909><c> could</c><00:02:00.090><c> be</c><00:02:00.210><c> an</c><00:02:00.299><c> array</c><00:02:00.540><c> doesn't</c>

00:02:00.859 --> 00:02:00.869 align:start position:0%
vector it could be an array doesn't
 

00:02:00.869 --> 00:02:02.899 align:start position:0%
vector it could be an array doesn't
really<00:02:01.020><c> matter</c><00:02:01.259><c> of</c><00:02:01.549><c> integers</c><00:02:02.549><c> I'll</c><00:02:02.759><c> call</c>

00:02:02.899 --> 00:02:02.909 align:start position:0%
really matter of integers I'll call
 

00:02:02.909 --> 00:02:04.670 align:start position:0%
really matter of integers I'll call
these<00:02:03.060><c> values</c><00:02:03.450><c> and</c><00:02:03.750><c> I'll</c><00:02:03.840><c> just</c><00:02:04.020><c> provide</c><00:02:04.200><c> some</c>

00:02:04.670 --> 00:02:04.680 align:start position:0%
these values and I'll just provide some
 

00:02:04.680 --> 00:02:07.219 align:start position:0%
these values and I'll just provide some
basic<00:02:04.829><c> values</c><00:02:05.490><c> let's</c><00:02:05.820><c> just</c><00:02:05.969><c> say</c><00:02:06.090><c> three</c><00:02:06.540><c> five</c>

00:02:07.219 --> 00:02:07.229 align:start position:0%
basic values let's just say three five
 

00:02:07.229 --> 00:02:10.820 align:start position:0%
basic values let's just say three five
one<00:02:07.680><c> four</c><00:02:08.550><c> two</c><00:02:09.030><c> okay</c><00:02:09.810><c> so</c><00:02:10.259><c> these</c><00:02:10.410><c> are</c><00:02:10.470><c> clearly</c>

00:02:10.820 --> 00:02:10.830 align:start position:0%
one four two okay so these are clearly
 

00:02:10.830 --> 00:02:11.809 align:start position:0%
one four two okay so these are clearly
not<00:02:11.039><c> in</c><00:02:11.280><c> order</c>

00:02:11.809 --> 00:02:11.819 align:start position:0%
not in order
 

00:02:11.819 --> 00:02:13.250 align:start position:0%
not in order
promoting<00:02:12.209><c> any</c><00:02:12.390><c> kind</c><00:02:12.659><c> of</c><00:02:12.689><c> water</c><00:02:12.930><c> they're</c><00:02:13.109><c> in</c><00:02:13.200><c> a</c>

00:02:13.250 --> 00:02:13.260 align:start position:0%
promoting any kind of water they're in a
 

00:02:13.260 --> 00:02:15.229 align:start position:0%
promoting any kind of water they're in a
bit<00:02:13.379><c> of</c><00:02:13.409><c> a</c><00:02:13.530><c> random</c><00:02:13.739><c> order</c><00:02:14.069><c> here</c><00:02:14.370><c> I'll</c><00:02:14.909><c> include</c>

00:02:15.229 --> 00:02:15.239 align:start position:0%
bit of a random order here I'll include
 

00:02:15.239 --> 00:02:17.690 align:start position:0%
bit of a random order here I'll include
vector<00:02:15.719><c> and</c><00:02:16.079><c> also</c><00:02:16.499><c> include</c><00:02:16.799><c> algorithms</c><00:02:17.519><c> that</c>

00:02:17.690 --> 00:02:17.700 align:start position:0%
vector and also include algorithms that
 

00:02:17.700 --> 00:02:20.330 align:start position:0%
vector and also include algorithms that
we<00:02:17.819><c> get</c><00:02:17.999><c> STDs</c><00:02:18.450><c> sort</c><00:02:18.689><c> and</c><00:02:19.079><c> what</c><00:02:19.950><c> I</c><00:02:19.980><c> want</c><00:02:20.189><c> to</c><00:02:20.249><c> do</c>

00:02:20.330 --> 00:02:20.340 align:start position:0%
we get STDs sort and what I want to do
 

00:02:20.340 --> 00:02:21.619 align:start position:0%
we get STDs sort and what I want to do
with<00:02:20.489><c> this</c><00:02:20.549><c> vector</c><00:02:20.760><c> now</c><00:02:21.030><c> is</c><00:02:21.180><c> I</c><00:02:21.239><c> want</c><00:02:21.389><c> to</c><00:02:21.450><c> sort</c>

00:02:21.619 --> 00:02:21.629 align:start position:0%
with this vector now is I want to sort
 

00:02:21.629 --> 00:02:23.179 align:start position:0%
with this vector now is I want to sort
this<00:02:21.840><c> in</c><00:02:22.109><c> ascending</c><00:02:22.409><c> order</c><00:02:22.680><c> so</c><00:02:22.889><c> they</c><00:02:22.980><c> go</c><00:02:23.069><c> from</c>

00:02:23.179 --> 00:02:23.189 align:start position:0%
this in ascending order so they go from
 

00:02:23.189 --> 00:02:24.860 align:start position:0%
this in ascending order so they go from
one<00:02:23.430><c> two</c><00:02:23.549><c> three</c><00:02:23.730><c> four</c><00:02:23.879><c> five</c><00:02:24.090><c> so</c><00:02:24.599><c> to</c><00:02:24.659><c> do</c><00:02:24.840><c> that</c>

00:02:24.860 --> 00:02:24.870 align:start position:0%
one two three four five so to do that
 

00:02:24.870 --> 00:02:26.750 align:start position:0%
one two three four five so to do that
what<00:02:25.290><c> I'll</c><00:02:25.409><c> do</c><00:02:25.530><c> is</c><00:02:25.650><c> I'll</c><00:02:25.769><c> just</c><00:02:25.799><c> type</c><00:02:26.069><c> in</c><00:02:26.219><c> STDs</c>

00:02:26.750 --> 00:02:26.760 align:start position:0%
what I'll do is I'll just type in STDs
 

00:02:26.760 --> 00:02:29.780 align:start position:0%
what I'll do is I'll just type in STDs
sort<00:02:27.060><c> I'll</c><00:02:27.510><c> pass</c><00:02:27.989><c> in</c><00:02:28.200><c> the</c><00:02:28.590><c> start</c><00:02:29.400><c> of</c><00:02:29.609><c> this</c>

00:02:29.780 --> 00:02:29.790 align:start position:0%
sort I'll pass in the start of this
 

00:02:29.790 --> 00:02:31.339 align:start position:0%
sort I'll pass in the start of this
vector<00:02:30.000><c> iterator</c><00:02:30.540><c> which</c><00:02:30.629><c> is</c><00:02:30.900><c> values</c><00:02:31.230><c> don't</c>

00:02:31.339 --> 00:02:31.349 align:start position:0%
vector iterator which is values don't
 

00:02:31.349 --> 00:02:34.459 align:start position:0%
vector iterator which is values don't
begin<00:02:31.709><c> the</c><00:02:32.280><c> end</c><00:02:32.489><c> wishes</c><00:02:33.150><c> values</c><00:02:33.510><c> or</c><00:02:33.689><c> end</c><00:02:33.930><c> so</c>

00:02:34.459 --> 00:02:34.469 align:start position:0%
begin the end wishes values or end so
 

00:02:34.469 --> 00:02:36.440 align:start position:0%
begin the end wishes values or end so
that<00:02:34.500><c> provides</c><00:02:34.920><c> it</c><00:02:35.069><c> with</c><00:02:35.099><c> a</c><00:02:35.219><c> range</c><00:02:35.579><c> and</c><00:02:35.939><c> they</c>

00:02:36.440 --> 00:02:36.450 align:start position:0%
that provides it with a range and they
 

00:02:36.450 --> 00:02:37.640 align:start position:0%
that provides it with a range and they
don't<00:02:36.719><c> I</c><00:02:36.840><c> need</c><00:02:36.989><c> to</c><00:02:37.079><c> provide</c><00:02:37.290><c> some</c><00:02:37.439><c> kind</c><00:02:37.560><c> of</c>

00:02:37.640 --> 00:02:37.650 align:start position:0%
don't I need to provide some kind of
 

00:02:37.650 --> 00:02:38.990 align:start position:0%
don't I need to provide some kind of
predicate<00:02:38.010><c> now</c><00:02:38.099><c> if</c><00:02:38.219><c> I</c><00:02:38.280><c> don't</c><00:02:38.459><c> provide</c><00:02:38.669><c> any</c>

00:02:38.990 --> 00:02:39.000 align:start position:0%
predicate now if I don't provide any
 

00:02:39.000 --> 00:02:40.520 align:start position:0%
predicate now if I don't provide any
kind<00:02:39.299><c> of</c><00:02:39.419><c> predicate</c><00:02:39.870><c> so</c><00:02:40.019><c> best</c><00:02:40.200><c> I</c><00:02:40.349><c> don't</c>

00:02:40.520 --> 00:02:40.530 align:start position:0%
kind of predicate so best I don't
 

00:02:40.530 --> 00:02:42.409 align:start position:0%
kind of predicate so best I don't
provide<00:02:40.709><c> it</c><00:02:40.859><c> with</c><00:02:41.010><c> a</c><00:02:41.189><c> function</c><00:02:41.760><c> for</c><00:02:42.209><c> it</c><00:02:42.329><c> to</c>

00:02:42.409 --> 00:02:42.419 align:start position:0%
provide it with a function for it to
 

00:02:42.419 --> 00:02:44.330 align:start position:0%
provide it with a function for it to
perform<00:02:42.689><c> this</c><00:02:42.900><c> sorting</c><00:02:43.290><c> it</c><00:02:43.680><c> will</c><00:02:43.919><c> just</c><00:02:44.129><c> sort</c>

00:02:44.330 --> 00:02:44.340 align:start position:0%
perform this sorting it will just sort
 

00:02:44.340 --> 00:02:46.309 align:start position:0%
perform this sorting it will just sort
it<00:02:44.489><c> in</c><00:02:44.700><c> ascending</c><00:02:45.150><c> order</c><00:02:45.540><c> in</c><00:02:45.840><c> the</c><00:02:45.959><c> case</c><00:02:46.139><c> of</c>

00:02:46.309 --> 00:02:46.319 align:start position:0%
it in ascending order in the case of
 

00:02:46.319 --> 00:02:48.020 align:start position:0%
it in ascending order in the case of
integers<00:02:46.590><c> here</c><00:02:46.980><c> so</c><00:02:47.340><c> in</c><00:02:47.430><c> other</c><00:02:47.519><c> words</c><00:02:47.730><c> if</c><00:02:47.849><c> I</c><00:02:47.939><c> was</c>

00:02:48.020 --> 00:02:48.030 align:start position:0%
integers here so in other words if I was
 

00:02:48.030 --> 00:02:49.640 align:start position:0%
integers here so in other words if I was
a<00:02:48.090><c> princess</c><00:02:48.450><c> to</c><00:02:48.689><c> the</c><00:02:48.780><c> console</c><00:02:49.200><c> after</c><00:02:49.560><c> the</c>

00:02:49.640 --> 00:02:49.650 align:start position:0%
a princess to the console after the
 

00:02:49.650 --> 00:02:51.619 align:start position:0%
a princess to the console after the
sorting<00:02:49.949><c> happens</c><00:02:50.370><c> I'll</c><00:02:50.549><c> say</c><00:02:50.730><c> for</c><00:02:51.000><c> unit</c><00:02:51.239><c> value</c>

00:02:51.619 --> 00:02:51.629 align:start position:0%
sorting happens I'll say for unit value
 

00:02:51.629 --> 00:02:55.610 align:start position:0%
sorting happens I'll say for unit value
inside<00:02:52.469><c> values</c><00:02:52.980><c> let's</c><00:02:53.699><c> do</c><00:02:53.909><c> a</c><00:02:53.939><c> CBC</c><00:02:54.359><c> out</c><00:02:54.900><c> the</c>

00:02:55.610 --> 00:02:55.620 align:start position:0%
inside values let's do a CBC out the
 

00:02:55.620 --> 00:02:58.939 align:start position:0%
inside values let's do a CBC out the
value<00:02:56.010><c> just</c><00:02:56.459><c> like</c><00:02:56.669><c> that</c><00:02:57.049><c> at</c><00:02:58.049><c> five</c><00:02:58.439><c> then</c><00:02:58.829><c> you'll</c>

00:02:58.939 --> 00:02:58.949 align:start position:0%
value just like that at five then you'll
 

00:02:58.949 --> 00:03:01.250 align:start position:0%
value just like that at five then you'll
see<00:02:59.129><c> I</c><00:02:59.159><c> get</c><00:02:59.549><c> a</c><00:02:59.579><c> perfectly</c><00:02:59.969><c> sorted</c><00:03:00.329><c> list</c><00:03:00.599><c> if</c><00:03:01.109><c> I</c>

00:03:01.250 --> 00:03:01.260 align:start position:0%
see I get a perfectly sorted list if I
 

00:03:01.260 --> 00:03:02.869 align:start position:0%
see I get a perfectly sorted list if I
do<00:03:01.319><c> want</c><00:03:01.620><c> to</c><00:03:01.680><c> provide</c><00:03:01.919><c> some</c><00:03:02.250><c> kind</c><00:03:02.519><c> of</c><00:03:02.609><c> a</c><00:03:02.730><c> way</c>

00:03:02.869 --> 00:03:02.879 align:start position:0%
do want to provide some kind of a way
 

00:03:02.879 --> 00:03:05.179 align:start position:0%
do want to provide some kind of a way
for<00:03:02.909><c> it</c><00:03:03.299><c> to</c><00:03:03.329><c> sort</c><00:03:03.689><c> I</c><00:03:03.900><c> can</c><00:03:04.139><c> do</c><00:03:04.319><c> that</c><00:03:04.500><c> by</c><00:03:04.769><c> passing</c>

00:03:05.179 --> 00:03:05.189 align:start position:0%
for it to sort I can do that by passing
 

00:03:05.189 --> 00:03:06.740 align:start position:0%
for it to sort I can do that by passing
in<00:03:05.310><c> a</c><00:03:05.519><c> function</c><00:03:05.969><c> and</c><00:03:06.090><c> this</c><00:03:06.150><c> can</c><00:03:06.389><c> be</c><00:03:06.540><c> either</c>

00:03:06.740 --> 00:03:06.750 align:start position:0%
in a function and this can be either
 

00:03:06.750 --> 00:03:08.750 align:start position:0%
in a function and this can be either
literally<00:03:07.349><c> a</c><00:03:07.379><c> function</c><00:03:07.919><c> inside</c><00:03:08.069><c> like</c><00:03:08.519><c> a</c>

00:03:08.750 --> 00:03:08.760 align:start position:0%
literally a function inside like a
 

00:03:08.760 --> 00:03:11.270 align:start position:0%
literally a function inside like a
stroke<00:03:09.180><c> that</c><00:03:09.209><c> you</c><00:03:09.449><c> do</c><00:03:10.049><c> you</c><00:03:10.169><c> make</c><00:03:10.409><c> or</c><00:03:10.650><c> it</c><00:03:11.040><c> can</c><00:03:11.159><c> be</c>

00:03:11.270 --> 00:03:11.280 align:start position:0%
stroke that you do you make or it can be
 

00:03:11.280 --> 00:03:12.589 align:start position:0%
stroke that you do you make or it can be
a<00:03:11.310><c> lambda</c><00:03:11.549><c> so</c><00:03:11.939><c> there</c><00:03:12.090><c> are</c><00:03:12.209><c> quite</c><00:03:12.449><c> a</c><00:03:12.510><c> few</c>

00:03:12.589 --> 00:03:12.599 align:start position:0%
a lambda so there are quite a few
 

00:03:12.599 --> 00:03:14.750 align:start position:0%
a lambda so there are quite a few
built-in<00:03:13.169><c> ones</c><00:03:13.409><c> as</c><00:03:13.590><c> well</c><00:03:13.769><c> if</c><00:03:13.889><c> I</c><00:03:14.040><c> go</c><00:03:14.219><c> to</c><00:03:14.280><c> include</c>

00:03:14.750 --> 00:03:14.760 align:start position:0%
built-in ones as well if I go to include
 

00:03:14.760 --> 00:03:17.899 align:start position:0%
built-in ones as well if I go to include
functional<00:03:15.419><c> I</c><00:03:15.659><c> can</c><00:03:16.530><c> use</c><00:03:16.680><c> something</c><00:03:16.919><c> like</c><00:03:17.099><c> STD</c>

00:03:17.899 --> 00:03:17.909 align:start position:0%
functional I can use something like STD
 

00:03:17.909 --> 00:03:18.319 align:start position:0%
functional I can use something like STD
Breda

00:03:18.319 --> 00:03:18.329 align:start position:0%
Breda
 

00:03:18.329 --> 00:03:21.490 align:start position:0%
Breda
for<00:03:18.780><c> example</c><00:03:19.229><c> with</c><00:03:19.560><c> ant</c><00:03:19.829><c> just</c><00:03:20.819><c> like</c><00:03:21.000><c> that</c>

00:03:21.490 --> 00:03:21.500 align:start position:0%
for example with ant just like that
 

00:03:21.500 --> 00:03:23.929 align:start position:0%
for example with ant just like that
if<00:03:22.500><c> I</c><00:03:22.680><c> can</c><00:03:22.769><c> hit</c><00:03:22.859><c> that</c><00:03:22.889><c> five</c><00:03:23.159><c> this</c><00:03:23.370><c> will</c><00:03:23.549><c> sort</c><00:03:23.819><c> it</c>

00:03:23.929 --> 00:03:23.939 align:start position:0%
if I can hit that five this will sort it
 

00:03:23.939 --> 00:03:26.689 align:start position:0%
if I can hit that five this will sort it
based<00:03:24.180><c> on</c><00:03:24.389><c> the</c><00:03:24.659><c> greater</c><00:03:24.900><c> value</c><00:03:25.489><c> so</c><00:03:26.489><c> you</c><00:03:26.549><c> can</c>

00:03:26.689 --> 00:03:26.699 align:start position:0%
based on the greater value so you can
 

00:03:26.699 --> 00:03:28.219 align:start position:0%
based on the greater value so you can
see<00:03:26.819><c> that</c><00:03:26.939><c> I</c><00:03:27.030><c> get</c><00:03:27.090><c> five</c><00:03:27.389><c> four</c><00:03:27.569><c> three</c><00:03:27.599><c> two</c><00:03:27.870><c> one</c>

00:03:28.219 --> 00:03:28.229 align:start position:0%
see that I get five four three two one
 

00:03:28.229 --> 00:03:30.740 align:start position:0%
see that I get five four three two one
and<00:03:28.409><c> finally</c><00:03:29.280><c> I'll</c><00:03:29.609><c> write</c><00:03:30.090><c> a</c><00:03:30.120><c> lambda</c><00:03:30.359><c> as</c><00:03:30.569><c> well</c>

00:03:30.740 --> 00:03:30.750 align:start position:0%
and finally I'll write a lambda as well
 

00:03:30.750 --> 00:03:33.110 align:start position:0%
and finally I'll write a lambda as well
so<00:03:31.169><c> I'll</c><00:03:31.739><c> get</c><00:03:31.949><c> rid</c><00:03:32.040><c> of</c><00:03:32.129><c> this</c><00:03:32.310><c> and</c><00:03:32.669><c> I'll</c><00:03:32.970><c> just</c>

00:03:33.110 --> 00:03:33.120 align:start position:0%
so I'll get rid of this and I'll just
 

00:03:33.120 --> 00:03:35.809 align:start position:0%
so I'll get rid of this and I'll just
have<00:03:33.299><c> a</c><00:03:33.329><c> normal</c><00:03:33.509><c> lambda</c><00:03:34.019><c> in</c><00:03:34.259><c> a</c><00:03:34.620><c> into</c><00:03:35.069><c> B</c><00:03:35.250><c> and</c>

00:03:35.809 --> 00:03:35.819 align:start position:0%
have a normal lambda in a into B and
 

00:03:35.819 --> 00:03:38.270 align:start position:0%
have a normal lambda in a into B and
then<00:03:36.689><c> I'll</c><00:03:37.139><c> explain</c><00:03:37.500><c> this</c><00:03:37.650><c> a</c><00:03:37.709><c> bit</c><00:03:37.799><c> so</c><00:03:38.099><c> it's</c>

00:03:38.270 --> 00:03:38.280 align:start position:0%
then I'll explain this a bit so it's
 

00:03:38.280 --> 00:03:40.399 align:start position:0%
then I'll explain this a bit so it's
either<00:03:38.400><c> C</c><00:03:38.790><c> I'm</c><00:03:39.299><c> basically</c><00:03:39.659><c> just</c><00:03:39.750><c> providing</c><00:03:40.290><c> it</c>

00:03:40.399 --> 00:03:40.409 align:start position:0%
either C I'm basically just providing it
 

00:03:40.409 --> 00:03:41.809 align:start position:0%
either C I'm basically just providing it
with<00:03:40.530><c> a</c><00:03:40.560><c> function</c><00:03:40.859><c> that</c><00:03:41.040><c> it's</c><00:03:41.250><c> going</c><00:03:41.400><c> to</c><00:03:41.489><c> use</c>

00:03:41.809 --> 00:03:41.819 align:start position:0%
with a function that it's going to use
 

00:03:41.819 --> 00:03:44.509 align:start position:0%
with a function that it's going to use
to<00:03:42.120><c> sort</c><00:03:42.509><c> these</c><00:03:42.959><c> values</c><00:03:43.439><c> now</c><00:03:44.009><c> based</c><00:03:44.250><c> on</c><00:03:44.400><c> the</c>

00:03:44.509 --> 00:03:44.519 align:start position:0%
to sort these values now based on the
 

00:03:44.519 --> 00:03:46.969 align:start position:0%
to sort these values now based on the
documentation<00:03:45.139><c> you</c><00:03:46.139><c> can</c><00:03:46.169><c> see</c><00:03:46.470><c> that</c><00:03:46.590><c> this</c><00:03:46.709><c> this</c>

00:03:46.969 --> 00:03:46.979 align:start position:0%
documentation you can see that this this
 

00:03:46.979 --> 00:03:49.699 align:start position:0%
documentation you can see that this this
comparison<00:03:47.579><c> function</c><00:03:47.759><c> returns</c><00:03:48.389><c> a</c><00:03:48.540><c> bool</c><00:03:48.780><c> so</c>

00:03:49.699 --> 00:03:49.709 align:start position:0%
comparison function returns a bool so
 

00:03:49.709 --> 00:03:53.119 align:start position:0%
comparison function returns a bool so
true<00:03:50.009><c> or</c><00:03:50.040><c> false</c><00:03:50.280><c> and</c><00:03:50.669><c> it</c><00:03:51.569><c> returns</c><00:03:52.049><c> true</c><00:03:52.620><c> if</c><00:03:52.859><c> the</c>

00:03:53.119 --> 00:03:53.129 align:start position:0%
true or false and it returns true if the
 

00:03:53.129 --> 00:03:54.979 align:start position:0%
true or false and it returns true if the
first<00:03:53.400><c> argument</c><00:03:53.609><c> so</c><00:03:54.389><c> that</c><00:03:54.540><c> is</c><00:03:54.629><c> the</c><00:03:54.780><c> first</c>

00:03:54.979 --> 00:03:54.989 align:start position:0%
first argument so that is the first
 

00:03:54.989 --> 00:03:56.809 align:start position:0%
first argument so that is the first
argument<00:03:55.229><c> that</c><00:03:55.799><c> we</c><00:03:55.919><c> pass</c><00:03:56.189><c> in</c><00:03:56.430><c> here</c><00:03:56.579><c> into</c><00:03:56.729><c> the</c>

00:03:56.809 --> 00:03:56.819 align:start position:0%
argument that we pass in here into the
 

00:03:56.819 --> 00:03:59.390 align:start position:0%
argument that we pass in here into the
parameter<00:03:57.269><c> is</c><00:03:57.509><c> less</c><00:03:57.959><c> than</c><00:03:58.259><c> so</c><00:03:58.799><c> is</c><00:03:59.069><c> ordered</c>

00:03:59.390 --> 00:03:59.400 align:start position:0%
parameter is less than so is ordered
 

00:03:59.400 --> 00:04:01.729 align:start position:0%
parameter is less than so is ordered
before<00:03:59.519><c> the</c><00:04:00.269><c> second</c><00:04:00.750><c> so</c><00:04:01.079><c> basically</c><00:04:01.469><c> what</c><00:04:01.709><c> that</c>

00:04:01.729 --> 00:04:01.739 align:start position:0%
before the second so basically what that
 

00:04:01.739 --> 00:04:04.879 align:start position:0%
before the second so basically what that
means<00:04:02.129><c> is</c><00:04:02.519><c> that</c><00:04:02.549><c> if</c><00:04:03.540><c> we</c><00:04:03.840><c> give</c><00:04:04.019><c> it</c><00:04:04.139><c> two</c><00:04:04.319><c> values</c><00:04:04.709><c> a</c>

00:04:04.879 --> 00:04:04.889 align:start position:0%
means is that if we give it two values a
 

00:04:04.889 --> 00:04:07.069 align:start position:0%
means is that if we give it two values a
and<00:04:04.949><c> B</c><00:04:05.310><c> which</c><00:04:05.790><c> one</c><00:04:06.030><c> of</c><00:04:06.060><c> these</c><00:04:06.299><c> should</c><00:04:06.840><c> appear</c>

00:04:07.069 --> 00:04:07.079 align:start position:0%
and B which one of these should appear
 

00:04:07.079 --> 00:04:09.740 align:start position:0%
and B which one of these should appear
first<00:04:07.409><c> in</c><00:04:07.680><c> the</c><00:04:07.799><c> list</c><00:04:08.329><c> that's</c><00:04:09.329><c> kind</c><00:04:09.569><c> of</c><00:04:09.599><c> what</c>

00:04:09.740 --> 00:04:09.750 align:start position:0%
first in the list that's kind of what
 

00:04:09.750 --> 00:04:11.689 align:start position:0%
first in the list that's kind of what
we're<00:04:09.870><c> trying</c><00:04:10.019><c> to</c><00:04:10.109><c> determine</c><00:04:10.530><c> here</c><00:04:10.859><c> and</c><00:04:11.069><c> if</c><00:04:11.669><c> we</c>

00:04:11.689 --> 00:04:11.699 align:start position:0%
we're trying to determine here and if we
 

00:04:11.699 --> 00:04:14.240 align:start position:0%
we're trying to determine here and if we
return<00:04:12.209><c> true</c><00:04:12.509><c> it</c><00:04:12.930><c> means</c><00:04:13.319><c> that</c><00:04:13.560><c> a</c><00:04:13.680><c> will</c><00:04:14.219><c> be</c>

00:04:14.240 --> 00:04:14.250 align:start position:0%
return true it means that a will be
 

00:04:14.250 --> 00:04:16.909 align:start position:0%
return true it means that a will be
ordered<00:04:14.729><c> before</c><00:04:15.209><c> B</c><00:04:15.629><c> whereas</c><00:04:16.109><c> if</c><00:04:16.500><c> we</c><00:04:16.530><c> return</c>

00:04:16.909 --> 00:04:16.919 align:start position:0%
ordered before B whereas if we return
 

00:04:16.919 --> 00:04:19.099 align:start position:0%
ordered before B whereas if we return
false<00:04:17.219><c> then</c><00:04:17.549><c> they</c><00:04:17.699><c> will</c><00:04:17.849><c> be</c><00:04:17.969><c> before</c><00:04:18.419><c> a</c><00:04:18.449><c> so</c><00:04:18.930><c> as</c><00:04:19.079><c> a</c>

00:04:19.099 --> 00:04:19.109 align:start position:0%
false then they will be before a so as a
 

00:04:19.109 --> 00:04:20.930 align:start position:0%
false then they will be before a so as a
basic<00:04:19.530><c> example</c><00:04:19.650><c> let's</c><00:04:20.159><c> just</c><00:04:20.370><c> let</c><00:04:20.549><c> it</c><00:04:20.669><c> sort</c>

00:04:20.930 --> 00:04:20.940 align:start position:0%
basic example let's just let it sort
 

00:04:20.940 --> 00:04:21.830 align:start position:0%
basic example let's just let it sort
this<00:04:21.090><c> you</c><00:04:21.299><c> know</c><00:04:21.419><c> in</c><00:04:21.599><c> a</c>

00:04:21.830 --> 00:04:21.840 align:start position:0%
this you know in a
 

00:04:21.840 --> 00:04:23.900 align:start position:0%
this you know in a
in<00:04:22.019><c> order</c><00:04:22.260><c> from</c><00:04:22.440><c> one</c><00:04:22.650><c> to</c><00:04:22.830><c> five</c><00:04:23.340><c> so</c><00:04:23.699><c> what</c><00:04:23.820><c> I'll</c>

00:04:23.900 --> 00:04:23.910 align:start position:0%
in order from one to five so what I'll
 

00:04:23.910 --> 00:04:26.300 align:start position:0%
in order from one to five so what I'll
do<00:04:24.000><c> here</c><00:04:24.030><c> is</c><00:04:24.300><c> I'll</c><00:04:24.449><c> simply</c><00:04:24.780><c> say</c><00:04:24.990><c> return</c><00:04:25.440><c> a</c><00:04:25.740><c> less</c>

00:04:26.300 --> 00:04:26.310 align:start position:0%
do here is I'll simply say return a less
 

00:04:26.310 --> 00:04:29.240 align:start position:0%
do here is I'll simply say return a less
than<00:04:26.340><c> B</c><00:04:26.550><c> so</c><00:04:27.240><c> if</c><00:04:27.389><c> a</c><00:04:27.510><c> is</c><00:04:27.960><c> less</c><00:04:28.139><c> than</c><00:04:28.199><c> B</c><00:04:28.560><c> we'll</c><00:04:28.980><c> sort</c>

00:04:29.240 --> 00:04:29.250 align:start position:0%
than B so if a is less than B we'll sort
 

00:04:29.250 --> 00:04:30.590 align:start position:0%
than B so if a is less than B we'll sort
it<00:04:29.340><c> to</c><00:04:29.430><c> the</c><00:04:29.520><c> front</c><00:04:29.790><c> of</c><00:04:30.000><c> the</c><00:04:30.120><c> list</c>

00:04:30.590 --> 00:04:30.600 align:start position:0%
it to the front of the list
 

00:04:30.600 --> 00:04:32.210 align:start position:0%
it to the front of the list
let's<00:04:30.810><c> hit</c><00:04:30.930><c> at</c><00:04:31.050><c> five</c><00:04:31.260><c> and</c><00:04:31.470><c> you</c><00:04:31.620><c> can</c><00:04:31.770><c> see</c><00:04:31.889><c> that</c><00:04:32.070><c> I</c>

00:04:32.210 --> 00:04:32.220 align:start position:0%
let's hit at five and you can see that I
 

00:04:32.220 --> 00:04:34.010 align:start position:0%
let's hit at five and you can see that I
get<00:04:32.370><c> the</c><00:04:32.430><c> same</c><00:04:32.610><c> result</c><00:04:32.910><c> as</c><00:04:33.060><c> we</c><00:04:33.360><c> had</c><00:04:33.479><c> before</c><00:04:33.600><c> and</c>

00:04:34.010 --> 00:04:34.020 align:start position:0%
get the same result as we had before and
 

00:04:34.020 --> 00:04:36.020 align:start position:0%
get the same result as we had before and
if<00:04:34.350><c> I</c><00:04:34.470><c> reverse</c><00:04:34.770><c> this</c><00:04:35.010><c> and</c><00:04:35.070><c> obviously</c><00:04:35.850><c> it's</c>

00:04:36.020 --> 00:04:36.030 align:start position:0%
if I reverse this and obviously it's
 

00:04:36.030 --> 00:04:37.460 align:start position:0%
if I reverse this and obviously it's
going<00:04:36.180><c> to</c><00:04:36.300><c> sort</c><00:04:36.810><c> it</c><00:04:36.870><c> the</c><00:04:36.990><c> other</c><00:04:37.110><c> way</c><00:04:37.260><c> around</c>

00:04:37.460 --> 00:04:37.470 align:start position:0%
going to sort it the other way around
 

00:04:37.470 --> 00:04:39.680 align:start position:0%
going to sort it the other way around
where<00:04:38.280><c> if</c><00:04:38.400><c> a</c><00:04:38.610><c> is</c><00:04:38.669><c> greater</c><00:04:39.000><c> than</c><00:04:39.060><c> B</c><00:04:39.180><c> it's</c><00:04:39.479><c> going</c>

00:04:39.680 --> 00:04:39.690 align:start position:0%
where if a is greater than B it's going
 

00:04:39.690 --> 00:04:41.180 align:start position:0%
where if a is greater than B it's going
to<00:04:39.750><c> fall</c><00:04:39.900><c> to</c><00:04:39.930><c> the</c><00:04:40.139><c> front</c><00:04:40.380><c> which</c><00:04:40.680><c> means</c><00:04:40.919><c> that</c>

00:04:41.180 --> 00:04:41.190 align:start position:0%
to fall to the front which means that
 

00:04:41.190 --> 00:04:42.710 align:start position:0%
to fall to the front which means that
the<00:04:41.400><c> bigger</c><00:04:41.669><c> values</c><00:04:42.000><c> get</c><00:04:42.240><c> sorted</c><00:04:42.570><c> to</c><00:04:42.660><c> the</c>

00:04:42.710 --> 00:04:42.720 align:start position:0%
the bigger values get sorted to the
 

00:04:42.720 --> 00:04:44.570 align:start position:0%
the bigger values get sorted to the
front<00:04:42.960><c> and</c><00:04:43.229><c> then</c><00:04:43.889><c> let's</c><00:04:44.100><c> just</c><00:04:44.220><c> do</c><00:04:44.340><c> something</c>

00:04:44.570 --> 00:04:44.580 align:start position:0%
front and then let's just do something
 

00:04:44.580 --> 00:04:46.010 align:start position:0%
front and then let's just do something
for<00:04:44.669><c> fun</c><00:04:44.880><c> let's</c><00:04:45.180><c> just</c><00:04:45.300><c> make</c><00:04:45.419><c> it</c><00:04:45.540><c> so</c><00:04:45.630><c> that</c><00:04:45.780><c> one</c>

00:04:46.010 --> 00:04:46.020 align:start position:0%
for fun let's just make it so that one
 

00:04:46.020 --> 00:04:47.930 align:start position:0%
for fun let's just make it so that one
goes<00:04:46.050><c> to</c><00:04:46.290><c> the</c><00:04:46.560><c> very</c><00:04:46.680><c> end</c><00:04:47.040><c> I</c><00:04:47.430><c> think</c><00:04:47.699><c> this</c>

00:04:47.930 --> 00:04:47.940 align:start position:0%
goes to the very end I think this
 

00:04:47.940 --> 00:04:49.640 align:start position:0%
goes to the very end I think this
demonstrates<00:04:48.090><c> the</c><00:04:48.570><c> predicate</c><00:04:49.320><c> pretty</c><00:04:49.470><c> well</c>

00:04:49.640 --> 00:04:49.650 align:start position:0%
demonstrates the predicate pretty well
 

00:04:49.650 --> 00:04:52.969 align:start position:0%
demonstrates the predicate pretty well
as<00:04:49.740><c> well</c><00:04:49.889><c> so</c><00:04:50.490><c> if</c><00:04:50.580><c> we</c><00:04:50.729><c> say</c><00:04:50.910><c> if</c><00:04:51.180><c> a</c><00:04:51.570><c> is</c><00:04:52.080><c> one</c><00:04:52.440><c> what</c><00:04:52.919><c> do</c>

00:04:52.969 --> 00:04:52.979 align:start position:0%
as well so if we say if a is one what do
 

00:04:52.979 --> 00:04:55.280 align:start position:0%
as well so if we say if a is one what do
we<00:04:53.040><c> want</c><00:04:53.190><c> to</c><00:04:53.250><c> do</c><00:04:53.370><c> well</c><00:04:53.970><c> if</c><00:04:54.270><c> a</c><00:04:54.540><c> is</c><00:04:54.630><c> currently</c><00:04:55.229><c> the</c>

00:04:55.280 --> 00:04:55.290 align:start position:0%
we want to do well if a is currently the
 

00:04:55.290 --> 00:04:57.080 align:start position:0%
we want to do well if a is currently the
first<00:04:55.500><c> value</c><00:04:56.010><c> we</c><00:04:56.250><c> want</c><00:04:56.370><c> to</c><00:04:56.550><c> move</c><00:04:56.700><c> to</c><00:04:56.820><c> the</c><00:04:56.910><c> back</c>

00:04:57.080 --> 00:04:57.090 align:start position:0%
first value we want to move to the back
 

00:04:57.090 --> 00:04:58.879 align:start position:0%
first value we want to move to the back
of<00:04:57.300><c> the</c><00:04:57.389><c> list</c><00:04:57.600><c> so</c><00:04:58.050><c> in</c><00:04:58.260><c> other</c><00:04:58.350><c> words</c><00:04:58.590><c> we</c><00:04:58.680><c> want</c><00:04:58.860><c> to</c>

00:04:58.879 --> 00:04:58.889 align:start position:0%
of the list so in other words we want to
 

00:04:58.889 --> 00:05:01.250 align:start position:0%
of the list so in other words we want to
return<00:04:59.160><c> false</c><00:04:59.460><c> because</c><00:05:00.210><c> we</c><00:05:00.510><c> don't</c><00:05:00.780><c> want</c><00:05:01.050><c> it</c><00:05:01.139><c> to</c>

00:05:01.250 --> 00:05:01.260 align:start position:0%
return false because we don't want it to
 

00:05:01.260 --> 00:05:05.420 align:start position:0%
return false because we don't want it to
be<00:05:01.440><c> ordered</c><00:05:02.010><c> before</c><00:05:02.220><c> B</c><00:05:02.760><c> however</c><00:05:03.540><c> if</c><00:05:04.110><c> B</c><00:05:04.680><c> is</c><00:05:05.070><c> one</c>

00:05:05.420 --> 00:05:05.430 align:start position:0%
be ordered before B however if B is one
 

00:05:05.430 --> 00:05:07.760 align:start position:0%
be ordered before B however if B is one
then<00:05:05.910><c> we</c><00:05:06.030><c> want</c><00:05:06.240><c> a</c><00:05:06.389><c> to</c><00:05:07.050><c> actually</c><00:05:07.229><c> move</c><00:05:07.530><c> to</c><00:05:07.680><c> the</c>

00:05:07.760 --> 00:05:07.770 align:start position:0%
then we want a to actually move to the
 

00:05:07.770 --> 00:05:09.170 align:start position:0%
then we want a to actually move to the
final<00:05:07.919><c> list</c><00:05:08.280><c> and</c><00:05:08.550><c> the</c><00:05:08.610><c> way</c><00:05:08.729><c> that</c><00:05:08.850><c> we</c><00:05:08.940><c> do</c><00:05:09.060><c> that</c>

00:05:09.170 --> 00:05:09.180 align:start position:0%
final list and the way that we do that
 

00:05:09.180 --> 00:05:10.129 align:start position:0%
final list and the way that we do that
is<00:05:09.360><c> we</c><00:05:09.510><c> return</c><00:05:09.810><c> true</c>

00:05:10.129 --> 00:05:10.139 align:start position:0%
is we return true
 

00:05:10.139 --> 00:05:12.890 align:start position:0%
is we return true
because<00:05:10.650><c> if</c><00:05:10.770><c> we</c><00:05:10.919><c> return</c><00:05:11.220><c> true</c><00:05:11.520><c> it</c><00:05:12.270><c> means</c><00:05:12.570><c> that</c>

00:05:12.890 --> 00:05:12.900 align:start position:0%
because if we return true it means that
 

00:05:12.900 --> 00:05:15.409 align:start position:0%
because if we return true it means that
move<00:05:13.110><c> a</c><00:05:13.350><c> to</c><00:05:13.919><c> the</c><00:05:14.039><c> front</c><00:05:14.250><c> of</c><00:05:14.310><c> the</c><00:05:14.400><c> list</c><00:05:14.580><c> right</c><00:05:15.030><c> so</c>

00:05:15.409 --> 00:05:15.419 align:start position:0%
move a to the front of the list right so
 

00:05:15.419 --> 00:05:17.090 align:start position:0%
move a to the front of the list right so
if<00:05:15.479><c> I</c><00:05:15.570><c> change</c><00:05:15.720><c> this</c><00:05:15.990><c> back</c><00:05:16.350><c> to</c><00:05:16.380><c> what</c><00:05:16.650><c> it</c><00:05:16.770><c> was</c><00:05:16.889><c> so</c>

00:05:17.090 --> 00:05:17.100 align:start position:0%
if I change this back to what it was so
 

00:05:17.100 --> 00:05:19.159 align:start position:0%
if I change this back to what it was so
that<00:05:17.130><c> we</c><00:05:17.310><c> still</c><00:05:17.490><c> have</c><00:05:17.610><c> a</c><00:05:17.760><c> before</c><00:05:18.270><c> B</c><00:05:18.450><c> and</c><00:05:18.870><c> I</c><00:05:18.990><c> hit</c>

00:05:19.159 --> 00:05:19.169 align:start position:0%
that we still have a before B and I hit
 

00:05:19.169 --> 00:05:21.260 align:start position:0%
that we still have a before B and I hit
f5<00:05:19.500><c> you</c><00:05:20.039><c> can</c><00:05:20.160><c> see</c><00:05:20.310><c> that</c><00:05:20.460><c> we</c><00:05:20.550><c> get</c><00:05:20.760><c> our</c><00:05:20.910><c> list</c><00:05:21.150><c> in</c>

00:05:21.260 --> 00:05:21.270 align:start position:0%
f5 you can see that we get our list in
 

00:05:21.270 --> 00:05:22.939 align:start position:0%
f5 you can see that we get our list in
ascending<00:05:21.539><c> order</c><00:05:21.810><c> except</c><00:05:22.169><c> for</c><00:05:22.320><c> one</c><00:05:22.530><c> which</c><00:05:22.560><c> is</c>

00:05:22.939 --> 00:05:22.949 align:start position:0%
ascending order except for one which is
 

00:05:22.949 --> 00:05:24.710 align:start position:0%
ascending order except for one which is
at<00:05:23.160><c> the</c><00:05:23.340><c> end</c><00:05:23.580><c> so</c><00:05:24.000><c> anyway</c><00:05:24.210><c> that</c><00:05:24.389><c> was</c><00:05:24.479><c> a</c><00:05:24.539><c> pretty</c>

00:05:24.710 --> 00:05:24.720 align:start position:0%
at the end so anyway that was a pretty
 

00:05:24.720 --> 00:05:26.390 align:start position:0%
at the end so anyway that was a pretty
basic<00:05:24.960><c> and</c><00:05:25.289><c> quick</c><00:05:25.440><c> example</c><00:05:25.919><c> of</c><00:05:26.039><c> how</c><00:05:26.100><c> to</c><00:05:26.280><c> use</c>

00:05:26.390 --> 00:05:26.400 align:start position:0%
basic and quick example of how to use
 

00:05:26.400 --> 00:05:28.310 align:start position:0%
basic and quick example of how to use
SUV<00:05:26.940><c> sort</c><00:05:27.210><c> and</c><00:05:27.419><c> sorting</c><00:05:27.720><c> a</c><00:05:27.780><c> simple</c><00:05:28.080><c> plus</c><00:05:28.200><c> in</c>

00:05:28.310 --> 00:05:28.320 align:start position:0%
SUV sort and sorting a simple plus in
 

00:05:28.320 --> 00:05:30.980 align:start position:0%
SUV sort and sorting a simple plus in
general<00:05:28.680><c> sorting</c><00:05:29.460><c> is</c><00:05:29.910><c> of</c><00:05:30.120><c> course</c><00:05:30.360><c> very</c><00:05:30.600><c> useful</c>

00:05:30.980 --> 00:05:30.990 align:start position:0%
general sorting is of course very useful
 

00:05:30.990 --> 00:05:32.540 align:start position:0%
general sorting is of course very useful
you<00:05:31.020><c> can</c><00:05:31.169><c> do</c><00:05:31.289><c> this</c><00:05:31.380><c> with</c><00:05:31.530><c> all</c><00:05:31.740><c> types</c><00:05:32.100><c> doesn't</c>

00:05:32.540 --> 00:05:32.550 align:start position:0%
you can do this with all types doesn't
 

00:05:32.550 --> 00:05:34.340 align:start position:0%
you can do this with all types doesn't
have<00:05:32.700><c> to</c><00:05:32.880><c> be</c><00:05:33.030><c> integers</c><00:05:33.419><c> integers</c><00:05:33.900><c> that</c><00:05:34.229><c> are</c>

00:05:34.340 --> 00:05:34.350 align:start position:0%
have to be integers integers that are
 

00:05:34.350 --> 00:05:35.840 align:start position:0%
have to be integers integers that are
just<00:05:34.500><c> really</c><00:05:34.650><c> easy</c><00:05:34.800><c> to</c><00:05:35.039><c> show</c><00:05:35.250><c> because</c><00:05:35.639><c> they're</c>

00:05:35.840 --> 00:05:35.850 align:start position:0%
just really easy to show because they're
 

00:05:35.850 --> 00:05:37.909 align:start position:0%
just really easy to show because they're
literally<00:05:36.150><c> numbers</c><00:05:36.600><c> and</c><00:05:36.780><c> we</c><00:05:36.870><c> kind</c><00:05:37.110><c> of</c><00:05:37.200><c> I</c><00:05:37.410><c> used</c>

00:05:37.909 --> 00:05:37.919 align:start position:0%
literally numbers and we kind of I used
 

00:05:37.919 --> 00:05:39.830 align:start position:0%
literally numbers and we kind of I used
to<00:05:38.039><c> sing</c><00:05:38.250><c> them</c><00:05:38.430><c> in</c><00:05:38.639><c> a</c><00:05:38.789><c> particular</c><00:05:38.940><c> order</c><00:05:39.300><c> you</c>

00:05:39.830 --> 00:05:39.840 align:start position:0%
to sing them in a particular order you
 

00:05:39.840 --> 00:05:41.510 align:start position:0%
to sing them in a particular order you
can<00:05:40.260><c> do</c><00:05:40.349><c> this</c><00:05:40.470><c> with</c><00:05:40.620><c> strings</c><00:05:40.950><c> you</c><00:05:41.130><c> can</c><00:05:41.190><c> do</c><00:05:41.370><c> this</c>

00:05:41.510 --> 00:05:41.520 align:start position:0%
can do this with strings you can do this
 

00:05:41.520 --> 00:05:43.550 align:start position:0%
can do this with strings you can do this
with<00:05:41.669><c> this</c><00:05:42.060><c> with</c><00:05:42.240><c> custom</c><00:05:42.599><c> classes</c><00:05:43.080><c> that's</c>

00:05:43.550 --> 00:05:43.560 align:start position:0%
with this with custom classes that's
 

00:05:43.560 --> 00:05:44.779 align:start position:0%
with this with custom classes that's
what<00:05:43.740><c> this</c><00:05:43.830><c> predicate</c><00:05:44.160><c> here</c><00:05:44.430><c> this</c><00:05:44.580><c> lambda</c>

00:05:44.779 --> 00:05:44.789 align:start position:0%
what this predicate here this lambda
 

00:05:44.789 --> 00:05:46.279 align:start position:0%
what this predicate here this lambda
that<00:05:45.030><c> we</c><00:05:45.090><c> could</c><00:05:45.240><c> supply</c><00:05:45.419><c> is</c><00:05:45.539><c> so</c><00:05:45.960><c> useful</c>

00:05:46.279 --> 00:05:46.289 align:start position:0%
that we could supply is so useful
 

00:05:46.289 --> 00:05:48.230 align:start position:0%
that we could supply is so useful
because<00:05:46.560><c> that</c><00:05:47.039><c> means</c><00:05:47.280><c> that</c><00:05:47.490><c> we</c><00:05:47.700><c> can</c><00:05:47.910><c> set</c><00:05:48.090><c> the</c>

00:05:48.230 --> 00:05:48.240 align:start position:0%
because that means that we can set the
 

00:05:48.240 --> 00:05:50.360 align:start position:0%
because that means that we can set the
rules<00:05:48.479><c> and</c><00:05:48.780><c> it</c><00:05:49.289><c> doesn't</c><00:05:49.560><c> rely</c><00:05:49.889><c> on</c><00:05:49.919><c> only</c>

00:05:50.360 --> 00:05:50.370 align:start position:0%
rules and it doesn't rely on only
 

00:05:50.370 --> 00:05:51.950 align:start position:0%
rules and it doesn't rely on only
working<00:05:50.789><c> on</c><00:05:50.849><c> inbuilt</c><00:05:51.330><c> types</c><00:05:51.599><c> or</c><00:05:51.810><c> anything</c>

00:05:51.950 --> 00:05:51.960 align:start position:0%
working on inbuilt types or anything
 

00:05:51.960 --> 00:05:54.219 align:start position:0%
working on inbuilt types or anything
like<00:05:52.110><c> that</c><00:05:52.229><c> we</c><00:05:52.560><c> can</c><00:05:52.710><c> use</c><00:05:52.830><c> this</c><00:05:52.919><c> with</c><00:05:53.099><c> anything</c>

00:05:54.219 --> 00:05:54.229 align:start position:0%
like that we can use this with anything
 

00:05:54.229 --> 00:05:56.390 align:start position:0%
like that we can use this with anything
finally<00:05:55.229><c> we</c><00:05:55.410><c> have</c><00:05:55.530><c> a</c><00:05:55.560><c> bit</c><00:05:55.740><c> of</c><00:05:55.830><c> a</c><00:05:55.889><c> quick</c><00:05:56.070><c> video</c>

00:05:56.390 --> 00:05:56.400 align:start position:0%
finally we have a bit of a quick video
 

00:05:56.400 --> 00:05:57.770 align:start position:0%
finally we have a bit of a quick video
if<00:05:56.580><c> you're</c><00:05:56.700><c> trying</c><00:05:56.880><c> to</c><00:05:56.940><c> do</c><00:05:57.030><c> these</c><00:05:57.150><c> for</c><00:05:57.360><c> ages</c>

00:05:57.770 --> 00:05:57.780 align:start position:0%
if you're trying to do these for ages
 

00:05:57.780 --> 00:05:59.629 align:start position:0%
if you're trying to do these for ages
and<00:05:57.960><c> we</c><00:05:58.020><c> end</c><00:05:58.260><c> up</c><00:05:58.410><c> just</c><00:05:58.470><c> making</c><00:05:58.830><c> in</c><00:05:58.979><c> 58</c><00:05:59.370><c> 20</c>

00:05:59.629 --> 00:05:59.639 align:start position:0%
and we end up just making in 58 20
 

00:05:59.639 --> 00:06:02.300 align:start position:0%
and we end up just making in 58 20
minutes<00:05:59.849><c> long</c><00:06:00.000><c> but</c><00:06:00.720><c> anyway</c><00:06:01.320><c> sorting</c><00:06:01.919><c> really</c>

00:06:02.300 --> 00:06:02.310 align:start position:0%
minutes long but anyway sorting really
 

00:06:02.310 --> 00:06:03.350 align:start position:0%
minutes long but anyway sorting really
useful<00:06:02.639><c> let</c><00:06:02.820><c> me</c><00:06:02.880><c> know</c><00:06:02.940><c> what</c><00:06:03.030><c> you</c><00:06:03.120><c> can</c><00:06:03.240><c> give</c>

00:06:03.350 --> 00:06:03.360 align:start position:0%
useful let me know what you can give
 

00:06:03.360 --> 00:06:05.089 align:start position:0%
useful let me know what you can give
this<00:06:03.539><c> if</c><00:06:03.720><c> you</c><00:06:03.840><c> have</c><00:06:03.990><c> another</c><00:06:04.260><c> way</c><00:06:04.530><c> or</c><00:06:04.740><c> other</c>

00:06:05.089 --> 00:06:05.099 align:start position:0%
this if you have another way or other
 

00:06:05.099 --> 00:06:06.830 align:start position:0%
this if you have another way or other
kind<00:06:05.639><c> of</c><00:06:05.700><c> scenarios</c><00:06:06.120><c> in</c><00:06:06.240><c> which</c><00:06:06.360><c> this</c><00:06:06.510><c> stuff</c><00:06:06.720><c> is</c>

00:06:06.830 --> 00:06:06.840 align:start position:0%
kind of scenarios in which this stuff is
 

00:06:06.840 --> 00:06:08.180 align:start position:0%
kind of scenarios in which this stuff is
useful<00:06:07.050><c> and</c><00:06:07.349><c> some</c><00:06:07.560><c> predators</c><00:06:08.010><c> that</c><00:06:08.039><c> might</c>

00:06:08.180 --> 00:06:08.190 align:start position:0%
useful and some predators that might
 

00:06:08.190 --> 00:06:09.920 align:start position:0%
useful and some predators that might
work<00:06:08.490><c> really</c><00:06:08.550><c> well</c><00:06:08.910><c> then</c><00:06:09.539><c> just</c><00:06:09.750><c> leave</c><00:06:09.900><c> a</c>

00:06:09.920 --> 00:06:09.930 align:start position:0%
work really well then just leave a
 

00:06:09.930 --> 00:06:11.210 align:start position:0%
work really well then just leave a
comment<00:06:10.169><c> below</c><00:06:10.349><c> and</c><00:06:10.500><c> we</c><00:06:10.650><c> can</c><00:06:10.680><c> kind</c><00:06:11.070><c> of</c><00:06:11.099><c> talk</c>

00:06:11.210 --> 00:06:11.220 align:start position:0%
comment below and we can kind of talk
 

00:06:11.220 --> 00:06:13.070 align:start position:0%
comment below and we can kind of talk
about<00:06:11.280><c> it</c><00:06:11.520><c> I</c><00:06:11.760><c> hope</c><00:06:12.599><c> you</c><00:06:12.660><c> guys</c><00:06:12.780><c> enjoyed</c><00:06:13.020><c> the</c>

00:06:13.070 --> 00:06:13.080 align:start position:0%
about it I hope you guys enjoyed the
 

00:06:13.080 --> 00:06:14.150 align:start position:0%
about it I hope you guys enjoyed the
video<00:06:13.200><c> if</c><00:06:13.380><c> you</c><00:06:13.470><c> did</c><00:06:13.560><c> you</c><00:06:13.740><c> can</c><00:06:13.860><c> hit</c><00:06:13.919><c> the</c><00:06:14.039><c> like</c>

00:06:14.150 --> 00:06:14.160 align:start position:0%
video if you did you can hit the like
 

00:06:14.160 --> 00:06:15.650 align:start position:0%
video if you did you can hit the like
button<00:06:14.520><c> you</c><00:06:14.610><c> can</c><00:06:14.729><c> also</c><00:06:14.849><c> have</c><00:06:15.030><c> support</c><00:06:15.330><c> series</c>

00:06:15.650 --> 00:06:15.660 align:start position:0%
button you can also have support series
 

00:06:15.660 --> 00:06:16.909 align:start position:0%
button you can also have support series
by<00:06:15.780><c> going</c><00:06:15.990><c> to</c><00:06:16.050><c> patreon</c><00:06:16.349><c> I'll</c><00:06:16.440><c> come</c><00:06:16.560><c> for</c><00:06:16.710><c> such</c>

00:06:16.909 --> 00:06:16.919 align:start position:0%
by going to patreon I'll come for such
 

00:06:16.919 --> 00:06:18.890 align:start position:0%
by going to patreon I'll come for such
the<00:06:17.039><c> cherokees</c><00:06:17.550><c> thank</c><00:06:17.820><c> you</c><00:06:17.970><c> as</c><00:06:18.120><c> always</c><00:06:18.419><c> to</c><00:06:18.630><c> all</c>

00:06:18.890 --> 00:06:18.900 align:start position:0%
the cherokees thank you as always to all
 

00:06:18.900 --> 00:06:20.600 align:start position:0%
the cherokees thank you as always to all
the<00:06:19.440><c> lovely</c><00:06:19.710><c> people</c><00:06:19.740><c> who</c><00:06:20.160><c> helped</c><00:06:20.340><c> support</c>

00:06:20.600 --> 00:06:20.610 align:start position:0%
the lovely people who helped support
 

00:06:20.610 --> 00:06:23.240 align:start position:0%
the lovely people who helped support
this<00:06:20.820><c> series</c><00:06:21.150><c> and</c><00:06:21.360><c> make</c><00:06:21.570><c> it</c><00:06:21.690><c> possible</c><00:06:22.229><c> I</c><00:06:22.530><c> will</c>

00:06:23.240 --> 00:06:23.250 align:start position:0%
this series and make it possible I will
 

00:06:23.250 --> 00:06:26.250 align:start position:0%
this series and make it possible I will
see<00:06:23.520><c> you</c><00:06:23.610><c> guys</c><00:06:23.700><c> in</c><00:06:24.000><c> the</c><00:06:24.150><c> next</c><00:06:24.240><c> video</c><00:06:24.450><c> goodbye</c>

00:06:26.250 --> 00:06:26.260 align:start position:0%
see you guys in the next video goodbye
 

00:06:26.260 --> 00:06:41.439 align:start position:0%
see you guys in the next video goodbye
[Music]

