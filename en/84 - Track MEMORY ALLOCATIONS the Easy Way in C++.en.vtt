WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.730 align:start position:0%
 
and<00:00:00.149><c> so</c><00:00:00.269><c> guys</c><00:00:00.450><c> my</c><00:00:00.719><c> name</c><00:00:00.840><c> is</c><00:00:00.900><c> Ana</c><00:00:01.230><c> and</c><00:00:01.319><c> welcome</c>

00:00:01.730 --> 00:00:01.740 align:start position:0%
and so guys my name is Ana and welcome
 

00:00:01.740 --> 00:00:03.919 align:start position:0%
and so guys my name is Ana and welcome
back<00:00:01.770><c> to</c><00:00:02.129><c> my</c><00:00:02.220><c> say</c><00:00:02.399><c> boss</c><00:00:02.550><c> boss</c><00:00:02.730><c> series</c><00:00:03.210><c> so</c><00:00:03.750><c> today</c>

00:00:03.919 --> 00:00:03.929 align:start position:0%
back to my say boss boss series so today
 

00:00:03.929 --> 00:00:05.210 align:start position:0%
back to my say boss boss series so today
I'm<00:00:03.990><c> gonna</c><00:00:04.080><c> be</c><00:00:04.230><c> talking</c><00:00:04.380><c> a</c><00:00:04.710><c> little</c><00:00:04.830><c> bit</c><00:00:05.009><c> more</c>

00:00:05.210 --> 00:00:05.220 align:start position:0%
I'm gonna be talking a little bit more
 

00:00:05.220 --> 00:00:07.970 align:start position:0%
I'm gonna be talking a little bit more
about<00:00:05.580><c> memory</c><00:00:06.210><c> and</c><00:00:06.270><c> specifically</c><00:00:07.080><c> how</c><00:00:07.649><c> we</c><00:00:07.710><c> can</c>

00:00:07.970 --> 00:00:07.980 align:start position:0%
about memory and specifically how we can
 

00:00:07.980 --> 00:00:10.640 align:start position:0%
about memory and specifically how we can
track<00:00:08.340><c> allocation</c><00:00:09.269><c> and</c><00:00:09.480><c> the</c><00:00:09.870><c> allocation</c><00:00:10.260><c> of</c>

00:00:10.640 --> 00:00:10.650 align:start position:0%
track allocation and the allocation of
 

00:00:10.650 --> 00:00:12.709 align:start position:0%
track allocation and the allocation of
memory<00:00:10.980><c> now</c><00:00:11.490><c> the</c><00:00:11.550><c> thing</c><00:00:11.790><c> about</c><00:00:11.820><c> memory</c><00:00:12.450><c> is</c>

00:00:12.709 --> 00:00:12.719 align:start position:0%
memory now the thing about memory is
 

00:00:12.719 --> 00:00:15.440 align:start position:0%
memory now the thing about memory is
that<00:00:12.929><c> it's</c><00:00:13.429><c> important</c><00:00:14.429><c> I'm</c><00:00:14.849><c> gonna</c><00:00:15.150><c> keep</c>

00:00:15.440 --> 00:00:15.450 align:start position:0%
that it's important I'm gonna keep
 

00:00:15.450 --> 00:00:17.330 align:start position:0%
that it's important I'm gonna keep
talking<00:00:15.690><c> about</c><00:00:16.109><c> memory</c><00:00:16.470><c> probably</c><00:00:17.160><c> forever</c>

00:00:17.330 --> 00:00:17.340 align:start position:0%
talking about memory probably forever
 

00:00:17.340 --> 00:00:18.980 align:start position:0%
talking about memory probably forever
because<00:00:17.940><c> that's</c><00:00:18.270><c> how</c><00:00:18.480><c> computers</c><00:00:18.960><c> work</c>

00:00:18.980 --> 00:00:18.990 align:start position:0%
because that's how computers work
 

00:00:18.990 --> 00:00:21.380 align:start position:0%
because that's how computers work
computers<00:00:19.680><c> are</c><00:00:19.770><c> very</c><00:00:19.920><c> very</c><00:00:20.580><c> closely</c><00:00:20.820><c> tied</c><00:00:21.210><c> in</c>

00:00:21.380 --> 00:00:21.390 align:start position:0%
computers are very very closely tied in
 

00:00:21.390 --> 00:00:23.269 align:start position:0%
computers are very very closely tied in
with<00:00:21.480><c> memory</c><00:00:21.900><c> if</c><00:00:21.990><c> you</c><00:00:22.080><c> just</c><00:00:22.260><c> have</c><00:00:22.410><c> a</c><00:00:22.439><c> CPU</c><00:00:22.890><c> and</c>

00:00:23.269 --> 00:00:23.279 align:start position:0%
with memory if you just have a CPU and
 

00:00:23.279 --> 00:00:25.370 align:start position:0%
with memory if you just have a CPU and
you<00:00:23.910><c> don't</c><00:00:24.150><c> have</c><00:00:24.359><c> any</c><00:00:24.660><c> RAM</c><00:00:24.960><c> you</c><00:00:25.140><c> don't</c><00:00:25.289><c> have</c>

00:00:25.370 --> 00:00:25.380 align:start position:0%
you don't have any RAM you don't have
 

00:00:25.380 --> 00:00:27.470 align:start position:0%
you don't have any RAM you don't have
any<00:00:25.529><c> memory</c><00:00:25.830><c> then</c><00:00:26.099><c> nothing</c><00:00:26.609><c> really</c><00:00:26.910><c> is</c><00:00:27.180><c> going</c>

00:00:27.470 --> 00:00:27.480 align:start position:0%
any memory then nothing really is going
 

00:00:27.480 --> 00:00:29.210 align:start position:0%
any memory then nothing really is going
to<00:00:27.660><c> happen</c><00:00:28.170><c> and</c><00:00:28.320><c> because</c><00:00:28.769><c> it's</c><00:00:28.980><c> such</c><00:00:29.189><c> a</c>

00:00:29.210 --> 00:00:29.220 align:start position:0%
to happen and because it's such a
 

00:00:29.220 --> 00:00:31.429 align:start position:0%
to happen and because it's such a
popular<00:00:29.580><c> topic</c><00:00:30.090><c> for</c><00:00:30.480><c> discussion</c><00:00:30.599><c> a</c><00:00:31.199><c> lot</c><00:00:31.380><c> of</c>

00:00:31.429 --> 00:00:31.439 align:start position:0%
popular topic for discussion a lot of
 

00:00:31.439 --> 00:00:33.650 align:start position:0%
popular topic for discussion a lot of
people<00:00:31.769><c> sometimes</c><00:00:32.250><c> have</c><00:00:32.669><c> the</c><00:00:33.030><c> wrong</c><00:00:33.210><c> idea</c>

00:00:33.650 --> 00:00:33.660 align:start position:0%
people sometimes have the wrong idea
 

00:00:33.660 --> 00:00:36.350 align:start position:0%
people sometimes have the wrong idea
about<00:00:33.750><c> memory</c><00:00:34.649><c> and</c><00:00:34.860><c> I</c><00:00:35.340><c> think</c><00:00:35.550><c> this</c><00:00:35.820><c> is</c><00:00:35.969><c> further</c>

00:00:36.350 --> 00:00:36.360 align:start position:0%
about memory and I think this is further
 

00:00:36.360 --> 00:00:38.930 align:start position:0%
about memory and I think this is further
complicated<00:00:36.750><c> by</c><00:00:37.200><c> the</c><00:00:37.260><c> fact</c><00:00:37.559><c> that</c><00:00:37.710><c> it's</c><00:00:38.070><c> 2020</c>

00:00:38.930 --> 00:00:38.940 align:start position:0%
complicated by the fact that it's 2020
 

00:00:38.940 --> 00:00:41.810 align:start position:0%
complicated by the fact that it's 2020
we<00:00:39.480><c> don't</c><00:00:39.719><c> really</c><00:00:40.170><c> have</c><00:00:40.590><c> that</c><00:00:41.160><c> big</c><00:00:41.520><c> of</c><00:00:41.550><c> an</c>

00:00:41.810 --> 00:00:41.820 align:start position:0%
we don't really have that big of an
 

00:00:41.820 --> 00:00:43.760 align:start position:0%
we don't really have that big of an
issue<00:00:42.059><c> with</c><00:00:42.450><c> memory</c><00:00:42.809><c> like</c><00:00:43.050><c> we</c><00:00:43.200><c> did</c><00:00:43.379><c> 20</c><00:00:43.739><c> years</c>

00:00:43.760 --> 00:00:43.770 align:start position:0%
issue with memory like we did 20 years
 

00:00:43.770 --> 00:00:44.299 align:start position:0%
issue with memory like we did 20 years
ago

00:00:44.299 --> 00:00:44.309 align:start position:0%
ago
 

00:00:44.309 --> 00:00:46.340 align:start position:0%
ago
we<00:00:44.789><c> have</c><00:00:45.000><c> gigabytes</c><00:00:45.329><c> and</c><00:00:45.750><c> gigabytes</c><00:00:45.809><c> of</c>

00:00:46.340 --> 00:00:46.350 align:start position:0%
we have gigabytes and gigabytes of
 

00:00:46.350 --> 00:00:48.319 align:start position:0%
we have gigabytes and gigabytes of
memory<00:00:46.410><c> I</c><00:00:46.770><c> have</c><00:00:47.010><c> like</c><00:00:47.190><c> 32</c><00:00:47.550><c> gigabytes</c><00:00:48.059><c> in</c><00:00:48.210><c> my</c>

00:00:48.319 --> 00:00:48.329 align:start position:0%
memory I have like 32 gigabytes in my
 

00:00:48.329 --> 00:00:50.690 align:start position:0%
memory I have like 32 gigabytes in my
computer<00:00:48.629><c> most</c><00:00:48.989><c> laptops</c><00:00:49.469><c> come</c><00:00:49.739><c> with</c><00:00:49.770><c> like</c><00:00:50.430><c> 8</c>

00:00:50.690 --> 00:00:50.700 align:start position:0%
computer most laptops come with like 8
 

00:00:50.700 --> 00:00:53.600 align:start position:0%
computer most laptops come with like 8
or<00:00:50.879><c> 16</c><00:00:51.300><c> gigabytes</c><00:00:51.690><c> of</c><00:00:51.809><c> memory</c><00:00:52.370><c> it's</c><00:00:53.370><c> kind</c><00:00:53.579><c> of</c>

00:00:53.600 --> 00:00:53.610 align:start position:0%
or 16 gigabytes of memory it's kind of
 

00:00:53.610 --> 00:00:55.310 align:start position:0%
or 16 gigabytes of memory it's kind of
difficult<00:00:53.820><c> to</c><00:00:54.090><c> write</c><00:00:54.270><c> a</c><00:00:54.300><c> C++</c><00:00:54.510><c> program</c><00:00:54.809><c> that's</c>

00:00:55.310 --> 00:00:55.320 align:start position:0%
difficult to write a C++ program that's
 

00:00:55.320 --> 00:00:57.799 align:start position:0%
difficult to write a C++ program that's
gonna<00:00:55.410><c> use</c><00:00:55.710><c> that</c><00:00:56.190><c> amount</c><00:00:56.489><c> or</c><00:00:56.789><c> more</c><00:00:56.820><c> I</c><00:00:57.300><c> mean</c><00:00:57.600><c> not</c>

00:00:57.799 --> 00:00:57.809 align:start position:0%
gonna use that amount or more I mean not
 

00:00:57.809 --> 00:00:59.569 align:start position:0%
gonna use that amount or more I mean not
that<00:00:58.410><c> difficult</c><00:00:58.620><c> and</c><00:00:58.949><c> definitely</c><00:00:59.250><c> depends</c><00:00:59.489><c> on</c>

00:00:59.569 --> 00:00:59.579 align:start position:0%
that difficult and definitely depends on
 

00:00:59.579 --> 00:01:03.020 align:start position:0%
that difficult and definitely depends on
what<00:00:59.730><c> you're</c><00:00:59.850><c> doing</c><00:00:59.879><c> but</c><00:01:00.480><c> it's</c><00:01:01.079><c> still</c><00:01:02.030><c> hello</c>

00:01:03.020 --> 00:01:03.030 align:start position:0%
what you're doing but it's still hello
 

00:01:03.030 --> 00:01:04.850 align:start position:0%
what you're doing but it's still hello
world<00:01:03.359><c> is</c><00:01:03.510><c> not</c><00:01:03.660><c> gonna</c><00:01:03.780><c> use</c><00:01:04.080><c> too</c><00:01:04.320><c> much</c><00:01:04.409><c> memory</c>

00:01:04.850 --> 00:01:04.860 align:start position:0%
world is not gonna use too much memory
 

00:01:04.860 --> 00:01:06.590 align:start position:0%
world is not gonna use too much memory
so<00:01:05.100><c> anyway</c><00:01:05.400><c> my</c><00:01:05.549><c> point</c><00:01:05.850><c> with</c><00:01:06.000><c> all</c><00:01:06.119><c> of</c><00:01:06.210><c> this</c><00:01:06.360><c> is</c>

00:01:06.590 --> 00:01:06.600 align:start position:0%
so anyway my point with all of this is
 

00:01:06.600 --> 00:01:08.990 align:start position:0%
so anyway my point with all of this is
that<00:01:06.900><c> sometimes</c><00:01:07.380><c> it's</c><00:01:07.680><c> useful</c><00:01:07.920><c> to</c><00:01:08.159><c> know</c><00:01:08.430><c> when</c>

00:01:08.990 --> 00:01:09.000 align:start position:0%
that sometimes it's useful to know when
 

00:01:09.000 --> 00:01:10.670 align:start position:0%
that sometimes it's useful to know when
your<00:01:09.450><c> program</c><00:01:09.689><c> allocates</c><00:01:10.409><c> memory</c>

00:01:10.670 --> 00:01:10.680 align:start position:0%
your program allocates memory
 

00:01:10.680 --> 00:01:12.410 align:start position:0%
your program allocates memory
specifically<00:01:11.369><c> on</c><00:01:11.490><c> the</c><00:01:11.610><c> heap</c><00:01:11.850><c> of</c><00:01:12.000><c> course</c><00:01:12.240><c> is</c>

00:01:12.410 --> 00:01:12.420 align:start position:0%
specifically on the heap of course is
 

00:01:12.420 --> 00:01:13.820 align:start position:0%
specifically on the heap of course is
what<00:01:12.570><c> we're</c><00:01:12.720><c> talking</c><00:01:13.080><c> about</c><00:01:13.140><c> if</c><00:01:13.530><c> you</c><00:01:13.710><c> know</c>

00:01:13.820 --> 00:01:13.830 align:start position:0%
what we're talking about if you know
 

00:01:13.830 --> 00:01:15.980 align:start position:0%
what we're talking about if you know
where<00:01:14.100><c> your</c><00:01:14.250><c> program</c><00:01:14.670><c> allocates</c><00:01:14.909><c> memory</c><00:01:15.450><c> you</c>

00:01:15.980 --> 00:01:15.990 align:start position:0%
where your program allocates memory you
 

00:01:15.990 --> 00:01:18.320 align:start position:0%
where your program allocates memory you
can<00:01:16.200><c> potentially</c><00:01:16.740><c> work</c><00:01:17.100><c> to</c><00:01:17.549><c> reduce</c><00:01:17.790><c> it</c>

00:01:18.320 --> 00:01:18.330 align:start position:0%
can potentially work to reduce it
 

00:01:18.330 --> 00:01:21.109 align:start position:0%
can potentially work to reduce it
therefore<00:01:19.080><c> potentially</c><00:01:19.970><c> optimizing</c><00:01:20.970><c> your</c>

00:01:21.109 --> 00:01:21.119 align:start position:0%
therefore potentially optimizing your
 

00:01:21.119 --> 00:01:23.539 align:start position:0%
therefore potentially optimizing your
program<00:01:21.659><c> and</c><00:01:21.810><c> making</c><00:01:22.110><c> it</c><00:01:22.229><c> run</c><00:01:22.409><c> faster</c><00:01:22.650><c> because</c>

00:01:23.539 --> 00:01:23.549 align:start position:0%
program and making it run faster because
 

00:01:23.549 --> 00:01:25.940 align:start position:0%
program and making it run faster because
allocating<00:01:24.060><c> memory</c><00:01:24.180><c> on</c><00:01:24.509><c> the</c><00:01:24.630><c> heap</c><00:01:24.659><c> is</c><00:01:25.049><c> is</c><00:01:25.710><c> not</c>

00:01:25.940 --> 00:01:25.950 align:start position:0%
allocating memory on the heap is is not
 

00:01:25.950 --> 00:01:27.530 align:start position:0%
allocating memory on the heap is is not
the<00:01:26.070><c> best</c><00:01:26.280><c> thing</c><00:01:26.460><c> to</c><00:01:26.490><c> do</c><00:01:26.820><c> especially</c><00:01:27.270><c> in</c>

00:01:27.530 --> 00:01:27.540 align:start position:0%
the best thing to do especially in
 

00:01:27.540 --> 00:01:29.630 align:start position:0%
the best thing to do especially in
performance<00:01:27.990><c> critical</c><00:01:28.409><c> code</c><00:01:28.619><c> on</c><00:01:28.920><c> top</c><00:01:28.979><c> of</c><00:01:29.430><c> that</c>

00:01:29.630 --> 00:01:29.640 align:start position:0%
performance critical code on top of that
 

00:01:29.640 --> 00:01:31.760 align:start position:0%
performance critical code on top of that
being<00:01:30.119><c> able</c><00:01:30.329><c> to</c><00:01:30.509><c> see</c><00:01:30.840><c> where</c><00:01:31.110><c> memory</c><00:01:31.560><c> is</c><00:01:31.590><c> being</c>

00:01:31.760 --> 00:01:31.770 align:start position:0%
being able to see where memory is being
 

00:01:31.770 --> 00:01:34.069 align:start position:0%
being able to see where memory is being
allocated<00:01:32.040><c> can</c><00:01:32.670><c> also</c><00:01:32.970><c> help</c><00:01:33.329><c> you</c><00:01:33.540><c> discover</c><00:01:33.990><c> a</c>

00:01:34.069 --> 00:01:34.079 align:start position:0%
allocated can also help you discover a
 

00:01:34.079 --> 00:01:35.899 align:start position:0%
allocated can also help you discover a
little<00:01:34.259><c> bit</c><00:01:34.500><c> more</c><00:01:34.710><c> about</c><00:01:34.979><c> how</c><00:01:35.220><c> your</c><00:01:35.460><c> program</c>

00:01:35.899 --> 00:01:35.909 align:start position:0%
little bit more about how your program
 

00:01:35.909 --> 00:01:38.630 align:start position:0%
little bit more about how your program
works<00:01:36.570><c> even</c><00:01:36.930><c> if</c><00:01:37.259><c> you</c><00:01:37.500><c> wrote</c><00:01:37.829><c> all</c><00:01:38.100><c> of</c><00:01:38.159><c> the</c><00:01:38.460><c> code</c>

00:01:38.630 --> 00:01:38.640 align:start position:0%
works even if you wrote all of the code
 

00:01:38.640 --> 00:01:40.730 align:start position:0%
works even if you wrote all of the code
that<00:01:38.850><c> you're</c><00:01:38.970><c> currently</c><00:01:39.329><c> running</c><00:01:39.570><c> and</c><00:01:39.930><c> we</c>

00:01:40.730 --> 00:01:40.740 align:start position:0%
that you're currently running and we
 

00:01:40.740 --> 00:01:42.469 align:start position:0%
that you're currently running and we
just<00:01:40.920><c> like</c><00:01:41.130><c> forget</c><00:01:41.549><c> about</c><00:01:41.700><c> this</c><00:01:41.939><c> if</c><00:01:42.090><c> I</c><00:01:42.150><c> lost</c><00:01:42.360><c> on</c>

00:01:42.469 --> 00:01:42.479 align:start position:0%
just like forget about this if I lost on
 

00:01:42.479 --> 00:01:44.060 align:start position:0%
just like forget about this if I lost on
a<00:01:42.509><c> library</c><00:01:42.930><c> LSU</c><00:01:43.170><c> saves</c><00:01:43.380><c> all</c><00:01:43.560><c> of</c><00:01:43.649><c> your</c><00:01:43.829><c> code</c>

00:01:44.060 --> 00:01:44.070 align:start position:0%
a library LSU saves all of your code
 

00:01:44.070 --> 00:01:46.429 align:start position:0%
a library LSU saves all of your code
looking<00:01:44.970><c> over</c><00:01:45.299><c> a</c><00:01:45.329><c> life</c><00:01:45.570><c> project</c><00:01:45.869><c> that</c><00:01:46.229><c> you</c><00:01:46.290><c> may</c>

00:01:46.429 --> 00:01:46.439 align:start position:0%
looking over a life project that you may
 

00:01:46.439 --> 00:01:48.020 align:start position:0%
looking over a life project that you may
have<00:01:46.560><c> been</c><00:01:46.710><c> working</c><00:01:47.040><c> on</c><00:01:47.159><c> for</c><00:01:47.399><c> a</c><00:01:47.430><c> while</c><00:01:47.729><c> and</c>

00:01:48.020 --> 00:01:48.030 align:start position:0%
have been working on for a while and
 

00:01:48.030 --> 00:01:50.690 align:start position:0%
have been working on for a while and
being<00:01:48.270><c> able</c><00:01:48.420><c> to</c><00:01:48.600><c> see</c><00:01:48.930><c> okay</c><00:01:49.590><c> you</c><00:01:50.399><c> know</c><00:01:50.520><c> my</c>

00:01:50.690 --> 00:01:50.700 align:start position:0%
being able to see okay you know my
 

00:01:50.700 --> 00:01:52.219 align:start position:0%
being able to see okay you know my
program<00:01:51.060><c> allocates</c><00:01:51.210><c> memory</c><00:01:51.600><c> here</c><00:01:51.960><c> I</c><00:01:51.990><c> forgot</c>

00:01:52.219 --> 00:01:52.229 align:start position:0%
program allocates memory here I forgot
 

00:01:52.229 --> 00:01:53.960 align:start position:0%
program allocates memory here I forgot
about<00:01:52.590><c> that</c><00:01:52.649><c> well</c><00:01:53.280><c> that</c><00:01:53.430><c> was</c><00:01:53.579><c> something</c><00:01:53.759><c> that</c>

00:01:53.960 --> 00:01:53.970 align:start position:0%
about that well that was something that
 

00:01:53.970 --> 00:01:56.480 align:start position:0%
about that well that was something that
was<00:01:54.240><c> from</c><00:01:54.509><c> a</c><00:01:54.689><c> long</c><00:01:54.930><c> time</c><00:01:55.200><c> ago</c><00:01:55.259><c> that's</c><00:01:56.189><c> useful</c>

00:01:56.480 --> 00:01:56.490 align:start position:0%
was from a long time ago that's useful
 

00:01:56.490 --> 00:01:57.270 align:start position:0%
was from a long time ago that's useful
information

00:01:57.270 --> 00:01:57.280 align:start position:0%
information
 

00:01:57.280 --> 00:01:58.770 align:start position:0%
information
and<00:01:57.400><c> we're</c><00:01:57.640><c> going</c><00:01:57.760><c> to</c><00:01:57.790><c> talk</c><00:01:58.000><c> about</c><00:01:58.030><c> how</c><00:01:58.479><c> we</c><00:01:58.540><c> can</c>

00:01:58.770 --> 00:01:58.780 align:start position:0%
and we're going to talk about how we can
 

00:01:58.780 --> 00:02:01.140 align:start position:0%
and we're going to talk about how we can
see<00:01:59.020><c> exactly</c><00:01:59.320><c> where</c><00:02:00.070><c> each</c><00:02:00.310><c> allocation</c><00:02:00.640><c> comes</c>

00:02:01.140 --> 00:02:01.150 align:start position:0%
see exactly where each allocation comes
 

00:02:01.150 --> 00:02:03.180 align:start position:0%
see exactly where each allocation comes
from<00:02:01.450><c> as</c><00:02:01.570><c> well</c><00:02:01.720><c> as</c><00:02:01.810><c> track</c><00:02:02.140><c> the</c><00:02:02.320><c> overall</c><00:02:02.680><c> usage</c>

00:02:03.180 --> 00:02:03.190 align:start position:0%
from as well as track the overall usage
 

00:02:03.190 --> 00:02:05.999 align:start position:0%
from as well as track the overall usage
of<00:02:03.400><c> memory</c><00:02:03.760><c> inside</c><00:02:04.299><c> our</c><00:02:04.570><c> application</c><00:02:05.409><c> by</c><00:02:05.680><c> just</c>

00:02:05.999 --> 00:02:06.009 align:start position:0%
of memory inside our application by just
 

00:02:06.009 --> 00:02:07.920 align:start position:0%
of memory inside our application by just
writing<00:02:06.340><c> the</c><00:02:06.640><c> code</c><00:02:06.820><c> to</c><00:02:07.030><c> do</c><00:02:07.150><c> that</c><00:02:07.180><c> not</c><00:02:07.570><c> relying</c>

00:02:07.920 --> 00:02:07.930 align:start position:0%
writing the code to do that not relying
 

00:02:07.930 --> 00:02:09.809 align:start position:0%
writing the code to do that not relying
on<00:02:08.080><c> any</c><00:02:08.380><c> other</c><00:02:08.590><c> tools</c><00:02:08.830><c> whatsoever</c>

00:02:09.809 --> 00:02:09.819 align:start position:0%
on any other tools whatsoever
 

00:02:09.819 --> 00:02:11.220 align:start position:0%
on any other tools whatsoever
and<00:02:09.940><c> I</c><00:02:10.000><c> also</c><00:02:10.119><c> want</c><00:02:10.330><c> to</c><00:02:10.360><c> thank</c><00:02:10.479><c> Skillshare</c><00:02:11.020><c> for</c>

00:02:11.220 --> 00:02:11.230 align:start position:0%
and I also want to thank Skillshare for
 

00:02:11.230 --> 00:02:12.809 align:start position:0%
and I also want to thank Skillshare for
sponsoring<00:02:11.650><c> this</c><00:02:11.980><c> video</c><00:02:12.340><c> for</c><00:02:12.550><c> those</c><00:02:12.610><c> of</c><00:02:12.670><c> you</c>

00:02:12.809 --> 00:02:12.819 align:start position:0%
sponsoring this video for those of you
 

00:02:12.819 --> 00:02:14.760 align:start position:0%
sponsoring this video for those of you
who<00:02:12.880><c> don't</c><00:02:13.030><c> know</c><00:02:13.060><c> what</c><00:02:13.209><c> skill</c><00:02:13.480><c> Shey</c><00:02:13.690><c> is</c><00:02:13.770><c> Scotia</c>

00:02:14.760 --> 00:02:14.770 align:start position:0%
who don't know what skill Shey is Scotia
 

00:02:14.770 --> 00:02:16.440 align:start position:0%
who don't know what skill Shey is Scotia
is<00:02:15.069><c> an</c><00:02:15.190><c> online</c><00:02:15.489><c> learning</c><00:02:15.640><c> community</c><00:02:15.940><c> for</c>

00:02:16.440 --> 00:02:16.450 align:start position:0%
is an online learning community for
 

00:02:16.450 --> 00:02:17.850 align:start position:0%
is an online learning community for
creatives<00:02:16.900><c> where</c><00:02:17.050><c> millions</c><00:02:17.470><c> come</c><00:02:17.709><c> together</c>

00:02:17.850 --> 00:02:17.860 align:start position:0%
creatives where millions come together
 

00:02:17.860 --> 00:02:19.860 align:start position:0%
creatives where millions come together
to<00:02:18.489><c> take</c><00:02:18.610><c> the</c><00:02:18.760><c> next</c><00:02:19.000><c> step</c><00:02:19.180><c> in</c><00:02:19.390><c> their</c><00:02:19.540><c> creative</c>

00:02:19.860 --> 00:02:19.870 align:start position:0%
to take the next step in their creative
 

00:02:19.870 --> 00:02:22.110 align:start position:0%
to take the next step in their creative
journey<00:02:20.350><c> Skillshare</c><00:02:21.190><c> offers</c><00:02:21.430><c> thousands</c><00:02:22.030><c> of</c>

00:02:22.110 --> 00:02:22.120 align:start position:0%
journey Skillshare offers thousands of
 

00:02:22.120 --> 00:02:23.820 align:start position:0%
journey Skillshare offers thousands of
inspiring<00:02:22.540><c> classes</c><00:02:23.170><c> for</c><00:02:23.350><c> creative</c><00:02:23.709><c> and</c>

00:02:23.820 --> 00:02:23.830 align:start position:0%
inspiring classes for creative and
 

00:02:23.830 --> 00:02:25.920 align:start position:0%
inspiring classes for creative and
curious<00:02:24.190><c> people</c><00:02:24.220><c> on</c><00:02:24.850><c> topics</c><00:02:25.480><c> including</c>

00:02:25.920 --> 00:02:25.930 align:start position:0%
curious people on topics including
 

00:02:25.930 --> 00:02:28.260 align:start position:0%
curious people on topics including
illustration<00:02:26.680><c> design</c><00:02:26.940><c> photography</c><00:02:27.940><c> video</c>

00:02:28.260 --> 00:02:28.270 align:start position:0%
illustration design photography video
 

00:02:28.270 --> 00:02:30.780 align:start position:0%
illustration design photography video
freelancing<00:02:29.110><c> and</c><00:02:29.320><c> more</c><00:02:29.800><c> they've</c><00:02:30.160><c> got</c><00:02:30.340><c> tons</c><00:02:30.580><c> of</c>

00:02:30.780 --> 00:02:30.790 align:start position:0%
freelancing and more they've got tons of
 

00:02:30.790 --> 00:02:32.670 align:start position:0%
freelancing and more they've got tons of
stuff<00:02:31.060><c> on</c><00:02:31.330><c> their</c><00:02:31.510><c> platform</c><00:02:32.080><c> to</c><00:02:32.260><c> help</c><00:02:32.440><c> you</c>

00:02:32.670 --> 00:02:32.680 align:start position:0%
stuff on their platform to help you
 

00:02:32.680 --> 00:02:34.890 align:start position:0%
stuff on their platform to help you
learn<00:02:32.860><c> a</c><00:02:32.920><c> new</c><00:02:33.220><c> skill</c><00:02:33.430><c> and</c><00:02:33.880><c> one</c><00:02:34.360><c> of</c><00:02:34.450><c> my</c><00:02:34.510><c> favorite</c>

00:02:34.890 --> 00:02:34.900 align:start position:0%
learn a new skill and one of my favorite
 

00:02:34.900 --> 00:02:36.720 align:start position:0%
learn a new skill and one of my favorite
features<00:02:35.050><c> about</c><00:02:35.260><c> skill</c><00:02:35.769><c> share</c><00:02:36.040><c> is</c><00:02:36.250><c> that</c><00:02:36.280><c> their</c>

00:02:36.720 --> 00:02:36.730 align:start position:0%
features about skill share is that their
 

00:02:36.730 --> 00:02:39.060 align:start position:0%
features about skill share is that their
videos<00:02:37.120><c> are</c><00:02:37.480><c> quite</c><00:02:37.840><c> concise</c><00:02:38.470><c> which</c><00:02:38.830><c> means</c>

00:02:39.060 --> 00:02:39.070 align:start position:0%
videos are quite concise which means
 

00:02:39.070 --> 00:02:41.580 align:start position:0%
videos are quite concise which means
that<00:02:39.340><c> I</c><00:02:39.550><c> can</c><00:02:40.090><c> fit</c><00:02:40.330><c> them</c><00:02:40.510><c> into</c><00:02:40.690><c> my</c><00:02:40.900><c> schedule</c><00:02:41.470><c> and</c>

00:02:41.580 --> 00:02:41.590 align:start position:0%
that I can fit them into my schedule and
 

00:02:41.590 --> 00:02:43.440 align:start position:0%
that I can fit them into my schedule and
I<00:02:41.680><c> have</c><00:02:41.890><c> time</c><00:02:42.130><c> to</c><00:02:42.370><c> actually</c><00:02:42.730><c> use</c><00:02:42.970><c> them</c><00:02:43.209><c> to</c>

00:02:43.440 --> 00:02:43.450 align:start position:0%
I have time to actually use them to
 

00:02:43.450 --> 00:02:44.400 align:start position:0%
I have time to actually use them to
learn<00:02:43.630><c> something</c><00:02:43.690><c> new</c>

00:02:44.400 --> 00:02:44.410 align:start position:0%
learn something new
 

00:02:44.410 --> 00:02:46.350 align:start position:0%
learn something new
a<00:02:44.620><c> lot</c><00:02:44.830><c> of</c><00:02:44.860><c> their</c><00:02:45.040><c> illustration</c><00:02:45.730><c> classes</c><00:02:46.209><c> I</c>

00:02:46.350 --> 00:02:46.360 align:start position:0%
a lot of their illustration classes I
 

00:02:46.360 --> 00:02:48.270 align:start position:0%
a lot of their illustration classes I
particularly<00:02:46.840><c> like</c><00:02:47.200><c> because</c><00:02:47.500><c> I'm</c><00:02:48.010><c> always</c>

00:02:48.270 --> 00:02:48.280 align:start position:0%
particularly like because I'm always
 

00:02:48.280 --> 00:02:50.820 align:start position:0%
particularly like because I'm always
interested<00:02:48.790><c> in</c><00:02:49.180><c> improving</c><00:02:49.510><c> my</c><00:02:49.930><c> art</c><00:02:50.260><c> and</c><00:02:50.590><c> they</c>

00:02:50.820 --> 00:02:50.830 align:start position:0%
interested in improving my art and they
 

00:02:50.830 --> 00:02:52.350 align:start position:0%
interested in improving my art and they
also<00:02:50.950><c> have</c><00:02:51.190><c> plenty</c><00:02:51.459><c> of</c><00:02:51.580><c> classes</c><00:02:52.000><c> to</c><00:02:52.150><c> get</c><00:02:52.269><c> you</c>

00:02:52.350 --> 00:02:52.360 align:start position:0%
also have plenty of classes to get you
 

00:02:52.360 --> 00:02:54.600 align:start position:0%
also have plenty of classes to get you
started<00:02:52.780><c> on</c><00:02:52.989><c> how</c><00:02:53.319><c> to</c><00:02:53.380><c> make</c><00:02:53.590><c> videos</c><00:02:53.680><c> make</c>

00:02:54.600 --> 00:02:54.610 align:start position:0%
started on how to make videos make
 

00:02:54.610 --> 00:02:56.190 align:start position:0%
started on how to make videos make
twenty<00:02:55.000><c> twenty</c><00:02:55.330><c> a</c><00:02:55.360><c> year</c><00:02:55.780><c> in</c><00:02:55.930><c> which</c><00:02:56.050><c> you</c>

00:02:56.190 --> 00:02:56.200 align:start position:0%
twenty twenty a year in which you
 

00:02:56.200 --> 00:02:57.960 align:start position:0%
twenty twenty a year in which you
explore<00:02:56.560><c> new</c><00:02:56.590><c> skills</c><00:02:57.010><c> deepen</c><00:02:57.550><c> existing</c>

00:02:57.960 --> 00:02:57.970 align:start position:0%
explore new skills deepen existing
 

00:02:57.970 --> 00:03:00.449 align:start position:0%
explore new skills deepen existing
passions<00:02:58.420><c> and</c><00:02:58.600><c> get</c><00:02:58.959><c> lost</c><00:02:59.230><c> in</c><00:02:59.500><c> creativity</c><00:03:00.190><c> with</c>

00:03:00.449 --> 00:03:00.459 align:start position:0%
passions and get lost in creativity with
 

00:03:00.459 --> 00:03:02.550 align:start position:0%
passions and get lost in creativity with
school<00:03:00.760><c> fairs</c><00:03:00.970><c> online</c><00:03:01.360><c> classes</c><00:03:01.900><c> and</c><00:03:02.110><c> with</c><00:03:02.470><c> an</c>

00:03:02.550 --> 00:03:02.560 align:start position:0%
school fairs online classes and with an
 

00:03:02.560 --> 00:03:04.380 align:start position:0%
school fairs online classes and with an
annual<00:03:02.799><c> subscription</c><00:03:03.040><c> of</c><00:03:03.519><c> less</c><00:03:03.700><c> than</c><00:03:03.880><c> $10</c><00:03:04.360><c> a</c>

00:03:04.380 --> 00:03:04.390 align:start position:0%
annual subscription of less than $10 a
 

00:03:04.390 --> 00:03:06.509 align:start position:0%
annual subscription of less than $10 a
month<00:03:04.480><c> Skillshare</c><00:03:05.380><c> is</c><00:03:05.560><c> a</c><00:03:05.590><c> great</c><00:03:05.950><c> way</c><00:03:06.130><c> to</c><00:03:06.160><c> do</c>

00:03:06.509 --> 00:03:06.519 align:start position:0%
month Skillshare is a great way to do
 

00:03:06.519 --> 00:03:08.400 align:start position:0%
month Skillshare is a great way to do
all<00:03:06.790><c> of</c><00:03:06.820><c> that</c><00:03:06.970><c> and</c><00:03:07.450><c> the</c><00:03:07.690><c> best</c><00:03:07.900><c> part</c><00:03:08.170><c> is</c><00:03:08.320><c> the</c>

00:03:08.400 --> 00:03:08.410 align:start position:0%
all of that and the best part is the
 

00:03:08.410 --> 00:03:10.500 align:start position:0%
all of that and the best part is the
skill<00:03:08.650><c> share</c><00:03:08.860><c> is</c><00:03:09.040><c> offering</c><00:03:09.400><c> the</c><00:03:09.519><c> first</c><00:03:09.730><c> 500</c>

00:03:10.500 --> 00:03:10.510 align:start position:0%
skill share is offering the first 500
 

00:03:10.510 --> 00:03:12.509 align:start position:0%
skill share is offering the first 500
people<00:03:10.540><c> who</c><00:03:11.049><c> sign</c><00:03:11.320><c> up</c><00:03:11.500><c> using</c><00:03:11.709><c> the</c><00:03:11.860><c> link</c><00:03:11.950><c> in</c><00:03:12.340><c> the</c>

00:03:12.509 --> 00:03:12.519 align:start position:0%
people who sign up using the link in the
 

00:03:12.519 --> 00:03:14.880 align:start position:0%
people who sign up using the link in the
description<00:03:12.940><c> below</c><00:03:13.060><c> to</c><00:03:13.510><c> three</c><00:03:14.380><c> months</c><00:03:14.769><c> of</c>

00:03:14.880 --> 00:03:14.890 align:start position:0%
description below to three months of
 

00:03:14.890 --> 00:03:16.890 align:start position:0%
description below to three months of
skill<00:03:15.370><c> share</c><00:03:15.579><c> premium</c><00:03:16.060><c> so</c><00:03:16.390><c> go</c><00:03:16.480><c> ahead</c><00:03:16.690><c> and</c><00:03:16.810><c> do</c>

00:03:16.890 --> 00:03:16.900 align:start position:0%
skill share premium so go ahead and do
 

00:03:16.900 --> 00:03:18.539 align:start position:0%
skill share premium so go ahead and do
that<00:03:17.019><c> as</c><00:03:17.260><c> soon</c><00:03:17.470><c> as</c><00:03:17.590><c> possible</c><00:03:18.070><c> and</c><00:03:18.250><c> thank</c><00:03:18.459><c> you</c>

00:03:18.539 --> 00:03:18.549 align:start position:0%
that as soon as possible and thank you
 

00:03:18.549 --> 00:03:20.100 align:start position:0%
that as soon as possible and thank you
as<00:03:18.670><c> always</c><00:03:18.760><c> to</c><00:03:18.970><c> Skillshare</c><00:03:19.510><c> for</c><00:03:19.720><c> sponsoring</c>

00:03:20.100 --> 00:03:20.110 align:start position:0%
as always to Skillshare for sponsoring
 

00:03:20.110 --> 00:03:21.960 align:start position:0%
as always to Skillshare for sponsoring
this<00:03:20.470><c> video</c><00:03:20.799><c> I</c><00:03:21.040><c> also</c><00:03:21.280><c> want</c><00:03:21.459><c> to</c><00:03:21.489><c> thank</c><00:03:21.670><c> all</c><00:03:21.940><c> of</c>

00:03:21.960 --> 00:03:21.970 align:start position:0%
this video I also want to thank all of
 

00:03:21.970 --> 00:03:23.610 align:start position:0%
this video I also want to thank all of
you<00:03:22.180><c> for</c><00:03:22.420><c> subscribing</c><00:03:22.900><c> and</c><00:03:23.110><c> watching</c><00:03:23.200><c> my</c>

00:03:23.610 --> 00:03:23.620 align:start position:0%
you for subscribing and watching my
 

00:03:23.620 --> 00:03:25.380 align:start position:0%
you for subscribing and watching my
videos<00:03:23.920><c> because</c><00:03:24.190><c> we've</c><00:03:24.310><c> hit</c><00:03:24.489><c> 200</c><00:03:25.030><c> thousand</c>

00:03:25.380 --> 00:03:25.390 align:start position:0%
videos because we've hit 200 thousand
 

00:03:25.390 --> 00:03:26.789 align:start position:0%
videos because we've hit 200 thousand
subscribers<00:03:25.900><c> on</c><00:03:26.049><c> the</c><00:03:26.140><c> channel</c><00:03:26.170><c> which</c><00:03:26.650><c> is</c>

00:03:26.789 --> 00:03:26.799 align:start position:0%
subscribers on the channel which is
 

00:03:26.799 --> 00:03:28.740 align:start position:0%
subscribers on the channel which is
quite<00:03:27.040><c> a</c><00:03:27.070><c> cool</c><00:03:27.310><c> milestone</c><00:03:27.910><c> what</c><00:03:28.450><c> I</c><00:03:28.480><c> thought</c><00:03:28.690><c> I</c>

00:03:28.740 --> 00:03:28.750 align:start position:0%
quite a cool milestone what I thought I
 

00:03:28.750 --> 00:03:30.930 align:start position:0%
quite a cool milestone what I thought I
would<00:03:28.989><c> do</c><00:03:29.140><c> for</c><00:03:29.290><c> that</c><00:03:29.470><c> is</c><00:03:29.769><c> do</c><00:03:30.010><c> a</c><00:03:30.040><c> bit</c><00:03:30.250><c> of</c><00:03:30.370><c> a</c><00:03:30.459><c> QA</c>

00:03:30.930 --> 00:03:30.940 align:start position:0%
would do for that is do a bit of a QA
 

00:03:30.940 --> 00:03:35.460 align:start position:0%
would do for that is do a bit of a QA
I<00:03:31.230><c> have</c><00:03:32.230><c> not</c><00:03:32.560><c> done</c><00:03:32.829><c> a</c><00:03:32.890><c> Q&amp;A</c><00:03:33.340><c> video</c><00:03:33.700><c> in</c><00:03:34.090><c> like</c><00:03:34.470><c> five</c>

00:03:35.460 --> 00:03:35.470 align:start position:0%
I have not done a Q&amp;A video in like five
 

00:03:35.470 --> 00:03:36.150 align:start position:0%
I have not done a Q&amp;A video in like five
years

00:03:36.150 --> 00:03:36.160 align:start position:0%
years
 

00:03:36.160 --> 00:03:38.160 align:start position:0%
years
probably<00:03:36.940><c> so</c><00:03:37.390><c> if</c><00:03:37.480><c> you</c><00:03:37.540><c> guys</c><00:03:37.660><c> have</c><00:03:37.930><c> questions</c>

00:03:38.160 --> 00:03:38.170 align:start position:0%
probably so if you guys have questions
 

00:03:38.170 --> 00:03:40.110 align:start position:0%
probably so if you guys have questions
for<00:03:38.530><c> me</c><00:03:38.920><c> then</c><00:03:39.160><c> drop</c><00:03:39.400><c> them</c><00:03:39.519><c> in</c><00:03:39.700><c> the</c><00:03:39.790><c> comment</c>

00:03:40.110 --> 00:03:40.120 align:start position:0%
for me then drop them in the comment
 

00:03:40.120 --> 00:03:41.310 align:start position:0%
for me then drop them in the comment
section<00:03:40.180><c> below</c><00:03:40.480><c> I'll</c><00:03:40.810><c> be</c><00:03:40.930><c> looking</c><00:03:41.140><c> at</c><00:03:41.230><c> the</c>

00:03:41.310 --> 00:03:41.320 align:start position:0%
section below I'll be looking at the
 

00:03:41.320 --> 00:03:42.810 align:start position:0%
section below I'll be looking at the
comments<00:03:41.500><c> of</c><00:03:41.769><c> this</c><00:03:41.890><c> video</c><00:03:42.220><c> to</c><00:03:42.280><c> see</c><00:03:42.459><c> what</c><00:03:42.790><c> I</c>

00:03:42.810 --> 00:03:42.820 align:start position:0%
comments of this video to see what I
 

00:03:42.820 --> 00:03:45.630 align:start position:0%
comments of this video to see what I
should<00:03:43.060><c> include</c><00:03:43.359><c> in</c><00:03:43.660><c> the</c><00:03:43.780><c> Q&amp;A</c><00:03:44.340><c> please</c><00:03:45.340><c> don't</c>

00:03:45.630 --> 00:03:45.640 align:start position:0%
should include in the Q&amp;A please don't
 

00:03:45.640 --> 00:03:47.910 align:start position:0%
should include in the Q&amp;A please don't
ask<00:03:45.820><c> me</c><00:03:46.030><c> to</c><00:03:46.329><c> fix</c><00:03:46.540><c> your</c><00:03:46.780><c> card</c><00:03:47.049><c> now</c><00:03:47.560><c> let's</c><00:03:47.739><c> dive</c>

00:03:47.910 --> 00:03:47.920 align:start position:0%
ask me to fix your card now let's dive
 

00:03:47.920 --> 00:03:49.770 align:start position:0%
ask me to fix your card now let's dive
into<00:03:48.100><c> some</c><00:03:48.190><c> card</c><00:03:48.579><c> and</c><00:03:48.880><c> take</c><00:03:49.090><c> a</c><00:03:49.120><c> look</c><00:03:49.450><c> at</c><00:03:49.630><c> how</c>

00:03:49.770 --> 00:03:49.780 align:start position:0%
into some card and take a look at how
 

00:03:49.780 --> 00:03:52.140 align:start position:0%
into some card and take a look at how
exactly<00:03:50.260><c> you</c><00:03:50.350><c> can</c><00:03:50.530><c> be</c><00:03:50.650><c> more</c><00:03:50.980><c> aware</c><00:03:51.100><c> of</c><00:03:51.280><c> where</c>

00:03:52.140 --> 00:03:52.150 align:start position:0%
exactly you can be more aware of where
 

00:03:52.150 --> 00:03:54.240 align:start position:0%
exactly you can be more aware of where
you're<00:03:52.510><c> allocating</c><00:03:52.930><c> memory</c><00:03:53.380><c> so</c><00:03:53.799><c> here</c><00:03:53.980><c> we</c><00:03:54.100><c> have</c>

00:03:54.240 --> 00:03:54.250 align:start position:0%
you're allocating memory so here we have
 

00:03:54.250 --> 00:03:56.430 align:start position:0%
you're allocating memory so here we have
a<00:03:54.430><c> completely</c><00:03:54.880><c> blank</c><00:03:55.209><c> C++</c><00:03:55.750><c> program</c><00:03:56.109><c> I'm</c><00:03:56.260><c> gonna</c>

00:03:56.430 --> 00:03:56.440 align:start position:0%
a completely blank C++ program I'm gonna
 

00:03:56.440 --> 00:03:58.860 align:start position:0%
a completely blank C++ program I'm gonna
use<00:03:56.769><c> this</c><00:03:57.040><c> as</c><00:03:57.250><c> the</c><00:03:57.519><c> foundation</c><00:03:58.180><c> for</c><00:03:58.510><c> showing</c>

00:03:58.860 --> 00:03:58.870 align:start position:0%
use this as the foundation for showing
 

00:03:58.870 --> 00:04:01.289 align:start position:0%
use this as the foundation for showing
you<00:03:58.959><c> guys</c><00:03:59.109><c> all</c><00:03:59.500><c> of</c><00:03:59.709><c> this</c><00:03:59.859><c> stuff</c><00:04:00.489><c> keep</c><00:04:00.880><c> in</c><00:04:01.030><c> mind</c>

00:04:01.289 --> 00:04:01.299 align:start position:0%
you guys all of this stuff keep in mind
 

00:04:01.299 --> 00:04:03.690 align:start position:0%
you guys all of this stuff keep in mind
though<00:04:01.600><c> that</c><00:04:01.630><c> in</c><00:04:02.140><c> general</c><00:04:02.579><c> everything</c><00:04:03.579><c> I'm</c>

00:04:03.690 --> 00:04:03.700 align:start position:0%
though that in general everything I'm
 

00:04:03.700 --> 00:04:05.330 align:start position:0%
though that in general everything I'm
going<00:04:03.820><c> to</c><00:04:03.880><c> show</c><00:04:04.090><c> you</c><00:04:04.150><c> here</c><00:04:04.480><c> today</c><00:04:04.690><c> you</c><00:04:05.019><c> can</c>

00:04:05.330 --> 00:04:05.340 align:start position:0%
going to show you here today you can
 

00:04:05.340 --> 00:04:07.369 align:start position:0%
going to show you here today you can
easily<00:04:05.760><c> plug</c><00:04:06.000><c> into</c><00:04:06.330><c> an</c><00:04:06.420><c> existing</c><00:04:06.690><c> application</c>

00:04:07.369 --> 00:04:07.379 align:start position:0%
easily plug into an existing application
 

00:04:07.379 --> 00:04:08.660 align:start position:0%
easily plug into an existing application
of<00:04:07.470><c> yours</c><00:04:07.650><c> that's</c><00:04:07.860><c> kind</c><00:04:08.099><c> of</c><00:04:08.160><c> the</c><00:04:08.310><c> way</c><00:04:08.459><c> that</c><00:04:08.610><c> I</c>

00:04:08.660 --> 00:04:08.670 align:start position:0%
of yours that's kind of the way that I
 

00:04:08.670 --> 00:04:11.360 align:start position:0%
of yours that's kind of the way that I
am<00:04:08.819><c> intending</c><00:04:09.330><c> for</c><00:04:09.540><c> it</c><00:04:09.810><c> to</c><00:04:09.959><c> happen</c><00:04:10.200><c> maybe</c><00:04:11.160><c> in</c>

00:04:11.360 --> 00:04:11.370 align:start position:0%
am intending for it to happen maybe in
 

00:04:11.370 --> 00:04:12.530 align:start position:0%
am intending for it to happen maybe in
the<00:04:11.459><c> future</c><00:04:11.610><c> we'll</c><00:04:11.910><c> take</c><00:04:12.090><c> a</c><00:04:12.120><c> look</c><00:04:12.360><c> at</c><00:04:12.450><c> this</c>

00:04:12.530 --> 00:04:12.540 align:start position:0%
the future we'll take a look at this
 

00:04:12.540 --> 00:04:14.930 align:start position:0%
the future we'll take a look at this
inside<00:04:13.019><c> a</c><00:04:13.050><c> real</c><00:04:13.319><c> project</c><00:04:13.769><c> but</c><00:04:14.489><c> for</c><00:04:14.670><c> now</c><00:04:14.790><c> I'm</c>

00:04:14.930 --> 00:04:14.940 align:start position:0%
inside a real project but for now I'm
 

00:04:14.940 --> 00:04:16.640 align:start position:0%
inside a real project but for now I'm
just<00:04:15.000><c> gonna</c><00:04:15.180><c> strip</c><00:04:15.510><c> back</c><00:04:15.720><c> all</c><00:04:15.959><c> of</c><00:04:16.079><c> that</c><00:04:16.260><c> kind</c>

00:04:16.640 --> 00:04:16.650 align:start position:0%
just gonna strip back all of that kind
 

00:04:16.650 --> 00:04:18.439 align:start position:0%
just gonna strip back all of that kind
of<00:04:16.739><c> craft</c><00:04:17.160><c> all</c><00:04:17.400><c> of</c><00:04:17.519><c> that</c><00:04:17.699><c> extra</c><00:04:18.090><c> stuff</c><00:04:18.389><c> that</c>

00:04:18.439 --> 00:04:18.449 align:start position:0%
of craft all of that extra stuff that
 

00:04:18.449 --> 00:04:20.840 align:start position:0%
of craft all of that extra stuff that
isn't<00:04:19.260><c> really</c><00:04:19.440><c> relevant</c><00:04:19.650><c> at</c><00:04:20.100><c> all</c><00:04:20.250><c> and</c><00:04:20.699><c> we're</c>

00:04:20.840 --> 00:04:20.850 align:start position:0%
isn't really relevant at all and we're
 

00:04:20.850 --> 00:04:22.820 align:start position:0%
isn't really relevant at all and we're
gonna<00:04:21.000><c> take</c><00:04:21.180><c> a</c><00:04:21.209><c> look</c><00:04:21.389><c> at</c><00:04:21.510><c> the</c><00:04:21.600><c> core</c><00:04:21.870><c> basics</c><00:04:22.560><c> the</c>

00:04:22.820 --> 00:04:22.830 align:start position:0%
gonna take a look at the core basics the
 

00:04:22.830 --> 00:04:24.530 align:start position:0%
gonna take a look at the core basics the
first<00:04:23.040><c> thing</c><00:04:23.220><c> I'm</c><00:04:23.310><c> gonna</c><00:04:23.430><c> do</c><00:04:23.699><c> here</c><00:04:23.940><c> is</c><00:04:24.150><c> write</c><00:04:24.510><c> a</c>

00:04:24.530 --> 00:04:24.540 align:start position:0%
first thing I'm gonna do here is write a
 

00:04:24.540 --> 00:04:26.480 align:start position:0%
first thing I'm gonna do here is write a
little<00:04:24.930><c> object</c><00:04:25.350><c> because</c><00:04:25.710><c> this</c><00:04:25.919><c> is</c><00:04:26.100><c> probably</c>

00:04:26.480 --> 00:04:26.490 align:start position:0%
little object because this is probably
 

00:04:26.490 --> 00:04:28.670 align:start position:0%
little object because this is probably
going<00:04:26.790><c> to</c><00:04:26.880><c> be</c><00:04:27.000><c> a</c><00:04:27.030><c> good</c><00:04:27.270><c> example</c><00:04:27.360><c> of</c><00:04:27.900><c> a</c>

00:04:28.670 --> 00:04:28.680 align:start position:0%
going to be a good example of a
 

00:04:28.680 --> 00:04:30.620 align:start position:0%
going to be a good example of a
real-world<00:04:29.220><c> use</c><00:04:29.520><c> case</c><00:04:29.820><c> I</c><00:04:30.090><c> might</c><00:04:30.330><c> have</c><00:04:30.540><c> an</c>

00:04:30.620 --> 00:04:30.630 align:start position:0%
real-world use case I might have an
 

00:04:30.630 --> 00:04:33.500 align:start position:0%
real-world use case I might have an
object<00:04:30.780><c> let's</c><00:04:31.320><c> just</c><00:04:31.470><c> say</c><00:04:31.620><c> it</c><00:04:31.889><c> contains</c><00:04:32.370><c> an</c><00:04:32.880><c> X</c><00:04:33.330><c> Y</c>

00:04:33.500 --> 00:04:33.510 align:start position:0%
object let's just say it contains an X Y
 

00:04:33.510 --> 00:04:35.659 align:start position:0%
object let's just say it contains an X Y
Z<00:04:33.750><c> we</c><00:04:33.930><c> have</c><00:04:33.960><c> three</c><00:04:34.320><c> integers</c><00:04:34.800><c> in</c><00:04:35.010><c> here</c><00:04:35.280><c> now</c><00:04:35.550><c> if</c>

00:04:35.659 --> 00:04:35.669 align:start position:0%
Z we have three integers in here now if
 

00:04:35.669 --> 00:04:36.980 align:start position:0%
Z we have three integers in here now if
I<00:04:35.760><c> create</c><00:04:36.030><c> it</c><00:04:36.120><c> on</c><00:04:36.240><c> the</c><00:04:36.330><c> stack</c><00:04:36.600><c> I'll</c><00:04:36.780><c> probably</c>

00:04:36.980 --> 00:04:36.990 align:start position:0%
I create it on the stack I'll probably
 

00:04:36.990 --> 00:04:38.360 align:start position:0%
I create it on the stack I'll probably
end<00:04:37.260><c> up</c><00:04:37.410><c> with</c><00:04:37.560><c> something</c><00:04:37.919><c> like</c><00:04:38.040><c> this</c>

00:04:38.360 --> 00:04:38.370 align:start position:0%
end up with something like this
 

00:04:38.370 --> 00:04:41.000 align:start position:0%
end up with something like this
however<00:04:39.030><c> if</c><00:04:39.389><c> I</c><00:04:39.570><c> create</c><00:04:39.960><c> this</c><00:04:40.139><c> on</c><00:04:40.350><c> the</c><00:04:40.470><c> heap</c><00:04:40.680><c> by</c>

00:04:41.000 --> 00:04:41.010 align:start position:0%
however if I create this on the heap by
 

00:04:41.010 --> 00:04:43.520 align:start position:0%
however if I create this on the heap by
calling<00:04:41.520><c> a</c><00:04:41.550><c> new</c><00:04:41.850><c> object</c><00:04:42.120><c> then</c><00:04:42.930><c> of</c><00:04:43.080><c> course</c><00:04:43.290><c> that</c>

00:04:43.520 --> 00:04:43.530 align:start position:0%
calling a new object then of course that
 

00:04:43.530 --> 00:04:45.500 align:start position:0%
calling a new object then of course that
will<00:04:43.680><c> result</c><00:04:44.040><c> in</c><00:04:44.220><c> a</c><00:04:44.340><c> heap</c><00:04:44.520><c> allocation</c><00:04:45.000><c> and</c><00:04:45.360><c> the</c>

00:04:45.500 --> 00:04:45.510 align:start position:0%
will result in a heap allocation and the
 

00:04:45.510 --> 00:04:47.360 align:start position:0%
will result in a heap allocation and the
point<00:04:45.810><c> of</c><00:04:45.900><c> this</c><00:04:46.050><c> video</c><00:04:46.350><c> today</c><00:04:46.500><c> is</c><00:04:46.860><c> how</c><00:04:47.130><c> can</c><00:04:47.340><c> we</c>

00:04:47.360 --> 00:04:47.370 align:start position:0%
point of this video today is how can we
 

00:04:47.370 --> 00:04:49.460 align:start position:0%
point of this video today is how can we
detect<00:04:47.850><c> things</c><00:04:48.120><c> like</c><00:04:48.270><c> this</c><00:04:48.690><c> the</c><00:04:49.229><c> way</c><00:04:49.350><c> we're</c>

00:04:49.460 --> 00:04:49.470 align:start position:0%
detect things like this the way we're
 

00:04:49.470 --> 00:04:51.650 align:start position:0%
detect things like this the way we're
gonna<00:04:49.530><c> do</c><00:04:49.770><c> that</c><00:04:49.800><c> is</c><00:04:50.130><c> by</c><00:04:50.310><c> overriding</c><00:04:50.850><c> the</c><00:04:51.389><c> new</c>

00:04:51.650 --> 00:04:51.660 align:start position:0%
gonna do that is by overriding the new
 

00:04:51.660 --> 00:04:53.360 align:start position:0%
gonna do that is by overriding the new
operator<00:04:52.380><c> and</c><00:04:52.650><c> specifically</c><00:04:53.220><c> we're</c>

00:04:53.360 --> 00:04:53.370 align:start position:0%
operator and specifically we're
 

00:04:53.370 --> 00:04:55.760 align:start position:0%
operator and specifically we're
overriding<00:04:53.910><c> this</c><00:04:54.000><c> operator</c><00:04:54.479><c> globally</c><00:04:55.169><c> so</c><00:04:55.710><c> to</c>

00:04:55.760 --> 00:04:55.770 align:start position:0%
overriding this operator globally so to
 

00:04:55.770 --> 00:04:57.379 align:start position:0%
overriding this operator globally so to
do<00:04:55.950><c> that</c><00:04:55.979><c> we'll</c><00:04:56.280><c> type</c><00:04:56.520><c> in</c><00:04:56.669><c> void</c><00:04:56.910><c> pointer</c>

00:04:57.379 --> 00:04:57.389 align:start position:0%
do that we'll type in void pointer
 

00:04:57.389 --> 00:05:00.920 align:start position:0%
do that we'll type in void pointer
operator<00:04:57.900><c> nude</c><00:04:58.229><c> and</c><00:04:58.440><c> then</c><00:04:58.860><c> size</c><00:04:59.190><c> t</c><00:04:59.550><c> sighs</c><00:04:59.940><c> so</c>

00:05:00.920 --> 00:05:00.930 align:start position:0%
operator nude and then size t sighs so
 

00:05:00.930 --> 00:05:03.290 align:start position:0%
operator nude and then size t sighs so
what<00:05:01.169><c> this</c><00:05:01.320><c> is</c><00:05:01.590><c> is</c><00:05:01.830><c> the</c><00:05:02.310><c> new</c><00:05:02.550><c> operator</c><00:05:03.060><c> this</c>

00:05:03.290 --> 00:05:03.300 align:start position:0%
what this is is the new operator this
 

00:05:03.300 --> 00:05:05.990 align:start position:0%
what this is is the new operator this
new<00:05:03.630><c> keyword</c><00:05:04.500><c> here</c><00:05:04.830><c> is</c><00:05:05.010><c> actually</c><00:05:05.520><c> a</c><00:05:05.550><c> function</c>

00:05:05.990 --> 00:05:06.000 align:start position:0%
new keyword here is actually a function
 

00:05:06.000 --> 00:05:08.600 align:start position:0%
new keyword here is actually a function
that<00:05:06.270><c> gets</c><00:05:06.539><c> called</c><00:05:06.690><c> with</c><00:05:07.620><c> a</c><00:05:07.650><c> particular</c><00:05:08.160><c> size</c>

00:05:08.600 --> 00:05:08.610 align:start position:0%
that gets called with a particular size
 

00:05:08.610 --> 00:05:10.340 align:start position:0%
that gets called with a particular size
and<00:05:08.639><c> potentially</c><00:05:09.360><c> other</c><00:05:09.539><c> arguments</c><00:05:10.169><c> as</c><00:05:10.320><c> well</c>

00:05:10.340 --> 00:05:10.350 align:start position:0%
and potentially other arguments as well
 

00:05:10.350 --> 00:05:12.500 align:start position:0%
and potentially other arguments as well
by<00:05:10.950><c> writing</c><00:05:11.250><c> this</c><00:05:11.490><c> code</c><00:05:11.760><c> here</c><00:05:12.030><c> we're</c><00:05:12.300><c> saying</c>

00:05:12.500 --> 00:05:12.510 align:start position:0%
by writing this code here we're saying
 

00:05:12.510 --> 00:05:14.510 align:start position:0%
by writing this code here we're saying
do<00:05:12.720><c> not</c><00:05:12.870><c> use</c><00:05:13.229><c> the</c><00:05:13.530><c> operator</c><00:05:13.919><c> new</c><00:05:14.160><c> that</c><00:05:14.310><c> is</c><00:05:14.400><c> in</c>

00:05:14.510 --> 00:05:14.520 align:start position:0%
do not use the operator new that is in
 

00:05:14.520 --> 00:05:16.460 align:start position:0%
do not use the operator new that is in
the<00:05:14.639><c> standard</c><00:05:14.970><c> library</c><00:05:15.150><c> use</c><00:05:15.930><c> this</c><00:05:16.229><c> one</c>

00:05:16.460 --> 00:05:16.470 align:start position:0%
the standard library use this one
 

00:05:16.470 --> 00:05:18.469 align:start position:0%
the standard library use this one
instead<00:05:16.860><c> the</c><00:05:17.039><c> linker</c><00:05:17.430><c> will</c><00:05:17.669><c> actually</c><00:05:18.030><c> link</c><00:05:18.270><c> in</c>

00:05:18.469 --> 00:05:18.479 align:start position:0%
instead the linker will actually link in
 

00:05:18.479 --> 00:05:20.900 align:start position:0%
instead the linker will actually link in
this<00:05:18.870><c> function</c><00:05:19.410><c> instead</c><00:05:20.100><c> now</c><00:05:20.340><c> of</c><00:05:20.430><c> course</c><00:05:20.580><c> it's</c>

00:05:20.900 --> 00:05:20.910 align:start position:0%
this function instead now of course it's
 

00:05:20.910 --> 00:05:22.850 align:start position:0%
this function instead now of course it's
good<00:05:21.150><c> to</c><00:05:21.330><c> actually</c><00:05:21.510><c> allocate</c><00:05:22.229><c> memory</c><00:05:22.440><c> here</c>

00:05:22.850 --> 00:05:22.860 align:start position:0%
good to actually allocate memory here
 

00:05:22.860 --> 00:05:24.379 align:start position:0%
good to actually allocate memory here
because<00:05:23.190><c> that's</c><00:05:23.460><c> the</c><00:05:23.610><c> point</c><00:05:23.849><c> of</c><00:05:23.970><c> this</c><00:05:24.120><c> your</c>

00:05:24.379 --> 00:05:24.389 align:start position:0%
because that's the point of this your
 

00:05:24.389 --> 00:05:26.000 align:start position:0%
because that's the point of this your
program<00:05:24.750><c> probably</c><00:05:24.960><c> won't</c><00:05:25.380><c> work</c><00:05:25.560><c> if</c><00:05:25.830><c> you</c><00:05:25.860><c> don't</c>

00:05:26.000 --> 00:05:26.010 align:start position:0%
program probably won't work if you don't
 

00:05:26.010 --> 00:05:28.370 align:start position:0%
program probably won't work if you don't
of<00:05:26.520><c> course</c><00:05:27.150><c> you</c><00:05:27.330><c> could</c><00:05:27.510><c> retrieve</c><00:05:27.930><c> the</c><00:05:28.050><c> memory</c>

00:05:28.370 --> 00:05:28.380 align:start position:0%
of course you could retrieve the memory
 

00:05:28.380 --> 00:05:29.930 align:start position:0%
of course you could retrieve the memory
from<00:05:28.560><c> anywhere</c><00:05:29.070><c> the</c><00:05:29.220><c> point</c><00:05:29.460><c> of</c><00:05:29.610><c> this</c><00:05:29.729><c> function</c>

00:05:29.930 --> 00:05:29.940 align:start position:0%
from anywhere the point of this function
 

00:05:29.940 --> 00:05:32.150 align:start position:0%
from anywhere the point of this function
is<00:05:30.330><c> to</c><00:05:30.360><c> return</c><00:05:30.840><c> a</c><00:05:30.900><c> void</c><00:05:31.289><c> pointer</c><00:05:31.320><c> which</c><00:05:32.010><c> is</c>

00:05:32.150 --> 00:05:32.160 align:start position:0%
is to return a void pointer which is
 

00:05:32.160 --> 00:05:34.040 align:start position:0%
is to return a void pointer which is
just<00:05:32.370><c> a</c><00:05:32.520><c> memory</c><00:05:32.849><c> address</c><00:05:33.090><c> so</c><00:05:33.690><c> because</c><00:05:33.930><c> we</c>

00:05:34.040 --> 00:05:34.050 align:start position:0%
just a memory address so because we
 

00:05:34.050 --> 00:05:35.930 align:start position:0%
just a memory address so because we
don't<00:05:34.080><c> really</c><00:05:34.349><c> want</c><00:05:34.500><c> to</c><00:05:34.590><c> affect</c><00:05:35.340><c> the</c><00:05:35.460><c> behavior</c>

00:05:35.930 --> 00:05:35.940 align:start position:0%
don't really want to affect the behavior
 

00:05:35.940 --> 00:05:37.550 align:start position:0%
don't really want to affect the behavior
of<00:05:36.000><c> our</c><00:05:36.210><c> program</c><00:05:36.660><c> we'll</c><00:05:36.840><c> simply</c><00:05:37.169><c> type</c><00:05:37.380><c> in</c>

00:05:37.550 --> 00:05:37.560 align:start position:0%
of our program we'll simply type in
 

00:05:37.560 --> 00:05:39.860 align:start position:0%
of our program we'll simply type in
return<00:05:37.919><c> malloc</c><00:05:38.550><c> size</c><00:05:38.910><c> so</c><00:05:39.330><c> what</c><00:05:39.479><c> does</c><00:05:39.570><c> it'll</c><00:05:39.720><c> do</c>

00:05:39.860 --> 00:05:39.870 align:start position:0%
return malloc size so what does it'll do
 

00:05:39.870 --> 00:05:42.500 align:start position:0%
return malloc size so what does it'll do
is<00:05:40.110><c> allocate</c><00:05:40.380><c> the</c><00:05:40.979><c> appropriate</c><00:05:41.340><c> amount</c><00:05:42.300><c> of</c>

00:05:42.500 --> 00:05:42.510 align:start position:0%
is allocate the appropriate amount of
 

00:05:42.510 --> 00:05:44.629 align:start position:0%
is allocate the appropriate amount of
memory<00:05:42.960><c> for</c><00:05:43.200><c> us</c><00:05:43.260><c> and</c><00:05:43.650><c> return</c><00:05:43.979><c> a</c><00:05:44.190><c> pointer</c><00:05:44.610><c> to</c>

00:05:44.629 --> 00:05:44.639 align:start position:0%
memory for us and return a pointer to
 

00:05:44.639 --> 00:05:46.790 align:start position:0%
memory for us and return a pointer to
that<00:05:44.970><c> memory</c><00:05:45.450><c> so</c><00:05:45.750><c> with</c><00:05:45.990><c> this</c><00:05:46.139><c> change</c><00:05:46.500><c> being</c>

00:05:46.790 --> 00:05:46.800 align:start position:0%
that memory so with this change being
 

00:05:46.800 --> 00:05:48.680 align:start position:0%
that memory so with this change being
the<00:05:46.889><c> only</c><00:05:47.280><c> change</c><00:05:47.520><c> that</c><00:05:47.729><c> I've</c><00:05:47.849><c> made</c><00:05:48.120><c> if</c><00:05:48.389><c> we</c><00:05:48.510><c> run</c>

00:05:48.680 --> 00:05:48.690 align:start position:0%
the only change that I've made if we run
 

00:05:48.690 --> 00:05:50.719 align:start position:0%
the only change that I've made if we run
this<00:05:48.810><c> normally</c><00:05:49.260><c> nothing</c><00:05:49.950><c> will</c><00:05:50.070><c> change</c><00:05:50.370><c> but</c>

00:05:50.719 --> 00:05:50.729 align:start position:0%
this normally nothing will change but
 

00:05:50.729 --> 00:05:52.700 align:start position:0%
this normally nothing will change but
this<00:05:51.090><c> new</c><00:05:51.360><c> keyword</c><00:05:51.810><c> will</c><00:05:52.050><c> now</c><00:05:52.200><c> run</c><00:05:52.440><c> through</c>

00:05:52.700 --> 00:05:52.710 align:start position:0%
this new keyword will now run through
 

00:05:52.710 --> 00:05:54.589 align:start position:0%
this new keyword will now run through
this<00:05:52.950><c> function</c><00:05:53.280><c> which</c><00:05:53.729><c> is</c><00:05:53.910><c> quite</c><00:05:54.450><c> nice</c>

00:05:54.589 --> 00:05:54.599 align:start position:0%
this function which is quite nice
 

00:05:54.599 --> 00:05:56.719 align:start position:0%
this function which is quite nice
because<00:05:54.900><c> I</c><00:05:55.260><c> could</c><00:05:55.530><c> easily</c><00:05:55.830><c> type</c><00:05:56.280><c> in</c><00:05:56.460><c> something</c>

00:05:56.719 --> 00:05:56.729 align:start position:0%
because I could easily type in something
 

00:05:56.729 --> 00:06:02.839 align:start position:0%
because I could easily type in something
like<00:05:57.320><c> allocating</c><00:05:58.849><c> size</c><00:06:00.260><c> bytes</c><00:06:01.400><c> for</c><00:06:02.400><c> example</c>

00:06:02.839 --> 00:06:02.849 align:start position:0%
like allocating size bytes for example
 

00:06:02.849 --> 00:06:04.460 align:start position:0%
like allocating size bytes for example
and<00:06:03.060><c> now</c><00:06:03.210><c> it</c><00:06:03.450><c> will</c><00:06:03.539><c> actually</c><00:06:03.690><c> print</c><00:06:04.139><c> that</c><00:06:04.289><c> to</c>

00:06:04.460 --> 00:06:04.470 align:start position:0%
and now it will actually print that to
 

00:06:04.470 --> 00:06:06.080 align:start position:0%
and now it will actually print that to
the<00:06:04.560><c> console</c><00:06:04.979><c> and</c><00:06:05.220><c> perhaps</c><00:06:05.460><c> the</c><00:06:05.880><c> other</c>

00:06:06.080 --> 00:06:06.090 align:start position:0%
the console and perhaps the other
 

00:06:06.090 --> 00:06:08.060 align:start position:0%
the console and perhaps the other
benefit<00:06:06.690><c> to</c><00:06:06.720><c> simply</c><00:06:07.349><c> writing</c><00:06:07.590><c> something</c><00:06:07.919><c> like</c>

00:06:08.060 --> 00:06:08.070 align:start position:0%
benefit to simply writing something like
 

00:06:08.070 --> 00:06:10.279 align:start position:0%
benefit to simply writing something like
this<00:06:08.400><c> is</c><00:06:08.639><c> that</c><00:06:08.700><c> I</c><00:06:09.090><c> can</c><00:06:09.300><c> now</c><00:06:09.450><c> easily</c><00:06:09.720><c> stick</c><00:06:10.260><c> a</c>

00:06:10.279 --> 00:06:10.289 align:start position:0%
this is that I can now easily stick a
 

00:06:10.289 --> 00:06:12.469 align:start position:0%
this is that I can now easily stick a
breakpoint<00:06:10.680><c> here</c><00:06:11.070><c> and</c><00:06:11.430><c> if</c><00:06:11.849><c> I</c><00:06:11.970><c> run</c><00:06:12.240><c> this</c>

00:06:12.469 --> 00:06:12.479 align:start position:0%
breakpoint here and if I run this
 

00:06:12.479 --> 00:06:14.480 align:start position:0%
breakpoint here and if I run this
program<00:06:12.539><c> you'll</c><00:06:13.500><c> see</c><00:06:13.590><c> that</c><00:06:13.890><c> my</c><00:06:14.039><c> program</c>

00:06:14.480 --> 00:06:14.490 align:start position:0%
program you'll see that my program
 

00:06:14.490 --> 00:06:16.350 align:start position:0%
program you'll see that my program
breaks<00:06:14.849><c> on</c><00:06:15.120><c> this</c><00:06:15.360><c> line</c><00:06:15.630><c> and</c><00:06:15.930><c> I</c>

00:06:16.350 --> 00:06:16.360 align:start position:0%
breaks on this line and I
 

00:06:16.360 --> 00:06:17.999 align:start position:0%
breaks on this line and I
and<00:06:16.449><c> look</c><00:06:16.569><c> at</c><00:06:16.689><c> the</c><00:06:16.780><c> call</c><00:06:16.990><c> stack</c><00:06:17.289><c> and</c><00:06:17.560><c> I</c><00:06:17.620><c> can</c><00:06:17.800><c> see</c>

00:06:17.999 --> 00:06:18.009 align:start position:0%
and look at the call stack and I can see
 

00:06:18.009 --> 00:06:20.429 align:start position:0%
and look at the call stack and I can see
that<00:06:18.189><c> okay</c><00:06:18.879><c> it's</c><00:06:19.180><c> coming</c><00:06:19.569><c> from</c><00:06:19.719><c> this</c><00:06:19.960><c> line</c><00:06:20.259><c> of</c>

00:06:20.429 --> 00:06:20.439 align:start position:0%
that okay it's coming from this line of
 

00:06:20.439 --> 00:06:22.589 align:start position:0%
that okay it's coming from this line of
code<00:06:20.680><c> now</c><00:06:21.370><c> of</c><00:06:21.520><c> course</c><00:06:21.699><c> in</c><00:06:21.939><c> this</c><00:06:22.090><c> case</c><00:06:22.330><c> that's</c>

00:06:22.589 --> 00:06:22.599 align:start position:0%
code now of course in this case that's
 

00:06:22.599 --> 00:06:25.110 align:start position:0%
code now of course in this case that's
super<00:06:23.169><c> obvious</c><00:06:23.379><c> but</c><00:06:24.189><c> what</c><00:06:24.400><c> if</c><00:06:24.520><c> we</c><00:06:24.669><c> made</c>

00:06:25.110 --> 00:06:25.120 align:start position:0%
super obvious but what if we made
 

00:06:25.120 --> 00:06:26.999 align:start position:0%
super obvious but what if we made
something<00:06:25.569><c> like</c><00:06:25.750><c> a</c><00:06:25.780><c> string</c><00:06:26.289><c> so</c><00:06:26.620><c> I</c><00:06:26.650><c> should</c><00:06:26.889><c> say</c>

00:06:26.999 --> 00:06:27.009 align:start position:0%
something like a string so I should say
 

00:06:27.009 --> 00:06:29.070 align:start position:0%
something like a string so I should say
we<00:06:27.129><c> have</c><00:06:27.250><c> a</c><00:06:27.280><c> string</c><00:06:27.610><c> culture</c><00:06:28.120><c> now</c><00:06:28.180><c> now</c><00:06:28.629><c> this</c><00:06:28.840><c> is</c>

00:06:29.070 --> 00:06:29.080 align:start position:0%
we have a string culture now now this is
 

00:06:29.080 --> 00:06:30.990 align:start position:0%
we have a string culture now now this is
a<00:06:29.110><c> small</c><00:06:29.530><c> string</c><00:06:29.889><c> so</c><00:06:30.159><c> it</c><00:06:30.310><c> weren't</c><00:06:30.580><c> allocate</c>

00:06:30.990 --> 00:06:31.000 align:start position:0%
a small string so it weren't allocate
 

00:06:31.000 --> 00:06:32.429 align:start position:0%
a small string so it weren't allocate
memory<00:06:31.389><c> on</c><00:06:31.659><c> the</c><00:06:31.780><c> heap</c><00:06:31.810><c> to</c><00:06:32.139><c> store</c><00:06:32.349><c> these</c>

00:06:32.429 --> 00:06:32.439 align:start position:0%
memory on the heap to store these
 

00:06:32.439 --> 00:06:34.439 align:start position:0%
memory on the heap to store these
characters<00:06:32.979><c> however</c><00:06:33.610><c> we</c><00:06:33.789><c> are</c><00:06:33.909><c> in</c><00:06:34.000><c> debug</c><00:06:34.300><c> mode</c>

00:06:34.439 --> 00:06:34.449 align:start position:0%
characters however we are in debug mode
 

00:06:34.449 --> 00:06:36.869 align:start position:0%
characters however we are in debug mode
so<00:06:34.629><c> it</c><00:06:34.750><c> still</c><00:06:35.080><c> will</c><00:06:35.319><c> outcast</c><00:06:35.770><c> in</c><00:06:35.889><c> memory</c><00:06:36.219><c> if</c><00:06:36.400><c> we</c>

00:06:36.869 --> 00:06:36.879 align:start position:0%
so it still will outcast in memory if we
 

00:06:36.879 --> 00:06:38.850 align:start position:0%
so it still will outcast in memory if we
launch<00:06:37.120><c> this</c><00:06:37.330><c> now</c><00:06:37.539><c> you</c><00:06:38.169><c> can</c><00:06:38.319><c> see</c><00:06:38.530><c> that</c><00:06:38.710><c> this</c>

00:06:38.850 --> 00:06:38.860 align:start position:0%
launch this now you can see that this
 

00:06:38.860 --> 00:06:41.309 align:start position:0%
launch this now you can see that this
allocation<00:06:39.310><c> is</c><00:06:39.729><c> coming</c><00:06:40.120><c> from</c><00:06:40.330><c> this</c><00:06:40.900><c> line</c><00:06:41.169><c> of</c>

00:06:41.309 --> 00:06:41.319 align:start position:0%
allocation is coming from this line of
 

00:06:41.319 --> 00:06:43.230 align:start position:0%
allocation is coming from this line of
code<00:06:41.530><c> and</c><00:06:41.860><c> we</c><00:06:41.979><c> can</c><00:06:42.009><c> actually</c><00:06:42.280><c> track</c><00:06:42.789><c> that</c><00:06:43.030><c> all</c>

00:06:43.230 --> 00:06:43.240 align:start position:0%
code and we can actually track that all
 

00:06:43.240 --> 00:06:45.240 align:start position:0%
code and we can actually track that all
the<00:06:43.389><c> way</c><00:06:43.479><c> in</c><00:06:43.629><c> the</c><00:06:43.719><c> coalsack</c><00:06:44.199><c> through</c><00:06:44.919><c> string</c>

00:06:45.240 --> 00:06:45.250 align:start position:0%
the way in the coalsack through string
 

00:06:45.250 --> 00:06:48.570 align:start position:0%
the way in the coalsack through string
and<00:06:45.520><c> say</c><00:06:45.699><c> that</c><00:06:45.879><c> okay</c><00:06:46.439><c> we</c><00:06:47.439><c> call</c><00:06:47.740><c> operator</c><00:06:48.250><c> new</c>

00:06:48.570 --> 00:06:48.580 align:start position:0%
and say that okay we call operator new
 

00:06:48.580 --> 00:06:51.089 align:start position:0%
and say that okay we call operator new
here<00:06:49.060><c> and</c><00:06:49.330><c> we</c><00:06:49.779><c> allocate</c><00:06:50.259><c> eight</c><00:06:50.469><c> bytes</c><00:06:50.830><c> of</c>

00:06:51.089 --> 00:06:51.099 align:start position:0%
here and we allocate eight bytes of
 

00:06:51.099 --> 00:06:53.309 align:start position:0%
here and we allocate eight bytes of
memory<00:06:51.159><c> which</c><00:06:52.120><c> is</c><00:06:52.270><c> also</c><00:06:52.509><c> you</c><00:06:52.719><c> can</c><00:06:52.930><c> see</c><00:06:53.110><c> what</c>

00:06:53.309 --> 00:06:53.319 align:start position:0%
memory which is also you can see what
 

00:06:53.319 --> 00:06:55.830 align:start position:0%
memory which is also you can see what
our<00:06:53.469><c> console</c><00:06:53.949><c> reflects</c><00:06:54.789><c> just</c><00:06:55.270><c> in</c><00:06:55.419><c> case</c><00:06:55.599><c> it's</c>

00:06:55.830 --> 00:06:55.840 align:start position:0%
our console reflects just in case it's
 

00:06:55.840 --> 00:06:58.409 align:start position:0%
our console reflects just in case it's
not<00:06:55.990><c> 100%</c><00:06:56.529><c> clear</c><00:06:56.889><c> I</c><00:06:57.340><c> also</c><00:06:57.550><c> want</c><00:06:57.969><c> to</c><00:06:58.029><c> point</c><00:06:58.240><c> out</c>

00:06:58.409 --> 00:06:58.419 align:start position:0%
not 100% clear I also want to point out
 

00:06:58.419 --> 00:07:00.360 align:start position:0%
not 100% clear I also want to point out
that<00:06:58.689><c> this</c><00:06:58.930><c> does</c><00:06:59.319><c> not</c><00:06:59.349><c> just</c><00:06:59.800><c> affect</c><00:07:00.069><c> you</c>

00:07:00.360 --> 00:07:00.370 align:start position:0%
that this does not just affect you
 

00:07:00.370 --> 00:07:02.969 align:start position:0%
that this does not just affect you
explicitly<00:07:01.270><c> calling</c><00:07:01.599><c> you</c><00:07:01.930><c> if</c><00:07:02.229><c> you</c><00:07:02.439><c> use</c><00:07:02.650><c> smart</c>

00:07:02.969 --> 00:07:02.979 align:start position:0%
explicitly calling you if you use smart
 

00:07:02.979 --> 00:07:05.610 align:start position:0%
explicitly calling you if you use smart
pointers<00:07:03.460><c> so</c><00:07:03.729><c> for</c><00:07:03.939><c> example</c><00:07:04.419><c> if</c><00:07:04.870><c> this</c><00:07:05.050><c> was</c><00:07:05.379><c> a</c>

00:07:05.610 --> 00:07:05.620 align:start position:0%
pointers so for example if this was a
 

00:07:05.620 --> 00:07:08.580 align:start position:0%
pointers so for example if this was a
unique<00:07:06.370><c> pointer</c><00:07:07.029><c> and</c><00:07:07.479><c> then</c><00:07:08.110><c> let's</c><00:07:08.289><c> change</c>

00:07:08.580 --> 00:07:08.590 align:start position:0%
unique pointer and then let's change
 

00:07:08.590 --> 00:07:12.929 align:start position:0%
unique pointer and then let's change
this<00:07:08.830><c> to</c><00:07:09.189><c> make</c><00:07:09.669><c> you</c><00:07:10.389><c> me</c><00:07:10.750><c> with</c><00:07:11.939><c> object</c>

00:07:12.929 --> 00:07:12.939 align:start position:0%
this to make you me with object
 

00:07:12.939 --> 00:07:16.439 align:start position:0%
this to make you me with object
addressing<00:07:13.689><c> clear</c><00:07:13.900><c> memory</c><00:07:14.289><c> up</c><00:07:14.469><c> here</c><00:07:15.449><c> then</c>

00:07:16.439 --> 00:07:16.449 align:start position:0%
addressing clear memory up here then
 

00:07:16.449 --> 00:07:18.209 align:start position:0%
addressing clear memory up here then
obviously<00:07:16.629><c> memory</c><00:07:17.529><c> will</c><00:07:17.770><c> still</c><00:07:18.039><c> get</c>

00:07:18.209 --> 00:07:18.219 align:start position:0%
obviously memory will still get
 

00:07:18.219 --> 00:07:20.850 align:start position:0%
obviously memory will still get
allocated<00:07:18.699><c> here</c><00:07:19.060><c> if</c><00:07:19.180><c> I</c><00:07:19.270><c> run</c><00:07:19.479><c> this</c><00:07:19.629><c> code</c><00:07:19.900><c> will</c>

00:07:20.850 --> 00:07:20.860 align:start position:0%
allocated here if I run this code will
 

00:07:20.860 --> 00:07:22.860 align:start position:0%
allocated here if I run this code will
skip<00:07:21.159><c> past</c><00:07:21.400><c> the</c><00:07:21.580><c> string</c><00:07:21.849><c> here</c><00:07:22.089><c> to</c><00:07:22.569><c> the</c><00:07:22.659><c> next</c>

00:07:22.860 --> 00:07:22.870 align:start position:0%
skip past the string here to the next
 

00:07:22.870 --> 00:07:24.300 align:start position:0%
skip past the string here to the next
allocation<00:07:23.469><c> and</c><00:07:23.650><c> you</c><00:07:23.740><c> can</c><00:07:23.889><c> see</c><00:07:24.069><c> that</c><00:07:24.190><c> this</c>

00:07:24.300 --> 00:07:24.310 align:start position:0%
allocation and you can see that this
 

00:07:24.310 --> 00:07:26.490 align:start position:0%
allocation and you can see that this
happens<00:07:24.699><c> from</c><00:07:25.330><c> within</c><00:07:25.569><c> make</c><00:07:25.870><c> unique</c><00:07:26.259><c> because</c>

00:07:26.490 --> 00:07:26.500 align:start position:0%
happens from within make unique because
 

00:07:26.500 --> 00:07:28.950 align:start position:0%
happens from within make unique because
unique<00:07:27.219><c> actually</c><00:07:27.460><c> of</c><00:07:27.849><c> course</c><00:07:27.879><c> creates</c><00:07:28.810><c> the</c>

00:07:28.950 --> 00:07:28.960 align:start position:0%
unique actually of course creates the
 

00:07:28.960 --> 00:07:30.959 align:start position:0%
unique actually of course creates the
object<00:07:29.379><c> on</c><00:07:29.529><c> the</c><00:07:29.710><c> heap</c><00:07:29.740><c> by</c><00:07:30.069><c> calling</c><00:07:30.430><c> new</c><00:07:30.610><c> so</c>

00:07:30.959 --> 00:07:30.969 align:start position:0%
object on the heap by calling new so
 

00:07:30.969 --> 00:07:32.969 align:start position:0%
object on the heap by calling new so
hopefully<00:07:31.419><c> you</c><00:07:31.539><c> can</c><00:07:31.690><c> already</c><00:07:32.080><c> see</c><00:07:32.409><c> how</c><00:07:32.710><c> useful</c>

00:07:32.969 --> 00:07:32.979 align:start position:0%
hopefully you can already see how useful
 

00:07:32.979 --> 00:07:34.740 align:start position:0%
hopefully you can already see how useful
this<00:07:33.610><c> is</c><00:07:33.669><c> you</c><00:07:34.089><c> can</c><00:07:34.210><c> stick</c><00:07:34.389><c> a</c><00:07:34.419><c> breakpoint</c>

00:07:34.740 --> 00:07:34.750 align:start position:0%
this is you can stick a breakpoint
 

00:07:34.750 --> 00:07:36.899 align:start position:0%
this is you can stick a breakpoint
inside<00:07:35.469><c> that</c><00:07:35.680><c> operator</c><00:07:36.069><c> new</c><00:07:36.250><c> function</c><00:07:36.729><c> and</c>

00:07:36.899 --> 00:07:36.909 align:start position:0%
inside that operator new function and
 

00:07:36.909 --> 00:07:39.329 align:start position:0%
inside that operator new function and
trace<00:07:37.270><c> back</c><00:07:37.509><c> exactly</c><00:07:38.259><c> where</c><00:07:38.589><c> those</c><00:07:38.949><c> memory</c>

00:07:39.329 --> 00:07:39.339 align:start position:0%
trace back exactly where those memory
 

00:07:39.339 --> 00:07:41.189 align:start position:0%
trace back exactly where those memory
allocations<00:07:39.969><c> are</c><00:07:40.150><c> coming</c><00:07:40.569><c> from</c><00:07:40.779><c> another</c>

00:07:41.189 --> 00:07:41.199 align:start position:0%
allocations are coming from another
 

00:07:41.199 --> 00:07:43.290 align:start position:0%
allocations are coming from another
really<00:07:41.560><c> good</c><00:07:41.680><c> example</c><00:07:41.740><c> where</c><00:07:42.460><c> this</c><00:07:42.669><c> is</c><00:07:42.879><c> super</c>

00:07:43.290 --> 00:07:43.300 align:start position:0%
really good example where this is super
 

00:07:43.300 --> 00:07:44.999 align:start position:0%
really good example where this is super
useful<00:07:43.479><c> is</c><00:07:43.960><c> if</c><00:07:44.259><c> you're</c><00:07:44.379><c> working</c><00:07:44.560><c> on</c><00:07:44.710><c> a</c><00:07:44.770><c> game</c>

00:07:44.999 --> 00:07:45.009 align:start position:0%
useful is if you're working on a game
 

00:07:45.009 --> 00:07:47.519 align:start position:0%
useful is if you're working on a game
engine<00:07:45.370><c> or</c><00:07:45.520><c> a</c><00:07:45.580><c> game</c><00:07:46.000><c> when</c><00:07:46.839><c> the</c><00:07:46.990><c> games</c><00:07:47.229><c> actually</c>

00:07:47.519 --> 00:07:47.529 align:start position:0%
engine or a game when the games actually
 

00:07:47.529 --> 00:07:49.649 align:start position:0%
engine or a game when the games actually
running<00:07:48.339><c> when</c><00:07:48.550><c> you're</c><00:07:48.699><c> rendering</c><00:07:48.939><c> frames</c>

00:07:49.649 --> 00:07:49.659 align:start position:0%
running when you're rendering frames
 

00:07:49.659 --> 00:07:51.329 align:start position:0%
running when you're rendering frames
like<00:07:49.960><c> let's</c><00:07:50.169><c> just</c><00:07:50.319><c> say</c><00:07:50.439><c> you</c><00:07:50.500><c> finished</c><00:07:50.979><c> loading</c>

00:07:51.329 --> 00:07:51.339 align:start position:0%
like let's just say you finished loading
 

00:07:51.339 --> 00:07:53.070 align:start position:0%
like let's just say you finished loading
you<00:07:51.610><c> finished</c><00:07:51.939><c> initialization</c><00:07:52.719><c> all</c><00:07:52.810><c> of</c><00:07:52.930><c> that</c>

00:07:53.070 --> 00:07:53.080 align:start position:0%
you finished initialization all of that
 

00:07:53.080 --> 00:07:54.779 align:start position:0%
you finished initialization all of that
you're<00:07:53.259><c> in</c><00:07:53.379><c> your</c><00:07:53.529><c> level</c><00:07:53.919><c> you're</c><00:07:54.339><c> just</c><00:07:54.550><c> playing</c>

00:07:54.779 --> 00:07:54.789 align:start position:0%
you're in your level you're just playing
 

00:07:54.789 --> 00:07:57.570 align:start position:0%
you're in your level you're just playing
your<00:07:55.089><c> game</c><00:07:55.379><c> frame</c><00:07:56.379><c> to</c><00:07:56.589><c> frame</c><00:07:56.770><c> you</c><00:07:57.189><c> want</c><00:07:57.460><c> to</c>

00:07:57.570 --> 00:07:57.580 align:start position:0%
your game frame to frame you want to
 

00:07:57.580 --> 00:07:59.249 align:start position:0%
your game frame to frame you want to
minimize<00:07:58.029><c> the</c><00:07:58.300><c> number</c><00:07:58.479><c> of</c><00:07:58.629><c> allocations</c><00:07:58.870><c> you</c>

00:07:59.249 --> 00:07:59.259 align:start position:0%
minimize the number of allocations you
 

00:07:59.259 --> 00:08:01.260 align:start position:0%
minimize the number of allocations you
have<00:07:59.439><c> because</c><00:07:59.860><c> they</c><00:08:00.129><c> that</c><00:08:00.460><c> can</c><00:08:00.610><c> have</c><00:08:00.789><c> a</c><00:08:00.819><c> quite</c>

00:08:01.260 --> 00:08:01.270 align:start position:0%
have because they that can have a quite
 

00:08:01.270 --> 00:08:03.269 align:start position:0%
have because they that can have a quite
significant<00:08:01.900><c> performance</c><00:08:02.349><c> impact</c><00:08:02.740><c> so</c><00:08:03.129><c> what</c>

00:08:03.269 --> 00:08:03.279 align:start position:0%
significant performance impact so what
 

00:08:03.279 --> 00:08:05.100 align:start position:0%
significant performance impact so what
you<00:08:03.370><c> can</c><00:08:03.520><c> do</c><00:08:03.699><c> and</c><00:08:03.969><c> what</c><00:08:04.210><c> I</c><00:08:04.240><c> have</c><00:08:04.629><c> done</c><00:08:04.870><c> in</c><00:08:05.020><c> the</c>

00:08:05.100 --> 00:08:05.110 align:start position:0%
you can do and what I have done in the
 

00:08:05.110 --> 00:08:06.929 align:start position:0%
you can do and what I have done in the
past<00:08:05.289><c> is</c><00:08:05.770><c> you</c><00:08:06.129><c> can</c><00:08:06.250><c> just</c><00:08:06.370><c> stick</c><00:08:06.610><c> a</c><00:08:06.639><c> breakpoint</c>

00:08:06.929 --> 00:08:06.939 align:start position:0%
past is you can just stick a breakpoint
 

00:08:06.939 --> 00:08:09.659 align:start position:0%
past is you can just stick a breakpoint
inside<00:08:07.389><c> that</c><00:08:07.779><c> operating</c><00:08:08.319><c> new</c><00:08:08.439><c> function</c><00:08:09.009><c> while</c>

00:08:09.659 --> 00:08:09.669 align:start position:0%
inside that operating new function while
 

00:08:09.669 --> 00:08:11.550 align:start position:0%
inside that operating new function while
your<00:08:09.939><c> game</c><00:08:10.210><c> loop</c><00:08:10.449><c> is</c><00:08:10.629><c> actually</c><00:08:10.990><c> running</c><00:08:11.229><c> and</c>

00:08:11.550 --> 00:08:11.560 align:start position:0%
your game loop is actually running and
 

00:08:11.560 --> 00:08:13.829 align:start position:0%
your game loop is actually running and
kind<00:08:12.009><c> of</c><00:08:12.129><c> trace</c><00:08:12.400><c> exactly</c><00:08:13.060><c> where</c><00:08:13.270><c> those</c><00:08:13.479><c> memory</c>

00:08:13.829 --> 00:08:13.839 align:start position:0%
kind of trace exactly where those memory
 

00:08:13.839 --> 00:08:15.779 align:start position:0%
kind of trace exactly where those memory
allocations<00:08:14.469><c> are</c><00:08:14.620><c> coming</c><00:08:14.889><c> from</c><00:08:15.039><c> frame</c><00:08:15.759><c> to</c>

00:08:15.779 --> 00:08:15.789 align:start position:0%
allocations are coming from frame to
 

00:08:15.789 --> 00:08:17.579 align:start position:0%
allocations are coming from frame to
frame<00:08:16.000><c> and</c><00:08:16.539><c> to</c><00:08:16.870><c> be</c><00:08:16.960><c> honest</c><00:08:17.199><c> a</c><00:08:17.229><c> lot</c><00:08:17.349><c> of</c><00:08:17.439><c> them</c><00:08:17.529><c> I'm</c>

00:08:17.579 --> 00:08:17.589 align:start position:0%
frame and to be honest a lot of them I'm
 

00:08:17.589 --> 00:08:19.110 align:start position:0%
frame and to be honest a lot of them I'm
probably<00:08:17.740><c> gonna</c><00:08:17.949><c> be</c><00:08:18.129><c> like</c><00:08:18.279><c> string</c><00:08:18.580><c> operations</c>

00:08:19.110 --> 00:08:19.120 align:start position:0%
probably gonna be like string operations
 

00:08:19.120 --> 00:08:20.909 align:start position:0%
probably gonna be like string operations
and<00:08:19.300><c> stuff</c><00:08:19.479><c> like</c><00:08:19.599><c> that</c><00:08:19.810><c> but</c><00:08:20.319><c> sometimes</c><00:08:20.560><c> you</c>

00:08:20.909 --> 00:08:20.919 align:start position:0%
and stuff like that but sometimes you
 

00:08:20.919 --> 00:08:23.219 align:start position:0%
and stuff like that but sometimes you
can<00:08:21.099><c> you</c><00:08:21.370><c> can</c><00:08:21.520><c> make</c><00:08:22.029><c> smarter</c><00:08:22.539><c> decisions</c><00:08:22.569><c> for</c>

00:08:23.219 --> 00:08:23.229 align:start position:0%
can you can make smarter decisions for
 

00:08:23.229 --> 00:08:24.740 align:start position:0%
can you can make smarter decisions for
example<00:08:23.289><c> maybe</c><00:08:23.860><c> you</c><00:08:23.979><c> have</c><00:08:24.069><c> a</c><00:08:24.219><c> vector</c>

00:08:24.740 --> 00:08:24.750 align:start position:0%
example maybe you have a vector
 

00:08:24.750 --> 00:08:26.450 align:start position:0%
example maybe you have a vector
that<00:08:24.870><c> keeps</c><00:08:25.080><c> getting</c><00:08:25.320><c> all</c><00:08:25.590><c> resized</c><00:08:25.950><c> maybe</c><00:08:26.310><c> you</c>

00:08:26.450 --> 00:08:26.460 align:start position:0%
that keeps getting all resized maybe you
 

00:08:26.460 --> 00:08:28.610 align:start position:0%
that keeps getting all resized maybe you
can<00:08:26.670><c> define</c><00:08:27.420><c> that</c><00:08:27.600><c> size</c><00:08:27.810><c> ahead</c><00:08:28.080><c> of</c><00:08:28.200><c> time</c><00:08:28.410><c> or</c>

00:08:28.610 --> 00:08:28.620 align:start position:0%
can define that size ahead of time or
 

00:08:28.620 --> 00:08:29.660 align:start position:0%
can define that size ahead of time or
use<00:08:28.800><c> something</c><00:08:29.040><c> that</c><00:08:29.190><c> doesn't</c><00:08:29.310><c> quite</c>

00:08:29.660 --> 00:08:29.670 align:start position:0%
use something that doesn't quite
 

00:08:29.670 --> 00:08:32.060 align:start position:0%
use something that doesn't quite
allocate<00:08:30.180><c> as</c><00:08:30.300><c> much</c><00:08:30.480><c> memory</c><00:08:30.960><c> or</c><00:08:31.350><c> maybe</c><00:08:31.650><c> you</c><00:08:31.890><c> can</c>

00:08:32.060 --> 00:08:32.070 align:start position:0%
allocate as much memory or maybe you can
 

00:08:32.070 --> 00:08:34.159 align:start position:0%
allocate as much memory or maybe you can
write<00:08:32.280><c> a</c><00:08:32.520><c> memory</c><00:08:33.000><c> arena</c><00:08:33.419><c> or</c><00:08:33.659><c> something</c><00:08:34.050><c> like</c>

00:08:34.159 --> 00:08:34.169 align:start position:0%
write a memory arena or something like
 

00:08:34.169 --> 00:08:38.149 align:start position:0%
write a memory arena or something like
that<00:08:34.229><c> for</c><00:08:34.979><c> a</c><00:08:35.039><c> given</c><00:08:35.870><c> system</c><00:08:36.870><c> or</c><00:08:37.289><c> operation</c><00:08:38.039><c> or</c>

00:08:38.149 --> 00:08:38.159 align:start position:0%
that for a given system or operation or
 

00:08:38.159 --> 00:08:39.890 align:start position:0%
that for a given system or operation or
something<00:08:38.190><c> in</c><00:08:38.610><c> your</c><00:08:38.729><c> game</c><00:08:38.940><c> loop</c><00:08:39.150><c> so</c><00:08:39.659><c> that</c><00:08:39.690><c> you</c>

00:08:39.890 --> 00:08:39.900 align:start position:0%
something in your game loop so that you
 

00:08:39.900 --> 00:08:42.110 align:start position:0%
something in your game loop so that you
can<00:08:40.020><c> reduce</c><00:08:40.380><c> actual</c><00:08:41.099><c> memory</c><00:08:41.490><c> allocations</c>

00:08:42.110 --> 00:08:42.120 align:start position:0%
can reduce actual memory allocations
 

00:08:42.120 --> 00:08:43.730 align:start position:0%
can reduce actual memory allocations
that<00:08:42.240><c> keep</c><00:08:42.630><c> hitting</c><00:08:42.960><c> the</c><00:08:43.110><c> heap</c><00:08:43.320><c> it's</c><00:08:43.560><c> all</c>

00:08:43.730 --> 00:08:43.740 align:start position:0%
that keep hitting the heap it's all
 

00:08:43.740 --> 00:08:45.680 align:start position:0%
that keep hitting the heap it's all
seriously<00:08:44.159><c> useful</c><00:08:44.550><c> stuff</c><00:08:44.790><c> if</c><00:08:45.000><c> we</c><00:08:45.090><c> go</c><00:08:45.330><c> back</c><00:08:45.540><c> to</c>

00:08:45.680 --> 00:08:45.690 align:start position:0%
seriously useful stuff if we go back to
 

00:08:45.690 --> 00:08:47.780 align:start position:0%
seriously useful stuff if we go back to
this<00:08:45.780><c> little</c><00:08:46.050><c> example</c><00:08:46.500><c> of</c><00:08:46.680><c> ours</c><00:08:47.130><c> we</c><00:08:47.430><c> can</c><00:08:47.610><c> also</c>

00:08:47.780 --> 00:08:47.790 align:start position:0%
this little example of ours we can also
 

00:08:47.790 --> 00:08:50.090 align:start position:0%
this little example of ours we can also
write<00:08:48.120><c> the</c><00:08:48.330><c> matching</c><00:08:48.690><c> delete</c><00:08:49.080><c> operator</c><00:08:49.650><c> which</c>

00:08:50.090 --> 00:08:50.100 align:start position:0%
write the matching delete operator which
 

00:08:50.100 --> 00:08:51.980 align:start position:0%
write the matching delete operator which
just<00:08:50.370><c> looks</c><00:08:50.610><c> like</c><00:08:50.670><c> this</c><00:08:51.030><c> we</c><00:08:51.300><c> have</c><00:08:51.450><c> operator</c>

00:08:51.980 --> 00:08:51.990 align:start position:0%
just looks like this we have operator
 

00:08:51.990 --> 00:08:54.170 align:start position:0%
just looks like this we have operator
delete<00:08:52.440><c> and</c><00:08:52.800><c> then</c><00:08:53.010><c> a</c><00:08:53.070><c> pointer</c><00:08:53.640><c> to</c><00:08:53.670><c> the</c><00:08:53.850><c> memory</c>

00:08:54.170 --> 00:08:54.180 align:start position:0%
delete and then a pointer to the memory
 

00:08:54.180 --> 00:08:55.760 align:start position:0%
delete and then a pointer to the memory
that<00:08:54.360><c> we</c><00:08:54.450><c> want</c><00:08:54.660><c> to</c><00:08:54.690><c> delete</c><00:08:55.050><c> and</c><00:08:55.410><c> what</c><00:08:55.530><c> we</c><00:08:55.620><c> can</c>

00:08:55.760 --> 00:08:55.770 align:start position:0%
that we want to delete and what we can
 

00:08:55.770 --> 00:08:58.730 align:start position:0%
that we want to delete and what we can
do<00:08:55.860><c> here</c><00:08:56.160><c> is</c><00:08:56.370><c> just</c><00:08:56.700><c> type</c><00:08:57.120><c> in</c><00:08:57.330><c> free</c><00:08:57.720><c> memory</c><00:08:58.500><c> and</c>

00:08:58.730 --> 00:08:58.740 align:start position:0%
do here is just type in free memory and
 

00:08:58.740 --> 00:09:01.220 align:start position:0%
do here is just type in free memory and
that's<00:08:59.310><c> really</c><00:08:59.640><c> all</c><00:08:59.940><c> there</c><00:09:00.120><c> is</c><00:09:00.330><c> to</c><00:09:00.570><c> it</c><00:09:00.750><c> now</c><00:09:01.140><c> if</c>

00:09:01.220 --> 00:09:01.230 align:start position:0%
that's really all there is to it now if
 

00:09:01.230 --> 00:09:03.290 align:start position:0%
that's really all there is to it now if
we<00:09:01.350><c> put</c><00:09:01.500><c> a</c><00:09:01.530><c> breakpoint</c><00:09:01.800><c> here</c><00:09:02.130><c> and</c><00:09:02.640><c> we</c><00:09:03.060><c> maybe</c>

00:09:03.290 --> 00:09:03.300 align:start position:0%
we put a breakpoint here and we maybe
 

00:09:03.300 --> 00:09:06.260 align:start position:0%
we put a breakpoint here and we maybe
take<00:09:04.170><c> this</c><00:09:04.410><c> unique</c><00:09:04.740><c> pointer</c><00:09:05.220><c> and</c><00:09:05.460><c> put</c><00:09:06.000><c> it</c><00:09:06.090><c> into</c>

00:09:06.260 --> 00:09:06.270 align:start position:0%
take this unique pointer and put it into
 

00:09:06.270 --> 00:09:08.270 align:start position:0%
take this unique pointer and put it into
a<00:09:06.300><c> little</c><00:09:06.390><c> scope</c><00:09:06.780><c> here</c><00:09:07.170><c> what</c><00:09:07.650><c> you</c><00:09:07.770><c> should</c><00:09:07.980><c> see</c>

00:09:08.270 --> 00:09:08.280 align:start position:0%
a little scope here what you should see
 

00:09:08.280 --> 00:09:10.370 align:start position:0%
a little scope here what you should see
is<00:09:08.550><c> this</c><00:09:08.940><c> operator</c><00:09:09.390><c> delete</c><00:09:09.750><c> being</c><00:09:10.020><c> called</c>

00:09:10.370 --> 00:09:10.380 align:start position:0%
is this operator delete being called
 

00:09:10.380 --> 00:09:12.650 align:start position:0%
is this operator delete being called
from<00:09:10.980><c> this</c><00:09:11.400><c> main</c><00:09:11.610><c> function</c><00:09:11.880><c> after</c><00:09:12.510><c> this</c>

00:09:12.650 --> 00:09:12.660 align:start position:0%
from this main function after this
 

00:09:12.660 --> 00:09:14.390 align:start position:0%
from this main function after this
unique<00:09:12.930><c> pointer</c><00:09:13.290><c> is</c><00:09:13.440><c> destroyed</c><00:09:13.950><c> and</c><00:09:14.190><c> you</c><00:09:14.280><c> can</c>

00:09:14.390 --> 00:09:14.400 align:start position:0%
unique pointer is destroyed and you can
 

00:09:14.400 --> 00:09:16.040 align:start position:0%
unique pointer is destroyed and you can
see<00:09:14.550><c> that</c><00:09:14.730><c> is</c><00:09:14.820><c> the</c><00:09:14.970><c> actual</c><00:09:15.240><c> destructor</c><00:09:15.870><c> of</c>

00:09:16.040 --> 00:09:16.050 align:start position:0%
see that is the actual destructor of
 

00:09:16.050 --> 00:09:17.630 align:start position:0%
see that is the actual destructor of
this<00:09:16.260><c> unique</c><00:09:16.590><c> pointer</c><00:09:17.070><c> here</c><00:09:17.340><c> that</c><00:09:17.520><c> is</c>

00:09:17.630 --> 00:09:17.640 align:start position:0%
this unique pointer here that is
 

00:09:17.640 --> 00:09:20.030 align:start position:0%
this unique pointer here that is
actually<00:09:17.820><c> deleting</c><00:09:18.540><c> our</c><00:09:18.720><c> underlying</c><00:09:19.500><c> raw</c>

00:09:20.030 --> 00:09:20.040 align:start position:0%
actually deleting our underlying raw
 

00:09:20.040 --> 00:09:21.620 align:start position:0%
actually deleting our underlying raw
pointer<00:09:20.520><c> now</c><00:09:20.790><c> if</c><00:09:20.880><c> we</c><00:09:20.970><c> go</c><00:09:21.090><c> back</c><00:09:21.120><c> here</c><00:09:21.450><c> you'll</c>

00:09:21.620 --> 00:09:21.630 align:start position:0%
pointer now if we go back here you'll
 

00:09:21.630 --> 00:09:22.760 align:start position:0%
pointer now if we go back here you'll
learn<00:09:21.660><c> is</c><00:09:21.900><c> that</c><00:09:22.020><c> this</c><00:09:22.170><c> of</c><00:09:22.320><c> course</c><00:09:22.530><c> doesn't</c>

00:09:22.760 --> 00:09:22.770 align:start position:0%
learn is that this of course doesn't
 

00:09:22.770 --> 00:09:24.710 align:start position:0%
learn is that this of course doesn't
actually<00:09:23.130><c> contain</c><00:09:23.820><c> information</c><00:09:24.300><c> about</c><00:09:24.570><c> the</c>

00:09:24.710 --> 00:09:24.720 align:start position:0%
actually contain information about the
 

00:09:24.720 --> 00:09:26.480 align:start position:0%
actually contain information about the
size<00:09:25.080><c> so</c><00:09:25.380><c> we</c><00:09:25.470><c> can't</c><00:09:25.680><c> really</c><00:09:25.830><c> print</c><00:09:26.070><c> anything</c>

00:09:26.480 --> 00:09:26.490 align:start position:0%
size so we can't really print anything
 

00:09:26.490 --> 00:09:28.460 align:start position:0%
size so we can't really print anything
like<00:09:26.640><c> this</c><00:09:26.850><c> well</c><00:09:27.600><c> I</c><00:09:27.630><c> mean</c><00:09:27.840><c> we</c><00:09:27.990><c> can</c><00:09:28.170><c> we</c><00:09:28.440><c> just</c>

00:09:28.460 --> 00:09:28.470 align:start position:0%
like this well I mean we can we just
 

00:09:28.470 --> 00:09:30.740 align:start position:0%
like this well I mean we can we just
have<00:09:28.740><c> to</c><00:09:28.860><c> add</c><00:09:29.040><c> that</c><00:09:29.220><c> parameter</c><00:09:29.550><c> in</c><00:09:29.940><c> because</c><00:09:30.420><c> at</c>

00:09:30.740 --> 00:09:30.750 align:start position:0%
have to add that parameter in because at
 

00:09:30.750 --> 00:09:32.030 align:start position:0%
have to add that parameter in because at
the<00:09:30.930><c> core</c><00:09:31.140><c> this</c><00:09:31.320><c> delete</c><00:09:31.589><c> operator</c><00:09:31.830><c> doesn't</c>

00:09:32.030 --> 00:09:32.040 align:start position:0%
the core this delete operator doesn't
 

00:09:32.040 --> 00:09:34.070 align:start position:0%
the core this delete operator doesn't
really<00:09:32.280><c> need</c><00:09:32.490><c> size</c><00:09:32.820><c> information</c><00:09:33.150><c> but</c><00:09:33.690><c> you</c><00:09:33.870><c> can</c>

00:09:34.070 --> 00:09:34.080 align:start position:0%
really need size information but you can
 

00:09:34.080 --> 00:09:36.020 align:start position:0%
really need size information but you can
optionally<00:09:34.230><c> obtain</c><00:09:35.070><c> that</c><00:09:35.160><c> information</c><00:09:35.220><c> by</c>

00:09:36.020 --> 00:09:36.030 align:start position:0%
optionally obtain that information by
 

00:09:36.030 --> 00:09:38.000 align:start position:0%
optionally obtain that information by
just<00:09:36.060><c> overriding</c><00:09:37.020><c> this</c><00:09:37.260><c> specific</c><00:09:37.830><c> function</c>

00:09:38.000 --> 00:09:38.010 align:start position:0%
just overriding this specific function
 

00:09:38.010 --> 00:09:40.010 align:start position:0%
just overriding this specific function
signature<00:09:38.640><c> so</c><00:09:39.000><c> now</c><00:09:39.240><c> if</c><00:09:39.390><c> we</c><00:09:39.450><c> take</c><00:09:39.540><c> a</c><00:09:39.720><c> look</c><00:09:39.900><c> at</c>

00:09:40.010 --> 00:09:40.020 align:start position:0%
signature so now if we take a look at
 

00:09:40.020 --> 00:09:41.570 align:start position:0%
signature so now if we take a look at
this<00:09:40.170><c> and</c><00:09:40.350><c> we</c><00:09:40.410><c> just</c><00:09:40.589><c> let</c><00:09:40.860><c> our</c><00:09:40.980><c> program</c><00:09:41.370><c> run</c>

00:09:41.570 --> 00:09:41.580 align:start position:0%
this and we just let our program run
 

00:09:41.580 --> 00:09:43.820 align:start position:0%
this and we just let our program run
naturally<00:09:42.240><c> making</c><00:09:43.020><c> sure</c><00:09:43.290><c> that</c><00:09:43.530><c> I</c><00:09:43.589><c> actually</c>

00:09:43.820 --> 00:09:43.830 align:start position:0%
naturally making sure that I actually
 

00:09:43.830 --> 00:09:46.160 align:start position:0%
naturally making sure that I actually
write<00:09:44.190><c> something</c><00:09:44.460><c> like</c><00:09:44.610><c> freeing</c><00:09:45.180><c> you</c><00:09:45.870><c> can</c><00:09:46.020><c> see</c>

00:09:46.160 --> 00:09:46.170 align:start position:0%
write something like freeing you can see
 

00:09:46.170 --> 00:09:48.140 align:start position:0%
write something like freeing you can see
that<00:09:46.320><c> now</c><00:09:46.440><c> we</c><00:09:46.470><c> allocate</c><00:09:47.040><c> 12</c><00:09:47.280><c> bytes</c><00:09:47.460><c> we</c><00:09:47.730><c> free</c><00:09:47.940><c> 12</c>

00:09:48.140 --> 00:09:48.150 align:start position:0%
that now we allocate 12 bytes we free 12
 

00:09:48.150 --> 00:09:49.850 align:start position:0%
that now we allocate 12 bytes we free 12
bytes<00:09:48.360><c> we</c><00:09:48.600><c> allocate</c><00:09:48.870><c> another</c><00:09:49.020><c> 8</c><00:09:49.230><c> bytes</c><00:09:49.500><c> and</c><00:09:49.710><c> we</c>

00:09:49.850 --> 00:09:49.860 align:start position:0%
bytes we allocate another 8 bytes and we
 

00:09:49.860 --> 00:09:52.970 align:start position:0%
bytes we allocate another 8 bytes and we
free<00:09:50.190><c> 8</c><00:09:50.490><c> bytes</c><00:09:50.940><c> so</c><00:09:51.690><c> now</c><00:09:51.839><c> using</c><00:09:52.200><c> these</c><00:09:52.650><c> two</c>

00:09:52.970 --> 00:09:52.980 align:start position:0%
free 8 bytes so now using these two
 

00:09:52.980 --> 00:09:55.130 align:start position:0%
free 8 bytes so now using these two
functions<00:09:53.520><c> we</c><00:09:53.760><c> can</c><00:09:53.910><c> create</c><00:09:54.270><c> some</c><00:09:54.630><c> sort</c><00:09:54.990><c> of</c>

00:09:55.130 --> 00:09:55.140 align:start position:0%
functions we can create some sort of
 

00:09:55.140 --> 00:09:57.520 align:start position:0%
functions we can create some sort of
allocation<00:09:56.130><c> tracker</c><00:09:56.460><c> we</c><00:09:57.150><c> can</c><00:09:57.330><c> maintain</c>

00:09:57.520 --> 00:09:57.530 align:start position:0%
allocation tracker we can maintain
 

00:09:57.530 --> 00:09:59.870 align:start position:0%
allocation tracker we can maintain
allocation<00:09:58.530><c> metrics</c><00:09:59.100><c> we</c><00:09:59.280><c> can</c><00:09:59.430><c> find</c><00:09:59.700><c> out</c>

00:09:59.870 --> 00:09:59.880 align:start position:0%
allocation metrics we can find out
 

00:09:59.880 --> 00:10:01.460 align:start position:0%
allocation metrics we can find out
exactly<00:10:00.030><c> how</c><00:10:00.450><c> much</c><00:10:00.600><c> memory</c><00:10:00.960><c> is</c><00:10:01.020><c> being</c><00:10:01.200><c> used</c>

00:10:01.460 --> 00:10:01.470 align:start position:0%
exactly how much memory is being used
 

00:10:01.470 --> 00:10:03.050 align:start position:0%
exactly how much memory is being used
how<00:10:01.710><c> much</c><00:10:01.770><c> is</c><00:10:02.010><c> being</c><00:10:02.040><c> allocated</c><00:10:02.400><c> how</c><00:10:02.820><c> much</c><00:10:02.940><c> is</c>

00:10:03.050 --> 00:10:03.060 align:start position:0%
how much is being allocated how much is
 

00:10:03.060 --> 00:10:04.850 align:start position:0%
how much is being allocated how much is
being<00:10:03.089><c> freed</c><00:10:03.450><c> all</c><00:10:03.660><c> of</c><00:10:04.080><c> that</c><00:10:04.230><c> stuff</c><00:10:04.500><c> which</c><00:10:04.710><c> of</c>

00:10:04.850 --> 00:10:04.860 align:start position:0%
being freed all of that stuff which of
 

00:10:04.860 --> 00:10:06.590 align:start position:0%
being freed all of that stuff which of
course<00:10:05.070><c> becomes</c><00:10:05.400><c> really</c><00:10:05.760><c> useful</c><00:10:05.850><c> so</c><00:10:06.450><c> what</c>

00:10:06.590 --> 00:10:06.600 align:start position:0%
course becomes really useful so what
 

00:10:06.600 --> 00:10:07.850 align:start position:0%
course becomes really useful so what
I'll<00:10:06.690><c> do</c><00:10:06.870><c> is</c><00:10:07.050><c> I'll</c><00:10:07.170><c> come</c><00:10:07.200><c> up</c><00:10:07.440><c> here</c><00:10:07.650><c> and</c><00:10:07.740><c> I'll</c>

00:10:07.850 --> 00:10:07.860 align:start position:0%
I'll do is I'll come up here and I'll
 

00:10:07.860 --> 00:10:10.370 align:start position:0%
I'll do is I'll come up here and I'll
write<00:10:08.040><c> a</c><00:10:08.070><c> struct</c><00:10:08.490><c> called</c><00:10:08.880><c> allocation</c><00:10:09.480><c> metrics</c>

00:10:10.370 --> 00:10:10.380 align:start position:0%
write a struct called allocation metrics
 

00:10:10.380 --> 00:10:13.700 align:start position:0%
write a struct called allocation metrics
this<00:10:10.920><c> will</c><00:10:11.100><c> contain</c><00:10:11.460><c> a</c><00:10:11.730><c> UN</c><00:10:12.330><c> 32t</c><00:10:13.200><c> which</c><00:10:13.410><c> will</c><00:10:13.589><c> be</c>

00:10:13.700 --> 00:10:13.710 align:start position:0%
this will contain a UN 32t which will be
 

00:10:13.710 --> 00:10:16.160 align:start position:0%
this will contain a UN 32t which will be
our<00:10:13.950><c> total</c><00:10:14.280><c> allocated</c><00:10:15.000><c> memory</c><00:10:15.120><c> as</c><00:10:15.839><c> well</c><00:10:16.110><c> as</c>

00:10:16.160 --> 00:10:16.170 align:start position:0%
our total allocated memory as well as
 

00:10:16.170 --> 00:10:18.980 align:start position:0%
our total allocated memory as well as
our<00:10:16.740><c> total</c><00:10:17.310><c> freed</c><00:10:18.240><c> memory</c>

00:10:18.980 --> 00:10:18.990 align:start position:0%
our total freed memory
 

00:10:18.990 --> 00:10:20.390 align:start position:0%
our total freed memory
I'll<00:10:19.290><c> also</c><00:10:19.470><c> write</c><00:10:19.710><c> a</c><00:10:19.740><c> little</c><00:10:19.980><c> function</c><00:10:20.010><c> here</c>

00:10:20.390 --> 00:10:20.400 align:start position:0%
I'll also write a little function here
 

00:10:20.400 --> 00:10:24.079 align:start position:0%
I'll also write a little function here
that<00:10:20.760><c> tells</c><00:10:21.060><c> us</c><00:10:21.240><c> our</c><00:10:21.450><c> current</c><00:10:22.380><c> usage</c><00:10:22.910><c> and</c><00:10:23.910><c> this</c>

00:10:24.079 --> 00:10:24.089 align:start position:0%
that tells us our current usage and this
 

00:10:24.089 --> 00:10:27.350 align:start position:0%
that tells us our current usage and this
will<00:10:24.300><c> just</c><00:10:24.420><c> be</c><00:10:24.720><c> turtle</c><00:10:25.470><c> allocated</c><00:10:26.130><c> -</c><00:10:26.520><c> turtle</c><00:10:26.970><c> 3</c>

00:10:27.350 --> 00:10:27.360 align:start position:0%
will just be turtle allocated - turtle 3
 

00:10:27.360 --> 00:10:29.260 align:start position:0%
will just be turtle allocated - turtle 3
I'll<00:10:28.020><c> create</c><00:10:28.410><c> a</c><00:10:28.530><c> little</c><00:10:28.710><c> static</c>

00:10:29.260 --> 00:10:29.270 align:start position:0%
I'll create a little static
 

00:10:29.270 --> 00:10:32.410 align:start position:0%
I'll create a little static
instance<00:10:29.600><c> of</c><00:10:29.840><c> this</c><00:10:30.400><c> struct</c><00:10:31.400><c> here</c><00:10:31.730><c> and</c><00:10:32.030><c> then</c>

00:10:32.410 --> 00:10:32.420 align:start position:0%
instance of this struct here and then
 

00:10:32.420 --> 00:10:33.550 align:start position:0%
instance of this struct here and then
instead<00:10:32.690><c> of</c><00:10:32.750><c> printing</c><00:10:33.200><c> this</c><00:10:33.320><c> whole</c>

00:10:33.550 --> 00:10:33.560 align:start position:0%
instead of printing this whole
 

00:10:33.560 --> 00:10:35.350 align:start position:0%
instead of printing this whole
allocation<00:10:34.160><c> thing</c><00:10:34.430><c> I'll</c><00:10:34.700><c> just</c><00:10:34.730><c> say</c><00:10:35.000><c> s</c>

00:10:35.350 --> 00:10:35.360 align:start position:0%
allocation thing I'll just say s
 

00:10:35.360 --> 00:10:38.110 align:start position:0%
allocation thing I'll just say s
allocation<00:10:35.930><c> metrics</c><00:10:36.380><c> turtle</c><00:10:37.250><c> allocated</c><00:10:37.850><c> plus</c>

00:10:38.110 --> 00:10:38.120 align:start position:0%
allocation metrics turtle allocated plus
 

00:10:38.120 --> 00:10:40.510 align:start position:0%
allocation metrics turtle allocated plus
equal<00:10:38.450><c> size</c><00:10:38.720><c> inside</c><00:10:39.320><c> out</c><00:10:39.530><c> operating</c><00:10:40.010><c> you</c><00:10:40.190><c> and</c>

00:10:40.510 --> 00:10:40.520 align:start position:0%
equal size inside out operating you and
 

00:10:40.520 --> 00:10:43.300 align:start position:0%
equal size inside out operating you and
then<00:10:41.120><c> I'll</c><00:10:41.210><c> do</c><00:10:41.330><c> the</c><00:10:41.360><c> same</c><00:10:41.630><c> thing</c><00:10:41.900><c> for</c><00:10:42.380><c> the</c>

00:10:43.300 --> 00:10:43.310 align:start position:0%
then I'll do the same thing for the
 

00:10:43.310 --> 00:10:45.040 align:start position:0%
then I'll do the same thing for the
delete<00:10:43.610><c> operator</c><00:10:44.060><c> but</c><00:10:44.300><c> of</c><00:10:44.390><c> course</c><00:10:44.600><c> that'll</c><00:10:44.930><c> be</c>

00:10:45.040 --> 00:10:45.050 align:start position:0%
delete operator but of course that'll be
 

00:10:45.050 --> 00:10:47.410 align:start position:0%
delete operator but of course that'll be
our<00:10:45.200><c> turtle</c><00:10:45.620><c> breed</c><00:10:46.100><c> so</c><00:10:46.460><c> now</c><00:10:46.580><c> what</c><00:10:46.760><c> I</c><00:10:46.790><c> can</c><00:10:46.970><c> do</c><00:10:47.150><c> is</c>

00:10:47.410 --> 00:10:47.420 align:start position:0%
our turtle breed so now what I can do is
 

00:10:47.420 --> 00:10:49.980 align:start position:0%
our turtle breed so now what I can do is
maybe<00:10:48.260><c> write</c><00:10:48.620><c> a</c><00:10:48.650><c> function</c><00:10:48.950><c> called</c><00:10:49.580><c> print</c>

00:10:49.980 --> 00:10:49.990 align:start position:0%
maybe write a function called print
 

00:10:49.990 --> 00:10:53.800 align:start position:0%
maybe write a function called print
usage<00:10:51.730><c> culture</c><00:10:52.730><c> and</c><00:10:52.820><c> memory</c><00:10:53.090><c> usage</c><00:10:53.390><c> so</c><00:10:53.570><c> small</c>

00:10:53.800 --> 00:10:53.810 align:start position:0%
usage culture and memory usage so small
 

00:10:53.810 --> 00:10:56.860 align:start position:0%
usage culture and memory usage so small
clear<00:10:54.080><c> and</c><00:10:54.380><c> this</c><00:10:54.770><c> will</c><00:10:54.980><c> simply</c><00:10:55.660><c> output</c><00:10:56.660><c> our</c>

00:10:56.860 --> 00:10:56.870 align:start position:0%
clear and this will simply output our
 

00:10:56.870 --> 00:11:00.880 align:start position:0%
clear and this will simply output our
memory<00:10:57.380><c> usage</c><00:10:58.900><c> which</c><00:10:59.900><c> will</c><00:11:00.050><c> be</c><00:11:00.170><c> s</c><00:11:00.290><c> allocation</c>

00:11:00.880 --> 00:11:00.890 align:start position:0%
memory usage which will be s allocation
 

00:11:00.890 --> 00:11:06.220 align:start position:0%
memory usage which will be s allocation
metrics<00:11:01.220><c> current</c><00:11:01.700><c> usage</c><00:11:03.040><c> bytes</c><00:11:04.750><c> ok</c><00:11:05.750><c> cool</c><00:11:05.990><c> so</c>

00:11:06.220 --> 00:11:06.230 align:start position:0%
metrics current usage bytes ok cool so
 

00:11:06.230 --> 00:11:08.320 align:start position:0%
metrics current usage bytes ok cool so
now<00:11:06.260><c> I</c><00:11:06.410><c> can</c><00:11:06.680><c> print</c><00:11:06.950><c> my</c><00:11:07.040><c> memory</c><00:11:07.340><c> usage</c><00:11:07.670><c> at</c><00:11:08.090><c> the</c>

00:11:08.320 --> 00:11:08.330 align:start position:0%
now I can print my memory usage at the
 

00:11:08.330 --> 00:11:10.420 align:start position:0%
now I can print my memory usage at the
start<00:11:08.630><c> I</c><00:11:08.900><c> can</c><00:11:09.320><c> print</c><00:11:09.530><c> it</c><00:11:09.680><c> off</c><00:11:09.800><c> to</c><00:11:09.950><c> allocating</c>

00:11:10.420 --> 00:11:10.430 align:start position:0%
start I can print it off to allocating
 

00:11:10.430 --> 00:11:12.400 align:start position:0%
start I can print it off to allocating
this<00:11:10.550><c> object</c><00:11:10.790><c> I</c><00:11:11.270><c> might</c><00:11:11.660><c> move</c><00:11:11.810><c> this</c><00:11:11.990><c> string</c><00:11:12.260><c> up</c>

00:11:12.400 --> 00:11:12.410 align:start position:0%
this object I might move this string up
 

00:11:12.410 --> 00:11:13.900 align:start position:0%
this object I might move this string up
to<00:11:12.440><c> make</c><00:11:12.740><c> it</c><00:11:12.770><c> a</c><00:11:12.920><c> little</c><00:11:13.040><c> bit</c><00:11:13.220><c> more</c><00:11:13.340><c> interesting</c>

00:11:13.900 --> 00:11:13.910 align:start position:0%
to make it a little bit more interesting
 

00:11:13.910 --> 00:11:15.670 align:start position:0%
to make it a little bit more interesting
and<00:11:14.150><c> I'll</c><00:11:14.300><c> just</c><00:11:14.540><c> I'll</c><00:11:15.050><c> just</c><00:11:15.080><c> put</c><00:11:15.560><c> these</c>

00:11:15.670 --> 00:11:15.680 align:start position:0%
and I'll just I'll just put these
 

00:11:15.680 --> 00:11:16.840 align:start position:0%
and I'll just I'll just put these
everywhere<00:11:16.100><c> let's</c><00:11:16.310><c> just</c><00:11:16.430><c> run</c><00:11:16.550><c> this</c><00:11:16.670><c> program</c>

00:11:16.840 --> 00:11:16.850 align:start position:0%
everywhere let's just run this program
 

00:11:16.850 --> 00:11:18.370 align:start position:0%
everywhere let's just run this program
so<00:11:17.240><c> now</c><00:11:17.360><c> you</c><00:11:17.420><c> can</c><00:11:17.570><c> see</c><00:11:17.690><c> that</c><00:11:17.840><c> at</c><00:11:17.930><c> the</c><00:11:18.050><c> beginning</c>

00:11:18.370 --> 00:11:18.380 align:start position:0%
so now you can see that at the beginning
 

00:11:18.380 --> 00:11:20.560 align:start position:0%
so now you can see that at the beginning
we're<00:11:18.800><c> not</c><00:11:19.010><c> using</c><00:11:19.220><c> any</c><00:11:19.520><c> memory</c><00:11:20.000><c> then</c><00:11:20.330><c> we've</c>

00:11:20.560 --> 00:11:20.570 align:start position:0%
we're not using any memory then we've
 

00:11:20.570 --> 00:11:22.840 align:start position:0%
we're not using any memory then we've
allocated<00:11:20.780><c> 8</c><00:11:21.320><c> bytes</c><00:11:21.590><c> for</c><00:11:21.980><c> this</c><00:11:22.130><c> actual</c><00:11:22.490><c> string</c>

00:11:22.840 --> 00:11:22.850 align:start position:0%
allocated 8 bytes for this actual string
 

00:11:22.850 --> 00:11:25.150 align:start position:0%
allocated 8 bytes for this actual string
then<00:11:23.510><c> we've</c><00:11:23.630><c> allocated</c><00:11:23.780><c> another</c><00:11:24.500><c> 12</c><00:11:24.860><c> bytes</c>

00:11:25.150 --> 00:11:25.160 align:start position:0%
then we've allocated another 12 bytes
 

00:11:25.160 --> 00:11:26.830 align:start position:0%
then we've allocated another 12 bytes
for<00:11:25.580><c> these</c><00:11:25.700><c> three</c><00:11:25.970><c> integers</c><00:11:26.300><c> because</c><00:11:26.600><c> we</c><00:11:26.720><c> have</c>

00:11:26.830 --> 00:11:26.840 align:start position:0%
for these three integers because we have
 

00:11:26.840 --> 00:11:28.210 align:start position:0%
for these three integers because we have
three<00:11:27.290><c> integers</c><00:11:27.590><c> three</c><00:11:27.800><c> times</c><00:11:27.980><c> four</c><00:11:28.190><c> is</c>

00:11:28.210 --> 00:11:28.220 align:start position:0%
three integers three times four is
 

00:11:28.220 --> 00:11:30.190 align:start position:0%
three integers three times four is
twelve<00:11:28.550><c> and</c><00:11:28.820><c> then</c><00:11:29.270><c> finally</c><00:11:29.720><c> we're</c><00:11:29.870><c> back</c><00:11:30.020><c> down</c>

00:11:30.190 --> 00:11:30.200 align:start position:0%
twelve and then finally we're back down
 

00:11:30.200 --> 00:11:32.080 align:start position:0%
twelve and then finally we're back down
to<00:11:30.260><c> eight</c><00:11:30.560><c> bytes</c><00:11:30.950><c> after</c><00:11:31.220><c> the</c><00:11:31.580><c> scope</c><00:11:31.850><c> ends</c>

00:11:32.080 --> 00:11:32.090 align:start position:0%
to eight bytes after the scope ends
 

00:11:32.090 --> 00:11:34.270 align:start position:0%
to eight bytes after the scope ends
because<00:11:32.420><c> we've</c><00:11:32.840><c> freed</c><00:11:33.170><c> our</c><00:11:33.470><c> unique</c><00:11:33.830><c> pointer</c>

00:11:34.270 --> 00:11:34.280 align:start position:0%
because we've freed our unique pointer
 

00:11:34.280 --> 00:11:36.220 align:start position:0%
because we've freed our unique pointer
pretty<00:11:34.670><c> cool</c><00:11:34.940><c> stuff</c><00:11:35.300><c> anyway</c><00:11:35.930><c> if</c><00:11:36.020><c> you</c><00:11:36.110><c> guys</c>

00:11:36.220 --> 00:11:36.230 align:start position:0%
pretty cool stuff anyway if you guys
 

00:11:36.230 --> 00:11:38.020 align:start position:0%
pretty cool stuff anyway if you guys
found<00:11:36.470><c> this</c><00:11:36.680><c> helpful</c><00:11:36.740><c> go</c><00:11:37.400><c> ahead</c><00:11:37.610><c> and</c><00:11:37.760><c> throw</c>

00:11:38.020 --> 00:11:38.030 align:start position:0%
found this helpful go ahead and throw
 

00:11:38.030 --> 00:11:40.510 align:start position:0%
found this helpful go ahead and throw
this<00:11:38.180><c> into</c><00:11:38.540><c> your</c><00:11:38.720><c> own</c><00:11:38.780><c> programs</c><00:11:39.530><c> and</c><00:11:39.890><c> actually</c>

00:11:40.510 --> 00:11:40.520 align:start position:0%
this into your own programs and actually
 

00:11:40.520 --> 00:11:42.220 align:start position:0%
this into your own programs and actually
test<00:11:40.820><c> it</c><00:11:40.970><c> out</c><00:11:41.120><c> and</c><00:11:41.360><c> see</c><00:11:41.540><c> it</c><00:11:41.630><c> in</c><00:11:41.750><c> action</c>

00:11:42.220 --> 00:11:42.230 align:start position:0%
test it out and see it in action
 

00:11:42.230 --> 00:11:44.170 align:start position:0%
test it out and see it in action
I<00:11:42.350><c> do</c><00:11:42.470><c> want</c><00:11:42.800><c> to</c><00:11:42.830><c> make</c><00:11:42.950><c> a</c><00:11:43.010><c> note</c><00:11:43.310><c> that</c><00:11:43.490><c> of</c><00:11:43.880><c> course</c>

00:11:44.170 --> 00:11:44.180 align:start position:0%
I do want to make a note that of course
 

00:11:44.180 --> 00:11:46.810 align:start position:0%
I do want to make a note that of course
you<00:11:44.480><c> could</c><00:11:44.840><c> use</c><00:11:45.080><c> tools</c><00:11:45.890><c> for</c><00:11:46.340><c> this</c><00:11:46.520><c> you</c><00:11:46.790><c> don't</c>

00:11:46.810 --> 00:11:46.820 align:start position:0%
you could use tools for this you don't
 

00:11:46.820 --> 00:11:48.550 align:start position:0%
you could use tools for this you don't
have<00:11:47.090><c> to</c><00:11:47.270><c> write</c><00:11:47.720><c> code</c><00:11:47.750><c> that</c><00:11:48.230><c> does</c><00:11:48.380><c> this</c>

00:11:48.550 --> 00:11:48.560 align:start position:0%
have to write code that does this
 

00:11:48.560 --> 00:11:50.140 align:start position:0%
have to write code that does this
yourself<00:11:49.040><c> you</c><00:11:49.160><c> could</c><00:11:49.310><c> use</c><00:11:49.520><c> visual</c><00:11:49.790><c> studios</c>

00:11:50.140 --> 00:11:50.150 align:start position:0%
yourself you could use visual studios
 

00:11:50.150 --> 00:11:52.300 align:start position:0%
yourself you could use visual studios
built-in<00:11:50.600><c> kind</c><00:11:51.230><c> of</c><00:11:51.320><c> memory</c><00:11:51.710><c> allocation</c>

00:11:52.300 --> 00:11:52.310 align:start position:0%
built-in kind of memory allocation
 

00:11:52.310 --> 00:11:53.830 align:start position:0%
built-in kind of memory allocation
tracking<00:11:52.790><c> profiling</c><00:11:53.360><c> tools</c><00:11:53.600><c> whatever</c>

00:11:53.830 --> 00:11:53.840 align:start position:0%
tracking profiling tools whatever
 

00:11:53.840 --> 00:11:54.460 align:start position:0%
tracking profiling tools whatever
they're<00:11:54.110><c> called</c>

00:11:54.460 --> 00:11:54.470 align:start position:0%
they're called
 

00:11:54.470 --> 00:11:57.640 align:start position:0%
they're called
valgrind<00:11:55.100><c> also</c><00:11:55.760><c> has</c><00:11:55.910><c> some</c><00:11:56.150><c> nice</c><00:11:56.360><c> tools</c><00:11:57.320><c> for</c>

00:11:57.640 --> 00:11:57.650 align:start position:0%
valgrind also has some nice tools for
 

00:11:57.650 --> 00:11:59.410 align:start position:0%
valgrind also has some nice tools for
tracking<00:11:58.100><c> memory</c><00:11:58.610><c> and</c><00:11:58.850><c> seeing</c><00:11:59.120><c> where</c><00:11:59.300><c> it's</c>

00:11:59.410 --> 00:11:59.420 align:start position:0%
tracking memory and seeing where it's
 

00:11:59.420 --> 00:12:01.270 align:start position:0%
tracking memory and seeing where it's
coming<00:11:59.690><c> from</c><00:11:59.810><c> like</c><00:12:00.170><c> allocations</c><00:12:00.770><c> coming</c><00:12:01.130><c> from</c>

00:12:01.270 --> 00:12:01.280 align:start position:0%
coming from like allocations coming from
 

00:12:01.280 --> 00:12:03.070 align:start position:0%
coming from like allocations coming from
all<00:12:01.520><c> of</c><00:12:01.850><c> that</c><00:12:02.000><c> kind</c><00:12:02.210><c> of</c><00:12:02.300><c> stuff</c><00:12:02.540><c> so</c><00:12:02.570><c> there</c><00:12:02.960><c> are</c>

00:12:03.070 --> 00:12:03.080 align:start position:0%
all of that kind of stuff so there are
 

00:12:03.080 --> 00:12:04.480 align:start position:0%
all of that kind of stuff so there are
tools<00:12:03.320><c> available</c><00:12:03.440><c> out</c><00:12:03.950><c> there</c><00:12:04.010><c> and</c><00:12:04.250><c> I</c><00:12:04.370><c> might</c>

00:12:04.480 --> 00:12:04.490 align:start position:0%
tools available out there and I might
 

00:12:04.490 --> 00:12:06.100 align:start position:0%
tools available out there and I might
make<00:12:04.670><c> some</c><00:12:04.880><c> videos</c><00:12:05.150><c> on</c><00:12:05.300><c> them</c><00:12:05.420><c> in</c><00:12:05.600><c> the</c><00:12:05.690><c> future</c>

00:12:06.100 --> 00:12:06.110 align:start position:0%
make some videos on them in the future
 

00:12:06.110 --> 00:12:09.550 align:start position:0%
make some videos on them in the future
but<00:12:06.920><c> for</c><00:12:07.190><c> me</c><00:12:07.520><c> personally</c><00:12:07.850><c> this</c><00:12:08.540><c> is</c><00:12:08.780><c> a</c><00:12:09.200><c> very</c>

00:12:09.550 --> 00:12:09.560 align:start position:0%
but for me personally this is a very
 

00:12:09.560 --> 00:12:11.980 align:start position:0%
but for me personally this is a very
quick<00:12:09.740><c> and</c><00:12:09.800><c> dirty</c><00:12:10.280><c> way</c><00:12:10.430><c> to</c><00:12:10.610><c> actually</c><00:12:10.970><c> see</c><00:12:11.450><c> what</c>

00:12:11.980 --> 00:12:11.990 align:start position:0%
quick and dirty way to actually see what
 

00:12:11.990 --> 00:12:14.170 align:start position:0%
quick and dirty way to actually see what
is<00:12:12.170><c> actually</c><00:12:12.350><c> going</c><00:12:12.710><c> on</c><00:12:12.920><c> and</c><00:12:13.310><c> also</c><00:12:13.700><c> trace</c><00:12:14.030><c> it</c>

00:12:14.170 --> 00:12:14.180 align:start position:0%
is actually going on and also trace it
 

00:12:14.180 --> 00:12:15.700 align:start position:0%
is actually going on and also trace it
back<00:12:14.300><c> within</c><00:12:14.630><c> your</c><00:12:14.750><c> code</c><00:12:14.930><c> without</c><00:12:15.020><c> having</c><00:12:15.530><c> to</c>

00:12:15.700 --> 00:12:15.710 align:start position:0%
back within your code without having to
 

00:12:15.710 --> 00:12:18.040 align:start position:0%
back within your code without having to
kind<00:12:16.010><c> of</c><00:12:16.100><c> use</c><00:12:16.430><c> other</c><00:12:17.000><c> tools</c><00:12:17.420><c> they</c><00:12:17.750><c> are</c>

00:12:18.040 --> 00:12:18.050 align:start position:0%
kind of use other tools they are
 

00:12:18.050 --> 00:12:20.770 align:start position:0%
kind of use other tools they are
definitely<00:12:18.710><c> useful</c><00:12:19.100><c> and</c><00:12:19.580><c> I'm</c><00:12:20.300><c> not</c><00:12:20.510><c> saying</c>

00:12:20.770 --> 00:12:20.780 align:start position:0%
definitely useful and I'm not saying
 

00:12:20.780 --> 00:12:22.150 align:start position:0%
definitely useful and I'm not saying
that<00:12:20.930><c> you</c><00:12:21.110><c> shouldn't</c><00:12:21.320><c> use</c><00:12:21.560><c> them</c><00:12:21.770><c> all</c><00:12:22.010><c> I'm</c>

00:12:22.150 --> 00:12:22.160 align:start position:0%
that you shouldn't use them all I'm
 

00:12:22.160 --> 00:12:24.280 align:start position:0%
that you shouldn't use them all I'm
saying<00:12:22.430><c> is</c><00:12:22.610><c> that</c><00:12:22.640><c> sometimes</c><00:12:23.060><c> it's</c><00:12:23.510><c> just</c><00:12:23.750><c> a</c><00:12:23.990><c> lot</c>

00:12:24.280 --> 00:12:24.290 align:start position:0%
saying is that sometimes it's just a lot
 

00:12:24.290 --> 00:12:26.320 align:start position:0%
saying is that sometimes it's just a lot
easier<00:12:24.590><c> and</c><00:12:24.860><c> more</c><00:12:25.370><c> simple</c><00:12:25.790><c> to</c><00:12:25.940><c> just</c><00:12:26.150><c> write</c>

00:12:26.320 --> 00:12:26.330 align:start position:0%
easier and more simple to just write
 

00:12:26.330 --> 00:12:28.300 align:start position:0%
easier and more simple to just write
something<00:12:26.690><c> like</c><00:12:26.720><c> this</c><00:12:27.050><c> and</c><00:12:27.320><c> instantly</c><00:12:28.100><c> be</c>

00:12:28.300 --> 00:12:28.310 align:start position:0%
something like this and instantly be
 

00:12:28.310 --> 00:12:29.680 align:start position:0%
something like this and instantly be
able<00:12:28.340><c> to</c><00:12:28.580><c> see</c><00:12:28.880><c> exactly</c><00:12:29.240><c> where</c><00:12:29.600><c> those</c>

00:12:29.680 --> 00:12:29.690 align:start position:0%
able to see exactly where those
 

00:12:29.690 --> 00:12:31.600 align:start position:0%
able to see exactly where those
allocations<00:12:30.380><c> are</c><00:12:30.650><c> coming</c><00:12:30.980><c> from</c><00:12:31.130><c> and</c><00:12:31.370><c> this</c><00:12:31.490><c> is</c>

00:12:31.600 --> 00:12:31.610 align:start position:0%
allocations are coming from and this is
 

00:12:31.610 --> 00:12:33.310 align:start position:0%
allocations are coming from and this is
definitely<00:12:31.790><c> something</c><00:12:32.210><c> that</c><00:12:32.390><c> I</c><00:12:32.510><c> use</c><00:12:32.780><c> in</c><00:12:33.020><c> my</c>

00:12:33.310 --> 00:12:33.320 align:start position:0%
definitely something that I use in my
 

00:12:33.320 --> 00:12:35.260 align:start position:0%
definitely something that I use in my
own<00:12:33.590><c> technology</c><00:12:34.130><c> all</c><00:12:34.280><c> the</c><00:12:34.400><c> time</c><00:12:34.640><c> and</c><00:12:34.940><c> in</c><00:12:35.030><c> fact</c>

00:12:35.260 --> 00:12:35.270 align:start position:0%
own technology all the time and in fact
 

00:12:35.270 --> 00:12:37.530 align:start position:0%
own technology all the time and in fact
in<00:12:35.720><c> a</c><00:12:35.870><c> bigger</c><00:12:36.170><c> kind</c><00:12:36.440><c> of</c><00:12:36.650><c> game</c><00:12:36.890><c> engine</c><00:12:37.280><c> for</c>

00:12:37.530 --> 00:12:37.540 align:start position:0%
in a bigger kind of game engine for
 

00:12:37.540 --> 00:12:40.080 align:start position:0%
in a bigger kind of game engine for
you<00:12:38.020><c> would</c><00:12:38.170><c> probably</c><00:12:38.680><c> have</c><00:12:38.920><c> your</c><00:12:39.250><c> own</c><00:12:39.460><c> kind</c><00:12:39.970><c> of</c>

00:12:40.080 --> 00:12:40.090 align:start position:0%
you would probably have your own kind of
 

00:12:40.090 --> 00:12:41.640 align:start position:0%
you would probably have your own kind of
opera<00:12:40.420><c> new</c><00:12:40.660><c> operator</c><00:12:40.990><c> to</c><00:12:41.140><c> lead</c><00:12:41.290><c> all</c><00:12:41.440><c> that</c>

00:12:41.640 --> 00:12:41.650 align:start position:0%
opera new operator to lead all that
 

00:12:41.650 --> 00:12:44.220 align:start position:0%
opera new operator to lead all that
stuff<00:12:41.920><c> because</c><00:12:42.390><c> aside</c><00:12:43.390><c> from</c><00:12:43.450><c> having</c><00:12:43.900><c> to</c><00:12:44.020><c> just</c>

00:12:44.220 --> 00:12:44.230 align:start position:0%
stuff because aside from having to just
 

00:12:44.230 --> 00:12:45.840 align:start position:0%
stuff because aside from having to just
track<00:12:44.530><c> metrics</c><00:12:45.040><c> and</c><00:12:45.250><c> make</c><00:12:45.430><c> sure</c><00:12:45.580><c> that</c><00:12:45.670><c> that</c>

00:12:45.840 --> 00:12:45.850 align:start position:0%
track metrics and make sure that that
 

00:12:45.850 --> 00:12:48.120 align:start position:0%
track metrics and make sure that that
works<00:12:46.030><c> across</c><00:12:46.300><c> all</c><00:12:46.570><c> platforms</c><00:12:46.780><c> you</c><00:12:47.680><c> also</c><00:12:47.860><c> may</c>

00:12:48.120 --> 00:12:48.130 align:start position:0%
works across all platforms you also may
 

00:12:48.130 --> 00:12:50.010 align:start position:0%
works across all platforms you also may
want<00:12:48.160><c> to</c><00:12:48.430><c> control</c><00:12:48.760><c> exactly</c><00:12:49.030><c> where</c><00:12:49.420><c> that</c>

00:12:50.010 --> 00:12:50.020 align:start position:0%
want to control exactly where that
 

00:12:50.020 --> 00:12:51.630 align:start position:0%
want to control exactly where that
memory<00:12:50.470><c> is</c><00:12:50.680><c> coming</c><00:12:50.890><c> from</c><00:12:51.190><c> anyway</c><00:12:51.520><c> hope</c><00:12:51.610><c> you</c>

00:12:51.630 --> 00:12:51.640 align:start position:0%
memory is coming from anyway hope you
 

00:12:51.640 --> 00:12:52.860 align:start position:0%
memory is coming from anyway hope you
guys<00:12:51.790><c> enjoyed</c><00:12:52.120><c> this</c><00:12:52.210><c> video</c><00:12:52.360><c> if</c><00:12:52.660><c> you</c><00:12:52.750><c> did</c>

00:12:52.860 --> 00:12:52.870 align:start position:0%
guys enjoyed this video if you did
 

00:12:52.870 --> 00:12:54.600 align:start position:0%
guys enjoyed this video if you did
please<00:12:52.900><c> hit</c><00:12:53.200><c> that</c><00:12:53.440><c> like</c><00:12:53.590><c> button</c><00:12:53.830><c> don't</c><00:12:54.340><c> forget</c>

00:12:54.600 --> 00:12:54.610 align:start position:0%
please hit that like button don't forget
 

00:12:54.610 --> 00:12:55.860 align:start position:0%
please hit that like button don't forget
to<00:12:54.700><c> leave</c><00:12:54.790><c> any</c><00:12:55.000><c> questions</c><00:12:55.390><c> that</c><00:12:55.510><c> you</c><00:12:55.570><c> may</c><00:12:55.720><c> have</c>

00:12:55.860 --> 00:12:55.870 align:start position:0%
to leave any questions that you may have
 

00:12:55.870 --> 00:12:57.510 align:start position:0%
to leave any questions that you may have
for<00:12:56.080><c> me</c><00:12:56.200><c> in</c><00:12:56.410><c> the</c><00:12:56.530><c> comment</c><00:12:56.890><c> section</c><00:12:57.190><c> below</c><00:12:57.220><c> for</c>

00:12:57.510 --> 00:12:57.520 align:start position:0%
for me in the comment section below for
 

00:12:57.520 --> 00:13:01.170 align:start position:0%
for me in the comment section below for
that<00:12:57.760><c> 200k</c><00:12:58.480><c> special</c><00:12:59.170><c> Q&amp;A</c><00:12:59.470><c> video</c><00:13:00.160><c> and</c><00:13:00.490><c> I</c><00:13:01.060><c> will</c>

00:13:01.170 --> 00:13:01.180 align:start position:0%
that 200k special Q&amp;A video and I will
 

00:13:01.180 --> 00:13:03.700 align:start position:0%
that 200k special Q&amp;A video and I will
see<00:13:01.330><c> you</c><00:13:01.390><c> next</c><00:13:01.570><c> time</c><00:13:01.720><c> goodbye</c>

00:13:03.700 --> 00:13:03.710 align:start position:0%
see you next time goodbye
 

00:13:03.710 --> 00:13:26.539 align:start position:0%
see you next time goodbye
[Music]

