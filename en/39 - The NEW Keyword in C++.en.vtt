WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.910 align:start position:0%
 
hey<00:00:00.179><c> what's</c><00:00:00.450><c> up</c><00:00:00.539><c> guys</c><00:00:00.690><c> my</c><00:00:01.050><c> name</c><00:00:01.079><c> is</c><00:00:01.230><c> HMO</c><00:00:01.709><c> and</c>

00:00:01.910 --> 00:00:01.920 align:start position:0%
hey what's up guys my name is HMO and
 

00:00:01.920 --> 00:00:03.409 align:start position:0%
hey what's up guys my name is HMO and
welcome<00:00:02.220><c> back</c><00:00:02.250><c> to</c><00:00:02.520><c> my</c><00:00:02.669><c> state</c><00:00:02.970><c> plus</c><00:00:03.149><c> plus</c>

00:00:03.409 --> 00:00:03.419 align:start position:0%
welcome back to my state plus plus
 

00:00:03.419 --> 00:00:05.480 align:start position:0%
welcome back to my state plus plus
series<00:00:03.959><c> today</c><00:00:04.500><c> we'll</c><00:00:04.740><c> be</c><00:00:04.890><c> told</c><00:00:05.100><c> me</c><00:00:05.190><c> all</c><00:00:05.339><c> about</c>

00:00:05.480 --> 00:00:05.490 align:start position:0%
series today we'll be told me all about
 

00:00:05.490 --> 00:00:07.550 align:start position:0%
series today we'll be told me all about
the<00:00:05.759><c> new</c><00:00:05.940><c> keyword</c><00:00:06.450><c> it's</c><00:00:06.600><c> a</c><00:00:06.720><c> boss</c><00:00:06.899><c> boss</c><00:00:07.109><c> and</c><00:00:07.350><c> man</c>

00:00:07.550 --> 00:00:07.560 align:start position:0%
the new keyword it's a boss boss and man
 

00:00:07.560 --> 00:00:10.129 align:start position:0%
the new keyword it's a boss boss and man
man<00:00:08.400><c> does</c><00:00:08.670><c> this</c><00:00:08.820><c> meet</c><00:00:09.030><c> talking</c><00:00:09.480><c> about</c><00:00:09.690><c> if</c><00:00:10.019><c> you</c>

00:00:10.129 --> 00:00:10.139 align:start position:0%
man does this meet talking about if you
 

00:00:10.139 --> 00:00:11.810 align:start position:0%
man does this meet talking about if you
guys<00:00:10.290><c> missed</c><00:00:10.530><c> my</c><00:00:10.679><c> video</c><00:00:10.920><c> yesterday</c><00:00:11.190><c> about</c><00:00:11.550><c> how</c>

00:00:11.810 --> 00:00:11.820 align:start position:0%
guys missed my video yesterday about how
 

00:00:11.820 --> 00:00:14.660 align:start position:0%
guys missed my video yesterday about how
to<00:00:11.880><c> create</c><00:00:12.150><c> objects</c><00:00:12.630><c> in</c><00:00:12.809><c> C++</c><00:00:12.929><c> and</c><00:00:13.380><c> the</c><00:00:13.920><c> correct</c>

00:00:14.660 --> 00:00:14.670 align:start position:0%
to create objects in C++ and the correct
 

00:00:14.670 --> 00:00:16.310 align:start position:0%
to create objects in C++ and the correct
way<00:00:14.820><c> to</c><00:00:14.880><c> accentuate</c><00:00:15.330><c> objects</c><00:00:15.719><c> and</c><00:00:15.929><c> definitely</c>

00:00:16.310 --> 00:00:16.320 align:start position:0%
way to accentuate objects and definitely
 

00:00:16.320 --> 00:00:18.830 align:start position:0%
way to accentuate objects and definitely
check<00:00:16.470><c> that</c><00:00:16.500><c> out</c><00:00:16.650><c> cod</c><00:00:17.039><c> that</c><00:00:17.430><c> link</c><00:00:17.970><c> there</c><00:00:18.359><c> but</c>

00:00:18.830 --> 00:00:18.840 align:start position:0%
check that out cod that link there but
 

00:00:18.840 --> 00:00:20.779 align:start position:0%
check that out cod that link there but
otherwise<00:00:19.050><c> let's</c><00:00:19.619><c> talk</c><00:00:19.800><c> about</c><00:00:19.920><c> new</c><00:00:20.310><c> so</c><00:00:20.670><c> the</c>

00:00:20.779 --> 00:00:20.789 align:start position:0%
otherwise let's talk about new so the
 

00:00:20.789 --> 00:00:22.580 align:start position:0%
otherwise let's talk about new so the
new<00:00:20.910><c> keyword</c><00:00:21.119><c> is</c><00:00:21.359><c> interesting</c><00:00:21.810><c> because</c><00:00:22.080><c> it's</c>

00:00:22.580 --> 00:00:22.590 align:start position:0%
new keyword is interesting because it's
 

00:00:22.590 --> 00:00:25.790 align:start position:0%
new keyword is interesting because it's
it's<00:00:23.400><c> actually</c><00:00:24.240><c> quite</c><00:00:24.600><c> deep</c><00:00:25.050><c> a</c><00:00:25.289><c> lot</c><00:00:25.350><c> of</c><00:00:25.560><c> people</c>

00:00:25.790 --> 00:00:25.800 align:start position:0%
it's actually quite deep a lot of people
 

00:00:25.800 --> 00:00:26.750 align:start position:0%
it's actually quite deep a lot of people
write<00:00:25.949><c> new</c><00:00:26.160><c> and</c><00:00:26.310><c> they</c><00:00:26.369><c> don't</c><00:00:26.550><c> really</c><00:00:26.640><c> think</c>

00:00:26.750 --> 00:00:26.760 align:start position:0%
write new and they don't really think
 

00:00:26.760 --> 00:00:28.339 align:start position:0%
write new and they don't really think
about<00:00:27.029><c> it</c><00:00:27.180><c> but</c><00:00:27.480><c> there's</c><00:00:27.630><c> a</c><00:00:27.689><c> lot</c><00:00:27.810><c> that</c><00:00:27.990><c> goes</c><00:00:28.019><c> on</c>

00:00:28.339 --> 00:00:28.349 align:start position:0%
about it but there's a lot that goes on
 

00:00:28.349 --> 00:00:29.810 align:start position:0%
about it but there's a lot that goes on
and<00:00:28.650><c> it's</c><00:00:28.800><c> a</c><00:00:28.890><c> really</c><00:00:29.039><c> important</c><00:00:29.580><c> that</c><00:00:29.670><c> you</c>

00:00:29.810 --> 00:00:29.820 align:start position:0%
and it's a really important that you
 

00:00:29.820 --> 00:00:31.460 align:start position:0%
and it's a really important that you
understand<00:00:30.330><c> that</c><00:00:30.449><c> especially</c><00:00:30.630><c> since</c><00:00:31.289><c> you're</c>

00:00:31.460 --> 00:00:31.470 align:start position:0%
understand that especially since you're
 

00:00:31.470 --> 00:00:33.260 align:start position:0%
understand that especially since you're
programming<00:00:31.830><c> in</c><00:00:32.009><c> C++</c><00:00:32.160><c> the</c><00:00:32.880><c> fact</c><00:00:33.059><c> that</c><00:00:33.120><c> your</c>

00:00:33.260 --> 00:00:33.270 align:start position:0%
programming in C++ the fact that your
 

00:00:33.270 --> 00:00:34.819 align:start position:0%
programming in C++ the fact that your
prototype<00:00:33.630><c> makes</c><00:00:33.780><c> a</c><00:00:33.870><c> bus</c><00:00:34.050><c> bus</c><00:00:34.260><c> means</c><00:00:34.530><c> that</c><00:00:34.710><c> you</c>

00:00:34.819 --> 00:00:34.829 align:start position:0%
prototype makes a bus bus means that you
 

00:00:34.829 --> 00:00:36.830 align:start position:0%
prototype makes a bus bus means that you
should<00:00:35.070><c> be</c><00:00:35.219><c> caring</c><00:00:35.760><c> about</c><00:00:36.239><c> things</c><00:00:36.719><c> like</c>

00:00:36.830 --> 00:00:36.840 align:start position:0%
should be caring about things like
 

00:00:36.840 --> 00:00:39.500 align:start position:0%
should be caring about things like
memory<00:00:37.410><c> and</c><00:00:37.500><c> performance</c><00:00:38.399><c> and</c><00:00:38.670><c> optimization</c>

00:00:39.500 --> 00:00:39.510 align:start position:0%
memory and performance and optimization
 

00:00:39.510 --> 00:00:42.049 align:start position:0%
memory and performance and optimization
all<00:00:39.660><c> and</c><00:00:39.960><c> all</c><00:00:40.079><c> that</c><00:00:40.290><c> because</c><00:00:40.440><c> really</c><00:00:40.879><c> if</c><00:00:41.879><c> you</c>

00:00:42.049 --> 00:00:42.059 align:start position:0%
all and all that because really if you
 

00:00:42.059 --> 00:00:44.209 align:start position:0%
all and all that because really if you
don't<00:00:42.090><c> why</c><00:00:42.629><c> are</c><00:00:42.690><c> you</c><00:00:42.840><c> writing</c><00:00:43.079><c> C++</c><00:00:43.770><c> there</c><00:00:44.100><c> are</c>

00:00:44.209 --> 00:00:44.219 align:start position:0%
don't why are you writing C++ there are
 

00:00:44.219 --> 00:00:45.740 align:start position:0%
don't why are you writing C++ there are
so<00:00:44.340><c> many</c><00:00:44.460><c> other</c><00:00:44.670><c> languages</c><00:00:45.059><c> out</c><00:00:45.329><c> there</c><00:00:45.360><c> that</c>

00:00:45.740 --> 00:00:45.750 align:start position:0%
so many other languages out there that
 

00:00:45.750 --> 00:00:47.779 align:start position:0%
so many other languages out there that
you<00:00:45.870><c> can</c><00:00:46.050><c> do</c><00:00:46.230><c> especially</c><00:00:46.649><c> now</c><00:00:46.739><c> in</c><00:00:46.860><c> 2017</c>

00:00:47.779 --> 00:00:47.789 align:start position:0%
you can do especially now in 2017
 

00:00:47.789 --> 00:00:49.639 align:start position:0%
you can do especially now in 2017
why<00:00:48.329><c> would</c><00:00:48.660><c> you</c><00:00:48.750><c> be</c><00:00:48.899><c> writing</c><00:00:49.170><c> to</c><00:00:49.200><c> a</c><00:00:49.320><c> bus</c><00:00:49.469><c> bus</c>

00:00:49.639 --> 00:00:49.649 align:start position:0%
why would you be writing to a bus bus
 

00:00:49.649 --> 00:00:51.170 align:start position:0%
why would you be writing to a bus bus
card<00:00:49.890><c> unless</c><00:00:50.039><c> you</c><00:00:50.309><c> specifically</c><00:00:50.879><c> need</c>

00:00:51.170 --> 00:00:51.180 align:start position:0%
card unless you specifically need
 

00:00:51.180 --> 00:00:52.850 align:start position:0%
card unless you specifically need
performance<00:00:51.809><c> or</c><00:00:51.960><c> you</c><00:00:52.050><c> specifically</c><00:00:52.440><c> care</c>

00:00:52.850 --> 00:00:52.860 align:start position:0%
performance or you specifically care
 

00:00:52.860 --> 00:00:54.740 align:start position:0%
performance or you specifically care
about<00:00:53.460><c> everything</c><00:00:53.940><c> that</c><00:00:54.120><c> goes</c><00:00:54.239><c> on</c><00:00:54.449><c> and</c>

00:00:54.740 --> 00:00:54.750 align:start position:0%
about everything that goes on and
 

00:00:54.750 --> 00:00:58.400 align:start position:0%
about everything that goes on and
understanding<00:00:55.469><c> new</c><00:00:55.680><c> is</c><00:00:56.010><c> very</c><00:00:56.910><c> very</c><00:00:57.629><c> important</c>

00:00:58.400 --> 00:00:58.410 align:start position:0%
understanding new is very very important
 

00:00:58.410 --> 00:01:00.139 align:start position:0%
understanding new is very very important
especially<00:00:58.559><c> if</c><00:00:59.370><c> you're</c><00:00:59.579><c> coming</c><00:00:59.820><c> from</c><00:00:59.940><c> a</c>

00:01:00.139 --> 00:01:00.149 align:start position:0%
especially if you're coming from a
 

00:01:00.149 --> 00:01:02.389 align:start position:0%
especially if you're coming from a
managed<00:01:00.570><c> language</c><00:01:01.199><c> like</c><00:01:01.500><c> Java</c><00:01:01.859><c> or</c><00:01:02.160><c> C</c><00:01:02.370><c> sharp</c>

00:01:02.389 --> 00:01:02.399 align:start position:0%
managed language like Java or C sharp
 

00:01:02.399 --> 00:01:05.060 align:start position:0%
managed language like Java or C sharp
where<00:01:03.000><c> memory</c><00:01:03.780><c> is</c><00:01:04.110><c> first</c><00:01:04.470><c> of</c><00:01:04.619><c> all</c><00:01:04.680><c> cleaned</c><00:01:04.979><c> up</c>

00:01:05.060 --> 00:01:05.070 align:start position:0%
where memory is first of all cleaned up
 

00:01:05.070 --> 00:01:07.190 align:start position:0%
where memory is first of all cleaned up
automatically<00:01:05.580><c> for</c><00:01:05.850><c> you</c><00:01:06.000><c> but</c><00:01:06.540><c> also</c><00:01:06.689><c> you</c><00:01:06.930><c> don't</c>

00:01:07.190 --> 00:01:07.200 align:start position:0%
automatically for you but also you don't
 

00:01:07.200 --> 00:01:09.170 align:start position:0%
automatically for you but also you don't
get<00:01:07.439><c> anywhere</c><00:01:08.040><c> near</c><00:01:08.159><c> as</c><00:01:08.400><c> many</c><00:01:08.549><c> choices</c><00:01:08.790><c> when</c>

00:01:09.170 --> 00:01:09.180 align:start position:0%
get anywhere near as many choices when
 

00:01:09.180 --> 00:01:11.719 align:start position:0%
get anywhere near as many choices when
it<00:01:09.210><c> comes</c><00:01:09.299><c> to</c><00:01:09.570><c> memory</c><00:01:09.900><c> as</c><00:01:10.110><c> you</c><00:01:10.260><c> do</c><00:01:10.439><c> in</c><00:01:10.890><c> C++</c><00:01:11.369><c> so</c>

00:01:11.719 --> 00:01:11.729 align:start position:0%
it comes to memory as you do in C++ so
 

00:01:11.729 --> 00:01:13.070 align:start position:0%
it comes to memory as you do in C++ so
for<00:01:11.909><c> those</c><00:01:11.970><c> who</c><00:01:12.150><c> do</c><00:01:12.299><c> know</c><00:01:12.450><c> Java</c><00:01:12.720><c> or</c><00:01:12.900><c> C</c><00:01:13.049><c> sharp</c>

00:01:13.070 --> 00:01:13.080 align:start position:0%
for those who do know Java or C sharp
 

00:01:13.080 --> 00:01:15.140 align:start position:0%
for those who do know Java or C sharp
you're<00:01:13.560><c> used</c><00:01:13.860><c> to</c><00:01:13.979><c> using</c><00:01:14.220><c> new</c><00:01:14.520><c> all</c><00:01:14.760><c> the</c><00:01:14.790><c> time</c>

00:01:15.140 --> 00:01:15.150 align:start position:0%
you're used to using new all the time
 

00:01:15.150 --> 00:01:17.690 align:start position:0%
you're used to using new all the time
and<00:01:15.680><c> when</c><00:01:16.680><c> you're</c><00:01:16.860><c> going</c><00:01:17.009><c> to</c><00:01:17.100><c> see</c><00:01:17.310><c> bus</c><00:01:17.490><c> bus</c>

00:01:17.690 --> 00:01:17.700 align:start position:0%
and when you're going to see bus bus
 

00:01:17.700 --> 00:01:19.670 align:start position:0%
and when you're going to see bus bus
you'll<00:01:17.970><c> probably</c><00:01:18.240><c> think</c><00:01:18.659><c> I</c><00:01:18.810><c> yeah</c><00:01:19.049><c> I</c><00:01:19.320><c> can</c><00:01:19.500><c> see</c>

00:01:19.670 --> 00:01:19.680 align:start position:0%
you'll probably think I yeah I can see
 

00:01:19.680 --> 00:01:21.740 align:start position:0%
you'll probably think I yeah I can see
simple<00:01:20.189><c> spots</c><00:01:20.430><c> not</c><00:01:20.610><c> that</c><00:01:20.790><c> hard</c><00:01:21.030><c> is</c><00:01:21.180><c> the</c><00:01:21.299><c> same</c><00:01:21.540><c> I</c>

00:01:21.740 --> 00:01:21.750 align:start position:0%
simple spots not that hard is the same I
 

00:01:21.750 --> 00:01:22.820 align:start position:0%
simple spots not that hard is the same I
mean<00:01:21.869><c> there's</c><00:01:22.080><c> a</c><00:01:22.170><c> new</c><00:01:22.320><c> key</c><00:01:22.530><c> way</c><00:01:22.680><c> I'll</c><00:01:22.799><c> just</c>

00:01:22.820 --> 00:01:22.830 align:start position:0%
mean there's a new key way I'll just
 

00:01:22.830 --> 00:01:26.149 align:start position:0%
mean there's a new key way I'll just
create<00:01:23.700><c> a</c><00:01:23.790><c> new</c><00:01:23.939><c> class</c><00:01:24.320><c> know</c><00:01:25.320><c> check</c><00:01:25.890><c> out</c><00:01:25.979><c> my</c>

00:01:26.149 --> 00:01:26.159 align:start position:0%
create a new class know check out my
 

00:01:26.159 --> 00:01:27.590 align:start position:0%
create a new class know check out my
video<00:01:26.400><c> on</c><00:01:26.460><c> how</c><00:01:26.549><c> this</c><00:01:26.700><c> and</c><00:01:26.970><c> share</c><00:01:27.119><c> classes</c><00:01:27.509><c> if</c>

00:01:27.590 --> 00:01:27.600 align:start position:0%
video on how this and share classes if
 

00:01:27.600 --> 00:01:29.210 align:start position:0%
video on how this and share classes if
you<00:01:27.689><c> haven't</c><00:01:27.900><c> already</c><00:01:27.960><c> so</c><00:01:28.470><c> the</c><00:01:28.590><c> main</c><00:01:28.740><c> purpose</c>

00:01:29.210 --> 00:01:29.220 align:start position:0%
you haven't already so the main purpose
 

00:01:29.220 --> 00:01:32.200 align:start position:0%
you haven't already so the main purpose
of<00:01:29.250><c> new</c><00:01:29.759><c> is</c><00:01:30.090><c> to</c><00:01:30.479><c> allocate</c><00:01:30.930><c> memory</c><00:01:31.170><c> on</c><00:01:31.590><c> the</c><00:01:31.890><c> heap</c>

00:01:32.200 --> 00:01:32.210 align:start position:0%
of new is to allocate memory on the heap
 

00:01:32.210 --> 00:01:34.730 align:start position:0%
of new is to allocate memory on the heap
specifically<00:01:33.210><c> you</c><00:01:33.479><c> write</c><00:01:33.720><c> new</c><00:01:34.079><c> and</c><00:01:34.380><c> then</c><00:01:34.619><c> you</c>

00:01:34.730 --> 00:01:34.740 align:start position:0%
specifically you write new and then you
 

00:01:34.740 --> 00:01:36.380 align:start position:0%
specifically you write new and then you
write<00:01:34.950><c> your</c><00:01:35.130><c> data</c><00:01:35.430><c> say</c><00:01:35.729><c> whether</c><00:01:36.000><c> that</c><00:01:36.210><c> be</c><00:01:36.360><c> a</c>

00:01:36.380 --> 00:01:36.390 align:start position:0%
write your data say whether that be a
 

00:01:36.390 --> 00:01:39.020 align:start position:0%
write your data say whether that be a
class<00:01:36.720><c> or</c><00:01:37.049><c> a</c><00:01:37.110><c> primitive</c><00:01:37.650><c> type</c><00:01:37.890><c> or</c><00:01:38.250><c> an</c><00:01:38.640><c> array</c>

00:01:39.020 --> 00:01:39.030 align:start position:0%
class or a primitive type or an array
 

00:01:39.030 --> 00:01:40.730 align:start position:0%
class or a primitive type or an array
based<00:01:39.570><c> on</c><00:01:39.780><c> what</c><00:01:39.960><c> you've</c><00:01:40.140><c> written</c><00:01:40.409><c> it</c>

00:01:40.730 --> 00:01:40.740 align:start position:0%
based on what you've written it
 

00:01:40.740 --> 00:01:42.859 align:start position:0%
based on what you've written it
determines<00:01:41.310><c> the</c><00:01:41.460><c> necessary</c><00:01:42.090><c> size</c><00:01:42.450><c> of</c><00:01:42.750><c> the</c>

00:01:42.859 --> 00:01:42.869 align:start position:0%
determines the necessary size of the
 

00:01:42.869 --> 00:01:44.840 align:start position:0%
determines the necessary size of the
allocation<00:01:43.530><c> in</c><00:01:43.710><c> bytes</c><00:01:44.040><c> for</c><00:01:44.310><c> example</c><00:01:44.670><c> if</c><00:01:44.759><c> I</c>

00:01:44.840 --> 00:01:44.850 align:start position:0%
allocation in bytes for example if I
 

00:01:44.850 --> 00:01:46.880 align:start position:0%
allocation in bytes for example if I
write<00:01:45.090><c> a</c><00:01:45.119><c> new</c><00:01:45.420><c> int</c><00:01:45.720><c> that</c><00:01:46.049><c> is</c><00:01:46.200><c> going</c><00:01:46.439><c> to</c><00:01:46.530><c> have</c><00:01:46.710><c> to</c>

00:01:46.880 --> 00:01:46.890 align:start position:0%
write a new int that is going to have to
 

00:01:46.890 --> 00:01:49.490 align:start position:0%
write a new int that is going to have to
request<00:01:47.460><c> four</c><00:01:47.939><c> bytes</c><00:01:48.210><c> of</c><00:01:48.420><c> memory</c><00:01:48.479><c> allocate</c><00:01:49.200><c> 4</c>

00:01:49.490 --> 00:01:49.500 align:start position:0%
request four bytes of memory allocate 4
 

00:01:49.500 --> 00:01:51.679 align:start position:0%
request four bytes of memory allocate 4
bytes<00:01:49.740><c> of</c><00:01:49.950><c> memory</c><00:01:50.009><c> once</c><00:01:50.670><c> it</c><00:01:50.820><c> has</c><00:01:51.000><c> that</c><00:01:51.240><c> number</c>

00:01:51.679 --> 00:01:51.689 align:start position:0%
bytes of memory once it has that number
 

00:01:51.689 --> 00:01:54.080 align:start position:0%
bytes of memory once it has that number
it<00:01:52.140><c> goes</c><00:01:52.470><c> and</c><00:01:52.710><c> it</c><00:01:52.799><c> asks</c><00:01:53.159><c> the</c><00:01:53.280><c> operating</c><00:01:53.700><c> system</c>

00:01:54.080 --> 00:01:54.090 align:start position:0%
it goes and it asks the operating system
 

00:01:54.090 --> 00:01:55.760 align:start position:0%
it goes and it asks the operating system
what<00:01:54.210><c> the</c><00:01:54.329><c> I</c><00:01:54.570><c> should</c><00:01:54.960><c> say</c><00:01:55.110><c> C</c><00:01:55.350><c> standard</c><00:01:55.710><c> library</c>

00:01:55.760 --> 00:01:55.770 align:start position:0%
what the I should say C standard library
 

00:01:55.770 --> 00:01:58.490 align:start position:0%
what the I should say C standard library
I<00:01:56.250><c> need</c><00:01:56.520><c> 4</c><00:01:56.820><c> bytes</c><00:01:57.030><c> of</c><00:01:57.210><c> memory</c><00:01:57.270><c> please</c><00:01:58.200><c> give</c><00:01:58.469><c> it</c>

00:01:58.490 --> 00:01:58.500 align:start position:0%
I need 4 bytes of memory please give it
 

00:01:58.500 --> 00:02:00.530 align:start position:0%
I need 4 bytes of memory please give it
to<00:01:58.649><c> me</c><00:01:58.799><c> and</c><00:01:59.130><c> that's</c><00:01:59.579><c> where</c><00:02:00.060><c> the</c><00:02:00.210><c> fun</c><00:02:00.509><c> begins</c>

00:02:00.530 --> 00:02:00.540 align:start position:0%
to me and that's where the fun begins
 

00:02:00.540 --> 00:02:04.249 align:start position:0%
to me and that's where the fun begins
now<00:02:01.380><c> we</c><00:02:01.439><c> need</c><00:02:01.770><c> to</c><00:02:01.920><c> find</c><00:02:02.280><c> a</c><00:02:02.719><c> contiguous</c><00:02:03.719><c> block</c>

00:02:04.249 --> 00:02:04.259 align:start position:0%
now we need to find a contiguous block
 

00:02:04.259 --> 00:02:06.950 align:start position:0%
now we need to find a contiguous block
of<00:02:04.340><c> 4</c><00:02:05.340><c> bytes</c><00:02:05.369><c> of</c><00:02:05.700><c> memory</c><00:02:05.759><c> now</c><00:02:06.420><c> of</c><00:02:06.570><c> course</c><00:02:06.750><c> 4</c>

00:02:06.950 --> 00:02:06.960 align:start position:0%
of 4 bytes of memory now of course 4
 

00:02:06.960 --> 00:02:08.300 align:start position:0%
of 4 bytes of memory now of course 4
bytes<00:02:07.140><c> of</c><00:02:07.259><c> memory</c><00:02:07.320><c> is</c><00:02:07.649><c> very</c><00:02:07.860><c> very</c><00:02:08.069><c> easy</c><00:02:08.220><c> to</c>

00:02:08.300 --> 00:02:08.310 align:start position:0%
bytes of memory is very very easy to
 

00:02:08.310 --> 00:02:09.969 align:start position:0%
bytes of memory is very very easy to
find<00:02:08.580><c> so</c><00:02:08.789><c> there'll</c><00:02:08.940><c> be</c><00:02:09.030><c> Radek</c>

00:02:09.969 --> 00:02:09.979 align:start position:0%
find so there'll be Radek
 

00:02:09.979 --> 00:02:12.699 align:start position:0%
find so there'll be Radek
quick<00:02:10.159><c> allocation</c><00:02:10.849><c> but</c><00:02:11.510><c> it</c><00:02:11.780><c> still</c><00:02:12.230><c> needs</c><00:02:12.260><c> to</c>

00:02:12.699 --> 00:02:12.709 align:start position:0%
quick allocation but it still needs to
 

00:02:12.709 --> 00:02:15.399 align:start position:0%
quick allocation but it still needs to
find<00:02:13.250><c> an</c><00:02:13.550><c> address</c><00:02:13.909><c> in</c><00:02:14.390><c> memory</c><00:02:14.750><c> where</c><00:02:15.019><c> you</c><00:02:15.049><c> have</c>

00:02:15.399 --> 00:02:15.409 align:start position:0%
find an address in memory where you have
 

00:02:15.409 --> 00:02:17.890 align:start position:0%
find an address in memory where you have
full<00:02:15.709><c> bytes</c><00:02:15.980><c> in</c><00:02:16.190><c> a</c><00:02:16.280><c> row</c><00:02:16.459><c> once</c><00:02:16.970><c> it</c><00:02:17.150><c> does</c><00:02:17.360><c> that</c><00:02:17.390><c> it</c>

00:02:17.890 --> 00:02:17.900 align:start position:0%
full bytes in a row once it does that it
 

00:02:17.900 --> 00:02:20.320 align:start position:0%
full bytes in a row once it does that it
returns<00:02:18.620><c> a</c><00:02:18.739><c> pointer</c><00:02:18.980><c> to</c><00:02:19.430><c> that</c><00:02:19.640><c> memory</c><00:02:20.239><c> address</c>

00:02:20.320 --> 00:02:20.330 align:start position:0%
returns a pointer to that memory address
 

00:02:20.330 --> 00:02:22.780 align:start position:0%
returns a pointer to that memory address
so<00:02:21.080><c> that</c><00:02:21.110><c> you</c><00:02:21.230><c> can</c><00:02:21.409><c> begin</c><00:02:21.560><c> using</c><00:02:22.430><c> your</c><00:02:22.459><c> data</c>

00:02:22.780 --> 00:02:22.790 align:start position:0%
so that you can begin using your data
 

00:02:22.790 --> 00:02:24.550 align:start position:0%
so that you can begin using your data
and<00:02:23.000><c> storing</c><00:02:23.360><c> data</c><00:02:23.510><c> there</c><00:02:23.750><c> and</c><00:02:23.989><c> read</c><00:02:24.349><c> me</c><00:02:24.500><c> in</c>

00:02:24.550 --> 00:02:24.560 align:start position:0%
and storing data there and read me in
 

00:02:24.560 --> 00:02:25.930 align:start position:0%
and storing data there and read me in
access<00:02:24.950><c> of</c><00:02:25.099><c> reading</c><00:02:25.340><c> and</c><00:02:25.459><c> writing</c><00:02:25.549><c> and</c><00:02:25.760><c> doing</c>

00:02:25.930 --> 00:02:25.940 align:start position:0%
access of reading and writing and doing
 

00:02:25.940 --> 00:02:27.910 align:start position:0%
access of reading and writing and doing
all<00:02:26.030><c> that</c><00:02:26.090><c> fun</c><00:02:26.330><c> stuff</c><00:02:26.360><c> so</c><00:02:26.840><c> you</c><00:02:26.900><c> see</c><00:02:27.110><c> how</c><00:02:27.349><c> I</c><00:02:27.379><c> just</c>

00:02:27.910 --> 00:02:27.920 align:start position:0%
all that fun stuff so you see how I just
 

00:02:27.920 --> 00:02:29.979 align:start position:0%
all that fun stuff so you see how I just
like<00:02:28.220><c> list</c><00:02:28.459><c> it</c><00:02:28.610><c> off</c><00:02:28.730><c> like</c><00:02:28.970><c> five</c><00:02:29.360><c> steps</c><00:02:29.720><c> or</c>

00:02:29.979 --> 00:02:29.989 align:start position:0%
like list it off like five steps or
 

00:02:29.989 --> 00:02:31.839 align:start position:0%
like list it off like five steps or
something<00:02:30.319><c> like</c><00:02:30.440><c> that</c><00:02:30.650><c> yeah</c>

00:02:31.839 --> 00:02:31.849 align:start position:0%
something like that yeah
 

00:02:31.849 --> 00:02:33.550 align:start position:0%
something like that yeah
that's<00:02:32.030><c> the</c><00:02:32.269><c> primary</c><00:02:32.599><c> takeaway</c><00:02:33.200><c> from</c><00:02:33.260><c> this</c>

00:02:33.550 --> 00:02:33.560 align:start position:0%
that's the primary takeaway from this
 

00:02:33.560 --> 00:02:36.280 align:start position:0%
that's the primary takeaway from this
when<00:02:34.129><c> you</c><00:02:34.220><c> call</c><00:02:34.430><c> new</c><00:02:34.700><c> it</c><00:02:35.209><c> takes</c><00:02:35.569><c> time</c><00:02:35.870><c> now</c><00:02:36.260><c> I</c>

00:02:36.280 --> 00:02:36.290 align:start position:0%
when you call new it takes time now I
 

00:02:36.290 --> 00:02:38.229 align:start position:0%
when you call new it takes time now I
did<00:02:36.530><c> say</c><00:02:36.709><c> that</c><00:02:36.769><c> we</c><00:02:37.040><c> had</c><00:02:37.370><c> to</c><00:02:37.549><c> literally</c><00:02:37.970><c> look</c>

00:02:38.229 --> 00:02:38.239 align:start position:0%
did say that we had to literally look
 

00:02:38.239 --> 00:02:40.930 align:start position:0%
did say that we had to literally look
for<00:02:38.569><c> four</c><00:02:38.840><c> bytes</c><00:02:39.019><c> of</c><00:02:39.200><c> contiguous</c><00:02:40.010><c> memory</c><00:02:40.159><c> it's</c>

00:02:40.930 --> 00:02:40.940 align:start position:0%
for four bytes of contiguous memory it's
 

00:02:40.940 --> 00:02:43.539 align:start position:0%
for four bytes of contiguous memory it's
not<00:02:41.120><c> really</c><00:02:41.840><c> like</c><00:02:42.290><c> it's</c><00:02:42.620><c> not</c><00:02:42.799><c> like</c><00:02:42.860><c> it</c><00:02:43.190><c> it</c>

00:02:43.539 --> 00:02:43.549 align:start position:0%
not really like it's not like it it
 

00:02:43.549 --> 00:02:46.600 align:start position:0%
not really like it's not like it it
literally<00:02:44.000><c> searches</c><00:02:44.720><c> our</c><00:02:44.930><c> memory</c><00:02:45.379><c> just</c><00:02:46.310><c> in</c><00:02:46.519><c> a</c>

00:02:46.600 --> 00:02:46.610 align:start position:0%
literally searches our memory just in a
 

00:02:46.610 --> 00:02:48.670 align:start position:0%
literally searches our memory just in a
row<00:02:46.819><c> like</c><00:02:47.090><c> a</c><00:02:47.150><c> laser</c><00:02:47.480><c> being</c><00:02:47.900><c> like</c><00:02:48.109><c> a</c><00:02:48.140><c> cater</c><00:02:48.500><c> we</c>

00:02:48.670 --> 00:02:48.680 align:start position:0%
row like a laser being like a cater we
 

00:02:48.680 --> 00:02:50.740 align:start position:0%
row like a laser being like a cater we
have<00:02:48.769><c> four</c><00:02:48.980><c> bytes</c><00:02:49.160><c> free</c><00:02:49.519><c> no</c><00:02:49.790><c> I'll</c><00:02:50.180><c> look</c><00:02:50.450><c> on</c><00:02:50.629><c> the</c>

00:02:50.740 --> 00:02:50.750 align:start position:0%
have four bytes free no I'll look on the
 

00:02:50.750 --> 00:02:52.630 align:start position:0%
have four bytes free no I'll look on the
next<00:02:50.900><c> slot</c><00:02:51.290><c> there's</c><00:02:52.190><c> something</c><00:02:52.459><c> called</c><00:02:52.549><c> a</c>

00:02:52.630 --> 00:02:52.640 align:start position:0%
next slot there's something called a
 

00:02:52.640 --> 00:02:54.369 align:start position:0%
next slot there's something called a
free<00:02:52.940><c> list</c><00:02:53.180><c> which</c><00:02:53.540><c> actually</c><00:02:53.930><c> maintains</c>

00:02:54.369 --> 00:02:54.379 align:start position:0%
free list which actually maintains
 

00:02:54.379 --> 00:02:58.300 align:start position:0%
free list which actually maintains
addresses<00:02:54.980><c> that</c><00:02:55.129><c> have</c><00:02:55.390><c> bytes</c><00:02:56.390><c> free</c><00:02:57.280><c> not</c><00:02:58.280><c> a</c>

00:02:58.300 --> 00:02:58.310 align:start position:0%
addresses that have bytes free not a
 

00:02:58.310 --> 00:03:00.190 align:start position:0%
addresses that have bytes free not a
story<00:02:58.730><c> for</c><00:02:59.000><c> another</c><00:02:59.060><c> video</c><00:02:59.420><c> but</c><00:02:59.599><c> it's</c><00:03:00.049><c> not</c>

00:03:00.190 --> 00:03:00.200 align:start position:0%
story for another video but it's not
 

00:03:00.200 --> 00:03:02.229 align:start position:0%
story for another video but it's not
like<00:03:00.440><c> it</c><00:03:00.739><c> might</c><00:03:01.400><c> not</c><00:03:01.579><c> be</c><00:03:01.730><c> as</c><00:03:01.819><c> slow</c><00:03:02.030><c> as</c><00:03:02.120><c> you</c>

00:03:02.229 --> 00:03:02.239 align:start position:0%
like it might not be as slow as you
 

00:03:02.239 --> 00:03:05.259 align:start position:0%
like it might not be as slow as you
think<00:03:02.569><c> it's</c><00:03:02.930><c> obviously</c><00:03:03.829><c> written</c><00:03:04.370><c> to</c><00:03:05.120><c> be</c>

00:03:05.259 --> 00:03:05.269 align:start position:0%
think it's obviously written to be
 

00:03:05.269 --> 00:03:07.509 align:start position:0%
think it's obviously written to be
rather<00:03:05.720><c> intelligent</c><00:03:06.440><c> but</c><00:03:06.590><c> it</c><00:03:06.709><c> is</c><00:03:06.829><c> still</c><00:03:07.099><c> quite</c>

00:03:07.509 --> 00:03:07.519 align:start position:0%
rather intelligent but it is still quite
 

00:03:07.519 --> 00:03:09.280 align:start position:0%
rather intelligent but it is still quite
slow<00:03:07.760><c> but</c><00:03:08.060><c> that's</c><00:03:08.329><c> the</c><00:03:08.480><c> primary</c><00:03:08.720><c> takeaway</c>

00:03:09.280 --> 00:03:09.290 align:start position:0%
slow but that's the primary takeaway
 

00:03:09.290 --> 00:03:11.740 align:start position:0%
slow but that's the primary takeaway
knew<00:03:09.650><c> basically</c><00:03:10.220><c> finds</c><00:03:10.849><c> a</c><00:03:11.180><c> block</c><00:03:11.420><c> of</c><00:03:11.569><c> memory</c>

00:03:11.740 --> 00:03:11.750 align:start position:0%
knew basically finds a block of memory
 

00:03:11.750 --> 00:03:13.539 align:start position:0%
knew basically finds a block of memory
that<00:03:12.140><c> is</c><00:03:12.230><c> big</c><00:03:12.500><c> enough</c><00:03:12.590><c> to</c><00:03:12.799><c> accommodate</c><00:03:13.010><c> our</c>

00:03:13.539 --> 00:03:13.549 align:start position:0%
that is big enough to accommodate our
 

00:03:13.549 --> 00:03:15.640 align:start position:0%
that is big enough to accommodate our
needs<00:03:13.579><c> and</c><00:03:14.150><c> then</c><00:03:14.630><c> gives</c><00:03:14.870><c> us</c><00:03:15.049><c> a</c><00:03:15.079><c> pointer</c><00:03:15.620><c> to</c>

00:03:15.640 --> 00:03:15.650 align:start position:0%
needs and then gives us a pointer to
 

00:03:15.650 --> 00:03:17.199 align:start position:0%
needs and then gives us a pointer to
that<00:03:15.799><c> block</c><00:03:16.130><c> of</c><00:03:16.280><c> memory</c><00:03:16.459><c> let's</c><00:03:16.849><c> take</c><00:03:17.000><c> a</c><00:03:17.030><c> look</c>

00:03:17.199 --> 00:03:17.209 align:start position:0%
that block of memory let's take a look
 

00:03:17.209 --> 00:03:18.699 align:start position:0%
that block of memory let's take a look
at<00:03:17.299><c> some</c><00:03:17.419><c> cards</c><00:03:17.750><c> what</c><00:03:18.019><c> I've</c><00:03:18.109><c> got</c><00:03:18.230><c> over</c><00:03:18.349><c> here</c><00:03:18.440><c> is</c>

00:03:18.699 --> 00:03:18.709 align:start position:0%
at some cards what I've got over here is
 

00:03:18.709 --> 00:03:20.920 align:start position:0%
at some cards what I've got over here is
a<00:03:18.739><c> very</c><00:03:18.919><c> basic</c><00:03:19.040><c> class</c><00:03:19.519><c> has</c><00:03:19.849><c> just</c><00:03:19.880><c> got</c><00:03:20.299><c> a</c><00:03:20.510><c> string</c>

00:03:20.920 --> 00:03:20.930 align:start position:0%
a very basic class has just got a string
 

00:03:20.930 --> 00:03:22.629 align:start position:0%
a very basic class has just got a string
name<00:03:21.230><c> that's</c><00:03:21.590><c> it</c><00:03:21.919><c> I'm</c><00:03:22.160><c> going</c><00:03:22.340><c> to</c><00:03:22.400><c> scroll</c><00:03:22.579><c> down</c>

00:03:22.629 --> 00:03:22.639 align:start position:0%
name that's it I'm going to scroll down
 

00:03:22.639 --> 00:03:23.979 align:start position:0%
name that's it I'm going to scroll down
over<00:03:22.940><c> here</c><00:03:23.150><c> and</c><00:03:23.389><c> we'll</c><00:03:23.510><c> take</c><00:03:23.630><c> a</c><00:03:23.690><c> look</c><00:03:23.840><c> at</c><00:03:23.930><c> the</c>

00:03:23.979 --> 00:03:23.989 align:start position:0%
over here and we'll take a look at the
 

00:03:23.989 --> 00:03:25.990 align:start position:0%
over here and we'll take a look at the
new<00:03:24.109><c> keyword</c><00:03:24.319><c> first</c><00:03:24.799><c> and</c><00:03:24.980><c> foremost</c><00:03:25.430><c> just</c><00:03:25.760><c> like</c>

00:03:25.990 --> 00:03:26.000 align:start position:0%
new keyword first and foremost just like
 

00:03:26.000 --> 00:03:28.000 align:start position:0%
new keyword first and foremost just like
we<00:03:26.120><c> create</c><00:03:26.419><c> integers</c><00:03:26.900><c> normally</c><00:03:27.319><c> by</c><00:03:27.560><c> doing</c>

00:03:28.000 --> 00:03:28.010 align:start position:0%
we create integers normally by doing
 

00:03:28.010 --> 00:03:29.890 align:start position:0%
we create integers normally by doing
this<00:03:28.250><c> we</c><00:03:28.579><c> can</c><00:03:28.609><c> also</c><00:03:28.880><c> choose</c><00:03:29.269><c> to</c><00:03:29.299><c> actually</c>

00:03:29.890 --> 00:03:29.900 align:start position:0%
this we can also choose to actually
 

00:03:29.900 --> 00:03:31.870 align:start position:0%
this we can also choose to actually
dynamically<00:03:30.530><c> allocate</c><00:03:31.010><c> that</c><00:03:31.040><c> memory</c><00:03:31.669><c> and</c>

00:03:31.870 --> 00:03:31.880 align:start position:0%
dynamically allocate that memory and
 

00:03:31.880 --> 00:03:33.309 align:start position:0%
dynamically allocate that memory and
credit<00:03:32.209><c> on</c><00:03:32.299><c> the</c><00:03:32.419><c> heap</c><00:03:32.630><c> by</c><00:03:32.840><c> using</c><00:03:32.989><c> the</c><00:03:33.169><c> new</c>

00:03:33.309 --> 00:03:33.319 align:start position:0%
credit on the heap by using the new
 

00:03:33.319 --> 00:03:35.830 align:start position:0%
credit on the heap by using the new
keyword<00:03:33.560><c> so</c><00:03:33.950><c> what</c><00:03:34.099><c> we</c><00:03:34.190><c> can</c><00:03:34.310><c> write</c><00:03:34.370><c> is</c><00:03:34.910><c> int</c>

00:03:35.830 --> 00:03:35.840 align:start position:0%
keyword so what we can write is int
 

00:03:35.840 --> 00:03:38.830 align:start position:0%
keyword so what we can write is int
pointer<00:03:36.340><c> B</c><00:03:37.340><c> because</c><00:03:37.730><c> remember</c><00:03:37.910><c> as</c><00:03:38.180><c> I</c><00:03:38.299><c> said</c><00:03:38.329><c> new</c>

00:03:38.830 --> 00:03:38.840 align:start position:0%
pointer B because remember as I said new
 

00:03:38.840 --> 00:03:40.839 align:start position:0%
pointer B because remember as I said new
returns<00:03:39.230><c> a</c><00:03:39.380><c> pointer</c><00:03:39.650><c> to</c><00:03:40.099><c> the</c><00:03:40.340><c> memory</c><00:03:40.669><c> that</c>

00:03:40.839 --> 00:03:40.849 align:start position:0%
returns a pointer to the memory that
 

00:03:40.849 --> 00:03:43.270 align:start position:0%
returns a pointer to the memory that
you've<00:03:40.970><c> allocated</c><00:03:41.500><c> equals</c><00:03:42.500><c> new</c><00:03:42.709><c> int</c><00:03:42.919><c> and</c>

00:03:43.270 --> 00:03:43.280 align:start position:0%
you've allocated equals new int and
 

00:03:43.280 --> 00:03:45.190 align:start position:0%
you've allocated equals new int and
that's<00:03:43.430><c> it</c><00:03:43.639><c> that</c><00:03:44.030><c> is</c><00:03:44.209><c> a</c><00:03:44.239><c> single</c><00:03:44.630><c> for</c><00:03:44.810><c> byte</c>

00:03:45.190 --> 00:03:45.200 align:start position:0%
that's it that is a single for byte
 

00:03:45.200 --> 00:03:48.069 align:start position:0%
that's it that is a single for byte
integer<00:03:45.680><c> allocated</c><00:03:46.250><c> on</c><00:03:46.340><c> the</c><00:03:46.370><c> heap</c><00:03:46.459><c> and</c><00:03:46.880><c> this</c><00:03:47.630><c> B</c>

00:03:48.069 --> 00:03:48.079 align:start position:0%
integer allocated on the heap and this B
 

00:03:48.079 --> 00:03:50.110 align:start position:0%
integer allocated on the heap and this B
is<00:03:48.380><c> storing</c><00:03:48.919><c> its</c><00:03:49.069><c> memory</c><00:03:49.430><c> address</c><00:03:49.700><c> if</c><00:03:49.970><c> I</c>

00:03:50.110 --> 00:03:50.120 align:start position:0%
is storing its memory address if I
 

00:03:50.120 --> 00:03:52.449 align:start position:0%
is storing its memory address if I
wanted<00:03:50.329><c> to</c><00:03:50.450><c> allocate</c><00:03:50.930><c> an</c><00:03:51.079><c> array</c><00:03:51.169><c> instead</c><00:03:52.160><c> then</c>

00:03:52.449 --> 00:03:52.459 align:start position:0%
wanted to allocate an array instead then
 

00:03:52.459 --> 00:03:54.400 align:start position:0%
wanted to allocate an array instead then
I<00:03:52.549><c> would</c><00:03:52.730><c> ask</c><00:03:52.910><c> where</c><00:03:53.239><c> brackets</c><00:03:53.720><c> and</c><00:03:53.989><c> just</c><00:03:54.200><c> type</c>

00:03:54.400 --> 00:03:54.410 align:start position:0%
I would ask where brackets and just type
 

00:03:54.410 --> 00:03:56.530 align:start position:0%
I would ask where brackets and just type
in<00:03:54.590><c> how</c><00:03:54.859><c> many</c><00:03:55.160><c> elements</c><00:03:55.519><c> I</c><00:03:55.790><c> wanted</c><00:03:56.180><c> so</c><00:03:56.389><c> in</c><00:03:56.480><c> this</c>

00:03:56.530 --> 00:03:56.540 align:start position:0%
in how many elements I wanted so in this
 

00:03:56.540 --> 00:03:59.349 align:start position:0%
in how many elements I wanted so in this
case<00:03:56.780><c> 50</c><00:03:57.200><c> which</c><00:03:57.709><c> means</c><00:03:57.950><c> we</c><00:03:58.099><c> need</c><00:03:58.220><c> 200</c><00:03:58.849><c> bytes</c><00:03:59.060><c> of</c>

00:03:59.349 --> 00:03:59.359 align:start position:0%
case 50 which means we need 200 bytes of
 

00:03:59.359 --> 00:04:02.289 align:start position:0%
case 50 which means we need 200 bytes of
memory<00:03:59.510><c> 50</c><00:04:00.470><c> times</c><00:04:00.709><c> 4</c><00:04:01.010><c> for</c><00:04:01.579><c> being</c><00:04:01.790><c> the</c><00:04:01.910><c> size</c><00:04:02.120><c> of</c>

00:04:02.289 --> 00:04:02.299 align:start position:0%
memory 50 times 4 for being the size of
 

00:04:02.299 --> 00:04:04.240 align:start position:0%
memory 50 times 4 for being the size of
each<00:04:02.510><c> integer</c><00:04:03.019><c> if</c><00:04:03.200><c> we</c><00:04:03.470><c> wanted</c><00:04:03.650><c> to</c><00:04:03.769><c> allocate</c>

00:04:04.240 --> 00:04:04.250 align:start position:0%
each integer if we wanted to allocate
 

00:04:04.250 --> 00:04:07.150 align:start position:0%
each integer if we wanted to allocate
our<00:04:04.519><c> NC</c><00:04:05.090><c> class</c><00:04:05.329><c> on</c><00:04:05.599><c> the</c><00:04:05.840><c> heap</c><00:04:06.049><c> by</c><00:04:06.590><c> the</c><00:04:06.650><c> new</c><00:04:06.919><c> key</c>

00:04:07.150 --> 00:04:07.160 align:start position:0%
our NC class on the heap by the new key
 

00:04:07.160 --> 00:04:08.830 align:start position:0%
our NC class on the heap by the new key
where<00:04:07.340><c> we</c><00:04:07.489><c> were</c><00:04:07.579><c> write</c><00:04:07.760><c> code</c><00:04:08.060><c> like</c><00:04:08.090><c> this</c><00:04:08.449><c> or</c>

00:04:08.830 --> 00:04:08.840 align:start position:0%
where we were write code like this or
 

00:04:08.840 --> 00:04:10.930 align:start position:0%
where we were write code like this or
this<00:04:09.319><c> alternatively</c><00:04:09.980><c> we</c><00:04:10.400><c> don't</c><00:04:10.579><c> need</c><00:04:10.730><c> to</c><00:04:10.910><c> use</c>

00:04:10.930 --> 00:04:10.940 align:start position:0%
this alternatively we don't need to use
 

00:04:10.940 --> 00:04:12.729 align:start position:0%
this alternatively we don't need to use
parentheses<00:04:11.269><c> for</c><00:04:11.629><c> this</c><00:04:12.019><c> the</c><00:04:12.440><c> default</c>

00:04:12.729 --> 00:04:12.739 align:start position:0%
parentheses for this the default
 

00:04:12.739 --> 00:04:14.530 align:start position:0%
parentheses for this the default
constructor<00:04:12.919><c> but</c><00:04:13.400><c> we</c><00:04:13.519><c> can</c><00:04:13.760><c> and</c><00:04:13.940><c> I</c><00:04:13.970><c> usually</c><00:04:14.389><c> do</c>

00:04:14.530 --> 00:04:14.540 align:start position:0%
constructor but we can and I usually do
 

00:04:14.540 --> 00:04:16.390 align:start position:0%
constructor but we can and I usually do
if<00:04:14.750><c> we</c><00:04:14.989><c> wanted</c><00:04:15.260><c> an</c><00:04:15.410><c> array</c><00:04:15.680><c> of</c><00:04:15.709><c> entries</c><00:04:16.250><c> instead</c>

00:04:16.390 --> 00:04:16.400 align:start position:0%
if we wanted an array of entries instead
 

00:04:16.400 --> 00:04:17.069 align:start position:0%
if we wanted an array of entries instead
week

00:04:17.069 --> 00:04:17.079 align:start position:0%
week
 

00:04:17.079 --> 00:04:18.479 align:start position:0%
week
do<00:04:17.199><c> that</c><00:04:17.379><c> by</c><00:04:17.620><c> just</c><00:04:17.650><c> using</c><00:04:18.009><c> square</c><00:04:18.459><c> brackets</c>

00:04:18.479 --> 00:04:18.489 align:start position:0%
do that by just using square brackets
 

00:04:18.489 --> 00:04:20.699 align:start position:0%
do that by just using square brackets
and<00:04:19.000><c> there</c><00:04:19.150><c> we</c><00:04:19.239><c> go</c><00:04:19.419><c> that's</c><00:04:19.989><c> basically</c><00:04:20.409><c> new</c>

00:04:20.699 --> 00:04:20.709 align:start position:0%
and there we go that's basically new
 

00:04:20.709 --> 00:04:22.619 align:start position:0%
and there we go that's basically new
right<00:04:21.189><c> that's</c><00:04:21.579><c> how</c><00:04:21.789><c> you</c><00:04:21.849><c> use</c><00:04:22.150><c> the</c><00:04:22.330><c> new</c><00:04:22.449><c> keyword</c>

00:04:22.619 --> 00:04:22.629 align:start position:0%
right that's how you use the new keyword
 

00:04:22.629 --> 00:04:24.480 align:start position:0%
right that's how you use the new keyword
let's<00:04:23.379><c> talk</c><00:04:23.530><c> about</c><00:04:23.770><c> it</c><00:04:23.889><c> a</c><00:04:24.009><c> little</c><00:04:24.189><c> bit</c><00:04:24.340><c> more</c>

00:04:24.480 --> 00:04:24.490 align:start position:0%
let's talk about it a little bit more
 

00:04:24.490 --> 00:04:26.700 align:start position:0%
let's talk about it a little bit more
with<00:04:24.729><c> classes</c><00:04:25.300><c> the</c><00:04:25.689><c> nuclear</c><00:04:26.080><c> what</c><00:04:26.229><c> does</c><00:04:26.409><c> two</c>

00:04:26.700 --> 00:04:26.710 align:start position:0%
with classes the nuclear what does two
 

00:04:26.710 --> 00:04:28.679 align:start position:0%
with classes the nuclear what does two
things<00:04:26.740><c> it</c><00:04:27.099><c> doesn't</c><00:04:27.280><c> just</c><00:04:27.759><c> look</c><00:04:27.939><c> at</c><00:04:28.240><c> entity</c>

00:04:28.679 --> 00:04:28.689 align:start position:0%
things it doesn't just look at entity
 

00:04:28.689 --> 00:04:30.749 align:start position:0%
things it doesn't just look at entity
see<00:04:29.110><c> how</c><00:04:29.289><c> big</c><00:04:29.560><c> an</c><00:04:29.740><c> she</c><00:04:29.979><c> is</c><00:04:30.009><c> in</c><00:04:30.219><c> this</c><00:04:30.340><c> case</c><00:04:30.520><c> it's</c>

00:04:30.749 --> 00:04:30.759 align:start position:0%
see how big an she is in this case it's
 

00:04:30.759 --> 00:04:32.879 align:start position:0%
see how big an she is in this case it's
a<00:04:30.849><c> string</c><00:04:31.240><c> so</c><00:04:31.539><c> that's</c><00:04:31.659><c> I</c><00:04:31.840><c> think</c><00:04:31.870><c> like</c><00:04:32.229><c> 28</c><00:04:32.680><c> bytes</c>

00:04:32.879 --> 00:04:32.889 align:start position:0%
a string so that's I think like 28 bytes
 

00:04:32.889 --> 00:04:34.350 align:start position:0%
a string so that's I think like 28 bytes
or<00:04:33.129><c> something</c><00:04:33.400><c> like</c><00:04:33.490><c> that</c><00:04:33.550><c> don't</c><00:04:33.909><c> quote</c><00:04:34.150><c> me</c><00:04:34.330><c> on</c>

00:04:34.350 --> 00:04:34.360 align:start position:0%
or something like that don't quote me on
 

00:04:34.360 --> 00:04:36.719 align:start position:0%
or something like that don't quote me on
that<00:04:34.449><c> I'm</c><00:04:34.659><c> just</c><00:04:34.870><c> guessing</c><00:04:35.800><c> from</c><00:04:36.159><c> memory</c><00:04:36.460><c> it</c>

00:04:36.719 --> 00:04:36.729 align:start position:0%
that I'm just guessing from memory it
 

00:04:36.729 --> 00:04:38.820 align:start position:0%
that I'm just guessing from memory it
multiplies<00:04:37.240><c> that</c><00:04:37.270><c> by</c><00:04:37.479><c> 50</c><00:04:37.990><c> and</c><00:04:38.110><c> it</c><00:04:38.199><c> asks</c><00:04:38.590><c> for</c><00:04:38.620><c> a</c>

00:04:38.820 --> 00:04:38.830 align:start position:0%
multiplies that by 50 and it asks for a
 

00:04:38.830 --> 00:04:41.129 align:start position:0%
multiplies that by 50 and it asks for a
block<00:04:39.129><c> of</c><00:04:39.370><c> that</c><00:04:39.699><c> many</c><00:04:39.969><c> bytes</c><00:04:40.270><c> in</c><00:04:40.629><c> the</c><00:04:40.719><c> case</c><00:04:40.960><c> of</c>

00:04:41.129 --> 00:04:41.139 align:start position:0%
block of that many bytes in the case of
 

00:04:41.139 --> 00:04:42.510 align:start position:0%
block of that many bytes in the case of
an<00:04:41.229><c> array</c><00:04:41.500><c> though</c><00:04:41.740><c> you'll</c><00:04:41.949><c> actually</c><00:04:42.159><c> get</c><00:04:42.460><c> a</c>

00:04:42.510 --> 00:04:42.520 align:start position:0%
an array though you'll actually get a
 

00:04:42.520 --> 00:04:45.779 align:start position:0%
an array though you'll actually get a
block<00:04:42.789><c> of</c><00:04:43.000><c> 50</c><00:04:43.599><c> entities</c><00:04:44.080><c> just</c><00:04:44.789><c> continuously</c>

00:04:45.779 --> 00:04:45.789 align:start position:0%
block of 50 entities just continuously
 

00:04:45.789 --> 00:04:47.939 align:start position:0%
block of 50 entities just continuously
in<00:04:45.969><c> memory</c><00:04:46.300><c> so</c><00:04:46.840><c> this</c><00:04:46.930><c> is</c><00:04:47.080><c> actually</c><00:04:47.469><c> kind</c><00:04:47.710><c> of</c>

00:04:47.939 --> 00:04:47.949 align:start position:0%
in memory so this is actually kind of
 

00:04:47.949 --> 00:04:49.980 align:start position:0%
in memory so this is actually kind of
like<00:04:48.099><c> allocating</c><00:04:48.729><c> 50</c><00:04:49.150><c> entities</c><00:04:49.479><c> on</c><00:04:49.599><c> the</c><00:04:49.629><c> stack</c>

00:04:49.980 --> 00:04:49.990 align:start position:0%
like allocating 50 entities on the stack
 

00:04:49.990 --> 00:04:51.959 align:start position:0%
like allocating 50 entities on the stack
just<00:04:50.800><c> in</c><00:04:51.069><c> a</c><00:04:51.099><c> row</c><00:04:51.340><c> it's</c><00:04:51.610><c> a</c><00:04:51.639><c> little</c><00:04:51.879><c> bit</c>

00:04:51.959 --> 00:04:51.969 align:start position:0%
just in a row it's a little bit
 

00:04:51.969 --> 00:04:53.369 align:start position:0%
just in a row it's a little bit
different<00:04:52.300><c> because</c><00:04:52.389><c> you're</c><00:04:52.659><c> still</c><00:04:52.870><c> allocated</c>

00:04:53.369 --> 00:04:53.379 align:start position:0%
different because you're still allocated
 

00:04:53.379 --> 00:04:55.110 align:start position:0%
different because you're still allocated
on<00:04:53.469><c> the</c><00:04:53.500><c> heap</c><00:04:53.590><c> but</c><00:04:54.159><c> each</c><00:04:54.370><c> entity</c><00:04:54.940><c> in</c><00:04:55.030><c> this</c>

00:04:55.110 --> 00:04:55.120 align:start position:0%
on the heap but each entity in this
 

00:04:55.120 --> 00:04:57.540 align:start position:0%
on the heap but each entity in this
example<00:04:55.449><c> won't</c><00:04:55.900><c> really</c><00:04:56.289><c> be</c><00:04:56.590><c> in</c><00:04:56.889><c> another</c>

00:04:57.540 --> 00:04:57.550 align:start position:0%
example won't really be in another
 

00:04:57.550 --> 00:04:59.129 align:start position:0%
example won't really be in another
memory<00:04:58.030><c> breast</c><00:04:58.330><c> you</c><00:04:58.509><c> have</c><00:04:58.659><c> your</c><00:04:58.810><c> block</c><00:04:59.020><c> of</c>

00:04:59.129 --> 00:04:59.139 align:start position:0%
memory breast you have your block of
 

00:04:59.139 --> 00:05:01.110 align:start position:0%
memory breast you have your block of
memory<00:04:59.469><c> which</c><00:04:59.650><c> is</c><00:04:59.680><c> 50</c><00:05:00.129><c> entity</c><00:05:00.520><c> it's</c><00:05:00.639><c> just</c><00:05:00.789><c> just</c>

00:05:01.110 --> 00:05:01.120 align:start position:0%
memory which is 50 entity it's just just
 

00:05:01.120 --> 00:05:03.930 align:start position:0%
memory which is 50 entity it's just just
in<00:05:01.330><c> a</c><00:05:01.449><c> row</c><00:05:01.659><c> if</c><00:05:01.930><c> we</c><00:05:02.139><c> go</c><00:05:02.289><c> back</c><00:05:02.560><c> to</c><00:05:02.889><c> two</c><00:05:03.490><c> this</c><00:05:03.639><c> just</c>

00:05:03.930 --> 00:05:03.940 align:start position:0%
in a row if we go back to two this just
 

00:05:03.940 --> 00:05:06.330 align:start position:0%
in a row if we go back to two this just
being<00:05:04.180><c> a</c><00:05:04.330><c> heap</c><00:05:04.539><c> allocated</c><00:05:04.990><c> single</c><00:05:05.830><c> entity</c>

00:05:06.330 --> 00:05:06.340 align:start position:0%
being a heap allocated single entity
 

00:05:06.340 --> 00:05:08.339 align:start position:0%
being a heap allocated single entity
object<00:05:06.460><c> then</c><00:05:07.090><c> by</c><00:05:07.270><c> writing</c><00:05:07.509><c> this</c><00:05:07.719><c> new</c><00:05:07.930><c> keyword</c>

00:05:08.339 --> 00:05:08.349 align:start position:0%
object then by writing this new keyword
 

00:05:08.349 --> 00:05:10.379 align:start position:0%
object then by writing this new keyword
we<00:05:08.529><c> not</c><00:05:08.740><c> only</c><00:05:08.919><c> allocate</c><00:05:09.550><c> enough</c><00:05:09.759><c> memory</c><00:05:10.150><c> on</c>

00:05:10.379 --> 00:05:10.389 align:start position:0%
we not only allocate enough memory on
 

00:05:10.389 --> 00:05:12.360 align:start position:0%
we not only allocate enough memory on
the<00:05:10.659><c> heap</c><00:05:10.690><c> to</c><00:05:11.050><c> store</c><00:05:11.379><c> this</c><00:05:11.560><c> anta</c><00:05:11.889><c> see</c><00:05:12.009><c> we</c><00:05:12.190><c> also</c>

00:05:12.360 --> 00:05:12.370 align:start position:0%
the heap to store this anta see we also
 

00:05:12.370 --> 00:05:14.309 align:start position:0%
the heap to store this anta see we also
call<00:05:12.819><c> the</c><00:05:13.000><c> constructor</c><00:05:13.360><c> that's</c><00:05:13.990><c> the</c><00:05:14.169><c> other</c>

00:05:14.309 --> 00:05:14.319 align:start position:0%
call the constructor that's the other
 

00:05:14.319 --> 00:05:16.080 align:start position:0%
call the constructor that's the other
important<00:05:14.949><c> thing</c><00:05:15.219><c> that</c><00:05:15.250><c> the</c><00:05:15.520><c> nuclear</c><00:05:15.879><c> work</c>

00:05:16.080 --> 00:05:16.090 align:start position:0%
important thing that the nuclear work
 

00:05:16.090 --> 00:05:18.600 align:start position:0%
important thing that the nuclear work
does<00:05:16.300><c> it</c><00:05:16.330><c> not</c><00:05:16.659><c> only</c><00:05:16.870><c> allocates</c><00:05:17.529><c> the</c><00:05:17.620><c> memory</c><00:05:18.099><c> it</c>

00:05:18.600 --> 00:05:18.610 align:start position:0%
does it not only allocates the memory it
 

00:05:18.610 --> 00:05:20.700 align:start position:0%
does it not only allocates the memory it
also<00:05:18.849><c> calls</c><00:05:19.270><c> the</c><00:05:19.360><c> constructor</c><00:05:19.569><c> now</c><00:05:20.379><c> behind</c>

00:05:20.700 --> 00:05:20.710 align:start position:0%
also calls the constructor now behind
 

00:05:20.710 --> 00:05:23.010 align:start position:0%
also calls the constructor now behind
the<00:05:20.889><c> scenes</c><00:05:21.159><c> all</c><00:05:21.639><c> new</c><00:05:22.060><c> really</c><00:05:22.389><c> is</c><00:05:22.539><c> and</c><00:05:22.810><c> you</c><00:05:22.870><c> can</c>

00:05:23.010 --> 00:05:23.020 align:start position:0%
the scenes all new really is and you can
 

00:05:23.020 --> 00:05:25.050 align:start position:0%
the scenes all new really is and you can
see<00:05:23.199><c> what</c><00:05:23.379><c> I've</c><00:05:23.500><c> done</c><00:05:23.529><c> here</c><00:05:24.009><c> is</c><00:05:24.069><c> I've</c><00:05:24.340><c> just</c><00:05:24.370><c> if</c>

00:05:25.050 --> 00:05:25.060 align:start position:0%
see what I've done here is I've just if
 

00:05:25.060 --> 00:05:26.640 align:start position:0%
see what I've done here is I've just if
you<00:05:25.210><c> right-click</c><00:05:25.449><c> on</c><00:05:25.779><c> you</c><00:05:25.930><c> you</c><00:05:26.139><c> can</c><00:05:26.289><c> go</c><00:05:26.590><c> to</c>

00:05:26.640 --> 00:05:26.650 align:start position:0%
you right-click on you you can go to
 

00:05:26.650 --> 00:05:29.219 align:start position:0%
you right-click on you you can go to
definition<00:05:27.069><c> and</c><00:05:27.699><c> you'll</c><00:05:28.180><c> see</c><00:05:28.419><c> what</c><00:05:28.690><c> this</c><00:05:28.990><c> dot</c>

00:05:29.219 --> 00:05:29.229 align:start position:0%
definition and you'll see what this dot
 

00:05:29.229 --> 00:05:31.170 align:start position:0%
definition and you'll see what this dot
operator<00:05:29.740><c> new</c><00:05:30.159><c> actually</c><00:05:30.520><c> is</c><00:05:30.669><c> first</c><00:05:30.969><c> of</c><00:05:31.090><c> all</c>

00:05:31.170 --> 00:05:31.180 align:start position:0%
operator new actually is first of all
 

00:05:31.180 --> 00:05:33.480 align:start position:0%
operator new actually is first of all
you'll<00:05:31.750><c> see</c><00:05:31.810><c> that</c><00:05:32.020><c> it's</c><00:05:32.199><c> an</c><00:05:32.319><c> operator</c><00:05:32.740><c> new</c><00:05:33.190><c> is</c>

00:05:33.480 --> 00:05:33.490 align:start position:0%
you'll see that it's an operator new is
 

00:05:33.490 --> 00:05:36.450 align:start position:0%
you'll see that it's an operator new is
just<00:05:33.520><c> an</c><00:05:34.210><c> operator</c><00:05:34.719><c> just</c><00:05:35.050><c> like</c><00:05:35.199><c> plus</c><00:05:35.560><c> or</c><00:05:35.919><c> minus</c>

00:05:36.450 --> 00:05:36.460 align:start position:0%
just an operator just like plus or minus
 

00:05:36.460 --> 00:05:39.329 align:start position:0%
just an operator just like plus or minus
or<00:05:36.639><c> equals</c><00:05:37.240><c> it's</c><00:05:37.629><c> an</c><00:05:37.870><c> operator</c><00:05:38.469><c> which</c><00:05:39.009><c> means</c>

00:05:39.329 --> 00:05:39.339 align:start position:0%
or equals it's an operator which means
 

00:05:39.339 --> 00:05:41.100 align:start position:0%
or equals it's an operator which means
that<00:05:39.520><c> you</c><00:05:39.580><c> can</c><00:05:39.729><c> actually</c><00:05:39.879><c> overload</c><00:05:40.750><c> the</c>

00:05:41.100 --> 00:05:41.110 align:start position:0%
that you can actually overload the
 

00:05:41.110 --> 00:05:43.559 align:start position:0%
that you can actually overload the
operator<00:05:41.529><c> and</c><00:05:41.830><c> changes</c><00:05:42.669><c> behavior</c><00:05:42.879><c> we'll</c><00:05:43.389><c> talk</c>

00:05:43.559 --> 00:05:43.569 align:start position:0%
operator and changes behavior we'll talk
 

00:05:43.569 --> 00:05:45.360 align:start position:0%
operator and changes behavior we'll talk
about<00:05:43.659><c> overloading</c><00:05:44.379><c> operators</c><00:05:44.860><c> very</c><00:05:45.159><c> very</c>

00:05:45.360 --> 00:05:45.370 align:start position:0%
about overloading operators very very
 

00:05:45.370 --> 00:05:48.149 align:start position:0%
about overloading operators very very
soon<00:05:45.639><c> link</c><00:05:46.060><c> in</c><00:05:46.479><c> the</c><00:05:46.509><c> description</c><00:05:46.919><c> card</c><00:05:47.919><c> on</c><00:05:48.039><c> the</c>

00:05:48.149 --> 00:05:48.159 align:start position:0%
soon link in the description card on the
 

00:05:48.159 --> 00:05:50.640 align:start position:0%
soon link in the description card on the
screen<00:05:48.490><c> all</c><00:05:49.150><c> that</c><00:05:49.360><c> jazz</c><00:05:49.779><c> but</c><00:05:50.229><c> second</c><00:05:50.469><c> of</c><00:05:50.560><c> all</c>

00:05:50.640 --> 00:05:50.650 align:start position:0%
screen all that jazz but second of all
 

00:05:50.650 --> 00:05:51.990 align:start position:0%
screen all that jazz but second of all
you<00:05:50.740><c> can</c><00:05:50.889><c> see</c><00:05:51.009><c> that</c><00:05:51.159><c> is</c><00:05:51.250><c> literally</c><00:05:51.909><c> just</c>

00:05:51.990 --> 00:05:52.000 align:start position:0%
you can see that is literally just
 

00:05:52.000 --> 00:05:53.760 align:start position:0%
you can see that is literally just
function<00:05:52.539><c> and</c><00:05:52.690><c> this</c><00:05:52.810><c> is</c><00:05:52.870><c> the</c><00:05:53.050><c> size</c><00:05:53.379><c> that</c><00:05:53.650><c> it</c>

00:05:53.760 --> 00:05:53.770 align:start position:0%
function and this is the size that it
 

00:05:53.770 --> 00:05:55.499 align:start position:0%
function and this is the size that it
takes<00:05:53.949><c> that's</c><00:05:54.219><c> how</c><00:05:54.430><c> much</c><00:05:54.669><c> it</c><00:05:54.849><c> allocates</c><00:05:55.270><c> it</c>

00:05:55.499 --> 00:05:55.509 align:start position:0%
takes that's how much it allocates it
 

00:05:55.509 --> 00:05:57.779 align:start position:0%
takes that's how much it allocates it
returns<00:05:55.870><c> a</c><00:05:55.990><c> void</c><00:05:56.199><c> pointer</c><00:05:56.469><c> we</c><00:05:57.460><c> might</c><00:05:57.610><c> talk</c>

00:05:57.779 --> 00:05:57.789 align:start position:0%
returns a void pointer we might talk
 

00:05:57.789 --> 00:05:59.279 align:start position:0%
returns a void pointer we might talk
about<00:05:57.849><c> void</c><00:05:58.240><c> pointers</c><00:05:58.629><c> in</c><00:05:58.719><c> a</c><00:05:58.810><c> separate</c><00:05:59.139><c> video</c>

00:05:59.279 --> 00:05:59.289 align:start position:0%
about void pointers in a separate video
 

00:05:59.289 --> 00:06:01.290 align:start position:0%
about void pointers in a separate video
but<00:05:59.529><c> basically</c><00:05:59.680><c> a</c><00:05:59.949><c> void</c><00:06:00.159><c> pointer</c><00:06:00.190><c> is</c><00:06:00.819><c> just</c>

00:06:01.290 --> 00:06:01.300 align:start position:0%
but basically a void pointer is just
 

00:06:01.300 --> 00:06:04.110 align:start position:0%
but basically a void pointer is just
it's<00:06:01.870><c> a</c><00:06:01.990><c> pointer</c><00:06:02.349><c> with</c><00:06:02.500><c> no</c><00:06:02.620><c> time</c><00:06:02.889><c> a</c><00:06:03.129><c> pointer</c><00:06:04.060><c> is</c>

00:06:04.110 --> 00:06:04.120 align:start position:0%
it's a pointer with no time a pointer is
 

00:06:04.120 --> 00:06:05.909 align:start position:0%
it's a pointer with no time a pointer is
just<00:06:04.300><c> a</c><00:06:04.389><c> memory</c><00:06:04.659><c> address</c><00:06:04.750><c> so</c><00:06:05.169><c> of</c><00:06:05.259><c> course</c><00:06:05.409><c> it's</c>

00:06:05.909 --> 00:06:05.919 align:start position:0%
just a memory address so of course it's
 

00:06:05.919 --> 00:06:08.309 align:start position:0%
just a memory address so of course it's
like<00:06:06.370><c> pointers</c><00:06:06.849><c> really</c><00:06:07.060><c> need</c><00:06:07.360><c> a</c><00:06:07.389><c> type</c><00:06:07.779><c> it</c>

00:06:08.309 --> 00:06:08.319 align:start position:0%
like pointers really need a type it
 

00:06:08.319 --> 00:06:09.659 align:start position:0%
like pointers really need a type it
needs<00:06:08.560><c> a</c><00:06:08.680><c> type</c><00:06:08.889><c> for</c><00:06:09.190><c> you</c><00:06:09.279><c> to</c><00:06:09.370><c> be</c><00:06:09.460><c> able</c><00:06:09.550><c> to</c>

00:06:09.659 --> 00:06:09.669 align:start position:0%
needs a type for you to be able to
 

00:06:09.669 --> 00:06:11.490 align:start position:0%
needs a type for you to be able to
manipulate<00:06:10.000><c> it</c><00:06:10.449><c> probably</c><00:06:10.990><c> the</c><00:06:11.139><c> way</c><00:06:11.229><c> that</c><00:06:11.409><c> you</c>

00:06:11.490 --> 00:06:11.500 align:start position:0%
manipulate it probably the way that you
 

00:06:11.500 --> 00:06:14.309 align:start position:0%
manipulate it probably the way that you
want<00:06:11.770><c> to</c><00:06:11.830><c> but</c><00:06:12.550><c> at</c><00:06:12.789><c> its</c><00:06:13.060><c> core</c><00:06:13.150><c> a</c><00:06:13.690><c> pointer</c><00:06:14.199><c> is</c>

00:06:14.309 --> 00:06:14.319 align:start position:0%
want to but at its core a pointer is
 

00:06:14.319 --> 00:06:16.050 align:start position:0%
want to but at its core a pointer is
just<00:06:14.500><c> a</c><00:06:14.589><c> memory</c><00:06:14.770><c> address</c><00:06:14.949><c> it's</c><00:06:15.460><c> just</c><00:06:15.669><c> a</c><00:06:15.759><c> number</c>

00:06:16.050 --> 00:06:16.060 align:start position:0%
just a memory address it's just a number
 

00:06:16.060 --> 00:06:17.579 align:start position:0%
just a memory address it's just a number
so<00:06:16.300><c> why</c><00:06:16.479><c> would</c><00:06:16.659><c> it</c><00:06:16.690><c> need</c><00:06:16.870><c> a</c><00:06:16.930><c> specific</c><00:06:17.199><c> type</c>

00:06:17.579 --> 00:06:17.589 align:start position:0%
so why would it need a specific type
 

00:06:17.589 --> 00:06:19.709 align:start position:0%
so why would it need a specific type
like<00:06:17.830><c> int</c><00:06:17.979><c> or</c><00:06:18.310><c> double</c><00:06:18.669><c> or</c><00:06:18.789><c> entity</c><00:06:19.270><c> but</c><00:06:19.479><c> anyway</c>

00:06:19.709 --> 00:06:19.719 align:start position:0%
like int or double or entity but anyway
 

00:06:19.719 --> 00:06:20.969 align:start position:0%
like int or double or entity but anyway
you<00:06:19.779><c> can</c><00:06:19.960><c> see</c><00:06:20.110><c> that</c><00:06:20.259><c> we</c><00:06:20.379><c> return</c><00:06:20.650><c> a</c><00:06:20.710><c> void</c>

00:06:20.969 --> 00:06:20.979 align:start position:0%
you can see that we return a void
 

00:06:20.979 --> 00:06:23.129 align:start position:0%
you can see that we return a void
pointer<00:06:21.009><c> so</c><00:06:21.460><c> it</c><00:06:21.550><c> returns</c><00:06:21.819><c> a</c><00:06:21.879><c> pointer</c><00:06:22.120><c> it</c><00:06:22.599><c> so</c>

00:06:23.129 --> 00:06:23.139 align:start position:0%
pointer so it returns a pointer it so
 

00:06:23.139 --> 00:06:25.210 align:start position:0%
pointer so it returns a pointer it so
takes<00:06:23.409><c> in</c><00:06:23.500><c> a</c><00:06:23.589><c> size</c><00:06:23.800><c> and</c><00:06:24.159><c> it</c><00:06:24.279><c> returns</c><00:06:24.610><c> a</c><00:06:24.729><c> point</c>

00:06:25.210 --> 00:06:25.220 align:start position:0%
takes in a size and it returns a point
 

00:06:25.220 --> 00:06:26.980 align:start position:0%
takes in a size and it returns a point
to<00:06:25.430><c> that</c><00:06:25.640><c> allocate</c><00:06:26.030><c> block</c><00:06:26.270><c> of</c><00:06:26.390><c> memory</c><00:06:26.570><c> but</c>

00:06:26.980 --> 00:06:26.990 align:start position:0%
to that allocate block of memory but
 

00:06:26.990 --> 00:06:29.080 align:start position:0%
to that allocate block of memory but
what<00:06:27.230><c> new</c><00:06:27.470><c> actually</c><00:06:27.920><c> does</c><00:06:28.250><c> behind</c><00:06:28.670><c> the</c><00:06:28.820><c> scenes</c>

00:06:29.080 --> 00:06:29.090 align:start position:0%
what new actually does behind the scenes
 

00:06:29.090 --> 00:06:30.610 align:start position:0%
what new actually does behind the scenes
and<00:06:29.300><c> strategies</c><00:06:29.690><c> speaking</c><00:06:30.140><c> this</c><00:06:30.230><c> is</c><00:06:30.290><c> actually</c>

00:06:30.610 --> 00:06:30.620 align:start position:0%
and strategies speaking this is actually
 

00:06:30.620 --> 00:06:32.140 align:start position:0%
and strategies speaking this is actually
dependent<00:06:30.770><c> on</c><00:06:31.100><c> the</c><00:06:31.220><c> state</c><00:06:31.370><c> plus</c><00:06:31.550><c> plus</c><00:06:31.760><c> library</c>

00:06:32.140 --> 00:06:32.150 align:start position:0%
dependent on the state plus plus library
 

00:06:32.150 --> 00:06:33.520 align:start position:0%
dependent on the state plus plus library
so<00:06:32.300><c> of</c><00:06:32.360><c> course</c><00:06:32.510><c> Bureau</c><00:06:32.870><c> your</c><00:06:33.110><c> own</c><00:06:33.200><c> save</c><00:06:33.410><c> us</c>

00:06:33.520 --> 00:06:33.530 align:start position:0%
so of course Bureau your own save us
 

00:06:33.530 --> 00:06:34.870 align:start position:0%
so of course Bureau your own save us
plus<00:06:33.710><c> compiler</c><00:06:34.130><c> with</c><00:06:34.280><c> your</c><00:06:34.400><c> honesty</c><00:06:34.520><c> of</c><00:06:34.790><c> us</c>

00:06:34.870 --> 00:06:34.880 align:start position:0%
plus compiler with your honesty of us
 

00:06:34.880 --> 00:06:36.190 align:start position:0%
plus compiler with your honesty of us
loss<00:06:35.030><c> library</c><00:06:35.420><c> because</c><00:06:35.600><c> theoretically</c><00:06:35.990><c> make</c>

00:06:36.190 --> 00:06:36.200 align:start position:0%
loss library because theoretically make
 

00:06:36.200 --> 00:06:39.150 align:start position:0%
loss library because theoretically make
it<00:06:36.320><c> do</c><00:06:36.380><c> anything</c><00:06:36.620><c> you</c><00:06:36.800><c> wanted</c><00:06:37.190><c> but</c><00:06:38.050><c> usually</c>

00:06:39.150 --> 00:06:39.160 align:start position:0%
it do anything you wanted but usually
 

00:06:39.160 --> 00:06:41.950 align:start position:0%
it do anything you wanted but usually
usually<00:06:40.160><c> pulling</c><00:06:41.030><c> you</c><00:06:41.240><c> will</c><00:06:41.570><c> call</c><00:06:41.810><c> the</c>

00:06:41.950 --> 00:06:41.960 align:start position:0%
usually pulling you will call the
 

00:06:41.960 --> 00:06:43.960 align:start position:0%
usually pulling you will call the
underlying<00:06:42.440><c> state</c><00:06:42.740><c> function</c><00:06:43.220><c> malloc</c><00:06:43.730><c> which</c>

00:06:43.960 --> 00:06:43.970 align:start position:0%
underlying state function malloc which
 

00:06:43.970 --> 00:06:45.610 align:start position:0%
underlying state function malloc which
that's<00:06:44.210><c> for</c><00:06:44.420><c> memory</c><00:06:44.720><c> allocate</c><00:06:45.200><c> and</c><00:06:45.350><c> what</c><00:06:45.500><c> this</c>

00:06:45.610 --> 00:06:45.620 align:start position:0%
that's for memory allocate and what this
 

00:06:45.620 --> 00:06:48.070 align:start position:0%
that's for memory allocate and what this
will<00:06:45.770><c> actually</c><00:06:46.220><c> do</c><00:06:46.400><c> you'll</c><00:06:47.030><c> note</c><00:06:47.270><c> is</c><00:06:47.570><c> taking</c><00:06:47.990><c> a</c>

00:06:48.070 --> 00:06:48.080 align:start position:0%
will actually do you'll note is taking a
 

00:06:48.080 --> 00:06:50.380 align:start position:0%
will actually do you'll note is taking a
size<00:06:48.320><c> of</c><00:06:48.830><c> how</c><00:06:49.100><c> many</c><00:06:49.340><c> fights</c><00:06:49.610><c> we</c><00:06:49.850><c> want</c><00:06:50.090><c> and</c>

00:06:50.380 --> 00:06:50.390 align:start position:0%
size of how many fights we want and
 

00:06:50.390 --> 00:06:53.230 align:start position:0%
size of how many fights we want and
return<00:06:51.020><c> a</c><00:06:51.320><c> void</c><00:06:52.070><c> pointer</c><00:06:52.580><c> so</c><00:06:52.790><c> that's</c><00:06:52.970><c> really</c>

00:06:53.230 --> 00:06:53.240 align:start position:0%
return a void pointer so that's really
 

00:06:53.240 --> 00:06:55.870 align:start position:0%
return a void pointer so that's really
all<00:06:53.510><c> it</c><00:06:53.540><c> does</c><00:06:53.870><c> so</c><00:06:54.200><c> that</c><00:06:54.320><c> being</c><00:06:54.590><c> said</c><00:06:54.680><c> this</c><00:06:55.490><c> code</c>

00:06:55.870 --> 00:06:55.880 align:start position:0%
all it does so that being said this code
 

00:06:55.880 --> 00:06:58.450 align:start position:0%
all it does so that being said this code
is<00:06:56.030><c> actually</c><00:06:56.210><c> kind</c><00:06:56.900><c> of</c><00:06:57.140><c> equivalent</c><00:06:57.770><c> to</c><00:06:57.980><c> if</c><00:06:58.280><c> we</c>

00:06:58.450 --> 00:06:58.460 align:start position:0%
is actually kind of equivalent to if we
 

00:06:58.460 --> 00:07:02.290 align:start position:0%
is actually kind of equivalent to if we
just<00:06:58.790><c> written</c><00:06:59.060><c> malloc</c><00:06:59.900><c> sizeof</c><00:07:00.730><c> entity</c><00:07:01.730><c> like</c>

00:07:02.290 --> 00:07:02.300 align:start position:0%
just written malloc sizeof entity like
 

00:07:02.300 --> 00:07:04.030 align:start position:0%
just written malloc sizeof entity like
that<00:07:02.510><c> and</c><00:07:02.780><c> then</c><00:07:02.990><c> of</c><00:07:03.110><c> course</c><00:07:03.140><c> cost</c><00:07:03.620><c> this</c><00:07:03.830><c> back</c>

00:07:04.030 --> 00:07:04.040 align:start position:0%
that and then of course cost this back
 

00:07:04.040 --> 00:07:05.470 align:start position:0%
that and then of course cost this back
into<00:07:04.280><c> an</c><00:07:04.460><c> end</c><00:07:04.640><c> to</c><00:07:04.760><c> see</c><00:07:04.850><c> something</c><00:07:05.180><c> we</c><00:07:05.270><c> wouldn't</c>

00:07:05.470 --> 00:07:05.480 align:start position:0%
into an end to see something we wouldn't
 

00:07:05.480 --> 00:07:08.380 align:start position:0%
into an end to see something we wouldn't
have<00:07:05.630><c> had</c><00:07:05.780><c> to</c><00:07:05.900><c> do</c><00:07:06.020><c> in</c><00:07:06.140><c> C</c><00:07:06.410><c> but</c><00:07:07.040><c> we</c><00:07:07.160><c> do</c><00:07:07.280><c> in</c><00:07:07.400><c> C++</c><00:07:07.970><c> but</c>

00:07:08.380 --> 00:07:08.390 align:start position:0%
have had to do in C but we do in C++ but
 

00:07:08.390 --> 00:07:10.120 align:start position:0%
have had to do in C but we do in C++ but
the<00:07:08.510><c> difference</c><00:07:09.050><c> between</c><00:07:09.260><c> these</c><00:07:09.650><c> two</c><00:07:09.920><c> lines</c>

00:07:10.120 --> 00:07:10.130 align:start position:0%
the difference between these two lines
 

00:07:10.130 --> 00:07:11.890 align:start position:0%
the difference between these two lines
of<00:07:10.280><c> code</c><00:07:10.460><c> the</c><00:07:10.730><c> only</c><00:07:11.270><c> difference</c><00:07:11.750><c> between</c>

00:07:11.890 --> 00:07:11.900 align:start position:0%
of code the only difference between
 

00:07:11.900 --> 00:07:14.230 align:start position:0%
of code the only difference between
these<00:07:12.230><c> two</c><00:07:12.470><c> lines</c><00:07:12.620><c> of</c><00:07:12.800><c> code</c><00:07:12.860><c> is</c><00:07:13.280><c> the</c><00:07:13.850><c> fact</c><00:07:14.090><c> that</c>

00:07:14.230 --> 00:07:14.240 align:start position:0%
these two lines of code is the fact that
 

00:07:14.240 --> 00:07:16.150 align:start position:0%
these two lines of code is the fact that
this<00:07:14.690><c> will</c><00:07:15.080><c> actually</c><00:07:15.230><c> call</c><00:07:15.680><c> the</c><00:07:15.860><c> entity</c>

00:07:16.150 --> 00:07:16.160 align:start position:0%
this will actually call the entity
 

00:07:16.160 --> 00:07:17.950 align:start position:0%
this will actually call the entity
constructor<00:07:16.730><c> whereas</c><00:07:17.300><c> what</c><00:07:17.450><c> this</c><00:07:17.630><c> will</c><00:07:17.810><c> do</c><00:07:17.930><c> is</c>

00:07:17.950 --> 00:07:17.960 align:start position:0%
constructor whereas what this will do is
 

00:07:17.960 --> 00:07:20.230 align:start position:0%
constructor whereas what this will do is
purely<00:07:18.380><c> allocate</c><00:07:18.890><c> the</c><00:07:19.040><c> memory</c><00:07:19.190><c> and</c><00:07:19.640><c> then</c><00:07:20.060><c> give</c>

00:07:20.230 --> 00:07:20.240 align:start position:0%
purely allocate the memory and then give
 

00:07:20.240 --> 00:07:22.060 align:start position:0%
purely allocate the memory and then give
us<00:07:20.330><c> a</c><00:07:20.450><c> pointer</c><00:07:20.780><c> to</c><00:07:20.870><c> that</c><00:07:20.900><c> memory</c><00:07:21.350><c> not</c><00:07:21.620><c> calling</c>

00:07:22.060 --> 00:07:22.070 align:start position:0%
us a pointer to that memory not calling
 

00:07:22.070 --> 00:07:24.250 align:start position:0%
us a pointer to that memory not calling
the<00:07:22.190><c> constructor</c><00:07:22.310><c> you</c><00:07:23.240><c> should</c><00:07:23.540><c> not</c><00:07:23.780><c> be</c>

00:07:24.250 --> 00:07:24.260 align:start position:0%
the constructor you should not be
 

00:07:24.260 --> 00:07:26.800 align:start position:0%
the constructor you should not be
allocating<00:07:24.860><c> memory</c><00:07:24.980><c> tables</c><00:07:25.400><c> like</c><00:07:25.940><c> this</c><00:07:25.970><c> there</c>

00:07:26.800 --> 00:07:26.810 align:start position:0%
allocating memory tables like this there
 

00:07:26.810 --> 00:07:29.050 align:start position:0%
allocating memory tables like this there
are<00:07:26.840><c> some</c><00:07:27.350><c> situations</c><00:07:27.710><c> in</c><00:07:28.430><c> which</c><00:07:28.460><c> you</c><00:07:28.730><c> might</c>

00:07:29.050 --> 00:07:29.060 align:start position:0%
are some situations in which you might
 

00:07:29.060 --> 00:07:31.450 align:start position:0%
are some situations in which you might
want<00:07:29.120><c> to</c><00:07:29.419><c> do</c><00:07:29.600><c> that</c><00:07:29.780><c> we</c><00:07:30.620><c> might</c><00:07:30.830><c> talk</c><00:07:31.070><c> about</c><00:07:31.100><c> them</c>

00:07:31.450 --> 00:07:31.460 align:start position:0%
want to do that we might talk about them
 

00:07:31.460 --> 00:07:34.630 align:start position:0%
want to do that we might talk about them
later<00:07:31.640><c> but</c><00:07:32.620><c> for</c><00:07:33.620><c> you</c><00:07:33.800><c> right</c><00:07:34.070><c> now</c><00:07:34.280><c> if</c><00:07:34.460><c> you're</c>

00:07:34.630 --> 00:07:34.640 align:start position:0%
later but for you right now if you're
 

00:07:34.640 --> 00:07:35.830 align:start position:0%
later but for you right now if you're
watching<00:07:34.730><c> this</c><00:07:35.000><c> video</c><00:07:35.180><c> because</c><00:07:35.540><c> you</c><00:07:35.690><c> don't</c>

00:07:35.830 --> 00:07:35.840 align:start position:0%
watching this video because you don't
 

00:07:35.840 --> 00:07:37.870 align:start position:0%
watching this video because you don't
know<00:07:35.930><c> what</c><00:07:36.080><c> I</c><00:07:36.110><c> pretty</c><00:07:36.410><c> new</c><00:07:36.620><c> is</c><00:07:36.800><c> using</c><00:07:37.730><c> you</c>

00:07:37.870 --> 00:07:37.880 align:start position:0%
know what I pretty new is using you
 

00:07:37.880 --> 00:07:39.520 align:start position:0%
know what I pretty new is using you
because<00:07:38.120><c> this</c><00:07:38.690><c> of</c><00:07:38.720><c> course</c><00:07:38.870><c> won't</c><00:07:39.230><c> call</c><00:07:39.440><c> the</c>

00:07:39.520 --> 00:07:39.530 align:start position:0%
because this of course won't call the
 

00:07:39.530 --> 00:07:42.130 align:start position:0%
because this of course won't call the
constructor<00:07:39.770><c> and</c><00:07:40.070><c> it's</c><00:07:40.490><c> also</c><00:07:40.669><c> way</c><00:07:41.330><c> poor</c><00:07:41.870><c> code</c>

00:07:42.130 --> 00:07:42.140 align:start position:0%
constructor and it's also way poor code
 

00:07:42.140 --> 00:07:43.990 align:start position:0%
constructor and it's also way poor code
and<00:07:42.410><c> it's</c><00:07:42.620><c> just</c><00:07:42.830><c> harder</c><00:07:43.160><c> to</c><00:07:43.250><c> read</c><00:07:43.430><c> and</c><00:07:43.640><c> this</c><00:07:43.790><c> is</c>

00:07:43.990 --> 00:07:44.000 align:start position:0%
and it's just harder to read and this is
 

00:07:44.000 --> 00:07:45.250 align:start position:0%
and it's just harder to read and this is
really<00:07:44.300><c> the</c><00:07:44.390><c> way</c><00:07:44.479><c> that</c><00:07:44.630><c> you</c><00:07:44.690><c> should</c><00:07:44.720><c> be</c><00:07:45.050><c> doing</c>

00:07:45.250 --> 00:07:45.260 align:start position:0%
really the way that you should be doing
 

00:07:45.260 --> 00:07:46.630 align:start position:0%
really the way that you should be doing
it<00:07:45.410><c> the</c><00:07:45.919><c> last</c><00:07:46.100><c> thing</c><00:07:46.280><c> that</c><00:07:46.310><c> I'm</c><00:07:46.490><c> going</c><00:07:46.580><c> to</c>

00:07:46.630 --> 00:07:46.640 align:start position:0%
it the last thing that I'm going to
 

00:07:46.640 --> 00:07:48.430 align:start position:0%
it the last thing that I'm going to
mention<00:07:46.910><c> about</c><00:07:47.000><c> new</c><00:07:47.210><c> for</c><00:07:47.450><c> today</c><00:07:47.540><c> is</c><00:07:48.020><c> that</c><00:07:48.320><c> when</c>

00:07:48.430 --> 00:07:48.440 align:start position:0%
mention about new for today is that when
 

00:07:48.440 --> 00:07:50.560 align:start position:0%
mention about new for today is that when
you<00:07:48.590><c> do</c><00:07:48.800><c> use</c><00:07:49.070><c> the</c><00:07:49.190><c> new</c><00:07:49.310><c> keyword</c><00:07:49.550><c> you</c><00:07:50.180><c> have</c><00:07:50.390><c> to</c>

00:07:50.560 --> 00:07:50.570 align:start position:0%
you do use the new keyword you have to
 

00:07:50.570 --> 00:07:52.930 align:start position:0%
you do use the new keyword you have to
remember<00:07:50.750><c> that</c><00:07:51.050><c> you</c><00:07:51.169><c> must</c><00:07:51.560><c> use</c><00:07:51.800><c> delete</c><00:07:52.370><c> so</c>

00:07:52.930 --> 00:07:52.940 align:start position:0%
remember that you must use delete so
 

00:07:52.940 --> 00:07:54.730 align:start position:0%
remember that you must use delete so
once<00:07:53.360><c> we</c><00:07:53.510><c> allocate</c><00:07:53.930><c> all</c><00:07:54.140><c> these</c><00:07:54.380><c> variables</c>

00:07:54.730 --> 00:07:54.740 align:start position:0%
once we allocate all these variables
 

00:07:54.740 --> 00:07:57.280 align:start position:0%
once we allocate all these variables
like<00:07:55.010><c> B</c><00:07:55.310><c> and</c><00:07:55.610><c> E</c><00:07:55.790><c> we</c><00:07:56.270><c> have</c><00:07:56.479><c> to</c><00:07:56.660><c> use</c><00:07:56.810><c> the</c><00:07:56.960><c> delete</c>

00:07:57.280 --> 00:07:57.290 align:start position:0%
like B and E we have to use the delete
 

00:07:57.290 --> 00:07:59.380 align:start position:0%
like B and E we have to use the delete
keyword<00:07:57.650><c> which</c><00:07:58.040><c> is</c><00:07:58.070><c> also</c><00:07:58.400><c> an</c><00:07:58.640><c> operator</c><00:07:59.060><c> if</c><00:07:59.210><c> you</c>

00:07:59.380 --> 00:07:59.390 align:start position:0%
keyword which is also an operator if you
 

00:07:59.390 --> 00:08:01.540 align:start position:0%
keyword which is also an operator if you
go<00:07:59.900><c> to</c><00:07:59.960><c> the</c><00:08:00.080><c> definition</c><00:08:00.470><c> for</c><00:08:00.530><c> that</c><00:08:00.680><c> X</c><00:08:00.890><c> is</c><00:08:01.070><c> also</c>

00:08:01.540 --> 00:08:01.550 align:start position:0%
go to the definition for that X is also
 

00:08:01.550 --> 00:08:03.040 align:start position:0%
go to the definition for that X is also
an<00:08:01.640><c> operator</c><00:08:02.000><c> text</c><00:08:02.390><c> in</c><00:08:02.450><c> a</c><00:08:02.510><c> block</c><00:08:02.720><c> of</c><00:08:02.750><c> memory</c>

00:08:03.040 --> 00:08:03.050 align:start position:0%
an operator text in a block of memory
 

00:08:03.050 --> 00:08:05.650 align:start position:0%
an operator text in a block of memory
size<00:08:03.590><c> it's</c><00:08:04.160><c> just</c><00:08:04.280><c> a</c><00:08:04.370><c> regular</c><00:08:04.700><c> function</c><00:08:04.910><c> which</c>

00:08:05.650 --> 00:08:05.660 align:start position:0%
size it's just a regular function which
 

00:08:05.660 --> 00:08:07.900 align:start position:0%
size it's just a regular function which
calls<00:08:05.990><c> the</c><00:08:06.260><c> C</c><00:08:06.470><c> function</c><00:08:06.740><c> free</c><00:08:07.190><c> and</c><00:08:07.490><c> actually</c>

00:08:07.900 --> 00:08:07.910 align:start position:0%
calls the C function free and actually
 

00:08:07.910 --> 00:08:09.610 align:start position:0%
calls the C function free and actually
frees<00:08:08.210><c> the</c><00:08:08.390><c> block</c><00:08:08.570><c> of</c><00:08:08.720><c> memory</c><00:08:08.870><c> that</c><00:08:09.470><c> was</c>

00:08:09.610 --> 00:08:09.620 align:start position:0%
frees the block of memory that was
 

00:08:09.620 --> 00:08:11.469 align:start position:0%
frees the block of memory that was
malakut<00:08:10.130><c> this</c><00:08:10.400><c> is</c><00:08:10.550><c> important</c><00:08:11.030><c> because</c><00:08:11.090><c> when</c>

00:08:11.469 --> 00:08:11.479 align:start position:0%
malakut this is important because when
 

00:08:11.479 --> 00:08:13.780 align:start position:0%
malakut this is important because when
we<00:08:11.510><c> use</c><00:08:11.630><c> the</c><00:08:11.900><c> new</c><00:08:12.050><c> keyword</c><00:08:12.290><c> the</c><00:08:12.950><c> memory</c><00:08:13.310><c> is</c><00:08:13.520><c> not</c>

00:08:13.780 --> 00:08:13.790 align:start position:0%
we use the new keyword the memory is not
 

00:08:13.790 --> 00:08:15.790 align:start position:0%
we use the new keyword the memory is not
released<00:08:14.240><c> it's</c><00:08:14.510><c> not</c><00:08:14.690><c> marked</c><00:08:14.960><c> as</c><00:08:15.110><c> free</c><00:08:15.530><c> and</c>

00:08:15.790 --> 00:08:15.800 align:start position:0%
released it's not marked as free and
 

00:08:15.800 --> 00:08:17.350 align:start position:0%
released it's not marked as free and
it's<00:08:15.919><c> not</c><00:08:16.040><c> put</c><00:08:16.220><c> back</c><00:08:16.400><c> into</c><00:08:16.610><c> that</c><00:08:16.700><c> free</c><00:08:17.000><c> list</c><00:08:17.240><c> so</c>

00:08:17.350 --> 00:08:17.360 align:start position:0%
it's not put back into that free list so
 

00:08:17.360 --> 00:08:19.120 align:start position:0%
it's not put back into that free list so
that<00:08:17.390><c> we</c><00:08:17.600><c> can</c><00:08:17.810><c> call</c><00:08:18.290><c> new</c><00:08:18.530><c> and</c><00:08:18.710><c> allocate</c><00:08:19.100><c> it</c>

00:08:19.120 --> 00:08:19.130 align:start position:0%
that we can call new and allocate it
 

00:08:19.130 --> 00:08:21.520 align:start position:0%
that we can call new and allocate it
again<00:08:19.490><c> until</c><00:08:20.360><c> we</c><00:08:20.540><c> call</c><00:08:20.750><c> delete</c><00:08:21.020><c> we</c><00:08:21.169><c> have</c><00:08:21.290><c> to</c><00:08:21.410><c> do</c>

00:08:21.520 --> 00:08:21.530 align:start position:0%
again until we call delete we have to do
 

00:08:21.530 --> 00:08:21.740 align:start position:0%
again until we call delete we have to do
that

00:08:21.740 --> 00:08:21.750 align:start position:0%
that
 

00:08:21.750 --> 00:08:23.810 align:start position:0%
that
manually<00:08:22.290><c> there</c><00:08:22.680><c> are</c><00:08:22.890><c> of</c><00:08:23.130><c> course</c><00:08:23.160><c> a</c><00:08:23.550><c> lot</c><00:08:23.790><c> of</c>

00:08:23.810 --> 00:08:23.820 align:start position:0%
manually there are of course a lot of
 

00:08:23.820 --> 00:08:26.090 align:start position:0%
manually there are of course a lot of
strategies<00:08:24.360><c> in</c><00:08:24.540><c> simple</c><00:08:24.870><c> spots</c><00:08:25.140><c> to</c><00:08:25.530><c> automate</c>

00:08:26.090 --> 00:08:26.100 align:start position:0%
strategies in simple spots to automate
 

00:08:26.100 --> 00:08:28.670 align:start position:0%
strategies in simple spots to automate
this<00:08:26.340><c> in</c><00:08:26.670><c> some</c><00:08:27.060><c> form</c><00:08:27.450><c> and</c><00:08:27.600><c> there</c><00:08:27.780><c> are</c><00:08:27.930><c> simple</c>

00:08:28.670 --> 00:08:28.680 align:start position:0%
this in some form and there are simple
 

00:08:28.680 --> 00:08:30.410 align:start position:0%
this in some form and there are simple
strategies<00:08:29.100><c> like</c><00:08:29.580><c> kind</c><00:08:29.790><c> of</c><00:08:29.850><c> scope</c><00:08:30.150><c> based</c>

00:08:30.410 --> 00:08:30.420 align:start position:0%
strategies like kind of scope based
 

00:08:30.420 --> 00:08:32.270 align:start position:0%
strategies like kind of scope based
pointers<00:08:30.930><c> and</c><00:08:31.080><c> advanced</c><00:08:31.620><c> strategies</c><00:08:32.099><c> like</c>

00:08:32.270 --> 00:08:32.280 align:start position:0%
pointers and advanced strategies like
 

00:08:32.280 --> 00:08:34.399 align:start position:0%
pointers and advanced strategies like
reference<00:08:32.789><c> counting</c><00:08:33.270><c> we'll</c><00:08:33.780><c> get</c><00:08:33.960><c> into</c><00:08:34.080><c> all</c><00:08:34.200><c> of</c>

00:08:34.399 --> 00:08:34.409 align:start position:0%
reference counting we'll get into all of
 

00:08:34.409 --> 00:08:36.500 align:start position:0%
reference counting we'll get into all of
our<00:08:34.530><c> stuff</c><00:08:34.800><c> in</c><00:08:34.950><c> the</c><00:08:34.979><c> future</c><00:08:35.250><c> but</c><00:08:36.030><c> just</c><00:08:36.060><c> keep</c><00:08:36.360><c> in</c>

00:08:36.500 --> 00:08:36.510 align:start position:0%
our stuff in the future but just keep in
 

00:08:36.510 --> 00:08:38.420 align:start position:0%
our stuff in the future but just keep in
mind<00:08:36.719><c> if</c><00:08:36.840><c> you</c><00:08:36.960><c> use</c><00:08:37.020><c> me</c><00:08:37.349><c> like</c><00:08:37.620><c> this</c><00:08:37.800><c> in</c><00:08:38.099><c> a</c><00:08:38.159><c> wrong</c>

00:08:38.420 --> 00:08:38.430 align:start position:0%
mind if you use me like this in a wrong
 

00:08:38.430 --> 00:08:38.690 align:start position:0%
mind if you use me like this in a wrong
way

00:08:38.690 --> 00:08:38.700 align:start position:0%
way
 

00:08:38.700 --> 00:08:41.060 align:start position:0%
way
you<00:08:39.240><c> have</c><00:08:39.510><c> to</c><00:08:39.690><c> use</c><00:08:39.810><c> delete</c><00:08:40.110><c> and</c><00:08:40.320><c> I</c><00:08:40.500><c> do</c><00:08:40.560><c> plan</c><00:08:40.860><c> on</c>

00:08:41.060 --> 00:08:41.070 align:start position:0%
you have to use delete and I do plan on
 

00:08:41.070 --> 00:08:42.589 align:start position:0%
you have to use delete and I do plan on
talking<00:08:41.250><c> about</c><00:08:41.490><c> the</c><00:08:41.640><c> intricacies</c><00:08:42.000><c> of</c><00:08:42.300><c> all</c>

00:08:42.589 --> 00:08:42.599 align:start position:0%
talking about the intricacies of all
 

00:08:42.599 --> 00:08:44.149 align:start position:0%
talking about the intricacies of all
this<00:08:42.719><c> memory</c><00:08:43.080><c> management</c><00:08:43.409><c> in</c><00:08:43.680><c> the</c><00:08:43.770><c> future</c>

00:08:44.149 --> 00:08:44.159 align:start position:0%
this memory management in the future
 

00:08:44.159 --> 00:08:46.610 align:start position:0%
this memory management in the future
once<00:08:44.880><c> we</c><00:08:45.060><c> actually</c><00:08:45.570><c> start</c><00:08:45.870><c> working</c><00:08:46.500><c> on</c><00:08:46.590><c> a</c>

00:08:46.610 --> 00:08:46.620 align:start position:0%
once we actually start working on a
 

00:08:46.620 --> 00:08:48.500 align:start position:0%
once we actually start working on a
project<00:08:46.980><c> and</c><00:08:47.460><c> writing</c><00:08:47.850><c> code</c><00:08:48.120><c> which</c><00:08:48.390><c> is</c>

00:08:48.500 --> 00:08:48.510 align:start position:0%
project and writing code which is
 

00:08:48.510 --> 00:08:49.970 align:start position:0%
project and writing code which is
actually<00:08:48.780><c> going</c><00:08:48.900><c> to</c><00:08:48.990><c> be</c><00:08:49.080><c> very</c><00:08:49.290><c> soon</c><00:08:49.560><c> so</c><00:08:49.800><c> get</c>

00:08:49.970 --> 00:08:49.980 align:start position:0%
actually going to be very soon so get
 

00:08:49.980 --> 00:08:51.890 align:start position:0%
actually going to be very soon so get
excited<00:08:50.120><c> everything</c><00:08:51.120><c> will</c><00:08:51.240><c> be</c><00:08:51.390><c> revealed</c><00:08:51.570><c> I'm</c>

00:08:51.890 --> 00:08:51.900 align:start position:0%
excited everything will be revealed I'm
 

00:08:51.900 --> 00:08:53.810 align:start position:0%
excited everything will be revealed I'm
sure<00:08:52.110><c> and</c><00:08:52.260><c> you'll</c><00:08:52.380><c> see</c><00:08:52.560><c> many</c><00:08:52.860><c> examples</c><00:08:52.950><c> in</c><00:08:53.640><c> the</c>

00:08:53.810 --> 00:08:53.820 align:start position:0%
sure and you'll see many examples in the
 

00:08:53.820 --> 00:08:55.790 align:start position:0%
sure and you'll see many examples in the
case<00:08:54.030><c> of</c><00:08:54.240><c> B</c><00:08:54.420><c> because</c><00:08:54.840><c> this</c><00:08:54.930><c> was</c><00:08:55.110><c> allocated</c><00:08:55.530><c> by</c>

00:08:55.790 --> 00:08:55.800 align:start position:0%
case of B because this was allocated by
 

00:08:55.800 --> 00:08:57.590 align:start position:0%
case of B because this was allocated by
using<00:08:56.010><c> the</c><00:08:56.250><c> array</c><00:08:56.550><c> of</c><00:08:56.610><c> credit</c><00:08:57.060><c> keep</c><00:08:57.240><c> in</c><00:08:57.390><c> mind</c>

00:08:57.590 --> 00:08:57.600 align:start position:0%
using the array of credit keep in mind
 

00:08:57.600 --> 00:09:00.080 align:start position:0%
using the array of credit keep in mind
by<00:08:57.810><c> the</c><00:08:57.840><c> way</c><00:08:57.990><c> that</c><00:08:58.620><c> this</c><00:08:58.740><c> new</c><00:08:59.100><c> that</c><00:08:59.640><c> takes</c><00:08:59.880><c> in</c>

00:09:00.080 --> 00:09:00.090 align:start position:0%
by the way that this new that takes in
 

00:09:00.090 --> 00:09:01.640 align:start position:0%
by the way that this new that takes in
an<00:09:00.300><c> array</c><00:09:00.600><c> of</c><00:09:00.630><c> peretta</c><00:09:01.050><c> is</c><00:09:01.260><c> actually</c><00:09:01.620><c> a</c>

00:09:01.640 --> 00:09:01.650 align:start position:0%
an array of peretta is actually a
 

00:09:01.650 --> 00:09:03.260 align:start position:0%
an array of peretta is actually a
slightly<00:09:02.040><c> different</c><00:09:02.400><c> function</c><00:09:02.940><c> if</c><00:09:03.210><c> we</c>

00:09:03.260 --> 00:09:03.270 align:start position:0%
slightly different function if we
 

00:09:03.270 --> 00:09:05.300 align:start position:0%
slightly different function if we
allocate<00:09:03.840><c> using</c><00:09:04.140><c> new</c><00:09:04.350><c> with</c><00:09:04.590><c> square</c><00:09:04.860><c> brackets</c>

00:09:05.300 --> 00:09:05.310 align:start position:0%
allocate using new with square brackets
 

00:09:05.310 --> 00:09:08.210 align:start position:0%
allocate using new with square brackets
we<00:09:05.490><c> should</c><00:09:05.850><c> be</c><00:09:06.090><c> calling</c><00:09:06.420><c> delete</c><00:09:06.990><c> with</c><00:09:07.710><c> square</c>

00:09:08.210 --> 00:09:08.220 align:start position:0%
we should be calling delete with square
 

00:09:08.220 --> 00:09:09.530 align:start position:0%
we should be calling delete with square
brackets<00:09:08.610><c> like</c><00:09:08.730><c> this</c><00:09:08.940><c> because</c><00:09:09.240><c> there</c><00:09:09.390><c> is</c><00:09:09.510><c> a</c>

00:09:09.530 --> 00:09:09.540 align:start position:0%
brackets like this because there is a
 

00:09:09.540 --> 00:09:11.060 align:start position:0%
brackets like this because there is a
delete<00:09:09.810><c> operator</c><00:09:10.170><c> with</c><00:09:10.470><c> square</c><00:09:10.710><c> brackets</c>

00:09:11.060 --> 00:09:11.070 align:start position:0%
delete operator with square brackets
 

00:09:11.070 --> 00:09:13.130 align:start position:0%
delete operator with square brackets
like<00:09:11.220><c> that</c><00:09:11.430><c> okay</c><00:09:11.820><c> so</c><00:09:12.120><c> that's</c><00:09:12.300><c> another</c><00:09:12.570><c> rule</c><00:09:12.810><c> if</c>

00:09:13.130 --> 00:09:13.140 align:start position:0%
like that okay so that's another rule if
 

00:09:13.140 --> 00:09:15.110 align:start position:0%
like that okay so that's another rule if
you<00:09:13.350><c> allocate</c><00:09:13.530><c> using</c><00:09:14.190><c> new</c><00:09:14.490><c> with</c><00:09:14.850><c> square</c>

00:09:15.110 --> 00:09:15.120 align:start position:0%
you allocate using new with square
 

00:09:15.120 --> 00:09:16.370 align:start position:0%
you allocate using new with square
brackets<00:09:15.480><c> because</c><00:09:15.690><c> you've</c><00:09:15.870><c> allocated</c><00:09:15.990><c> an</c>

00:09:16.370 --> 00:09:16.380 align:start position:0%
brackets because you've allocated an
 

00:09:16.380 --> 00:09:18.950 align:start position:0%
brackets because you've allocated an
array<00:09:16.680><c> delete</c><00:09:17.490><c> using</c><00:09:17.970><c> the</c><00:09:18.360><c> square</c><00:09:18.540><c> brackets</c>

00:09:18.950 --> 00:09:18.960 align:start position:0%
array delete using the square brackets
 

00:09:18.960 --> 00:09:21.080 align:start position:0%
array delete using the square brackets
if<00:09:19.140><c> you</c><00:09:19.350><c> don't</c><00:09:19.650><c> then</c><00:09:20.010><c> just</c><00:09:20.190><c> use</c><00:09:20.550><c> whatever</c>

00:09:21.080 --> 00:09:21.090 align:start position:0%
if you don't then just use whatever
 

00:09:21.090 --> 00:09:22.820 align:start position:0%
if you don't then just use whatever
square<00:09:21.420><c> brackets</c><00:09:21.750><c> one</c><00:09:21.990><c> more</c><00:09:22.230><c> thing</c><00:09:22.470><c> that</c><00:09:22.710><c> new</c>

00:09:22.820 --> 00:09:22.830 align:start position:0%
square brackets one more thing that new
 

00:09:22.830 --> 00:09:24.500 align:start position:0%
square brackets one more thing that new
actually<00:09:23.100><c> supports</c><00:09:23.640><c> is</c><00:09:23.790><c> something</c><00:09:24.270><c> called</c><00:09:24.450><c> a</c>

00:09:24.500 --> 00:09:24.510 align:start position:0%
actually supports is something called a
 

00:09:24.510 --> 00:09:26.090 align:start position:0%
actually supports is something called a
placement<00:09:25.050><c> in</c><00:09:25.230><c> U</c><00:09:25.380><c> and</c><00:09:25.410><c> that</c><00:09:25.680><c> is</c><00:09:25.830><c> where</c><00:09:26.010><c> you</c>

00:09:26.090 --> 00:09:26.100 align:start position:0%
placement in U and that is where you
 

00:09:26.100 --> 00:09:28.490 align:start position:0%
placement in U and that is where you
actually<00:09:26.280><c> get</c><00:09:26.610><c> to</c><00:09:26.730><c> decide</c><00:09:27.060><c> kind</c><00:09:27.930><c> of</c><00:09:28.050><c> where</c><00:09:28.320><c> the</c>

00:09:28.490 --> 00:09:28.500 align:start position:0%
actually get to decide kind of where the
 

00:09:28.500 --> 00:09:29.780 align:start position:0%
actually get to decide kind of where the
memory<00:09:28.770><c> comes</c><00:09:29.010><c> from</c><00:09:29.250><c> so</c><00:09:29.370><c> you're</c><00:09:29.490><c> not</c><00:09:29.550><c> really</c>

00:09:29.780 --> 00:09:29.790 align:start position:0%
memory comes from so you're not really
 

00:09:29.790 --> 00:09:31.820 align:start position:0%
memory comes from so you're not really
allocating<00:09:30.390><c> memory</c><00:09:30.540><c> in</c><00:09:30.780><c> this</c><00:09:30.930><c> case</c><00:09:31.170><c> you're</c>

00:09:31.820 --> 00:09:31.830 align:start position:0%
allocating memory in this case you're
 

00:09:31.830 --> 00:09:33.980 align:start position:0%
allocating memory in this case you're
just<00:09:31.910><c> calling</c><00:09:32.910><c> the</c><00:09:33.180><c> constructor</c><00:09:33.300><c> and</c>

00:09:33.980 --> 00:09:33.990 align:start position:0%
just calling the constructor and
 

00:09:33.990 --> 00:09:36.620 align:start position:0%
just calling the constructor and
initializing<00:09:34.950><c> your</c><00:09:35.070><c> entity</c><00:09:35.490><c> in</c><00:09:36.180><c> a</c><00:09:36.210><c> specific</c>

00:09:36.620 --> 00:09:36.630 align:start position:0%
initializing your entity in a specific
 

00:09:36.630 --> 00:09:38.480 align:start position:0%
initializing your entity in a specific
memory<00:09:37.350><c> address</c><00:09:37.650><c> and</c><00:09:37.680><c> the</c><00:09:37.890><c> way</c><00:09:38.010><c> you</c><00:09:38.070><c> do</c><00:09:38.310><c> that</c>

00:09:38.480 --> 00:09:38.490 align:start position:0%
memory address and the way you do that
 

00:09:38.490 --> 00:09:41.000 align:start position:0%
memory address and the way you do that
is<00:09:39.030><c> just</c><00:09:39.089><c> by</c><00:09:39.330><c> writing</c><00:09:39.680><c> parenthesis</c><00:09:40.680><c> like</c><00:09:40.710><c> this</c>

00:09:41.000 --> 00:09:41.010 align:start position:0%
is just by writing parenthesis like this
 

00:09:41.010 --> 00:09:42.170 align:start position:0%
is just by writing parenthesis like this
and<00:09:41.160><c> then</c><00:09:41.250><c> specifying</c><00:09:41.700><c> a</c><00:09:41.820><c> memory</c><00:09:42.120><c> address</c>

00:09:42.170 --> 00:09:42.180 align:start position:0%
and then specifying a memory address
 

00:09:42.180 --> 00:09:45.380 align:start position:0%
and then specifying a memory address
such<00:09:42.900><c> as</c><00:09:42.930><c> well</c><00:09:43.290><c> B</c><00:09:43.620><c> in</c><00:09:43.890><c> this</c><00:09:44.250><c> case</c><00:09:44.310><c> I</c><00:09:44.790><c> mean</c><00:09:45.270><c> it</c>

00:09:45.380 --> 00:09:45.390 align:start position:0%
such as well B in this case I mean it
 

00:09:45.390 --> 00:09:46.579 align:start position:0%
such as well B in this case I mean it
would<00:09:45.510><c> theoretically</c><00:09:45.750><c> work</c><00:09:46.140><c> because</c><00:09:46.470><c> I'm</c>

00:09:46.579 --> 00:09:46.589 align:start position:0%
would theoretically work because I'm
 

00:09:46.589 --> 00:09:48.110 align:start position:0%
would theoretically work because I'm
assuming<00:09:47.040><c> that</c><00:09:47.190><c> entity</c><00:09:47.460><c> is</c><00:09:47.610><c> gonna</c><00:09:47.790><c> be</c><00:09:47.910><c> less</c>

00:09:48.110 --> 00:09:48.120 align:start position:0%
assuming that entity is gonna be less
 

00:09:48.120 --> 00:09:49.760 align:start position:0%
assuming that entity is gonna be less
than<00:09:48.270><c> 200</c><00:09:48.660><c> bytes</c><00:09:48.780><c> definitely</c><00:09:49.320><c> well</c><00:09:49.470><c> because</c>

00:09:49.760 --> 00:09:49.770 align:start position:0%
than 200 bytes definitely well because
 

00:09:49.770 --> 00:09:52.730 align:start position:0%
than 200 bytes definitely well because
it's<00:09:49.920><c> just</c><00:09:49.980><c> a</c><00:09:50.160><c> string</c><00:09:50.430><c> but</c><00:09:50.990><c> yeah</c><00:09:51.990><c> this</c><00:09:52.380><c> it's</c>

00:09:52.730 --> 00:09:52.740 align:start position:0%
it's just a string but yeah this it's
 

00:09:52.740 --> 00:09:54.170 align:start position:0%
it's just a string but yeah this it's
gonna<00:09:52.890><c> confuse</c><00:09:53.130><c> like</c><00:09:53.490><c> all</c><00:09:53.640><c> this</c><00:09:53.760><c> code</c><00:09:54.030><c> and</c>

00:09:54.170 --> 00:09:54.180 align:start position:0%
gonna confuse like all this code and
 

00:09:54.180 --> 00:09:56.060 align:start position:0%
gonna confuse like all this code and
really<00:09:54.330><c> really</c><00:09:55.260><c> we'll</c><00:09:55.410><c> talk</c><00:09:55.589><c> about</c><00:09:55.740><c> placement</c>

00:09:56.060 --> 00:09:56.070 align:start position:0%
really really we'll talk about placement
 

00:09:56.070 --> 00:09:58.040 align:start position:0%
really really we'll talk about placement
new<00:09:56.460><c> in</c><00:09:56.640><c> the</c><00:09:56.730><c> future</c><00:09:57.150><c> in</c><00:09:57.330><c> more</c><00:09:57.510><c> detail</c><00:09:57.870><c> on</c><00:09:57.900><c> how</c>

00:09:58.040 --> 00:09:58.050 align:start position:0%
new in the future in more detail on how
 

00:09:58.050 --> 00:09:59.720 align:start position:0%
new in the future in more detail on how
you<00:09:58.200><c> can</c><00:09:58.410><c> actually</c><00:09:58.440><c> use</c><00:09:58.740><c> at</c><00:09:59.100><c> optimizing</c><00:09:59.520><c> a</c>

00:09:59.720 --> 00:09:59.730 align:start position:0%
you can actually use at optimizing a
 

00:09:59.730 --> 00:10:02.630 align:start position:0%
you can actually use at optimizing a
code<00:09:59.970><c> quite</c><00:10:00.240><c> a</c><00:10:00.300><c> bit</c><00:10:00.540><c> but</c><00:10:01.230><c> for</c><00:10:01.770><c> now</c><00:10:01.890><c> I</c><00:10:02.310><c> just</c><00:10:02.370><c> want</c>

00:10:02.630 --> 00:10:02.640 align:start position:0%
code quite a bit but for now I just want
 

00:10:02.640 --> 00:10:04.190 align:start position:0%
code quite a bit but for now I just want
to<00:10:02.700><c> show</c><00:10:02.910><c> you</c><00:10:02.970><c> what</c><00:10:03.360><c> the</c><00:10:03.540><c> syntax</c><00:10:03.750><c> kind</c><00:10:04.140><c> of</c>

00:10:04.190 --> 00:10:04.200 align:start position:0%
to show you what the syntax kind of
 

00:10:04.200 --> 00:10:05.810 align:start position:0%
to show you what the syntax kind of
looks<00:10:04.350><c> like</c><00:10:04.530><c> in</c><00:10:04.650><c> however</c><00:10:04.830><c> anyway</c><00:10:05.490><c> I</c><00:10:05.640><c> hope</c><00:10:05.730><c> you</c>

00:10:05.810 --> 00:10:05.820 align:start position:0%
looks like in however anyway I hope you
 

00:10:05.820 --> 00:10:07.070 align:start position:0%
looks like in however anyway I hope you
guys<00:10:05.940><c> enjoyed</c><00:10:06.180><c> this</c><00:10:06.270><c> video</c><00:10:06.450><c> if</c><00:10:06.630><c> you</c><00:10:06.870><c> did</c><00:10:06.990><c> you</c>

00:10:07.070 --> 00:10:07.080 align:start position:0%
guys enjoyed this video if you did you
 

00:10:07.080 --> 00:10:08.450 align:start position:0%
guys enjoyed this video if you did you
can<00:10:07.170><c> have</c><00:10:07.320><c> that</c><00:10:07.470><c> like</c><00:10:07.740><c> button</c><00:10:08.010><c> you</c><00:10:08.220><c> can</c><00:10:08.339><c> also</c>

00:10:08.450 --> 00:10:08.460 align:start position:0%
can have that like button you can also
 

00:10:08.460 --> 00:10:10.040 align:start position:0%
can have that like button you can also
help<00:10:08.730><c> support</c><00:10:08.910><c> this</c><00:10:09.270><c> series</c><00:10:09.630><c> and</c><00:10:09.750><c> make</c><00:10:09.900><c> sure</c>

00:10:10.040 --> 00:10:10.050 align:start position:0%
help support this series and make sure
 

00:10:10.050 --> 00:10:12.140 align:start position:0%
help support this series and make sure
more<00:10:10.290><c> awesome</c><00:10:10.710><c> episodes</c><00:10:11.130><c> are</c><00:10:11.370><c> made</c><00:10:11.670><c> by</c><00:10:11.910><c> going</c>

00:10:12.140 --> 00:10:12.150 align:start position:0%
more awesome episodes are made by going
 

00:10:12.150 --> 00:10:13.970 align:start position:0%
more awesome episodes are made by going
to<00:10:12.330><c> patreon</c><00:10:12.780><c> account</c><00:10:12.870><c> or</c><00:10:13.260><c> search</c><00:10:13.440><c> the</c><00:10:13.470><c> channel</c>

00:10:13.970 --> 00:10:13.980 align:start position:0%
to patreon account or search the channel
 

00:10:13.980 --> 00:10:16.280 align:start position:0%
to patreon account or search the channel
I've<00:10:14.490><c> got</c><00:10:14.700><c> a</c><00:10:14.730><c> discord</c><00:10:15.270><c> server</c><00:10:15.600><c> there'll</c><00:10:16.140><c> be</c><00:10:16.170><c> a</c>

00:10:16.280 --> 00:10:16.290 align:start position:0%
I've got a discord server there'll be a
 

00:10:16.290 --> 00:10:17.690 align:start position:0%
I've got a discord server there'll be a
link<00:10:16.440><c> in</c><00:10:16.560><c> description</c><00:10:16.980><c> below</c><00:10:17.010><c> we</c><00:10:17.370><c> can</c><00:10:17.520><c> talk</c>

00:10:17.690 --> 00:10:17.700 align:start position:0%
link in description below we can talk
 

00:10:17.700 --> 00:10:18.440 align:start position:0%
link in description below we can talk
about<00:10:17.820><c> all</c><00:10:18.030><c> this</c><00:10:18.150><c> stuff</c>

00:10:18.440 --> 00:10:18.450 align:start position:0%
about all this stuff
 

00:10:18.450 --> 00:10:20.750 align:start position:0%
about all this stuff
patrons<00:10:19.260><c> get</c><00:10:19.470><c> special</c><00:10:20.010><c> like</c><00:10:20.190><c> server</c><00:10:20.490><c> roles</c>

00:10:20.750 --> 00:10:20.760 align:start position:0%
patrons get special like server roles
 

00:10:20.760 --> 00:10:22.250 align:start position:0%
patrons get special like server roles
and<00:10:21.000><c> also</c><00:10:21.240><c> a</c><00:10:21.270><c> special</c><00:10:21.660><c> channel</c><00:10:21.930><c> where</c><00:10:22.230><c> we</c>

00:10:22.250 --> 00:10:22.260 align:start position:0%
and also a special channel where we
 

00:10:22.260 --> 00:10:24.410 align:start position:0%
and also a special channel where we
actually<00:10:22.470><c> talk</c><00:10:22.890><c> about</c><00:10:22.920><c> these</c><00:10:23.670><c> videos</c><00:10:23.970><c> and</c>

00:10:24.410 --> 00:10:24.420 align:start position:0%
actually talk about these videos and
 

00:10:24.420 --> 00:10:25.150 align:start position:0%
actually talk about these videos and
plan<00:10:24.630><c> the</c><00:10:24.839><c> next</c>

00:10:25.150 --> 00:10:25.160 align:start position:0%
plan the next
 

00:10:25.160 --> 00:10:26.800 align:start position:0%
plan the next
it's<00:10:25.639><c> kind</c><00:10:25.790><c> of</c><00:10:25.850><c> like</c><00:10:25.940><c> right</c><00:10:26.420><c> behind</c><00:10:26.720><c> the</c>

00:10:26.800 --> 00:10:26.810 align:start position:0%
it's kind of like right behind the
 

00:10:26.810 --> 00:10:28.629 align:start position:0%
it's kind of like right behind the
scenes<00:10:27.079><c> and</c><00:10:27.350><c> very</c><00:10:27.529><c> details</c><00:10:27.949><c> very</c><00:10:28.160><c> cool</c>

00:10:28.629 --> 00:10:28.639 align:start position:0%
scenes and very details very cool
 

00:10:28.639 --> 00:10:30.069 align:start position:0%
scenes and very details very cool
so<00:10:29.000><c> definitely</c><00:10:29.180><c> check</c><00:10:29.300><c> that</c><00:10:29.569><c> out</c><00:10:29.690><c> and</c><00:10:29.839><c> become</c>

00:10:30.069 --> 00:10:30.079 align:start position:0%
so definitely check that out and become
 

00:10:30.079 --> 00:10:32.110 align:start position:0%
so definitely check that out and become
a<00:10:30.110><c> pic</c><00:10:30.319><c> home</c><00:10:30.529><c> and</c><00:10:30.800><c> help</c><00:10:31.250><c> support</c><00:10:31.610><c> this</c><00:10:31.730><c> series</c>

00:10:32.110 --> 00:10:32.120 align:start position:0%
a pic home and help support this series
 

00:10:32.120 --> 00:10:33.850 align:start position:0%
a pic home and help support this series
I<00:10:32.269><c> will</c><00:10:32.389><c> see</c><00:10:32.720><c> you</c><00:10:32.839><c> guys</c><00:10:33.019><c> in</c><00:10:33.379><c> the</c><00:10:33.500><c> next</c><00:10:33.620><c> video</c>

00:10:33.850 --> 00:10:33.860 align:start position:0%
I will see you guys in the next video
 

00:10:33.860 --> 00:10:35.700 align:start position:0%
I will see you guys in the next video
goodbye

00:10:35.700 --> 00:10:35.710 align:start position:0%
goodbye
 

00:10:35.710 --> 00:10:44.230 align:start position:0%
goodbye
[Music]

00:10:44.230 --> 00:10:44.240 align:start position:0%
 
 

00:10:44.240 --> 00:10:51.270 align:start position:0%
 
[Music]

