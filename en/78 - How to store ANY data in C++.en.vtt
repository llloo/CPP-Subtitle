WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.550 align:start position:0%
 
hey<00:00:00.179><c> what's</c><00:00:00.359><c> up</c><00:00:00.420><c> guys</c><00:00:00.539><c> my</c><00:00:00.930><c> name</c><00:00:01.140><c> is</c><00:00:01.170><c> the</c>

00:00:01.550 --> 00:00:01.560 align:start position:0%
hey what's up guys my name is the
 

00:00:01.560 --> 00:00:04.220 align:start position:0%
hey what's up guys my name is the
churner<00:00:01.860><c> welcome</c><00:00:02.580><c> back</c><00:00:02.760><c> to</c><00:00:03.030><c> my</c><00:00:03.149><c> c++</c><00:00:03.810><c> series</c>

00:00:04.220 --> 00:00:04.230 align:start position:0%
churner welcome back to my c++ series
 

00:00:04.230 --> 00:00:06.260 align:start position:0%
churner welcome back to my c++ series
today<00:00:04.830><c> we'll</c><00:00:04.950><c> be</c><00:00:05.130><c> talking</c><00:00:05.279><c> all</c><00:00:05.670><c> about</c><00:00:05.700><c> how</c><00:00:06.000><c> you</c>

00:00:06.260 --> 00:00:06.270 align:start position:0%
today we'll be talking all about how you
 

00:00:06.270 --> 00:00:09.440 align:start position:0%
today we'll be talking all about how you
can<00:00:06.629><c> store</c><00:00:06.930><c> any</c><00:00:07.379><c> kind</c><00:00:07.529><c> of</c><00:00:07.980><c> data</c><00:00:08.250><c> in</c><00:00:09.059><c> a</c><00:00:09.120><c> single</c>

00:00:09.440 --> 00:00:09.450 align:start position:0%
can store any kind of data in a single
 

00:00:09.450 --> 00:00:11.870 align:start position:0%
can store any kind of data in a single
variable<00:00:09.809><c> in</c><00:00:10.500><c> c++</c><00:00:11.190><c> a</c><00:00:11.490><c> lot</c><00:00:11.670><c> of</c><00:00:11.730><c> you</c><00:00:11.820><c> are</c>

00:00:11.870 --> 00:00:11.880 align:start position:0%
variable in c++ a lot of you are
 

00:00:11.880 --> 00:00:13.490 align:start position:0%
variable in c++ a lot of you are
probably<00:00:11.969><c> thinking</c><00:00:12.150><c> well</c><00:00:12.630><c> yeah</c><00:00:12.960><c> you</c><00:00:13.019><c> can</c><00:00:13.349><c> do</c>

00:00:13.490 --> 00:00:13.500 align:start position:0%
probably thinking well yeah you can do
 

00:00:13.500 --> 00:00:15.499 align:start position:0%
probably thinking well yeah you can do
that<00:00:13.679><c> with</c><00:00:13.860><c> a</c><00:00:13.889><c> void</c><00:00:14.250><c> pointer</c><00:00:14.280><c> and</c><00:00:14.969><c> yes</c><00:00:15.210><c> that's</c>

00:00:15.499 --> 00:00:15.509 align:start position:0%
that with a void pointer and yes that's
 

00:00:15.509 --> 00:00:17.599 align:start position:0%
that with a void pointer and yes that's
true<00:00:15.809><c> and</c><00:00:16.020><c> I'll</c><00:00:16.080><c> have</c><00:00:16.230><c> a</c><00:00:16.260><c> video</c><00:00:16.410><c> about</c><00:00:17.279><c> void</c>

00:00:17.599 --> 00:00:17.609 align:start position:0%
true and I'll have a video about void
 

00:00:17.609 --> 00:00:19.099 align:start position:0%
true and I'll have a video about void
pointers<00:00:18.090><c> coming</c><00:00:18.390><c> soon</c><00:00:18.539><c> in</c><00:00:18.690><c> the</c><00:00:18.779><c> future</c>

00:00:19.099 --> 00:00:19.109 align:start position:0%
pointers coming soon in the future
 

00:00:19.109 --> 00:00:20.480 align:start position:0%
pointers coming soon in the future
however<00:00:19.289><c> this</c><00:00:19.470><c> is</c><00:00:19.590><c> a</c><00:00:19.619><c> much</c><00:00:19.830><c> of</c><00:00:19.859><c> a</c><00:00:19.980><c> better</c><00:00:20.189><c> way</c>

00:00:20.480 --> 00:00:20.490 align:start position:0%
however this is a much of a better way
 

00:00:20.490 --> 00:00:22.910 align:start position:0%
however this is a much of a better way
it's<00:00:21.029><c> a</c><00:00:21.300><c> safer</c><00:00:21.900><c> way</c><00:00:22.050><c> and</c><00:00:22.289><c> it's</c><00:00:22.410><c> a</c><00:00:22.500><c> supercilious</c>

00:00:22.910 --> 00:00:22.920 align:start position:0%
it's a safer way and it's a supercilious
 

00:00:22.920 --> 00:00:25.820 align:start position:0%
it's a safer way and it's a supercilious
17<00:00:23.730><c> brand</c><00:00:24.269><c> new</c><00:00:24.539><c> way</c><00:00:24.900><c> of</c><00:00:24.930><c> doing</c><00:00:25.140><c> things</c><00:00:25.320><c> I've</c>

00:00:25.820 --> 00:00:25.830 align:start position:0%
17 brand new way of doing things I've
 

00:00:25.830 --> 00:00:27.800 align:start position:0%
17 brand new way of doing things I've
had<00:00:26.010><c> this</c><00:00:26.160><c> kind</c><00:00:26.369><c> of</c><00:00:26.460><c> miniseries</c><00:00:27.269><c> lately</c><00:00:27.660><c> on</c>

00:00:27.800 --> 00:00:27.810 align:start position:0%
had this kind of miniseries lately on
 

00:00:27.810 --> 00:00:29.810 align:start position:0%
had this kind of miniseries lately on
how<00:00:28.050><c> we</c><00:00:28.109><c> can</c><00:00:28.470><c> store</c><00:00:28.800><c> different</c><00:00:29.130><c> types</c><00:00:29.490><c> of</c><00:00:29.640><c> data</c>

00:00:29.810 --> 00:00:29.820 align:start position:0%
how we can store different types of data
 

00:00:29.820 --> 00:00:31.550 align:start position:0%
how we can store different types of data
and<00:00:29.910><c> single</c><00:00:30.210><c> variables</c><00:00:30.510><c> in</c><00:00:30.599><c> C++</c><00:00:31.080><c> there's</c>

00:00:31.550 --> 00:00:31.560 align:start position:0%
and single variables in C++ there's
 

00:00:31.560 --> 00:00:33.410 align:start position:0%
and single variables in C++ there's
something<00:00:31.769><c> called</c><00:00:31.859><c> S</c><00:00:32.099><c> City</c><00:00:32.369><c> optional</c><00:00:32.910><c> S</c><00:00:33.090><c> City</c>

00:00:33.410 --> 00:00:33.420 align:start position:0%
something called S City optional S City
 

00:00:33.420 --> 00:00:34.729 align:start position:0%
something called S City optional S City
variants<00:00:33.989><c> and</c><00:00:34.079><c> now</c><00:00:34.320><c> we're</c><00:00:34.500><c> going</c><00:00:34.590><c> to</c><00:00:34.649><c> be</c>

00:00:34.729 --> 00:00:34.739 align:start position:0%
variants and now we're going to be
 

00:00:34.739 --> 00:00:36.709 align:start position:0%
variants and now we're going to be
talking<00:00:35.040><c> about</c><00:00:35.100><c> S</c><00:00:35.489><c> City</c><00:00:36.090><c> any</c><00:00:36.390><c> and</c><00:00:36.660><c> I've</c>

00:00:36.709 --> 00:00:36.719 align:start position:0%
talking about S City any and I've
 

00:00:36.719 --> 00:00:38.180 align:start position:0%
talking about S City any and I've
already<00:00:36.809><c> made</c><00:00:37.050><c> videos</c><00:00:37.110><c> about</c><00:00:37.559><c> the</c><00:00:37.710><c> other</c><00:00:37.890><c> two</c>

00:00:38.180 --> 00:00:38.190 align:start position:0%
already made videos about the other two
 

00:00:38.190 --> 00:00:39.410 align:start position:0%
already made videos about the other two
so<00:00:38.370><c> if</c><00:00:38.430><c> you</c><00:00:38.550><c> haven't</c><00:00:38.879><c> seen</c><00:00:39.030><c> the</c><00:00:39.149><c> video</c><00:00:39.239><c> about</c>

00:00:39.410 --> 00:00:39.420 align:start position:0%
so if you haven't seen the video about
 

00:00:39.420 --> 00:00:41.930 align:start position:0%
so if you haven't seen the video about
optional<00:00:40.260><c> data</c><00:00:40.440><c> or</c><00:00:40.770><c> the</c><00:00:41.309><c> video</c><00:00:41.550><c> about</c><00:00:41.730><c> how</c><00:00:41.879><c> we</c>

00:00:41.930 --> 00:00:41.940 align:start position:0%
optional data or the video about how we
 

00:00:41.940 --> 00:00:44.000 align:start position:0%
optional data or the video about how we
can<00:00:42.120><c> store</c><00:00:42.270><c> multiple</c><00:00:42.510><c> variables</c><00:00:43.410><c> multiple</c>

00:00:44.000 --> 00:00:44.010 align:start position:0%
can store multiple variables multiple
 

00:00:44.010 --> 00:00:46.069 align:start position:0%
can store multiple variables multiple
data<00:00:44.219><c> types</c><00:00:44.309><c> in</c><00:00:44.670><c> a</c><00:00:44.760><c> single</c><00:00:45.149><c> variable</c><00:00:45.329><c> then</c>

00:00:46.069 --> 00:00:46.079 align:start position:0%
data types in a single variable then
 

00:00:46.079 --> 00:00:47.690 align:start position:0%
data types in a single variable then
check<00:00:46.530><c> out</c><00:00:46.649><c> those</c><00:00:46.829><c> videos</c><00:00:46.860><c> they'll</c><00:00:47.340><c> be</c><00:00:47.460><c> linked</c>

00:00:47.690 --> 00:00:47.700 align:start position:0%
check out those videos they'll be linked
 

00:00:47.700 --> 00:00:49.639 align:start position:0%
check out those videos they'll be linked
up<00:00:47.910><c> there</c><00:00:48.300><c> so</c><00:00:48.660><c> now</c><00:00:48.780><c> we're</c><00:00:48.930><c> kind</c><00:00:49.079><c> of</c><00:00:49.140><c> here</c><00:00:49.410><c> at</c>

00:00:49.639 --> 00:00:49.649 align:start position:0%
up there so now we're kind of here at
 

00:00:49.649 --> 00:00:51.650 align:start position:0%
up there so now we're kind of here at
the<00:00:49.680><c> end</c><00:00:50.100><c> we're</c><00:00:50.640><c> up</c><00:00:50.850><c> to</c><00:00:51.000><c> the</c><00:00:51.120><c> point</c><00:00:51.360><c> where</c>

00:00:51.650 --> 00:00:51.660 align:start position:0%
the end we're up to the point where
 

00:00:51.660 --> 00:00:55.880 align:start position:0%
the end we're up to the point where
using<00:00:51.989><c> STD</c><00:00:52.620><c> any</c><00:00:53.010><c> we</c><00:00:53.910><c> can</c><00:00:53.940><c> store</c><00:00:54.510><c> anything</c><00:00:54.989><c> and</c>

00:00:55.880 --> 00:00:55.890 align:start position:0%
using STD any we can store anything and
 

00:00:55.890 --> 00:00:57.799 align:start position:0%
using STD any we can store anything and
I<00:00:55.980><c> think</c><00:00:56.039><c> that</c><00:00:56.489><c> the</c><00:00:56.730><c> bigger</c><00:00:56.969><c> question</c><00:00:57.420><c> here</c><00:00:57.629><c> is</c>

00:00:57.799 --> 00:00:57.809 align:start position:0%
I think that the bigger question here is
 

00:00:57.809 --> 00:01:00.020 align:start position:0%
I think that the bigger question here is
not<00:00:57.840><c> how</c><00:00:58.050><c> do</c><00:00:58.379><c> I</c><00:00:58.559><c> use</c><00:00:58.649><c> STD</c><00:00:59.430><c> any</c><00:00:59.609><c> I</c><00:00:59.699><c> think</c><00:00:59.910><c> that's</c>

00:01:00.020 --> 00:01:00.030 align:start position:0%
not how do I use STD any I think that's
 

00:01:00.030 --> 00:01:01.459 align:start position:0%
not how do I use STD any I think that's
pretty<00:01:00.149><c> straightforward</c><00:01:00.510><c> as</c><00:01:00.899><c> we'll</c><00:01:01.079><c> see</c><00:01:01.260><c> in</c><00:01:01.289><c> a</c>

00:01:01.459 --> 00:01:01.469 align:start position:0%
pretty straightforward as we'll see in a
 

00:01:01.469 --> 00:01:04.789 align:start position:0%
pretty straightforward as we'll see in a
minute<00:01:01.620><c> it's</c><00:01:02.039><c> why</c><00:01:02.969><c> does</c><00:01:03.210><c> this</c><00:01:03.329><c> exist</c><00:01:03.750><c> when</c><00:01:04.680><c> do</c>

00:01:04.789 --> 00:01:04.799 align:start position:0%
minute it's why does this exist when do
 

00:01:04.799 --> 00:01:06.980 align:start position:0%
minute it's why does this exist when do
we<00:01:04.890><c> want</c><00:01:04.920><c> to</c><00:01:05.129><c> use</c><00:01:05.280><c> it</c><00:01:05.489><c> and</c><00:01:05.640><c> why</c><00:01:06.180><c> would</c><00:01:06.420><c> we</c><00:01:06.570><c> use</c><00:01:06.600><c> s</c>

00:01:06.980 --> 00:01:06.990 align:start position:0%
we want to use it and why would we use s
 

00:01:06.990 --> 00:01:08.660 align:start position:0%
we want to use it and why would we use s
UV<00:01:07.260><c> Eddie</c><00:01:07.470><c> instead</c><00:01:07.890><c> of</c><00:01:08.010><c> something</c><00:01:08.189><c> like</c><00:01:08.430><c> a</c>

00:01:08.660 --> 00:01:08.670 align:start position:0%
UV Eddie instead of something like a
 

00:01:08.670 --> 00:01:09.830 align:start position:0%
UV Eddie instead of something like a
city<00:01:09.090><c> variant</c>

00:01:09.830 --> 00:01:09.840 align:start position:0%
city variant
 

00:01:09.840 --> 00:01:11.780 align:start position:0%
city variant
all<00:01:10.229><c> brilliant</c><00:01:10.799><c> things</c><00:01:11.070><c> that</c><00:01:11.520><c> wouldn't</c><00:01:11.729><c> be</c>

00:01:11.780 --> 00:01:11.790 align:start position:0%
all brilliant things that wouldn't be
 

00:01:11.790 --> 00:01:13.550 align:start position:0%
all brilliant things that wouldn't be
talking<00:01:11.909><c> about</c><00:01:12.150><c> today</c><00:01:12.600><c> but</c><00:01:13.020><c> first</c><00:01:13.229><c> let's</c><00:01:13.439><c> talk</c>

00:01:13.550 --> 00:01:13.560 align:start position:0%
talking about today but first let's talk
 

00:01:13.560 --> 00:01:15.499 align:start position:0%
talking about today but first let's talk
about<00:01:13.680><c> our</c><00:01:13.950><c> sponsor</c><00:01:14.280><c> for</c><00:01:14.670><c> today's</c><00:01:14.939><c> video</c>

00:01:15.499 --> 00:01:15.509 align:start position:0%
about our sponsor for today's video
 

00:01:15.509 --> 00:01:16.999 align:start position:0%
about our sponsor for today's video
Skillshare<00:01:16.200><c> I'm</c><00:01:16.409><c> sure</c><00:01:16.590><c> you</c><00:01:16.680><c> guys</c><00:01:16.799><c> have</c>

00:01:16.999 --> 00:01:17.009 align:start position:0%
Skillshare I'm sure you guys have
 

00:01:17.009 --> 00:01:19.160 align:start position:0%
Skillshare I'm sure you guys have
probably<00:01:17.159><c> heard</c><00:01:17.400><c> of</c><00:01:17.700><c> Skillshare</c><00:01:18.270><c> before</c><00:01:18.689><c> it's</c>

00:01:19.160 --> 00:01:19.170 align:start position:0%
probably heard of Skillshare before it's
 

00:01:19.170 --> 00:01:20.570 align:start position:0%
probably heard of Skillshare before it's
an<00:01:19.320><c> online</c><00:01:19.650><c> learning</c><00:01:19.920><c> community</c><00:01:20.070><c> with</c>

00:01:20.570 --> 00:01:20.580 align:start position:0%
an online learning community with
 

00:01:20.580 --> 00:01:22.700 align:start position:0%
an online learning community with
thousands<00:01:21.090><c> of</c><00:01:21.180><c> classes</c><00:01:21.659><c> covering</c><00:01:22.020><c> dozens</c><00:01:22.560><c> of</c>

00:01:22.700 --> 00:01:22.710 align:start position:0%
thousands of classes covering dozens of
 

00:01:22.710 --> 00:01:25.219 align:start position:0%
thousands of classes covering dozens of
creative<00:01:23.310><c> and</c><00:01:23.460><c> entrepreneurial</c><00:01:24.060><c> skills</c><00:01:24.299><c> with</c>

00:01:25.219 --> 00:01:25.229 align:start position:0%
creative and entrepreneurial skills with
 

00:01:25.229 --> 00:01:26.899 align:start position:0%
creative and entrepreneurial skills with
unlimited<00:01:25.799><c> access</c><00:01:25.979><c> to</c><00:01:26.250><c> all</c><00:01:26.400><c> of</c><00:01:26.580><c> these</c><00:01:26.700><c> classes</c>

00:01:26.899 --> 00:01:26.909 align:start position:0%
unlimited access to all of these classes
 

00:01:26.909 --> 00:01:28.609 align:start position:0%
unlimited access to all of these classes
so<00:01:27.479><c> that</c><00:01:27.509><c> you</c><00:01:27.659><c> can</c><00:01:27.810><c> join</c><00:01:27.960><c> the</c><00:01:28.140><c> ones</c><00:01:28.320><c> that</c><00:01:28.530><c> are</c>

00:01:28.609 --> 00:01:28.619 align:start position:0%
so that you can join the ones that are
 

00:01:28.619 --> 00:01:30.140 align:start position:0%
so that you can join the ones that are
right<00:01:28.770><c> for</c><00:01:29.040><c> you</c><00:01:29.310><c> since</c><00:01:29.640><c> I'm</c><00:01:29.790><c> more</c><00:01:29.970><c> of</c><00:01:30.060><c> an</c>

00:01:30.140 --> 00:01:30.150 align:start position:0%
right for you since I'm more of an
 

00:01:30.150 --> 00:01:32.060 align:start position:0%
right for you since I'm more of an
engineer<00:01:30.659><c> that</c><00:01:30.869><c> an</c><00:01:30.960><c> artist</c><00:01:31.350><c> I</c><00:01:31.530><c> really</c><00:01:31.860><c> like</c>

00:01:32.060 --> 00:01:32.070 align:start position:0%
engineer that an artist I really like
 

00:01:32.070 --> 00:01:33.649 align:start position:0%
engineer that an artist I really like
all<00:01:32.310><c> of</c><00:01:32.460><c> the</c><00:01:32.549><c> creative</c><00:01:33.000><c> classes</c><00:01:33.270><c> that</c>

00:01:33.649 --> 00:01:33.659 align:start position:0%
all of the creative classes that
 

00:01:33.659 --> 00:01:35.149 align:start position:0%
all of the creative classes that
Skillshare<00:01:34.110><c> has</c><00:01:34.350><c> to</c><00:01:34.560><c> offer</c>

00:01:35.149 --> 00:01:35.159 align:start position:0%
Skillshare has to offer
 

00:01:35.159 --> 00:01:37.340 align:start position:0%
Skillshare has to offer
for<00:01:35.340><c> example</c><00:01:35.700><c> this</c><00:01:35.909><c> class</c><00:01:36.270><c> is</c><00:01:36.570><c> a</c><00:01:36.600><c> fantastic</c>

00:01:37.340 --> 00:01:37.350 align:start position:0%
for example this class is a fantastic
 

00:01:37.350 --> 00:01:38.899 align:start position:0%
for example this class is a fantastic
reference<00:01:37.560><c> for</c><00:01:38.009><c> whenever</c><00:01:38.189><c> I</c><00:01:38.369><c> need</c><00:01:38.579><c> to</c><00:01:38.610><c> make</c><00:01:38.880><c> a</c>

00:01:38.899 --> 00:01:38.909 align:start position:0%
reference for whenever I need to make a
 

00:01:38.909 --> 00:01:41.210 align:start position:0%
reference for whenever I need to make a
new<00:01:39.150><c> logo</c><00:01:39.360><c> Skillshare</c><00:01:40.200><c> are</c><00:01:40.380><c> also</c><00:01:40.770><c> one</c><00:01:40.979><c> of</c><00:01:41.009><c> my</c>

00:01:41.210 --> 00:01:41.220 align:start position:0%
new logo Skillshare are also one of my
 

00:01:41.220 --> 00:01:43.310 align:start position:0%
new logo Skillshare are also one of my
go-to<00:01:41.520><c> references</c><00:01:42.270><c> for</c><00:01:42.420><c> anytime</c><00:01:42.659><c> I</c><00:01:43.079><c> need</c><00:01:43.229><c> to</c>

00:01:43.310 --> 00:01:43.320 align:start position:0%
go-to references for anytime I need to
 

00:01:43.320 --> 00:01:45.109 align:start position:0%
go-to references for anytime I need to
deal<00:01:43.530><c> with</c><00:01:43.560><c> web</c><00:01:43.920><c> stuff</c><00:01:44.220><c> because</c><00:01:44.790><c> let's</c><00:01:45.030><c> be</c>

00:01:45.109 --> 00:01:45.119 align:start position:0%
deal with web stuff because let's be
 

00:01:45.119 --> 00:01:47.120 align:start position:0%
deal with web stuff because let's be
honest<00:01:45.479><c> I</c><00:01:45.630><c> want</c><00:01:45.780><c> to</c><00:01:45.840><c> spend</c><00:01:46.049><c> as</c><00:01:46.200><c> little</c><00:01:46.619><c> time</c><00:01:47.100><c> as</c>

00:01:47.120 --> 00:01:47.130 align:start position:0%
honest I want to spend as little time as
 

00:01:47.130 --> 00:01:49.639 align:start position:0%
honest I want to spend as little time as
possible<00:01:47.850><c> hunt</c><00:01:48.420><c> at</c><00:01:48.600><c> and</c><00:01:48.840><c> with</c><00:01:49.170><c> these</c><00:01:49.320><c> small</c>

00:01:49.639 --> 00:01:49.649 align:start position:0%
possible hunt at and with these small
 

00:01:49.649 --> 00:01:51.469 align:start position:0%
possible hunt at and with these small
concise<00:01:50.009><c> videos</c><00:01:50.520><c> I</c><00:01:50.549><c> can</c><00:01:50.939><c> get</c><00:01:51.119><c> through</c><00:01:51.329><c> this</c>

00:01:51.469 --> 00:01:51.479 align:start position:0%
concise videos I can get through this
 

00:01:51.479 --> 00:01:54.080 align:start position:0%
concise videos I can get through this
stuff<00:01:51.750><c> quickly</c><00:01:52.140><c> Scotia</c><00:01:53.040><c> are</c><00:01:53.340><c> offering</c><00:01:53.759><c> two</c>

00:01:54.080 --> 00:01:54.090 align:start position:0%
stuff quickly Scotia are offering two
 

00:01:54.090 --> 00:01:56.240 align:start position:0%
stuff quickly Scotia are offering two
months<00:01:54.420><c> of</c><00:01:54.509><c> free</c><00:01:55.140><c> membership</c><00:01:55.649><c> to</c><00:01:55.680><c> anyone</c><00:01:56.130><c> who</c>

00:01:56.240 --> 00:01:56.250 align:start position:0%
months of free membership to anyone who
 

00:01:56.250 --> 00:01:57.590 align:start position:0%
months of free membership to anyone who
signs<00:01:56.460><c> up</c><00:01:56.640><c> using</c><00:01:56.880><c> the</c><00:01:57.060><c> link</c><00:01:57.270><c> in</c><00:01:57.450><c> the</c>

00:01:57.590 --> 00:01:57.600 align:start position:0%
signs up using the link in the
 

00:01:57.600 --> 00:02:01.100 align:start position:0%
signs up using the link in the
description<00:01:58.110><c> below</c><00:01:58.700><c> two</c><00:01:59.700><c> months</c><00:02:00.110><c> free</c>

00:02:01.100 --> 00:02:01.110 align:start position:0%
description below two months free
 

00:02:01.110 --> 00:02:03.109 align:start position:0%
description below two months free
membership<00:02:01.649><c> for</c><00:02:02.100><c> two</c><00:02:02.369><c> months</c><00:02:02.759><c> think</c><00:02:02.939><c> about</c>

00:02:03.109 --> 00:02:03.119 align:start position:0%
membership for two months think about
 

00:02:03.119 --> 00:02:05.300 align:start position:0%
membership for two months think about
how<00:02:03.329><c> much</c><00:02:03.509><c> you</c><00:02:03.719><c> could</c><00:02:03.869><c> learn</c><00:02:04.170><c> in</c><00:02:04.829><c> two</c><00:02:05.159><c> months</c>

00:02:05.300 --> 00:02:05.310 align:start position:0%
how much you could learn in two months
 

00:02:05.310 --> 00:02:07.429 align:start position:0%
how much you could learn in two months
so<00:02:05.700><c> go</c><00:02:05.939><c> ahead</c><00:02:06.030><c> and</c><00:02:06.210><c> check</c><00:02:06.780><c> that</c><00:02:06.990><c> out</c><00:02:07.049><c> and</c><00:02:07.229><c> I</c>

00:02:07.429 --> 00:02:07.439 align:start position:0%
so go ahead and check that out and I
 

00:02:07.439 --> 00:02:08.690 align:start position:0%
so go ahead and check that out and I
want<00:02:07.590><c> to</c><00:02:07.649><c> give</c><00:02:07.740><c> a</c><00:02:07.770><c> huge</c><00:02:07.979><c> thank</c><00:02:08.069><c> you</c><00:02:08.340><c> to</c><00:02:08.399><c> skill</c>

00:02:08.690 --> 00:02:08.700 align:start position:0%
want to give a huge thank you to skill
 

00:02:08.700 --> 00:02:09.300 align:start position:0%
want to give a huge thank you to skill
chef

00:02:09.300 --> 00:02:09.310 align:start position:0%
chef
 

00:02:09.310 --> 00:02:11.220 align:start position:0%
chef
during<00:02:09.580><c> this</c><00:02:09.700><c> video</c><00:02:10.060><c> as</c><00:02:10.330><c> you</c><00:02:10.569><c> guys</c><00:02:10.840><c> know</c><00:02:11.020><c> I'm</c>

00:02:11.220 --> 00:02:11.230 align:start position:0%
during this video as you guys know I'm
 

00:02:11.230 --> 00:02:12.390 align:start position:0%
during this video as you guys know I'm
quite<00:02:11.440><c> new</c><00:02:11.620><c> to</c><00:02:11.709><c> doing</c><00:02:11.830><c> this</c><00:02:12.010><c> YouTube</c><00:02:12.220><c> thing</c>

00:02:12.390 --> 00:02:12.400 align:start position:0%
quite new to doing this YouTube thing
 

00:02:12.400 --> 00:02:14.190 align:start position:0%
quite new to doing this YouTube thing
full<00:02:12.849><c> time</c><00:02:13.150><c> and</c><00:02:13.360><c> it's</c><00:02:13.480><c> amazing</c><00:02:13.630><c> companies</c>

00:02:14.190 --> 00:02:14.200 align:start position:0%
full time and it's amazing companies
 

00:02:14.200 --> 00:02:17.100 align:start position:0%
full time and it's amazing companies
like<00:02:14.470><c> that</c><00:02:14.739><c> who</c><00:02:15.190><c> make</c><00:02:15.430><c> this</c><00:02:15.610><c> possible</c><00:02:16.110><c> anyway</c>

00:02:17.100 --> 00:02:17.110 align:start position:0%
like that who make this possible anyway
 

00:02:17.110 --> 00:02:19.589 align:start position:0%
like that who make this possible anyway
see<00:02:17.470><c> what</c><00:02:17.590><c> I</c><00:02:17.620><c> did</c><00:02:17.739><c> there</c><00:02:17.800><c> is</c><00:02:18.190><c> that</c><00:02:18.610><c> any</c><00:02:18.849><c> way</c>

00:02:19.589 --> 00:02:19.599 align:start position:0%
see what I did there is that any way
 

00:02:19.599 --> 00:02:23.690 align:start position:0%
see what I did there is that any way
because<00:02:20.110><c> we're</c><00:02:20.380><c> talking</c><00:02:20.560><c> about</c><00:02:20.770><c> SVP</c><00:02:21.310><c> any</c>

00:02:23.690 --> 00:02:23.700 align:start position:0%
 
 

00:02:23.700 --> 00:02:26.009 align:start position:0%
 
let's<00:02:24.700><c> just</c><00:02:24.880><c> jump</c><00:02:25.030><c> into</c><00:02:25.150><c> the</c><00:02:25.390><c> code</c><00:02:25.540><c> so</c><00:02:25.930><c> the</c>

00:02:26.009 --> 00:02:26.019 align:start position:0%
let's just jump into the code so the
 

00:02:26.019 --> 00:02:26.940 align:start position:0%
let's just jump into the code so the
first<00:02:26.170><c> thing</c><00:02:26.290><c> that</c><00:02:26.319><c> we're</c><00:02:26.470><c> gonna</c><00:02:26.560><c> do</c><00:02:26.739><c> is</c>

00:02:26.940 --> 00:02:26.950 align:start position:0%
first thing that we're gonna do is
 

00:02:26.950 --> 00:02:28.830 align:start position:0%
first thing that we're gonna do is
include<00:02:27.370><c> the</c><00:02:27.670><c> header</c><00:02:27.880><c> file</c><00:02:28.180><c> which</c><00:02:28.450><c> is</c><00:02:28.630><c> just</c>

00:02:28.830 --> 00:02:28.840 align:start position:0%
include the header file which is just
 

00:02:28.840 --> 00:02:31.140 align:start position:0%
include the header file which is just
any<00:02:29.110><c> just</c><00:02:29.650><c> like</c><00:02:29.769><c> that</c><00:02:29.950><c> also</c><00:02:30.459><c> make</c><00:02:30.849><c> sure</c><00:02:30.880><c> that</c>

00:02:31.140 --> 00:02:31.150 align:start position:0%
any just like that also make sure that
 

00:02:31.150 --> 00:02:33.150 align:start position:0%
any just like that also make sure that
you<00:02:31.450><c> are</c><00:02:31.690><c> of</c><00:02:31.930><c> course</c><00:02:32.110><c> compiling</c><00:02:32.650><c> this</c><00:02:32.890><c> code</c>

00:02:33.150 --> 00:02:33.160 align:start position:0%
you are of course compiling this code
 

00:02:33.160 --> 00:02:36.390 align:start position:0%
you are of course compiling this code
with<00:02:33.400><c> C++</c><00:02:33.760><c> 17</c><00:02:34.750><c> because</c><00:02:35.170><c> this</c><00:02:35.349><c> is</c><00:02:35.470><c> a</c><00:02:35.590><c> C++</c><00:02:36.040><c> 17</c>

00:02:36.390 --> 00:02:36.400 align:start position:0%
with C++ 17 because this is a C++ 17
 

00:02:36.400 --> 00:02:39.360 align:start position:0%
with C++ 17 because this is a C++ 17
only<00:02:36.760><c> feature</c><00:02:37.030><c> it's</c><00:02:37.569><c> new</c><00:02:37.870><c> in</c><00:02:38.140><c> C++</c><00:02:38.530><c> 17</c><00:02:38.980><c> I</c><00:02:39.190><c> should</c>

00:02:39.360 --> 00:02:39.370 align:start position:0%
only feature it's new in C++ 17 I should
 

00:02:39.370 --> 00:02:41.820 align:start position:0%
only feature it's new in C++ 17 I should
say<00:02:39.819><c> because</c><00:02:40.120><c> obviously</c><00:02:40.420><c> if</c><00:02:40.720><c> using</c><00:02:41.110><c> a</c><00:02:41.230><c> version</c>

00:02:41.820 --> 00:02:41.830 align:start position:0%
say because obviously if using a version
 

00:02:41.830 --> 00:02:43.470 align:start position:0%
say because obviously if using a version
newer<00:02:42.130><c> than</c><00:02:42.280><c> that</c><00:02:42.340><c> presumably</c><00:02:42.910><c> it</c><00:02:43.330><c> would</c>

00:02:43.470 --> 00:02:43.480 align:start position:0%
newer than that presumably it would
 

00:02:43.480 --> 00:02:46.110 align:start position:0%
newer than that presumably it would
still<00:02:43.720><c> be</c><00:02:43.750><c> there</c><00:02:44.230><c> unless</c><00:02:44.620><c> the</c><00:02:45.430><c> committee</c>

00:02:46.110 --> 00:02:46.120 align:start position:0%
still be there unless the committee
 

00:02:46.120 --> 00:02:47.729 align:start position:0%
still be there unless the committee
decided<00:02:46.480><c> that</c><00:02:46.630><c> it</c><00:02:46.750><c> was</c><00:02:46.840><c> a</c><00:02:46.870><c> terrible</c><00:02:47.140><c> idea</c>

00:02:47.729 --> 00:02:47.739 align:start position:0%
decided that it was a terrible idea
 

00:02:47.739 --> 00:02:50.970 align:start position:0%
decided that it was a terrible idea
which<00:02:48.390><c> still</c><00:02:49.390><c> convinced</c><00:02:49.900><c> it</c><00:02:50.019><c> might</c><00:02:50.319><c> be</c><00:02:50.620><c> and</c><00:02:50.890><c> in</c>

00:02:50.970 --> 00:02:50.980 align:start position:0%
which still convinced it might be and in
 

00:02:50.980 --> 00:02:52.500 align:start position:0%
which still convinced it might be and in
that<00:02:51.100><c> case</c><00:02:51.340><c> it's</c><00:02:51.580><c> gone</c><00:02:51.790><c> but</c><00:02:52.120><c> let's</c><00:02:52.330><c> just</c>

00:02:52.500 --> 00:02:52.510 align:start position:0%
that case it's gone but let's just
 

00:02:52.510 --> 00:02:54.210 align:start position:0%
that case it's gone but let's just
pretend<00:02:52.900><c> that</c><00:02:53.260><c> it's</c><00:02:53.410><c> gonna</c><00:02:53.560><c> be</c><00:02:53.769><c> here</c><00:02:54.010><c> forever</c>

00:02:54.210 --> 00:02:54.220 align:start position:0%
pretend that it's gonna be here forever
 

00:02:54.220 --> 00:02:56.070 align:start position:0%
pretend that it's gonna be here forever
because<00:02:54.730><c> it</c><00:02:54.849><c> might</c><00:02:55.030><c> so</c><00:02:55.390><c> to</c><00:02:55.510><c> use</c><00:02:55.780><c> this</c><00:02:56.019><c> you</c>

00:02:56.070 --> 00:02:56.080 align:start position:0%
because it might so to use this you
 

00:02:56.080 --> 00:02:59.070 align:start position:0%
because it might so to use this you
simply<00:02:56.680><c> write</c><00:02:57.130><c> s</c><00:02:57.519><c> city</c><00:02:58.000><c> any</c><00:02:58.209><c> it's</c><00:02:58.540><c> much</c><00:02:58.810><c> like</c>

00:02:59.070 --> 00:02:59.080 align:start position:0%
simply write s city any it's much like
 

00:02:59.080 --> 00:03:01.170 align:start position:0%
simply write s city any it's much like
variant<00:02:59.680><c> except</c><00:03:00.160><c> there</c><00:03:00.430><c> are</c><00:03:00.459><c> no</c><00:03:00.610><c> template</c>

00:03:01.170 --> 00:03:01.180 align:start position:0%
variant except there are no template
 

00:03:01.180 --> 00:03:03.390 align:start position:0%
variant except there are no template
arguments<00:03:01.660><c> because</c><00:03:01.930><c> of</c><00:03:02.049><c> course</c><00:03:02.260><c> it's</c><00:03:02.650><c> it</c><00:03:03.250><c> can</c>

00:03:03.390 --> 00:03:03.400 align:start position:0%
arguments because of course it's it can
 

00:03:03.400 --> 00:03:05.789 align:start position:0%
arguments because of course it's it can
store<00:03:03.670><c> any</c><00:03:03.849><c> type</c><00:03:03.940><c> then</c><00:03:04.930><c> we</c><00:03:05.049><c> just</c><00:03:05.230><c> will</c><00:03:05.470><c> type</c><00:03:05.650><c> in</c>

00:03:05.789 --> 00:03:05.799 align:start position:0%
store any type then we just will type in
 

00:03:05.799 --> 00:03:07.979 align:start position:0%
store any type then we just will type in
a<00:03:05.890><c> name</c><00:03:06.040><c> for</c><00:03:06.099><c> our</c><00:03:06.400><c> variable</c><00:03:06.730><c> call</c><00:03:07.060><c> it</c><00:03:07.180><c> data</c><00:03:07.420><c> you</c>

00:03:07.979 --> 00:03:07.989 align:start position:0%
a name for our variable call it data you
 

00:03:07.989 --> 00:03:10.110 align:start position:0%
a name for our variable call it data you
can<00:03:08.140><c> use</c><00:03:08.170><c> something</c><00:03:08.440><c> called</c><00:03:08.530><c> SUV</c><00:03:09.190><c> make</c><00:03:09.519><c> any</c><00:03:09.880><c> if</c>

00:03:10.110 --> 00:03:10.120 align:start position:0%
can use something called SUV make any if
 

00:03:10.120 --> 00:03:12.030 align:start position:0%
can use something called SUV make any if
you<00:03:10.180><c> want</c><00:03:10.390><c> to</c><00:03:10.450><c> construct</c><00:03:10.930><c> something</c><00:03:11.799><c> from</c>

00:03:12.030 --> 00:03:12.040 align:start position:0%
you want to construct something from
 

00:03:12.040 --> 00:03:13.800 align:start position:0%
you want to construct something from
here<00:03:12.400><c> but</c><00:03:12.880><c> what</c><00:03:13.030><c> we'll</c><00:03:13.180><c> do</c><00:03:13.329><c> is</c><00:03:13.480><c> we'll</c><00:03:13.630><c> just</c>

00:03:13.800 --> 00:03:13.810 align:start position:0%
here but what we'll do is we'll just
 

00:03:13.810 --> 00:03:15.690 align:start position:0%
here but what we'll do is we'll just
kind<00:03:13.989><c> of</c><00:03:14.019><c> keep</c><00:03:14.079><c> it</c><00:03:14.380><c> empty</c><00:03:14.650><c> here</c><00:03:15.190><c> and</c><00:03:15.400><c> then</c><00:03:15.519><c> just</c>

00:03:15.690 --> 00:03:15.700 align:start position:0%
kind of keep it empty here and then just
 

00:03:15.700 --> 00:03:17.460 align:start position:0%
kind of keep it empty here and then just
set<00:03:15.850><c> data</c><00:03:16.030><c> equal</c><00:03:16.480><c> to</c><00:03:16.660><c> like</c><00:03:16.810><c> two</c><00:03:17.109><c> for</c><00:03:17.380><c> example</c>

00:03:17.460 --> 00:03:17.470 align:start position:0%
set data equal to like two for example
 

00:03:17.470 --> 00:03:19.710 align:start position:0%
set data equal to like two for example
and<00:03:18.190><c> then</c><00:03:18.489><c> we</c><00:03:18.609><c> can</c><00:03:18.730><c> set</c><00:03:18.940><c> data</c><00:03:19.090><c> equal</c><00:03:19.510><c> to</c><00:03:19.690><c> a</c>

00:03:19.710 --> 00:03:19.720 align:start position:0%
and then we can set data equal to a
 

00:03:19.720 --> 00:03:24.090 align:start position:0%
and then we can set data equal to a
constant<00:03:21.690><c> star</c><00:03:22.690><c> pointer</c><00:03:23.079><c> or</c><00:03:23.530><c> we</c><00:03:23.680><c> can</c><00:03:23.829><c> say</c><00:03:23.950><c> died</c>

00:03:24.090 --> 00:03:24.100 align:start position:0%
constant star pointer or we can say died
 

00:03:24.100 --> 00:03:26.250 align:start position:0%
constant star pointer or we can say died
or<00:03:24.250><c> equal</c><00:03:24.459><c> to</c><00:03:24.549><c> a</c><00:03:24.579><c> string</c><00:03:24.880><c> in</c><00:03:25.359><c> which</c><00:03:25.870><c> case</c><00:03:26.049><c> we'll</c>

00:03:26.250 --> 00:03:26.260 align:start position:0%
or equal to a string in which case we'll
 

00:03:26.260 --> 00:03:27.720 align:start position:0%
or equal to a string in which case we'll
just<00:03:26.290><c> write</c><00:03:26.560><c> something</c><00:03:26.799><c> like</c><00:03:26.920><c> this</c><00:03:27.310><c> or</c><00:03:27.640><c> we</c>

00:03:27.720 --> 00:03:27.730 align:start position:0%
just write something like this or we
 

00:03:27.730 --> 00:03:29.009 align:start position:0%
just write something like this or we
could<00:03:27.880><c> set</c><00:03:28.000><c> it</c><00:03:28.120><c> equal</c><00:03:28.180><c> to</c><00:03:28.450><c> you</c><00:03:28.569><c> guys</c><00:03:28.690><c> kind</c><00:03:28.989><c> of</c>

00:03:29.009 --> 00:03:29.019 align:start position:0%
could set it equal to you guys kind of
 

00:03:29.019 --> 00:03:30.660 align:start position:0%
could set it equal to you guys kind of
get<00:03:29.230><c> the</c><00:03:29.350><c> point</c><00:03:29.560><c> you</c><00:03:29.920><c> just</c><00:03:29.950><c> set</c><00:03:30.280><c> it</c><00:03:30.400><c> equal</c><00:03:30.459><c> to</c>

00:03:30.660 --> 00:03:30.670 align:start position:0%
get the point you just set it equal to
 

00:03:30.670 --> 00:03:32.490 align:start position:0%
get the point you just set it equal to
like<00:03:30.880><c> absolutely</c><00:03:31.510><c> anything</c><00:03:31.780><c> because</c><00:03:32.260><c> that's</c>

00:03:32.490 --> 00:03:32.500 align:start position:0%
like absolutely anything because that's
 

00:03:32.500 --> 00:03:35.309 align:start position:0%
like absolutely anything because that's
what<00:03:32.680><c> it</c><00:03:32.799><c> is</c><00:03:32.950><c> any</c><00:03:33.630><c> thing</c><00:03:34.630><c> if</c><00:03:34.959><c> you</c><00:03:35.109><c> want</c><00:03:35.260><c> to</c>

00:03:35.309 --> 00:03:35.319 align:start position:0%
what it is any thing if you want to
 

00:03:35.319 --> 00:03:36.539 align:start position:0%
what it is any thing if you want to
retrieve<00:03:35.650><c> your</c><00:03:35.799><c> data</c><00:03:35.859><c> you're</c><00:03:36.220><c> gonna</c><00:03:36.310><c> have</c><00:03:36.459><c> to</c>

00:03:36.539 --> 00:03:36.549 align:start position:0%
retrieve your data you're gonna have to
 

00:03:36.549 --> 00:03:38.009 align:start position:0%
retrieve your data you're gonna have to
do<00:03:36.640><c> a</c><00:03:36.670><c> little</c><00:03:36.760><c> bit</c><00:03:36.970><c> more</c><00:03:37.000><c> work</c><00:03:37.390><c> you'll</c><00:03:37.720><c> have</c><00:03:37.900><c> to</c>

00:03:38.009 --> 00:03:38.019 align:start position:0%
do a little bit more work you'll have to
 

00:03:38.019 --> 00:03:39.990 align:start position:0%
do a little bit more work you'll have to
actually<00:03:38.440><c> know</c><00:03:38.560><c> which</c><00:03:39.069><c> type</c><00:03:39.370><c> it</c><00:03:39.579><c> is</c><00:03:39.700><c> and</c><00:03:39.910><c> then</c>

00:03:39.990 --> 00:03:40.000 align:start position:0%
actually know which type it is and then
 

00:03:40.000 --> 00:03:41.879 align:start position:0%
actually know which type it is and then
kind<00:03:40.269><c> of</c><00:03:40.359><c> cast</c><00:03:40.600><c> it</c><00:03:40.900><c> into</c><00:03:41.200><c> that</c><00:03:41.350><c> type</c><00:03:41.650><c> and</c><00:03:41.799><c> you</c>

00:03:41.879 --> 00:03:41.889 align:start position:0%
kind of cast it into that type and you
 

00:03:41.889 --> 00:03:44.099 align:start position:0%
kind of cast it into that type and you
can<00:03:41.950><c> do</c><00:03:42.160><c> that</c><00:03:42.310><c> by</c><00:03:42.489><c> using</c><00:03:42.549><c> s</c><00:03:43.090><c> city</c><00:03:43.389><c> any</c><00:03:43.630><c> cost</c>

00:03:44.099 --> 00:03:44.109 align:start position:0%
can do that by using s city any cost
 

00:03:44.109 --> 00:03:46.650 align:start position:0%
can do that by using s city any cost
then<00:03:44.769><c> you</c><00:03:44.889><c> just</c><00:03:45.069><c> put</c><00:03:45.280><c> in</c><00:03:45.459><c> the</c><00:03:45.850><c> type</c><00:03:46.329><c> that</c><00:03:46.600><c> you</c>

00:03:46.650 --> 00:03:46.660 align:start position:0%
then you just put in the type that you
 

00:03:46.660 --> 00:03:49.500 align:start position:0%
then you just put in the type that you
want<00:03:46.780><c> to</c><00:03:46.930><c> cast</c><00:03:47.170><c> to</c><00:03:47.440><c> like</c><00:03:47.709><c> STD</c><00:03:48.549><c> string</c><00:03:48.910><c> and</c><00:03:49.180><c> then</c>

00:03:49.500 --> 00:03:49.510 align:start position:0%
want to cast to like STD string and then
 

00:03:49.510 --> 00:03:52.140 align:start position:0%
want to cast to like STD string and then
of<00:03:49.630><c> course</c><00:03:49.840><c> the</c><00:03:50.410><c> actual</c><00:03:50.680><c> any</c><00:03:51.220><c> variable</c><00:03:51.940><c> goes</c>

00:03:52.140 --> 00:03:52.150 align:start position:0%
of course the actual any variable goes
 

00:03:52.150 --> 00:03:54.300 align:start position:0%
of course the actual any variable goes
into<00:03:52.569><c> the</c><00:03:52.720><c> parameter</c><00:03:53.260><c> here</c><00:03:53.560><c> now</c><00:03:53.920><c> this</c><00:03:54.100><c> will</c>

00:03:54.300 --> 00:03:54.310 align:start position:0%
into the parameter here now this will
 

00:03:54.310 --> 00:03:56.430 align:start position:0%
into the parameter here now this will
throw<00:03:54.730><c> an</c><00:03:54.910><c> exception</c><00:03:55.000><c> about</c><00:03:55.870><c> any</c><00:03:56.139><c> cast</c>

00:03:56.430 --> 00:03:56.440 align:start position:0%
throw an exception about any cast
 

00:03:56.440 --> 00:03:59.129 align:start position:0%
throw an exception about any cast
exception<00:03:56.920><c> if</c><00:03:57.280><c> the</c><00:03:57.340><c> data</c><00:03:58.209><c> is</c><00:03:58.480><c> not</c><00:03:58.660><c> of</c><00:03:58.840><c> the</c><00:03:58.959><c> type</c>

00:03:59.129 --> 00:03:59.139 align:start position:0%
exception if the data is not of the type
 

00:03:59.139 --> 00:04:01.140 align:start position:0%
exception if the data is not of the type
that<00:03:59.319><c> you're</c><00:03:59.440><c> trying</c><00:03:59.650><c> to</c><00:03:59.739><c> cast</c><00:04:00.100><c> into</c><00:04:00.400><c> so</c><00:04:00.970><c> just</c>

00:04:01.140 --> 00:04:01.150 align:start position:0%
that you're trying to cast into so just
 

00:04:01.150 --> 00:04:03.090 align:start position:0%
that you're trying to cast into so just
keep<00:04:01.329><c> that</c><00:04:01.540><c> in</c><00:04:01.600><c> mind</c><00:04:01.840><c> there's</c><00:04:02.560><c> a</c><00:04:02.680><c> course</c><00:04:02.920><c> for</c>

00:04:03.090 --> 00:04:03.100 align:start position:0%
keep that in mind there's a course for
 

00:04:03.100 --> 00:04:05.400 align:start position:0%
keep that in mind there's a course for
return<00:04:03.430><c> a</c><00:04:03.639><c> string</c><00:04:03.970><c> so</c><00:04:04.299><c> we</c><00:04:04.329><c> can</c><00:04:04.540><c> assign</c><00:04:04.810><c> it</c><00:04:04.870><c> like</c>

00:04:05.400 --> 00:04:05.410 align:start position:0%
return a string so we can assign it like
 

00:04:05.410 --> 00:04:08.039 align:start position:0%
return a string so we can assign it like
so<00:04:05.799><c> now</c><00:04:06.250><c> first</c><00:04:06.609><c> glance</c><00:04:06.850><c> this</c><00:04:07.150><c> may</c><00:04:07.480><c> seem</c><00:04:07.540><c> like</c>

00:04:08.039 --> 00:04:08.049 align:start position:0%
so now first glance this may seem like
 

00:04:08.049 --> 00:04:10.830 align:start position:0%
so now first glance this may seem like
it's<00:04:08.560><c> pretty</c><00:04:08.769><c> much</c><00:04:08.859><c> the</c><00:04:09.130><c> same</c><00:04:09.340><c> as</c><00:04:09.639><c> STD</c><00:04:10.389><c> variant</c>

00:04:10.830 --> 00:04:10.840 align:start position:0%
it's pretty much the same as STD variant
 

00:04:10.840 --> 00:04:12.930 align:start position:0%
it's pretty much the same as STD variant
and<00:04:11.019><c> that's</c><00:04:11.139><c> because</c><00:04:11.500><c> well</c><00:04:12.250><c> it's</c><00:04:12.549><c> similar</c>

00:04:12.930 --> 00:04:12.940 align:start position:0%
and that's because well it's similar
 

00:04:12.940 --> 00:04:15.720 align:start position:0%
and that's because well it's similar
right<00:04:13.600><c> we</c><00:04:13.930><c> can</c><00:04:14.139><c> store</c><00:04:14.410><c> any</c><00:04:14.709><c> type</c><00:04:14.829><c> here</c><00:04:15.459><c> whereas</c>

00:04:15.720 --> 00:04:15.730 align:start position:0%
right we can store any type here whereas
 

00:04:15.730 --> 00:04:17.699 align:start position:0%
right we can store any type here whereas
STD<00:04:16.150><c> variant</c><00:04:16.510><c> requires</c><00:04:16.930><c> us</c><00:04:17.109><c> to</c><00:04:17.260><c> list</c><00:04:17.500><c> all</c><00:04:17.680><c> of</c>

00:04:17.699 --> 00:04:17.709 align:start position:0%
STD variant requires us to list all of
 

00:04:17.709 --> 00:04:20.580 align:start position:0%
STD variant requires us to list all of
our<00:04:17.919><c> types</c><00:04:18.220><c> but</c><00:04:19.000><c> see</c><00:04:19.419><c> whilst</c><00:04:19.810><c> a</c><00:04:20.080><c> lot</c><00:04:20.229><c> of</c><00:04:20.320><c> people</c>

00:04:20.580 --> 00:04:20.590 align:start position:0%
our types but see whilst a lot of people
 

00:04:20.590 --> 00:04:22.730 align:start position:0%
our types but see whilst a lot of people
might<00:04:20.799><c> think</c><00:04:20.830><c> that</c><00:04:21.430><c> s</c><00:04:22.030><c> to</c><00:04:22.270><c> be</c><00:04:22.360><c> very</c>

00:04:22.730 --> 00:04:22.740 align:start position:0%
might think that s to be very
 

00:04:22.740 --> 00:04:24.379 align:start position:0%
might think that s to be very
is<00:04:22.800><c> worse</c><00:04:23.100><c> because</c><00:04:23.490><c> you</c><00:04:23.699><c> have</c><00:04:24.000><c> to</c><00:04:24.120><c> list</c><00:04:24.270><c> all</c>

00:04:24.379 --> 00:04:24.389 align:start position:0%
is worse because you have to list all
 

00:04:24.389 --> 00:04:25.460 align:start position:0%
is worse because you have to list all
your<00:04:24.539><c> types</c><00:04:24.690><c> words</c><00:04:24.930><c> here</c><00:04:25.050><c> you</c><00:04:25.169><c> don't</c><00:04:25.289><c> have</c><00:04:25.410><c> to</c>

00:04:25.460 --> 00:04:25.470 align:start position:0%
your types words here you don't have to
 

00:04:25.470 --> 00:04:28.010 align:start position:0%
your types words here you don't have to
worry<00:04:25.650><c> about</c><00:04:25.740><c> types</c><00:04:25.979><c> at</c><00:04:26.130><c> all</c><00:04:26.330><c> that's</c><00:04:27.330><c> kind</c><00:04:27.900><c> of</c>

00:04:28.010 --> 00:04:28.020 align:start position:0%
worry about types at all that's kind of
 

00:04:28.020 --> 00:04:29.930 align:start position:0%
worry about types at all that's kind of
why<00:04:28.259><c> SUT</c><00:04:28.740><c> variant</c><00:04:29.100><c> is</c><00:04:29.190><c> actually</c><00:04:29.460><c> better</c><00:04:29.610><c> than</c>

00:04:29.930 --> 00:04:29.940 align:start position:0%
why SUT variant is actually better than
 

00:04:29.940 --> 00:04:31.939 align:start position:0%
why SUT variant is actually better than
SCT<00:04:30.449><c> anything</c><00:04:30.900><c> pretty</c><00:04:31.169><c> much</c><00:04:31.229><c> anything</c><00:04:31.770><c> you</c>

00:04:31.939 --> 00:04:31.949 align:start position:0%
SCT anything pretty much anything you
 

00:04:31.949 --> 00:04:33.409 align:start position:0%
SCT anything pretty much anything you
need<00:04:32.130><c> to</c><00:04:32.220><c> deal</c><00:04:32.370><c> with</c><00:04:32.550><c> I'm</c><00:04:32.669><c> really</c><00:04:32.940><c> getting</c>

00:04:33.409 --> 00:04:33.419 align:start position:0%
need to deal with I'm really getting
 

00:04:33.419 --> 00:04:35.150 align:start position:0%
need to deal with I'm really getting
annoyed<00:04:33.840><c> with</c><00:04:34.110><c> saying</c><00:04:34.319><c> the</c><00:04:34.410><c> word</c><00:04:34.560><c> any</c><00:04:34.770><c> all</c><00:04:35.039><c> the</c>

00:04:35.150 --> 00:04:35.160 align:start position:0%
annoyed with saying the word any all the
 

00:04:35.160 --> 00:04:37.610 align:start position:0%
annoyed with saying the word any all the
time<00:04:35.340><c> the</c><00:04:35.610><c> fact</c><00:04:35.940><c> that</c><00:04:36.090><c> SUV</c><00:04:36.660><c> variant</c><00:04:37.259><c> requires</c>

00:04:37.610 --> 00:04:37.620 align:start position:0%
time the fact that SUV variant requires
 

00:04:37.620 --> 00:04:39.529 align:start position:0%
time the fact that SUV variant requires
you<00:04:37.800><c> to</c><00:04:37.830><c> list</c><00:04:38.130><c> out</c><00:04:38.340><c> all</c><00:04:38.550><c> of</c><00:04:38.580><c> those</c><00:04:38.819><c> types</c><00:04:39.180><c> is</c>

00:04:39.529 --> 00:04:39.539 align:start position:0%
you to list out all of those types is
 

00:04:39.539 --> 00:04:42.230 align:start position:0%
you to list out all of those types is
good<00:04:40.020><c> that's</c><00:04:40.289><c> what</c><00:04:40.500><c> makes</c><00:04:40.740><c> it</c><00:04:40.919><c> type</c><00:04:41.310><c> safe</c><00:04:41.669><c> for</c>

00:04:42.230 --> 00:04:42.240 align:start position:0%
good that's what makes it type safe for
 

00:04:42.240 --> 00:04:44.240 align:start position:0%
good that's what makes it type safe for
example<00:04:42.750><c> we</c><00:04:42.990><c> might</c><00:04:43.139><c> forget</c><00:04:43.410><c> to</c><00:04:43.680><c> explicitly</c>

00:04:44.240 --> 00:04:44.250 align:start position:0%
example we might forget to explicitly
 

00:04:44.250 --> 00:04:45.890 align:start position:0%
example we might forget to explicitly
write<00:04:44.430><c> the</c><00:04:44.610><c> fact</c><00:04:44.819><c> that</c><00:04:44.940><c> this</c><00:04:45.150><c> is</c><00:04:45.300><c> a</c><00:04:45.330><c> string</c><00:04:45.720><c> and</c>

00:04:45.890 --> 00:04:45.900 align:start position:0%
write the fact that this is a string and
 

00:04:45.900 --> 00:04:47.330 align:start position:0%
write the fact that this is a string and
we<00:04:46.080><c> might</c><00:04:46.289><c> try</c><00:04:46.590><c> and</c><00:04:46.740><c> write</c><00:04:46.860><c> some</c><00:04:47.039><c> code</c><00:04:47.160><c> like</c>

00:04:47.330 --> 00:04:47.340 align:start position:0%
we might try and write some code like
 

00:04:47.340 --> 00:04:49.070 align:start position:0%
we might try and write some code like
this<00:04:47.490><c> this</c><00:04:47.669><c> looks</c><00:04:47.819><c> perfectly</c><00:04:48.419><c> reasonable</c><00:04:48.990><c> we</c>

00:04:49.070 --> 00:04:49.080 align:start position:0%
this this looks perfectly reasonable we
 

00:04:49.080 --> 00:04:50.930 align:start position:0%
this this looks perfectly reasonable we
set<00:04:49.259><c> data</c><00:04:49.470><c> to</c><00:04:49.710><c> two</c><00:04:49.889><c> we</c><00:04:50.130><c> set</c><00:04:50.310><c> data</c><00:04:50.490><c> to</c><00:04:50.699><c> Cherno</c>

00:04:50.930 --> 00:04:50.940 align:start position:0%
set data to two we set data to Cherno
 

00:04:50.940 --> 00:04:52.730 align:start position:0%
set data to two we set data to Cherno
which<00:04:51.180><c> is</c><00:04:51.300><c> a</c><00:04:51.330><c> string</c><00:04:51.630><c> and</c><00:04:51.840><c> then</c><00:04:52.289><c> we</c><00:04:52.410><c> try</c><00:04:52.620><c> and</c>

00:04:52.730 --> 00:04:52.740 align:start position:0%
which is a string and then we try and
 

00:04:52.740 --> 00:04:54.620 align:start position:0%
which is a string and then we try and
get<00:04:52.860><c> that</c><00:04:53.009><c> string</c><00:04:53.490><c> out</c><00:04:53.729><c> however</c><00:04:54.210><c> that's</c><00:04:54.449><c> not</c>

00:04:54.620 --> 00:04:54.630 align:start position:0%
get that string out however that's not
 

00:04:54.630 --> 00:04:57.980 align:start position:0%
get that string out however that's not
going<00:04:54.990><c> to</c><00:04:55.199><c> work</c><00:04:55.470><c> because</c><00:04:55.830><c> well</c><00:04:56.639><c> this</c><00:04:57.479><c> chatter</c>

00:04:57.980 --> 00:04:57.990 align:start position:0%
going to work because well this chatter
 

00:04:57.990 --> 00:05:00.200 align:start position:0%
going to work because well this chatter
is<00:04:58.349><c> not</c><00:04:58.560><c> a</c><00:04:58.590><c> string</c><00:04:59.130><c> is</c><00:04:59.370><c> it</c><00:04:59.580><c> it's</c><00:04:59.759><c> just</c><00:05:00.060><c> a</c>

00:05:00.200 --> 00:05:00.210 align:start position:0%
is not a string is it it's just a
 

00:05:00.210 --> 00:05:03.140 align:start position:0%
is not a string is it it's just a
constant<00:05:00.539><c> our</c><00:05:00.840><c> pointer</c><00:05:01.410><c> whereas</c><00:05:02.310><c> if</c><00:05:02.639><c> we</c><00:05:02.699><c> were</c>

00:05:03.140 --> 00:05:03.150 align:start position:0%
constant our pointer whereas if we were
 

00:05:03.150 --> 00:05:05.570 align:start position:0%
constant our pointer whereas if we were
using<00:05:03.389><c> variant</c><00:05:04.139><c> in</c><00:05:04.349><c> this</c><00:05:04.680><c> exact</c><00:05:05.310><c> scenario</c>

00:05:05.570 --> 00:05:05.580 align:start position:0%
using variant in this exact scenario
 

00:05:05.580 --> 00:05:07.339 align:start position:0%
using variant in this exact scenario
then<00:05:06.330><c> our</c><00:05:06.449><c> code</c><00:05:06.630><c> would</c><00:05:06.810><c> look</c><00:05:06.870><c> something</c><00:05:07.320><c> like</c>

00:05:07.339 --> 00:05:07.349 align:start position:0%
then our code would look something like
 

00:05:07.349 --> 00:05:09.980 align:start position:0%
then our code would look something like
this<00:05:07.710><c> we</c><00:05:07.949><c> might</c><00:05:08.099><c> have</c><00:05:08.340><c> int</c><00:05:08.699><c> we</c><00:05:09.000><c> might</c><00:05:09.180><c> have</c><00:05:09.449><c> STD</c>

00:05:09.980 --> 00:05:09.990 align:start position:0%
this we might have int we might have STD
 

00:05:09.990 --> 00:05:12.080 align:start position:0%
this we might have int we might have STD
string<00:05:10.410><c> now</c><00:05:10.860><c> of</c><00:05:11.039><c> course</c><00:05:11.220><c> this</c><00:05:11.669><c> will</c><00:05:11.880><c> work</c>

00:05:12.080 --> 00:05:12.090 align:start position:0%
string now of course this will work
 

00:05:12.090 --> 00:05:14.120 align:start position:0%
string now of course this will work
correctly<00:05:12.509><c> and</c><00:05:13.169><c> we'd</c><00:05:13.440><c> have</c><00:05:13.620><c> to</c><00:05:13.740><c> change</c><00:05:13.949><c> this</c>

00:05:14.120 --> 00:05:14.130 align:start position:0%
correctly and we'd have to change this
 

00:05:14.130 --> 00:05:17.149 align:start position:0%
correctly and we'd have to change this
to<00:05:14.310><c> be</c><00:05:14.460><c> get</c><00:05:14.789><c> maybe</c><00:05:15.479><c> get</c><00:05:15.840><c> if</c><00:05:16.080><c> because</c><00:05:16.650><c> this</c><00:05:16.889><c> will</c>

00:05:17.149 --> 00:05:17.159 align:start position:0%
to be get maybe get if because this will
 

00:05:17.159 --> 00:05:18.680 align:start position:0%
to be get maybe get if because this will
get<00:05:17.310><c> implicitly</c><00:05:17.729><c> cast</c><00:05:18.030><c> into</c><00:05:18.270><c> a</c><00:05:18.330><c> string</c><00:05:18.570><c> cause</c>

00:05:18.680 --> 00:05:18.690 align:start position:0%
get implicitly cast into a string cause
 

00:05:18.690 --> 00:05:21.710 align:start position:0%
get implicitly cast into a string cause
it<00:05:18.810><c> has</c><00:05:18.960><c> to</c><00:05:19.169><c> be</c><00:05:19.289><c> either</c><00:05:19.530><c> a</c><00:05:19.650><c> string</c><00:05:20.190><c> or</c><00:05:20.669><c> an</c><00:05:21.360><c> int</c>

00:05:21.710 --> 00:05:21.720 align:start position:0%
it has to be either a string or an int
 

00:05:21.720 --> 00:05:23.360 align:start position:0%
it has to be either a string or an int
so<00:05:22.199><c> are</c><00:05:22.409><c> there</c><00:05:22.620><c> any</c><00:05:22.710><c> differences</c><00:05:23.190><c> between</c>

00:05:23.360 --> 00:05:23.370 align:start position:0%
so are there any differences between
 

00:05:23.370 --> 00:05:25.909 align:start position:0%
so are there any differences between
variant<00:05:24.120><c> and</c><00:05:24.270><c> any</c><00:05:24.630><c> apart</c><00:05:25.199><c> from</c><00:05:25.380><c> the</c><00:05:25.560><c> fact</c><00:05:25.800><c> that</c>

00:05:25.909 --> 00:05:25.919 align:start position:0%
variant and any apart from the fact that
 

00:05:25.919 --> 00:05:27.560 align:start position:0%
variant and any apart from the fact that
variant<00:05:26.370><c> of</c><00:05:26.490><c> course</c><00:05:26.699><c> requires</c><00:05:27.090><c> you</c><00:05:27.240><c> to</c><00:05:27.300><c> list</c>

00:05:27.560 --> 00:05:27.570 align:start position:0%
variant of course requires you to list
 

00:05:27.570 --> 00:05:30.020 align:start position:0%
variant of course requires you to list
out<00:05:27.750><c> the</c><00:05:27.900><c> types</c><00:05:28.169><c> well</c><00:05:28.949><c> yes</c><00:05:29.310><c> it's</c><00:05:29.550><c> to</c><00:05:29.669><c> do</c><00:05:29.820><c> with</c>

00:05:30.020 --> 00:05:30.030 align:start position:0%
out the types well yes it's to do with
 

00:05:30.030 --> 00:05:32.300 align:start position:0%
out the types well yes it's to do with
how<00:05:30.180><c> they're</c><00:05:30.449><c> stored</c><00:05:30.900><c> variant</c><00:05:31.620><c> is</c><00:05:31.830><c> simply</c><00:05:32.280><c> a</c>

00:05:32.300 --> 00:05:32.310 align:start position:0%
how they're stored variant is simply a
 

00:05:32.310 --> 00:05:34.700 align:start position:0%
how they're stored variant is simply a
type<00:05:32.789><c> safe</c><00:05:33.120><c> Union</c><00:05:33.750><c> what</c><00:05:34.050><c> that</c><00:05:34.199><c> means</c><00:05:34.500><c> is</c><00:05:34.680><c> that</c>

00:05:34.700 --> 00:05:34.710 align:start position:0%
type safe Union what that means is that
 

00:05:34.710 --> 00:05:38.149 align:start position:0%
type safe Union what that means is that
it<00:05:34.979><c> stores</c><00:05:35.280><c> all</c><00:05:35.669><c> of</c><00:05:35.820><c> its</c><00:05:35.940><c> data</c><00:05:36.210><c> in</c><00:05:36.840><c> basically</c><00:05:37.830><c> a</c>

00:05:38.149 --> 00:05:38.159 align:start position:0%
it stores all of its data in basically a
 

00:05:38.159 --> 00:05:39.770 align:start position:0%
it stores all of its data in basically a
union<00:05:38.849><c> and</c><00:05:39.090><c> again</c><00:05:39.270><c> if</c><00:05:39.360><c> you</c><00:05:39.449><c> guys</c><00:05:39.539><c> are</c><00:05:39.690><c> not</c>

00:05:39.770 --> 00:05:39.780 align:start position:0%
union and again if you guys are not
 

00:05:39.780 --> 00:05:41.149 align:start position:0%
union and again if you guys are not
familiar<00:05:39.930><c> with</c><00:05:40.199><c> that</c><00:05:40.320><c> there</c><00:05:40.650><c> is</c><00:05:40.770><c> a</c><00:05:40.800><c> video</c><00:05:41.009><c> in</c>

00:05:41.149 --> 00:05:41.159 align:start position:0%
familiar with that there is a video in
 

00:05:41.159 --> 00:05:44.209 align:start position:0%
familiar with that there is a video in
the<00:05:41.729><c> top</c><00:05:41.969><c> right</c><00:05:42.330><c> corner</c><00:05:42.690><c> just</c><00:05:43.409><c> about</c><00:05:43.650><c> unions</c>

00:05:44.209 --> 00:05:44.219 align:start position:0%
the top right corner just about unions
 

00:05:44.219 --> 00:05:47.570 align:start position:0%
the top right corner just about unions
what<00:05:44.610><c> does</c><00:05:44.759><c> any</c><00:05:44.969><c> do</c><00:05:45.270><c> well</c><00:05:46.070><c> let's</c><00:05:47.070><c> take</c><00:05:47.280><c> a</c><00:05:47.310><c> look</c>

00:05:47.570 --> 00:05:47.580 align:start position:0%
what does any do well let's take a look
 

00:05:47.580 --> 00:05:50.659 align:start position:0%
what does any do well let's take a look
if<00:05:47.849><c> we</c><00:05:48.090><c> just</c><00:05:48.240><c> go</c><00:05:48.509><c> into</c><00:05:48.870><c> this</c><00:05:49.320><c> header</c><00:05:49.680><c> file</c><00:05:49.949><c> then</c>

00:05:50.659 --> 00:05:50.669 align:start position:0%
if we just go into this header file then
 

00:05:50.669 --> 00:05:52.760 align:start position:0%
if we just go into this header file then
we<00:05:50.820><c> can</c><00:05:50.940><c> see</c><00:05:51.060><c> all</c><00:05:51.300><c> of</c><00:05:51.330><c> the</c><00:05:51.509><c> code</c><00:05:51.690><c> for</c><00:05:51.990><c> any</c><00:05:52.289><c> a</c><00:05:52.590><c> lot</c>

00:05:52.760 --> 00:05:52.770 align:start position:0%
we can see all of the code for any a lot
 

00:05:52.770 --> 00:05:54.800 align:start position:0%
we can see all of the code for any a lot
of<00:05:52.979><c> people</c><00:05:53.219><c> ask</c><00:05:53.430><c> me</c><00:05:53.669><c> how</c><00:05:53.880><c> does</c><00:05:53.940><c> this</c><00:05:54.240><c> work</c><00:05:54.539><c> how</c>

00:05:54.800 --> 00:05:54.810 align:start position:0%
of people ask me how does this work how
 

00:05:54.810 --> 00:05:57.020 align:start position:0%
of people ask me how does this work how
does<00:05:54.870><c> that</c><00:05:55.169><c> work</c><00:05:55.380><c> and</c><00:05:55.590><c> my</c><00:05:55.800><c> answer</c><00:05:56.219><c> is</c><00:05:56.250><c> just</c>

00:05:57.020 --> 00:05:57.030 align:start position:0%
does that work and my answer is just
 

00:05:57.030 --> 00:05:58.399 align:start position:0%
does that work and my answer is just
take<00:05:57.810><c> a</c><00:05:57.840><c> look</c>

00:05:58.399 --> 00:05:58.409 align:start position:0%
take a look
 

00:05:58.409 --> 00:06:00.649 align:start position:0%
take a look
STL<00:05:59.130><c> is</c><00:05:59.340><c> the</c><00:05:59.490><c> sanno</c><00:05:59.699><c> template</c><00:06:00.210><c> library</c><00:06:00.570><c> it's</c>

00:06:00.649 --> 00:06:00.659 align:start position:0%
STL is the sanno template library it's
 

00:06:00.659 --> 00:06:02.810 align:start position:0%
STL is the sanno template library it's
implemented<00:06:01.199><c> in</c><00:06:01.229><c> all</c><00:06:01.860><c> in</c><00:06:02.099><c> header</c><00:06:02.280><c> files</c><00:06:02.550><c> and</c>

00:06:02.810 --> 00:06:02.820 align:start position:0%
implemented in all in header files and
 

00:06:02.820 --> 00:06:04.550 align:start position:0%
implemented in all in header files and
you've<00:06:03.210><c> got</c><00:06:03.389><c> all</c><00:06:03.539><c> of</c><00:06:03.570><c> those</c><00:06:03.780><c> files</c><00:06:04.139><c> all</c><00:06:04.409><c> that</c>

00:06:04.550 --> 00:06:04.560 align:start position:0%
you've got all of those files all that
 

00:06:04.560 --> 00:06:05.959 align:start position:0%
you've got all of those files all that
source<00:06:04.800><c> code</c><00:06:04.979><c> on</c><00:06:05.130><c> your</c><00:06:05.250><c> computer</c><00:06:05.610><c> so</c><00:06:05.789><c> just</c>

00:06:05.959 --> 00:06:05.969 align:start position:0%
source code on your computer so just
 

00:06:05.969 --> 00:06:07.820 align:start position:0%
source code on your computer so just
open<00:06:06.509><c> them</c><00:06:06.630><c> up</c><00:06:06.750><c> and</c><00:06:06.990><c> try</c><00:06:07.229><c> and</c><00:06:07.259><c> read</c><00:06:07.500><c> it</c><00:06:07.620><c> I</c><00:06:07.710><c> know</c>

00:06:07.820 --> 00:06:07.830 align:start position:0%
open them up and try and read it I know
 

00:06:07.830 --> 00:06:09.439 align:start position:0%
open them up and try and read it I know
it<00:06:07.949><c> can</c><00:06:08.099><c> be</c><00:06:08.130><c> hard</c><00:06:08.219><c> sometimes</c><00:06:08.610><c> because</c><00:06:09.300><c> of</c><00:06:09.330><c> the</c>

00:06:09.439 --> 00:06:09.449 align:start position:0%
it can be hard sometimes because of the
 

00:06:09.449 --> 00:06:11.510 align:start position:0%
it can be hard sometimes because of the
way<00:06:09.539><c> that</c><00:06:09.659><c> is</c><00:06:09.780><c> written</c><00:06:09.990><c> but</c><00:06:10.740><c> just</c><00:06:11.009><c> take</c><00:06:11.370><c> it</c>

00:06:11.510 --> 00:06:11.520 align:start position:0%
way that is written but just take it
 

00:06:11.520 --> 00:06:13.070 align:start position:0%
way that is written but just take it
slowly<00:06:11.759><c> and</c><00:06:11.940><c> you'll</c><00:06:12.330><c> be</c><00:06:12.449><c> surprised</c><00:06:12.810><c> at</c><00:06:12.960><c> how</c>

00:06:13.070 --> 00:06:13.080 align:start position:0%
slowly and you'll be surprised at how
 

00:06:13.080 --> 00:06:14.870 align:start position:0%
slowly and you'll be surprised at how
much<00:06:13.229><c> you'll</c><00:06:13.440><c> actually</c><00:06:13.620><c> understand</c><00:06:14.430><c> so</c>

00:06:14.870 --> 00:06:14.880 align:start position:0%
much you'll actually understand so
 

00:06:14.880 --> 00:06:16.969 align:start position:0%
much you'll actually understand so
looking<00:06:15.150><c> at</c><00:06:15.330><c> this</c><00:06:15.509><c> header</c><00:06:15.719><c> file</c><00:06:15.960><c> we</c><00:06:16.530><c> can</c><00:06:16.680><c> start</c>

00:06:16.969 --> 00:06:16.979 align:start position:0%
looking at this header file we can start
 

00:06:16.979 --> 00:06:18.589 align:start position:0%
looking at this header file we can start
to<00:06:17.130><c> piece</c><00:06:17.340><c> together</c><00:06:17.490><c> how</c><00:06:18.060><c> this</c><00:06:18.360><c> actually</c>

00:06:18.589 --> 00:06:18.599 align:start position:0%
to piece together how this actually
 

00:06:18.599 --> 00:06:19.339 align:start position:0%
to piece together how this actually
works

00:06:19.339 --> 00:06:19.349 align:start position:0%
works
 

00:06:19.349 --> 00:06:21.589 align:start position:0%
works
we<00:06:19.560><c> know</c><00:06:19.710><c> that</c><00:06:19.979><c> storage</c><00:06:20.520><c> seems</c><00:06:21.210><c> to</c><00:06:21.360><c> be</c><00:06:21.479><c> the</c>

00:06:21.589 --> 00:06:21.599 align:start position:0%
we know that storage seems to be the
 

00:06:21.599 --> 00:06:23.779 align:start position:0%
we know that storage seems to be the
variable<00:06:21.930><c> that</c><00:06:22.139><c> stores</c><00:06:22.320><c> well</c><00:06:22.949><c> something</c><00:06:23.580><c> and</c>

00:06:23.779 --> 00:06:23.789 align:start position:0%
variable that stores well something and
 

00:06:23.789 --> 00:06:25.459 align:start position:0%
variable that stores well something and
you<00:06:23.909><c> can</c><00:06:24.030><c> see</c><00:06:24.210><c> that</c><00:06:24.389><c> what</c><00:06:24.599><c> it</c><00:06:24.719><c> is</c><00:06:24.750><c> is</c><00:06:24.870><c> actually</c>

00:06:25.459 --> 00:06:25.469 align:start position:0%
you can see that what it is is actually
 

00:06:25.469 --> 00:06:27.379 align:start position:0%
you can see that what it is is actually
a<00:06:25.500><c> union</c><00:06:26.159><c> let's</c><00:06:26.699><c> take</c><00:06:26.880><c> a</c><00:06:26.909><c> look</c><00:06:27.120><c> at</c><00:06:27.210><c> what</c>

00:06:27.379 --> 00:06:27.389 align:start position:0%
a union let's take a look at what
 

00:06:27.389 --> 00:06:29.570 align:start position:0%
a union let's take a look at what
storage<00:06:27.659><c> T</c><00:06:28.020><c> is</c><00:06:28.259><c> it's</c><00:06:28.409><c> a</c><00:06:28.500><c> struct</c><00:06:28.919><c> which</c><00:06:29.250><c> seems</c>

00:06:29.570 --> 00:06:29.580 align:start position:0%
storage T is it's a struct which seems
 

00:06:29.580 --> 00:06:32.000 align:start position:0%
storage T is it's a struct which seems
to<00:06:29.789><c> have</c><00:06:30.000><c> a</c><00:06:30.330><c> small</c><00:06:30.870><c> storage</c><00:06:31.139><c> of</c><00:06:31.409><c> big</c><00:06:31.589><c> storage</c>

00:06:32.000 --> 00:06:32.010 align:start position:0%
to have a small storage of big storage
 

00:06:32.010 --> 00:06:34.159 align:start position:0%
to have a small storage of big storage
an<00:06:32.339><c> aligned</c><00:06:32.909><c> Union</c><00:06:33.389><c> and</c><00:06:33.539><c> if</c><00:06:33.630><c> we</c><00:06:33.750><c> actually</c><00:06:33.870><c> take</c>

00:06:34.159 --> 00:06:34.169 align:start position:0%
an aligned Union and if we actually take
 

00:06:34.169 --> 00:06:36.110 align:start position:0%
an aligned Union and if we actually take
a<00:06:34.229><c> look</c><00:06:34.409><c> at</c><00:06:34.560><c> what</c><00:06:34.740><c> big</c><00:06:34.979><c> storage</c><00:06:35.279><c> T</c><00:06:35.550><c> for</c><00:06:35.760><c> example</c>

00:06:36.110 --> 00:06:36.120 align:start position:0%
a look at what big storage T for example
 

00:06:36.120 --> 00:06:38.629 align:start position:0%
a look at what big storage T for example
is<00:06:36.240><c> it's</c><00:06:36.690><c> a</c><00:06:36.990><c> void</c><00:06:37.320><c> pointer</c><00:06:37.490><c> surrounded</c><00:06:38.490><c> by</c><00:06:38.610><c> a</c>

00:06:38.629 --> 00:06:38.639 align:start position:0%
is it's a void pointer surrounded by a
 

00:06:38.639 --> 00:06:41.060 align:start position:0%
is it's a void pointer surrounded by a
bunch<00:06:39.000><c> of</c><00:06:39.120><c> padding</c><00:06:39.540><c> and</c><00:06:39.690><c> small</c><00:06:40.350><c> storage</c><00:06:40.710><c> is</c>

00:06:41.060 --> 00:06:41.070 align:start position:0%
bunch of padding and small storage is
 

00:06:41.070 --> 00:06:43.790 align:start position:0%
bunch of padding and small storage is
actually<00:06:41.729><c> just</c><00:06:41.910><c> an</c><00:06:42.150><c> aligned</c><00:06:42.419><c> Union</c><00:06:42.930><c> T</c><00:06:43.290><c> which</c>

00:06:43.790 --> 00:06:43.800 align:start position:0%
actually just an aligned Union T which
 

00:06:43.800 --> 00:06:46.939 align:start position:0%
actually just an aligned Union T which
digging<00:06:44.280><c> in</c><00:06:44.460><c> even</c><00:06:44.940><c> deeper</c><00:06:44.970><c> we</c><00:06:45.870><c> realize</c><00:06:46.260><c> is</c><00:06:46.620><c> an</c>

00:06:46.939 --> 00:06:46.949 align:start position:0%
digging in even deeper we realize is an
 

00:06:46.949 --> 00:06:49.909 align:start position:0%
digging in even deeper we realize is an
aligned<00:06:47.669><c> union</c><00:06:48.000><c> of</c><00:06:48.150><c> all</c><00:06:48.540><c> of</c><00:06:48.600><c> the</c><00:06:48.840><c> types</c><00:06:49.139><c> so</c>

00:06:49.909 --> 00:06:49.919 align:start position:0%
aligned union of all of the types so
 

00:06:49.919 --> 00:06:52.280 align:start position:0%
aligned union of all of the types so
what<00:06:50.340><c> s</c><00:06:50.580><c> it</c><00:06:50.760><c> e</c><00:06:50.850><c> an</c><00:06:51.030><c> e</c><00:06:51.060><c> actually</c><00:06:51.660><c> does</c><00:06:51.930><c> and</c><00:06:52.229><c> I</c>

00:06:52.280 --> 00:06:52.290 align:start position:0%
what s it e an e actually does and I
 

00:06:52.290 --> 00:06:54.469 align:start position:0%
what s it e an e actually does and I
think<00:06:52.560><c> this</c><00:06:52.710><c> is</c><00:06:52.860><c> quite</c><00:06:53.040><c> clever</c><00:06:53.400><c> is</c><00:06:53.760><c> for</c><00:06:54.090><c> small</c>

00:06:54.469 --> 00:06:54.479 align:start position:0%
think this is quite clever is for small
 

00:06:54.479 --> 00:06:56.960 align:start position:0%
think this is quite clever is for small
types<00:06:54.930><c> it</c><00:06:55.590><c> just</c><00:06:55.889><c> stores</c><00:06:56.100><c> them</c><00:06:56.310><c> as</c><00:06:56.460><c> a</c><00:06:56.490><c> union</c>

00:06:56.960 --> 00:06:56.970 align:start position:0%
types it just stores them as a union
 

00:06:56.970 --> 00:06:58.790 align:start position:0%
types it just stores them as a union
which<00:06:57.120><c> means</c><00:06:57.330><c> that</c><00:06:57.510><c> for</c><00:06:57.690><c> small</c><00:06:58.050><c> types</c><00:06:58.410><c> it</c>

00:06:58.790 --> 00:06:58.800 align:start position:0%
which means that for small types it
 

00:06:58.800 --> 00:07:00.590 align:start position:0%
which means that for small types it
works<00:06:59.100><c> in</c><00:06:59.280><c> exactly</c><00:06:59.430><c> the</c><00:06:59.850><c> same</c><00:06:59.880><c> way</c><00:07:00.300><c> as</c><00:07:00.540><c> a</c>

00:07:00.590 --> 00:07:00.600 align:start position:0%
works in exactly the same way as a
 

00:07:00.600 --> 00:07:03.050 align:start position:0%
works in exactly the same way as a
variant<00:07:01.290><c> however</c><00:07:01.710><c> if</c><00:07:01.949><c> you</c><00:07:02.130><c> have</c><00:07:02.310><c> a</c><00:07:02.340><c> large</c><00:07:02.699><c> type</c>

00:07:03.050 --> 00:07:03.060 align:start position:0%
variant however if you have a large type
 

00:07:03.060 --> 00:07:04.969 align:start position:0%
variant however if you have a large type
that's<00:07:03.840><c> where</c><00:07:04.139><c> it</c><00:07:04.229><c> actually</c><00:07:04.380><c> takes</c><00:07:04.710><c> you</c><00:07:04.830><c> into</c>

00:07:04.969 --> 00:07:04.979 align:start position:0%
that's where it actually takes you into
 

00:07:04.979 --> 00:07:07.370 align:start position:0%
that's where it actually takes you into
that<00:07:05.160><c> void</c><00:07:05.460><c> pointer</c><00:07:05.910><c> big</c><00:07:06.210><c> storage</c><00:07:06.600><c> and</c><00:07:06.960><c> in</c>

00:07:07.370 --> 00:07:07.380 align:start position:0%
that void pointer big storage and in
 

00:07:07.380 --> 00:07:09.260 align:start position:0%
that void pointer big storage and in
that<00:07:07.530><c> case</c><00:07:07.770><c> it</c><00:07:07.979><c> will</c><00:07:08.130><c> actually</c><00:07:08.340><c> dynamically</c>

00:07:09.260 --> 00:07:09.270 align:start position:0%
that case it will actually dynamically
 

00:07:09.270 --> 00:07:11.990 align:start position:0%
that case it will actually dynamically
allocate<00:07:09.750><c> memory</c><00:07:09.990><c> now</c><00:07:11.000><c> dynamically</c>

00:07:11.990 --> 00:07:12.000 align:start position:0%
allocate memory now dynamically
 

00:07:12.000 --> 00:07:13.850 align:start position:0%
allocate memory now dynamically
allocating<00:07:12.479><c> memory</c><00:07:12.660><c> is</c><00:07:13.110><c> not</c><00:07:13.560><c> good</c><00:07:13.830><c> for</c>

00:07:13.850 --> 00:07:13.860 align:start position:0%
allocating memory is not good for
 

00:07:13.860 --> 00:07:15.890 align:start position:0%
allocating memory is not good for
performance<00:07:14.550><c> so</c><00:07:14.850><c> to</c><00:07:14.910><c> sum</c><00:07:15.150><c> up</c><00:07:15.180><c> how</c><00:07:15.419><c> this</c><00:07:15.630><c> works</c>

00:07:15.890 --> 00:07:15.900 align:start position:0%
performance so to sum up how this works
 

00:07:15.900 --> 00:07:18.170 align:start position:0%
performance so to sum up how this works
if<00:07:16.199><c> you're</c><00:07:16.320><c> using</c><00:07:16.470><c> a</c><00:07:16.650><c> variant</c><00:07:17.160><c> or</c><00:07:17.340><c> SUV</c><00:07:17.970><c> Eddy</c>

00:07:18.170 --> 00:07:18.180 align:start position:0%
if you're using a variant or SUV Eddy
 

00:07:18.180 --> 00:07:20.420 align:start position:0%
if you're using a variant or SUV Eddy
with<00:07:18.570><c> small</c><00:07:18.870><c> types</c><00:07:19.169><c> like</c><00:07:19.440><c> integers</c><00:07:19.830><c> floats</c>

00:07:20.420 --> 00:07:20.430 align:start position:0%
with small types like integers floats
 

00:07:20.430 --> 00:07:23.120 align:start position:0%
with small types like integers floats
you<00:07:20.729><c> know</c><00:07:20.850><c> maybe</c><00:07:21.060><c> like</c><00:07:21.210><c> a</c><00:07:21.360><c> vector</c><00:07:22.169><c> for</c><00:07:22.470><c> class</c>

00:07:23.120 --> 00:07:23.130 align:start position:0%
you know maybe like a vector for class
 

00:07:23.130 --> 00:07:24.800 align:start position:0%
you know maybe like a vector for class
or<00:07:23.460><c> something</c><00:07:23.699><c> like</c><00:07:23.970><c> that</c><00:07:24.210><c> like</c><00:07:24.389><c> in</c><00:07:24.539><c> a</c><00:07:24.600><c> math</c>

00:07:24.800 --> 00:07:24.810 align:start position:0%
or something like that like in a math
 

00:07:24.810 --> 00:07:27.020 align:start position:0%
or something like that like in a math
library<00:07:25.289><c> you'll</c><00:07:25.860><c> be</c><00:07:26.039><c> flying</c><00:07:26.460><c> I</c><00:07:26.729><c> mean</c><00:07:26.880><c> they're</c>

00:07:27.020 --> 00:07:27.030 align:start position:0%
library you'll be flying I mean they're
 

00:07:27.030 --> 00:07:29.090 align:start position:0%
library you'll be flying I mean they're
gonna<00:07:27.150><c> work</c><00:07:27.389><c> in</c><00:07:27.600><c> exactly</c><00:07:28.110><c> the</c><00:07:28.320><c> same</c><00:07:28.350><c> way</c><00:07:28.830><c> and</c>

00:07:29.090 --> 00:07:29.100 align:start position:0%
gonna work in exactly the same way and
 

00:07:29.100 --> 00:07:30.620 align:start position:0%
gonna work in exactly the same way and
you<00:07:29.370><c> can</c><00:07:29.520><c> see</c><00:07:29.550><c> by</c><00:07:29.880><c> looking</c><00:07:30.120><c> here</c><00:07:30.150><c> at</c><00:07:30.479><c> the</c>

00:07:30.620 --> 00:07:30.630 align:start position:0%
you can see by looking here at the
 

00:07:30.630 --> 00:07:32.719 align:start position:0%
you can see by looking here at the
source<00:07:30.900><c> code</c><00:07:31.260><c> that</c><00:07:31.470><c> that</c><00:07:31.710><c> small</c><00:07:32.130><c> storage</c>

00:07:32.719 --> 00:07:32.729 align:start position:0%
source code that that small storage
 

00:07:32.729 --> 00:07:34.610 align:start position:0%
source code that that small storage
which<00:07:33.030><c> is</c><00:07:33.180><c> all</c><00:07:33.300><c> the</c><00:07:33.389><c> way</c><00:07:33.479><c> up</c><00:07:33.510><c> here</c><00:07:33.660><c> happens</c><00:07:34.560><c> to</c>

00:07:34.610 --> 00:07:34.620 align:start position:0%
which is all the way up here happens to
 

00:07:34.620 --> 00:07:36.650 align:start position:0%
which is all the way up here happens to
be<00:07:34.710><c> if</c><00:07:34.979><c> we</c><00:07:35.130><c> take</c><00:07:35.280><c> a</c><00:07:35.310><c> look</c><00:07:35.460><c> at</c><00:07:35.580><c> this</c><00:07:35.669><c> align</c><00:07:36.090><c> Union</c>

00:07:36.650 --> 00:07:36.660 align:start position:0%
be if we take a look at this align Union
 

00:07:36.660 --> 00:07:38.689 align:start position:0%
be if we take a look at this align Union
and<00:07:36.810><c> specifically</c><00:07:37.320><c> there's</c><00:07:37.590><c> any</c><00:07:37.800><c> small</c><00:07:38.010><c> space</c>

00:07:38.689 --> 00:07:38.699 align:start position:0%
and specifically there's any small space
 

00:07:38.699 --> 00:07:40.730 align:start position:0%
and specifically there's any small space
size<00:07:39.030><c> variable</c><00:07:39.449><c> you</c><00:07:40.020><c> can</c><00:07:40.200><c> see</c><00:07:40.380><c> that</c><00:07:40.590><c> it</c><00:07:40.710><c> is</c>

00:07:40.730 --> 00:07:40.740 align:start position:0%
size variable you can see that it is
 

00:07:40.740 --> 00:07:43.310 align:start position:0%
size variable you can see that it is
around<00:07:41.310><c> 32</c><00:07:42.030><c> bytes</c><00:07:42.389><c> now</c><00:07:42.750><c> this</c><00:07:42.900><c> may</c><00:07:43.260><c> be</c>

00:07:43.310 --> 00:07:43.320 align:start position:0%
around 32 bytes now this may be
 

00:07:43.320 --> 00:07:45.469 align:start position:0%
around 32 bytes now this may be
implementation<00:07:44.280><c> specific</c><00:07:44.550><c> obviously</c><00:07:45.389><c> I'm</c>

00:07:45.469 --> 00:07:45.479 align:start position:0%
implementation specific obviously I'm
 

00:07:45.479 --> 00:07:48.620 align:start position:0%
implementation specific obviously I'm
using<00:07:45.539><c> visual</c><00:07:45.960><c> studio</c><00:07:46.050><c> with</c><00:07:46.470><c> MSB</c><00:07:46.950><c> C</c><00:07:47.190><c> it's</c><00:07:48.120><c> 32</c>

00:07:48.620 --> 00:07:48.630 align:start position:0%
using visual studio with MSB C it's 32
 

00:07:48.630 --> 00:07:50.779 align:start position:0%
using visual studio with MSB C it's 32
bytes<00:07:48.870><c> so</c><00:07:49.320><c> if</c><00:07:49.560><c> you</c><00:07:49.740><c> have</c><00:07:49.919><c> more</c><00:07:50.190><c> storage</c><00:07:50.520><c> than</c>

00:07:50.779 --> 00:07:50.789 align:start position:0%
bytes so if you have more storage than
 

00:07:50.789 --> 00:07:53.029 align:start position:0%
bytes so if you have more storage than
that<00:07:51.030><c> at</c><00:07:51.330><c> that</c><00:07:51.690><c> point</c><00:07:52.050><c> SC</c><00:07:52.440><c> DNA</c><00:07:52.740><c> will</c>

00:07:53.029 --> 00:07:53.039 align:start position:0%
that at that point SC DNA will
 

00:07:53.039 --> 00:07:55.520 align:start position:0%
that at that point SC DNA will
dynamically<00:07:53.610><c> allocate</c><00:07:54.180><c> however</c><00:07:54.570><c> SCV</c><00:07:55.080><c> variant</c>

00:07:55.520 --> 00:07:55.530 align:start position:0%
dynamically allocate however SCV variant
 

00:07:55.530 --> 00:07:57.800 align:start position:0%
dynamically allocate however SCV variant
will<00:07:55.889><c> not</c><00:07:56.130><c> so</c><00:07:56.789><c> in</c><00:07:56.910><c> other</c><00:07:57.000><c> words</c><00:07:57.240><c> apart</c><00:07:57.660><c> from</c>

00:07:57.800 --> 00:07:57.810 align:start position:0%
will not so in other words apart from
 

00:07:57.810 --> 00:08:00.080 align:start position:0%
will not so in other words apart from
being<00:07:58.020><c> more</c><00:07:58.440><c> typesafe</c><00:07:59.070><c> and</c><00:07:59.400><c> a</c><00:07:59.760><c> little</c><00:08:00.000><c> bit</c>

00:08:00.080 --> 00:08:00.090 align:start position:0%
being more typesafe and a little bit
 

00:08:00.090 --> 00:08:01.659 align:start position:0%
being more typesafe and a little bit
more<00:08:00.240><c> restrictive</c><00:08:00.510><c> which</c><00:08:00.900><c> is</c><00:08:01.080><c> a</c><00:08:01.110><c> good</c><00:08:01.500><c> thing</c>

00:08:01.659 --> 00:08:01.669 align:start position:0%
more restrictive which is a good thing
 

00:08:01.669 --> 00:08:04.129 align:start position:0%
more restrictive which is a good thing
every<00:08:02.669><c> variant</c><00:08:03.030><c> is</c><00:08:03.180><c> also</c><00:08:03.450><c> going</c><00:08:03.599><c> to</c><00:08:03.690><c> perform</c>

00:08:04.129 --> 00:08:04.139 align:start position:0%
every variant is also going to perform
 

00:08:04.139 --> 00:08:06.260 align:start position:0%
every variant is also going to perform
faster<00:08:04.680><c> if</c><00:08:04.860><c> you</c><00:08:05.039><c> happen</c><00:08:05.460><c> to</c><00:08:05.490><c> deal</c><00:08:05.729><c> with</c><00:08:05.940><c> larger</c>

00:08:06.260 --> 00:08:06.270 align:start position:0%
faster if you happen to deal with larger
 

00:08:06.270 --> 00:08:08.420 align:start position:0%
faster if you happen to deal with larger
data<00:08:06.510><c> or</c><00:08:06.990><c> you</c><00:08:07.169><c> want</c><00:08:07.320><c> to</c><00:08:07.380><c> avoid</c><00:08:07.650><c> dynamic</c><00:08:08.220><c> memory</c>

00:08:08.420 --> 00:08:08.430 align:start position:0%
data or you want to avoid dynamic memory
 

00:08:08.430 --> 00:08:10.189 align:start position:0%
data or you want to avoid dynamic memory
allocation<00:08:08.610><c> another</c><00:08:09.570><c> tip</c><00:08:09.840><c> that</c><00:08:09.870><c> I</c><00:08:10.020><c> can</c><00:08:10.050><c> give</c>

00:08:10.189 --> 00:08:10.199 align:start position:0%
allocation another tip that I can give
 

00:08:10.199 --> 00:08:12.260 align:start position:0%
allocation another tip that I can give
you<00:08:10.470><c> for</c><00:08:10.680><c> faster</c><00:08:11.130><c> performance</c><00:08:11.280><c> is</c><00:08:11.880><c> to</c><00:08:12.090><c> make</c>

00:08:12.260 --> 00:08:12.270 align:start position:0%
you for faster performance is to make
 

00:08:12.270 --> 00:08:13.909 align:start position:0%
you for faster performance is to make
sure<00:08:12.300><c> that</c><00:08:12.419><c> you</c><00:08:12.570><c> don't</c><00:08:12.660><c> copy</c><00:08:13.020><c> data</c><00:08:13.440><c> so</c><00:08:13.800><c> you</c><00:08:13.860><c> can</c>

00:08:13.909 --> 00:08:13.919 align:start position:0%
sure that you don't copy data so you can
 

00:08:13.919 --> 00:08:15.500 align:start position:0%
sure that you don't copy data so you can
see<00:08:14.039><c> that</c><00:08:14.220><c> over</c><00:08:14.460><c> here</c><00:08:14.580><c> with</c><00:08:14.820><c> string</c><00:08:15.120><c> I</c><00:08:15.270><c> am</c><00:08:15.389><c> of</c>

00:08:15.500 --> 00:08:15.510 align:start position:0%
see that over here with string I am of
 

00:08:15.510 --> 00:08:17.750 align:start position:0%
see that over here with string I am of
course<00:08:15.539><c> copying</c><00:08:16.169><c> it</c><00:08:16.320><c> if</c><00:08:16.530><c> we</c><00:08:16.979><c> go</c><00:08:17.220><c> back</c><00:08:17.430><c> to</c><00:08:17.729><c> our</c>

00:08:17.750 --> 00:08:17.760 align:start position:0%
course copying it if we go back to our
 

00:08:17.760 --> 00:08:19.909 align:start position:0%
course copying it if we go back to our
sed<00:08:18.539><c> any</c><00:08:18.750><c> way</c><00:08:18.990><c> of</c><00:08:19.139><c> doing</c><00:08:19.470><c> things</c>

00:08:19.909 --> 00:08:19.919 align:start position:0%
sed any way of doing things
 

00:08:19.919 --> 00:08:21.140 align:start position:0%
sed any way of doing things
you<00:08:20.039><c> need</c><00:08:20.250><c> to</c><00:08:20.370><c> make</c><00:08:20.550><c> sure</c><00:08:20.580><c> that</c><00:08:20.789><c> you</c><00:08:21.000><c> return</c>

00:08:21.140 --> 00:08:21.150 align:start position:0%
you need to make sure that you return
 

00:08:21.150 --> 00:08:23.180 align:start position:0%
you need to make sure that you return
this<00:08:21.539><c> by</c><00:08:21.720><c> reference</c><00:08:22.349><c> and</c><00:08:22.470><c> if</c><00:08:22.650><c> you</c><00:08:22.830><c> do</c><00:08:23.010><c> that</c>

00:08:23.180 --> 00:08:23.190 align:start position:0%
this by reference and if you do that
 

00:08:23.190 --> 00:08:25.219 align:start position:0%
this by reference and if you do that
you'll<00:08:23.460><c> see</c><00:08:23.520><c> it</c><00:08:23.729><c> doesn't</c><00:08:23.880><c> work</c><00:08:24.120><c> natively</c><00:08:24.750><c> like</c>

00:08:25.219 --> 00:08:25.229 align:start position:0%
you'll see it doesn't work natively like
 

00:08:25.229 --> 00:08:26.750 align:start position:0%
you'll see it doesn't work natively like
this<00:08:25.560><c> so</c><00:08:25.889><c> this</c><00:08:26.010><c> is</c><00:08:26.070><c> something</c><00:08:26.520><c> that</c><00:08:26.550><c> actually</c>

00:08:26.750 --> 00:08:26.760 align:start position:0%
this so this is something that actually
 

00:08:26.760 --> 00:08:29.270 align:start position:0%
this so this is something that actually
would<00:08:27.210><c> have</c><00:08:27.360><c> worked</c><00:08:27.570><c> with</c><00:08:27.840><c> SVG</c><00:08:28.380><c> yet</c><00:08:28.620><c> with</c><00:08:29.070><c> any</c>

00:08:29.270 --> 00:08:29.280 align:start position:0%
would have worked with SVG yet with any
 

00:08:29.280 --> 00:08:30.920 align:start position:0%
would have worked with SVG yet with any
cost<00:08:29.550><c> it</c><00:08:29.760><c> doesn't</c><00:08:30.240><c> make</c><00:08:30.449><c> sure</c><00:08:30.479><c> that</c><00:08:30.780><c> you</c>

00:08:30.920 --> 00:08:30.930 align:start position:0%
cost it doesn't make sure that you
 

00:08:30.930 --> 00:08:32.959 align:start position:0%
cost it doesn't make sure that you
actually<00:08:31.080><c> stick</c><00:08:31.710><c> the</c><00:08:31.830><c> reference</c><00:08:32.279><c> into</c><00:08:32.729><c> the</c>

00:08:32.959 --> 00:08:32.969 align:start position:0%
actually stick the reference into the
 

00:08:32.969 --> 00:08:35.240 align:start position:0%
actually stick the reference into the
template<00:08:33.659><c> argument</c><00:08:34.169><c> here</c><00:08:34.469><c> if</c><00:08:34.620><c> you</c><00:08:35.039><c> punt</c>

00:08:35.240 --> 00:08:35.250 align:start position:0%
template argument here if you punt
 

00:08:35.250 --> 00:08:37.339 align:start position:0%
template argument here if you punt
return<00:08:35.640><c> by</c><00:08:35.760><c> reference</c><00:08:36.209><c> and</c><00:08:36.330><c> that</c><00:08:36.779><c> will</c><00:08:37.229><c> of</c>

00:08:37.339 --> 00:08:37.349 align:start position:0%
return by reference and that will of
 

00:08:37.349 --> 00:08:38.930 align:start position:0%
return by reference and that will of
course<00:08:37.529><c> make</c><00:08:37.860><c> sure</c><00:08:37.919><c> that</c><00:08:38.339><c> everything</c><00:08:38.789><c> is</c>

00:08:38.930 --> 00:08:38.940 align:start position:0%
course make sure that everything is
 

00:08:38.940 --> 00:08:41.180 align:start position:0%
course make sure that everything is
nicely<00:08:39.180><c> optimized</c><00:08:39.900><c> and</c><00:08:40.349><c> you</c><00:08:40.560><c> can</c><00:08:40.709><c> see</c><00:08:40.890><c> that</c><00:08:41.039><c> in</c>

00:08:41.180 --> 00:08:41.190 align:start position:0%
nicely optimized and you can see that in
 

00:08:41.190 --> 00:08:43.310 align:start position:0%
nicely optimized and you can see that in
this<00:08:41.430><c> actual</c><00:08:42.000><c> case</c><00:08:42.240><c> obviously</c><00:08:42.690><c> make</c><00:08:43.140><c> sure</c>

00:08:43.310 --> 00:08:43.320 align:start position:0%
this actual case obviously make sure
 

00:08:43.320 --> 00:08:45.920 align:start position:0%
this actual case obviously make sure
that<00:08:43.469><c> we</c><00:08:43.589><c> actually</c><00:08:44.099><c> use</c><00:08:44.700><c> sed</c><00:08:45.300><c> string</c><00:08:45.630><c> in</c><00:08:45.839><c> our</c>

00:08:45.920 --> 00:08:45.930 align:start position:0%
that we actually use sed string in our
 

00:08:45.930 --> 00:08:47.449 align:start position:0%
that we actually use sed string in our
control<00:08:46.380><c> point</c><00:08:46.500><c> in</c><00:08:46.740><c> this</c><00:08:46.860><c> case</c><00:08:47.070><c> we</c><00:08:47.310><c> won't</c>

00:08:47.449 --> 00:08:47.459 align:start position:0%
control point in this case we won't
 

00:08:47.459 --> 00:08:48.440 align:start position:0%
control point in this case we won't
actually<00:08:47.670><c> get</c><00:08:47.940><c> any</c><00:08:48.060><c> memory</c>

00:08:48.440 --> 00:08:48.450 align:start position:0%
actually get any memory
 

00:08:48.450 --> 00:08:50.450 align:start position:0%
actually get any memory
allocations<00:08:49.050><c> apart</c><00:08:49.410><c> from</c><00:08:49.530><c> the</c><00:08:49.680><c> one</c><00:08:49.860><c> that</c><00:08:50.340><c> will</c>

00:08:50.450 --> 00:08:50.460 align:start position:0%
allocations apart from the one that will
 

00:08:50.460 --> 00:08:52.280 align:start position:0%
allocations apart from the one that will
probably<00:08:50.610><c> come</c><00:08:50.970><c> up</c><00:08:51.000><c> from</c><00:08:51.270><c> string</c><00:08:51.630><c> and</c><00:08:51.900><c> it's</c>

00:08:52.280 --> 00:08:52.290 align:start position:0%
probably come up from string and it's
 

00:08:52.290 --> 00:08:53.990 align:start position:0%
probably come up from string and it's
actually<00:08:52.590><c> very</c><00:08:52.680><c> easy</c><00:08:52.800><c> to</c><00:08:53.040><c> test</c><00:08:53.340><c> this</c><00:08:53.550><c> you</c><00:08:53.790><c> can</c>

00:08:53.990 --> 00:08:54.000 align:start position:0%
actually very easy to test this you can
 

00:08:54.000 --> 00:08:56.210 align:start position:0%
actually very easy to test this you can
just<00:08:54.210><c> replace</c><00:08:54.450><c> operator</c><00:08:55.050><c> new</c><00:08:55.320><c> with</c><00:08:55.830><c> one</c><00:08:56.070><c> of</c>

00:08:56.210 --> 00:08:56.220 align:start position:0%
just replace operator new with one of
 

00:08:56.220 --> 00:08:58.520 align:start position:0%
just replace operator new with one of
your<00:08:56.340><c> own</c><00:08:56.400><c> by</c><00:08:56.880><c> writing</c><00:08:57.090><c> some</c><00:08:57.510><c> simple</c><00:08:58.260><c> code</c>

00:08:58.520 --> 00:08:58.530 align:start position:0%
your own by writing some simple code
 

00:08:58.530 --> 00:09:01.970 align:start position:0%
your own by writing some simple code
like<00:08:59.010><c> this</c><00:08:59.460><c> this</c><00:09:00.090><c> is</c><00:09:00.270><c> not</c><00:09:00.510><c> a</c><00:09:00.720><c> complete</c><00:09:01.560><c> good</c>

00:09:01.970 --> 00:09:01.980 align:start position:0%
like this this is not a complete good
 

00:09:01.980 --> 00:09:04.820 align:start position:0%
like this this is not a complete good
implementation<00:09:02.400><c> of</c><00:09:03.090><c> the</c><00:09:03.630><c> new</c><00:09:03.990><c> operator</c><00:09:04.470><c> so</c>

00:09:04.820 --> 00:09:04.830 align:start position:0%
implementation of the new operator so
 

00:09:04.830 --> 00:09:06.950 align:start position:0%
implementation of the new operator so
don't<00:09:05.730><c> use</c><00:09:06.030><c> this</c><00:09:06.150><c> in</c><00:09:06.300><c> any</c><00:09:06.450><c> production</c><00:09:06.600><c> code</c>

00:09:06.950 --> 00:09:06.960 align:start position:0%
don't use this in any production code
 

00:09:06.960 --> 00:09:08.180 align:start position:0%
don't use this in any production code
obviously<00:09:07.080><c> but</c><00:09:07.470><c> if</c><00:09:07.590><c> we</c><00:09:07.710><c> stick</c><00:09:07.890><c> a</c><00:09:07.950><c> breakpoint</c>

00:09:08.180 --> 00:09:08.190 align:start position:0%
obviously but if we stick a breakpoint
 

00:09:08.190 --> 00:09:10.160 align:start position:0%
obviously but if we stick a breakpoint
in<00:09:08.460><c> here</c><00:09:08.700><c> then</c><00:09:08.880><c> we'll</c><00:09:09.210><c> now</c><00:09:09.450><c> be</c><00:09:09.660><c> aware</c><00:09:09.750><c> of</c><00:09:09.930><c> all</c>

00:09:10.160 --> 00:09:10.170 align:start position:0%
in here then we'll now be aware of all
 

00:09:10.170 --> 00:09:12.470 align:start position:0%
in here then we'll now be aware of all
memory<00:09:10.500><c> allocations</c><00:09:11.130><c> and</c><00:09:11.340><c> if</c><00:09:11.700><c> I</c><00:09:11.820><c> hit</c><00:09:12.000><c> f5</c><00:09:12.420><c> to</c>

00:09:12.470 --> 00:09:12.480 align:start position:0%
memory allocations and if I hit f5 to
 

00:09:12.480 --> 00:09:14.510 align:start position:0%
memory allocations and if I hit f5 to
run<00:09:12.840><c> this</c><00:09:13.020><c> program</c><00:09:13.260><c> you'll</c><00:09:13.890><c> see</c><00:09:13.980><c> that</c><00:09:14.220><c> we</c><00:09:14.310><c> do</c>

00:09:14.510 --> 00:09:14.520 align:start position:0%
run this program you'll see that we do
 

00:09:14.520 --> 00:09:16.220 align:start position:0%
run this program you'll see that we do
get<00:09:14.700><c> a</c><00:09:14.760><c> memory</c><00:09:15.180><c> allocation</c><00:09:15.690><c> but</c><00:09:15.840><c> if</c><00:09:15.930><c> we</c><00:09:16.020><c> take</c><00:09:16.170><c> a</c>

00:09:16.220 --> 00:09:16.230 align:start position:0%
get a memory allocation but if we take a
 

00:09:16.230 --> 00:09:17.540 align:start position:0%
get a memory allocation but if we take a
look<00:09:16.440><c> at</c><00:09:16.500><c> where</c><00:09:16.650><c> it</c><00:09:16.770><c> comes</c><00:09:16.980><c> from</c><00:09:17.070><c> it</c><00:09:17.430><c> actually</c>

00:09:17.540 --> 00:09:17.550 align:start position:0%
look at where it comes from it actually
 

00:09:17.550 --> 00:09:20.060 align:start position:0%
look at where it comes from it actually
comes<00:09:18.030><c> from</c><00:09:18.180><c> a</c><00:09:18.600><c> city</c><00:09:18.900><c> string</c><00:09:19.410><c> so</c><00:09:19.770><c> you</c><00:09:19.830><c> can</c><00:09:19.950><c> see</c>

00:09:20.060 --> 00:09:20.070 align:start position:0%
comes from a city string so you can see
 

00:09:20.070 --> 00:09:21.470 align:start position:0%
comes from a city string so you can see
over<00:09:20.250><c> here</c><00:09:20.430><c> if</c><00:09:20.520><c> I</c><00:09:20.580><c> make</c><00:09:20.730><c> the</c><00:09:20.880><c> call</c><00:09:21.060><c> stack</c><00:09:21.330><c> a</c>

00:09:21.470 --> 00:09:21.480 align:start position:0%
over here if I make the call stack a
 

00:09:21.480 --> 00:09:22.400 align:start position:0%
over here if I make the call stack a
little<00:09:21.840><c> bit</c><00:09:21.990><c> bigger</c>

00:09:22.400 --> 00:09:22.410 align:start position:0%
little bit bigger
 

00:09:22.410 --> 00:09:25.340 align:start position:0%
little bit bigger
we<00:09:22.710><c> have</c><00:09:22.890><c> SCV</c><00:09:23.520><c> basic</c><00:09:24.030><c> string</c><00:09:24.480><c> which</c><00:09:24.960><c> then</c><00:09:25.140><c> goes</c>

00:09:25.340 --> 00:09:25.350 align:start position:0%
we have SCV basic string which then goes
 

00:09:25.350 --> 00:09:27.290 align:start position:0%
we have SCV basic string which then goes
into<00:09:25.650><c> the</c><00:09:25.920><c> allocator</c><00:09:26.430><c> and</c><00:09:26.700><c> if</c><00:09:26.790><c> I</c><00:09:26.850><c> go</c><00:09:26.970><c> back</c><00:09:27.000><c> to</c>

00:09:27.290 --> 00:09:27.300 align:start position:0%
into the allocator and if I go back to
 

00:09:27.300 --> 00:09:29.900 align:start position:0%
into the allocator and if I go back to
main<00:09:27.600><c> and</c><00:09:27.630><c> I</c><00:09:28.020><c> just</c><00:09:28.260><c> step</c><00:09:28.740><c> through</c><00:09:28.770><c> that</c><00:09:29.400><c> code</c><00:09:29.700><c> a</c>

00:09:29.900 --> 00:09:29.910 align:start position:0%
main and I just step through that code a
 

00:09:29.910 --> 00:09:31.520 align:start position:0%
main and I just step through that code a
little<00:09:30.150><c> bit</c><00:09:30.270><c> so</c><00:09:30.420><c> we'll</c><00:09:30.510><c> go</c><00:09:30.690><c> back</c><00:09:30.930><c> up</c><00:09:30.960><c> here</c>

00:09:31.520 --> 00:09:31.530 align:start position:0%
little bit so we'll go back up here
 

00:09:31.530 --> 00:09:34.280 align:start position:0%
little bit so we'll go back up here
we'll<00:09:32.310><c> just</c><00:09:32.520><c> step</c><00:09:33.030><c> out</c><00:09:33.270><c> of</c><00:09:33.300><c> that</c><00:09:33.480><c> and</c><00:09:33.930><c> then</c>

00:09:34.280 --> 00:09:34.290 align:start position:0%
we'll just step out of that and then
 

00:09:34.290 --> 00:09:35.900 align:start position:0%
we'll just step out of that and then
just<00:09:34.470><c> go</c><00:09:34.590><c> to</c><00:09:34.620><c> the</c><00:09:34.770><c> next</c><00:09:34.920><c> line</c><00:09:35.160><c> if</c><00:09:35.550><c> we</c><00:09:35.730><c> take</c><00:09:35.880><c> a</c>

00:09:35.900 --> 00:09:35.910 align:start position:0%
just go to the next line if we take a
 

00:09:35.910 --> 00:09:37.370 align:start position:0%
just go to the next line if we take a
look<00:09:36.030><c> at</c><00:09:36.150><c> this</c><00:09:36.240><c> call</c><00:09:36.480><c> stack</c><00:09:36.750><c> a</c><00:09:36.900><c> little</c><00:09:37.260><c> bit</c>

00:09:37.370 --> 00:09:37.380 align:start position:0%
look at this call stack a little bit
 

00:09:37.380 --> 00:09:39.350 align:start position:0%
look at this call stack a little bit
more<00:09:37.560><c> closely</c><00:09:37.800><c> it</c><00:09:38.100><c> might</c><00:09:38.280><c> actually</c><00:09:38.460><c> seem</c><00:09:39.030><c> like</c>

00:09:39.350 --> 00:09:39.360 align:start position:0%
more closely it might actually seem like
 

00:09:39.360 --> 00:09:41.150 align:start position:0%
more closely it might actually seem like
any<00:09:39.660><c> is</c><00:09:40.020><c> the</c><00:09:40.170><c> one</c><00:09:40.320><c> doing</c><00:09:40.470><c> the</c><00:09:40.680><c> allocation</c>

00:09:41.150 --> 00:09:41.160 align:start position:0%
any is the one doing the allocation
 

00:09:41.160 --> 00:09:42.230 align:start position:0%
any is the one doing the allocation
because<00:09:41.220><c> you</c><00:09:41.430><c> can</c><00:09:41.520><c> see</c><00:09:41.670><c> it</c><00:09:41.760><c> comes</c><00:09:41.970><c> from</c><00:09:42.120><c> the</c>

00:09:42.230 --> 00:09:42.240 align:start position:0%
because you can see it comes from the
 

00:09:42.240 --> 00:09:44.840 align:start position:0%
because you can see it comes from the
assignment<00:09:42.660><c> operator</c><00:09:42.750><c> to</c><00:09:43.590><c> any</c><00:09:43.860><c> but</c><00:09:44.310><c> all</c><00:09:44.610><c> any</c>

00:09:44.840 --> 00:09:44.850 align:start position:0%
assignment operator to any but all any
 

00:09:44.850 --> 00:09:46.880 align:start position:0%
assignment operator to any but all any
is<00:09:45.030><c> actually</c><00:09:45.360><c> doing</c><00:09:45.690><c> is</c><00:09:45.840><c> doing</c><00:09:46.170><c> a</c><00:09:46.350><c> construct</c>

00:09:46.880 --> 00:09:46.890 align:start position:0%
is actually doing is doing a construct
 

00:09:46.890 --> 00:09:48.650 align:start position:0%
is actually doing is doing a construct
in<00:09:47.100><c> place</c><00:09:47.460><c> forwarding</c><00:09:48.000><c> all</c><00:09:48.120><c> those</c><00:09:48.270><c> arguments</c>

00:09:48.650 --> 00:09:48.660 align:start position:0%
in place forwarding all those arguments
 

00:09:48.660 --> 00:09:51.170 align:start position:0%
in place forwarding all those arguments
and<00:09:48.990><c> it's</c><00:09:49.620><c> the</c><00:09:49.770><c> basic</c><00:09:50.190><c> string</c><00:09:50.580><c> you</c><00:09:50.790><c> can</c><00:09:50.820><c> see</c>

00:09:51.170 --> 00:09:51.180 align:start position:0%
and it's the basic string you can see
 

00:09:51.180 --> 00:09:54.170 align:start position:0%
and it's the basic string you can see
that<00:09:51.540><c> is</c><00:09:51.690><c> allocating</c><00:09:52.320><c> once</c><00:09:52.680><c> again</c><00:09:53.130><c> so</c><00:09:53.430><c> f5</c><00:09:53.880><c> to</c>

00:09:54.170 --> 00:09:54.180 align:start position:0%
that is allocating once again so f5 to
 

00:09:54.180 --> 00:09:56.390 align:start position:0%
that is allocating once again so f5 to
continue<00:09:55.020><c> running</c><00:09:55.170><c> this</c><00:09:55.440><c> and</c><00:09:55.830><c> again</c><00:09:56.070><c> we</c><00:09:56.250><c> have</c>

00:09:56.390 --> 00:09:56.400 align:start position:0%
continue running this and again we have
 

00:09:56.400 --> 00:09:58.400 align:start position:0%
continue running this and again we have
a<00:09:56.430><c> basic</c><00:09:56.820><c> string</c><00:09:57.120><c> and</c><00:09:57.360><c> that</c><00:09:57.750><c> is</c><00:09:57.900><c> all</c><00:09:58.170><c> of</c><00:09:58.200><c> the</c>

00:09:58.400 --> 00:09:58.410 align:start position:0%
a basic string and that is all of the
 

00:09:58.410 --> 00:10:00.260 align:start position:0%
a basic string and that is all of the
allocations<00:09:59.010><c> from</c><00:09:59.250><c> this</c><00:09:59.430><c> program</c><00:09:59.880><c> so</c><00:10:00.090><c> in</c><00:10:00.180><c> that</c>

00:10:00.260 --> 00:10:00.270 align:start position:0%
allocations from this program so in that
 

00:10:00.270 --> 00:10:03.260 align:start position:0%
allocations from this program so in that
case<00:10:00.510><c> s-u-v</c><00:10:01.050><c> any</c><00:10:01.290><c> actually</c><00:10:02.160><c> did</c><00:10:02.430><c> not</c><00:10:02.610><c> allocate</c>

00:10:03.260 --> 00:10:03.270 align:start position:0%
case s-u-v any actually did not allocate
 

00:10:03.270 --> 00:10:05.630 align:start position:0%
case s-u-v any actually did not allocate
anything<00:10:03.690><c> if</c><00:10:04.080><c> however</c><00:10:04.410><c> we</c><00:10:04.740><c> were</c><00:10:04.950><c> to</c><00:10:05.160><c> have</c><00:10:05.370><c> some</c>

00:10:05.630 --> 00:10:05.640 align:start position:0%
anything if however we were to have some
 

00:10:05.640 --> 00:10:08.720 align:start position:0%
anything if however we were to have some
kind<00:10:05.910><c> of</c><00:10:06.030><c> class</c><00:10:06.390><c> that</c><00:10:07.110><c> would</c><00:10:07.500><c> have</c><00:10:07.770><c> more</c><00:10:08.340><c> than</c>

00:10:08.720 --> 00:10:08.730 align:start position:0%
kind of class that would have more than
 

00:10:08.730 --> 00:10:10.610 align:start position:0%
kind of class that would have more than
32<00:10:09.450><c> bytes</c><00:10:09.690><c> so</c><00:10:09.930><c> for</c><00:10:10.080><c> example</c><00:10:10.380><c> I'll</c><00:10:10.440><c> have</c><00:10:10.590><c> a</c>

00:10:10.610 --> 00:10:10.620 align:start position:0%
32 bytes so for example I'll have a
 

00:10:10.620 --> 00:10:14.630 align:start position:0%
32 bytes so for example I'll have a
struct<00:10:10.920><c> here</c><00:10:11.130><c> of</c><00:10:11.340><c> two</c><00:10:11.790><c> strings</c><00:10:12.350><c> s0</c><00:10:13.350><c> and</c><00:10:13.440><c> s1</c><00:10:13.920><c> if</c>

00:10:14.630 --> 00:10:14.640 align:start position:0%
struct here of two strings s0 and s1 if
 

00:10:14.640 --> 00:10:17.570 align:start position:0%
struct here of two strings s0 and s1 if
I<00:10:15.120><c> do</c><00:10:15.180><c> try</c><00:10:15.630><c> and</c><00:10:15.660><c> actually</c><00:10:16.290><c> set</c><00:10:16.560><c> this</c><00:10:16.800><c> up</c><00:10:17.070><c> over</c>

00:10:17.570 --> 00:10:17.580 align:start position:0%
I do try and actually set this up over
 

00:10:17.580 --> 00:10:19.970 align:start position:0%
I do try and actually set this up over
here<00:10:17.910><c> I'll</c><00:10:18.150><c> just</c><00:10:18.180><c> use</c><00:10:18.540><c> custom</c><00:10:18.960><c> class</c><00:10:19.200><c> and</c><00:10:19.470><c> we</c>

00:10:19.970 --> 00:10:19.980 align:start position:0%
here I'll just use custom class and we
 

00:10:19.980 --> 00:10:23.360 align:start position:0%
here I'll just use custom class and we
will<00:10:20.190><c> remove</c><00:10:20.610><c> this</c><00:10:21.390><c> anycast</c><00:10:22.080><c> and</c><00:10:22.560><c> if</c><00:10:22.680><c> I</c><00:10:22.770><c> had</c><00:10:22.920><c> f5</c>

00:10:23.360 --> 00:10:23.370 align:start position:0%
will remove this anycast and if I had f5
 

00:10:23.370 --> 00:10:25.610 align:start position:0%
will remove this anycast and if I had f5
if<00:10:23.820><c> I</c><00:10:24.030><c> skip</c><00:10:24.330><c> past</c><00:10:24.600><c> this</c><00:10:24.930><c> basic</c><00:10:25.380><c> string</c>

00:10:25.610 --> 00:10:25.620 align:start position:0%
if I skip past this basic string
 

00:10:25.620 --> 00:10:27.140 align:start position:0%
if I skip past this basic string
allocation<00:10:26.100><c> that</c><00:10:26.250><c> of</c><00:10:26.340><c> course</c><00:10:26.490><c> is</c><00:10:26.670><c> coming</c><00:10:27.000><c> from</c>

00:10:27.140 --> 00:10:27.150 align:start position:0%
allocation that of course is coming from
 

00:10:27.150 --> 00:10:28.940 align:start position:0%
allocation that of course is coming from
the<00:10:27.450><c> member</c><00:10:27.810><c> variables</c><00:10:28.200><c> of</c><00:10:28.350><c> that</c><00:10:28.380><c> custom</c>

00:10:28.940 --> 00:10:28.950 align:start position:0%
the member variables of that custom
 

00:10:28.950 --> 00:10:30.260 align:start position:0%
the member variables of that custom
class<00:10:29.280><c> then</c><00:10:29.640><c> you'll</c><00:10:29.730><c> see</c><00:10:29.910><c> that</c><00:10:30.030><c> what</c><00:10:30.120><c> we</c><00:10:30.210><c> have</c>

00:10:30.260 --> 00:10:30.270 align:start position:0%
class then you'll see that what we have
 

00:10:30.270 --> 00:10:32.780 align:start position:0%
class then you'll see that what we have
here<00:10:30.720><c> is</c><00:10:30.960><c> that</c><00:10:31.160><c> assignment</c><00:10:32.160><c> operator</c><00:10:32.550><c> and</c>

00:10:32.780 --> 00:10:32.790 align:start position:0%
here is that assignment operator and
 

00:10:32.790 --> 00:10:35.930 align:start position:0%
here is that assignment operator and
during<00:10:33.570><c> the</c><00:10:33.780><c> emplacement</c><00:10:34.260><c> you</c><00:10:35.160><c> can</c><00:10:35.340><c> see</c><00:10:35.610><c> that</c>

00:10:35.930 --> 00:10:35.940 align:start position:0%
during the emplacement you can see that
 

00:10:35.940 --> 00:10:39.020 align:start position:0%
during the emplacement you can see that
this<00:10:36.420><c> is</c><00:10:36.720><c> a</c><00:10:37.080><c> big</c><00:10:37.620><c> storage</c><00:10:38.010><c> operation</c><00:10:38.670><c> which</c><00:10:38.880><c> of</c>

00:10:39.020 --> 00:10:39.030 align:start position:0%
this is a big storage operation which of
 

00:10:39.030 --> 00:10:41.810 align:start position:0%
this is a big storage operation which of
course<00:10:39.060><c> does</c><00:10:39.570><c> actually</c><00:10:40.230><c> call</c><00:10:40.440><c> new</c><00:10:40.770><c> over</c><00:10:41.580><c> here</c>

00:10:41.810 --> 00:10:41.820 align:start position:0%
course does actually call new over here
 

00:10:41.820 --> 00:10:43.760 align:start position:0%
course does actually call new over here
so<00:10:42.090><c> just</c><00:10:42.120><c> be</c><00:10:42.420><c> aware</c><00:10:42.660><c> that</c><00:10:42.720><c> sed</c><00:10:43.260><c> NE</c><00:10:43.470><c> will</c>

00:10:43.760 --> 00:10:43.770 align:start position:0%
so just be aware that sed NE will
 

00:10:43.770 --> 00:10:45.740 align:start position:0%
so just be aware that sed NE will
allocate<00:10:44.100><c> if</c><00:10:44.460><c> it</c><00:10:44.610><c> needs</c><00:10:44.850><c> to</c><00:10:45.060><c> and</c><00:10:45.240><c> in</c><00:10:45.330><c> this</c><00:10:45.450><c> case</c>

00:10:45.740 --> 00:10:45.750 align:start position:0%
allocate if it needs to and in this case
 

00:10:45.750 --> 00:10:47.060 align:start position:0%
allocate if it needs to and in this case
if<00:10:45.990><c> the</c><00:10:46.110><c> data</c><00:10:46.320><c> that</c><00:10:46.440><c> you're</c><00:10:46.560><c> trying</c><00:10:46.740><c> to</c><00:10:46.800><c> store</c>

00:10:47.060 --> 00:10:47.070 align:start position:0%
if the data that you're trying to store
 

00:10:47.070 --> 00:10:49.610 align:start position:0%
if the data that you're trying to store
is<00:10:47.310><c> above</c><00:10:47.880><c> 32</c><00:10:48.270><c> bytes</c><00:10:48.690><c> you</c><00:10:49.050><c> can</c><00:10:49.260><c> see</c><00:10:49.410><c> that</c><00:10:49.530><c> it</c>

00:10:49.610 --> 00:10:49.620 align:start position:0%
is above 32 bytes you can see that it
 

00:10:49.620 --> 00:10:51.560 align:start position:0%
is above 32 bytes you can see that it
calls<00:10:49.830><c> new</c><00:10:50.010><c> and</c><00:10:50.250><c> causes</c><00:10:50.640><c> a</c><00:10:50.790><c> dynamic</c><00:10:51.270><c> memory</c>

00:10:51.560 --> 00:10:51.570 align:start position:0%
calls new and causes a dynamic memory
 

00:10:51.570 --> 00:10:53.480 align:start position:0%
calls new and causes a dynamic memory
allocation<00:10:51.750><c> so</c><00:10:52.530><c> back</c><00:10:52.710><c> to</c><00:10:52.740><c> the</c><00:10:52.920><c> question</c><00:10:53.010><c> of</c>

00:10:53.480 --> 00:10:53.490 align:start position:0%
allocation so back to the question of
 

00:10:53.490 --> 00:10:56.570 align:start position:0%
allocation so back to the question of
when<00:10:54.030><c> to</c><00:10:54.390><c> use</c><00:10:54.720><c> sed</c><00:10:55.440><c> any</c><00:10:55.680><c> when</c><00:10:56.160><c> should</c><00:10:56.370><c> it</c><00:10:56.400><c> be</c>

00:10:56.570 --> 00:10:56.580 align:start position:0%
when to use sed any when should it be
 

00:10:56.580 --> 00:10:59.330 align:start position:0%
when to use sed any when should it be
used<00:10:57.050><c> this</c><00:10:58.050><c> is</c><00:10:58.170><c> a</c><00:10:58.350><c> tricky</c><00:10:58.860><c> one</c><00:10:58.980><c> a</c><00:10:59.040><c> lot</c><00:10:59.310><c> of</c>

00:10:59.330 --> 00:10:59.340 align:start position:0%
used this is a tricky one a lot of
 

00:10:59.340 --> 00:11:01.560 align:start position:0%
used this is a tricky one a lot of
people<00:10:59.430><c> will</c><00:10:59.790><c> just</c><00:10:59.970><c> flat-out</c><00:11:00.270><c> tell</c><00:11:00.690><c> you</c><00:11:00.900><c> that</c>

00:11:01.560 --> 00:11:01.570 align:start position:0%
people will just flat-out tell you that
 

00:11:01.570 --> 00:11:04.080 align:start position:0%
people will just flat-out tell you that
it's<00:11:01.720><c> just</c><00:11:02.020><c> a</c><00:11:02.290><c> bit</c><00:11:02.590><c> useless</c><00:11:03.010><c> and</c><00:11:03.370><c> to</c><00:11:03.610><c> be</c><00:11:03.730><c> honest</c>

00:11:04.080 --> 00:11:04.090 align:start position:0%
it's just a bit useless and to be honest
 

00:11:04.090 --> 00:11:07.860 align:start position:0%
it's just a bit useless and to be honest
I'm<00:11:04.330><c> kind</c><00:11:04.360><c> of</c><00:11:04.780><c> inclined</c><00:11:05.200><c> to</c><00:11:05.470><c> agree</c><00:11:05.770><c> when</c><00:11:06.870><c> well</c>

00:11:07.860 --> 00:11:07.870 align:start position:0%
I'm kind of inclined to agree when well
 

00:11:07.870 --> 00:11:09.990 align:start position:0%
I'm kind of inclined to agree when well
look<00:11:08.020><c> what</c><00:11:08.260><c> is</c><00:11:08.380><c> a</c><00:11:08.410><c> good</c><00:11:08.620><c> use</c><00:11:08.860><c> case</c><00:11:09.130><c> for</c><00:11:09.160><c> SED</c>

00:11:09.990 --> 00:11:10.000 align:start position:0%
look what is a good use case for SED
 

00:11:10.000 --> 00:11:12.420 align:start position:0%
look what is a good use case for SED
Annie<00:11:10.240><c> if</c><00:11:10.600><c> you</c><00:11:10.840><c> want</c><00:11:11.020><c> to</c><00:11:11.110><c> store</c><00:11:11.440><c> multiple</c><00:11:11.800><c> data</c>

00:11:12.420 --> 00:11:12.430 align:start position:0%
Annie if you want to store multiple data
 

00:11:12.430 --> 00:11:15.450 align:start position:0%
Annie if you want to store multiple data
types<00:11:12.550><c> in</c><00:11:13.030><c> a</c><00:11:13.120><c> single</c><00:11:13.480><c> variable</c><00:11:13.930><c> use</c><00:11:14.740><c> SV</c>

00:11:15.450 --> 00:11:15.460 align:start position:0%
types in a single variable use SV
 

00:11:15.460 --> 00:11:17.400 align:start position:0%
types in a single variable use SV
variant<00:11:15.970><c> it's</c><00:11:16.210><c> basically</c><00:11:16.630><c> a</c><00:11:16.720><c> type</c><00:11:17.080><c> safe</c>

00:11:17.400 --> 00:11:17.410 align:start position:0%
variant it's basically a type safe
 

00:11:17.410 --> 00:11:19.650 align:start position:0%
variant it's basically a type safe
version<00:11:17.710><c> of</c><00:11:18.010><c> STD</c><00:11:18.640><c> any</c><00:11:18.850><c> meaning</c><00:11:19.420><c> that</c><00:11:19.540><c> you</c>

00:11:19.650 --> 00:11:19.660 align:start position:0%
version of STD any meaning that you
 

00:11:19.660 --> 00:11:21.750 align:start position:0%
version of STD any meaning that you
can't<00:11:19.960><c> set</c><00:11:20.230><c> it</c><00:11:20.350><c> to</c><00:11:20.530><c> whatever</c><00:11:20.830><c> type</c><00:11:21.250><c> you</c><00:11:21.460><c> please</c>

00:11:21.750 --> 00:11:21.760 align:start position:0%
can't set it to whatever type you please
 

00:11:21.760 --> 00:11:24.690 align:start position:0%
can't set it to whatever type you please
accidentally<00:11:22.630><c> and</c><00:11:22.900><c> also</c><00:11:23.830><c> it's</c><00:11:24.070><c> not</c><00:11:24.280><c> going</c><00:11:24.610><c> to</c>

00:11:24.690 --> 00:11:24.700 align:start position:0%
accidentally and also it's not going to
 

00:11:24.700 --> 00:11:26.520 align:start position:0%
accidentally and also it's not going to
dynamically<00:11:25.210><c> allocate</c><00:11:25.630><c> memory</c><00:11:25.810><c> so</c><00:11:26.230><c> it</c><00:11:26.380><c> will</c>

00:11:26.520 --> 00:11:26.530 align:start position:0%
dynamically allocate memory so it will
 

00:11:26.530 --> 00:11:28.410 align:start position:0%
dynamically allocate memory so it will
perform<00:11:26.920><c> better</c><00:11:27.220><c> if</c><00:11:27.460><c> you</c><00:11:27.640><c> have</c><00:11:27.850><c> the</c><00:11:27.880><c> need</c><00:11:28.240><c> the</c>

00:11:28.410 --> 00:11:28.420 align:start position:0%
perform better if you have the need the
 

00:11:28.420 --> 00:11:30.630 align:start position:0%
perform better if you have the need the
requirement<00:11:29.080><c> to</c><00:11:29.140><c> be</c><00:11:29.230><c> able</c><00:11:29.470><c> to</c><00:11:29.710><c> store</c><00:11:29.980><c> any</c><00:11:30.310><c> data</c>

00:11:30.630 --> 00:11:30.640 align:start position:0%
requirement to be able to store any data
 

00:11:30.640 --> 00:11:34.470 align:start position:0%
requirement to be able to store any data
type<00:11:31.120><c> in</c><00:11:31.420><c> a</c><00:11:31.510><c> single</c><00:11:31.900><c> variable</c><00:11:32.910><c> maybe</c><00:11:33.910><c> rethink</c>

00:11:34.470 --> 00:11:34.480 align:start position:0%
type in a single variable maybe rethink
 

00:11:34.480 --> 00:11:36.660 align:start position:0%
type in a single variable maybe rethink
the<00:11:34.600><c> design</c><00:11:34.690><c> of</c><00:11:35.170><c> your</c><00:11:35.200><c> program</c><00:11:35.950><c> I</c><00:11:36.190><c> mean</c><00:11:36.430><c> I</c>

00:11:36.660 --> 00:11:36.670 align:start position:0%
the design of your program I mean I
 

00:11:36.670 --> 00:11:40.410 align:start position:0%
the design of your program I mean I
honestly<00:11:37.860><c> really</c><00:11:38.860><c> like</c><00:11:39.280><c> kind</c><00:11:39.730><c> of</c><00:11:39.880><c> think</c><00:11:40.120><c> of</c><00:11:40.300><c> a</c>

00:11:40.410 --> 00:11:40.420 align:start position:0%
honestly really like kind of think of a
 

00:11:40.420 --> 00:11:42.240 align:start position:0%
honestly really like kind of think of a
valid<00:11:40.750><c> use</c><00:11:40.930><c> case</c><00:11:41.050><c> for</c><00:11:41.230><c> this</c><00:11:41.590><c> I</c><00:11:41.770><c> think</c><00:11:42.040><c> that</c>

00:11:42.240 --> 00:11:42.250 align:start position:0%
valid use case for this I think that
 

00:11:42.250 --> 00:11:44.790 align:start position:0%
valid use case for this I think that
it's<00:11:42.400><c> I</c><00:11:43.110><c> think</c><00:11:44.110><c> that</c><00:11:44.260><c> it's</c><00:11:44.410><c> something</c><00:11:44.590><c> that</c>

00:11:44.790 --> 00:11:44.800 align:start position:0%
it's I think that it's something that
 

00:11:44.800 --> 00:11:46.470 align:start position:0%
it's I think that it's something that
you<00:11:44.950><c> probably</c><00:11:45.220><c> should</c><00:11:45.700><c> never</c><00:11:45.940><c> use</c><00:11:46.150><c> I</c><00:11:46.180><c> mean</c><00:11:46.390><c> if</c>

00:11:46.470 --> 00:11:46.480 align:start position:0%
you probably should never use I mean if
 

00:11:46.480 --> 00:11:48.630 align:start position:0%
you probably should never use I mean if
you<00:11:46.540><c> have</c><00:11:46.630><c> like</c><00:11:46.780><c> a</c><00:11:46.810><c> buffer</c><00:11:47.350><c> of</c><00:11:47.500><c> data</c><00:11:47.980><c> and</c><00:11:48.340><c> you</c>

00:11:48.630 --> 00:11:48.640 align:start position:0%
you have like a buffer of data and you
 

00:11:48.640 --> 00:11:50.310 align:start position:0%
you have like a buffer of data and you
have<00:11:48.880><c> like</c><00:11:49.300><c> absolutely</c><00:11:49.840><c> no</c><00:11:49.960><c> idea</c><00:11:50.080><c> what</c><00:11:50.290><c> that</c>

00:11:50.310 --> 00:11:50.320 align:start position:0%
have like absolutely no idea what that
 

00:11:50.320 --> 00:11:51.660 align:start position:0%
have like absolutely no idea what that
outer<00:11:50.560><c> is</c><00:11:50.770><c> you</c><00:11:50.920><c> just</c><00:11:51.040><c> want</c><00:11:51.220><c> to</c><00:11:51.250><c> you</c><00:11:51.460><c> just</c><00:11:51.610><c> want</c>

00:11:51.660 --> 00:11:51.670 align:start position:0%
outer is you just want to you just want
 

00:11:51.670 --> 00:11:53.250 align:start position:0%
outer is you just want to you just want
to<00:11:51.760><c> point</c><00:11:52.000><c> it</c><00:11:52.180><c> to</c><00:11:52.210><c> it</c><00:11:52.420><c> then</c><00:11:52.600><c> that's</c><00:11:52.810><c> fine</c><00:11:52.990><c> you</c>

00:11:53.250 --> 00:11:53.260 align:start position:0%
to point it to it then that's fine you
 

00:11:53.260 --> 00:11:55.890 align:start position:0%
to point it to it then that's fine you
can<00:11:53.380><c> use</c><00:11:53.500><c> a</c><00:11:53.530><c> void</c><00:11:53.830><c> pointer</c><00:11:54.310><c> for</c><00:11:54.460><c> that</c><00:11:54.610><c> but</c><00:11:55.510><c> this</c>

00:11:55.890 --> 00:11:55.900 align:start position:0%
can use a void pointer for that but this
 

00:11:55.900 --> 00:11:58.050 align:start position:0%
can use a void pointer for that but this
is<00:11:56.170><c> like</c><00:11:56.680><c> this</c><00:11:57.370><c> is</c><00:11:57.580><c> something</c><00:11:57.790><c> completely</c>

00:11:58.050 --> 00:11:58.060 align:start position:0%
is like this is something completely
 

00:11:58.060 --> 00:12:00.810 align:start position:0%
is like this is something completely
different<00:11:58.390><c> if</c><00:11:58.690><c> you</c><00:11:58.810><c> guys</c><00:11:58.930><c> have</c><00:11:59.320><c> any</c><00:12:00.070><c> good</c><00:12:00.430><c> use</c>

00:12:00.810 --> 00:12:00.820 align:start position:0%
different if you guys have any good use
 

00:12:00.820 --> 00:12:02.040 align:start position:0%
different if you guys have any good use
cases<00:12:01.060><c> if</c><00:12:01.300><c> you</c><00:12:01.360><c> guys</c><00:12:01.450><c> have</c><00:12:01.630><c> used</c><00:12:01.840><c> this</c>

00:12:02.040 --> 00:12:02.050 align:start position:0%
cases if you guys have used this
 

00:12:02.050 --> 00:12:03.690 align:start position:0%
cases if you guys have used this
throughout<00:12:02.380><c> your</c><00:12:02.560><c> code</c><00:12:03.010><c> and</c><00:12:03.250><c> you</c><00:12:03.310><c> think</c><00:12:03.580><c> that</c>

00:12:03.690 --> 00:12:03.700 align:start position:0%
throughout your code and you think that
 

00:12:03.700 --> 00:12:05.400 align:start position:0%
throughout your code and you think that
it's<00:12:03.850><c> useful</c><00:12:04.390><c> please</c><00:12:04.660><c> drop</c><00:12:04.930><c> a</c><00:12:05.020><c> comment</c><00:12:05.200><c> below</c>

00:12:05.400 --> 00:12:05.410 align:start position:0%
it's useful please drop a comment below
 

00:12:05.410 --> 00:12:06.810 align:start position:0%
it's useful please drop a comment below
I'd<00:12:05.740><c> love</c><00:12:05.770><c> to</c><00:12:05.980><c> read</c><00:12:06.250><c> some</c><00:12:06.400><c> of</c><00:12:06.430><c> those</c><00:12:06.550><c> comments</c>

00:12:06.810 --> 00:12:06.820 align:start position:0%
I'd love to read some of those comments
 

00:12:06.820 --> 00:12:10.320 align:start position:0%
I'd love to read some of those comments
and<00:12:07.210><c> see</c><00:12:07.960><c> because</c><00:12:08.290><c> as</c><00:12:08.650><c> it</c><00:12:09.280><c> stands</c><00:12:09.550><c> right</c><00:12:09.790><c> now</c><00:12:10.000><c> I</c>

00:12:10.320 --> 00:12:10.330 align:start position:0%
and see because as it stands right now I
 

00:12:10.330 --> 00:12:12.690 align:start position:0%
and see because as it stands right now I
don't<00:12:10.930><c> think</c><00:12:11.230><c> this</c><00:12:11.560><c> is</c><00:12:11.770><c> anywhere</c><00:12:12.370><c> near</c><00:12:12.430><c> as</c>

00:12:12.690 --> 00:12:12.700 align:start position:0%
don't think this is anywhere near as
 

00:12:12.700 --> 00:12:15.150 align:start position:0%
don't think this is anywhere near as
useful<00:12:12.940><c> as</c><00:12:13.300><c> optional</c><00:12:13.930><c> or</c><00:12:14.140><c> variant</c><00:12:14.740><c> and</c><00:12:14.920><c> it's</c>

00:12:15.150 --> 00:12:15.160 align:start position:0%
useful as optional or variant and it's
 

00:12:15.160 --> 00:12:18.180 align:start position:0%
useful as optional or variant and it's
kind<00:12:15.370><c> of</c><00:12:15.450><c> funny</c><00:12:16.450><c> I</c><00:12:16.750><c> guess</c><00:12:16.960><c> to</c><00:12:17.260><c> end</c><00:12:17.440><c> to</c><00:12:17.920><c> end</c><00:12:18.070><c> the</c>

00:12:18.180 --> 00:12:18.190 align:start position:0%
kind of funny I guess to end to end the
 

00:12:18.190 --> 00:12:20.430 align:start position:0%
kind of funny I guess to end to end the
series<00:12:18.520><c> on</c><00:12:18.670><c> something</c><00:12:19.090><c> like</c><00:12:19.300><c> this</c><00:12:19.630><c> but</c><00:12:20.020><c> that's</c>

00:12:20.430 --> 00:12:20.440 align:start position:0%
series on something like this but that's
 

00:12:20.440 --> 00:12:22.080 align:start position:0%
series on something like this but that's
just<00:12:20.620><c> the</c><00:12:20.770><c> way</c><00:12:20.800><c> it</c><00:12:21.010><c> is</c><00:12:21.100><c> I</c><00:12:21.280><c> just</c><00:12:21.460><c> think</c><00:12:21.730><c> that</c><00:12:21.850><c> s</c>

00:12:22.080 --> 00:12:22.090 align:start position:0%
just the way it is I just think that s
 

00:12:22.090 --> 00:12:24.780 align:start position:0%
just the way it is I just think that s
it<00:12:22.270><c> eeny</c><00:12:22.510><c> is</c><00:12:23.610><c> something</c><00:12:24.610><c> that</c><00:12:24.700><c> you</c><00:12:24.760><c> should</c>

00:12:24.780 --> 00:12:24.790 align:start position:0%
it eeny is something that you should
 

00:12:24.790 --> 00:12:26.730 align:start position:0%
it eeny is something that you should
definitely<00:12:25.000><c> be</c><00:12:25.330><c> aware</c><00:12:25.600><c> of</c><00:12:25.660><c> but</c><00:12:26.170><c> maybe</c><00:12:26.530><c> not</c>

00:12:26.730 --> 00:12:26.740 align:start position:0%
definitely be aware of but maybe not
 

00:12:26.740 --> 00:12:28.350 align:start position:0%
definitely be aware of but maybe not
something<00:12:26.950><c> that</c><00:12:27.130><c> you</c><00:12:27.250><c> should</c><00:12:27.430><c> use</c><00:12:27.760><c> all</c><00:12:28.030><c> that</c>

00:12:28.350 --> 00:12:28.360 align:start position:0%
something that you should use all that
 

00:12:28.360 --> 00:12:30.180 align:start position:0%
something that you should use all that
often<00:12:28.630><c> anyway</c><00:12:29.260><c> I</c><00:12:29.290><c> hope</c><00:12:29.410><c> you</c><00:12:29.470><c> guys</c><00:12:29.680><c> enjoyed</c>

00:12:30.180 --> 00:12:30.190 align:start position:0%
often anyway I hope you guys enjoyed
 

00:12:30.190 --> 00:12:31.800 align:start position:0%
often anyway I hope you guys enjoyed
this<00:12:30.370><c> video</c><00:12:30.640><c> if</c><00:12:31.030><c> you</c><00:12:31.210><c> did</c><00:12:31.390><c> you</c><00:12:31.510><c> can</c><00:12:31.600><c> hit</c><00:12:31.750><c> that</c>

00:12:31.800 --> 00:12:31.810 align:start position:0%
this video if you did you can hit that
 

00:12:31.810 --> 00:12:33.720 align:start position:0%
this video if you did you can hit that
like<00:12:32.260><c> button</c><00:12:32.290><c> also</c><00:12:32.770><c> don't</c><00:12:32.890><c> forget</c><00:12:33.340><c> to</c><00:12:33.550><c> check</c>

00:12:33.720 --> 00:12:33.730 align:start position:0%
like button also don't forget to check
 

00:12:33.730 --> 00:12:35.520 align:start position:0%
like button also don't forget to check
out<00:12:34.090><c> the</c><00:12:34.120><c> link</c><00:12:34.420><c> in</c><00:12:34.510><c> description</c><00:12:34.570><c> for</c><00:12:35.230><c> two</c>

00:12:35.520 --> 00:12:35.530 align:start position:0%
out the link in description for two
 

00:12:35.530 --> 00:12:37.920 align:start position:0%
out the link in description for two
months<00:12:35.860><c> of</c><00:12:36.040><c> free</c><00:12:36.490><c> Skillshare</c><00:12:37.090><c> membership</c><00:12:37.720><c> you</c>

00:12:37.920 --> 00:12:37.930 align:start position:0%
months of free Skillshare membership you
 

00:12:37.930 --> 00:12:39.780 align:start position:0%
months of free Skillshare membership you
can<00:12:37.960><c> also</c><00:12:38.110><c> drop</c><00:12:38.410><c> a</c><00:12:38.590><c> comment</c><00:12:38.950><c> below</c><00:12:39.160><c> if</c><00:12:39.760><c> you</c>

00:12:39.780 --> 00:12:39.790 align:start position:0%
can also drop a comment below if you
 

00:12:39.790 --> 00:12:42.180 align:start position:0%
can also drop a comment below if you
want<00:12:40.060><c> me</c><00:12:40.150><c> to</c><00:12:40.240><c> cover</c><00:12:40.420><c> a</c><00:12:40.660><c> specific</c><00:12:40.870><c> topic</c><00:12:41.440><c> in</c><00:12:41.560><c> C++</c>

00:12:42.180 --> 00:12:42.190 align:start position:0%
want me to cover a specific topic in C++
 

00:12:42.190 --> 00:12:44.430 align:start position:0%
want me to cover a specific topic in C++
and<00:12:42.490><c> I</c><00:12:43.180><c> will</c><00:12:43.330><c> add</c><00:12:43.480><c> it</c><00:12:43.630><c> to</c><00:12:43.930><c> my</c><00:12:44.050><c> ever-growing</c>

00:12:44.430 --> 00:12:44.440 align:start position:0%
and I will add it to my ever-growing
 

00:12:44.440 --> 00:12:46.320 align:start position:0%
and I will add it to my ever-growing
list<00:12:44.950><c> I</c><00:12:45.430><c> will</c><00:12:45.580><c> see</c><00:12:45.790><c> you</c><00:12:45.880><c> guys</c><00:12:45.970><c> next</c><00:12:46.180><c> time</c>

00:12:46.320 --> 00:12:46.330 align:start position:0%
list I will see you guys next time
 

00:12:46.330 --> 00:12:48.520 align:start position:0%
list I will see you guys next time
goodbye<00:12:46.780><c> strong</c>

00:12:48.520 --> 00:12:48.530 align:start position:0%
goodbye strong
 

00:12:48.530 --> 00:13:12.440 align:start position:0%
goodbye strong
[Music]

