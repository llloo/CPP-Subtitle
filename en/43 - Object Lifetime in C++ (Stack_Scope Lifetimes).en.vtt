WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.880 align:start position:0%
 
hey<00:00:00.179><c> what's</c><00:00:00.510><c> up</c><00:00:00.630><c> guys</c><00:00:00.780><c> my</c><00:00:01.170><c> name</c><00:00:01.199><c> is</c><00:00:01.410><c> the</c>

00:00:01.880 --> 00:00:01.890 align:start position:0%
hey what's up guys my name is the
 

00:00:01.890 --> 00:00:04.039 align:start position:0%
hey what's up guys my name is the
churner<00:00:02.159><c> and</c><00:00:02.490><c> welcome</c><00:00:03.030><c> back</c><00:00:03.060><c> to</c><00:00:03.510><c> my</c><00:00:03.629><c> stay</c><00:00:03.870><c> plus</c>

00:00:04.039 --> 00:00:04.049 align:start position:0%
churner and welcome back to my stay plus
 

00:00:04.049 --> 00:00:06.920 align:start position:0%
churner and welcome back to my stay plus
plus<00:00:04.259><c> series</c><00:00:04.560><c> I</c><00:00:05.029><c> need</c><00:00:06.029><c> a</c><00:00:06.060><c> haircut</c><00:00:06.299><c> so</c><00:00:06.720><c> today</c>

00:00:06.920 --> 00:00:06.930 align:start position:0%
plus series I need a haircut so today
 

00:00:06.930 --> 00:00:08.360 align:start position:0%
plus series I need a haircut so today
I'm<00:00:07.020><c> gonna</c><00:00:07.140><c> be</c><00:00:07.259><c> talking</c><00:00:07.379><c> all</c><00:00:07.680><c> about</c><00:00:07.710><c> objects</c>

00:00:08.360 --> 00:00:08.370 align:start position:0%
I'm gonna be talking all about objects
 

00:00:08.370 --> 00:00:10.009 align:start position:0%
I'm gonna be talking all about objects
lifetimes<00:00:08.970><c> I'm</c><00:00:09.179><c> gonna</c><00:00:09.300><c> kind</c><00:00:09.599><c> of</c><00:00:09.719><c> start</c>

00:00:10.009 --> 00:00:10.019 align:start position:0%
lifetimes I'm gonna kind of start
 

00:00:10.019 --> 00:00:11.839 align:start position:0%
lifetimes I'm gonna kind of start
talking<00:00:10.380><c> about</c><00:00:10.469><c> memory</c><00:00:11.010><c> and</c><00:00:11.099><c> how</c><00:00:11.400><c> objects</c>

00:00:11.839 --> 00:00:11.849 align:start position:0%
talking about memory and how objects
 

00:00:11.849 --> 00:00:14.209 align:start position:0%
talking about memory and how objects
live<00:00:12.090><c> specifically</c><00:00:12.690><c> on</c><00:00:12.840><c> these</c><00:00:13.049><c> stack</c><00:00:13.410><c> I</c><00:00:13.710><c> am</c>

00:00:14.209 --> 00:00:14.219 align:start position:0%
live specifically on these stack I am
 

00:00:14.219 --> 00:00:15.919 align:start position:0%
live specifically on these stack I am
going<00:00:14.490><c> to</c><00:00:14.580><c> make</c><00:00:14.700><c> a</c><00:00:14.759><c> heat</c><00:00:15.000><c> versus</c><00:00:15.389><c> tack</c><00:00:15.540><c> video</c>

00:00:15.919 --> 00:00:15.929 align:start position:0%
going to make a heat versus tack video
 

00:00:15.929 --> 00:00:17.660 align:start position:0%
going to make a heat versus tack video
in<00:00:16.289><c> which</c><00:00:16.440><c> we</c><00:00:16.470><c> can</c><00:00:16.740><c> actually</c><00:00:17.100><c> talk</c><00:00:17.250><c> about</c><00:00:17.520><c> this</c>

00:00:17.660 --> 00:00:17.670 align:start position:0%
in which we can actually talk about this
 

00:00:17.670 --> 00:00:19.370 align:start position:0%
in which we can actually talk about this
stuff<00:00:18.090><c> in</c><00:00:18.330><c> depth</c><00:00:18.600><c> as</c><00:00:18.840><c> well</c><00:00:19.050><c> as</c><00:00:19.170><c> probably</c>

00:00:19.370 --> 00:00:19.380 align:start position:0%
stuff in depth as well as probably
 

00:00:19.380 --> 00:00:21.080 align:start position:0%
stuff in depth as well as probably
benchmark<00:00:20.100><c> the</c><00:00:20.250><c> difference</c><00:00:20.609><c> in</c><00:00:20.760><c> terms</c><00:00:20.939><c> of</c>

00:00:21.080 --> 00:00:21.090 align:start position:0%
benchmark the difference in terms of
 

00:00:21.090 --> 00:00:23.120 align:start position:0%
benchmark the difference in terms of
performance<00:00:21.240><c> and</c><00:00:21.810><c> just</c><00:00:22.410><c> talk</c><00:00:22.650><c> about</c><00:00:22.800><c> all</c><00:00:22.920><c> the</c>

00:00:23.120 --> 00:00:23.130 align:start position:0%
performance and just talk about all the
 

00:00:23.130 --> 00:00:26.120 align:start position:0%
performance and just talk about all the
performance<00:00:23.550><c> kind</c><00:00:23.760><c> of</c><00:00:23.850><c> metrics</c><00:00:24.210><c> and</c><00:00:24.830><c> and</c><00:00:25.830><c> and</c>

00:00:26.120 --> 00:00:26.130 align:start position:0%
performance kind of metrics and and and
 

00:00:26.130 --> 00:00:28.009 align:start position:0%
performance kind of metrics and and and
all<00:00:26.220><c> that</c><00:00:26.250><c> kind</c><00:00:26.670><c> of</c><00:00:26.699><c> stuff</c><00:00:26.939><c> in</c><00:00:27.210><c> that</c><00:00:27.359><c> video</c><00:00:27.720><c> but</c>

00:00:28.009 --> 00:00:28.019 align:start position:0%
all that kind of stuff in that video but
 

00:00:28.019 --> 00:00:29.330 align:start position:0%
all that kind of stuff in that video but
today<00:00:28.140><c> we're</c><00:00:28.470><c> just</c><00:00:28.590><c> gonna</c><00:00:28.769><c> this</c><00:00:29.039><c> is</c><00:00:29.099><c> like</c><00:00:29.310><c> a</c>

00:00:29.330 --> 00:00:29.340 align:start position:0%
today we're just gonna this is like a
 

00:00:29.340 --> 00:00:32.359 align:start position:0%
today we're just gonna this is like a
gentle<00:00:29.699><c> introduction</c><00:00:30.210><c> to</c><00:00:31.080><c> what</c><00:00:31.560><c> lifetime</c>

00:00:32.359 --> 00:00:32.369 align:start position:0%
gentle introduction to what lifetime
 

00:00:32.369 --> 00:00:34.940 align:start position:0%
gentle introduction to what lifetime
kind<00:00:32.730><c> of</c><00:00:32.940><c> means</c><00:00:33.149><c> for</c><00:00:33.360><c> stack-based</c><00:00:33.950><c> variables</c>

00:00:34.940 --> 00:00:34.950 align:start position:0%
kind of means for stack-based variables
 

00:00:34.950 --> 00:00:36.530 align:start position:0%
kind of means for stack-based variables
so<00:00:35.250><c> there's</c><00:00:35.460><c> kind</c><00:00:35.670><c> of</c><00:00:35.700><c> two</c><00:00:35.760><c> parts</c><00:00:36.120><c> to</c><00:00:36.390><c> this</c>

00:00:36.530 --> 00:00:36.540 align:start position:0%
so there's kind of two parts to this
 

00:00:36.540 --> 00:00:38.720 align:start position:0%
so there's kind of two parts to this
this<00:00:36.840><c> this</c><00:00:37.140><c> the</c><00:00:37.649><c> first</c><00:00:38.040><c> part</c><00:00:38.250><c> is</c><00:00:38.370><c> kind</c><00:00:38.550><c> of</c><00:00:38.579><c> you</c>

00:00:38.720 --> 00:00:38.730 align:start position:0%
this this the first part is kind of you
 

00:00:38.730 --> 00:00:41.450 align:start position:0%
this this the first part is kind of you
have<00:00:38.969><c> to</c><00:00:39.180><c> understand</c><00:00:39.660><c> how</c><00:00:40.320><c> things</c><00:00:41.100><c> live</c><00:00:41.340><c> on</c>

00:00:41.450 --> 00:00:41.460 align:start position:0%
have to understand how things live on
 

00:00:41.460 --> 00:00:43.520 align:start position:0%
have to understand how things live on
the<00:00:41.579><c> stack</c><00:00:41.850><c> in</c><00:00:42.629><c> order</c><00:00:42.870><c> for</c><00:00:43.260><c> you</c><00:00:43.379><c> to</c><00:00:43.500><c> actually</c>

00:00:43.520 --> 00:00:43.530 align:start position:0%
the stack in order for you to actually
 

00:00:43.530 --> 00:00:45.619 align:start position:0%
the stack in order for you to actually
be<00:00:43.980><c> able</c><00:00:44.070><c> to</c><00:00:44.250><c> write</c><00:00:44.430><c> code</c><00:00:44.730><c> that</c><00:00:44.760><c> doesn't</c><00:00:45.270><c> crash</c>

00:00:45.619 --> 00:00:45.629 align:start position:0%
be able to write code that doesn't crash
 

00:00:45.629 --> 00:00:48.410 align:start position:0%
be able to write code that doesn't crash
and<00:00:45.899><c> code</c><00:00:46.140><c> that</c><00:00:46.320><c> works</c><00:00:46.590><c> but</c><00:00:47.190><c> also</c><00:00:47.399><c> this</c><00:00:48.030><c> actor</c>

00:00:48.410 --> 00:00:48.420 align:start position:0%
and code that works but also this actor
 

00:00:48.420 --> 00:00:50.209 align:start position:0%
and code that works but also this actor
set<00:00:48.600><c> the</c><00:00:48.719><c> next</c><00:00:49.020><c> step</c><00:00:49.200><c> once</c><00:00:49.410><c> you</c><00:00:49.500><c> know</c><00:00:49.800><c> how</c><00:00:50.039><c> this</c>

00:00:50.209 --> 00:00:50.219 align:start position:0%
set the next step once you know how this
 

00:00:50.219 --> 00:00:52.549 align:start position:0%
set the next step once you know how this
works<00:00:50.520><c> is</c><00:00:50.820><c> that</c><00:00:50.850><c> I</c><00:00:51.390><c> now</c><00:00:51.840><c> know</c><00:00:51.870><c> how</c><00:00:52.170><c> to</c><00:00:52.230><c> leverage</c>

00:00:52.549 --> 00:00:52.559 align:start position:0%
works is that I now know how to leverage
 

00:00:52.559 --> 00:00:54.740 align:start position:0%
works is that I now know how to leverage
this<00:00:53.100><c> and</c><00:00:53.370><c> make</c><00:00:53.850><c> it</c><00:00:53.879><c> kind</c><00:00:54.239><c> of</c><00:00:54.300><c> do</c><00:00:54.510><c> what</c><00:00:54.719><c> I</c>

00:00:54.740 --> 00:00:54.750 align:start position:0%
this and make it kind of do what I
 

00:00:54.750 --> 00:00:56.150 align:start position:0%
this and make it kind of do what I
wanted<00:00:55.110><c> to</c><00:00:55.230><c> do</c><00:00:55.440><c> and</c><00:00:55.620><c> come</c><00:00:55.710><c> up</c><00:00:55.860><c> with</c><00:00:55.980><c> clever</c>

00:00:56.150 --> 00:00:56.160 align:start position:0%
wanted to do and come up with clever
 

00:00:56.160 --> 00:00:57.740 align:start position:0%
wanted to do and come up with clever
ways<00:00:56.399><c> to</c><00:00:56.430><c> do</c><00:00:56.699><c> things</c><00:00:57.000><c> and</c><00:00:57.149><c> we'll</c><00:00:57.510><c> talk</c><00:00:57.539><c> about</c>

00:00:57.740 --> 00:00:57.750 align:start position:0%
ways to do things and we'll talk about
 

00:00:57.750 --> 00:00:59.479 align:start position:0%
ways to do things and we'll talk about
well<00:00:57.989><c> we'll</c><00:00:58.410><c> look</c><00:00:58.500><c> at</c><00:00:58.649><c> some</c><00:00:58.770><c> examples</c><00:00:59.250><c> of</c><00:00:59.370><c> what</c>

00:00:59.479 --> 00:00:59.489 align:start position:0%
well we'll look at some examples of what
 

00:00:59.489 --> 00:01:01.459 align:start position:0%
well we'll look at some examples of what
I<00:00:59.520><c> mean</c><00:00:59.609><c> by</c><00:00:59.940><c> that</c><00:00:59.969><c> today</c><00:01:00.660><c> but</c><00:01:01.020><c> basically</c><00:01:01.379><c> we</c>

00:01:01.459 --> 00:01:01.469 align:start position:0%
I mean by that today but basically we
 

00:01:01.469 --> 00:01:02.750 align:start position:0%
I mean by that today but basically we
have<00:01:01.590><c> this</c><00:01:01.649><c> concept</c><00:01:02.010><c> of</c><00:01:02.190><c> stacks</c><00:01:02.460><c> how</c><00:01:02.699><c> two</c>

00:01:02.750 --> 00:01:02.760 align:start position:0%
have this concept of stacks how two
 

00:01:02.760 --> 00:01:04.969 align:start position:0%
have this concept of stacks how two
stacks<00:01:03.090><c> well</c><00:01:03.449><c> we'll</c><00:01:03.690><c> have</c><00:01:03.809><c> a</c><00:01:03.840><c> web</c><00:01:04.140><c> of</c><00:01:04.290><c> video</c><00:01:04.559><c> in</c>

00:01:04.969 --> 00:01:04.979 align:start position:0%
stacks well we'll have a web of video in
 

00:01:04.979 --> 00:01:06.410 align:start position:0%
stacks well we'll have a web of video in
depth<00:01:05.280><c> about</c><00:01:05.400><c> that</c><00:01:05.549><c> I</c><00:01:05.760><c> know</c><00:01:05.880><c> that</c><00:01:06.090><c> I</c><00:01:06.119><c> keep</c>

00:01:06.410 --> 00:01:06.420 align:start position:0%
depth about that I know that I keep
 

00:01:06.420 --> 00:01:07.969 align:start position:0%
depth about that I know that I keep
saying<00:01:06.750><c> we'll</c><00:01:06.960><c> have</c><00:01:07.170><c> a</c><00:01:07.200><c> video</c><00:01:07.409><c> for</c><00:01:07.770><c> pretty</c>

00:01:07.969 --> 00:01:07.979 align:start position:0%
saying we'll have a video for pretty
 

00:01:07.979 --> 00:01:09.560 align:start position:0%
saying we'll have a video for pretty
much<00:01:08.040><c> every</c><00:01:08.460><c> topic</c><00:01:08.700><c> but</c><00:01:09.000><c> it's</c><00:01:09.119><c> just</c><00:01:09.270><c> I</c><00:01:09.390><c> don't</c>

00:01:09.560 --> 00:01:09.570 align:start position:0%
much every topic but it's just I don't
 

00:01:09.570 --> 00:01:11.359 align:start position:0%
much every topic but it's just I don't
want<00:01:09.750><c> to</c><00:01:09.810><c> focus</c><00:01:09.990><c> on</c><00:01:10.260><c> the</c><00:01:10.350><c> details</c><00:01:10.770><c> of</c><00:01:10.979><c> certain</c>

00:01:11.359 --> 00:01:11.369 align:start position:0%
want to focus on the details of certain
 

00:01:11.369 --> 00:01:13.100 align:start position:0%
want to focus on the details of certain
elements<00:01:11.520><c> in</c><00:01:12.240><c> every</c><00:01:12.600><c> video</c><00:01:12.750><c> because</c>

00:01:13.100 --> 00:01:13.110 align:start position:0%
elements in every video because
 

00:01:13.110 --> 00:01:14.630 align:start position:0%
elements in every video because
otherwise<00:01:13.290><c> these</c><00:01:13.470><c> videos</c><00:01:13.770><c> we've</c><00:01:13.950><c> 45</c><00:01:14.340><c> minutes</c>

00:01:14.630 --> 00:01:14.640 align:start position:0%
otherwise these videos we've 45 minutes
 

00:01:14.640 --> 00:01:16.399 align:start position:0%
otherwise these videos we've 45 minutes
not<00:01:14.850><c> helpful</c><00:01:15.299><c> to</c><00:01:15.720><c> people</c><00:01:15.840><c> who</c><00:01:16.080><c> already</c><00:01:16.259><c> know</c>

00:01:16.399 --> 00:01:16.409 align:start position:0%
not helpful to people who already know
 

00:01:16.409 --> 00:01:18.050 align:start position:0%
not helpful to people who already know
that<00:01:16.560><c> stuff</c><00:01:17.009><c> that's</c><00:01:17.250><c> why</c><00:01:17.400><c> I'm</c><00:01:17.520><c> kind</c><00:01:17.759><c> of</c><00:01:17.790><c> trying</c>

00:01:18.050 --> 00:01:18.060 align:start position:0%
that stuff that's why I'm kind of trying
 

00:01:18.060 --> 00:01:20.749 align:start position:0%
that stuff that's why I'm kind of trying
to<00:01:18.090><c> monetize</c><00:01:18.450><c> this</c><00:01:19.380><c> series</c><00:01:20.130><c> the</c><00:01:20.430><c> best</c><00:01:20.610><c> thing</c><00:01:20.729><c> a</c>

00:01:20.749 --> 00:01:20.759 align:start position:0%
to monetize this series the best thing a
 

00:01:20.759 --> 00:01:21.950 align:start position:0%
to monetize this series the best thing a
stack<00:01:20.970><c> can</c><00:01:21.090><c> be</c><00:01:21.210><c> thought</c><00:01:21.360><c> of</c><00:01:21.420><c> as</c><00:01:21.659><c> a</c><00:01:21.689><c> data</c>

00:01:21.950 --> 00:01:21.960 align:start position:0%
stack can be thought of as a data
 

00:01:21.960 --> 00:01:23.690 align:start position:0%
stack can be thought of as a data
structure<00:01:22.470><c> in</c><00:01:22.560><c> which</c><00:01:22.650><c> you</c><00:01:22.830><c> stack</c><00:01:23.130><c> things</c><00:01:23.400><c> on</c>

00:01:23.690 --> 00:01:23.700 align:start position:0%
structure in which you stack things on
 

00:01:23.700 --> 00:01:25.429 align:start position:0%
structure in which you stack things on
top<00:01:24.000><c> pretend</c><00:01:24.420><c> that</c><00:01:24.509><c> you've</c><00:01:24.630><c> got</c><00:01:24.840><c> a</c><00:01:24.990><c> stack</c><00:01:25.409><c> of</c>

00:01:25.429 --> 00:01:25.439 align:start position:0%
top pretend that you've got a stack of
 

00:01:25.439 --> 00:01:27.350 align:start position:0%
top pretend that you've got a stack of
books<00:01:25.710><c> on</c><00:01:25.920><c> your</c><00:01:25.950><c> desk</c><00:01:26.340><c> in</c><00:01:26.850><c> order</c><00:01:27.000><c> for</c><00:01:27.270><c> you</c><00:01:27.330><c> to</c>

00:01:27.350 --> 00:01:27.360 align:start position:0%
books on your desk in order for you to
 

00:01:27.360 --> 00:01:28.940 align:start position:0%
books on your desk in order for you to
actually<00:01:27.810><c> access</c><00:01:27.960><c> one</c><00:01:28.350><c> in</c><00:01:28.470><c> the</c><00:01:28.530><c> middle</c><00:01:28.829><c> you</c>

00:01:28.940 --> 00:01:28.950 align:start position:0%
actually access one in the middle you
 

00:01:28.950 --> 00:01:31.249 align:start position:0%
actually access one in the middle you
would<00:01:29.040><c> have</c><00:01:29.189><c> to</c><00:01:29.310><c> take</c><00:01:29.490><c> the</c><00:01:29.759><c> first</c><00:01:30.270><c> few</c><00:01:30.570><c> off</c><00:01:30.810><c> to</c>

00:01:31.249 --> 00:01:31.259 align:start position:0%
would have to take the first few off to
 

00:01:31.259 --> 00:01:33.620 align:start position:0%
would have to take the first few off to
get<00:01:31.680><c> to</c><00:01:31.890><c> that</c><00:01:32.040><c> that</c><00:01:32.369><c> book</c><00:01:32.640><c> in</c><00:01:32.790><c> the</c><00:01:32.880><c> middle</c><00:01:33.030><c> of</c>

00:01:33.620 --> 00:01:33.630 align:start position:0%
get to that that book in the middle of
 

00:01:33.630 --> 00:01:35.090 align:start position:0%
get to that that book in the middle of
course<00:01:33.900><c> in</c><00:01:34.049><c> real</c><00:01:34.170><c> life</c><00:01:34.350><c> you</c><00:01:34.500><c> could</c><00:01:34.650><c> just</c><00:01:34.799><c> yank</c>

00:01:35.090 --> 00:01:35.100 align:start position:0%
course in real life you could just yank
 

00:01:35.100 --> 00:01:37.069 align:start position:0%
course in real life you could just yank
it<00:01:35.250><c> out</c><00:01:35.430><c> but</c><00:01:35.729><c> that's</c><00:01:36.030><c> not</c><00:01:36.299><c> how</c><00:01:36.420><c> stacks</c><00:01:36.720><c> work</c><00:01:36.930><c> in</c>

00:01:37.069 --> 00:01:37.079 align:start position:0%
it out but that's not how stacks work in
 

00:01:37.079 --> 00:01:38.569 align:start position:0%
it out but that's not how stacks work in
programming<00:01:37.530><c> so</c><00:01:37.740><c> every</c><00:01:38.009><c> time</c><00:01:38.159><c> we</c><00:01:38.310><c> enter</c><00:01:38.430><c> a</c>

00:01:38.569 --> 00:01:38.579 align:start position:0%
programming so every time we enter a
 

00:01:38.579 --> 00:01:41.300 align:start position:0%
programming so every time we enter a
scope<00:01:38.970><c> in</c><00:01:39.240><c> C++</c><00:01:39.900><c> we</c><00:01:40.079><c> basically</c><00:01:40.590><c> push</c><00:01:40.950><c> us</c><00:01:41.250><c> push</c>

00:01:41.300 --> 00:01:41.310 align:start position:0%
scope in C++ we basically push us push
 

00:01:41.310 --> 00:01:43.130 align:start position:0%
scope in C++ we basically push us push
stack<00:01:42.000><c> frame</c><00:01:42.299><c> on</c><00:01:42.479><c> it</c><00:01:42.570><c> doesn't</c><00:01:42.720><c> necessarily</c>

00:01:43.130 --> 00:01:43.140 align:start position:0%
stack frame on it doesn't necessarily
 

00:01:43.140 --> 00:01:45.109 align:start position:0%
stack frame on it doesn't necessarily
have<00:01:43.170><c> to</c><00:01:43.290><c> be</c><00:01:43.380><c> a</c><00:01:43.470><c> stack</c><00:01:43.740><c> frame</c><00:01:43.950><c> in</c><00:01:44.340><c> the</c><00:01:44.759><c> case</c><00:01:44.939><c> of</c>

00:01:45.109 --> 00:01:45.119 align:start position:0%
have to be a stack frame in the case of
 

00:01:45.119 --> 00:01:46.880 align:start position:0%
have to be a stack frame in the case of
I'm<00:01:45.299><c> actually</c><00:01:45.479><c> pushing</c><00:01:45.930><c> data</c><00:01:46.110><c> on</c><00:01:46.380><c> but</c><00:01:46.619><c> you</c><00:01:46.740><c> can</c>

00:01:46.880 --> 00:01:46.890 align:start position:0%
I'm actually pushing data on but you can
 

00:01:46.890 --> 00:01:48.679 align:start position:0%
I'm actually pushing data on but you can
think<00:01:47.130><c> of</c><00:01:47.220><c> it</c><00:01:47.369><c> as</c><00:01:47.520><c> adding</c><00:01:48.060><c> a</c><00:01:48.149><c> book</c><00:01:48.390><c> to</c><00:01:48.600><c> your</c>

00:01:48.679 --> 00:01:48.689 align:start position:0%
think of it as adding a book to your
 

00:01:48.689 --> 00:01:50.539 align:start position:0%
think of it as adding a book to your
pile<00:01:49.020><c> and</c><00:01:49.290><c> any</c><00:01:49.619><c> variables</c><00:01:50.070><c> that</c><00:01:50.159><c> you</c><00:01:50.250><c> declare</c>

00:01:50.539 --> 00:01:50.549 align:start position:0%
pile and any variables that you declare
 

00:01:50.549 --> 00:01:52.429 align:start position:0%
pile and any variables that you declare
inside<00:01:50.880><c> that</c><00:01:51.060><c> scope</c><00:01:51.270><c> is</c><00:01:51.450><c> like</c><00:01:51.600><c> writing</c><00:01:52.140><c> stuff</c>

00:01:52.429 --> 00:01:52.439 align:start position:0%
inside that scope is like writing stuff
 

00:01:52.439 --> 00:01:54.740 align:start position:0%
inside that scope is like writing stuff
into<00:01:52.950><c> your</c><00:01:53.100><c> book</c><00:01:53.430><c> and</c><00:01:53.670><c> once</c><00:01:53.970><c> that</c><00:01:54.119><c> scope</c><00:01:54.420><c> ends</c>

00:01:54.740 --> 00:01:54.750 align:start position:0%
into your book and once that scope ends
 

00:01:54.750 --> 00:01:56.300 align:start position:0%
into your book and once that scope ends
and<00:01:54.869><c> you</c><00:01:54.930><c> take</c><00:01:55.140><c> that</c><00:01:55.350><c> book</c><00:01:55.560><c> off</c><00:01:55.799><c> of</c><00:01:55.950><c> your</c><00:01:56.100><c> pile</c>

00:01:56.300 --> 00:01:56.310 align:start position:0%
and you take that book off of your pile
 

00:01:56.310 --> 00:01:59.450 align:start position:0%
and you take that book off of your pile
of<00:01:56.490><c> books</c><00:01:56.869><c> it's</c><00:01:57.869><c> gone</c><00:01:58.170><c> right</c><00:01:58.560><c> every</c><00:01:59.130><c> stack</c>

00:01:59.450 --> 00:01:59.460 align:start position:0%
of books it's gone right every stack
 

00:01:59.460 --> 00:02:01.130 align:start position:0%
of books it's gone right every stack
based<00:01:59.670><c> variable</c><00:02:00.270><c> which</c><00:02:00.420><c> you</c><00:02:00.450><c> declared</c><00:02:00.899><c> in</c>

00:02:01.130 --> 00:02:01.140 align:start position:0%
based variable which you declared in
 

00:02:01.140 --> 00:02:03.350 align:start position:0%
based variable which you declared in
that<00:02:01.170><c> book</c><00:02:01.590><c> every</c><00:02:02.100><c> object</c><00:02:02.700><c> that</c><00:02:02.820><c> you</c><00:02:02.939><c> created</c>

00:02:03.350 --> 00:02:03.360 align:start position:0%
that book every object that you created
 

00:02:03.360 --> 00:02:05.600 align:start position:0%
that book every object that you created
on<00:02:03.450><c> the</c><00:02:03.540><c> stack</c><00:02:03.750><c> inside</c><00:02:04.170><c> that</c><00:02:04.380><c> book</c><00:02:04.649><c> they're</c>

00:02:05.600 --> 00:02:05.610 align:start position:0%
on the stack inside that book they're
 

00:02:05.610 --> 00:02:07.399 align:start position:0%
on the stack inside that book they're
gone<00:02:05.820><c> now</c><00:02:05.850><c> and</c><00:02:06.240><c> that</c><00:02:06.540><c> is</c><00:02:06.630><c> both</c><00:02:06.780><c> a</c><00:02:06.810><c> blessing</c><00:02:06.899><c> and</c>

00:02:07.399 --> 00:02:07.409 align:start position:0%
gone now and that is both a blessing and
 

00:02:07.409 --> 00:02:09.050 align:start position:0%
gone now and that is both a blessing and
a<00:02:07.619><c> curse</c><00:02:07.649><c> but</c><00:02:08.250><c> if</c><00:02:08.429><c> you</c><00:02:08.610><c> know</c><00:02:08.759><c> what</c><00:02:08.940><c> you're</c>

00:02:09.050 --> 00:02:09.060 align:start position:0%
a curse but if you know what you're
 

00:02:09.060 --> 00:02:10.790 align:start position:0%
a curse but if you know what you're
doing<00:02:09.420><c> then</c><00:02:09.660><c> obviously</c><00:02:09.959><c> it's</c><00:02:10.410><c> just</c>

00:02:10.790 --> 00:02:10.800 align:start position:0%
doing then obviously it's just
 

00:02:10.800 --> 00:02:12.740 align:start position:0%
doing then obviously it's just
be<00:02:10.979><c> a</c><00:02:11.010><c> blessing</c><00:02:11.370><c> 100%</c><00:02:11.940><c> of</c><00:02:12.000><c> the</c><00:02:12.060><c> time</c><00:02:12.210><c> right</c><00:02:12.480><c> so</c>

00:02:12.740 --> 00:02:12.750 align:start position:0%
be a blessing 100% of the time right so
 

00:02:12.750 --> 00:02:14.390 align:start position:0%
be a blessing 100% of the time right so
I'm<00:02:12.870><c> going</c><00:02:13.050><c> to</c><00:02:13.110><c> show</c><00:02:13.260><c> you</c><00:02:13.320><c> some</c><00:02:13.590><c> examples</c><00:02:13.740><c> of</c>

00:02:14.390 --> 00:02:14.400 align:start position:0%
I'm going to show you some examples of
 

00:02:14.400 --> 00:02:15.980 align:start position:0%
I'm going to show you some examples of
exactly<00:02:14.880><c> how</c><00:02:15.150><c> all</c><00:02:15.330><c> of</c><00:02:15.450><c> this</c><00:02:15.540><c> comes</c><00:02:15.840><c> together</c>

00:02:15.980 --> 00:02:15.990 align:start position:0%
exactly how all of this comes together
 

00:02:15.990 --> 00:02:17.300 align:start position:0%
exactly how all of this comes together
and<00:02:16.320><c> how</c><00:02:16.410><c> all</c><00:02:16.650><c> this</c><00:02:16.740><c> works</c><00:02:16.950><c> and</c><00:02:17.220><c> hopefully</c>

00:02:17.300 --> 00:02:17.310 align:start position:0%
and how all this works and hopefully
 

00:02:17.310 --> 00:02:19.250 align:start position:0%
and how all this works and hopefully
doesn't<00:02:18.000><c> make</c><00:02:18.180><c> it</c><00:02:18.300><c> painfully</c><00:02:18.630><c> obvious</c><00:02:18.750><c> to</c><00:02:19.020><c> you</c>

00:02:19.250 --> 00:02:19.260 align:start position:0%
doesn't make it painfully obvious to you
 

00:02:19.260 --> 00:02:20.720 align:start position:0%
doesn't make it painfully obvious to you
so<00:02:19.500><c> first</c><00:02:19.680><c> of</c><00:02:19.800><c> all</c><00:02:19.890><c> let's</c><00:02:20.070><c> talk</c><00:02:20.160><c> about</c><00:02:20.220><c> scopes</c>

00:02:20.720 --> 00:02:20.730 align:start position:0%
so first of all let's talk about scopes
 

00:02:20.730 --> 00:02:22.910 align:start position:0%
so first of all let's talk about scopes
a<00:02:20.940><c> scope</c><00:02:21.270><c> can</c><00:02:21.450><c> be</c><00:02:21.540><c> anything</c><00:02:21.780><c> from</c><00:02:22.110><c> a</c><00:02:22.410><c> function</c>

00:02:22.910 --> 00:02:22.920 align:start position:0%
a scope can be anything from a function
 

00:02:22.920 --> 00:02:25.070 align:start position:0%
a scope can be anything from a function
scope<00:02:23.160><c> like</c><00:02:23.460><c> what</c><00:02:23.700><c> this</c><00:02:23.940><c> is</c><00:02:24.120><c> right</c><00:02:24.330><c> here</c><00:02:24.540><c> some</c>

00:02:25.070 --> 00:02:25.080 align:start position:0%
scope like what this is right here some
 

00:02:25.080 --> 00:02:27.680 align:start position:0%
scope like what this is right here some
kind<00:02:25.320><c> of</c><00:02:25.440><c> if</c><00:02:25.770><c> statements</c><00:02:26.640><c> cope</c><00:02:26.820><c> like</c><00:02:27.150><c> this</c><00:02:27.450><c> or</c>

00:02:27.680 --> 00:02:27.690 align:start position:0%
kind of if statements cope like this or
 

00:02:27.690 --> 00:02:29.150 align:start position:0%
kind of if statements cope like this or
could<00:02:27.990><c> also</c><00:02:28.110><c> be</c><00:02:28.380><c> in</c><00:02:28.470><c> a</c><00:02:28.530><c> for</c><00:02:28.740><c> loop</c><00:02:28.890><c> or</c><00:02:29.040><c> a</c><00:02:29.130><c> while</c>

00:02:29.150 --> 00:02:29.160 align:start position:0%
could also be in a for loop or a while
 

00:02:29.160 --> 00:02:32.420 align:start position:0%
could also be in a for loop or a while
loop<00:02:29.370><c> or</c><00:02:29.730><c> just</c><00:02:30.180><c> an</c><00:02:30.270><c> empty</c><00:02:30.480><c> Scott</c><00:02:30.780><c> like</c><00:02:31.260><c> that</c><00:02:31.740><c> we</c>

00:02:32.420 --> 00:02:32.430 align:start position:0%
loop or just an empty Scott like that we
 

00:02:32.430 --> 00:02:33.950 align:start position:0%
loop or just an empty Scott like that we
also<00:02:32.550><c> have</c><00:02:32.760><c> scopes</c><00:02:33.060><c> for</c><00:02:33.270><c> classes</c><00:02:33.720><c> meaning</c>

00:02:33.950 --> 00:02:33.960 align:start position:0%
also have scopes for classes meaning
 

00:02:33.960 --> 00:02:36.140 align:start position:0%
also have scopes for classes meaning
that<00:02:34.140><c> when</c><00:02:34.350><c> I</c><00:02:34.380><c> declare</c><00:02:34.800><c> a</c><00:02:34.830><c> class</c><00:02:35.040><c> like</c><00:02:35.700><c> entity</c>

00:02:36.140 --> 00:02:36.150 align:start position:0%
that when I declare a class like entity
 

00:02:36.150 --> 00:02:38.300 align:start position:0%
that when I declare a class like entity
it's<00:02:36.450><c> my</c><00:02:36.600><c> go-to</c><00:02:37.020><c> example</c><00:02:37.500><c> and</c><00:02:37.710><c> I</c><00:02:37.800><c> have</c><00:02:37.980><c> some</c>

00:02:38.300 --> 00:02:38.310 align:start position:0%
it's my go-to example and I have some
 

00:02:38.310 --> 00:02:40.310 align:start position:0%
it's my go-to example and I have some
kind<00:02:38.490><c> of</c><00:02:38.670><c> stack</c><00:02:39.300><c> initialized</c><00:02:39.810><c> variable</c><00:02:40.170><c> here</c>

00:02:40.310 --> 00:02:40.320 align:start position:0%
kind of stack initialized variable here
 

00:02:40.320 --> 00:02:41.690 align:start position:0%
kind of stack initialized variable here
so<00:02:40.350><c> something</c><00:02:40.680><c> that</c><00:02:40.800><c> isn't</c><00:02:41.040><c> allocated</c><00:02:41.580><c> on</c><00:02:41.670><c> the</c>

00:02:41.690 --> 00:02:41.700 align:start position:0%
so something that isn't allocated on the
 

00:02:41.700 --> 00:02:44.060 align:start position:0%
so something that isn't allocated on the
heap<00:02:41.820><c> here</c><00:02:42.390><c> then</c><00:02:42.780><c> this</c><00:02:43.080><c> variable</c><00:02:43.620><c> is</c><00:02:43.830><c> also</c>

00:02:44.060 --> 00:02:44.070 align:start position:0%
heap here then this variable is also
 

00:02:44.070 --> 00:02:46.010 align:start position:0%
heap here then this variable is also
inside<00:02:44.520><c> this</c><00:02:44.670><c> class</c><00:02:45.150><c> scope</c><00:02:45.480><c> meaning</c><00:02:45.900><c> that</c>

00:02:46.010 --> 00:02:46.020 align:start position:0%
inside this class scope meaning that
 

00:02:46.020 --> 00:02:48.470 align:start position:0%
inside this class scope meaning that
when<00:02:46.500><c> this</c><00:02:46.620><c> class</c><00:02:46.830><c> dies</c><00:02:47.190><c> this</c><00:02:47.850><c> variable</c><00:02:48.330><c> dies</c>

00:02:48.470 --> 00:02:48.480 align:start position:0%
when this class dies this variable dies
 

00:02:48.480 --> 00:02:50.480 align:start position:0%
when this class dies this variable dies
so<00:02:48.810><c> let's</c><00:02:48.990><c> see</c><00:02:49.170><c> this</c><00:02:49.290><c> in</c><00:02:49.410><c> action</c><00:02:49.530><c> I'm</c><00:02:50.010><c> going</c><00:02:50.400><c> to</c>

00:02:50.480 --> 00:02:50.490 align:start position:0%
so let's see this in action I'm going to
 

00:02:50.490 --> 00:02:52.010 align:start position:0%
so let's see this in action I'm going to
just<00:02:50.670><c> write</c><00:02:50.850><c> a</c><00:02:50.880><c> very</c><00:02:51.120><c> simple</c><00:02:51.180><c> entity</c><00:02:51.690><c> class</c>

00:02:52.010 --> 00:02:52.020 align:start position:0%
just write a very simple entity class
 

00:02:52.020 --> 00:02:53.690 align:start position:0%
just write a very simple entity class
here<00:02:52.320><c> this</c><00:02:52.530><c> doesn't</c><00:02:52.890><c> have</c><00:02:53.130><c> to</c><00:02:53.160><c> be</c><00:02:53.400><c> an</c><00:02:53.490><c> empty</c>

00:02:53.690 --> 00:02:53.700 align:start position:0%
here this doesn't have to be an empty
 

00:02:53.700 --> 00:02:55.460 align:start position:0%
here this doesn't have to be an empty
class<00:02:53.910><c> could</c><00:02:54.120><c> be</c><00:02:54.180><c> absolutely</c><00:02:54.600><c> anything</c><00:02:54.870><c> it's</c>

00:02:55.460 --> 00:02:55.470 align:start position:0%
class could be absolutely anything it's
 

00:02:55.470 --> 00:02:57.170 align:start position:0%
class could be absolutely anything it's
going<00:02:55.680><c> to</c><00:02:55.770><c> have</c><00:02:55.890><c> a</c><00:02:55.920><c> constructor</c><00:02:56.700><c> here</c><00:02:56.910><c> which</c>

00:02:57.170 --> 00:02:57.180 align:start position:0%
going to have a constructor here which
 

00:02:57.180 --> 00:02:58.430 align:start position:0%
going to have a constructor here which
is<00:02:57.300><c> going</c><00:02:57.480><c> to</c><00:02:57.570><c> print</c><00:02:57.870><c> something</c><00:02:58.200><c> to</c><00:02:58.320><c> the</c>

00:02:58.430 --> 00:02:58.440 align:start position:0%
is going to print something to the
 

00:02:58.440 --> 00:03:00.800 align:start position:0%
is going to print something to the
console<00:02:58.800><c> like</c><00:02:59.400><c> create</c><00:02:59.820><c> identity</c><00:03:00.360><c> and</c><00:03:00.720><c> we're</c>

00:03:00.800 --> 00:03:00.810 align:start position:0%
console like create identity and we're
 

00:03:00.810 --> 00:03:01.610 align:start position:0%
console like create identity and we're
also<00:03:00.930><c> going</c><00:03:01.110><c> to</c><00:03:01.170><c> give</c><00:03:01.320><c> this</c><00:03:01.410><c> class</c><00:03:01.530><c> a</c>

00:03:01.610 --> 00:03:01.620 align:start position:0%
also going to give this class a
 

00:03:01.620 --> 00:03:02.780 align:start position:0%
also going to give this class a
destructor<00:03:02.070><c> I'm</c><00:03:02.280><c> actually</c><00:03:02.370><c> just</c><00:03:02.610><c> going</c><00:03:02.700><c> to</c>

00:03:02.780 --> 00:03:02.790 align:start position:0%
destructor I'm actually just going to
 

00:03:02.790 --> 00:03:04.820 align:start position:0%
destructor I'm actually just going to
copy<00:03:02.910><c> this</c><00:03:03.120><c> add</c><00:03:03.390><c> the</c><00:03:04.020><c> tilde</c><00:03:04.380><c> here</c><00:03:04.500><c> to</c><00:03:04.620><c> make</c><00:03:04.740><c> it</c>

00:03:04.820 --> 00:03:04.830 align:start position:0%
copy this add the tilde here to make it
 

00:03:04.830 --> 00:03:06.410 align:start position:0%
copy this add the tilde here to make it
a<00:03:04.890><c> destructor</c><00:03:05.400><c> and</c><00:03:05.640><c> change</c><00:03:05.970><c> this</c><00:03:06.150><c> to</c>

00:03:06.410 --> 00:03:06.420 align:start position:0%
a destructor and change this to
 

00:03:06.420 --> 00:03:08.510 align:start position:0%
a destructor and change this to
destroyed<00:03:06.900><c> entity</c><00:03:07.410><c> so</c><00:03:07.830><c> we</c><00:03:07.920><c> have</c><00:03:08.070><c> created</c>

00:03:08.510 --> 00:03:08.520 align:start position:0%
destroyed entity so we have created
 

00:03:08.520 --> 00:03:10.430 align:start position:0%
destroyed entity so we have created
entity<00:03:08.640><c> in</c><00:03:08.970><c> a</c><00:03:09.060><c> constructor</c><00:03:09.540><c> and</c><00:03:09.690><c> destroyed</c>

00:03:10.430 --> 00:03:10.440 align:start position:0%
entity in a constructor and destroyed
 

00:03:10.440 --> 00:03:12.590 align:start position:0%
entity in a constructor and destroyed
entity<00:03:10.860><c> in</c><00:03:11.010><c> a</c><00:03:11.070><c> destructor</c><00:03:11.580><c> inside</c><00:03:12.120><c> this</c><00:03:12.360><c> scope</c>

00:03:12.590 --> 00:03:12.600 align:start position:0%
entity in a destructor inside this scope
 

00:03:12.600 --> 00:03:14.600 align:start position:0%
entity in a destructor inside this scope
over<00:03:12.930><c> here</c><00:03:13.140><c> I'm</c><00:03:13.320><c> going</c><00:03:13.500><c> to</c><00:03:13.590><c> declare</c><00:03:14.070><c> my</c><00:03:14.220><c> entity</c>

00:03:14.600 --> 00:03:14.610 align:start position:0%
over here I'm going to declare my entity
 

00:03:14.610 --> 00:03:16.370 align:start position:0%
over here I'm going to declare my entity
instead<00:03:15.180><c> of</c><00:03:15.300><c> creating</c><00:03:15.600><c> it</c><00:03:15.690><c> on</c><00:03:15.780><c> the</c><00:03:15.930><c> heap</c><00:03:16.140><c> on</c>

00:03:16.370 --> 00:03:16.380 align:start position:0%
instead of creating it on the heap on
 

00:03:16.380 --> 00:03:17.600 align:start position:0%
instead of creating it on the heap on
guard<00:03:16.590><c> credit</c><00:03:16.920><c> on</c><00:03:16.980><c> the</c><00:03:17.070><c> stack</c><00:03:17.280><c> just</c><00:03:17.459><c> by</c>

00:03:17.600 --> 00:03:17.610 align:start position:0%
guard credit on the stack just by
 

00:03:17.610 --> 00:03:19.250 align:start position:0%
guard credit on the stack just by
writing<00:03:17.760><c> code</c><00:03:17.970><c> like</c><00:03:18.180><c> star</c><00:03:18.450><c> this</c><00:03:18.870><c> is</c><00:03:18.930><c> going</c><00:03:19.200><c> to</c>

00:03:19.250 --> 00:03:19.260 align:start position:0%
writing code like star this is going to
 

00:03:19.260 --> 00:03:21.260 align:start position:0%
writing code like star this is going to
call<00:03:19.410><c> the</c><00:03:19.440><c> default</c><00:03:20.010><c> constructor</c><00:03:20.250><c> I'm</c><00:03:21.060><c> going</c>

00:03:21.260 --> 00:03:21.270 align:start position:0%
call the default constructor I'm going
 

00:03:21.270 --> 00:03:23.090 align:start position:0%
call the default constructor I'm going
to<00:03:21.330><c> put</c><00:03:21.450><c> a</c><00:03:21.480><c> breakpoint</c><00:03:21.750><c> on</c><00:03:22.140><c> this</c><00:03:22.440><c> line</c><00:03:22.680><c> and</c><00:03:22.709><c> hit</c>

00:03:23.090 --> 00:03:23.100 align:start position:0%
to put a breakpoint on this line and hit
 

00:03:23.100 --> 00:03:25.250 align:start position:0%
to put a breakpoint on this line and hit
f5<00:03:23.489><c> to</c><00:03:23.550><c> run</c><00:03:23.760><c> my</c><00:03:23.910><c> program</c><00:03:24.060><c> okay</c><00:03:24.750><c> so</c><00:03:24.810><c> once</c><00:03:25.050><c> I</c><00:03:25.140><c> hit</c>

00:03:25.250 --> 00:03:25.260 align:start position:0%
f5 to run my program okay so once I hit
 

00:03:25.260 --> 00:03:26.780 align:start position:0%
f5 to run my program okay so once I hit
this<00:03:25.380><c> breakpoint</c><00:03:25.680><c> I'm</c><00:03:26.160><c> just</c><00:03:26.370><c> going</c><00:03:26.550><c> to</c><00:03:26.580><c> open</c>

00:03:26.780 --> 00:03:26.790 align:start position:0%
this breakpoint I'm just going to open
 

00:03:26.790 --> 00:03:28.160 align:start position:0%
this breakpoint I'm just going to open
my<00:03:26.850><c> console</c><00:03:27.330><c> here</c><00:03:27.510><c> so</c><00:03:27.660><c> that</c><00:03:27.780><c> we</c><00:03:27.870><c> can</c><00:03:28.020><c> see</c>

00:03:28.160 --> 00:03:28.170 align:start position:0%
my console here so that we can see
 

00:03:28.170 --> 00:03:30.350 align:start position:0%
my console here so that we can see
what's<00:03:28.350><c> happening</c><00:03:28.800><c> if</c><00:03:28.920><c> I</c><00:03:29.100><c> hit</c><00:03:29.310><c> f10</c><00:03:29.760><c> to</c><00:03:30.030><c> advance</c>

00:03:30.350 --> 00:03:30.360 align:start position:0%
what's happening if I hit f10 to advance
 

00:03:30.360 --> 00:03:32.630 align:start position:0%
what's happening if I hit f10 to advance
one<00:03:30.900><c> line</c><00:03:31.170><c> forward</c><00:03:31.680><c> you'll</c><00:03:31.920><c> see</c><00:03:32.130><c> the</c><00:03:32.250><c> creative</c>

00:03:32.630 --> 00:03:32.640 align:start position:0%
one line forward you'll see the creative
 

00:03:32.640 --> 00:03:34.430 align:start position:0%
one line forward you'll see the creative
entity<00:03:32.970><c> gets</c><00:03:33.120><c> printed</c><00:03:33.570><c> to</c><00:03:33.660><c> the</c><00:03:33.750><c> console</c><00:03:34.080><c> now</c>

00:03:34.430 --> 00:03:34.440 align:start position:0%
entity gets printed to the console now
 

00:03:34.440 --> 00:03:36.800 align:start position:0%
entity gets printed to the console now
we<00:03:34.500><c> are</c><00:03:34.800><c> at</c><00:03:34.980><c> the</c><00:03:35.160><c> end</c><00:03:35.340><c> of</c><00:03:35.700><c> this</c><00:03:35.880><c> scope</c><00:03:36.180><c> here</c><00:03:36.540><c> so</c>

00:03:36.800 --> 00:03:36.810 align:start position:0%
we are at the end of this scope here so
 

00:03:36.810 --> 00:03:38.810 align:start position:0%
we are at the end of this scope here so
as<00:03:36.959><c> soon</c><00:03:37.080><c> as</c><00:03:37.170><c> I</c><00:03:37.260><c> hit</c><00:03:37.470><c> f10</c><00:03:37.890><c> we</c><00:03:38.340><c> are</c><00:03:38.459><c> destroying</c>

00:03:38.810 --> 00:03:38.820 align:start position:0%
as soon as I hit f10 we are destroying
 

00:03:38.820 --> 00:03:40.699 align:start position:0%
as soon as I hit f10 we are destroying
our<00:03:39.150><c> entity</c><00:03:39.540><c> that</c><00:03:39.660><c> entity</c><00:03:39.900><c> is</c><00:03:40.050><c> gone</c><00:03:40.290><c> now</c><00:03:40.470><c> that</c>

00:03:40.699 --> 00:03:40.709 align:start position:0%
our entity that entity is gone now that
 

00:03:40.709 --> 00:03:42.800 align:start position:0%
our entity that entity is gone now that
memory<00:03:41.100><c> has</c><00:03:41.280><c> been</c><00:03:41.400><c> freed</c><00:03:41.760><c> should</c><00:03:42.300><c> be</c><00:03:42.540><c> pretty</c>

00:03:42.800 --> 00:03:42.810 align:start position:0%
memory has been freed should be pretty
 

00:03:42.810 --> 00:03:45.140 align:start position:0%
memory has been freed should be pretty
obvious<00:03:43.020><c> if</c><00:03:43.530><c> I</c><00:03:43.650><c> was</c><00:03:43.950><c> to</c><00:03:44.250><c> do</c><00:03:44.430><c> a</c><00:03:44.459><c> heap</c><00:03:44.700><c> allocation</c>

00:03:45.140 --> 00:03:45.150 align:start position:0%
obvious if I was to do a heap allocation
 

00:03:45.150 --> 00:03:47.060 align:start position:0%
obvious if I was to do a heap allocation
on<00:03:45.450><c> this</c><00:03:45.690><c> by</c><00:03:46.230><c> converting</c><00:03:46.560><c> this</c><00:03:46.770><c> into</c><00:03:46.980><c> a</c>

00:03:47.060 --> 00:03:47.070 align:start position:0%
on this by converting this into a
 

00:03:47.070 --> 00:03:49.340 align:start position:0%
on this by converting this into a
pointer<00:03:47.550><c> and</c><00:03:47.790><c> writing</c><00:03:48.180><c> code</c><00:03:48.360><c> like</c><00:03:48.600><c> so</c><00:03:48.840><c> with</c>

00:03:49.340 --> 00:03:49.350 align:start position:0%
pointer and writing code like so with
 

00:03:49.350 --> 00:03:51.620 align:start position:0%
pointer and writing code like so with
optional<00:03:49.770><c> parentheses</c><00:03:50.310><c> if</c><00:03:50.670><c> I</c><00:03:50.790><c> hit</c><00:03:50.970><c> f5</c><00:03:51.270><c> here</c>

00:03:51.620 --> 00:03:51.630 align:start position:0%
optional parentheses if I hit f5 here
 

00:03:51.630 --> 00:03:53.660 align:start position:0%
optional parentheses if I hit f5 here
I'll<00:03:52.020><c> have</c><00:03:52.380><c> one</c><00:03:52.560><c> line</c><00:03:52.739><c> of</c><00:03:52.860><c> code</c><00:03:52.890><c> forward</c><00:03:53.489><c> and</c>

00:03:53.660 --> 00:03:53.670 align:start position:0%
I'll have one line of code forward and
 

00:03:53.670 --> 00:03:55.190 align:start position:0%
I'll have one line of code forward and
you<00:03:53.820><c> can</c><00:03:53.940><c> see</c><00:03:54.120><c> that</c><00:03:54.270><c> we</c><00:03:54.360><c> didn't</c><00:03:54.690><c> even</c><00:03:54.810><c> go</c><00:03:55.140><c> to</c>

00:03:55.190 --> 00:03:55.200 align:start position:0%
you can see that we didn't even go to
 

00:03:55.200 --> 00:03:57.110 align:start position:0%
you can see that we didn't even go to
the<00:03:55.440><c> scope</c><00:03:55.739><c> here</c><00:03:56.040><c> if</c><00:03:56.190><c> I</c><00:03:56.280><c> look</c><00:03:56.459><c> at</c><00:03:56.550><c> my</c><00:03:56.670><c> console</c>

00:03:57.110 --> 00:03:57.120 align:start position:0%
the scope here if I look at my console
 

00:03:57.120 --> 00:04:00.650 align:start position:0%
the scope here if I look at my console
we<00:03:57.390><c> just</c><00:03:57.570><c> say</c><00:03:57.660><c> credit</c><00:03:57.989><c> entity</c><00:03:58.350><c> and</c><00:03:59.390><c> that's</c><00:04:00.390><c> it</c>

00:04:00.650 --> 00:04:00.660 align:start position:0%
we just say credit entity and that's it
 

00:04:00.660 --> 00:04:02.180 align:start position:0%
we just say credit entity and that's it
we're<00:04:00.900><c> already</c><00:04:01.110><c> on</c><00:04:01.290><c> this</c><00:04:01.500><c> line</c><00:04:01.709><c> I</c><00:04:01.739><c> can</c><00:04:01.980><c> even</c>

00:04:02.180 --> 00:04:02.190 align:start position:0%
we're already on this line I can even
 

00:04:02.190 --> 00:04:03.830 align:start position:0%
we're already on this line I can even
execute<00:04:02.610><c> this</c><00:04:02.760><c> line</c><00:04:03.000><c> so</c><00:04:03.330><c> right</c><00:04:03.540><c> now</c><00:04:03.660><c> we're</c>

00:04:03.830 --> 00:04:03.840 align:start position:0%
execute this line so right now we're
 

00:04:03.840 --> 00:04:05.420 align:start position:0%
execute this line so right now we're
actually<00:04:03.930><c> waiting</c><00:04:04.350><c> for</c><00:04:04.530><c> input</c><00:04:04.620><c> and</c><00:04:04.980><c> you</c><00:04:05.310><c> can</c>

00:04:05.420 --> 00:04:05.430 align:start position:0%
actually waiting for input and you can
 

00:04:05.430 --> 00:04:07.729 align:start position:0%
actually waiting for input and you can
see<00:04:05.550><c> our</c><00:04:05.670><c> entity</c><00:04:06.030><c> never</c><00:04:06.330><c> gets</c><00:04:06.630><c> destroyed</c><00:04:07.140><c> of</c>

00:04:07.729 --> 00:04:07.739 align:start position:0%
see our entity never gets destroyed of
 

00:04:07.739 --> 00:04:09.350 align:start position:0%
see our entity never gets destroyed of
course<00:04:07.980><c> that</c><00:04:08.130><c> memory</c><00:04:08.430><c> does</c><00:04:08.640><c> get</c><00:04:08.910><c> cleaned</c><00:04:09.239><c> up</c>

00:04:09.350 --> 00:04:09.360 align:start position:0%
course that memory does get cleaned up
 

00:04:09.360 --> 00:04:10.970 align:start position:0%
course that memory does get cleaned up
by<00:04:09.540><c> the</c><00:04:09.600><c> operating</c><00:04:10.050><c> system</c><00:04:10.350><c> when</c><00:04:10.860><c> our</c>

00:04:10.970 --> 00:04:10.980 align:start position:0%
by the operating system when our
 

00:04:10.980 --> 00:04:12.530 align:start position:0%
by the operating system when our
application<00:04:11.040><c> terminates</c><00:04:11.550><c> so</c><00:04:12.269><c> straight</c><00:04:12.480><c> away</c>

00:04:12.530 --> 00:04:12.540 align:start position:0%
application terminates so straight away
 

00:04:12.540 --> 00:04:14.449 align:start position:0%
application terminates so straight away
you<00:04:12.690><c> should</c><00:04:12.989><c> see</c><00:04:13.230><c> the</c><00:04:13.380><c> difference</c><00:04:13.830><c> in</c><00:04:14.070><c> object</c>

00:04:14.449 --> 00:04:14.459 align:start position:0%
you should see the difference in object
 

00:04:14.459 --> 00:04:16.400 align:start position:0%
you should see the difference in object
lifetimes<00:04:14.910><c> between</c><00:04:15.269><c> a</c><00:04:15.480><c> stack-based</c><00:04:15.780><c> variable</c>

00:04:16.400 --> 00:04:16.410 align:start position:0%
lifetimes between a stack-based variable
 

00:04:16.410 --> 00:04:18.090 align:start position:0%
lifetimes between a stack-based variable
and<00:04:16.590><c> a</c><00:04:16.650><c> heat-based</c><00:04:16.859><c> variable</c>

00:04:18.090 --> 00:04:18.100 align:start position:0%
and a heat-based variable
 

00:04:18.100 --> 00:04:19.890 align:start position:0%
and a heat-based variable
based<00:04:18.250><c> variable</c><00:04:18.610><c> gets</c><00:04:18.820><c> freed</c><00:04:19.150><c> gets</c><00:04:19.450><c> destroyed</c>

00:04:19.890 --> 00:04:19.900 align:start position:0%
based variable gets freed gets destroyed
 

00:04:19.900 --> 00:04:21.750 align:start position:0%
based variable gets freed gets destroyed
as<00:04:20.140><c> soon</c><00:04:20.470><c> as</c><00:04:20.560><c> we</c><00:04:20.650><c> go</c><00:04:20.770><c> out</c><00:04:20.890><c> of</c><00:04:20.920><c> scope</c><00:04:21.130><c> so</c><00:04:21.610><c> that's</c>

00:04:21.750 --> 00:04:21.760 align:start position:0%
as soon as we go out of scope so that's
 

00:04:21.760 --> 00:04:23.160 align:start position:0%
as soon as we go out of scope so that's
basically<00:04:22.090><c> the</c><00:04:22.240><c> point</c><00:04:22.450><c> of</c><00:04:22.630><c> today's</c><00:04:22.840><c> video</c><00:04:23.140><c> I</c>

00:04:23.160 --> 00:04:23.170 align:start position:0%
basically the point of today's video I
 

00:04:23.170 --> 00:04:24.480 align:start position:0%
basically the point of today's video I
just<00:04:23.320><c> want</c><00:04:23.470><c> you</c><00:04:23.560><c> to</c><00:04:23.590><c> get</c><00:04:23.800><c> it</c><00:04:23.920><c> into</c><00:04:24.070><c> your</c><00:04:24.250><c> head</c>

00:04:24.480 --> 00:04:24.490 align:start position:0%
just want you to get it into your head
 

00:04:24.490 --> 00:04:26.010 align:start position:0%
just want you to get it into your head
that<00:04:25.090><c> if</c><00:04:25.180><c> you</c><00:04:25.270><c> declare</c><00:04:25.540><c> something</c><00:04:25.870><c> on</c><00:04:25.960><c> the</c>

00:04:26.010 --> 00:04:26.020 align:start position:0%
that if you declare something on the
 

00:04:26.020 --> 00:04:27.150 align:start position:0%
that if you declare something on the
stack<00:04:26.170><c> if</c><00:04:26.290><c> you</c><00:04:26.350><c> create</c><00:04:26.590><c> a</c><00:04:26.620><c> variable</c><00:04:26.890><c> on</c><00:04:27.040><c> the</c>

00:04:27.150 --> 00:04:27.160 align:start position:0%
stack if you create a variable on the
 

00:04:27.160 --> 00:04:29.550 align:start position:0%
stack if you create a variable on the
stack<00:04:27.460><c> it's</c><00:04:27.730><c> going</c><00:04:27.970><c> to</c><00:04:28.150><c> cease</c><00:04:28.420><c> to</c><00:04:28.450><c> exist</c><00:04:28.720><c> when</c>

00:04:29.550 --> 00:04:29.560 align:start position:0%
stack it's going to cease to exist when
 

00:04:29.560 --> 00:04:31.650 align:start position:0%
stack it's going to cease to exist when
it<00:04:29.590><c> goes</c><00:04:30.070><c> out</c><00:04:30.220><c> of</c><00:04:30.340><c> start</c><00:04:30.640><c> now</c><00:04:30.970><c> let's</c><00:04:31.450><c> take</c><00:04:31.630><c> a</c>

00:04:31.650 --> 00:04:31.660 align:start position:0%
it goes out of start now let's take a
 

00:04:31.660 --> 00:04:33.090 align:start position:0%
it goes out of start now let's take a
look<00:04:31.870><c> at</c><00:04:31.930><c> some</c><00:04:32.080><c> things</c><00:04:32.230><c> you</c><00:04:32.350><c> might</c><00:04:32.500><c> not</c><00:04:32.830><c> want</c>

00:04:33.090 --> 00:04:33.100 align:start position:0%
look at some things you might not want
 

00:04:33.100 --> 00:04:34.950 align:start position:0%
look at some things you might not want
to<00:04:33.220><c> do</c><00:04:33.400><c> now</c><00:04:33.700><c> that</c><00:04:33.880><c> you</c><00:04:33.970><c> have</c><00:04:34.180><c> this</c><00:04:34.360><c> knowledge</c><00:04:34.570><c> a</c>

00:04:34.950 --> 00:04:34.960 align:start position:0%
to do now that you have this knowledge a
 

00:04:34.960 --> 00:04:37.200 align:start position:0%
to do now that you have this knowledge a
great<00:04:35.410><c> example</c><00:04:35.680><c> is</c><00:04:36.100><c> I</c><00:04:36.340><c> want</c><00:04:36.670><c> to</c><00:04:36.760><c> create</c><00:04:37.060><c> an</c>

00:04:37.200 --> 00:04:37.210 align:start position:0%
great example is I want to create an
 

00:04:37.210 --> 00:04:39.120 align:start position:0%
great example is I want to create an
array<00:04:37.330><c> inside</c><00:04:37.840><c> a</c><00:04:38.020><c> function</c><00:04:38.260><c> maybe</c><00:04:38.680><c> it's</c><00:04:39.010><c> an</c>

00:04:39.120 --> 00:04:39.130 align:start position:0%
array inside a function maybe it's an
 

00:04:39.130 --> 00:04:41.100 align:start position:0%
array inside a function maybe it's an
integer<00:04:39.370><c> array</c><00:04:39.550><c> so</c><00:04:39.880><c> it</c><00:04:39.910><c> will</c><00:04:40.300><c> return</c><00:04:40.630><c> an</c><00:04:40.870><c> int</c>

00:04:41.100 --> 00:04:41.110 align:start position:0%
integer array so it will return an int
 

00:04:41.110 --> 00:04:43.800 align:start position:0%
integer array so it will return an int
pointer<00:04:41.230><c> I'll</c><00:04:42.100><c> call</c><00:04:42.430><c> this</c><00:04:42.550><c> create</c><00:04:42.970><c> array</c><00:04:43.360><c> and</c>

00:04:43.800 --> 00:04:43.810 align:start position:0%
pointer I'll call this create array and
 

00:04:43.810 --> 00:04:46.950 align:start position:0%
pointer I'll call this create array and
I<00:04:44.560><c> might</c><00:04:44.830><c> write</c><00:04:45.010><c> code</c><00:04:45.250><c> such</c><00:04:45.520><c> as</c><00:04:45.550><c> int</c><00:04:45.940><c> array</c><00:04:46.240><c> so</c>

00:04:46.950 --> 00:04:46.960 align:start position:0%
I might write code such as int array so
 

00:04:46.960 --> 00:04:48.630 align:start position:0%
I might write code such as int array so
this<00:04:47.170><c> is</c><00:04:47.260><c> going</c><00:04:47.440><c> to</c><00:04:47.530><c> allocate</c><00:04:47.980><c> the</c><00:04:48.100><c> array</c><00:04:48.190><c> 15</c>

00:04:48.630 --> 00:04:48.640 align:start position:0%
this is going to allocate the array 15
 

00:04:48.640 --> 00:04:50.520 align:start position:0%
this is going to allocate the array 15
here<00:04:48.730><c> to</c><00:04:48.850><c> just</c><00:04:49.060><c> large</c><00:04:49.510><c> and</c><00:04:49.810><c> then</c><00:04:50.110><c> I</c><00:04:50.140><c> can</c><00:04:50.350><c> return</c>

00:04:50.520 --> 00:04:50.530 align:start position:0%
here to just large and then I can return
 

00:04:50.530 --> 00:04:52.050 align:start position:0%
here to just large and then I can return
a<00:04:50.680><c> raid</c><00:04:50.950><c> now</c><00:04:51.280><c> this</c><00:04:51.430><c> looks</c><00:04:51.610><c> like</c><00:04:51.670><c> perfectly</c>

00:04:52.050 --> 00:04:52.060 align:start position:0%
a raid now this looks like perfectly
 

00:04:52.060 --> 00:04:53.340 align:start position:0%
a raid now this looks like perfectly
sensible<00:04:52.360><c> card</c><00:04:52.660><c> I</c><00:04:52.750><c> mean</c><00:04:52.840><c> is</c><00:04:52.960><c> creating</c><00:04:53.290><c> an</c>

00:04:53.340 --> 00:04:53.350 align:start position:0%
sensible card I mean is creating an
 

00:04:53.350 --> 00:04:55.200 align:start position:0%
sensible card I mean is creating an
array<00:04:53.650><c> and</c><00:04:53.980><c> then</c><00:04:54.430><c> returning</c><00:04:54.700><c> a</c><00:04:54.820><c> pointer</c><00:04:55.000><c> to</c>

00:04:55.200 --> 00:04:55.210 align:start position:0%
array and then returning a pointer to
 

00:04:55.210 --> 00:04:57.210 align:start position:0%
array and then returning a pointer to
that<00:04:55.240><c> array</c><00:04:55.570><c> seems</c><00:04:56.020><c> legit</c><00:04:56.470><c> right</c><00:04:56.710><c> wrong</c>

00:04:57.210 --> 00:04:57.220 align:start position:0%
that array seems legit right wrong
 

00:04:57.220 --> 00:04:58.860 align:start position:0%
that array seems legit right wrong
you're<00:04:57.730><c> completely</c><00:04:58.240><c> wrong</c><00:04:58.450><c> if</c><00:04:58.630><c> you</c><00:04:58.750><c> thought</c>

00:04:58.860 --> 00:04:58.870 align:start position:0%
you're completely wrong if you thought
 

00:04:58.870 --> 00:05:00.360 align:start position:0%
you're completely wrong if you thought
that<00:04:59.080><c> was</c><00:04:59.260><c> legit</c><00:04:59.560><c> I</c><00:04:59.650><c> really</c><00:04:59.890><c> hope</c><00:05:00.040><c> you</c><00:05:00.160><c> did</c>

00:05:00.360 --> 00:05:00.370 align:start position:0%
that was legit I really hope you did
 

00:05:00.370 --> 00:05:02.100 align:start position:0%
that was legit I really hope you did
let's<00:05:00.910><c> take</c><00:05:01.060><c> a</c><00:05:01.090><c> look</c><00:05:01.240><c> at</c><00:05:01.300><c> why</c><00:05:01.420><c> so</c><00:05:01.720><c> by</c><00:05:02.050><c> creating</c>

00:05:02.100 --> 00:05:02.110 align:start position:0%
let's take a look at why so by creating
 

00:05:02.110 --> 00:05:04.230 align:start position:0%
let's take a look at why so by creating
an<00:05:02.470><c> array</c><00:05:02.650><c> like</c><00:05:02.830><c> this</c><00:05:03.100><c> we're</c><00:05:03.460><c> not</c><00:05:03.670><c> allocating</c>

00:05:04.230 --> 00:05:04.240 align:start position:0%
an array like this we're not allocating
 

00:05:04.240 --> 00:05:05.850 align:start position:0%
an array like this we're not allocating
on<00:05:04.360><c> it</c><00:05:04.540><c> on</c><00:05:04.660><c> the</c><00:05:04.810><c> heap</c><00:05:05.020><c> we're</c><00:05:05.200><c> not</c><00:05:05.320><c> calling</c><00:05:05.530><c> new</c>

00:05:05.850 --> 00:05:05.860 align:start position:0%
on it on the heap we're not calling new
 

00:05:05.860 --> 00:05:08.370 align:start position:0%
on it on the heap we're not calling new
or<00:05:06.400><c> doing</c><00:05:06.640><c> some</c><00:05:06.820><c> kind</c><00:05:06.970><c> of</c><00:05:07.120><c> heap</c><00:05:07.300><c> allocation</c><00:05:07.720><c> we</c>

00:05:08.370 --> 00:05:08.380 align:start position:0%
or doing some kind of heap allocation we
 

00:05:08.380 --> 00:05:10.350 align:start position:0%
or doing some kind of heap allocation we
are<00:05:08.500><c> just</c><00:05:08.800><c> declaring</c><00:05:09.490><c> it</c><00:05:09.580><c> on</c><00:05:09.700><c> the</c><00:05:09.790><c> stack</c><00:05:10.090><c> and</c>

00:05:10.350 --> 00:05:10.360 align:start position:0%
are just declaring it on the stack and
 

00:05:10.360 --> 00:05:11.880 align:start position:0%
are just declaring it on the stack and
when<00:05:10.660><c> we</c><00:05:10.780><c> return</c><00:05:11.050><c> a</c><00:05:11.080><c> pointer</c><00:05:11.440><c> to</c><00:05:11.470><c> that</c><00:05:11.590><c> is</c>

00:05:11.880 --> 00:05:11.890 align:start position:0%
when we return a pointer to that is
 

00:05:11.890 --> 00:05:13.560 align:start position:0%
when we return a pointer to that is
returning<00:05:12.220><c> a</c><00:05:12.340><c> pointer</c><00:05:12.700><c> to</c><00:05:12.730><c> that</c><00:05:12.880><c> stack</c><00:05:13.330><c> memory</c>

00:05:13.560 --> 00:05:13.570 align:start position:0%
returning a pointer to that stack memory
 

00:05:13.570 --> 00:05:15.840 align:start position:0%
returning a pointer to that stack memory
guess<00:05:14.380><c> what</c><00:05:14.650><c> that</c><00:05:15.100><c> stack</c><00:05:15.400><c> memory</c><00:05:15.580><c> gets</c>

00:05:15.840 --> 00:05:15.850 align:start position:0%
guess what that stack memory gets
 

00:05:15.850 --> 00:05:18.090 align:start position:0%
guess what that stack memory gets
cleared<00:05:16.210><c> as</c><00:05:16.450><c> soon</c><00:05:16.720><c> as</c><00:05:16.840><c> we</c><00:05:16.960><c> go</c><00:05:17.080><c> out</c><00:05:17.200><c> of</c><00:05:17.290><c> scope</c><00:05:17.410><c> so</c>

00:05:18.090 --> 00:05:18.100 align:start position:0%
cleared as soon as we go out of scope so
 

00:05:18.100 --> 00:05:20.100 align:start position:0%
cleared as soon as we go out of scope so
if<00:05:18.190><c> you</c><00:05:18.280><c> write</c><00:05:18.520><c> code</c><00:05:18.790><c> like</c><00:05:18.910><c> this</c><00:05:19.270><c> it's</c><00:05:19.780><c> going</c>

00:05:20.100 --> 00:05:20.110 align:start position:0%
if you write code like this it's going
 

00:05:20.110 --> 00:05:21.990 align:start position:0%
if you write code like this it's going
to<00:05:20.200><c> fail</c><00:05:20.500><c> if</c><00:05:20.830><c> you</c><00:05:21.100><c> would</c><00:05:21.280><c> like</c><00:05:21.520><c> to</c><00:05:21.790><c> write</c><00:05:21.940><c> a</c>

00:05:21.990 --> 00:05:22.000 align:start position:0%
to fail if you would like to write a
 

00:05:22.000 --> 00:05:23.820 align:start position:0%
to fail if you would like to write a
function<00:05:22.270><c> like</c><00:05:22.570><c> this</c><00:05:22.810><c> you</c><00:05:23.080><c> basically</c><00:05:23.530><c> have</c>

00:05:23.820 --> 00:05:23.830 align:start position:0%
function like this you basically have
 

00:05:23.830 --> 00:05:26.550 align:start position:0%
function like this you basically have
two<00:05:24.100><c> options</c><00:05:24.610><c> you</c><00:05:24.790><c> can</c><00:05:25.270><c> either</c><00:05:25.510><c> get</c><00:05:26.080><c> this</c><00:05:26.320><c> to</c>

00:05:26.550 --> 00:05:26.560 align:start position:0%
two options you can either get this to
 

00:05:26.560 --> 00:05:28.040 align:start position:0%
two options you can either get this to
actually<00:05:26.710><c> allocate</c><00:05:27.070><c> the</c><00:05:27.460><c> array</c><00:05:27.550><c> on</c><00:05:27.850><c> the</c><00:05:27.880><c> heap</c>

00:05:28.040 --> 00:05:28.050 align:start position:0%
actually allocate the array on the heap
 

00:05:28.050 --> 00:05:30.360 align:start position:0%
actually allocate the array on the heap
thus<00:05:29.050><c> ensuring</c><00:05:29.620><c> that</c><00:05:29.680><c> its</c><00:05:29.860><c> lifetime</c><00:05:30.040><c> will</c>

00:05:30.360 --> 00:05:30.370 align:start position:0%
thus ensuring that its lifetime will
 

00:05:30.370 --> 00:05:32.010 align:start position:0%
thus ensuring that its lifetime will
actually<00:05:30.670><c> stay</c><00:05:30.910><c> around</c><00:05:31.180><c> or</c><00:05:31.570><c> you</c><00:05:31.780><c> could</c><00:05:31.930><c> ask</c>

00:05:32.010 --> 00:05:32.020 align:start position:0%
actually stay around or you could ask
 

00:05:32.020 --> 00:05:33.540 align:start position:0%
actually stay around or you could ask
this<00:05:32.320><c> data</c><00:05:32.620><c> that</c><00:05:32.860><c> you've</c><00:05:32.950><c> created</c><00:05:33.160><c> here</c><00:05:33.430><c> to</c>

00:05:33.540 --> 00:05:33.550 align:start position:0%
this data that you've created here to
 

00:05:33.550 --> 00:05:34.980 align:start position:0%
this data that you've created here to
actually<00:05:33.700><c> be</c><00:05:33.940><c> copied</c><00:05:34.300><c> to</c><00:05:34.450><c> a</c><00:05:34.480><c> location</c><00:05:34.810><c> that</c>

00:05:34.980 --> 00:05:34.990 align:start position:0%
actually be copied to a location that
 

00:05:34.990 --> 00:05:36.780 align:start position:0%
actually be copied to a location that
exists<00:05:35.470><c> further</c><00:05:35.680><c> up</c><00:05:35.860><c> the</c><00:05:36.010><c> stack</c><00:05:36.250><c> so</c><00:05:36.490><c> it</c><00:05:36.580><c> has</c><00:05:36.670><c> an</c>

00:05:36.780 --> 00:05:36.790 align:start position:0%
exists further up the stack so it has an
 

00:05:36.790 --> 00:05:38.700 align:start position:0%
exists further up the stack so it has an
example<00:05:37.270><c> let's</c><00:05:37.570><c> say</c><00:05:37.720><c> I</c><00:05:37.750><c> actually</c><00:05:38.200><c> create</c><00:05:38.560><c> my</c>

00:05:38.700 --> 00:05:38.710 align:start position:0%
example let's say I actually create my
 

00:05:38.710 --> 00:05:40.800 align:start position:0%
example let's say I actually create my
array<00:05:38.950><c> over</c><00:05:39.100><c> here</c><00:05:39.400><c> of</c><00:05:39.580><c> 50</c><00:05:39.910><c> integers</c><00:05:40.300><c> and</c><00:05:40.450><c> then</c>

00:05:40.800 --> 00:05:40.810 align:start position:0%
array over here of 50 integers and then
 

00:05:40.810 --> 00:05:42.180 align:start position:0%
array over here of 50 integers and then
I<00:05:40.930><c> want</c><00:05:41.110><c> this</c><00:05:41.230><c> credit</c><00:05:41.440><c> ready</c><00:05:41.680><c> to</c><00:05:41.740><c> be</c><00:05:41.830><c> more</c><00:05:42.010><c> of</c><00:05:42.100><c> a</c>

00:05:42.180 --> 00:05:42.190 align:start position:0%
I want this credit ready to be more of a
 

00:05:42.190 --> 00:05:43.890 align:start position:0%
I want this credit ready to be more of a
fill<00:05:42.430><c> array</c><00:05:42.670><c> which</c><00:05:43.180><c> would</c><00:05:43.360><c> take</c><00:05:43.540><c> in</c><00:05:43.720><c> that</c>

00:05:43.890 --> 00:05:43.900 align:start position:0%
fill array which would take in that
 

00:05:43.900 --> 00:05:45.990 align:start position:0%
fill array which would take in that
array<00:05:44.170><c> as</c><00:05:44.440><c> a</c><00:05:44.470><c> parameter</c><00:05:45.070><c> and</c><00:05:45.250><c> actually</c><00:05:45.850><c> do</c>

00:05:45.990 --> 00:05:46.000 align:start position:0%
array as a parameter and actually do
 

00:05:46.000 --> 00:05:47.670 align:start position:0%
array as a parameter and actually do
anything<00:05:46.300><c> that</c><00:05:46.540><c> it</c><00:05:46.690><c> had</c><00:05:46.900><c> to</c><00:05:47.020><c> do</c><00:05:47.170><c> here</c><00:05:47.440><c> of</c>

00:05:47.670 --> 00:05:47.680 align:start position:0%
anything that it had to do here of
 

00:05:47.680 --> 00:05:49.500 align:start position:0%
anything that it had to do here of
course<00:05:48.190><c> this</c><00:05:48.340><c> example</c><00:05:48.400><c> of</c><00:05:48.940><c> creating</c><00:05:49.240><c> an</c><00:05:49.300><c> array</c>

00:05:49.500 --> 00:05:49.510 align:start position:0%
course this example of creating an array
 

00:05:49.510 --> 00:05:50.880 align:start position:0%
course this example of creating an array
kind<00:05:49.750><c> of</c><00:05:49.810><c> falls</c><00:05:49.960><c> apart</c><00:05:50.230><c> since</c><00:05:50.440><c> when</c><00:05:50.620><c> I</c><00:05:50.650><c> love</c>

00:05:50.880 --> 00:05:50.890 align:start position:0%
kind of falls apart since when I love
 

00:05:50.890 --> 00:05:52.710 align:start position:0%
kind of falls apart since when I love
are<00:05:50.980><c> creating</c><00:05:51.400><c> it</c><00:05:51.460><c> inside</c><00:05:51.760><c> here</c><00:05:51.970><c> but</c><00:05:52.450><c> we</c><00:05:52.600><c> are</c>

00:05:52.710 --> 00:05:52.720 align:start position:0%
are creating it inside here but we are
 

00:05:52.720 --> 00:05:54.750 align:start position:0%
are creating it inside here but we are
still<00:05:53.020><c> basically</c><00:05:53.530><c> manipulating</c><00:05:54.160><c> it</c><00:05:54.310><c> so</c><00:05:54.550><c> maybe</c>

00:05:54.750 --> 00:05:54.760 align:start position:0%
still basically manipulating it so maybe
 

00:05:54.760 --> 00:05:56.610 align:start position:0%
still basically manipulating it so maybe
this<00:05:54.910><c> could</c><00:05:55.120><c> do</c><00:05:55.210><c> something</c><00:05:55.630><c> like</c><00:05:55.810><c> fill</c><00:05:56.380><c> our</c>

00:05:56.610 --> 00:05:56.620 align:start position:0%
this could do something like fill our
 

00:05:56.620 --> 00:05:58.380 align:start position:0%
this could do something like fill our
array<00:05:56.920><c> and</c><00:05:57.220><c> in</c><00:05:57.550><c> this</c><00:05:57.670><c> sense</c><00:05:57.940><c> we're</c><00:05:58.180><c> just</c>

00:05:58.380 --> 00:05:58.390 align:start position:0%
array and in this sense we're just
 

00:05:58.390 --> 00:06:00.300 align:start position:0%
array and in this sense we're just
passing<00:05:58.750><c> a</c><00:05:58.810><c> pointer</c><00:05:59.230><c> so</c><00:05:59.680><c> it's</c><00:05:59.830><c> not</c><00:05:59.950><c> going</c><00:06:00.220><c> to</c>

00:06:00.300 --> 00:06:00.310 align:start position:0%
passing a pointer so it's not going to
 

00:06:00.310 --> 00:06:02.910 align:start position:0%
passing a pointer so it's not going to
get<00:06:00.510><c> de-allocated</c><00:06:01.510><c> that</c><00:06:01.960><c> array</c><00:06:02.230><c> creation</c><00:06:02.770><c> is</c>

00:06:02.910 --> 00:06:02.920 align:start position:0%
get de-allocated that array creation is
 

00:06:02.920 --> 00:06:04.680 align:start position:0%
get de-allocated that array creation is
a<00:06:02.950><c> classic</c><00:06:03.460><c> mistake</c><00:06:03.580><c> which</c><00:06:04.000><c> I</c><00:06:04.090><c> actually</c><00:06:04.240><c> tend</c>

00:06:04.680 --> 00:06:04.690 align:start position:0%
a classic mistake which I actually tend
 

00:06:04.690 --> 00:06:06.510 align:start position:0%
a classic mistake which I actually tend
to<00:06:04.810><c> say</c><00:06:04.960><c> all</c><00:06:05.080><c> the</c><00:06:05.200><c> time</c><00:06:05.380><c> people</c><00:06:05.590><c> will</c><00:06:05.920><c> create</c><00:06:06.430><c> a</c>

00:06:06.510 --> 00:06:06.520 align:start position:0%
to say all the time people will create a
 

00:06:06.520 --> 00:06:08.070 align:start position:0%
to say all the time people will create a
stack<00:06:06.700><c> based</c><00:06:06.880><c> variable</c><00:06:07.390><c> and</c><00:06:07.570><c> try</c><00:06:07.720><c> to</c><00:06:07.780><c> return</c><00:06:08.050><c> a</c>

00:06:08.070 --> 00:06:08.080 align:start position:0%
stack based variable and try to return a
 

00:06:08.080 --> 00:06:08.850 align:start position:0%
stack based variable and try to return a
pointer<00:06:08.290><c> to</c><00:06:08.470><c> it</c>

00:06:08.850 --> 00:06:08.860 align:start position:0%
pointer to it
 

00:06:08.860 --> 00:06:11.070 align:start position:0%
pointer to it
no<00:06:09.190><c> realizing</c><00:06:09.760><c> that</c><00:06:09.940><c> once</c><00:06:10.510><c> that</c><00:06:10.720><c> function</c>

00:06:11.070 --> 00:06:11.080 align:start position:0%
no realizing that once that function
 

00:06:11.080 --> 00:06:12.240 align:start position:0%
no realizing that once that function
ends<00:06:11.290><c> and</c><00:06:11.440><c> you</c><00:06:11.500><c> go</c><00:06:11.590><c> out</c><00:06:11.710><c> of</c><00:06:11.800><c> scope</c><00:06:12.040><c> that</c>

00:06:12.240 --> 00:06:12.250 align:start position:0%
ends and you go out of scope that
 

00:06:12.250 --> 00:06:13.830 align:start position:0%
ends and you go out of scope that
variables<00:06:12.670><c> done</c><00:06:12.850><c> so</c><00:06:13.150><c> with</c><00:06:13.390><c> this</c><00:06:13.540><c> kind</c><00:06:13.750><c> of</c>

00:06:13.830 --> 00:06:13.840 align:start position:0%
variables done so with this kind of
 

00:06:13.840 --> 00:06:15.540 align:start position:0%
variables done so with this kind of
automatic<00:06:14.350><c> destruction</c><00:06:14.980><c> of</c><00:06:15.100><c> stack</c><00:06:15.370><c> based</c>

00:06:15.540 --> 00:06:15.550 align:start position:0%
automatic destruction of stack based
 

00:06:15.550 --> 00:06:17.100 align:start position:0%
automatic destruction of stack based
variables<00:06:16.090><c> is</c><00:06:16.240><c> there</c><00:06:16.420><c> a</c><00:06:16.450><c> way</c><00:06:16.630><c> that</c><00:06:16.810><c> we</c><00:06:16.900><c> can</c>

00:06:17.100 --> 00:06:17.110 align:start position:0%
variables is there a way that we can
 

00:06:17.110 --> 00:06:18.990 align:start position:0%
variables is there a way that we can
kind<00:06:17.440><c> of</c><00:06:17.650><c> make</c><00:06:17.890><c> it</c><00:06:17.920><c> useful</c><00:06:18.460><c> is</c><00:06:18.640><c> there</c><00:06:18.790><c> a</c><00:06:18.820><c> way</c>

00:06:18.990 --> 00:06:19.000 align:start position:0%
kind of make it useful is there a way
 

00:06:19.000 --> 00:06:21.090 align:start position:0%
kind of make it useful is there a way
that<00:06:19.180><c> we</c><00:06:19.300><c> can</c><00:06:19.480><c> leverage</c><00:06:19.780><c> it</c><00:06:20.080><c> and</c><00:06:20.230><c> use</c><00:06:20.890><c> it</c><00:06:20.920><c> for</c>

00:06:21.090 --> 00:06:21.100 align:start position:0%
that we can leverage it and use it for
 

00:06:21.100 --> 00:06:23.130 align:start position:0%
that we can leverage it and use it for
good<00:06:21.430><c> and</c><00:06:22.030><c> the</c><00:06:22.180><c> answer</c><00:06:22.450><c> is</c><00:06:22.570><c> yes</c><00:06:22.810><c> there</c><00:06:23.110><c> are</c>

00:06:23.130 --> 00:06:23.140 align:start position:0%
good and the answer is yes there are
 

00:06:23.140 --> 00:06:24.510 align:start position:0%
good and the answer is yes there are
plenty<00:06:23.410><c> of</c><00:06:23.680><c> ways</c><00:06:23.890><c> in</c><00:06:24.100><c> which</c><00:06:24.130><c> this</c><00:06:24.460><c> is</c>

00:06:24.510 --> 00:06:24.520 align:start position:0%
plenty of ways in which this is
 

00:06:24.520 --> 00:06:26.219 align:start position:0%
plenty of ways in which this is
incredibly<00:06:25.210><c> useful</c><00:06:25.360><c> and</c><00:06:25.630><c> can</c><00:06:25.810><c> actually</c><00:06:25.930><c> help</c>

00:06:26.219 --> 00:06:26.229 align:start position:0%
incredibly useful and can actually help
 

00:06:26.229 --> 00:06:27.150 align:start position:0%
incredibly useful and can actually help
kind<00:06:26.500><c> of</c><00:06:26.620><c> automate</c>

00:06:27.150 --> 00:06:27.160 align:start position:0%
kind of automate
 

00:06:27.160 --> 00:06:28.590 align:start position:0%
kind of automate
code<00:06:27.340><c> and</c><00:06:27.610><c> one</c><00:06:27.820><c> thing</c><00:06:28.030><c> that</c><00:06:28.060><c> we</c><00:06:28.210><c> can</c><00:06:28.360><c> do</c><00:06:28.450><c> with</c>

00:06:28.590 --> 00:06:28.600 align:start position:0%
code and one thing that we can do with
 

00:06:28.600 --> 00:06:30.750 align:start position:0%
code and one thing that we can do with
this<00:06:28.690><c> is</c><00:06:28.900><c> actually</c><00:06:29.230><c> write</c><00:06:29.440><c> scoped</c><00:06:30.190><c> kind</c><00:06:30.640><c> of</c>

00:06:30.750 --> 00:06:30.760 align:start position:0%
this is actually write scoped kind of
 

00:06:30.760 --> 00:06:33.030 align:start position:0%
this is actually write scoped kind of
classes<00:06:31.480><c> right</c><00:06:31.780><c> such</c><00:06:32.200><c> as</c><00:06:32.230><c> a</c><00:06:32.380><c> smart</c><00:06:32.710><c> pointer</c>

00:06:33.030 --> 00:06:33.040 align:start position:0%
classes right such as a smart pointer
 

00:06:33.040 --> 00:06:34.770 align:start position:0%
classes right such as a smart pointer
like<00:06:33.160><c> unique</c><00:06:33.460><c> pointer</c><00:06:33.820><c> which</c><00:06:33.970><c> is</c><00:06:34.120><c> a</c><00:06:34.300><c> scoped</c>

00:06:34.770 --> 00:06:34.780 align:start position:0%
like unique pointer which is a scoped
 

00:06:34.780 --> 00:06:36.690 align:start position:0%
like unique pointer which is a scoped
pointer<00:06:35.200><c> or</c><00:06:35.590><c> something</c><00:06:35.830><c> like</c><00:06:35.950><c> a</c><00:06:35.980><c> scoped</c><00:06:36.400><c> lock</c>

00:06:36.690 --> 00:06:36.700 align:start position:0%
pointer or something like a scoped lock
 

00:06:36.700 --> 00:06:38.670 align:start position:0%
pointer or something like a scoped lock
that<00:06:37.150><c> there's</c><00:06:37.390><c> a</c><00:06:37.480><c> lot</c><00:06:37.690><c> of</c><00:06:37.810><c> examples</c><00:06:38.110><c> which</c><00:06:38.530><c> we</c>

00:06:38.670 --> 00:06:38.680 align:start position:0%
that there's a lot of examples which we
 

00:06:38.680 --> 00:06:40.320 align:start position:0%
that there's a lot of examples which we
will<00:06:38.860><c> definitely</c><00:06:39.310><c> get</c><00:06:39.400><c> into</c><00:06:39.550><c> in</c><00:06:39.910><c> the</c><00:06:40.000><c> future</c>

00:06:40.320 --> 00:06:40.330 align:start position:0%
will definitely get into in the future
 

00:06:40.330 --> 00:06:41.910 align:start position:0%
will definitely get into in the future
but<00:06:40.570><c> the</c><00:06:40.720><c> simplest</c><00:06:40.990><c> example</c><00:06:41.470><c> is</c><00:06:41.500><c> probably</c><00:06:41.830><c> a</c>

00:06:41.910 --> 00:06:41.920 align:start position:0%
but the simplest example is probably a
 

00:06:41.920 --> 00:06:43.470 align:start position:0%
but the simplest example is probably a
stroked<00:06:42.310><c> pointer</c><00:06:42.820><c> what</c><00:06:42.970><c> that</c><00:06:43.060><c> basically</c><00:06:43.270><c> is</c>

00:06:43.470 --> 00:06:43.480 align:start position:0%
stroked pointer what that basically is
 

00:06:43.480 --> 00:06:45.780 align:start position:0%
stroked pointer what that basically is
is<00:06:43.810><c> a</c><00:06:44.110><c> class</c><00:06:44.440><c> that's</c><00:06:44.710><c> a</c><00:06:44.800><c> wrapper</c><00:06:45.070><c> over</c><00:06:45.730><c> a</c>

00:06:45.780 --> 00:06:45.790 align:start position:0%
is a class that's a wrapper over a
 

00:06:45.790 --> 00:06:47.850 align:start position:0%
is a class that's a wrapper over a
pointer<00:06:46.210><c> which</c><00:06:46.420><c> upon</c><00:06:46.780><c> construction</c><00:06:47.380><c> heap</c>

00:06:47.850 --> 00:06:47.860 align:start position:0%
pointer which upon construction heap
 

00:06:47.860 --> 00:06:49.440 align:start position:0%
pointer which upon construction heap
allocates<00:06:48.340><c> the</c><00:06:48.460><c> pointer</c><00:06:48.880><c> and</c><00:06:49.120><c> then</c><00:06:49.210><c> upon</c>

00:06:49.440 --> 00:06:49.450 align:start position:0%
allocates the pointer and then upon
 

00:06:49.450 --> 00:06:51.270 align:start position:0%
allocates the pointer and then upon
destruction<00:06:49.810><c> deletes</c><00:06:50.530><c> the</c><00:06:50.710><c> pointer</c><00:06:51.070><c> so</c><00:06:51.190><c> we</c>

00:06:51.270 --> 00:06:51.280 align:start position:0%
destruction deletes the pointer so we
 

00:06:51.280 --> 00:06:53.250 align:start position:0%
destruction deletes the pointer so we
can<00:06:51.400><c> kind</c><00:06:51.610><c> of</c><00:06:51.700><c> automate</c><00:06:52.450><c> this</c><00:06:52.660><c> new</c><00:06:52.900><c> and</c><00:06:53.050><c> delete</c>

00:06:53.250 --> 00:06:53.260 align:start position:0%
can kind of automate this new and delete
 

00:06:53.260 --> 00:06:54.840 align:start position:0%
can kind of automate this new and delete
thing<00:06:53.530><c> let's</c><00:06:53.770><c> take</c><00:06:53.920><c> a</c><00:06:53.950><c> look</c><00:06:54.130><c> at</c><00:06:54.280><c> how</c><00:06:54.580><c> we</c><00:06:54.640><c> might</c>

00:06:54.840 --> 00:06:54.850 align:start position:0%
thing let's take a look at how we might
 

00:06:54.850 --> 00:06:56.370 align:start position:0%
thing let's take a look at how we might
write<00:06:55.030><c> a</c><00:06:55.060><c> class</c><00:06:55.240><c> like</c><00:06:55.510><c> that</c><00:06:55.540><c> so</c><00:06:55.900><c> this</c><00:06:56.050><c> entity</c>

00:06:56.370 --> 00:06:56.380 align:start position:0%
write a class like that so this entity
 

00:06:56.380 --> 00:06:58.260 align:start position:0%
write a class like that so this entity
right<00:06:56.770><c> I</c><00:06:56.980><c> want</c><00:06:57.340><c> to</c><00:06:57.400><c> still</c><00:06:57.700><c> allocated</c><00:06:58.150><c> on</c><00:06:58.240><c> the</c>

00:06:58.260 --> 00:06:58.270 align:start position:0%
right I want to still allocated on the
 

00:06:58.270 --> 00:06:59.760 align:start position:0%
right I want to still allocated on the
heap<00:06:58.360><c> I</c><00:06:58.630><c> want</c><00:06:58.840><c> to</c><00:06:58.930><c> call</c><00:06:59.080><c> new</c><00:06:59.320><c> and</c><00:06:59.500><c> all</c><00:06:59.590><c> that</c>

00:06:59.760 --> 00:06:59.770 align:start position:0%
heap I want to call new and all that
 

00:06:59.770 --> 00:07:02.040 align:start position:0%
heap I want to call new and all that
however<00:07:00.250><c> I</c><00:07:00.520><c> wanted</c><00:07:01.000><c> to</c><00:07:01.120><c> automatically</c><00:07:01.840><c> be</c>

00:07:02.040 --> 00:07:02.050 align:start position:0%
however I wanted to automatically be
 

00:07:02.050 --> 00:07:03.930 align:start position:0%
however I wanted to automatically be
deleted<00:07:02.230><c> when</c><00:07:02.710><c> this</c><00:07:02.830><c> goes</c><00:07:03.010><c> out</c><00:07:03.100><c> of</c><00:07:03.160><c> scope</c><00:07:03.340><c> can</c>

00:07:03.930 --> 00:07:03.940 align:start position:0%
deleted when this goes out of scope can
 

00:07:03.940 --> 00:07:05.580 align:start position:0%
deleted when this goes out of scope can
we<00:07:04.090><c> do</c><00:07:04.240><c> that</c><00:07:04.420><c> the</c><00:07:04.630><c> answer</c><00:07:04.840><c> is</c><00:07:04.870><c> yes</c><00:07:05.170><c> so</c><00:07:05.350><c> we</c><00:07:05.440><c> could</c>

00:07:05.580 --> 00:07:05.590 align:start position:0%
we do that the answer is yes so we could
 

00:07:05.590 --> 00:07:06.570 align:start position:0%
we do that the answer is yes so we could
use<00:07:05.740><c> something</c><00:07:05.950><c> in</c><00:07:06.130><c> the</c><00:07:06.190><c> standard</c><00:07:06.490><c> library</c>

00:07:06.570 --> 00:07:06.580 align:start position:0%
use something in the standard library
 

00:07:06.580 --> 00:07:08.040 align:start position:0%
use something in the standard library
called<00:07:06.940><c> a</c><00:07:07.030><c> unique</c><00:07:07.330><c> pointer</c><00:07:07.780><c> which</c><00:07:07.930><c> is</c><00:07:08.020><c> a</c>

00:07:08.040 --> 00:07:08.050 align:start position:0%
called a unique pointer which is a
 

00:07:08.050 --> 00:07:09.780 align:start position:0%
called a unique pointer which is a
scoped<00:07:08.410><c> pointer</c><00:07:08.830><c> but</c><00:07:09.160><c> for</c><00:07:09.340><c> the</c><00:07:09.400><c> purposes</c><00:07:09.670><c> of</c>

00:07:09.780 --> 00:07:09.790 align:start position:0%
scoped pointer but for the purposes of
 

00:07:09.790 --> 00:07:11.190 align:start position:0%
scoped pointer but for the purposes of
this<00:07:09.880><c> example</c><00:07:09.940><c> we'll</c><00:07:10.480><c> write</c><00:07:10.630><c> our</c><00:07:10.660><c> own</c><00:07:10.960><c> so</c><00:07:11.170><c> that</c>

00:07:11.190 --> 00:07:11.200 align:start position:0%
this example we'll write our own so that
 

00:07:11.200 --> 00:07:12.360 align:start position:0%
this example we'll write our own so that
you<00:07:11.320><c> can</c><00:07:11.500><c> see</c><00:07:11.620><c> how</c><00:07:11.740><c> it</c><00:07:11.890><c> works</c>

00:07:12.360 --> 00:07:12.370 align:start position:0%
you can see how it works
 

00:07:12.370 --> 00:07:14.490 align:start position:0%
you can see how it works
I<00:07:12.400><c> write</c><00:07:12.580><c> a</c><00:07:12.610><c> class</c><00:07:12.850><c> called</c><00:07:13.240><c> scarf</c><00:07:13.660><c> 2.0</c><00:07:14.260><c> I'm</c>

00:07:14.490 --> 00:07:14.500 align:start position:0%
I write a class called scarf 2.0 I'm
 

00:07:14.500 --> 00:07:15.930 align:start position:0%
I write a class called scarf 2.0 I'm
going<00:07:14.890><c> to</c><00:07:14.950><c> keep</c><00:07:15.070><c> it</c><00:07:15.160><c> really</c><00:07:15.400><c> simple</c><00:07:15.430><c> for</c><00:07:15.730><c> now</c>

00:07:15.930 --> 00:07:15.940 align:start position:0%
going to keep it really simple for now
 

00:07:15.940 --> 00:07:17.280 align:start position:0%
going to keep it really simple for now
and<00:07:16.150><c> just</c><00:07:16.180><c> hog</c><00:07:16.480><c> credit</c><00:07:16.840><c> to</c><00:07:16.930><c> only</c><00:07:17.080><c> accept</c>

00:07:17.280 --> 00:07:17.290 align:start position:0%
and just hog credit to only accept
 

00:07:17.290 --> 00:07:19.020 align:start position:0%
and just hog credit to only accept
entities<00:07:18.010><c> so</c><00:07:18.370><c> this</c><00:07:18.490><c> will</c><00:07:18.640><c> be</c><00:07:18.730><c> our</c><00:07:18.760><c> actual</c>

00:07:19.020 --> 00:07:19.030 align:start position:0%
entities so this will be our actual
 

00:07:19.030 --> 00:07:21.420 align:start position:0%
entities so this will be our actual
pointer<00:07:19.540><c> upon</c><00:07:20.020><c> construction</c><00:07:20.650><c> I'm</c><00:07:20.830><c> going</c><00:07:21.280><c> to</c>

00:07:21.420 --> 00:07:21.430 align:start position:0%
pointer upon construction I'm going to
 

00:07:21.430 --> 00:07:23.430 align:start position:0%
pointer upon construction I'm going to
write<00:07:21.910><c> a</c><00:07:21.940><c> constructor</c><00:07:22.210><c> which</c><00:07:22.660><c> takes</c><00:07:22.690><c> in</c><00:07:23.140><c> our</c>

00:07:23.430 --> 00:07:23.440 align:start position:0%
write a constructor which takes in our
 

00:07:23.440 --> 00:07:26.070 align:start position:0%
write a constructor which takes in our
entity<00:07:23.920><c> so</c><00:07:24.310><c> this</c><00:07:24.400><c> is</c><00:07:24.460><c> an</c><00:07:24.580><c> MC</c><00:07:24.910><c> point</c><00:07:25.150><c> up</c><00:07:25.330><c> I'm</c>

00:07:26.070 --> 00:07:26.080 align:start position:0%
entity so this is an MC point up I'm
 

00:07:26.080 --> 00:07:28.170 align:start position:0%
entity so this is an MC point up I'm
going<00:07:26.290><c> to</c><00:07:26.380><c> assign</c><00:07:26.710><c> s</c><00:07:26.890><c> to</c><00:07:27.190><c> here</c><00:07:27.490><c> and</c><00:07:27.730><c> upon</c>

00:07:28.170 --> 00:07:28.180 align:start position:0%
going to assign s to here and upon
 

00:07:28.180 --> 00:07:31.380 align:start position:0%
going to assign s to here and upon
destruction<00:07:29.070><c> I'm</c><00:07:30.070><c> going</c><00:07:30.400><c> to</c><00:07:30.490><c> call</c><00:07:30.700><c> delete</c><00:07:31.150><c> and</c>

00:07:31.380 --> 00:07:31.390 align:start position:0%
destruction I'm going to call delete and
 

00:07:31.390 --> 00:07:33.810 align:start position:0%
destruction I'm going to call delete and
point<00:07:32.020><c> up</c><00:07:32.230><c> just</c><00:07:32.650><c> like</c><00:07:32.770><c> that</c><00:07:32.830><c> and</c><00:07:33.280><c> that's</c><00:07:33.520><c> it</c>

00:07:33.810 --> 00:07:33.820 align:start position:0%
point up just like that and that's it
 

00:07:33.820 --> 00:07:36.270 align:start position:0%
point up just like that and that's it
that<00:07:34.030><c> is</c><00:07:34.120><c> a</c><00:07:34.150><c> basic</c><00:07:34.510><c> scoped</c><00:07:35.110><c> pointer</c><00:07:35.560><c> so</c><00:07:35.830><c> let's</c>

00:07:36.270 --> 00:07:36.280 align:start position:0%
that is a basic scoped pointer so let's
 

00:07:36.280 --> 00:07:37.230 align:start position:0%
that is a basic scoped pointer so let's
take<00:07:36.460><c> a</c><00:07:36.490><c> look</c><00:07:36.670><c> at</c><00:07:36.730><c> how</c><00:07:36.820><c> we</c><00:07:36.880><c> can</c><00:07:37.090><c> use</c><00:07:37.210><c> that</c>

00:07:37.230 --> 00:07:37.240 align:start position:0%
take a look at how we can use that
 

00:07:37.240 --> 00:07:39.390 align:start position:0%
take a look at how we can use that
instead<00:07:37.780><c> of</c><00:07:37.900><c> writing</c><00:07:38.110><c> entity</c><00:07:38.650><c> a</c><00:07:38.680><c> equals</c><00:07:39.220><c> new</c>

00:07:39.390 --> 00:07:39.400 align:start position:0%
instead of writing entity a equals new
 

00:07:39.400 --> 00:07:41.820 align:start position:0%
instead of writing entity a equals new
entity<00:07:39.850><c> I'm</c><00:07:40.030><c> actually</c><00:07:40.270><c> going</c><00:07:40.600><c> to</c><00:07:40.780><c> ride</c><00:07:40.990><c> scoped</c>

00:07:41.820 --> 00:07:41.830 align:start position:0%
entity I'm actually going to ride scoped
 

00:07:41.830 --> 00:07:44.130 align:start position:0%
entity I'm actually going to ride scoped
pointer<00:07:42.310><c> E</c><00:07:42.580><c> which</c><00:07:43.330><c> is</c><00:07:43.510><c> basically</c><00:07:44.020><c> our</c>

00:07:44.130 --> 00:07:44.140 align:start position:0%
pointer E which is basically our
 

00:07:44.140 --> 00:07:46.590 align:start position:0%
pointer E which is basically our
variable<00:07:44.500><c> name</c><00:07:44.650><c> equals</c><00:07:44.950><c> new</c><00:07:45.640><c> entity</c><00:07:46.090><c> I</c><00:07:46.300><c> could</c>

00:07:46.590 --> 00:07:46.600 align:start position:0%
variable name equals new entity I could
 

00:07:46.600 --> 00:07:48.630 align:start position:0%
variable name equals new entity I could
have<00:07:46.720><c> also</c><00:07:46.810><c> written</c><00:07:47.169><c> this</c><00:07:47.440><c> like</c><00:07:48.040><c> so</c><00:07:48.340><c> with</c><00:07:48.580><c> the</c>

00:07:48.630 --> 00:07:48.640 align:start position:0%
have also written this like so with the
 

00:07:48.640 --> 00:07:50.310 align:start position:0%
have also written this like so with the
default<00:07:48.940><c> constructor</c><00:07:49.090><c> but</c><00:07:49.480><c> just</c><00:07:49.960><c> to</c><00:07:50.020><c> keep</c><00:07:50.169><c> it</c>

00:07:50.310 --> 00:07:50.320 align:start position:0%
default constructor but just to keep it
 

00:07:50.320 --> 00:07:52.530 align:start position:0%
default constructor but just to keep it
similar<00:07:50.650><c> to</c><00:07:50.680><c> what</c><00:07:50.950><c> it</c><00:07:51.040><c> was</c><00:07:51.070><c> before</c><00:07:51.820><c> it</c><00:07:52.270><c> kind</c><00:07:52.450><c> of</c>

00:07:52.530 --> 00:07:52.540 align:start position:0%
similar to what it was before it kind of
 

00:07:52.540 --> 00:07:53.880 align:start position:0%
similar to what it was before it kind of
looks<00:07:52.690><c> the</c><00:07:52.750><c> same</c><00:07:52.930><c> and</c><00:07:53.230><c> of</c><00:07:53.350><c> course</c><00:07:53.530><c> this</c><00:07:53.680><c> works</c>

00:07:53.880 --> 00:07:53.890 align:start position:0%
looks the same and of course this works
 

00:07:53.890 --> 00:07:55.950 align:start position:0%
looks the same and of course this works
due<00:07:54.190><c> to</c><00:07:54.310><c> implicit</c><00:07:54.640><c> conversion</c><00:07:55.300><c> so</c><00:07:55.570><c> this</c><00:07:55.600><c> kind</c>

00:07:55.950 --> 00:07:55.960 align:start position:0%
due to implicit conversion so this kind
 

00:07:55.960 --> 00:07:57.600 align:start position:0%
due to implicit conversion so this kind
of<00:07:55.990><c> looks</c><00:07:56.200><c> like</c><00:07:56.350><c> identical</c><00:07:56.950><c> code</c><00:07:57.220><c> but</c><00:07:57.520><c> the</c>

00:07:57.600 --> 00:07:57.610 align:start position:0%
of looks like identical code but the
 

00:07:57.610 --> 00:07:59.730 align:start position:0%
of looks like identical code but the
difference<00:07:58.090><c> is</c><00:07:58.300><c> that</c><00:07:58.510><c> this</c><00:07:59.080><c> will</c><00:07:59.410><c> actually</c>

00:07:59.730 --> 00:07:59.740 align:start position:0%
difference is that this will actually
 

00:07:59.740 --> 00:08:01.470 align:start position:0%
difference is that this will actually
get<00:07:59.890><c> destroyed</c><00:08:00.370><c> once</c><00:08:00.760><c> we</c><00:08:00.910><c> go</c><00:08:01.030><c> out</c><00:08:01.150><c> of</c><00:08:01.240><c> scope</c>

00:08:01.470 --> 00:08:01.480 align:start position:0%
get destroyed once we go out of scope
 

00:08:01.480 --> 00:08:03.570 align:start position:0%
get destroyed once we go out of scope
because<00:08:01.750><c> of</c><00:08:01.990><c> course</c><00:08:02.230><c> the</c><00:08:02.710><c> scoped</c><00:08:03.070><c> pointer</c>

00:08:03.570 --> 00:08:03.580 align:start position:0%
because of course the scoped pointer
 

00:08:03.580 --> 00:08:06.270 align:start position:0%
because of course the scoped pointer
class<00:08:03.790><c> itself</c><00:08:04.300><c> the</c><00:08:04.900><c> scoped</c><00:08:05.440><c> pointer</c><00:08:05.800><c> object</c>

00:08:06.270 --> 00:08:06.280 align:start position:0%
class itself the scoped pointer object
 

00:08:06.280 --> 00:08:08.970 align:start position:0%
class itself the scoped pointer object
gets<00:08:06.850><c> allocated</c><00:08:07.060><c> on</c><00:08:07.600><c> the</c><00:08:07.660><c> stack</c><00:08:07.840><c> which</c><00:08:08.740><c> means</c>

00:08:08.970 --> 00:08:08.980 align:start position:0%
gets allocated on the stack which means
 

00:08:08.980 --> 00:08:10.830 align:start position:0%
gets allocated on the stack which means
that<00:08:09.130><c> it</c><00:08:09.340><c> gets</c><00:08:09.520><c> deleted</c><00:08:09.880><c> and</c><00:08:10.150><c> when</c><00:08:10.390><c> it</c><00:08:10.630><c> gets</c>

00:08:10.830 --> 00:08:10.840 align:start position:0%
that it gets deleted and when it gets
 

00:08:10.840 --> 00:08:12.990 align:start position:0%
that it gets deleted and when it gets
deleted<00:08:11.169><c> automatically</c><00:08:11.740><c> equals</c><00:08:12.310><c> delete</c><00:08:12.760><c> in</c>

00:08:12.990 --> 00:08:13.000 align:start position:0%
deleted automatically equals delete in
 

00:08:13.000 --> 00:08:15.090 align:start position:0%
deleted automatically equals delete in
the<00:08:13.300><c> destructor</c><00:08:13.810><c> which</c><00:08:14.260><c> deletes</c><00:08:14.560><c> that</c><00:08:14.800><c> that</c>

00:08:15.090 --> 00:08:15.100 align:start position:0%
the destructor which deletes that that
 

00:08:15.100 --> 00:08:17.730 align:start position:0%
the destructor which deletes that that
pointer<00:08:15.580><c> that</c><00:08:15.700><c> it's</c><00:08:15.850><c> wrapping</c><00:08:16.180><c> so</c><00:08:16.840><c> if</c><00:08:17.320><c> we</c><00:08:17.500><c> put</c>

00:08:17.730 --> 00:08:17.740 align:start position:0%
pointer that it's wrapping so if we put
 

00:08:17.740 --> 00:08:19.890 align:start position:0%
pointer that it's wrapping so if we put
a<00:08:17.770><c> breakpoint</c><00:08:18.100><c> here</c><00:08:18.430><c> and</c><00:08:18.760><c> hit</c><00:08:18.880><c> f5</c><00:08:19.270><c> will</c>

00:08:19.890 --> 00:08:19.900 align:start position:0%
a breakpoint here and hit f5 will
 

00:08:19.900 --> 00:08:21.960 align:start position:0%
a breakpoint here and hit f5 will
advance<00:08:20.169><c> one</c><00:08:20.410><c> line</c><00:08:20.560><c> forward</c><00:08:20.860><c> check</c><00:08:21.730><c> our</c>

00:08:21.960 --> 00:08:21.970 align:start position:0%
advance one line forward check our
 

00:08:21.970 --> 00:08:23.970 align:start position:0%
advance one line forward check our
console<00:08:22.900><c> we</c><00:08:23.110><c> see</c><00:08:23.140><c> we</c><00:08:23.350><c> can</c><00:08:23.470><c> see</c><00:08:23.590><c> the</c><00:08:23.680><c> work-ready</c>

00:08:23.970 --> 00:08:23.980 align:start position:0%
console we see we can see the work-ready
 

00:08:23.980 --> 00:08:26.190 align:start position:0%
console we see we can see the work-ready
mantasy<00:08:24.520><c> and</c><00:08:24.700><c> then</c><00:08:25.300><c> one</c><00:08:25.480><c> line</c><00:08:25.660><c> forward</c><00:08:25.900><c> again</c>

00:08:26.190 --> 00:08:26.200 align:start position:0%
mantasy and then one line forward again
 

00:08:26.200 --> 00:08:27.870 align:start position:0%
mantasy and then one line forward again
and<00:08:26.410><c> check</c><00:08:26.980><c> this</c><00:08:27.070><c> out</c><00:08:27.220><c> we</c><00:08:27.400><c> destroyed</c><00:08:27.730><c> our</c>

00:08:27.870 --> 00:08:27.880 align:start position:0%
and check this out we destroyed our
 

00:08:27.880 --> 00:08:29.670 align:start position:0%
and check this out we destroyed our
entity<00:08:28.210><c> even</c><00:08:28.660><c> though</c><00:08:28.780><c> we</c><00:08:28.960><c> use</c><00:08:29.140><c> new</c><00:08:29.440><c> to</c>

00:08:29.670 --> 00:08:29.680 align:start position:0%
entity even though we use new to
 

00:08:29.680 --> 00:08:30.540 align:start position:0%
entity even though we use new to
heap-allocated

00:08:30.540 --> 00:08:30.550 align:start position:0%
heap-allocated
 

00:08:30.550 --> 00:08:32.700 align:start position:0%
heap-allocated
and<00:08:30.669><c> that</c><00:08:31.210><c> is</c><00:08:31.480><c> a</c><00:08:31.540><c> great</c><00:08:31.900><c> example</c><00:08:31.990><c> of</c><00:08:32.410><c> first</c><00:08:32.620><c> of</c>

00:08:32.700 --> 00:08:32.710 align:start position:0%
and that is a great example of first of
 

00:08:32.710 --> 00:08:34.440 align:start position:0%
and that is a great example of first of
all<00:08:32.800><c> what</c><00:08:33.010><c> a</c><00:08:33.310><c> very</c><00:08:33.640><c> basic</c><00:08:33.789><c> smart</c><00:08:34.120><c> pointer</c>

00:08:34.440 --> 00:08:34.450 align:start position:0%
all what a very basic smart pointer
 

00:08:34.450 --> 00:08:36.060 align:start position:0%
all what a very basic smart pointer
called<00:08:34.660><c> unique</c><00:08:34.900><c> pointer</c><00:08:35.260><c> does</c><00:08:35.410><c> we're</c><00:08:35.919><c> going</c>

00:08:36.060 --> 00:08:36.070 align:start position:0%
called unique pointer does we're going
 

00:08:36.070 --> 00:08:37.709 align:start position:0%
called unique pointer does we're going
to<00:08:36.160><c> have</c><00:08:36.250><c> an</c><00:08:36.370><c> entire</c><00:08:36.760><c> video</c><00:08:37.060><c> dedicated</c><00:08:37.270><c> to</c>

00:08:37.709 --> 00:08:37.719 align:start position:0%
to have an entire video dedicated to
 

00:08:37.719 --> 00:08:38.830 align:start position:0%
to have an entire video dedicated to
smart<00:08:38.020><c> pointers</c><00:08:38.380><c> various</c>

00:08:38.830 --> 00:08:38.840 align:start position:0%
smart pointers various
 

00:08:38.840 --> 00:08:41.230 align:start position:0%
smart pointers various
you<00:08:38.900><c> know</c><00:08:39.140><c> people</c><00:08:39.530><c> have</c><00:08:39.680><c> been</c><00:08:39.830><c> like</c><00:08:40.240><c> people</c>

00:08:41.230 --> 00:08:41.240 align:start position:0%
you know people have been like people
 

00:08:41.240 --> 00:08:42.880 align:start position:0%
you know people have been like people
have<00:08:41.330><c> been</c><00:08:41.480><c> complaining</c><00:08:41.630><c> about</c><00:08:42.110><c> me</c><00:08:42.260><c> using</c><00:08:42.740><c> new</c>

00:08:42.880 --> 00:08:42.890 align:start position:0%
have been complaining about me using new
 

00:08:42.890 --> 00:08:43.990 align:start position:0%
have been complaining about me using new
and<00:08:42.920><c> not</c><00:08:43.130><c> using</c><00:08:43.370><c> smart</c><00:08:43.610><c> pointers</c><00:08:43.880><c> and</c>

00:08:43.990 --> 00:08:44.000 align:start position:0%
and not using smart pointers and
 

00:08:44.000 --> 00:08:46.540 align:start position:0%
and not using smart pointers and
teaching<00:08:44.240><c> bad</c><00:08:44.480><c> C++</c><00:08:45.200><c> we're</c><00:08:45.950><c> gonna</c><00:08:46.040><c> have</c><00:08:46.250><c> a</c><00:08:46.280><c> real</c>

00:08:46.540 --> 00:08:46.550 align:start position:0%
teaching bad C++ we're gonna have a real
 

00:08:46.550 --> 00:08:48.430 align:start position:0%
teaching bad C++ we're gonna have a real
little<00:08:46.940><c> chat</c><00:08:47.240><c> about</c><00:08:47.600><c> that</c><00:08:47.780><c> later</c><00:08:48.020><c> by</c><00:08:48.200><c> the</c><00:08:48.230><c> way</c>

00:08:48.430 --> 00:08:48.440 align:start position:0%
little chat about that later by the way
 

00:08:48.440 --> 00:08:49.630 align:start position:0%
little chat about that later by the way
but<00:08:48.650><c> for</c><00:08:48.800><c> all</c><00:08:48.890><c> of</c><00:08:48.920><c> you</c><00:08:49.070><c> waiting</c><00:08:49.310><c> for</c><00:08:49.340><c> smart</c>

00:08:49.630 --> 00:08:49.640 align:start position:0%
but for all of you waiting for smart
 

00:08:49.640 --> 00:08:50.740 align:start position:0%
but for all of you waiting for smart
pointers<00:08:50.030><c> we're</c><00:08:50.180><c> definitely</c><00:08:50.360><c> gonna</c><00:08:50.600><c> do</c><00:08:50.720><c> a</c>

00:08:50.740 --> 00:08:50.750 align:start position:0%
pointers we're definitely gonna do a
 

00:08:50.750 --> 00:08:52.030 align:start position:0%
pointers we're definitely gonna do a
video<00:08:51.020><c> on</c><00:08:51.080><c> that</c><00:08:51.140><c> very</c><00:08:51.410><c> very</c><00:08:51.470><c> soon</c><00:08:51.860><c> because</c>

00:08:52.030 --> 00:08:52.040 align:start position:0%
video on that very very soon because
 

00:08:52.040 --> 00:08:53.290 align:start position:0%
video on that very very soon because
they're<00:08:52.310><c> a</c><00:08:52.340><c> very</c><00:08:52.520><c> important</c><00:08:52.910><c> part</c><00:08:53.120><c> of</c><00:08:53.180><c> the</c>

00:08:53.290 --> 00:08:53.300 align:start position:0%
they're a very important part of the
 

00:08:53.300 --> 00:08:54.580 align:start position:0%
they're a very important part of the
language<00:08:53.630><c> so</c><00:08:53.870><c> this</c><00:08:53.990><c> kind</c><00:08:54.200><c> of</c><00:08:54.230><c> automatic</c>

00:08:54.580 --> 00:08:54.590 align:start position:0%
language so this kind of automatic
 

00:08:54.590 --> 00:08:56.290 align:start position:0%
language so this kind of automatic
creation<00:08:54.740><c> an</c><00:08:55.040><c> automatic</c><00:08:55.400><c> destruction</c><00:08:55.880><c> that</c>

00:08:56.290 --> 00:08:56.300 align:start position:0%
creation an automatic destruction that
 

00:08:56.300 --> 00:08:58.510 align:start position:0%
creation an automatic destruction that
we<00:08:56.450><c> can</c><00:08:56.570><c> kind</c><00:08:56.720><c> of</c><00:08:56.810><c> get</c><00:08:57.260><c> from</c><00:08:57.800><c> the</c><00:08:57.950><c> fact</c><00:08:58.220><c> that</c><00:08:58.370><c> a</c>

00:08:58.510 --> 00:08:58.520 align:start position:0%
we can kind of get from the fact that a
 

00:08:58.520 --> 00:09:00.700 align:start position:0%
we can kind of get from the fact that a
stack<00:08:58.940><c> based</c><00:08:59.150><c> variable</c><00:08:59.720><c> goes</c><00:09:00.290><c> out</c><00:09:00.500><c> of</c><00:09:00.530><c> scope</c>

00:09:00.700 --> 00:09:00.710 align:start position:0%
stack based variable goes out of scope
 

00:09:00.710 --> 00:09:02.410 align:start position:0%
stack based variable goes out of scope
and<00:09:00.950><c> gets</c><00:09:01.190><c> destroyed</c><00:09:01.580><c> is</c><00:09:01.790><c> actually</c><00:09:02.150><c> really</c>

00:09:02.410 --> 00:09:02.420 align:start position:0%
and gets destroyed is actually really
 

00:09:02.420 --> 00:09:04.540 align:start position:0%
and gets destroyed is actually really
useful<00:09:02.570><c> and</c><00:09:02.960><c> there</c><00:09:03.200><c> are</c><00:09:03.320><c> plenty</c><00:09:03.560><c> there</c><00:09:04.430><c> are</c>

00:09:04.540 --> 00:09:04.550 align:start position:0%
useful and there are plenty there are
 

00:09:04.550 --> 00:09:06.310 align:start position:0%
useful and there are plenty there are
plenty<00:09:04.790><c> of</c><00:09:05.060><c> more</c><00:09:05.210><c> examples</c><00:09:05.390><c> just</c><00:09:05.690><c> to</c><00:09:05.960><c> name</c>

00:09:06.310 --> 00:09:06.320 align:start position:0%
plenty of more examples just to name
 

00:09:06.320 --> 00:09:07.990 align:start position:0%
plenty of more examples just to name
another<00:09:06.680><c> one</c><00:09:07.100><c> off</c><00:09:07.220><c> the</c><00:09:07.310><c> top</c><00:09:07.460><c> of</c><00:09:07.490><c> my</c><00:09:07.610><c> head</c><00:09:07.790><c> a</c>

00:09:07.990 --> 00:09:08.000 align:start position:0%
another one off the top of my head a
 

00:09:08.000 --> 00:09:09.910 align:start position:0%
another one off the top of my head a
timer<00:09:08.450><c> let's</c><00:09:08.810><c> just</c><00:09:08.930><c> say</c><00:09:09.020><c> you</c><00:09:09.110><c> wanted</c><00:09:09.350><c> time</c><00:09:09.620><c> how</c>

00:09:09.910 --> 00:09:09.920 align:start position:0%
timer let's just say you wanted time how
 

00:09:09.920 --> 00:09:11.260 align:start position:0%
timer let's just say you wanted time how
long<00:09:10.100><c> you</c><00:09:10.250><c> are</c><00:09:10.400><c> inside</c><00:09:10.670><c> a</c><00:09:10.700><c> scope</c><00:09:11.030><c> for</c>

00:09:11.260 --> 00:09:11.270 align:start position:0%
long you are inside a scope for
 

00:09:11.270 --> 00:09:12.970 align:start position:0%
long you are inside a scope for
benchmarking<00:09:11.990><c> or</c><00:09:12.110><c> something</c><00:09:12.470><c> you</c><00:09:12.860><c> could</c>

00:09:12.970 --> 00:09:12.980 align:start position:0%
benchmarking or something you could
 

00:09:12.980 --> 00:09:14.320 align:start position:0%
benchmarking or something you could
write<00:09:13.130><c> a</c><00:09:13.160><c> time</c><00:09:13.370><c> a</c><00:09:13.400><c> class</c><00:09:13.640><c> which</c><00:09:13.850><c> starts</c><00:09:14.240><c> the</c>

00:09:14.320 --> 00:09:14.330 align:start position:0%
write a time a class which starts the
 

00:09:14.330 --> 00:09:16.150 align:start position:0%
write a time a class which starts the
timer<00:09:14.600><c> upon</c><00:09:15.140><c> construction</c><00:09:15.650><c> of</c><00:09:15.710><c> the</c><00:09:15.800><c> object</c>

00:09:16.150 --> 00:09:16.160 align:start position:0%
timer upon construction of the object
 

00:09:16.160 --> 00:09:17.920 align:start position:0%
timer upon construction of the object
and<00:09:16.280><c> that</c><00:09:16.610><c> stops</c><00:09:16.880><c> the</c><00:09:17.000><c> time</c><00:09:17.240><c> I</c><00:09:17.270><c> maybe</c><00:09:17.600><c> prints</c>

00:09:17.920 --> 00:09:17.930 align:start position:0%
and that stops the time I maybe prints
 

00:09:17.930 --> 00:09:20.200 align:start position:0%
and that stops the time I maybe prints
the<00:09:18.020><c> result</c><00:09:18.170><c> or</c><00:09:18.500><c> whatever</c><00:09:18.980><c> when</c><00:09:19.760><c> the</c><00:09:19.910><c> object</c>

00:09:20.200 --> 00:09:20.210 align:start position:0%
the result or whatever when the object
 

00:09:20.210 --> 00:09:22.420 align:start position:0%
the result or whatever when the object
when<00:09:20.720><c> the</c><00:09:20.750><c> timer</c><00:09:21.020><c> object</c><00:09:21.170><c> gets</c><00:09:21.590><c> destroyed</c><00:09:22.070><c> so</c>

00:09:22.420 --> 00:09:22.430 align:start position:0%
when the timer object gets destroyed so
 

00:09:22.430 --> 00:09:23.530 align:start position:0%
when the timer object gets destroyed so
suddenly<00:09:22.670><c> you've</c><00:09:22.790><c> got</c><00:09:22.820><c> an</c><00:09:23.000><c> automatic</c><00:09:23.420><c> timer</c>

00:09:23.530 --> 00:09:23.540 align:start position:0%
suddenly you've got an automatic timer
 

00:09:23.540 --> 00:09:24.970 align:start position:0%
suddenly you've got an automatic timer
you<00:09:23.780><c> just</c><00:09:23.960><c> write</c><00:09:24.080><c> one</c><00:09:24.350><c> line</c><00:09:24.530><c> of</c><00:09:24.650><c> code</c><00:09:24.680><c> at</c><00:09:24.920><c> the</c>

00:09:24.970 --> 00:09:24.980 align:start position:0%
you just write one line of code at the
 

00:09:24.980 --> 00:09:26.860 align:start position:0%
you just write one line of code at the
beginning<00:09:25.250><c> of</c><00:09:25.340><c> your</c><00:09:25.430><c> function</c><00:09:25.850><c> and</c><00:09:26.060><c> that</c>

00:09:26.860 --> 00:09:26.870 align:start position:0%
beginning of your function and that
 

00:09:26.870 --> 00:09:28.660 align:start position:0%
beginning of your function and that
entire<00:09:27.170><c> scope</c><00:09:27.470><c> is</c><00:09:27.710><c> going</c><00:09:27.950><c> to</c><00:09:28.070><c> now</c><00:09:28.160><c> be</c><00:09:28.220><c> timed</c>

00:09:28.660 --> 00:09:28.670 align:start position:0%
entire scope is going to now be timed
 

00:09:28.670 --> 00:09:30.100 align:start position:0%
entire scope is going to now be timed
and<00:09:28.880><c> you</c><00:09:29.030><c> turn</c><00:09:29.150><c> and</c><00:09:29.360><c> you</c><00:09:29.420><c> never</c><00:09:29.570><c> have</c><00:09:29.810><c> to</c><00:09:29.960><c> call</c>

00:09:30.100 --> 00:09:30.110 align:start position:0%
and you turn and you never have to call
 

00:09:30.110 --> 00:09:32.110 align:start position:0%
and you turn and you never have to call
time<00:09:30.380><c> it'll</c><00:09:30.590><c> stop</c><00:09:30.890><c> or</c><00:09:31.130><c> whatever</c><00:09:31.700><c> manually</c>

00:09:32.110 --> 00:09:32.120 align:start position:0%
time it'll stop or whatever manually
 

00:09:32.120 --> 00:09:33.160 align:start position:0%
time it'll stop or whatever manually
because<00:09:32.240><c> as</c><00:09:32.450><c> soon</c><00:09:32.570><c> as</c><00:09:32.660><c> it</c><00:09:32.750><c> goes</c><00:09:32.840><c> out</c><00:09:32.990><c> of</c><00:09:33.020><c> scope</c>

00:09:33.160 --> 00:09:33.170 align:start position:0%
because as soon as it goes out of scope
 

00:09:33.170 --> 00:09:35.350 align:start position:0%
because as soon as it goes out of scope
and<00:09:33.560><c> calls</c><00:09:34.190><c> that</c><00:09:34.340><c> for</c><00:09:34.730><c> you</c><00:09:34.850><c> automatically</c>

00:09:35.350 --> 00:09:35.360 align:start position:0%
and calls that for you automatically
 

00:09:35.360 --> 00:09:37.270 align:start position:0%
and calls that for you automatically
it's<00:09:35.540><c> really</c><00:09:36.290><c> amazing</c><00:09:36.470><c> and</c><00:09:36.740><c> there's</c><00:09:36.890><c> so</c><00:09:37.160><c> many</c>

00:09:37.270 --> 00:09:37.280 align:start position:0%
it's really amazing and there's so many
 

00:09:37.280 --> 00:09:39.610 align:start position:0%
it's really amazing and there's so many
uses<00:09:37.580><c> for</c><00:09:37.730><c> it</c><00:09:38.000><c> another</c><00:09:38.210><c> one</c><00:09:38.360><c> is</c><00:09:38.510><c> mutex</c><00:09:39.170><c> locking</c>

00:09:39.610 --> 00:09:39.620 align:start position:0%
uses for it another one is mutex locking
 

00:09:39.620 --> 00:09:40.960 align:start position:0%
uses for it another one is mutex locking
if<00:09:39.710><c> you</c><00:09:39.800><c> want</c><00:09:39.920><c> to</c><00:09:39.980><c> lock</c><00:09:40.070><c> a</c><00:09:40.130><c> function</c><00:09:40.670><c> so</c><00:09:40.850><c> the</c>

00:09:40.960 --> 00:09:40.970 align:start position:0%
if you want to lock a function so the
 

00:09:40.970 --> 00:09:42.520 align:start position:0%
if you want to lock a function so the
multiple<00:09:41.240><c> threads</c><00:09:41.480><c> can't</c><00:09:41.750><c> access</c><00:09:42.140><c> it</c><00:09:42.290><c> at</c><00:09:42.410><c> the</c>

00:09:42.520 --> 00:09:42.530 align:start position:0%
multiple threads can't access it at the
 

00:09:42.530 --> 00:09:44.260 align:start position:0%
multiple threads can't access it at the
same<00:09:42.710><c> time</c><00:09:43.040><c> and</c><00:09:43.250><c> caused</c><00:09:43.400><c> an</c><00:09:43.520><c> explosion</c><00:09:43.640><c> you</c>

00:09:44.260 --> 00:09:44.270 align:start position:0%
same time and caused an explosion you
 

00:09:44.270 --> 00:09:46.630 align:start position:0%
same time and caused an explosion you
can<00:09:44.810><c> have</c><00:09:45.140><c> an</c><00:09:45.290><c> automatic</c><00:09:45.650><c> scoped</c><00:09:46.040><c> lock</c><00:09:46.310><c> which</c>

00:09:46.630 --> 00:09:46.640 align:start position:0%
can have an automatic scoped lock which
 

00:09:46.640 --> 00:09:48.700 align:start position:0%
can have an automatic scoped lock which
at<00:09:47.090><c> the</c><00:09:47.180><c> beginning</c><00:09:47.270><c> of</c><00:09:47.540><c> the</c><00:09:47.630><c> function</c><00:09:47.780><c> locks</c>

00:09:48.700 --> 00:09:48.710 align:start position:0%
at the beginning of the function locks
 

00:09:48.710 --> 00:09:49.750 align:start position:0%
at the beginning of the function locks
it<00:09:48.920><c> and</c><00:09:48.950><c> at</c><00:09:49.190><c> the</c><00:09:49.310><c> end</c><00:09:49.430><c> of</c><00:09:49.490><c> the</c><00:09:49.580><c> function</c>

00:09:49.750 --> 00:09:49.760 align:start position:0%
it and at the end of the function
 

00:09:49.760 --> 00:09:52.570 align:start position:0%
it and at the end of the function
unlocks<00:09:50.600><c> it</c><00:09:50.810><c> and</c><00:09:50.990><c> the</c><00:09:51.620><c> Reds</c><00:09:51.800><c> are</c><00:09:52.040><c> coming</c><00:09:52.070><c> soon</c>

00:09:52.570 --> 00:09:52.580 align:start position:0%
unlocks it and the Reds are coming soon
 

00:09:52.580 --> 00:09:54.850 align:start position:0%
unlocks it and the Reds are coming soon
I<00:09:52.730><c> really</c><00:09:53.000><c> can't</c><00:09:53.270><c> wait</c><00:09:53.330><c> to</c><00:09:53.510><c> get</c><00:09:53.810><c> into</c><00:09:54.050><c> the</c><00:09:54.590><c> more</c>

00:09:54.850 --> 00:09:54.860 align:start position:0%
I really can't wait to get into the more
 

00:09:54.860 --> 00:09:57.580 align:start position:0%
I really can't wait to get into the more
kind<00:09:55.070><c> of</c><00:09:55.250><c> complicated</c><00:09:56.060><c> and</c><00:09:56.180><c> fun</c><00:09:56.570><c> stuff</c><00:09:56.930><c> in</c><00:09:57.050><c> C++</c>

00:09:57.580 --> 00:09:57.590 align:start position:0%
kind of complicated and fun stuff in C++
 

00:09:57.590 --> 00:09:59.860 align:start position:0%
kind of complicated and fun stuff in C++
so<00:09:57.770><c> don't</c><00:09:57.950><c> you</c><00:09:58.040><c> worry</c><00:09:58.190><c> many</c><00:09:59.030><c> more</c><00:09:59.300><c> videos</c><00:09:59.630><c> are</c>

00:09:59.860 --> 00:09:59.870 align:start position:0%
so don't you worry many more videos are
 

00:09:59.870 --> 00:10:01.330 align:start position:0%
so don't you worry many more videos are
coming<00:10:00.140><c> hope</c><00:10:00.620><c> you</c><00:10:00.680><c> guys</c><00:10:00.830><c> enjoyed</c><00:10:01.070><c> this</c><00:10:01.160><c> video</c>

00:10:01.330 --> 00:10:01.340 align:start position:0%
coming hope you guys enjoyed this video
 

00:10:01.340 --> 00:10:02.800 align:start position:0%
coming hope you guys enjoyed this video
if<00:10:01.640><c> you</c><00:10:01.700><c> did</c><00:10:01.820><c> you</c><00:10:01.970><c> hit</c><00:10:02.090><c> that</c><00:10:02.180><c> like</c><00:10:02.450><c> button</c><00:10:02.480><c> I</c>

00:10:02.800 --> 00:10:02.810 align:start position:0%
if you did you hit that like button I
 

00:10:02.810 --> 00:10:04.030 align:start position:0%
if you did you hit that like button I
think<00:10:02.840><c> is</c><00:10:03.050><c> in</c><00:10:03.140><c> that</c><00:10:03.200><c> corner</c><00:10:03.650><c> I</c><00:10:03.680><c> will</c><00:10:03.830><c> always</c>

00:10:04.030 --> 00:10:04.040 align:start position:0%
think is in that corner I will always
 

00:10:04.040 --> 00:10:05.080 align:start position:0%
think is in that corner I will always
pointing<00:10:04.370><c> over</c><00:10:04.430><c> there</c><00:10:04.640><c> and</c><00:10:04.790><c> all</c><00:10:04.880><c> the</c><00:10:04.970><c> other</c>

00:10:05.080 --> 00:10:05.090 align:start position:0%
pointing over there and all the other
 

00:10:05.090 --> 00:10:06.310 align:start position:0%
pointing over there and all the other
videos<00:10:05.360><c> but</c><00:10:05.450><c> I</c><00:10:05.510><c> think</c><00:10:05.660><c> it's</c><00:10:05.780><c> here</c><00:10:05.930><c> so</c><00:10:06.140><c> now</c><00:10:06.260><c> that</c>

00:10:06.310 --> 00:10:06.320 align:start position:0%
videos but I think it's here so now that
 

00:10:06.320 --> 00:10:07.870 align:start position:0%
videos but I think it's here so now that
you<00:10:06.500><c> know</c><00:10:06.620><c> where</c><00:10:06.800><c> it</c><00:10:06.830><c> is</c><00:10:07.070><c> you</c><00:10:07.400><c> can</c><00:10:07.430><c> click</c><00:10:07.730><c> it</c>

00:10:07.870 --> 00:10:07.880 align:start position:0%
you know where it is you can click it
 

00:10:07.880 --> 00:10:09.400 align:start position:0%
you know where it is you can click it
you<00:10:08.150><c> can</c><00:10:08.270><c> also</c><00:10:08.360><c> help</c><00:10:08.630><c> support</c><00:10:08.720><c> this</c><00:10:09.020><c> series</c><00:10:09.290><c> on</c>

00:10:09.400 --> 00:10:09.410 align:start position:0%
you can also help support this series on
 

00:10:09.410 --> 00:10:11.530 align:start position:0%
you can also help support this series on
patreon<00:10:09.830><c> by</c><00:10:10.010><c> going</c><00:10:10.190><c> to</c><00:10:10.370><c> patreon</c><00:10:11.090><c> at</c><00:10:11.180><c> home</c><00:10:11.330><c> for</c>

00:10:11.530 --> 00:10:11.540 align:start position:0%
patreon by going to patreon at home for
 

00:10:11.540 --> 00:10:13.600 align:start position:0%
patreon by going to patreon at home for
sash<00:10:11.780><c> the</c><00:10:11.990><c> churner</c><00:10:12.590><c> there's</c><00:10:13.070><c> plenty</c><00:10:13.340><c> of</c><00:10:13.400><c> cool</c>

00:10:13.600 --> 00:10:13.610 align:start position:0%
sash the churner there's plenty of cool
 

00:10:13.610 --> 00:10:15.310 align:start position:0%
sash the churner there's plenty of cool
rewards<00:10:14.060><c> that</c><00:10:14.120><c> you</c><00:10:14.180><c> can</c><00:10:14.360><c> get</c><00:10:14.510><c> access</c><00:10:14.690><c> to</c><00:10:14.900><c> such</c>

00:10:15.310 --> 00:10:15.320 align:start position:0%
rewards that you can get access to such
 

00:10:15.320 --> 00:10:17.350 align:start position:0%
rewards that you can get access to such
as<00:10:15.530><c> a</c><00:10:15.560><c> private</c><00:10:16.070><c> discord</c><00:10:16.550><c> chat</c><00:10:16.790><c> where</c><00:10:16.970><c> we</c><00:10:17.060><c> plan</c>

00:10:17.350 --> 00:10:17.360 align:start position:0%
as a private discord chat where we plan
 

00:10:17.360 --> 00:10:18.940 align:start position:0%
as a private discord chat where we plan
these<00:10:17.510><c> videos</c><00:10:17.870><c> you</c><00:10:18.260><c> can</c><00:10:18.380><c> request</c><00:10:18.710><c> whatever</c>

00:10:18.940 --> 00:10:18.950 align:start position:0%
these videos you can request whatever
 

00:10:18.950 --> 00:10:20.530 align:start position:0%
these videos you can request whatever
you<00:10:19.190><c> like</c><00:10:19.340><c> you</c><00:10:19.580><c> can</c><00:10:19.700><c> ask</c><00:10:19.820><c> me</c><00:10:19.970><c> any</c><00:10:20.120><c> questions</c>

00:10:20.530 --> 00:10:20.540 align:start position:0%
you like you can ask me any questions
 

00:10:20.540 --> 00:10:22.480 align:start position:0%
you like you can ask me any questions
you<00:10:20.600><c> want</c><00:10:20.780><c> there</c><00:10:21.020><c> as</c><00:10:21.140><c> well</c><00:10:21.320><c> and</c><00:10:21.470><c> I</c><00:10:21.590><c> of</c><00:10:22.010><c> course</c><00:10:22.220><c> I</c>

00:10:22.480 --> 00:10:22.490 align:start position:0%
you want there as well and I of course I
 

00:10:22.490 --> 00:10:24.820 align:start position:0%
you want there as well and I of course I
I<00:10:23.030><c> of</c><00:10:23.360><c> course</c><00:10:23.510><c> answer</c><00:10:23.930><c> all</c><00:10:24.080><c> of</c><00:10:24.110><c> my</c><00:10:24.350><c> patrons</c>

00:10:24.820 --> 00:10:24.830 align:start position:0%
I of course answer all of my patrons
 

00:10:24.830 --> 00:10:26.200 align:start position:0%
I of course answer all of my patrons
because<00:10:25.130><c> why</c><00:10:25.250><c> wouldn't</c><00:10:25.640><c> I</c><00:10:25.790><c> but</c><00:10:26.000><c> the</c><00:10:26.090><c> most</c>

00:10:26.200 --> 00:10:26.210 align:start position:0%
because why wouldn't I but the most
 

00:10:26.210 --> 00:10:27.820 align:start position:0%
because why wouldn't I but the most
important<00:10:26.660><c> thing</c><00:10:26.780><c> you</c><00:10:26.930><c> do</c><00:10:27.050><c> by</c><00:10:27.200><c> supporting</c><00:10:27.710><c> is</c>

00:10:27.820 --> 00:10:27.830 align:start position:0%
important thing you do by supporting is
 

00:10:27.830 --> 00:10:29.290 align:start position:0%
important thing you do by supporting is
just<00:10:27.980><c> making</c><00:10:28.280><c> sure</c><00:10:28.430><c> that</c><00:10:28.460><c> I</c><00:10:28.670><c> can</c><00:10:28.820><c> make</c><00:10:28.970><c> more</c><00:10:29.210><c> of</c>

00:10:29.290 --> 00:10:29.300 align:start position:0%
just making sure that I can make more of
 

00:10:29.300 --> 00:10:31.210 align:start position:0%
just making sure that I can make more of
these<00:10:29.420><c> videos</c><00:10:29.780><c> and</c><00:10:29.810><c> get</c><00:10:30.110><c> them</c><00:10:30.230><c> out</c><00:10:30.380><c> as</c><00:10:30.740><c> fast</c><00:10:31.070><c> as</c>

00:10:31.210 --> 00:10:31.220 align:start position:0%
these videos and get them out as fast as
 

00:10:31.220 --> 00:10:32.890 align:start position:0%
these videos and get them out as fast as
possible<00:10:31.610><c> so</c><00:10:31.640><c> a</c><00:10:31.790><c> huge</c><00:10:32.090><c> thank</c><00:10:32.150><c> you</c><00:10:32.450><c> to</c><00:10:32.540><c> all</c><00:10:32.660><c> of</c>

00:10:32.890 --> 00:10:32.900 align:start position:0%
possible so a huge thank you to all of
 

00:10:32.900 --> 00:10:34.420 align:start position:0%
possible so a huge thank you to all of
my<00:10:33.050><c> supporters</c><00:10:33.290><c> on</c><00:10:33.680><c> that</c><00:10:33.860><c> I</c><00:10:34.010><c> will</c><00:10:34.250><c> see</c><00:10:34.340><c> you</c>

00:10:34.420 --> 00:10:34.430 align:start position:0%
my supporters on that I will see you
 

00:10:34.430 --> 00:10:35.800 align:start position:0%
my supporters on that I will see you
guys<00:10:34.490><c> next</c><00:10:34.790><c> time</c><00:10:34.940><c> I</c><00:10:35.090><c> think</c><00:10:35.240><c> next</c><00:10:35.420><c> time</c><00:10:35.660><c> we're</c>

00:10:35.800 --> 00:10:35.810 align:start position:0%
guys next time I think next time we're
 

00:10:35.810 --> 00:10:37.210 align:start position:0%
guys next time I think next time we're
gonna<00:10:35.870><c> finally</c><00:10:36.260><c> talk</c><00:10:36.380><c> about</c><00:10:36.560><c> smart</c><00:10:36.770><c> pointers</c>

00:10:37.210 --> 00:10:37.220 align:start position:0%
gonna finally talk about smart pointers
 

00:10:37.220 --> 00:10:39.180 align:start position:0%
gonna finally talk about smart pointers
because<00:10:37.840><c> well</c>

00:10:39.180 --> 00:10:39.190 align:start position:0%
because well
 

00:10:39.190 --> 00:10:42.550 align:start position:0%
because well
yeah<00:10:39.820><c> I'll</c><00:10:40.660><c> see</c><00:10:40.840><c> you</c><00:10:40.870><c> guys</c><00:10:41.020><c> next</c><00:10:41.170><c> time</c><00:10:41.350><c> goodbye</c>

00:10:42.550 --> 00:10:42.560 align:start position:0%
yeah I'll see you guys next time goodbye
 

00:10:42.560 --> 00:10:58.150 align:start position:0%
yeah I'll see you guys next time goodbye
[Music]

