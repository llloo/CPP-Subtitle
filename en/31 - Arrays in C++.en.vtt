WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.579 align:start position:0%
 
hey<00:00:00.149><c> little</c><00:00:00.420><c> guys</c><00:00:00.599><c> my</c><00:00:00.930><c> name</c><00:00:01.110><c> is</c><00:00:01.140><c> the</c><00:00:01.350><c> Cherno</c>

00:00:01.579 --> 00:00:01.589 align:start position:0%
hey little guys my name is the Cherno
 

00:00:01.589 --> 00:00:03.110 align:start position:0%
hey little guys my name is the Cherno
and<00:00:01.800><c> welcome</c><00:00:02.070><c> back</c><00:00:02.190><c> to</c><00:00:02.370><c> my</c><00:00:02.490><c> sequel</c><00:00:02.879><c> club</c>

00:00:03.110 --> 00:00:03.120 align:start position:0%
and welcome back to my sequel club
 

00:00:03.120 --> 00:00:04.970 align:start position:0%
and welcome back to my sequel club
series<00:00:03.510><c> I'm</c><00:00:03.720><c> back</c><00:00:03.899><c> home</c><00:00:04.080><c> in</c><00:00:04.140><c> Melbourne</c><00:00:04.589><c> now</c><00:00:04.710><c> so</c>

00:00:04.970 --> 00:00:04.980 align:start position:0%
series I'm back home in Melbourne now so
 

00:00:04.980 --> 00:00:06.619 align:start position:0%
series I'm back home in Melbourne now so
no<00:00:05.130><c> more</c><00:00:05.160><c> crazy</c><00:00:05.670><c> hotel</c><00:00:06.120><c> rooms</c><00:00:06.330><c> or</c><00:00:06.450><c> anything</c>

00:00:06.619 --> 00:00:06.629 align:start position:0%
no more crazy hotel rooms or anything
 

00:00:06.629 --> 00:00:09.740 align:start position:0%
no more crazy hotel rooms or anything
minutes<00:00:06.990><c> to</c><00:00:07.170><c> go</c><00:00:07.379><c> to</c><00:00:07.770><c> call</c><00:00:08.040><c> this</c><00:00:08.510><c> studio</c><00:00:09.510><c> and</c>

00:00:09.740 --> 00:00:09.750 align:start position:0%
minutes to go to call this studio and
 

00:00:09.750 --> 00:00:11.540 align:start position:0%
minutes to go to call this studio and
today<00:00:10.080><c> when</c><00:00:10.290><c> we</c><00:00:10.380><c> told</c><00:00:10.559><c> me</c><00:00:10.620><c> about</c><00:00:10.710><c> a</c><00:00:10.950><c> raid</c><00:00:11.190><c> in</c>

00:00:11.540 --> 00:00:11.550 align:start position:0%
today when we told me about a raid in
 

00:00:11.550 --> 00:00:12.379 align:start position:0%
today when we told me about a raid in
super<00:00:11.969><c> Club</c>

00:00:12.379 --> 00:00:12.389 align:start position:0%
super Club
 

00:00:12.389 --> 00:00:13.610 align:start position:0%
super Club
so<00:00:12.509><c> before</c><00:00:12.719><c> we</c><00:00:12.809><c> start</c><00:00:12.990><c> talking</c><00:00:13.080><c> about</c><00:00:13.259><c> a</c><00:00:13.380><c> raise</c>

00:00:13.610 --> 00:00:13.620 align:start position:0%
so before we start talking about a raise
 

00:00:13.620 --> 00:00:14.539 align:start position:0%
so before we start talking about a raise
it's<00:00:13.830><c> really</c><00:00:14.040><c> important</c><00:00:14.370><c> that</c><00:00:14.400><c> you</c>

00:00:14.539 --> 00:00:14.549 align:start position:0%
it's really important that you
 

00:00:14.549 --> 00:00:16.250 align:start position:0%
it's really important that you
understand<00:00:14.910><c> what</c><00:00:14.969><c> pointers</c><00:00:15.509><c> are</c><00:00:15.690><c> I'm</c><00:00:16.080><c> an</c>

00:00:16.250 --> 00:00:16.260 align:start position:0%
understand what pointers are I'm an
 

00:00:16.260 --> 00:00:17.960 align:start position:0%
understand what pointers are I'm an
entire<00:00:16.590><c> video</c><00:00:16.859><c> based</c><00:00:17.160><c> on</c><00:00:17.310><c> pointers</c><00:00:17.760><c> there</c>

00:00:17.960 --> 00:00:17.970 align:start position:0%
entire video based on pointers there
 

00:00:17.970 --> 00:00:19.519 align:start position:0%
entire video based on pointers there
will<00:00:18.270><c> be</c><00:00:18.300><c> a</c><00:00:18.390><c> card</c><00:00:18.690><c> on</c><00:00:18.810><c> the</c><00:00:18.900><c> screen</c><00:00:19.140><c> or</c><00:00:19.260><c> a</c><00:00:19.320><c> link</c>

00:00:19.519 --> 00:00:19.529 align:start position:0%
will be a card on the screen or a link
 

00:00:19.529 --> 00:00:20.720 align:start position:0%
will be a card on the screen or a link
in<00:00:19.650><c> the</c><00:00:19.710><c> description</c><00:00:20.070><c> below</c><00:00:20.189><c> definitely</c>

00:00:20.720 --> 00:00:20.730 align:start position:0%
in the description below definitely
 

00:00:20.730 --> 00:00:22.160 align:start position:0%
in the description below definitely
check<00:00:20.880><c> that</c><00:00:20.910><c> out</c><00:00:21.060><c> first</c><00:00:21.420><c> before</c><00:00:21.900><c> this</c><00:00:21.990><c> video</c>

00:00:22.160 --> 00:00:22.170 align:start position:0%
check that out first before this video
 

00:00:22.170 --> 00:00:23.720 align:start position:0%
check that out first before this video
point<00:00:22.650><c> is</c><00:00:22.769><c> a</c><00:00:22.859><c> pretty</c><00:00:23.100><c> much</c><00:00:23.220><c> debate</c><00:00:23.519><c> for</c>

00:00:23.720 --> 00:00:23.730 align:start position:0%
point is a pretty much debate for
 

00:00:23.730 --> 00:00:25.340 align:start position:0%
point is a pretty much debate for
salaried<00:00:24.300><c> working</c><00:00:24.660><c> typify</c><00:00:25.080><c> so</c><00:00:25.140><c> you</c>

00:00:25.340 --> 00:00:25.350 align:start position:0%
salaried working typify so you
 

00:00:25.350 --> 00:00:26.660 align:start position:0%
salaried working typify so you
definitely<00:00:25.410><c> need</c><00:00:25.710><c> to</c><00:00:25.740><c> understand</c><00:00:26.160><c> that</c><00:00:26.310><c> so</c>

00:00:26.660 --> 00:00:26.670 align:start position:0%
definitely need to understand that so
 

00:00:26.670 --> 00:00:28.490 align:start position:0%
definitely need to understand that so
first<00:00:26.849><c> of</c><00:00:27.000><c> all</c><00:00:27.119><c> what</c><00:00:27.359><c> is</c><00:00:27.390><c> an</c><00:00:27.810><c> array</c><00:00:27.930><c> and</c><00:00:28.349><c> array</c>

00:00:28.490 --> 00:00:28.500 align:start position:0%
first of all what is an array and array
 

00:00:28.500 --> 00:00:30.800 align:start position:0%
first of all what is an array and array
exactly<00:00:29.099><c> a</c><00:00:29.130><c> collection</c><00:00:29.789><c> or</c><00:00:29.880><c> element</c><00:00:30.359><c> it's</c><00:00:30.599><c> a</c>

00:00:30.800 --> 00:00:30.810 align:start position:0%
exactly a collection or element it's a
 

00:00:30.810 --> 00:00:32.990 align:start position:0%
exactly a collection or element it's a
bunch<00:00:31.080><c> of</c><00:00:31.230><c> things</c><00:00:31.650><c> in</c><00:00:31.980><c> a</c><00:00:32.160><c> particular</c><00:00:32.250><c> order</c><00:00:32.700><c> in</c>

00:00:32.990 --> 00:00:33.000 align:start position:0%
bunch of things in a particular order in
 

00:00:33.000 --> 00:00:34.670 align:start position:0%
bunch of things in a particular order in
our<00:00:33.180><c> case</c><00:00:33.450><c> and</c><00:00:33.719><c> tablecloth</c><00:00:34.170><c> and</c><00:00:34.350><c> arranged</c>

00:00:34.670 --> 00:00:34.680 align:start position:0%
our case and tablecloth and arranged
 

00:00:34.680 --> 00:00:36.260 align:start position:0%
our case and tablecloth and arranged
basically<00:00:35.130><c> a</c><00:00:35.160><c> way</c><00:00:35.370><c> to</c><00:00:35.430><c> represent</c><00:00:35.760><c> a</c>

00:00:36.260 --> 00:00:36.270 align:start position:0%
basically a way to represent a
 

00:00:36.270 --> 00:00:38.810 align:start position:0%
basically a way to represent a
collection<00:00:36.899><c> of</c><00:00:37.050><c> variables</c><00:00:37.620><c> is</c><00:00:37.950><c> basically</c><00:00:38.730><c> a</c>

00:00:38.810 --> 00:00:38.820 align:start position:0%
collection of variables is basically a
 

00:00:38.820 --> 00:00:40.790 align:start position:0%
collection of variables is basically a
bunch<00:00:39.090><c> of</c><00:00:39.239><c> variables</c><00:00:39.660><c> usually</c><00:00:40.469><c> at</c><00:00:40.530><c> the</c><00:00:40.620><c> same</c>

00:00:40.790 --> 00:00:40.800 align:start position:0%
bunch of variables usually at the same
 

00:00:40.800 --> 00:00:42.770 align:start position:0%
bunch of variables usually at the same
time<00:00:41.010><c> in</c><00:00:41.309><c> a</c><00:00:41.489><c> row</c><00:00:41.760><c> the</c><00:00:42.120><c> reason</c><00:00:42.390><c> is</c><00:00:42.510><c> it's</c><00:00:42.660><c> so</c>

00:00:42.770 --> 00:00:42.780 align:start position:0%
time in a row the reason is it's so
 

00:00:42.780 --> 00:00:44.360 align:start position:0%
time in a row the reason is it's so
important<00:00:43.170><c> and</c><00:00:43.290><c> so</c><00:00:43.440><c> useful</c><00:00:43.680><c> it's</c><00:00:44.010><c> because</c>

00:00:44.360 --> 00:00:44.370 align:start position:0%
important and so useful it's because
 

00:00:44.370 --> 00:00:46.279 align:start position:0%
important and so useful it's because
there<00:00:44.969><c> are</c><00:00:45.120><c> countless</c><00:00:45.510><c> times</c><00:00:45.780><c> where</c><00:00:46.020><c> we</c><00:00:46.110><c> want</c>

00:00:46.279 --> 00:00:46.289 align:start position:0%
there are countless times where we want
 

00:00:46.289 --> 00:00:47.450 align:start position:0%
there are countless times where we want
to<00:00:46.379><c> be</c><00:00:46.440><c> able</c><00:00:46.530><c> to</c><00:00:46.649><c> represent</c><00:00:46.829><c> a</c><00:00:47.250><c> whole</c>

00:00:47.450 --> 00:00:47.460 align:start position:0%
to be able to represent a whole
 

00:00:47.460 --> 00:00:50.299 align:start position:0%
to be able to represent a whole
collection<00:00:47.969><c> of</c><00:00:48.239><c> data</c><00:00:48.780><c> a</c><00:00:49.170><c> whole</c><00:00:49.500><c> bunch</c><00:00:49.770><c> of</c><00:00:50.010><c> data</c>

00:00:50.299 --> 00:00:50.309 align:start position:0%
collection of data a whole bunch of data
 

00:00:50.309 --> 00:00:52.010 align:start position:0%
collection of data a whole bunch of data
and<00:00:50.670><c> it</c><00:00:50.910><c> just</c><00:00:51.090><c> doesn't</c><00:00:51.360><c> make</c><00:00:51.420><c> sense</c><00:00:51.480><c> for</c><00:00:51.899><c> us</c><00:00:51.960><c> to</c>

00:00:52.010 --> 00:00:52.020 align:start position:0%
and it just doesn't make sense for us to
 

00:00:52.020 --> 00:00:53.930 align:start position:0%
and it just doesn't make sense for us to
create<00:00:52.379><c> a</c><00:00:52.410><c> whole</c><00:00:52.739><c> bunch</c><00:00:52.980><c> of</c><00:00:53.129><c> variables</c><00:00:53.579><c> that</c>

00:00:53.930 --> 00:00:53.940 align:start position:0%
create a whole bunch of variables that
 

00:00:53.940 --> 00:00:56.150 align:start position:0%
create a whole bunch of variables that
really<00:00:54.750><c> should</c><00:00:54.989><c> be</c><00:00:55.110><c> grouped</c><00:00:55.379><c> together</c><00:00:55.530><c> in</c><00:00:55.949><c> one</c>

00:00:56.150 --> 00:00:56.160 align:start position:0%
really should be grouped together in one
 

00:00:56.160 --> 00:00:58.010 align:start position:0%
really should be grouped together in one
data<00:00:56.430><c> set</c><00:00:56.699><c> because</c><00:00:56.969><c> variables</c><00:00:57.629><c> need</c><00:00:57.809><c> to</c><00:00:57.899><c> be</c>

00:00:58.010 --> 00:00:58.020 align:start position:0%
data set because variables need to be
 

00:00:58.020 --> 00:00:59.959 align:start position:0%
data set because variables need to be
created<00:00:58.379><c> manually</c><00:00:58.770><c> we</c><00:00:59.039><c> need</c><00:00:59.160><c> to</c><00:00:59.309><c> actually</c><00:00:59.520><c> go</c>

00:00:59.959 --> 00:00:59.969 align:start position:0%
created manually we need to actually go
 

00:00:59.969 --> 00:01:02.090 align:start position:0%
created manually we need to actually go
into<00:01:00.180><c> the</c><00:01:00.270><c> code</c><00:01:00.449><c> and</c><00:01:00.780><c> specify</c><00:01:01.440><c> variables</c><00:01:01.949><c> and</c>

00:01:02.090 --> 00:01:02.100 align:start position:0%
into the code and specify variables and
 

00:01:02.100 --> 00:01:04.369 align:start position:0%
into the code and specify variables and
give<00:01:02.250><c> them</c><00:01:02.399><c> name</c><00:01:02.730><c> whereas</c><00:01:03.539><c> sometimes</c><00:01:03.960><c> we</c><00:01:04.229><c> just</c>

00:01:04.369 --> 00:01:04.379 align:start position:0%
give them name whereas sometimes we just
 

00:01:04.379 --> 00:01:06.590 align:start position:0%
give them name whereas sometimes we just
want<00:01:04.439><c> to</c><00:01:04.589><c> be</c><00:01:04.650><c> able</c><00:01:04.710><c> to</c><00:01:04.890><c> store</c><00:01:05.100><c> say</c><00:01:05.400><c> 50</c><00:01:06.000><c> integers</c>

00:01:06.590 --> 00:01:06.600 align:start position:0%
want to be able to store say 50 integers
 

00:01:06.600 --> 00:01:08.990 align:start position:0%
want to be able to store say 50 integers
that<00:01:06.810><c> represent</c><00:01:07.770><c> some</c><00:01:07.979><c> sort</c><00:01:08.220><c> of</c><00:01:08.280><c> data</c><00:01:08.520><c> we</c>

00:01:08.990 --> 00:01:09.000 align:start position:0%
that represent some sort of data we
 

00:01:09.000 --> 00:01:10.100 align:start position:0%
that represent some sort of data we
don't<00:01:09.060><c> want</c><00:01:09.240><c> to</c><00:01:09.299><c> have</c><00:01:09.390><c> to</c><00:01:09.479><c> specify</c><00:01:09.689><c> like</c>

00:01:10.100 --> 00:01:10.110 align:start position:0%
don't want to have to specify like
 

00:01:10.110 --> 00:01:12.649 align:start position:0%
don't want to have to specify like
integer<00:01:10.470><c> number</c><00:01:10.710><c> one</c><00:01:10.890><c> is</c><00:01:11.159><c> number</c><00:01:11.580><c> two</c><00:01:11.760><c> and</c><00:01:12.000><c> so</c>

00:01:12.649 --> 00:01:12.659 align:start position:0%
integer number one is number two and so
 

00:01:12.659 --> 00:01:14.510 align:start position:0%
integer number one is number two and so
on<00:01:12.689><c> all</c><00:01:13.020><c> the</c><00:01:13.049><c> way</c><00:01:13.200><c> to</c><00:01:13.260><c> 50</c><00:01:13.650><c> because</c><00:01:13.770><c> that</c><00:01:14.159><c> first</c>

00:01:14.510 --> 00:01:14.520 align:start position:0%
on all the way to 50 because that first
 

00:01:14.520 --> 00:01:16.760 align:start position:0%
on all the way to 50 because that first
of<00:01:14.670><c> all</c><00:01:14.790><c> is</c><00:01:15.000><c> just</c><00:01:15.299><c> like</c><00:01:15.630><c> that's</c><00:01:15.810><c> just</c><00:01:15.930><c> terrible</c>

00:01:16.760 --> 00:01:16.770 align:start position:0%
of all is just like that's just terrible
 

00:01:16.770 --> 00:01:18.080 align:start position:0%
of all is just like that's just terrible
because<00:01:16.979><c> that</c><00:01:17.189><c> that's</c><00:01:17.460><c> just</c><00:01:17.670><c> that's</c>

00:01:18.080 --> 00:01:18.090 align:start position:0%
because that that's just that's
 

00:01:18.090 --> 00:01:19.940 align:start position:0%
because that that's just that's
completely<00:01:18.750><c> unfeasible</c><00:01:19.080><c> and</c><00:01:19.380><c> unmaintainable</c>

00:01:19.940 --> 00:01:19.950 align:start position:0%
completely unfeasible and unmaintainable
 

00:01:19.950 --> 00:01:22.010 align:start position:0%
completely unfeasible and unmaintainable
imagine<00:01:20.580><c> having</c><00:01:20.759><c> to</c><00:01:20.970><c> set</c><00:01:21.210><c> all</c><00:01:21.390><c> the</c><00:01:21.420><c> variable</c>

00:01:22.010 --> 00:01:22.020 align:start position:0%
imagine having to set all the variable
 

00:01:22.020 --> 00:01:23.450 align:start position:0%
imagine having to set all the variable
to<00:01:22.140><c> zero</c><00:01:22.170><c> you</c><00:01:22.500><c> literally</c><00:01:22.860><c> have</c><00:01:23.070><c> to</c><00:01:23.100><c> write</c><00:01:23.310><c> 50</c>

00:01:23.450 --> 00:01:23.460 align:start position:0%
to zero you literally have to write 50
 

00:01:23.460 --> 00:01:25.310 align:start position:0%
to zero you literally have to write 50
lines<00:01:23.729><c> of</c><00:01:23.850><c> code</c><00:01:24.090><c> that</c><00:01:24.299><c> you</c><00:01:24.659><c> set</c><00:01:24.869><c> all</c><00:01:25.080><c> of</c><00:01:25.110><c> your</c>

00:01:25.310 --> 00:01:25.320 align:start position:0%
lines of code that you set all of your
 

00:01:25.320 --> 00:01:27.620 align:start position:0%
lines of code that you set all of your
characters<00:01:25.530><c> zero</c><00:01:26.070><c> manually</c><00:01:26.520><c> really</c><00:01:27.390><c> really</c>

00:01:27.620 --> 00:01:27.630 align:start position:0%
characters zero manually really really
 

00:01:27.630 --> 00:01:29.899 align:start position:0%
characters zero manually really really
hard<00:01:27.869><c> to</c><00:01:28.049><c> deal</c><00:01:28.320><c> with</c><00:01:28.560><c> a</c><00:01:28.740><c> lot</c><00:01:28.979><c> of</c><00:01:29.009><c> variables</c><00:01:29.670><c> so</c>

00:01:29.899 --> 00:01:29.909 align:start position:0%
hard to deal with a lot of variables so
 

00:01:29.909 --> 00:01:31.460 align:start position:0%
hard to deal with a lot of variables so
what<00:01:30.210><c> we</c><00:01:30.299><c> want</c><00:01:30.450><c> to</c><00:01:30.479><c> do</c><00:01:30.600><c> in</c><00:01:30.689><c> that</c><00:01:30.840><c> case</c><00:01:30.900><c> is</c><00:01:31.140><c> just</c>

00:01:31.460 --> 00:01:31.470 align:start position:0%
what we want to do in that case is just
 

00:01:31.470 --> 00:01:33.980 align:start position:0%
what we want to do in that case is just
use<00:01:31.770><c> an</c><00:01:31.950><c> array</c><00:01:32.280><c> to</c><00:01:32.549><c> contain</c><00:01:33.030><c> all</c><00:01:33.270><c> those</c><00:01:33.479><c> 50</c>

00:01:33.980 --> 00:01:33.990 align:start position:0%
use an array to contain all those 50
 

00:01:33.990 --> 00:01:35.480 align:start position:0%
use an array to contain all those 50
elements<00:01:34.229><c> or</c><00:01:34.530><c> the</c><00:01:34.619><c> same</c><00:01:34.799><c> type</c><00:01:34.829><c> in</c><00:01:35.220><c> this</c><00:01:35.280><c> case</c>

00:01:35.480 --> 00:01:35.490 align:start position:0%
elements or the same type in this case
 

00:01:35.490 --> 00:01:37.850 align:start position:0%
elements or the same type in this case
integers<00:01:36.119><c> to</c><00:01:36.600><c> make</c><00:01:36.750><c> our</c><00:01:36.900><c> life</c><00:01:37.079><c> much</c><00:01:37.560><c> much</c>

00:01:37.850 --> 00:01:37.860 align:start position:0%
integers to make our life much much
 

00:01:37.860 --> 00:01:38.330 align:start position:0%
integers to make our life much much
easier

00:01:38.330 --> 00:01:38.340 align:start position:0%
easier
 

00:01:38.340 --> 00:01:40.310 align:start position:0%
easier
so<00:01:38.579><c> just</c><00:01:38.729><c> remember</c><00:01:38.880><c> an</c><00:01:39.270><c> arrange</c><00:01:39.600><c> is</c><00:01:39.840><c> basically</c>

00:01:40.310 --> 00:01:40.320 align:start position:0%
so just remember an arrange is basically
 

00:01:40.320 --> 00:01:42.350 align:start position:0%
so just remember an arrange is basically
like<00:01:40.560><c> having</c><00:01:40.590><c> multiple</c><00:01:41.040><c> variables</c><00:01:41.759><c> in</c><00:01:42.030><c> one</c>

00:01:42.350 --> 00:01:42.360 align:start position:0%
like having multiple variables in one
 

00:01:42.360 --> 00:01:44.600 align:start position:0%
like having multiple variables in one
variable<00:01:42.840><c> we</c><00:01:43.170><c> give</c><00:01:43.320><c> an</c><00:01:43.409><c> array</c><00:01:43.680><c> a</c><00:01:43.710><c> single</c><00:01:44.340><c> name</c>

00:01:44.600 --> 00:01:44.610 align:start position:0%
variable we give an array a single name
 

00:01:44.610 --> 00:01:46.969 align:start position:0%
variable we give an array a single name
and<00:01:44.939><c> through</c><00:01:45.299><c> that</c><00:01:45.479><c> we</c><00:01:45.720><c> can</c><00:01:45.869><c> refer</c><00:01:46.170><c> to</c><00:01:46.200><c> as</c><00:01:46.710><c> many</c>

00:01:46.969 --> 00:01:46.979 align:start position:0%
and through that we can refer to as many
 

00:01:46.979 --> 00:01:48.740 align:start position:0%
and through that we can refer to as many
variables<00:01:47.280><c> as</c><00:01:47.549><c> we</c><00:01:47.909><c> create</c><00:01:48.210><c> a</c><00:01:48.240><c> be</c><00:01:48.360><c> arrayed</c><00:01:48.600><c> with</c>

00:01:48.740 --> 00:01:48.750 align:start position:0%
variables as we create a be arrayed with
 

00:01:48.750 --> 00:01:50.030 align:start position:0%
variables as we create a be arrayed with
let's<00:01:49.140><c> let</c><00:01:49.259><c> me</c><00:01:49.320><c> do</c><00:01:49.439><c> some</c><00:01:49.590><c> code</c><00:01:49.770><c> and</c><00:01:49.890><c> take</c><00:01:49.979><c> a</c>

00:01:50.030 --> 00:01:50.040 align:start position:0%
let's let me do some code and take a
 

00:01:50.040 --> 00:01:51.620 align:start position:0%
let's let me do some code and take a
look<00:01:50.220><c> so</c><00:01:50.430><c> defining</c><00:01:50.700><c> an</c><00:01:50.850><c> array</c><00:01:51.060><c> is</c><00:01:51.360><c> quite</c>

00:01:51.620 --> 00:01:51.630 align:start position:0%
look so defining an array is quite
 

00:01:51.630 --> 00:01:53.149 align:start position:0%
look so defining an array is quite
simple<00:01:51.990><c> suppose</c><00:01:52.320><c> that</c><00:01:52.439><c> I</c><00:01:52.530><c> wanted</c><00:01:52.799><c> an</c><00:01:52.890><c> array</c><00:01:53.130><c> of</c>

00:01:53.149 --> 00:01:53.159 align:start position:0%
simple suppose that I wanted an array of
 

00:01:53.159 --> 00:01:55.130 align:start position:0%
simple suppose that I wanted an array of
five<00:01:53.579><c> integers</c><00:01:54.000><c> I</c><00:01:54.360><c> would</c><00:01:54.540><c> simply</c><00:01:54.689><c> write</c><00:01:54.930><c> any</c>

00:01:55.130 --> 00:01:55.140 align:start position:0%
five integers I would simply write any
 

00:01:55.140 --> 00:01:57.289 align:start position:0%
five integers I would simply write any
type<00:01:55.409><c> that</c><00:01:55.770><c> I</c><00:01:55.829><c> want</c><00:01:56.009><c> the</c><00:01:56.130><c> array</c><00:01:56.399><c> of</c><00:01:56.670><c> I</c><00:01:56.939><c> would</c>

00:01:57.289 --> 00:01:57.299 align:start position:0%
type that I want the array of I would
 

00:01:57.299 --> 00:01:59.270 align:start position:0%
type that I want the array of I would
then<00:01:57.420><c> give</c><00:01:57.570><c> it</c><00:01:57.600><c> a</c><00:01:57.719><c> name</c><00:01:57.869><c> for</c><00:01:58.170><c> example</c><00:01:58.280><c> example</c>

00:01:59.270 --> 00:01:59.280 align:start position:0%
then give it a name for example example
 

00:01:59.280 --> 00:02:01.520 align:start position:0%
then give it a name for example example
and<00:01:59.430><c> then</c><00:01:59.850><c> in</c><00:02:00.180><c> square</c><00:02:00.479><c> brackets</c><00:02:01.020><c> I</c><00:02:01.079><c> put</c><00:02:01.320><c> how</c>

00:02:01.520 --> 00:02:01.530 align:start position:0%
and then in square brackets I put how
 

00:02:01.530 --> 00:02:03.740 align:start position:0%
and then in square brackets I put how
many<00:02:01.770><c> I</c><00:02:01.890><c> want</c><00:02:02.280><c> so</c><00:02:02.579><c> we'll</c><00:02:02.909><c> just</c><00:02:03.090><c> say</c><00:02:03.240><c> five</c><00:02:03.479><c> and</c>

00:02:03.740 --> 00:02:03.750 align:start position:0%
many I want so we'll just say five and
 

00:02:03.750 --> 00:02:06.050 align:start position:0%
many I want so we'll just say five and
that's<00:02:04.049><c> it</c><00:02:04.320><c> I</c><00:02:04.469><c> now</c><00:02:04.740><c> have</c><00:02:04.979><c> an</c><00:02:05.070><c> array</c><00:02:05.340><c> of</c><00:02:05.369><c> five</c>

00:02:06.050 --> 00:02:06.060 align:start position:0%
that's it I now have an array of five
 

00:02:06.060 --> 00:02:08.529 align:start position:0%
that's it I now have an array of five
integers<00:02:06.509><c> I've</c><00:02:06.869><c> basically</c><00:02:07.200><c> allocated</c><00:02:08.099><c> enough</c>

00:02:08.529 --> 00:02:08.539 align:start position:0%
integers I've basically allocated enough
 

00:02:08.539 --> 00:02:11.229 align:start position:0%
integers I've basically allocated enough
to<00:02:09.049><c> store</c><00:02:09.319><c> five</c><00:02:09.649><c> integers</c><00:02:10.069><c> now</c><00:02:10.729><c> in</c><00:02:10.969><c> order</c><00:02:11.120><c> to</c>

00:02:11.229 --> 00:02:11.239 align:start position:0%
to store five integers now in order to
 

00:02:11.239 --> 00:02:13.539 align:start position:0%
to store five integers now in order to
actually<00:02:11.390><c> set</c><00:02:11.840><c> and</c><00:02:12.110><c> access</c><00:02:12.560><c> those</c><00:02:12.769><c> integers</c><00:02:13.159><c> I</c>

00:02:13.539 --> 00:02:13.549 align:start position:0%
actually set and access those integers I
 

00:02:13.549 --> 00:02:15.729 align:start position:0%
actually set and access those integers I
can<00:02:14.060><c> write</c><00:02:14.209><c> the</c><00:02:14.390><c> name</c><00:02:14.599><c> of</c><00:02:14.629><c> the</c><00:02:14.810><c> array</c><00:02:15.170><c> and</c><00:02:15.500><c> then</c>

00:02:15.729 --> 00:02:15.739 align:start position:0%
can write the name of the array and then
 

00:02:15.739 --> 00:02:17.289 align:start position:0%
can write the name of the array and then
inside<00:02:15.799><c> square</c><00:02:16.099><c> brackets</c><00:02:16.400><c> something</c><00:02:17.090><c> called</c>

00:02:17.289 --> 00:02:17.299 align:start position:0%
inside square brackets something called
 

00:02:17.299 --> 00:02:19.839 align:start position:0%
inside square brackets something called
an<00:02:17.420><c> index</c><00:02:17.900><c> and</c><00:02:18.049><c> an</c><00:02:18.260><c> index</c><00:02:18.680><c> is</c><00:02:18.859><c> wish</c><00:02:19.280><c> variable</c>

00:02:19.839 --> 00:02:19.849 align:start position:0%
an index and an index is wish variable
 

00:02:19.849 --> 00:02:21.220 align:start position:0%
an index and an index is wish variable
inside<00:02:20.120><c> that</c><00:02:20.269><c> array</c><00:02:20.540><c> I'm</c><00:02:20.689><c> actually</c><00:02:20.870><c> referring</c>

00:02:21.220 --> 00:02:21.230 align:start position:0%
inside that array I'm actually referring
 

00:02:21.230 --> 00:02:23.080 align:start position:0%
inside that array I'm actually referring
to<00:02:21.469><c> which</c><00:02:21.709><c> element</c><00:02:22.189><c> I'm</c><00:02:22.340><c> referring</c><00:02:22.700><c> to</c><00:02:22.849><c> so</c>

00:02:23.080 --> 00:02:23.090 align:start position:0%
to which element I'm referring to so
 

00:02:23.090 --> 00:02:24.459 align:start position:0%
to which element I'm referring to so
this<00:02:23.150><c> is</c><00:02:23.209><c> the</c><00:02:23.390><c> first</c><00:02:23.569><c> one</c><00:02:23.840><c> we're</c><00:02:24.290><c> going</c><00:02:24.379><c> to</c>

00:02:24.459 --> 00:02:24.469 align:start position:0%
this is the first one we're going to
 

00:02:24.469 --> 00:02:25.660 align:start position:0%
this is the first one we're going to
write<00:02:24.560><c> a</c><00:02:24.590><c> zero</c><00:02:24.890><c> because</c><00:02:25.069><c> it</c><00:02:25.250><c> raised</c><00:02:25.430><c> in</c>

00:02:25.660 --> 00:02:25.670 align:start position:0%
write a zero because it raised in
 

00:02:25.670 --> 00:02:27.160 align:start position:0%
write a zero because it raised in
several<00:02:25.970><c> spots</c><00:02:26.150><c> start</c><00:02:26.450><c> with</c><00:02:26.599><c> zero</c><00:02:26.870><c> in</c><00:02:27.019><c> some</c>

00:02:27.160 --> 00:02:27.170 align:start position:0%
several spots start with zero in some
 

00:02:27.170 --> 00:02:29.380 align:start position:0%
several spots start with zero in some
languages<00:02:27.769><c> such</c><00:02:28.010><c> as</c><00:02:28.040><c> Lua</c><00:02:28.400><c> they</c><00:02:28.909><c> start</c><00:02:29.239><c> with</c>

00:02:29.380 --> 00:02:29.390 align:start position:0%
languages such as Lua they start with
 

00:02:29.390 --> 00:02:31.720 align:start position:0%
languages such as Lua they start with
one<00:02:29.629><c> which</c><00:02:29.930><c> is</c><00:02:30.049><c> very</c><00:02:30.379><c> very</c><00:02:30.650><c> weird</c><00:02:31.040><c> and</c><00:02:31.280><c> kind</c><00:02:31.609><c> of</c>

00:02:31.720 --> 00:02:31.730 align:start position:0%
one which is very very weird and kind of
 

00:02:31.730 --> 00:02:33.699 align:start position:0%
one which is very very weird and kind of
uncommon<00:02:32.090><c> usually</c><00:02:32.659><c> array</c><00:02:32.870><c> start</c><00:02:33.230><c> with</c><00:02:33.409><c> zero</c>

00:02:33.699 --> 00:02:33.709 align:start position:0%
uncommon usually array start with zero
 

00:02:33.709 --> 00:02:36.069 align:start position:0%
uncommon usually array start with zero
meaning<00:02:34.010><c> that</c><00:02:34.099><c> 0</c><00:02:34.430><c> is</c><00:02:34.939><c> the</c><00:02:35.209><c> first</c><00:02:35.420><c> element</c><00:02:35.599><c> and</c>

00:02:36.069 --> 00:02:36.079 align:start position:0%
meaning that 0 is the first element and
 

00:02:36.079 --> 00:02:37.959 align:start position:0%
meaning that 0 is the first element and
we<00:02:36.290><c> can</c><00:02:36.439><c> set</c><00:02:36.650><c> this</c><00:02:36.799><c> like</c><00:02:37.069><c> like</c><00:02:37.519><c> a</c><00:02:37.549><c> look</c><00:02:37.760><c> any</c>

00:02:37.959 --> 00:02:37.969 align:start position:0%
we can set this like like a look any
 

00:02:37.969 --> 00:02:39.520 align:start position:0%
we can set this like like a look any
other<00:02:38.180><c> integer</c><00:02:38.540><c> because</c><00:02:38.719><c> it</c><00:02:38.989><c> is</c><00:02:39.109><c> just</c><00:02:39.439><c> an</c>

00:02:39.520 --> 00:02:39.530 align:start position:0%
other integer because it is just an
 

00:02:39.530 --> 00:02:41.679 align:start position:0%
other integer because it is just an
integer<00:02:39.859><c> now</c><00:02:40.129><c> whilst</c><00:02:40.700><c> there</c><00:02:41.060><c> is</c><00:02:41.090><c> an</c><00:02:41.420><c> array</c><00:02:41.659><c> of</c>

00:02:41.679 --> 00:02:41.689 align:start position:0%
integer now whilst there is an array of
 

00:02:41.689 --> 00:02:43.780 align:start position:0%
integer now whilst there is an array of
integers<00:02:41.930><c> when</c><00:02:42.409><c> we</c><00:02:42.530><c> access</c><00:02:43.069><c> one</c><00:02:43.579><c> of</c><00:02:43.670><c> those</c>

00:02:43.780 --> 00:02:43.790 align:start position:0%
integers when we access one of those
 

00:02:43.790 --> 00:02:46.960 align:start position:0%
integers when we access one of those
elements<00:02:44.150><c> add</c><00:02:44.510><c> a</c><00:02:44.780><c> specific</c><00:02:45.139><c> index</c><00:02:45.739><c> we</c><00:02:46.310><c> get</c><00:02:46.579><c> the</c>

00:02:46.960 --> 00:02:46.970 align:start position:0%
elements add a specific index we get the
 

00:02:46.970 --> 00:02:48.819 align:start position:0%
elements add a specific index we get the
underlying<00:02:47.569><c> type</c><00:02:47.870><c> of</c><00:02:48.139><c> the</c><00:02:48.260><c> array</c><00:02:48.500><c> which</c><00:02:48.709><c> is</c>

00:02:48.819 --> 00:02:48.829 align:start position:0%
underlying type of the array which is
 

00:02:48.829 --> 00:02:50.589 align:start position:0%
underlying type of the array which is
just<00:02:49.099><c> an</c><00:02:49.189><c> integer</c><00:02:49.370><c> we</c><00:02:49.760><c> can</c><00:02:49.879><c> set</c><00:02:50.030><c> it</c><00:02:50.060><c> equal</c><00:02:50.239><c> to</c><00:02:50.450><c> 2</c>

00:02:50.589 --> 00:02:50.599 align:start position:0%
just an integer we can set it equal to 2
 

00:02:50.599 --> 00:02:52.119 align:start position:0%
just an integer we can set it equal to 2
for<00:02:50.930><c> example</c><00:02:51.290><c> now</c><00:02:51.590><c> you</c><00:02:51.650><c> can</c><00:02:51.799><c> probably</c><00:02:51.950><c> notice</c>

00:02:52.119 --> 00:02:52.129 align:start position:0%
for example now you can probably notice
 

00:02:52.129 --> 00:02:53.649 align:start position:0%
for example now you can probably notice
here<00:02:52.400><c> that</c><00:02:52.430><c> we</c><00:02:52.639><c> allocated</c><00:02:53.090><c> space</c><00:02:53.269><c> to</c><00:02:53.480><c> 5</c>

00:02:53.649 --> 00:02:53.659 align:start position:0%
here that we allocated space to 5
 

00:02:53.659 --> 00:02:55.960 align:start position:0%
here that we allocated space to 5
integers<00:02:54.049><c> however</c><00:02:54.530><c> the</c><00:02:54.709><c> first</c><00:02:54.950><c> index</c><00:02:55.489><c> is</c><00:02:55.669><c> 0</c>

00:02:55.960 --> 00:02:55.970 align:start position:0%
integers however the first index is 0
 

00:02:55.970 --> 00:02:58.780 align:start position:0%
integers however the first index is 0
which<00:02:56.659><c> would</c><00:02:57.139><c> mean</c><00:02:57.379><c> that</c><00:02:57.919><c> since</c><00:02:58.340><c> we</c><00:02:58.489><c> all</c><00:02:58.579><c> get</c>

00:02:58.780 --> 00:02:58.790 align:start position:0%
which would mean that since we all get
 

00:02:58.790 --> 00:03:01.089 align:start position:0%
which would mean that since we all get
aspects<00:02:59.120><c> of</c><00:02:59.209><c> 5</c><00:02:59.389><c> integers</c><00:02:59.629><c> the</c><00:03:00.200><c> last</c><00:03:00.409><c> index</c><00:03:00.829><c> is</c>

00:03:01.089 --> 00:03:01.099 align:start position:0%
aspects of 5 integers the last index is
 

00:03:01.099 --> 00:03:02.500 align:start position:0%
aspects of 5 integers the last index is
actually<00:03:01.549><c> 4</c><00:03:01.879><c> not</c><00:03:02.180><c> 5</c>

00:03:02.500 --> 00:03:02.510 align:start position:0%
actually 4 not 5
 

00:03:02.510 --> 00:03:04.690 align:start position:0%
actually 4 not 5
because<00:03:03.139><c> index</c><00:03:03.470><c> number</c><00:03:03.709><c> 5</c><00:03:03.919><c> would</c><00:03:04.250><c> actually</c><00:03:04.579><c> be</c>

00:03:04.690 --> 00:03:04.700 align:start position:0%
because index number 5 would actually be
 

00:03:04.700 --> 00:03:06.610 align:start position:0%
because index number 5 would actually be
the<00:03:04.819><c> sixth</c><00:03:05.120><c> element</c><00:03:05.359><c> let's</c><00:03:06.079><c> set</c><00:03:06.290><c> this</c><00:03:06.409><c> to</c>

00:03:06.610 --> 00:03:06.620 align:start position:0%
the sixth element let's set this to
 

00:03:06.620 --> 00:03:08.080 align:start position:0%
the sixth element let's set this to
something<00:03:06.829><c> like</c><00:03:06.980><c> 4</c><00:03:07.370><c> I'm</c><00:03:07.639><c> going</c><00:03:07.819><c> to</c><00:03:07.909><c> leave</c><00:03:08.000><c> the</c>

00:03:08.080 --> 00:03:08.090 align:start position:0%
something like 4 I'm going to leave the
 

00:03:08.090 --> 00:03:10.210 align:start position:0%
something like 4 I'm going to leave the
other<00:03:08.209><c> ones</c><00:03:08.419><c> unset</c><00:03:08.989><c> now</c><00:03:09.409><c> reading</c><00:03:09.799><c> these</c><00:03:09.950><c> is</c>

00:03:10.210 --> 00:03:10.220 align:start position:0%
other ones unset now reading these is
 

00:03:10.220 --> 00:03:12.190 align:start position:0%
other ones unset now reading these is
equally<00:03:10.879><c> as</c><00:03:11.030><c> simple</c><00:03:11.389><c> if</c><00:03:11.629><c> we</c><00:03:11.780><c> wanted</c><00:03:11.989><c> to</c><00:03:12.049><c> print</c>

00:03:12.190 --> 00:03:12.200 align:start position:0%
equally as simple if we wanted to print
 

00:03:12.200 --> 00:03:14.439 align:start position:0%
equally as simple if we wanted to print
one<00:03:12.409><c> we</c><00:03:12.889><c> will</c><00:03:13.010><c> just</c><00:03:13.159><c> specify</c><00:03:13.579><c> which</c><00:03:13.819><c> index</c><00:03:14.269><c> who</c>

00:03:14.439 --> 00:03:14.449 align:start position:0%
one we will just specify which index who
 

00:03:14.449 --> 00:03:17.379 align:start position:0%
one we will just specify which index who
wanted<00:03:14.690><c> to</c><00:03:14.750><c> print</c><00:03:14.989><c> like</c><00:03:15.379><c> this</c><00:03:15.909><c> if</c><00:03:16.909><c> we</c><00:03:17.120><c> just</c>

00:03:17.379 --> 00:03:17.389 align:start position:0%
wanted to print like this if we just
 

00:03:17.389 --> 00:03:20.680 align:start position:0%
wanted to print like this if we just
specify<00:03:18.139><c> the</c><00:03:18.169><c> actual</c><00:03:18.889><c> array</c><00:03:19.729><c> and</c><00:03:20.150><c> it's</c><00:03:20.510><c> just</c>

00:03:20.680 --> 00:03:20.690 align:start position:0%
specify the actual array and it's just
 

00:03:20.690 --> 00:03:22.240 align:start position:0%
specify the actual array and it's just
going<00:03:20.840><c> to</c><00:03:20.989><c> print</c><00:03:21.229><c> the</c><00:03:21.349><c> memory</c><00:03:21.709><c> address</c><00:03:21.919><c> of</c><00:03:22.099><c> it</c>

00:03:22.240 --> 00:03:22.250 align:start position:0%
going to print the memory address of it
 

00:03:22.250 --> 00:03:24.939 align:start position:0%
going to print the memory address of it
because<00:03:22.699><c> this</c><00:03:23.389><c> is</c><00:03:23.629><c> actually</c><00:03:23.930><c> a</c><00:03:24.290><c> pointer</c><00:03:24.769><c> type</c>

00:03:24.939 --> 00:03:24.949 align:start position:0%
because this is actually a pointer type
 

00:03:24.949 --> 00:03:27.039 align:start position:0%
because this is actually a pointer type
and<00:03:25.280><c> as</c><00:03:25.639><c> I</c><00:03:25.790><c> mentioned</c><00:03:26.150><c> when</c><00:03:26.299><c> you</c><00:03:26.329><c> index</c><00:03:26.900><c> an</c>

00:03:27.039 --> 00:03:27.049 align:start position:0%
and as I mentioned when you index an
 

00:03:27.049 --> 00:03:28.869 align:start position:0%
and as I mentioned when you index an
element<00:03:27.500><c> inside</c><00:03:27.650><c> the</c><00:03:27.949><c> array</c><00:03:28.220><c> you</c><00:03:28.430><c> get</c><00:03:28.639><c> back</c>

00:03:28.869 --> 00:03:28.879 align:start position:0%
element inside the array you get back
 

00:03:28.879 --> 00:03:30.849 align:start position:0%
element inside the array you get back
the<00:03:29.090><c> underlying</c><00:03:29.629><c> data</c><00:03:29.900><c> type</c><00:03:30.169><c> so</c><00:03:30.500><c> in</c><00:03:30.560><c> this</c><00:03:30.620><c> case</c>

00:03:30.849 --> 00:03:30.859 align:start position:0%
the underlying data type so in this case
 

00:03:30.859 --> 00:03:32.349 align:start position:0%
the underlying data type so in this case
an<00:03:31.010><c> integer</c><00:03:31.220><c> so</c><00:03:31.459><c> I</c><00:03:31.519><c> kind</c><00:03:31.760><c> of</c><00:03:31.790><c> course</c><00:03:32.060><c> create</c><00:03:32.329><c> a</c>

00:03:32.349 --> 00:03:32.359 align:start position:0%
an integer so I kind of course create a
 

00:03:32.359 --> 00:03:34.569 align:start position:0%
an integer so I kind of course create a
new<00:03:32.479><c> variable</c><00:03:32.959><c> and</c><00:03:33.109><c> then</c><00:03:33.379><c> copy</c><00:03:33.709><c> the</c><00:03:34.099><c> value</c>

00:03:34.569 --> 00:03:34.579 align:start position:0%
new variable and then copy the value
 

00:03:34.579 --> 00:03:36.369 align:start position:0%
new variable and then copy the value
from<00:03:34.729><c> the</c><00:03:34.909><c> array</c><00:03:35.180><c> back</c><00:03:35.720><c> into</c><00:03:35.989><c> that</c><00:03:36.109><c> variable</c>

00:03:36.369 --> 00:03:36.379 align:start position:0%
from the array back into that variable
 

00:03:36.379 --> 00:03:37.780 align:start position:0%
from the array back into that variable
you<00:03:36.590><c> can</c><00:03:36.709><c> see</c><00:03:36.799><c> that</c><00:03:36.979><c> the</c><00:03:37.069><c> data</c><00:03:37.280><c> type</c><00:03:37.489><c> here</c><00:03:37.760><c> is</c>

00:03:37.780 --> 00:03:37.790 align:start position:0%
you can see that the data type here is
 

00:03:37.790 --> 00:03:39.879 align:start position:0%
you can see that the data type here is
just<00:03:38.269><c> a</c><00:03:38.449><c> normal</c><00:03:38.750><c> integer</c><00:03:39.139><c> if</c><00:03:39.440><c> I</c><00:03:39.590><c> try</c><00:03:39.829><c> and</c>

00:03:39.879 --> 00:03:39.889 align:start position:0%
just a normal integer if I try and
 

00:03:39.889 --> 00:03:42.219 align:start position:0%
just a normal integer if I try and
access<00:03:40.129><c> an</c><00:03:40.459><c> index</c><00:03:40.819><c> that</c><00:03:40.970><c> is</c><00:03:41.299><c> not</c><00:03:41.629><c> inside</c><00:03:42.169><c> the</c>

00:03:42.219 --> 00:03:42.229 align:start position:0%
access an index that is not inside the
 

00:03:42.229 --> 00:03:44.699 align:start position:0%
access an index that is not inside the
array<00:03:42.680><c> for</c><00:03:42.979><c> example</c><00:03:43.400><c> I</c><00:03:43.609><c> trying</c><00:03:44.060><c> to</c><00:03:44.209><c> access</c>

00:03:44.699 --> 00:03:44.709 align:start position:0%
array for example I trying to access
 

00:03:44.709 --> 00:03:48.629 align:start position:0%
array for example I trying to access
example<00:03:45.709><c> at</c><00:03:45.799><c> negative</c><00:03:46.159><c> 1</c><00:03:46.430><c> or</c><00:03:46.699><c> example</c><00:03:47.599><c> at</c>

00:03:48.629 --> 00:03:48.639 align:start position:0%
example at negative 1 or example at
 

00:03:48.639 --> 00:03:50.710 align:start position:0%
example at negative 1 or example at
5,000<00:03:49.639><c> call</c><00:03:49.819><c> something</c><00:03:50.150><c> called</c><00:03:50.299><c> a</c><00:03:50.389><c> memory</c>

00:03:50.710 --> 00:03:50.720 align:start position:0%
5,000 call something called a memory
 

00:03:50.720 --> 00:03:52.330 align:start position:0%
5,000 call something called a memory
access<00:03:50.900><c> violation</c><00:03:51.709><c> because</c><00:03:51.829><c> I'm</c><00:03:52.040><c> trying</c><00:03:52.220><c> to</c>

00:03:52.330 --> 00:03:52.340 align:start position:0%
access violation because I'm trying to
 

00:03:52.340 --> 00:03:54.520 align:start position:0%
access violation because I'm trying to
access<00:03:52.790><c> memory</c><00:03:53.030><c> that</c><00:03:53.689><c> doesn't</c><00:03:53.810><c> belong</c><00:03:54.169><c> to</c><00:03:54.229><c> me</c>

00:03:54.520 --> 00:03:54.530 align:start position:0%
access memory that doesn't belong to me
 

00:03:54.530 --> 00:03:57.099 align:start position:0%
access memory that doesn't belong to me
now<00:03:54.949><c> in</c><00:03:55.280><c> debug</c><00:03:55.699><c> mode</c><00:03:55.729><c> you</c><00:03:56.299><c> will</c><00:03:56.540><c> actually</c><00:03:56.720><c> get</c>

00:03:57.099 --> 00:03:57.109 align:start position:0%
now in debug mode you will actually get
 

00:03:57.109 --> 00:03:59.500 align:start position:0%
now in debug mode you will actually get
an<00:03:57.379><c> error</c><00:03:57.979><c> method</c><00:03:58.340><c> in</c><00:03:58.459><c> a</c><00:03:58.519><c> crashed</c><00:03:58.790><c> explain</c><00:03:59.269><c> to</c>

00:03:59.500 --> 00:03:59.510 align:start position:0%
an error method in a crashed explain to
 

00:03:59.510 --> 00:04:01.179 align:start position:0%
an error method in a crashed explain to
help<00:03:59.689><c> you</c><00:03:59.810><c> debug</c><00:03:59.959><c> those</c><00:04:00.290><c> problems</c><00:04:00.680><c> however</c><00:04:00.889><c> in</c>

00:04:01.179 --> 00:04:01.189 align:start position:0%
help you debug those problems however in
 

00:04:01.189 --> 00:04:01.719 align:start position:0%
help you debug those problems however in
release<00:04:01.459><c> mode</c>

00:04:01.719 --> 00:04:01.729 align:start position:0%
release mode
 

00:04:01.729 --> 00:04:03.969 align:start position:0%
release mode
you<00:04:02.359><c> probably</c><00:04:02.629><c> want</c><00:04:03.049><c> which</c><00:04:03.530><c> means</c><00:04:03.739><c> that</c>

00:04:03.969 --> 00:04:03.979 align:start position:0%
you probably want which means that
 

00:04:03.979 --> 00:04:05.439 align:start position:0%
you probably want which means that
you've<00:04:04.280><c> just</c><00:04:04.519><c> written</c><00:04:04.669><c> into</c><00:04:04.970><c> memory</c><00:04:05.209><c> that</c>

00:04:05.439 --> 00:04:05.449 align:start position:0%
you've just written into memory that
 

00:04:05.449 --> 00:04:06.879 align:start position:0%
you've just written into memory that
isn't<00:04:05.689><c> yours</c><00:04:05.959><c> now</c><00:04:06.290><c> it's</c><00:04:06.439><c> really</c><00:04:06.560><c> important</c>

00:04:06.879 --> 00:04:06.889 align:start position:0%
isn't yours now it's really important
 

00:04:06.889 --> 00:04:07.929 align:start position:0%
isn't yours now it's really important
that<00:04:06.949><c> you</c><00:04:07.040><c> actually</c><00:04:07.069><c> be</c><00:04:07.340><c> careful</c><00:04:07.699><c> with</c><00:04:07.819><c> this</c>

00:04:07.929 --> 00:04:07.939 align:start position:0%
that you actually be careful with this
 

00:04:07.939 --> 00:04:09.659 align:start position:0%
that you actually be careful with this
and<00:04:08.209><c> make</c><00:04:08.449><c> sure</c><00:04:08.629><c> that</c><00:04:08.780><c> you're</c><00:04:08.930><c> always</c><00:04:09.109><c> writing</c>

00:04:09.659 --> 00:04:09.669 align:start position:0%
and make sure that you're always writing
 

00:04:09.669 --> 00:04:11.979 align:start position:0%
and make sure that you're always writing
inside<00:04:10.669><c> the</c><00:04:10.970><c> bounds</c><00:04:11.239><c> of</c><00:04:11.329><c> the</c><00:04:11.449><c> array</c><00:04:11.479><c> because</c>

00:04:11.979 --> 00:04:11.989 align:start position:0%
inside the bounds of the array because
 

00:04:11.989 --> 00:04:13.929 align:start position:0%
inside the bounds of the array because
if<00:04:12.139><c> you're</c><00:04:12.290><c> not</c><00:04:12.319><c> it</c><00:04:13.099><c> can</c><00:04:13.280><c> cause</c><00:04:13.430><c> problems</c><00:04:13.790><c> that</c>

00:04:13.929 --> 00:04:13.939 align:start position:0%
if you're not it can cause problems that
 

00:04:13.939 --> 00:04:15.729 align:start position:0%
if you're not it can cause problems that
can<00:04:14.030><c> be</c><00:04:14.120><c> fairly</c><00:04:14.509><c> difficult</c><00:04:14.810><c> to</c><00:04:15.049><c> debug</c><00:04:15.229><c> because</c>

00:04:15.729 --> 00:04:15.739 align:start position:0%
can be fairly difficult to debug because
 

00:04:15.739 --> 00:04:17.920 align:start position:0%
can be fairly difficult to debug because
you've<00:04:15.889><c> just</c><00:04:16.130><c> modified</c><00:04:16.639><c> memory</c><00:04:17.029><c> that</c><00:04:17.510><c> wasn't</c>

00:04:17.920 --> 00:04:17.930 align:start position:0%
you've just modified memory that wasn't
 

00:04:17.930 --> 00:04:18.210 align:start position:0%
you've just modified memory that wasn't
part

00:04:18.210 --> 00:04:18.220 align:start position:0%
part
 

00:04:18.220 --> 00:04:20.400 align:start position:0%
part
arrey<00:04:18.579><c> however</c><00:04:19.390><c> might</c><00:04:19.720><c> be</c><00:04:19.900><c> part</c><00:04:20.140><c> of</c><00:04:20.290><c> another</c>

00:04:20.400 --> 00:04:20.410 align:start position:0%
arrey however might be part of another
 

00:04:20.410 --> 00:04:23.250 align:start position:0%
arrey however might be part of another
variable<00:04:21.190><c> neil</c><00:04:21.850><c> source</c><00:04:22.150><c> code</c><00:04:22.390><c> so</c><00:04:23.080><c> you've</c><00:04:23.230><c> just</c>

00:04:23.250 --> 00:04:23.260 align:start position:0%
variable neil source code so you've just
 

00:04:23.260 --> 00:04:25.020 align:start position:0%
variable neil source code so you've just
literally<00:04:23.860><c> gone</c><00:04:23.980><c> out</c><00:04:24.190><c> and</c><00:04:24.340><c> changed</c><00:04:24.700><c> some</c>

00:04:25.020 --> 00:04:25.030 align:start position:0%
literally gone out and changed some
 

00:04:25.030 --> 00:04:27.690 align:start position:0%
literally gone out and changed some
other<00:04:25.210><c> variable</c><00:04:25.660><c> in</c><00:04:25.870><c> your</c><00:04:26.050><c> code</c><00:04:26.550><c> to</c><00:04:27.550><c> something</c>

00:04:27.690 --> 00:04:27.700 align:start position:0%
other variable in your code to something
 

00:04:27.700 --> 00:04:30.660 align:start position:0%
other variable in your code to something
else<00:04:28.060><c> without</c><00:04:28.860><c> realizing</c><00:04:29.860><c> it</c><00:04:29.950><c> so</c><00:04:30.340><c> just</c><00:04:30.520><c> make</c>

00:04:30.660 --> 00:04:30.670 align:start position:0%
else without realizing it so just make
 

00:04:30.670 --> 00:04:32.820 align:start position:0%
else without realizing it so just make
sure<00:04:30.700><c> that</c><00:04:31.030><c> you</c><00:04:31.120><c> set</c><00:04:31.300><c> up</c><00:04:31.330><c> safety</c><00:04:31.840><c> checks</c><00:04:32.140><c> where</c>

00:04:32.820 --> 00:04:32.830 align:start position:0%
sure that you set up safety checks where
 

00:04:32.830 --> 00:04:34.260 align:start position:0%
sure that you set up safety checks where
needed<00:04:33.220><c> to</c><00:04:33.430><c> make</c><00:04:33.610><c> sure</c><00:04:33.790><c> that</c><00:04:33.970><c> you're</c><00:04:34.120><c> not</c>

00:04:34.260 --> 00:04:34.270 align:start position:0%
needed to make sure that you're not
 

00:04:34.270 --> 00:04:36.120 align:start position:0%
needed to make sure that you're not
writing<00:04:34.810><c> up</c><00:04:34.990><c> out</c><00:04:35.200><c> of</c><00:04:35.290><c> the</c><00:04:35.350><c> balance</c><00:04:35.680><c> we'll</c><00:04:35.950><c> talk</c>

00:04:36.120 --> 00:04:36.130 align:start position:0%
writing up out of the balance we'll talk
 

00:04:36.130 --> 00:04:37.350 align:start position:0%
writing up out of the balance we'll talk
more<00:04:36.250><c> about</c><00:04:36.310><c> this</c><00:04:36.550><c> specific</c><00:04:36.700><c> problem</c><00:04:37.270><c> and</c>

00:04:37.350 --> 00:04:37.360 align:start position:0%
more about this specific problem and
 

00:04:37.360 --> 00:04:38.850 align:start position:0%
more about this specific problem and
stuff<00:04:37.930><c> like</c><00:04:38.050><c> that</c><00:04:38.200><c> in</c><00:04:38.350><c> the</c><00:04:38.410><c> future</c>

00:04:38.850 --> 00:04:38.860 align:start position:0%
stuff like that in the future
 

00:04:38.860 --> 00:04:40.590 align:start position:0%
stuff like that in the future
now<00:04:39.040><c> arrays</c><00:04:39.400><c> are</c><00:04:39.640><c> really</c><00:04:40.000><c> well</c><00:04:40.150><c> with</c><00:04:40.360><c> for</c>

00:04:40.590 --> 00:04:40.600 align:start position:0%
now arrays are really well with for
 

00:04:40.600 --> 00:04:42.990 align:start position:0%
now arrays are really well with for
loops<00:04:40.870><c> because</c><00:04:41.080><c> full</c><00:04:41.440><c> of</c><00:04:41.590><c> our</c><00:04:42.000><c> indexable</c>

00:04:42.990 --> 00:04:43.000 align:start position:0%
loops because full of our indexable
 

00:04:43.000 --> 00:04:45.840 align:start position:0%
loops because full of our indexable
loops<00:04:43.630><c> that</c><00:04:44.050><c> go</c><00:04:44.770><c> through</c><00:04:45.130><c> a</c><00:04:45.160><c> particular</c><00:04:45.610><c> range</c>

00:04:45.840 --> 00:04:45.850 align:start position:0%
loops that go through a particular range
 

00:04:45.850 --> 00:04:47.940 align:start position:0%
loops that go through a particular range
right<00:04:46.390><c> so</c><00:04:46.810><c> if</c><00:04:46.930><c> we</c><00:04:46.990><c> wanted</c><00:04:47.200><c> to</c><00:04:47.260><c> set</c><00:04:47.470><c> every</c>

00:04:47.940 --> 00:04:47.950 align:start position:0%
right so if we wanted to set every
 

00:04:47.950 --> 00:04:50.310 align:start position:0%
right so if we wanted to set every
single<00:04:48.310><c> value</c><00:04:48.520><c> inside</c><00:04:49.060><c> our</c><00:04:49.210><c> example</c><00:04:49.780><c> array</c><00:04:50.050><c> a</c>

00:04:50.310 --> 00:04:50.320 align:start position:0%
single value inside our example array a
 

00:04:50.320 --> 00:04:51.420 align:start position:0%
single value inside our example array a
full<00:04:50.650><c> Earth</c><00:04:50.770><c> is</c><00:04:50.890><c> a</c><00:04:50.920><c> really</c><00:04:51.190><c> good</c><00:04:51.310><c> way</c><00:04:51.400><c> of</c>

00:04:51.420 --> 00:04:51.430 align:start position:0%
full Earth is a really good way of
 

00:04:51.430 --> 00:04:53.490 align:start position:0%
full Earth is a really good way of
achieving<00:04:51.580><c> this</c><00:04:52.000><c> without</c><00:04:52.570><c> a</c><00:04:52.690><c> for</c><00:04:52.930><c> loop</c><00:04:53.050><c> we</c>

00:04:53.490 --> 00:04:53.500 align:start position:0%
achieving this without a for loop we
 

00:04:53.500 --> 00:04:54.840 align:start position:0%
achieving this without a for loop we
would<00:04:53.650><c> have</c><00:04:53.740><c> to</c><00:04:53.860><c> go</c><00:04:54.010><c> through</c><00:04:54.400><c> all</c><00:04:54.640><c> of</c><00:04:54.670><c> these</c>

00:04:54.840 --> 00:04:54.850 align:start position:0%
would have to go through all of these
 

00:04:54.850 --> 00:04:56.370 align:start position:0%
would have to go through all of these
indices<00:04:55.390><c> and</c><00:04:55.660><c> actually</c><00:04:56.050><c> accept</c><00:04:56.290><c> them</c>

00:04:56.370 --> 00:04:56.380 align:start position:0%
indices and actually accept them
 

00:04:56.380 --> 00:04:58.320 align:start position:0%
indices and actually accept them
manually<00:04:56.680><c> and</c><00:04:57.040><c> that's</c><00:04:57.820><c> how</c><00:04:57.970><c> we</c><00:04:58.030><c> would</c><00:04:58.210><c> achieve</c>

00:04:58.320 --> 00:04:58.330 align:start position:0%
manually and that's how we would achieve
 

00:04:58.330 --> 00:04:59.730 align:start position:0%
manually and that's how we would achieve
setting<00:04:58.930><c> everything</c><00:04:59.170><c> dessous</c>

00:04:59.730 --> 00:04:59.740 align:start position:0%
setting everything dessous
 

00:04:59.740 --> 00:05:01.530 align:start position:0%
setting everything dessous
however<00:05:00.040><c> by</c><00:05:00.280><c> creating</c><00:05:00.640><c> a</c><00:05:00.730><c> for</c><00:05:00.940><c> loop</c><00:05:01.090><c> that</c><00:05:01.510><c> goes</c>

00:05:01.530 --> 00:05:01.540 align:start position:0%
however by creating a for loop that goes
 

00:05:01.540 --> 00:05:03.570 align:start position:0%
however by creating a for loop that goes
through<00:05:02.440><c> the</c><00:05:02.620><c> entire</c><00:05:02.680><c> length</c><00:05:03.070><c> of</c><00:05:03.220><c> our</c><00:05:03.370><c> array</c>

00:05:03.570 --> 00:05:03.580 align:start position:0%
through the entire length of our array
 

00:05:03.580 --> 00:05:06.180 align:start position:0%
through the entire length of our array
which<00:05:03.760><c> is</c><00:05:03.880><c> five</c><00:05:04.150><c> and</c><00:05:04.480><c> simply</c><00:05:05.110><c> accepts</c><00:05:05.650><c> example</c>

00:05:06.180 --> 00:05:06.190 align:start position:0%
which is five and simply accepts example
 

00:05:06.190 --> 00:05:07.560 align:start position:0%
which is five and simply accepts example
at<00:05:06.280><c> I</c><00:05:06.460><c> equal</c><00:05:07.000><c> to</c><00:05:07.090><c> two</c>

00:05:07.560 --> 00:05:07.570 align:start position:0%
at I equal to two
 

00:05:07.570 --> 00:05:09.240 align:start position:0%
at I equal to two
what<00:05:07.960><c> we've</c><00:05:08.140><c> done</c><00:05:08.350><c> is</c><00:05:08.680><c> we've</c><00:05:08.890><c> looped</c><00:05:09.130><c> through</c>

00:05:09.240 --> 00:05:09.250 align:start position:0%
what we've done is we've looped through
 

00:05:09.250 --> 00:05:10.830 align:start position:0%
what we've done is we've looped through
the<00:05:09.730><c> entire</c><00:05:09.940><c> array</c><00:05:10.090><c> meaning</c><00:05:10.570><c> we've</c><00:05:10.690><c> gone</c>

00:05:10.830 --> 00:05:10.840 align:start position:0%
the entire array meaning we've gone
 

00:05:10.840 --> 00:05:14.070 align:start position:0%
the entire array meaning we've gone
through<00:05:10.900><c> index</c><00:05:11.530><c> 0</c><00:05:11.830><c> to</c><00:05:11.980><c> index</c><00:05:12.280><c> 4</c><00:05:12.940><c> since</c><00:05:13.480><c> index</c><00:05:13.810><c> 4</c>

00:05:14.070 --> 00:05:14.080 align:start position:0%
through index 0 to index 4 since index 4
 

00:05:14.080 --> 00:05:16.620 align:start position:0%
through index 0 to index 4 since index 4
is<00:05:14.200><c> the</c><00:05:14.350><c> last</c><00:05:14.620><c> pointer</c><00:05:15.430><c> which</c><00:05:15.610><c> eyes</c><00:05:15.850><c> less</c><00:05:16.300><c> than</c>

00:05:16.620 --> 00:05:16.630 align:start position:0%
is the last pointer which eyes less than
 

00:05:16.630 --> 00:05:18.480 align:start position:0%
is the last pointer which eyes less than
5<00:05:16.840><c> we</c><00:05:17.140><c> could</c><00:05:17.260><c> have</c><00:05:17.380><c> also</c><00:05:17.470><c> written</c><00:05:17.620><c> less</c><00:05:18.280><c> than</c>

00:05:18.480 --> 00:05:18.490 align:start position:0%
5 we could have also written less than
 

00:05:18.490 --> 00:05:20.670 align:start position:0%
5 we could have also written less than
or<00:05:18.640><c> equal</c><00:05:18.880><c> to</c><00:05:18.970><c> 4</c><00:05:19.180><c> however</c><00:05:19.480><c> so</c><00:05:20.080><c> no</c><00:05:20.200><c> one</c><00:05:20.350><c> really</c>

00:05:20.670 --> 00:05:20.680 align:start position:0%
or equal to 4 however so no one really
 

00:05:20.680 --> 00:05:22.650 align:start position:0%
or equal to 4 however so no one really
write<00:05:20.890><c> code</c><00:05:21.250><c> like</c><00:05:21.430><c> this</c><00:05:21.610><c> and</c><00:05:21.910><c> also</c><00:05:22.060><c> it'll</c><00:05:22.510><c> be</c><00:05:22.630><c> a</c>

00:05:22.650 --> 00:05:22.660 align:start position:0%
write code like this and also it'll be a
 

00:05:22.660 --> 00:05:23.940 align:start position:0%
write code like this and also it'll be a
bit<00:05:22.780><c> of</c><00:05:22.870><c> a</c><00:05:22.930><c> performance</c><00:05:23.169><c> here</c><00:05:23.500><c> because</c><00:05:23.830><c> they</c>

00:05:23.940 --> 00:05:23.950 align:start position:0%
bit of a performance here because they
 

00:05:23.950 --> 00:05:25.500 align:start position:0%
bit of a performance here because they
are<00:05:24.040><c> doing</c><00:05:24.430><c> a</c><00:05:24.520><c> less</c><00:05:24.760><c> than</c><00:05:25.030><c> and</c><00:05:25.270><c> equal</c>

00:05:25.500 --> 00:05:25.510 align:start position:0%
are doing a less than and equal
 

00:05:25.510 --> 00:05:27.390 align:start position:0%
are doing a less than and equal
comparison<00:05:26.080><c> so</c><00:05:26.500><c> it</c><00:05:26.560><c> has</c><00:05:26.680><c> to</c><00:05:26.800><c> do</c><00:05:26.890><c> that</c><00:05:27.070><c> equals</c>

00:05:27.390 --> 00:05:27.400 align:start position:0%
comparison so it has to do that equals
 

00:05:27.400 --> 00:05:28.680 align:start position:0%
comparison so it has to do that equals
comparison<00:05:27.940><c> instead</c><00:05:28.150><c> of</c><00:05:28.240><c> just</c><00:05:28.419><c> a</c><00:05:28.510><c> less</c><00:05:28.660><c> than</c>

00:05:28.680 --> 00:05:28.690 align:start position:0%
comparison instead of just a less than
 

00:05:28.690 --> 00:05:30.720 align:start position:0%
comparison instead of just a less than
comparison<00:05:29.410><c> so</c><00:05:29.680><c> it's</c><00:05:29.800><c> almost</c><00:05:30.010><c> always</c><00:05:30.310><c> written</c>

00:05:30.720 --> 00:05:30.730 align:start position:0%
comparison so it's almost always written
 

00:05:30.730 --> 00:05:33.930 align:start position:0%
comparison so it's almost always written
and<00:05:31.150><c> less</c><00:05:31.990><c> than</c><00:05:32.140><c> 5</c><00:05:32.470><c> instead</c><00:05:33.070><c> of</c><00:05:33.220><c> less</c><00:05:33.669><c> than</c><00:05:33.700><c> or</c>

00:05:33.930 --> 00:05:33.940 align:start position:0%
and less than 5 instead of less than or
 

00:05:33.940 --> 00:05:36.390 align:start position:0%
and less than 5 instead of less than or
equal<00:05:34.000><c> to</c><00:05:34.210><c> 4</c><00:05:34.390><c> if</c><00:05:35.169><c> we</c><00:05:35.320><c> run</c><00:05:35.470><c> this</c><00:05:35.560><c> code</c><00:05:35.770><c> now</c><00:05:35.860><c> for</c><00:05:36.370><c> a</c>

00:05:36.390 --> 00:05:36.400 align:start position:0%
equal to 4 if we run this code now for a
 

00:05:36.400 --> 00:05:38.550 align:start position:0%
equal to 4 if we run this code now for a
breakpoint<00:05:36.640><c> on</c><00:05:36.970><c> our</c><00:05:37.120><c> C</c><00:05:37.330><c> and</c><00:05:37.479><c> get</c><00:05:37.870><c> we</c><00:05:38.290><c> can</c><00:05:38.440><c> take</c>

00:05:38.550 --> 00:05:38.560 align:start position:0%
breakpoint on our C and get we can take
 

00:05:38.560 --> 00:05:39.900 align:start position:0%
breakpoint on our C and get we can take
a<00:05:38.590><c> look</c><00:05:38.770><c> at</c><00:05:38.919><c> what</c><00:05:39.040><c> this</c><00:05:39.160><c> actually</c><00:05:39.220><c> looks</c><00:05:39.760><c> like</c>

00:05:39.900 --> 00:05:39.910 align:start position:0%
a look at what this actually looks like
 

00:05:39.910 --> 00:05:41.490 align:start position:0%
a look at what this actually looks like
in<00:05:40.210><c> our</c><00:05:40.300><c> memory</c><00:05:40.690><c> so</c><00:05:40.990><c> I'm</c><00:05:41.050><c> going</c><00:05:41.169><c> to</c><00:05:41.200><c> go</c><00:05:41.290><c> up</c><00:05:41.380><c> to</c>

00:05:41.490 --> 00:05:41.500 align:start position:0%
in our memory so I'm going to go up to
 

00:05:41.500 --> 00:05:42.870 align:start position:0%
in our memory so I'm going to go up to
this<00:05:41.590><c> memory</c><00:05:41.860><c> view</c><00:05:42.160><c> here</c><00:05:42.400><c> if</c><00:05:42.580><c> you</c><00:05:42.700><c> want</c><00:05:42.850><c> to</c>

00:05:42.870 --> 00:05:42.880 align:start position:0%
this memory view here if you want to
 

00:05:42.880 --> 00:05:44.010 align:start position:0%
this memory view here if you want to
know<00:05:42.970><c> more</c><00:05:43.150><c> about</c><00:05:43.180><c> that</c><00:05:43.450><c> I</c><00:05:43.510><c> made</c><00:05:43.720><c> a</c><00:05:43.750><c> video</c><00:05:43.870><c> on</c>

00:05:44.010 --> 00:05:44.020 align:start position:0%
know more about that I made a video on
 

00:05:44.020 --> 00:05:45.630 align:start position:0%
know more about that I made a video on
debugging<00:05:44.500><c> and</c><00:05:44.650><c> pipa</c><00:05:44.830><c> plus</c><00:05:45.100><c> again</c><00:05:45.370><c> a</c><00:05:45.430><c> link</c><00:05:45.580><c> a</c>

00:05:45.630 --> 00:05:45.640 align:start position:0%
debugging and pipa plus again a link a
 

00:05:45.640 --> 00:05:47.130 align:start position:0%
debugging and pipa plus again a link a
description<00:05:46.000><c> and</c><00:05:46.240><c> a</c><00:05:46.330><c> condom</c><00:05:46.570><c> screen</c><00:05:46.870><c> to</c><00:05:46.960><c> that</c>

00:05:47.130 --> 00:05:47.140 align:start position:0%
description and a condom screen to that
 

00:05:47.140 --> 00:05:48.150 align:start position:0%
description and a condom screen to that
but<00:05:47.410><c> everything</c><00:05:47.590><c> I'm</c><00:05:47.740><c> just</c><00:05:47.800><c> going</c><00:05:48.010><c> to</c><00:05:48.070><c> go</c><00:05:48.130><c> to</c>

00:05:48.150 --> 00:05:48.160 align:start position:0%
but everything I'm just going to go to
 

00:05:48.160 --> 00:05:49.920 align:start position:0%
but everything I'm just going to go to
the<00:05:48.310><c> memory</c><00:05:48.550><c> address</c><00:05:48.760><c> of</c><00:05:48.910><c> my</c><00:05:49.090><c> array</c><00:05:49.600><c> so</c>

00:05:49.920 --> 00:05:49.930 align:start position:0%
the memory address of my array so
 

00:05:49.930 --> 00:05:52.080 align:start position:0%
the memory address of my array so
example<00:05:50.560><c> is</c><00:05:50.740><c> actually</c><00:05:50.979><c> a</c><00:05:51.280><c> memory</c><00:05:51.669><c> address</c><00:05:51.790><c> on</c>

00:05:52.080 --> 00:05:52.090 align:start position:0%
example is actually a memory address on
 

00:05:52.090 --> 00:05:53.880 align:start position:0%
example is actually a memory address on
time<00:05:52.300><c> because</c><00:05:52.600><c> example</c><00:05:53.110><c> is</c><00:05:53.320><c> an</c><00:05:53.620><c> integer</c>

00:05:53.880 --> 00:05:53.890 align:start position:0%
time because example is an integer
 

00:05:53.890 --> 00:05:56.250 align:start position:0%
time because example is an integer
pointer<00:05:54.460><c> so</c><00:05:55.030><c> I'm</c><00:05:55.600><c> going</c><00:05:55.810><c> to</c><00:05:55.840><c> type</c><00:05:56.020><c> in</c><00:05:56.169><c> an</c>

00:05:56.250 --> 00:05:56.260 align:start position:0%
pointer so I'm going to type in an
 

00:05:56.260 --> 00:05:58.350 align:start position:0%
pointer so I'm going to type in an
example<00:05:56.560><c> over</c><00:05:56.800><c> here</c><00:05:57.130><c> and</c><00:05:57.370><c> you</c><00:05:57.820><c> can</c><00:05:57.970><c> see</c><00:05:58.180><c> that</c>

00:05:58.350 --> 00:05:58.360 align:start position:0%
example over here and you can see that
 

00:05:58.360 --> 00:06:01.650 align:start position:0%
example over here and you can see that
what<00:05:58.600><c> I've</c><00:05:58.690><c> got</c><00:05:58.900><c> here</c><00:05:59.229><c> is</c><00:05:59.440><c> my</c><00:06:00.010><c> twos</c><00:06:00.940><c> in</c><00:06:01.300><c> a</c><00:06:01.450><c> row</c>

00:06:01.650 --> 00:06:01.660 align:start position:0%
what I've got here is my twos in a row
 

00:06:01.660 --> 00:06:03.150 align:start position:0%
what I've got here is my twos in a row
so<00:06:02.020><c> one</c><00:06:02.200><c> of</c><00:06:02.229><c> the</c><00:06:02.350><c> really</c><00:06:02.620><c> important</c><00:06:02.979><c> thing</c>

00:06:03.150 --> 00:06:03.160 align:start position:0%
so one of the really important thing
 

00:06:03.160 --> 00:06:04.770 align:start position:0%
so one of the really important thing
about<00:06:03.190><c> arrays</c><00:06:03.640><c> is</c><00:06:03.940><c> that</c><00:06:04.150><c> they</c><00:06:04.300><c> store</c><00:06:04.600><c> their</c>

00:06:04.770 --> 00:06:04.780 align:start position:0%
about arrays is that they store their
 

00:06:04.780 --> 00:06:07.290 align:start position:0%
about arrays is that they store their
data<00:06:04.960><c> contiguously</c><00:06:05.740><c> which</c><00:06:06.370><c> means</c><00:06:06.669><c> they</c><00:06:07.090><c> saw</c>

00:06:07.290 --> 00:06:07.300 align:start position:0%
data contiguously which means they saw
 

00:06:07.300 --> 00:06:09.540 align:start position:0%
data contiguously which means they saw
that<00:06:07.450><c> I</c><00:06:07.630><c> in</c><00:06:07.990><c> a</c><00:06:08.080><c> row</c><00:06:08.320><c> so</c><00:06:08.710><c> I've</c><00:06:08.890><c> allocated</c><00:06:09.070><c> space</c>

00:06:09.540 --> 00:06:09.550 align:start position:0%
that I in a row so I've allocated space
 

00:06:09.550 --> 00:06:11.250 align:start position:0%
that I in a row so I've allocated space
for<00:06:09.850><c> five</c><00:06:10.060><c> integers</c><00:06:10.479><c> meaning</c><00:06:10.810><c> I'm</c><00:06:10.900><c> literally</c>

00:06:11.250 --> 00:06:11.260 align:start position:0%
for five integers meaning I'm literally
 

00:06:11.260 --> 00:06:13.110 align:start position:0%
for five integers meaning I'm literally
going<00:06:11.440><c> to</c><00:06:11.530><c> get</c><00:06:11.710><c> one</c><00:06:11.979><c> integer</c><00:06:12.340><c> after</c><00:06:12.820><c> the</c><00:06:12.940><c> other</c>

00:06:13.110 --> 00:06:13.120 align:start position:0%
going to get one integer after the other
 

00:06:13.120 --> 00:06:15.780 align:start position:0%
going to get one integer after the other
in<00:06:13.450><c> memory</c><00:06:13.810><c> each</c><00:06:14.350><c> integer</c><00:06:14.830><c> is</c><00:06:14.950><c> 4</c><00:06:14.979><c> bytes</c><00:06:15.340><c> so</c>

00:06:15.780 --> 00:06:15.790 align:start position:0%
in memory each integer is 4 bytes so
 

00:06:15.790 --> 00:06:17.850 align:start position:0%
in memory each integer is 4 bytes so
what<00:06:15.940><c> I've</c><00:06:16.060><c> got</c><00:06:16.090><c> here</c><00:06:16.450><c> is</c><00:06:16.720><c> 20</c><00:06:17.229><c> bytes</c><00:06:17.410><c> worth</c><00:06:17.710><c> of</c>

00:06:17.850 --> 00:06:17.860 align:start position:0%
what I've got here is 20 bytes worth of
 

00:06:17.860 --> 00:06:19.980 align:start position:0%
what I've got here is 20 bytes worth of
memory<00:06:18.160><c> in</c><00:06:18.640><c> a</c><00:06:18.700><c> row</c><00:06:19.000><c> which</c><00:06:19.390><c> is</c><00:06:19.419><c> divided</c><00:06:19.900><c> into</c>

00:06:19.980 --> 00:06:19.990 align:start position:0%
memory in a row which is divided into
 

00:06:19.990 --> 00:06:22.440 align:start position:0%
memory in a row which is divided into
kind<00:06:20.680><c> of</c><00:06:20.800><c> four</c><00:06:21.010><c> byte</c><00:06:21.160><c> segments</c><00:06:21.760><c> not</c><00:06:21.940><c> really</c>

00:06:22.440 --> 00:06:22.450 align:start position:0%
kind of four byte segments not really
 

00:06:22.450 --> 00:06:24.480 align:start position:0%
kind of four byte segments not really
divided<00:06:22.870><c> into</c><00:06:23.050><c> four</c><00:06:23.229><c> pipe</c><00:06:23.410><c> segments</c><00:06:23.919><c> however</c>

00:06:24.480 --> 00:06:24.490 align:start position:0%
divided into four pipe segments however
 

00:06:24.490 --> 00:06:26.219 align:start position:0%
divided into four pipe segments however
when<00:06:24.610><c> we</c><00:06:24.729><c> access</c><00:06:25.240><c> it</c><00:06:25.479><c> through</c><00:06:25.660><c> our</c><00:06:25.780><c> code</c><00:06:26.050><c> and</c>

00:06:26.219 --> 00:06:26.229 align:start position:0%
when we access it through our code and
 

00:06:26.229 --> 00:06:27.930 align:start position:0%
when we access it through our code and
all<00:06:26.320><c> that</c><00:06:26.500><c> it</c><00:06:26.860><c> is</c><00:06:27.070><c> for</c><00:06:27.520><c> all</c><00:06:27.610><c> intents</c><00:06:27.669><c> and</c>

00:06:27.930 --> 00:06:27.940 align:start position:0%
all that it is for all intents and
 

00:06:27.940 --> 00:06:29.909 align:start position:0%
all that it is for all intents and
purposes<00:06:28.030><c> divided</c><00:06:28.660><c> into</c><00:06:28.840><c> four</c><00:06:29.080><c> byte</c><00:06:29.320><c> segments</c>

00:06:29.909 --> 00:06:29.919 align:start position:0%
purposes divided into four byte segments
 

00:06:29.919 --> 00:06:32.100 align:start position:0%
purposes divided into four byte segments
even<00:06:30.190><c> though</c><00:06:30.310><c> there's</c><00:06:30.849><c> no</c><00:06:31.000><c> literal</c><00:06:31.360><c> division</c>

00:06:32.100 --> 00:06:32.110 align:start position:0%
even though there's no literal division
 

00:06:32.110 --> 00:06:33.870 align:start position:0%
even though there's no literal division
so<00:06:32.440><c> that's</c><00:06:32.919><c> what</c><00:06:33.099><c> you</c><00:06:33.220><c> see</c><00:06:33.400><c> over</c><00:06:33.580><c> here</c><00:06:33.610><c> in</c><00:06:33.820><c> this</c>

00:06:33.870 --> 00:06:33.880 align:start position:0%
so that's what you see over here in this
 

00:06:33.880 --> 00:06:36.570 align:start position:0%
so that's what you see over here in this
memory<00:06:34.210><c> of</c><00:06:34.270><c> you</c><00:06:34.419><c> you</c><00:06:34.690><c> see</c><00:06:34.900><c> five</c><00:06:35.229><c> 2's</c><00:06:35.830><c> which</c>

00:06:36.570 --> 00:06:36.580 align:start position:0%
memory of you you see five 2's which
 

00:06:36.580 --> 00:06:38.790 align:start position:0%
memory of you you see five 2's which
take<00:06:36.910><c> up</c><00:06:37.090><c> four</c><00:06:37.690><c> bytes</c><00:06:37.900><c> each</c><00:06:38.050><c> because</c><00:06:38.560><c> they</c><00:06:38.710><c> are</c>

00:06:38.790 --> 00:06:38.800 align:start position:0%
take up four bytes each because they are
 

00:06:38.800 --> 00:06:40.830 align:start position:0%
take up four bytes each because they are
integers<00:06:39.310><c> now</c><00:06:39.789><c> when</c><00:06:39.940><c> we</c><00:06:40.030><c> access</c><00:06:40.479><c> a</c><00:06:40.660><c> specific</c>

00:06:40.830 --> 00:06:40.840 align:start position:0%
integers now when we access a specific
 

00:06:40.840 --> 00:06:43.740 align:start position:0%
integers now when we access a specific
index<00:06:41.470><c> by</c><00:06:42.250><c> writing</c><00:06:42.490><c> example</c><00:06:43.090><c> I</c><00:06:43.270><c> what</c><00:06:43.660><c> it</c>

00:06:43.740 --> 00:06:43.750 align:start position:0%
index by writing example I what it
 

00:06:43.750 --> 00:06:45.480 align:start position:0%
index by writing example I what it
actually<00:06:43.900><c> does</c><00:06:44.200><c> is</c><00:06:44.440><c> a</c><00:06:44.470><c> text</c><00:06:44.770><c> an</c><00:06:44.860><c> offset</c><00:06:45.280><c> to</c>

00:06:45.480 --> 00:06:45.490 align:start position:0%
actually does is a text an offset to
 

00:06:45.490 --> 00:06:47.760 align:start position:0%
actually does is a text an offset to
this<00:06:45.610><c> memory</c><00:06:46.120><c> so</c><00:06:46.660><c> if</c><00:06:46.750><c> I</c><00:06:46.810><c> write</c><00:06:46.990><c> example</c><00:06:47.590><c> at</c>

00:06:47.760 --> 00:06:47.770 align:start position:0%
this memory so if I write example at
 

00:06:47.770 --> 00:06:50.070 align:start position:0%
this memory so if I write example at
index<00:06:48.099><c> 2</c><00:06:48.430><c> it's</c><00:06:49.150><c> going</c><00:06:49.240><c> to</c><00:06:49.539><c> start</c><00:06:49.780><c> at</c><00:06:49.990><c> the</c>

00:06:50.070 --> 00:06:50.080 align:start position:0%
index 2 it's going to start at the
 

00:06:50.080 --> 00:06:51.900 align:start position:0%
index 2 it's going to start at the
beginning<00:06:50.229><c> of</c><00:06:50.650><c> the</c><00:06:50.770><c> array</c><00:06:51.070><c> which</c><00:06:51.460><c> you</c><00:06:51.580><c> can</c><00:06:51.729><c> see</c>

00:06:51.900 --> 00:06:51.910 align:start position:0%
beginning of the array which you can see
 

00:06:51.910 --> 00:06:53.610 align:start position:0%
beginning of the array which you can see
is<00:06:52.120><c> this</c><00:06:52.419><c> memory</c><00:06:52.870><c> address</c><00:06:53.140><c> here</c>

00:06:53.610 --> 00:06:53.620 align:start position:0%
is this memory address here
 

00:06:53.620 --> 00:06:55.350 align:start position:0%
is this memory address here
and<00:06:53.710><c> it's</c><00:06:54.130><c> going</c><00:06:54.310><c> to</c><00:06:54.400><c> simply</c><00:06:54.789><c> add</c><00:06:54.940><c> on</c><00:06:54.970><c> eight</c>

00:06:55.350 --> 00:06:55.360 align:start position:0%
and it's going to simply add on eight
 

00:06:55.360 --> 00:06:58.529 align:start position:0%
and it's going to simply add on eight
bytes<00:06:55.930><c> because</c><00:06:56.410><c> each</c><00:06:57.010><c> integer</c><00:06:57.520><c> is</c><00:06:57.610><c> 4</c><00:06:57.640><c> bytes</c><00:06:58.000><c> we</c>

00:06:58.529 --> 00:06:58.539 align:start position:0%
bytes because each integer is 4 bytes we
 

00:06:58.539 --> 00:07:00.420 align:start position:0%
bytes because each integer is 4 bytes we
want<00:06:58.780><c> to</c><00:06:58.870><c> access</c><00:06:59.229><c> element</c><00:06:59.710><c> number</c><00:06:59.950><c> two</c><00:07:00.130><c> which</c>

00:07:00.420 --> 00:07:00.430 align:start position:0%
want to access element number two which
 

00:07:00.430 --> 00:07:02.490 align:start position:0%
want to access element number two which
is<00:07:00.550><c> its</c><00:07:00.729><c> third</c><00:07:00.970><c> element</c><00:07:01.510><c> since</c><00:07:01.930><c> indexing</c>

00:07:02.490 --> 00:07:02.500 align:start position:0%
is its third element since indexing
 

00:07:02.500 --> 00:07:04.860 align:start position:0%
is its third element since indexing
starts<00:07:02.680><c> at</c><00:07:02.860><c> 0</c><00:07:03.130><c> so</c><00:07:03.610><c> element</c><00:07:03.940><c> number</c><00:07:04.120><c> 2</c><00:07:04.360><c> will</c><00:07:04.750><c> be</c>

00:07:04.860 --> 00:07:04.870 align:start position:0%
starts at 0 so element number 2 will be
 

00:07:04.870 --> 00:07:07.560 align:start position:0%
starts at 0 so element number 2 will be
2<00:07:05.140><c> times</c><00:07:05.440><c> the</c><00:07:05.860><c> size</c><00:07:06.070><c> of</c><00:07:06.310><c> each</c><00:07:06.580><c> element</c><00:07:06.789><c> so</c><00:07:07.360><c> 2</c>

00:07:07.560 --> 00:07:07.570 align:start position:0%
2 times the size of each element so 2
 

00:07:07.570 --> 00:07:09.839 align:start position:0%
2 times the size of each element so 2
times<00:07:07.810><c> 4</c><00:07:08.110><c> in</c><00:07:08.289><c> our</c><00:07:08.410><c> case</c><00:07:08.620><c> which</c><00:07:09.190><c> bumps</c><00:07:09.520><c> up</c><00:07:09.640><c> a</c>

00:07:09.839 --> 00:07:09.849 align:start position:0%
times 4 in our case which bumps up a
 

00:07:09.849 --> 00:07:12.510 align:start position:0%
times 4 in our case which bumps up a
fight<00:07:10.360><c> forward</c><00:07:10.750><c> to</c><00:07:11.200><c> this</c><00:07:11.500><c> integer</c><00:07:11.890><c> over</c><00:07:12.250><c> here</c>

00:07:12.510 --> 00:07:12.520 align:start position:0%
fight forward to this integer over here
 

00:07:12.520 --> 00:07:14.880 align:start position:0%
fight forward to this integer over here
so<00:07:12.880><c> if</c><00:07:12.970><c> we</c><00:07:13.090><c> write</c><00:07:13.360><c> a</c><00:07:13.630><c> value</c><00:07:14.020><c> to</c><00:07:14.169><c> example</c><00:07:14.710><c> at</c>

00:07:14.880 --> 00:07:14.890 align:start position:0%
so if we write a value to example at
 

00:07:14.890 --> 00:07:17.610 align:start position:0%
so if we write a value to example at
index<00:07:15.250><c> 2</c><00:07:15.520><c> it</c><00:07:15.789><c> will</c><00:07:16.150><c> write</c><00:07:16.419><c> that</c><00:07:16.840><c> portion</c><00:07:17.410><c> of</c>

00:07:17.610 --> 00:07:17.620 align:start position:0%
index 2 it will write that portion of
 

00:07:17.620 --> 00:07:19.920 align:start position:0%
index 2 it will write that portion of
memory<00:07:17.830><c> now</c><00:07:18.460><c> as</c><00:07:18.669><c> I</c><00:07:18.820><c> mentioned</c><00:07:19.270><c> an</c><00:07:19.390><c> array</c><00:07:19.720><c> is</c>

00:07:19.920 --> 00:07:19.930 align:start position:0%
memory now as I mentioned an array is
 

00:07:19.930 --> 00:07:22.529 align:start position:0%
memory now as I mentioned an array is
really<00:07:20.349><c> just</c><00:07:20.590><c> a</c><00:07:20.770><c> pointer</c><00:07:21.280><c> it's</c><00:07:21.490><c> an</c><00:07:22.120><c> integer</c>

00:07:22.529 --> 00:07:22.539 align:start position:0%
really just a pointer it's an integer
 

00:07:22.539 --> 00:07:24.870 align:start position:0%
really just a pointer it's an integer
pointer<00:07:23.050><c> in</c><00:07:23.229><c> this</c><00:07:23.380><c> case</c><00:07:23.620><c> to</c><00:07:24.039><c> that</c><00:07:24.310><c> block</c><00:07:24.700><c> of</c>

00:07:24.870 --> 00:07:24.880 align:start position:0%
pointer in this case to that block of
 

00:07:24.880 --> 00:07:26.550 align:start position:0%
pointer in this case to that block of
memory<00:07:25.030><c> which</c><00:07:25.360><c> contains</c><00:07:25.750><c> our</c><00:07:25.870><c> 5</c><00:07:26.200><c> integers</c>

00:07:26.550 --> 00:07:26.560 align:start position:0%
memory which contains our 5 integers
 

00:07:26.560 --> 00:07:28.110 align:start position:0%
memory which contains our 5 integers
which<00:07:27.070><c> means</c><00:07:27.250><c> that</c><00:07:27.370><c> I</c><00:07:27.430><c> can</c><00:07:27.580><c> actually</c><00:07:27.849><c> create</c><00:07:28.000><c> a</c>

00:07:28.110 --> 00:07:28.120 align:start position:0%
which means that I can actually create a
 

00:07:28.120 --> 00:07:30.000 align:start position:0%
which means that I can actually create a
variable<00:07:28.450><c> here</c><00:07:28.780><c> which</c><00:07:28.990><c> is</c><00:07:29.140><c> just</c><00:07:29.710><c> an</c><00:07:29.800><c> integer</c>

00:07:30.000 --> 00:07:30.010 align:start position:0%
variable here which is just an integer
 

00:07:30.010 --> 00:07:33.029 align:start position:0%
variable here which is just an integer
pointer<00:07:30.460><c> and</c><00:07:30.750><c> give</c><00:07:31.750><c> it</c><00:07:31.900><c> the</c><00:07:31.990><c> value</c><00:07:32.320><c> of</c><00:07:32.470><c> example</c>

00:07:33.029 --> 00:07:33.039 align:start position:0%
pointer and give it the value of example
 

00:07:33.039 --> 00:07:34.589 align:start position:0%
pointer and give it the value of example
and<00:07:33.220><c> you</c><00:07:33.310><c> can</c><00:07:33.430><c> see</c><00:07:33.580><c> that</c><00:07:33.729><c> works</c><00:07:34.030><c> fine</c><00:07:34.300><c> and</c><00:07:34.510><c> that</c>

00:07:34.589 --> 00:07:34.599 align:start position:0%
and you can see that works fine and that
 

00:07:34.599 --> 00:07:36.690 align:start position:0%
and you can see that works fine and that
will<00:07:34.780><c> compile</c><00:07:35.080><c> just</c><00:07:35.380><c> fine</c><00:07:35.620><c> because</c><00:07:36.039><c> example</c>

00:07:36.690 --> 00:07:36.700 align:start position:0%
will compile just fine because example
 

00:07:36.700 --> 00:07:38.940 align:start position:0%
will compile just fine because example
is<00:07:36.880><c> just</c><00:07:37.270><c> an</c><00:07:37.450><c> integer</c><00:07:37.750><c> pointer</c><00:07:38.289><c> now</c><00:07:38.560><c> as</c><00:07:38.800><c> I</c>

00:07:38.940 --> 00:07:38.950 align:start position:0%
is just an integer pointer now as I
 

00:07:38.950 --> 00:07:40.710 align:start position:0%
is just an integer pointer now as I
pointed<00:07:39.099><c> out</c><00:07:39.340><c> accessing</c><00:07:40.120><c> element</c><00:07:40.479><c> number</c><00:07:40.690><c> 2</c>

00:07:40.710 --> 00:07:40.720 align:start position:0%
pointed out accessing element number 2
 

00:07:40.720 --> 00:07:42.719 align:start position:0%
pointed out accessing element number 2
and<00:07:41.260><c> setting</c><00:07:41.530><c> it</c><00:07:41.650><c> equal</c><00:07:41.710><c> to</c><00:07:41.890><c> 5</c><00:07:42.220><c> or</c><00:07:42.250><c> something</c>

00:07:42.719 --> 00:07:42.729 align:start position:0%
and setting it equal to 5 or something
 

00:07:42.729 --> 00:07:44.730 align:start position:0%
and setting it equal to 5 or something
like<00:07:42.820><c> that</c><00:07:43.060><c> will</c><00:07:43.570><c> result</c><00:07:43.870><c> in</c><00:07:44.080><c> us</c><00:07:44.410><c> basically</c>

00:07:44.730 --> 00:07:44.740 align:start position:0%
like that will result in us basically
 

00:07:44.740 --> 00:07:47.219 align:start position:0%
like that will result in us basically
writing<00:07:45.520><c> to</c><00:07:45.729><c> an</c><00:07:45.849><c> offset</c><00:07:46.000><c> of</c><00:07:46.240><c> 8</c><00:07:46.510><c> bytes</c><00:07:46.780><c> from</c>

00:07:47.219 --> 00:07:47.229 align:start position:0%
writing to an offset of 8 bytes from
 

00:07:47.229 --> 00:07:49.050 align:start position:0%
writing to an offset of 8 bytes from
pointer<00:07:47.710><c> so</c><00:07:47.919><c> this</c><00:07:48.070><c> code</c><00:07:48.340><c> over</c><00:07:48.550><c> here</c><00:07:48.580><c> can</c>

00:07:49.050 --> 00:07:49.060 align:start position:0%
pointer so this code over here can
 

00:07:49.060 --> 00:07:50.760 align:start position:0%
pointer so this code over here can
actually<00:07:49.150><c> be</c><00:07:49.539><c> rewritten</c><00:07:49.900><c> using</c><00:07:50.110><c> simple</c>

00:07:50.760 --> 00:07:50.770 align:start position:0%
actually be rewritten using simple
 

00:07:50.770 --> 00:07:52.680 align:start position:0%
actually be rewritten using simple
pointer<00:07:51.099><c> arithmetic</c><00:07:51.250><c> to</c><00:07:52.090><c> actually</c><00:07:52.479><c> be</c>

00:07:52.680 --> 00:07:52.690 align:start position:0%
pointer arithmetic to actually be
 

00:07:52.690 --> 00:07:55.110 align:start position:0%
pointer arithmetic to actually be
pointer<00:07:53.320><c> plus</c><00:07:53.620><c> 2</c><00:07:53.919><c> because</c><00:07:54.280><c> we're</c><00:07:54.460><c> accessing</c>

00:07:55.110 --> 00:07:55.120 align:start position:0%
pointer plus 2 because we're accessing
 

00:07:55.120 --> 00:07:57.480 align:start position:0%
pointer plus 2 because we're accessing
two<00:07:55.390><c> elements</c><00:07:55.870><c> forward</c><00:07:56.289><c> then</c><00:07:56.650><c> be</c><00:07:56.860><c> referencing</c>

00:07:57.480 --> 00:07:57.490 align:start position:0%
two elements forward then be referencing
 

00:07:57.490 --> 00:07:58.980 align:start position:0%
two elements forward then be referencing
this<00:07:57.640><c> and</c><00:07:57.940><c> then</c><00:07:58.270><c> setting</c><00:07:58.570><c> it</c><00:07:58.690><c> equal</c><00:07:58.720><c> to</c>

00:07:58.980 --> 00:07:58.990 align:start position:0%
this and then setting it equal to
 

00:07:58.990 --> 00:08:01.260 align:start position:0%
this and then setting it equal to
something<00:07:59.169><c> like</c><00:07:59.349><c> 6</c><00:08:00.099><c> for</c><00:08:00.310><c> example</c><00:08:00.430><c> let's</c><00:08:01.090><c> move</c>

00:08:01.260 --> 00:08:01.270 align:start position:0%
something like 6 for example let's move
 

00:08:01.270 --> 00:08:03.210 align:start position:0%
something like 6 for example let's move
our<00:08:01.419><c> for</c><00:08:01.630><c> loop</c><00:08:01.660><c> up</c><00:08:01.960><c> before</c><00:08:02.349><c> this</c><00:08:02.500><c> and</c><00:08:02.710><c> give</c>

00:08:03.210 --> 00:08:03.220 align:start position:0%
our for loop up before this and give
 

00:08:03.220 --> 00:08:05.010 align:start position:0%
our for loop up before this and give
this<00:08:03.400><c> a</c><00:08:03.460><c> shot</c><00:08:03.760><c> and</c><00:08:03.820><c> see</c><00:08:04.030><c> what</c><00:08:04.300><c> we</c><00:08:04.390><c> get</c><00:08:04.599><c> I'll</c><00:08:04.780><c> put</c>

00:08:05.010 --> 00:08:05.020 align:start position:0%
this a shot and see what we get I'll put
 

00:08:05.020 --> 00:08:07.200 align:start position:0%
this a shot and see what we get I'll put
a<00:08:05.050><c> breakpoint</c><00:08:05.289><c> right</c><00:08:05.650><c> over</c><00:08:05.919><c> here</c><00:08:06.099><c> so</c><00:08:06.760><c> if</c><00:08:06.910><c> I</c><00:08:07.060><c> go</c>

00:08:07.200 --> 00:08:07.210 align:start position:0%
a breakpoint right over here so if I go
 

00:08:07.210 --> 00:08:08.850 align:start position:0%
a breakpoint right over here so if I go
to<00:08:07.270><c> example</c><00:08:07.810><c> which</c><00:08:07.990><c> is</c><00:08:08.080><c> a</c><00:08:08.110><c> memory</c><00:08:08.440><c> address</c><00:08:08.500><c> of</c>

00:08:08.850 --> 00:08:08.860 align:start position:0%
to example which is a memory address of
 

00:08:08.860 --> 00:08:11.339 align:start position:0%
to example which is a memory address of
our<00:08:09.190><c> array</c><00:08:09.970><c> you</c><00:08:10.330><c> can</c><00:08:10.479><c> see</c><00:08:10.630><c> that</c><00:08:10.840><c> element</c>

00:08:11.339 --> 00:08:11.349 align:start position:0%
our array you can see that element
 

00:08:11.349 --> 00:08:13.589 align:start position:0%
our array you can see that element
number<00:08:11.560><c> 2</c><00:08:11.590><c> the</c><00:08:12.099><c> third</c><00:08:12.310><c> element</c><00:08:12.520><c> is</c><00:08:12.909><c> set</c><00:08:13.180><c> to</c><00:08:13.330><c> 5</c>

00:08:13.589 --> 00:08:13.599 align:start position:0%
number 2 the third element is set to 5
 

00:08:13.599 --> 00:08:15.440 align:start position:0%
number 2 the third element is set to 5
and<00:08:13.960><c> then</c><00:08:14.560><c> of</c><00:08:14.890><c> course</c>

00:08:15.440 --> 00:08:15.450 align:start position:0%
and then of course
 

00:08:15.450 --> 00:08:17.720 align:start position:0%
and then of course
it<00:08:16.050><c> should</c><00:08:16.290><c> be</c><00:08:16.410><c> set</c><00:08:16.650><c> to</c><00:08:16.680><c> second</c><00:08:17.220><c> steps</c><00:08:17.460><c> let's</c>

00:08:17.720 --> 00:08:17.730 align:start position:0%
it should be set to second steps let's
 

00:08:17.730 --> 00:08:19.190 align:start position:0%
it should be set to second steps let's
head<00:08:17.910><c> up</c><00:08:18.030><c> done</c><00:08:18.180><c> as</c><00:08:18.450><c> you</c><00:08:18.660><c> can</c><00:08:18.810><c> see</c><00:08:18.930><c> over</c><00:08:19.050><c> here</c>

00:08:19.190 --> 00:08:19.200 align:start position:0%
head up done as you can see over here
 

00:08:19.200 --> 00:08:22.280 align:start position:0%
head up done as you can see over here
that<00:08:19.410><c> it</c><00:08:19.710><c> was</c><00:08:19.800><c> changed</c><00:08:20.160><c> to</c><00:08:20.340><c> six</c><00:08:20.940><c> now</c><00:08:21.180><c> I</c><00:08:21.840><c> did</c><00:08:22.140><c> say</c>

00:08:22.280 --> 00:08:22.290 align:start position:0%
that it was changed to six now I did say
 

00:08:22.290 --> 00:08:23.690 align:start position:0%
that it was changed to six now I did say
eight<00:08:22.470><c> bytes</c><00:08:22.740><c> however</c><00:08:23.220><c> you</c><00:08:23.310><c> can</c><00:08:23.400><c> see</c><00:08:23.520><c> that</c><00:08:23.670><c> I</c>

00:08:23.690 --> 00:08:23.700 align:start position:0%
eight bytes however you can see that I
 

00:08:23.700 --> 00:08:25.670 align:start position:0%
eight bytes however you can see that I
wrote<00:08:23.880><c> off</c><00:08:24.120><c> true</c><00:08:24.450><c> for</c><00:08:24.780><c> this</c><00:08:24.870><c> pointer</c><00:08:25.350><c> the</c>

00:08:25.670 --> 00:08:25.680 align:start position:0%
wrote off true for this pointer the
 

00:08:25.680 --> 00:08:26.840 align:start position:0%
wrote off true for this pointer the
reason<00:08:25.890><c> I</c><00:08:25.920><c> did</c><00:08:26.100><c> that</c><00:08:26.130><c> is</c><00:08:26.280><c> because</c><00:08:26.490><c> when</c><00:08:26.760><c> you're</c>

00:08:26.840 --> 00:08:26.850 align:start position:0%
reason I did that is because when you're
 

00:08:26.850 --> 00:08:28.310 align:start position:0%
reason I did that is because when you're
dealing<00:08:26.970><c> with</c><00:08:27.120><c> pointer</c><00:08:27.480><c> arithmetic</c><00:08:27.780><c> so</c>

00:08:28.310 --> 00:08:28.320 align:start position:0%
dealing with pointer arithmetic so
 

00:08:28.320 --> 00:08:29.960 align:start position:0%
dealing with pointer arithmetic so
basically<00:08:28.620><c> what</c><00:08:28.830><c> I'm</c><00:08:28.950><c> just</c><00:08:29.160><c> adding</c><00:08:29.460><c> values</c>

00:08:29.960 --> 00:08:29.970 align:start position:0%
basically what I'm just adding values
 

00:08:29.970 --> 00:08:32.180 align:start position:0%
basically what I'm just adding values
like<00:08:30.150><c> -</c><00:08:30.390><c> -</c><00:08:30.660><c> a</c><00:08:30.690><c> pointer</c><00:08:31.170><c> the</c><00:08:31.620><c> number</c><00:08:31.860><c> of</c><00:08:31.980><c> bytes</c>

00:08:32.180 --> 00:08:32.190 align:start position:0%
like - - a pointer the number of bytes
 

00:08:32.190 --> 00:08:33.440 align:start position:0%
like - - a pointer the number of bytes
that<00:08:32.340><c> is</c><00:08:32.520><c> actually</c><00:08:32.790><c> going</c><00:08:32.880><c> to</c><00:08:32.970><c> add</c><00:08:33.090><c> it's</c><00:08:33.300><c> going</c>

00:08:33.440 --> 00:08:33.450 align:start position:0%
that is actually going to add it's going
 

00:08:33.450 --> 00:08:34.730 align:start position:0%
that is actually going to add it's going
to<00:08:33.510><c> depend</c><00:08:33.690><c> on</c><00:08:33.810><c> the</c><00:08:33.900><c> type</c><00:08:33.930><c> so</c><00:08:34.350><c> in</c><00:08:34.440><c> this</c><00:08:34.500><c> case</c>

00:08:34.730 --> 00:08:34.740 align:start position:0%
to depend on the type so in this case
 

00:08:34.740 --> 00:08:36.710 align:start position:0%
to depend on the type so in this case
since<00:08:34.950><c> the</c><00:08:35.070><c> pointer</c><00:08:35.520><c> is</c><00:08:35.670><c> an</c><00:08:35.850><c> integer</c><00:08:36.210><c> pointer</c>

00:08:36.710 --> 00:08:36.720 align:start position:0%
since the pointer is an integer pointer
 

00:08:36.720 --> 00:08:39.590 align:start position:0%
since the pointer is an integer pointer
is<00:08:36.960><c> going</c><00:08:37.650><c> to</c><00:08:37.740><c> add</c><00:08:37.890><c> two</c><00:08:38.520><c> times</c><00:08:38.820><c> four</c><00:08:39.240><c> because</c>

00:08:39.590 --> 00:08:39.600 align:start position:0%
is going to add two times four because
 

00:08:39.600 --> 00:08:41.450 align:start position:0%
is going to add two times four because
four<00:08:39.630><c> is</c><00:08:39.930><c> the</c><00:08:40.170><c> size</c><00:08:40.410><c> of</c><00:08:40.500><c> each</c><00:08:40.650><c> integer</c><00:08:40.950><c> if</c><00:08:41.340><c> I</c>

00:08:41.450 --> 00:08:41.460 align:start position:0%
four is the size of each integer if I
 

00:08:41.460 --> 00:08:42.890 align:start position:0%
four is the size of each integer if I
wanted<00:08:41.730><c> to</c><00:08:41.850><c> actually</c><00:08:42.030><c> deal</c><00:08:42.480><c> with</c><00:08:42.510><c> by</c><00:08:42.840><c> it</c>

00:08:42.890 --> 00:08:42.900 align:start position:0%
wanted to actually deal with by it
 

00:08:42.900 --> 00:08:44.750 align:start position:0%
wanted to actually deal with by it
either<00:08:43.110><c> cast</c><00:08:43.530><c> this</c><00:08:43.770><c> pointer</c><00:08:44.160><c> to</c><00:08:44.280><c> a</c><00:08:44.310><c> data</c><00:08:44.550><c> type</c>

00:08:44.750 --> 00:08:44.760 align:start position:0%
either cast this pointer to a data type
 

00:08:44.760 --> 00:08:47.120 align:start position:0%
either cast this pointer to a data type
that<00:08:44.820><c> is</c><00:08:45.270><c> just</c><00:08:45.600><c> one</c><00:08:45.930><c> by</c><00:08:46.140><c> large</c><00:08:46.470><c> for</c><00:08:46.740><c> example</c><00:08:47.040><c> at</c>

00:08:47.120 --> 00:08:47.130 align:start position:0%
that is just one by large for example at
 

00:08:47.130 --> 00:08:49.370 align:start position:0%
that is just one by large for example at
char<00:08:47.370><c> and</c><00:08:47.610><c> then</c><00:08:48.150><c> if</c><00:08:48.270><c> I</c><00:08:48.360><c> do</c><00:08:48.420><c> that</c><00:08:48.690><c> I'll</c><00:08:49.020><c> have</c><00:08:49.050><c> to</c>

00:08:49.370 --> 00:08:49.380 align:start position:0%
char and then if I do that I'll have to
 

00:08:49.380 --> 00:08:51.230 align:start position:0%
char and then if I do that I'll have to
add<00:08:49.650><c> on</c><00:08:49.860><c> the</c><00:08:50.070><c> eight</c><00:08:50.310><c> bytes</c><00:08:50.610><c> that</c><00:08:50.880><c> I</c><00:08:50.910><c> talked</c>

00:08:51.230 --> 00:08:51.240 align:start position:0%
add on the eight bytes that I talked
 

00:08:51.240 --> 00:08:53.270 align:start position:0%
add on the eight bytes that I talked
about<00:08:51.360><c> since</c><00:08:52.080><c> I</c><00:08:52.170><c> then</c><00:08:52.380><c> want</c><00:08:52.650><c> to</c><00:08:52.740><c> write</c><00:08:52.950><c> in</c><00:08:53.160><c> an</c>

00:08:53.270 --> 00:08:53.280 align:start position:0%
about since I then want to write in an
 

00:08:53.280 --> 00:08:55.130 align:start position:0%
about since I then want to write in an
integer<00:08:53.550><c> which</c><00:08:54.030><c> is</c><00:08:54.180><c> 4</c><00:08:54.420><c> bytes</c><00:08:54.600><c> not</c><00:08:54.900><c> just</c><00:08:55.080><c> a</c>

00:08:55.130 --> 00:08:55.140 align:start position:0%
integer which is 4 bytes not just a
 

00:08:55.140 --> 00:08:56.630 align:start position:0%
integer which is 4 bytes not just a
single<00:08:55.410><c> child</c><00:08:55.620><c> which</c><00:08:55.890><c> is</c><00:08:56.010><c> one</c><00:08:56.190><c> byte</c>

00:08:56.630 --> 00:08:56.640 align:start position:0%
single child which is one byte
 

00:08:56.640 --> 00:08:58.820 align:start position:0%
single child which is one byte
once<00:08:56.970><c> I</c><00:08:57.180><c> actually</c><00:08:57.390><c> do</c><00:08:57.840><c> the</c><00:08:58.020><c> plot</c><00:08:58.200><c> 8</c><00:08:58.440><c> I</c><00:08:58.740><c> would</c>

00:08:58.820 --> 00:08:58.830 align:start position:0%
once I actually do the plot 8 I would
 

00:08:58.830 --> 00:09:00.740 align:start position:0%
once I actually do the plot 8 I would
need<00:08:59.160><c> to</c><00:08:59.340><c> cast</c><00:08:59.550><c> this</c><00:08:59.760><c> back</c><00:09:00.030><c> into</c><00:09:00.300><c> an</c><00:09:00.570><c> integer</c>

00:09:00.740 --> 00:09:00.750 align:start position:0%
need to cast this back into an integer
 

00:09:00.750 --> 00:09:02.540 align:start position:0%
need to cast this back into an integer
pointer<00:09:01.380><c> and</c><00:09:01.590><c> then</c><00:09:01.770><c> of</c><00:09:01.860><c> course</c><00:09:01.890><c> the</c><00:09:02.190><c> reference</c>

00:09:02.540 --> 00:09:02.550 align:start position:0%
pointer and then of course the reference
 

00:09:02.550 --> 00:09:03.830 align:start position:0%
pointer and then of course the reference
that<00:09:02.610><c> to</c><00:09:02.730><c> get</c><00:09:02.880><c> my</c><00:09:03.000><c> internship</c><00:09:03.420><c> so</c><00:09:03.510><c> that</c><00:09:03.660><c> I</c><00:09:03.690><c> can</c>

00:09:03.830 --> 00:09:03.840 align:start position:0%
that to get my internship so that I can
 

00:09:03.840 --> 00:09:05.240 align:start position:0%
that to get my internship so that I can
set<00:09:03.990><c> it</c><00:09:04.020><c> equal</c><00:09:04.140><c> to</c><00:09:04.290><c> 6</c><00:09:04.530><c> now</c><00:09:04.800><c> this</c><00:09:04.950><c> is</c><00:09:05.040><c> a</c><00:09:05.070><c> pretty</c>

00:09:05.240 --> 00:09:05.250 align:start position:0%
set it equal to 6 now this is a pretty
 

00:09:05.250 --> 00:09:07.370 align:start position:0%
set it equal to 6 now this is a pretty
wild<00:09:05.490><c> line</c><00:09:06.120><c> of</c><00:09:06.240><c> code</c><00:09:06.450><c> but</c><00:09:06.660><c> let's</c><00:09:06.720><c> check</c><00:09:06.990><c> it</c><00:09:07.080><c> out</c>

00:09:07.370 --> 00:09:07.380 align:start position:0%
wild line of code but let's check it out
 

00:09:07.380 --> 00:09:10.040 align:start position:0%
wild line of code but let's check it out
when<00:09:07.590><c> I</c><00:09:07.620><c> hit</c><00:09:07.770><c> our</c><00:09:07.920><c> 5</c><00:09:08.160><c> go</c><00:09:08.820><c> to</c><00:09:08.940><c> my</c><00:09:09.030><c> example</c><00:09:09.330><c> you</c>

00:09:10.040 --> 00:09:10.050 align:start position:0%
when I hit our 5 go to my example you
 

00:09:10.050 --> 00:09:12.440 align:start position:0%
when I hit our 5 go to my example you
can<00:09:10.200><c> see</c><00:09:10.350><c> it's</c><00:09:10.470><c> set</c><00:09:10.560><c> to</c><00:09:10.620><c> 5</c><00:09:10.920><c> when</c><00:09:11.550><c> I</c><00:09:11.580><c> hit</c><00:09:11.730><c> f10</c><00:09:12.120><c> you</c>

00:09:12.440 --> 00:09:12.450 align:start position:0%
can see it's set to 5 when I hit f10 you
 

00:09:12.450 --> 00:09:13.670 align:start position:0%
can see it's set to 5 when I hit f10 you
can<00:09:12.570><c> see</c><00:09:12.660><c> we</c><00:09:12.750><c> get</c><00:09:12.840><c> the</c><00:09:12.900><c> exact</c><00:09:13.110><c> same</c><00:09:13.230><c> result</c><00:09:13.530><c> is</c>

00:09:13.670 --> 00:09:13.680 align:start position:0%
can see we get the exact same result is
 

00:09:13.680 --> 00:09:15.680 align:start position:0%
can see we get the exact same result is
a<00:09:13.710><c> set</c><00:09:13.920><c> of</c><00:09:14.040><c> 6</c><00:09:14.250><c> so</c><00:09:14.730><c> yes</c><00:09:14.940><c> you</c><00:09:15.150><c> can</c><00:09:15.270><c> get</c><00:09:15.420><c> pretty</c>

00:09:15.680 --> 00:09:15.690 align:start position:0%
a set of 6 so yes you can get pretty
 

00:09:15.690 --> 00:09:17.930 align:start position:0%
a set of 6 so yes you can get pretty
fancy<00:09:16.260><c> with</c><00:09:16.410><c> this</c><00:09:16.500><c> but</c><00:09:16.830><c> essentially</c><00:09:17.640><c> what</c><00:09:17.910><c> I</c>

00:09:17.930 --> 00:09:17.940 align:start position:0%
fancy with this but essentially what I
 

00:09:17.940 --> 00:09:20.900 align:start position:0%
fancy with this but essentially what I
wrote<00:09:18.150><c> here</c><00:09:18.210><c> is</c><00:09:18.690><c> exactly</c><00:09:19.410><c> what</c><00:09:19.770><c> this</c><00:09:19.980><c> indexing</c>

00:09:20.900 --> 00:09:20.910 align:start position:0%
wrote here is exactly what this indexing
 

00:09:20.910 --> 00:09:22.970 align:start position:0%
wrote here is exactly what this indexing
does<00:09:21.240><c> it's</c><00:09:21.510><c> not</c><00:09:21.570><c> magic</c><00:09:22.170><c> that's</c><00:09:22.500><c> how</c><00:09:22.680><c> arrays</c>

00:09:22.970 --> 00:09:22.980 align:start position:0%
does it's not magic that's how arrays
 

00:09:22.980 --> 00:09:24.650 align:start position:0%
does it's not magic that's how arrays
work<00:09:23.250><c> they're</c><00:09:23.460><c> just</c><00:09:23.610><c> a</c><00:09:23.670><c> contiguous</c><00:09:24.150><c> block</c><00:09:24.420><c> of</c>

00:09:24.650 --> 00:09:24.660 align:start position:0%
work they're just a contiguous block of
 

00:09:24.660 --> 00:09:27.050 align:start position:0%
work they're just a contiguous block of
data<00:09:24.930><c> and</c><00:09:25.350><c> you</c><00:09:26.040><c> can</c><00:09:26.070><c> you</c><00:09:26.610><c> can</c><00:09:26.670><c> literally</c>

00:09:27.050 --> 00:09:27.060 align:start position:0%
data and you can you can literally
 

00:09:27.060 --> 00:09:28.760 align:start position:0%
data and you can you can literally
in-depth<00:09:27.510><c> them</c><00:09:27.690><c> like</c><00:09:27.900><c> their</c><00:09:28.080><c> word</c><00:09:28.260><c> book</c><00:09:28.530><c> and</c>

00:09:28.760 --> 00:09:28.770 align:start position:0%
in-depth them like their word book and
 

00:09:28.770 --> 00:09:30.890 align:start position:0%
in-depth them like their word book and
write<00:09:28.920><c> to</c><00:09:29.070><c> a</c><00:09:29.100><c> specific</c><00:09:29.520><c> page</c><00:09:29.760><c> in</c><00:09:30.060><c> this</c><00:09:30.510><c> case</c><00:09:30.570><c> a</c>

00:09:30.890 --> 00:09:30.900 align:start position:0%
write to a specific page in this case a
 

00:09:30.900 --> 00:09:31.970 align:start position:0%
write to a specific page in this case a
specific<00:09:31.140><c> integer</c>

00:09:31.970 --> 00:09:31.980 align:start position:0%
specific integer
 

00:09:31.980 --> 00:09:33.710 align:start position:0%
specific integer
no<00:09:32.130><c> I'm</c><00:09:32.250><c> going</c><00:09:32.430><c> to</c><00:09:32.490><c> wrap</c><00:09:32.580><c> this</c><00:09:32.700><c> up</c><00:09:32.910><c> here</c><00:09:33.420><c> pretty</c>

00:09:33.710 --> 00:09:33.720 align:start position:0%
no I'm going to wrap this up here pretty
 

00:09:33.720 --> 00:09:34.940 align:start position:0%
no I'm going to wrap this up here pretty
soon<00:09:33.810><c> because</c><00:09:34.260><c> I</c><00:09:34.380><c> don't</c><00:09:34.500><c> want</c><00:09:34.620><c> to</c><00:09:34.680><c> get</c><00:09:34.770><c> too</c>

00:09:34.940 --> 00:09:34.950 align:start position:0%
soon because I don't want to get too
 

00:09:34.950 --> 00:09:36.980 align:start position:0%
soon because I don't want to get too
in-depth<00:09:35.280><c> into</c><00:09:35.880><c> arrays</c><00:09:36.210><c> and</c><00:09:36.390><c> confuse</c><00:09:36.810><c> you</c>

00:09:36.980 --> 00:09:36.990 align:start position:0%
in-depth into arrays and confuse you
 

00:09:36.990 --> 00:09:39.110 align:start position:0%
in-depth into arrays and confuse you
however<00:09:37.260><c> you</c><00:09:37.800><c> can</c><00:09:38.040><c> also</c><00:09:38.160><c> create</c><00:09:38.430><c> arrays</c><00:09:38.820><c> on</c>

00:09:39.110 --> 00:09:39.120 align:start position:0%
however you can also create arrays on
 

00:09:39.120 --> 00:09:40.190 align:start position:0%
however you can also create arrays on
the<00:09:39.240><c> Cape</c><00:09:39.450><c> we</c><00:09:39.600><c> haven't</c><00:09:39.840><c> talked</c><00:09:39.960><c> about</c><00:09:40.140><c> the</c>

00:09:40.190 --> 00:09:40.200 align:start position:0%
the Cape we haven't talked about the
 

00:09:40.200 --> 00:09:41.870 align:start position:0%
the Cape we haven't talked about the
staff<00:09:40.410><c> or</c><00:09:40.620><c> the</c><00:09:40.650><c> sheet</c><00:09:40.920><c> mulch</c><00:09:41.190><c> or</c><00:09:41.400><c> how</c><00:09:41.520><c> memory</c>

00:09:41.870 --> 00:09:41.880 align:start position:0%
staff or the sheet mulch or how memory
 

00:09:41.880 --> 00:09:43.670 align:start position:0%
staff or the sheet mulch or how memory
really<00:09:42.120><c> works</c><00:09:42.420><c> much</c><00:09:42.660><c> I</c><00:09:42.870><c> definitely</c><00:09:43.410><c> am</c><00:09:43.500><c> going</c>

00:09:43.670 --> 00:09:43.680 align:start position:0%
really works much I definitely am going
 

00:09:43.680 --> 00:09:46.130 align:start position:0%
really works much I definitely am going
to<00:09:43.740><c> get</c><00:09:43.890><c> to</c><00:09:44.010><c> that</c><00:09:44.190><c> very</c><00:09:44.520><c> very</c><00:09:44.910><c> soon</c><00:09:45.360><c> Oh</c><00:09:45.570><c> for</c><00:09:46.020><c> now</c>

00:09:46.130 --> 00:09:46.140 align:start position:0%
to get to that very very soon Oh for now
 

00:09:46.140 --> 00:09:48.290 align:start position:0%
to get to that very very soon Oh for now
similarly<00:09:46.890><c> to</c><00:09:47.100><c> how</c><00:09:47.250><c> we</c><00:09:47.310><c> can</c><00:09:47.580><c> create</c><00:09:47.760><c> classes</c>

00:09:48.290 --> 00:09:48.300 align:start position:0%
similarly to how we can create classes
 

00:09:48.300 --> 00:09:49.790 align:start position:0%
similarly to how we can create classes
by<00:09:48.450><c> using</c><00:09:48.630><c> the</c><00:09:48.810><c> new</c><00:09:48.990><c> keyboard</c><00:09:49.470><c> we</c><00:09:49.530><c> can</c><00:09:49.710><c> also</c>

00:09:49.790 --> 00:09:49.800 align:start position:0%
by using the new keyboard we can also
 

00:09:49.800 --> 00:09:51.770 align:start position:0%
by using the new keyboard we can also
create<00:09:50.100><c> arrays</c><00:09:50.730><c> by</c><00:09:51.090><c> using</c><00:09:51.270><c> the</c><00:09:51.480><c> new</c><00:09:51.600><c> keyword</c>

00:09:51.770 --> 00:09:51.780 align:start position:0%
create arrays by using the new keyword
 

00:09:51.780 --> 00:09:53.810 align:start position:0%
create arrays by using the new keyword
so<00:09:52.500><c> we'll</c><00:09:52.620><c> make</c><00:09:52.710><c> another</c><00:09:52.980><c> array</c><00:09:53.340><c> here</c><00:09:53.580><c> I'll</c>

00:09:53.810 --> 00:09:53.820 align:start position:0%
so we'll make another array here I'll
 

00:09:53.820 --> 00:09:56.120 align:start position:0%
so we'll make another array here I'll
call<00:09:54.150><c> this</c><00:09:54.330><c> one</c><00:09:54.390><c> another</c><00:09:55.110><c> this</c><00:09:55.770><c> will</c><00:09:55.920><c> be</c><00:09:56.040><c> an</c>

00:09:56.120 --> 00:09:56.130 align:start position:0%
call this one another this will be an
 

00:09:56.130 --> 00:09:58.160 align:start position:0%
call this one another this will be an
int<00:09:56.340><c> pointer</c><00:09:56.760><c> and</c><00:09:57.300><c> then</c><00:09:57.630><c> I'll</c><00:09:57.780><c> set</c><00:09:57.960><c> it</c><00:09:57.990><c> equal</c>

00:09:58.160 --> 00:09:58.170 align:start position:0%
int pointer and then I'll set it equal
 

00:09:58.170 --> 00:10:00.560 align:start position:0%
int pointer and then I'll set it equal
to<00:09:58.380><c> a</c><00:09:58.800><c> new</c><00:09:58.830><c> instance</c><00:09:59.130><c> where</c><00:09:59.760><c> decide</c><00:10:00.300><c> that</c><00:10:00.450><c> I</c>

00:10:00.560 --> 00:10:00.570 align:start position:0%
to a new instance where decide that I
 

00:10:00.570 --> 00:10:02.600 align:start position:0%
to a new instance where decide that I
want<00:10:00.810><c> so</c><00:10:01.020><c> let's</c><00:10:01.230><c> go</c><00:10:01.440><c> with</c><00:10:01.560><c> 5</c><00:10:01.770><c> again</c><00:10:02.040><c> this</c><00:10:02.310><c> code</c>

00:10:02.600 --> 00:10:02.610 align:start position:0%
want so let's go with 5 again this code
 

00:10:02.610 --> 00:10:05.090 align:start position:0%
want so let's go with 5 again this code
is<00:10:02.880><c> identical</c><00:10:03.090><c> to</c><00:10:03.870><c> this</c><00:10:04.050><c> code</c><00:10:04.350><c> however</c><00:10:04.620><c> the</c>

00:10:05.090 --> 00:10:05.100 align:start position:0%
is identical to this code however the
 

00:10:05.100 --> 00:10:06.710 align:start position:0%
is identical to this code however the
lifetime<00:10:05.610><c> of</c><00:10:05.640><c> difference</c><00:10:06.000><c> and</c><00:10:06.390><c> this</c><00:10:06.600><c> is</c>

00:10:06.710 --> 00:10:06.720 align:start position:0%
lifetime of difference and this is
 

00:10:06.720 --> 00:10:08.150 align:start position:0%
lifetime of difference and this is
created<00:10:07.080><c> on</c><00:10:07.140><c> the</c><00:10:07.260><c> stack</c><00:10:07.500><c> it</c><00:10:07.770><c> will</c><00:10:07.980><c> get</c>

00:10:08.150 --> 00:10:08.160 align:start position:0%
created on the stack it will get
 

00:10:08.160 --> 00:10:10.040 align:start position:0%
created on the stack it will get
destroyed<00:10:08.550><c> when</c><00:10:08.790><c> we</c><00:10:08.880><c> reach</c><00:10:09.060><c> the</c><00:10:09.330><c> end</c><00:10:09.540><c> curly</c>

00:10:10.040 --> 00:10:10.050 align:start position:0%
destroyed when we reach the end curly
 

00:10:10.050 --> 00:10:11.420 align:start position:0%
destroyed when we reach the end curly
bracket<00:10:10.410><c> and</c><00:10:10.560><c> we</c><00:10:10.620><c> get</c><00:10:10.800><c> out</c><00:10:10.920><c> of</c><00:10:10.950><c> this</c><00:10:11.100><c> scope</c>

00:10:11.420 --> 00:10:11.430 align:start position:0%
bracket and we get out of this scope
 

00:10:11.430 --> 00:10:13.520 align:start position:0%
bracket and we get out of this scope
however<00:10:12.180><c> it</c><00:10:12.270><c> is</c><00:10:12.390><c> since</c><00:10:12.750><c> it's</c><00:10:12.960><c> created</c><00:10:13.380><c> on</c><00:10:13.470><c> the</c>

00:10:13.520 --> 00:10:13.530 align:start position:0%
however it is since it's created on the
 

00:10:13.530 --> 00:10:15.950 align:start position:0%
however it is since it's created on the
heap<00:10:13.710><c> will</c><00:10:14.040><c> actually</c><00:10:14.430><c> be</c><00:10:14.670><c> alive</c><00:10:15.300><c> until</c><00:10:15.780><c> we</c>

00:10:15.950 --> 00:10:15.960 align:start position:0%
heap will actually be alive until we
 

00:10:15.960 --> 00:10:18.470 align:start position:0%
heap will actually be alive until we
destroy<00:10:16.170><c> it</c><00:10:16.380><c> or</c><00:10:16.740><c> into</c><00:10:16.920><c> our</c><00:10:17.040><c> program</c><00:10:17.460><c> and</c><00:10:17.670><c> so</c>

00:10:18.470 --> 00:10:18.480 align:start position:0%
destroy it or into our program and so
 

00:10:18.480 --> 00:10:20.120 align:start position:0%
destroy it or into our program and so
you<00:10:18.540><c> need</c><00:10:18.840><c> to</c><00:10:18.960><c> actually</c><00:10:19.170><c> delete</c><00:10:19.620><c> it</c><00:10:19.770><c> using</c><00:10:19.920><c> the</c>

00:10:20.120 --> 00:10:20.130 align:start position:0%
you need to actually delete it using the
 

00:10:20.130 --> 00:10:21.510 align:start position:0%
you need to actually delete it using the
delete<00:10:20.370><c> keyword</c><00:10:20.610><c> and</c>

00:10:21.510 --> 00:10:21.520 align:start position:0%
delete keyword and
 

00:10:21.520 --> 00:10:23.400 align:start position:0%
delete keyword and
if<00:10:21.580><c> this</c><00:10:21.970><c> is</c><00:10:22.120><c> an</c><00:10:22.240><c> array</c><00:10:22.510><c> and</c><00:10:22.780><c> we</c><00:10:22.870><c> allocated</c>

00:10:23.400 --> 00:10:23.410 align:start position:0%
if this is an array and we allocated
 

00:10:23.410 --> 00:10:26.070 align:start position:0%
if this is an array and we allocated
using<00:10:23.590><c> the</c><00:10:23.890><c> array</c><00:10:24.370><c> operator</c><00:10:25.060><c> here</c><00:10:25.420><c> so</c><00:10:25.810><c> we</c><00:10:25.960><c> use</c>

00:10:26.070 --> 00:10:26.080 align:start position:0%
using the array operator here so we use
 

00:10:26.080 --> 00:10:27.990 align:start position:0%
using the array operator here so we use
the<00:10:26.230><c> new</c><00:10:26.380><c> keyword</c><00:10:26.620><c> with</c><00:10:27.160><c> the</c><00:10:27.340><c> square</c><00:10:27.580><c> brackets</c>

00:10:27.990 --> 00:10:28.000 align:start position:0%
the new keyword with the square brackets
 

00:10:28.000 --> 00:10:29.670 align:start position:0%
the new keyword with the square brackets
we<00:10:28.420><c> need</c><00:10:28.570><c> to</c><00:10:28.660><c> delete</c><00:10:28.930><c> it</c><00:10:29.080><c> using</c><00:10:29.320><c> the</c><00:10:29.530><c> square</c>

00:10:29.670 --> 00:10:29.680 align:start position:0%
we need to delete it using the square
 

00:10:29.680 --> 00:10:32.010 align:start position:0%
we need to delete it using the square
brackets<00:10:30.070><c> like</c><00:10:30.160><c> this</c><00:10:30.370><c> as</c><00:10:30.580><c> well</c><00:10:30.930><c> let's</c><00:10:31.930><c> go</c>

00:10:32.010 --> 00:10:32.020 align:start position:0%
brackets like this as well let's go
 

00:10:32.020 --> 00:10:33.480 align:start position:0%
brackets like this as well let's go
ahead<00:10:32.110><c> and</c><00:10:32.290><c> bring</c><00:10:32.380><c> back</c><00:10:32.560><c> that</c><00:10:32.710><c> for</c><00:10:32.920><c> loop</c><00:10:33.100><c> for</c>

00:10:33.480 --> 00:10:33.490 align:start position:0%
ahead and bring back that for loop for
 

00:10:33.490 --> 00:10:35.700 align:start position:0%
ahead and bring back that for loop for
our<00:10:33.700><c> example</c><00:10:34.240><c> we'll</c><00:10:34.720><c> set</c><00:10:34.870><c> it</c><00:10:34.930><c> equal</c><00:10:35.200><c> to</c><00:10:35.410><c> two</c>

00:10:35.700 --> 00:10:35.710 align:start position:0%
our example we'll set it equal to two
 

00:10:35.710 --> 00:10:38.550 align:start position:0%
our example we'll set it equal to two
and<00:10:36.070><c> I'll</c><00:10:36.460><c> do</c><00:10:36.580><c> the</c><00:10:36.700><c> exact</c><00:10:37.060><c> same</c><00:10:37.090><c> thing</c><00:10:37.690><c> for</c><00:10:38.320><c> our</c>

00:10:38.550 --> 00:10:38.560 align:start position:0%
and I'll do the exact same thing for our
 

00:10:38.560 --> 00:10:42.990 align:start position:0%
and I'll do the exact same thing for our
other<00:10:39.690><c> array</c><00:10:40.830><c> that's</c><00:10:41.830><c> another</c><00:10:42.130><c> equal</c><00:10:42.580><c> to</c><00:10:42.670><c> two</c>

00:10:42.990 --> 00:10:43.000 align:start position:0%
other array that's another equal to two
 

00:10:43.000 --> 00:10:44.760 align:start position:0%
other array that's another equal to two
of<00:10:43.540><c> course</c><00:10:43.750><c> I</c><00:10:43.840><c> could</c><00:10:43.990><c> have</c><00:10:44.080><c> a</c><00:10:44.110><c> friend</c><00:10:44.290><c> this</c><00:10:44.560><c> in</c>

00:10:44.760 --> 00:10:44.770 align:start position:0%
of course I could have a friend this in
 

00:10:44.770 --> 00:10:48.030 align:start position:0%
of course I could have a friend this in
a<00:10:44.890><c> single</c><00:10:45.220><c> for</c><00:10:45.430><c> loop</c><00:10:45.580><c> but</c><00:10:46.530><c> let's</c><00:10:47.530><c> head</c><00:10:47.680><c> up</c><00:10:47.800><c> five</c>

00:10:48.030 --> 00:10:48.040 align:start position:0%
a single for loop but let's head up five
 

00:10:48.040 --> 00:10:49.950 align:start position:0%
a single for loop but let's head up five
so<00:10:48.490><c> if</c><00:10:48.580><c> I</c><00:10:48.670><c> type</c><00:10:48.820><c> an</c><00:10:49.000><c> example</c><00:10:49.420><c> over</c><00:10:49.570><c> here</c><00:10:49.600><c> in</c><00:10:49.840><c> my</c>

00:10:49.950 --> 00:10:49.960 align:start position:0%
so if I type an example over here in my
 

00:10:49.960 --> 00:10:51.870 align:start position:0%
so if I type an example over here in my
view<00:10:50.170><c> I</c><00:10:50.350><c> get</c><00:10:50.530><c> my</c><00:10:50.650><c> five</c><00:10:50.950><c> two</c><00:10:51.190><c> is</c><00:10:51.310><c> in</c><00:10:51.430><c> a</c><00:10:51.490><c> row</c><00:10:51.610><c> and</c>

00:10:51.870 --> 00:10:51.880 align:start position:0%
view I get my five two is in a row and
 

00:10:51.880 --> 00:10:53.610 align:start position:0%
view I get my five two is in a row and
of<00:10:52.300><c> course</c><00:10:52.510><c> the</c><00:10:52.630><c> pie</c><00:10:52.750><c> type</c><00:10:52.930><c> in</c><00:10:53.080><c> another</c><00:10:53.320><c> I'm</c>

00:10:53.610 --> 00:10:53.620 align:start position:0%
of course the pie type in another I'm
 

00:10:53.620 --> 00:10:55.440 align:start position:0%
of course the pie type in another I'm
also<00:10:53.890><c> going</c><00:10:54.130><c> to</c><00:10:54.220><c> get</c><00:10:54.430><c> the</c><00:10:54.580><c> exact</c><00:10:54.820><c> same</c><00:10:54.850><c> result</c>

00:10:55.440 --> 00:10:55.450 align:start position:0%
also going to get the exact same result
 

00:10:55.450 --> 00:10:57.180 align:start position:0%
also going to get the exact same result
so<00:10:55.630><c> why</c><00:10:55.930><c> would</c><00:10:56.110><c> you</c><00:10:56.200><c> allocate</c><00:10:56.560><c> dynamically</c>

00:10:57.180 --> 00:10:57.190 align:start position:0%
so why would you allocate dynamically
 

00:10:57.190 --> 00:10:58.710 align:start position:0%
so why would you allocate dynamically
using<00:10:57.580><c> the</c><00:10:57.670><c> nuclear</c><00:10:57.820><c> web</c><00:10:58.150><c> rather</c><00:10:58.360><c> than</c><00:10:58.540><c> just</c>

00:10:58.710 --> 00:10:58.720 align:start position:0%
using the nuclear web rather than just
 

00:10:58.720 --> 00:11:00.480 align:start position:0%
using the nuclear web rather than just
creating<00:10:58.870><c> it</c><00:10:59.110><c> on</c><00:10:59.140><c> the</c><00:10:59.260><c> stack</c><00:10:59.530><c> the</c><00:10:59.860><c> biggest</c>

00:11:00.480 --> 00:11:00.490 align:start position:0%
creating it on the stack the biggest
 

00:11:00.490 --> 00:11:03.300 align:start position:0%
creating it on the stack the biggest
example<00:11:01.270><c> is</c><00:11:01.420><c> to</c><00:11:02.080><c> do</c><00:11:02.170><c> with</c><00:11:02.350><c> lifetimes</c><00:11:02.800><c> right</c>

00:11:03.300 --> 00:11:03.310 align:start position:0%
example is to do with lifetimes right
 

00:11:03.310 --> 00:11:05.040 align:start position:0%
example is to do with lifetimes right
because<00:11:03.730><c> like</c><00:11:04.000><c> anything</c><00:11:04.420><c> be</c><00:11:04.510><c> allocate</c><00:11:04.900><c> with</c>

00:11:05.040 --> 00:11:05.050 align:start position:0%
because like anything be allocate with
 

00:11:05.050 --> 00:11:06.720 align:start position:0%
because like anything be allocate with
new<00:11:05.200><c> it</c><00:11:05.470><c> will</c><00:11:05.590><c> be</c><00:11:05.680><c> around</c><00:11:06.010><c> until</c><00:11:06.190><c> you</c><00:11:06.430><c> delete</c>

00:11:06.720 --> 00:11:06.730 align:start position:0%
new it will be around until you delete
 

00:11:06.730 --> 00:11:08.460 align:start position:0%
new it will be around until you delete
it<00:11:06.880><c> but</c><00:11:07.000><c> we</c><00:11:07.120><c> have</c><00:11:07.210><c> a</c><00:11:07.240><c> function</c><00:11:07.720><c> returning</c><00:11:08.290><c> and</c>

00:11:08.460 --> 00:11:08.470 align:start position:0%
it but we have a function returning and
 

00:11:08.470 --> 00:11:10.650 align:start position:0%
it but we have a function returning and
you<00:11:08.620><c> will</c><00:11:08.770><c> reign</c><00:11:08.950><c> for</c><00:11:09.190><c> example</c><00:11:09.610><c> you</c><00:11:10.090><c> have</c><00:11:10.390><c> to</c>

00:11:10.650 --> 00:11:10.660 align:start position:0%
you will reign for example you have to
 

00:11:10.660 --> 00:11:12.570 align:start position:0%
you will reign for example you have to
allocate<00:11:11.050><c> using</c><00:11:11.380><c> a</c><00:11:11.440><c> nuclear</c><00:11:11.620><c> word</c><00:11:11.950><c> unless</c><00:11:12.250><c> you</c>

00:11:12.570 --> 00:11:12.580 align:start position:0%
allocate using a nuclear word unless you
 

00:11:12.580 --> 00:11:14.970 align:start position:0%
allocate using a nuclear word unless you
toss<00:11:12.940><c> in</c><00:11:13.210><c> mount</c><00:11:13.630><c> a</c><00:11:13.720><c> memory</c><00:11:14.110><c> address</c><00:11:14.500><c> by</c><00:11:14.920><c> the</c>

00:11:14.970 --> 00:11:14.980 align:start position:0%
toss in mount a memory address by the
 

00:11:14.980 --> 00:11:17.010 align:start position:0%
toss in mount a memory address by the
parameter<00:11:15.550><c> or</c><00:11:15.640><c> something</c><00:11:15.880><c> like</c><00:11:15.970><c> that</c><00:11:16.150><c> if</c><00:11:16.840><c> you</c>

00:11:17.010 --> 00:11:17.020 align:start position:0%
parameter or something like that if you
 

00:11:17.020 --> 00:11:18.480 align:start position:0%
parameter or something like that if you
want<00:11:17.230><c> to</c><00:11:17.350><c> actually</c><00:11:17.500><c> return</c><00:11:17.890><c> an</c><00:11:18.040><c> array</c><00:11:18.280><c> that's</c>

00:11:18.480 --> 00:11:18.490 align:start position:0%
want to actually return an array that's
 

00:11:18.490 --> 00:11:19.950 align:start position:0%
want to actually return an array that's
brand-new<00:11:19.000><c> already</c><00:11:19.150><c> it</c><00:11:19.360><c> was</c><00:11:19.450><c> created</c><00:11:19.750><c> inside</c>

00:11:19.950 --> 00:11:19.960 align:start position:0%
brand-new already it was created inside
 

00:11:19.960 --> 00:11:22.140 align:start position:0%
brand-new already it was created inside
the<00:11:20.020><c> function</c><00:11:20.350><c> you</c><00:11:21.190><c> need</c><00:11:21.430><c> to</c><00:11:21.640><c> use</c><00:11:21.850><c> the</c><00:11:22.030><c> new</c>

00:11:22.140 --> 00:11:22.150 align:start position:0%
the function you need to use the new
 

00:11:22.150 --> 00:11:23.580 align:start position:0%
the function you need to use the new
keyword<00:11:22.360><c> another</c><00:11:22.930><c> thing</c><00:11:23.110><c> to</c><00:11:23.200><c> think</c><00:11:23.380><c> about</c>

00:11:23.580 --> 00:11:23.590 align:start position:0%
keyword another thing to think about
 

00:11:23.590 --> 00:11:25.770 align:start position:0%
keyword another thing to think about
though<00:11:23.740><c> is</c><00:11:24.070><c> memory</c><00:11:24.700><c> indirection</c><00:11:25.270><c> basically</c>

00:11:25.770 --> 00:11:25.780 align:start position:0%
though is memory indirection basically
 

00:11:25.780 --> 00:11:26.910 align:start position:0%
though is memory indirection basically
what<00:11:25.870><c> I</c><00:11:25.900><c> mean</c><00:11:26.050><c> by</c><00:11:26.140><c> that</c><00:11:26.170><c> is</c><00:11:26.470><c> since</c><00:11:26.770><c> we're</c>

00:11:26.910 --> 00:11:26.920 align:start position:0%
what I mean by that is since we're
 

00:11:26.920 --> 00:11:28.950 align:start position:0%
what I mean by that is since we're
actually<00:11:27.010><c> holding</c><00:11:27.400><c> a</c><00:11:27.490><c> pointer</c><00:11:27.940><c> that</c><00:11:28.180><c> point</c><00:11:28.780><c> is</c>

00:11:28.950 --> 00:11:28.960 align:start position:0%
actually holding a pointer that point is
 

00:11:28.960 --> 00:11:30.420 align:start position:0%
actually holding a pointer that point is
going<00:11:29.140><c> to</c><00:11:29.260><c> point</c><00:11:29.530><c> to</c><00:11:29.770><c> another</c><00:11:30.100><c> block</c><00:11:30.370><c> of</c>

00:11:30.420 --> 00:11:30.430 align:start position:0%
going to point to another block of
 

00:11:30.430 --> 00:11:32.520 align:start position:0%
going to point to another block of
memory<00:11:30.700><c> which</c><00:11:31.060><c> holds</c><00:11:31.690><c> our</c><00:11:31.900><c> actual</c><00:11:32.230><c> array</c>

00:11:32.520 --> 00:11:32.530 align:start position:0%
memory which holds our actual array
 

00:11:32.530 --> 00:11:34.350 align:start position:0%
memory which holds our actual array
which<00:11:33.100><c> results</c><00:11:33.490><c> in</c><00:11:33.640><c> kind</c><00:11:34.060><c> of</c><00:11:34.120><c> memory</c>

00:11:34.350 --> 00:11:34.360 align:start position:0%
which results in kind of memory
 

00:11:34.360 --> 00:11:37.080 align:start position:0%
which results in kind of memory
fragmentation<00:11:34.900><c> and</c><00:11:35.380><c> cache</c><00:11:36.190><c> misses</c><00:11:36.550><c> and</c><00:11:37.000><c> all</c>

00:11:37.080 --> 00:11:37.090 align:start position:0%
fragmentation and cache misses and all
 

00:11:37.090 --> 00:11:38.790 align:start position:0%
fragmentation and cache misses and all
this<00:11:37.330><c> complex</c><00:11:38.170><c> stuff</c><00:11:38.440><c> till</c><00:11:38.650><c> they're</c>

00:11:38.790 --> 00:11:38.800 align:start position:0%
this complex stuff till they're
 

00:11:38.800 --> 00:11:40.050 align:start position:0%
this complex stuff till they're
definitely<00:11:38.950><c> gonna</c><00:11:39.190><c> talk</c><00:11:39.370><c> about</c><00:11:39.460><c> in</c><00:11:39.790><c> future</c>

00:11:40.050 --> 00:11:40.060 align:start position:0%
definitely gonna talk about in future
 

00:11:40.060 --> 00:11:41.490 align:start position:0%
definitely gonna talk about in future
video<00:11:40.450><c> however</c><00:11:40.870><c> I'll</c><00:11:40.990><c> show</c><00:11:41.140><c> you</c><00:11:41.230><c> a</c><00:11:41.290><c> quick</c>

00:11:41.490 --> 00:11:41.500 align:start position:0%
video however I'll show you a quick
 

00:11:41.500 --> 00:11:42.960 align:start position:0%
video however I'll show you a quick
example<00:11:41.530><c> so</c><00:11:42.070><c> that</c><00:11:42.160><c> you</c><00:11:42.220><c> know</c><00:11:42.340><c> what</c><00:11:42.490><c> I</c><00:11:42.550><c> mean</c><00:11:42.730><c> if</c>

00:11:42.960 --> 00:11:42.970 align:start position:0%
example so that you know what I mean if
 

00:11:42.970 --> 00:11:44.910 align:start position:0%
example so that you know what I mean if
I<00:11:43.150><c> create</c><00:11:43.390><c> a</c><00:11:43.450><c> class</c><00:11:43.660><c> over</c><00:11:43.870><c> here</c><00:11:43.990><c> called</c><00:11:44.530><c> entity</c>

00:11:44.910 --> 00:11:44.920 align:start position:0%
I create a class over here called entity
 

00:11:44.920 --> 00:11:47.670 align:start position:0%
I create a class over here called entity
and<00:11:45.280><c> I</c><00:11:45.310><c> move</c><00:11:45.580><c> my</c><00:11:45.730><c> example</c><00:11:46.240><c> array</c><00:11:46.510><c> over</c><00:11:47.230><c> here</c>

00:11:47.670 --> 00:11:47.680 align:start position:0%
and I move my example array over here
 

00:11:47.680 --> 00:11:50.070 align:start position:0%
and I move my example array over here
I'll<00:11:48.160><c> also</c><00:11:48.370><c> create</c><00:11:48.640><c> a</c><00:11:48.790><c> constructor</c><00:11:49.080><c> which</c>

00:11:50.070 --> 00:11:50.080 align:start position:0%
I'll also create a constructor which
 

00:11:50.080 --> 00:11:52.170 align:start position:0%
I'll also create a constructor which
basically<00:11:50.530><c> just</c><00:11:50.680><c> is</c><00:11:51.070><c> my</c><00:11:51.430><c> for</c><00:11:51.670><c> loop</c><00:11:51.700><c> that</c>

00:11:52.170 --> 00:11:52.180 align:start position:0%
basically just is my for loop that
 

00:11:52.180 --> 00:11:54.210 align:start position:0%
basically just is my for loop that
initializes<00:11:52.660><c> all</c><00:11:52.990><c> this</c><00:11:53.170><c> to</c><00:11:53.350><c> two</c><00:11:53.560><c> and</c><00:11:54.130><c> I'll</c>

00:11:54.210 --> 00:11:54.220 align:start position:0%
initializes all this to two and I'll
 

00:11:54.220 --> 00:11:55.740 align:start position:0%
initializes all this to two and I'll
make<00:11:54.400><c> everything</c><00:11:54.700><c> here</c><00:11:54.940><c> in</c><00:11:55.000><c> public</c><00:11:55.150><c> if</c><00:11:55.570><c> I</c>

00:11:55.740 --> 00:11:55.750 align:start position:0%
make everything here in public if I
 

00:11:55.750 --> 00:11:58.140 align:start position:0%
make everything here in public if I
create<00:11:56.140><c> my</c><00:11:56.410><c> entity</c><00:11:56.710><c> objects</c><00:11:57.310><c> like</c><00:11:57.460><c> this</c><00:11:57.670><c> I'll</c>

00:11:58.140 --> 00:11:58.150 align:start position:0%
create my entity objects like this I'll
 

00:11:58.150 --> 00:11:59.790 align:start position:0%
create my entity objects like this I'll
get<00:11:58.330><c> rid</c><00:11:58.420><c> of</c><00:11:58.540><c> all</c><00:11:58.690><c> this</c><00:11:58.780><c> other</c><00:11:58.990><c> code</c><00:11:59.140><c> and</c><00:11:59.440><c> hit</c>

00:11:59.790 --> 00:11:59.800 align:start position:0%
get rid of all this other code and hit
 

00:11:59.800 --> 00:12:03.240 align:start position:0%
get rid of all this other code and hit
f5<00:12:00.100><c> if</c><00:12:00.610><c> I</c><00:12:00.790><c> go</c><00:12:01.000><c> to</c><00:12:01.240><c> the</c><00:12:01.360><c> memory</c><00:12:01.810><c> address</c><00:12:02.110><c> of</c><00:12:02.250><c> my</c>

00:12:03.240 --> 00:12:03.250 align:start position:0%
f5 if I go to the memory address of my
 

00:12:03.250 --> 00:12:05.340 align:start position:0%
f5 if I go to the memory address of my
entity<00:12:03.580><c> and</c><00:12:03.970><c> hit</c><00:12:04.180><c> enter</c><00:12:04.480><c> you</c><00:12:04.990><c> can</c><00:12:05.020><c> see</c><00:12:05.200><c> that</c>

00:12:05.340 --> 00:12:05.350 align:start position:0%
entity and hit enter you can see that
 

00:12:05.350 --> 00:12:07.680 align:start position:0%
entity and hit enter you can see that
I've<00:12:06.220><c> got</c><00:12:06.280><c> all</c><00:12:06.730><c> my</c><00:12:06.760><c> memory</c><00:12:07.120><c> right</c><00:12:07.300><c> there</c><00:12:07.510><c> the</c>

00:12:07.680 --> 00:12:07.690 align:start position:0%
I've got all my memory right there the
 

00:12:07.690 --> 00:12:09.780 align:start position:0%
I've got all my memory right there the
memory<00:12:08.050><c> address</c><00:12:08.290><c> of</c><00:12:08.320><c> entity</c><00:12:08.920><c> actually</c><00:12:09.550><c> just</c>

00:12:09.780 --> 00:12:09.790 align:start position:0%
memory address of entity actually just
 

00:12:09.790 --> 00:12:12.900 align:start position:0%
memory address of entity actually just
in<00:12:10.270><c> line</c><00:12:10.540><c> contains</c><00:12:11.080><c> all</c><00:12:11.560><c> of</c><00:12:11.770><c> my</c><00:12:11.920><c> twos</c><00:12:12.250><c> all</c><00:12:12.760><c> of</c>

00:12:12.900 --> 00:12:12.910 align:start position:0%
in line contains all of my twos all of
 

00:12:12.910 --> 00:12:14.970 align:start position:0%
in line contains all of my twos all of
my<00:12:13.030><c> daughters</c><00:12:13.390><c> however</c><00:12:13.690><c> if</c><00:12:14.170><c> I</c><00:12:14.350><c> go</c><00:12:14.380><c> back</c><00:12:14.680><c> here</c>

00:12:14.970 --> 00:12:14.980 align:start position:0%
my daughters however if I go back here
 

00:12:14.980 --> 00:12:16.590 align:start position:0%
my daughters however if I go back here
and<00:12:15.280><c> I</c><00:12:15.430><c> push</c><00:12:15.640><c> this</c><00:12:15.790><c> over</c><00:12:16.000><c> here</c><00:12:16.120><c> to</c><00:12:16.210><c> be</c><00:12:16.300><c> credit</c>

00:12:16.590 --> 00:12:16.600 align:start position:0%
and I push this over here to be credit
 

00:12:16.600 --> 00:12:18.360 align:start position:0%
and I push this over here to be credit
on<00:12:16.690><c> the</c><00:12:16.780><c> heat</c><00:12:16.990><c> by</c><00:12:17.260><c> using</c><00:12:17.440><c> a</c><00:12:17.560><c> new</c><00:12:17.740><c> keyword</c><00:12:17.950><c> I'll</c>

00:12:18.360 --> 00:12:18.370 align:start position:0%
on the heat by using a new keyword I'll
 

00:12:18.370 --> 00:12:20.130 align:start position:0%
on the heat by using a new keyword I'll
run<00:12:18.610><c> that</c><00:12:18.730><c> exact</c><00:12:19.060><c> same</c><00:12:19.240><c> code</c><00:12:19.510><c> you</c><00:12:19.900><c> can</c><00:12:20.050><c> see</c>

00:12:20.130 --> 00:12:20.140 align:start position:0%
run that exact same code you can see
 

00:12:20.140 --> 00:12:22.170 align:start position:0%
run that exact same code you can see
that<00:12:20.290><c> if</c><00:12:20.380><c> I</c><00:12:20.470><c> go</c><00:12:20.620><c> to</c><00:12:20.680><c> the</c><00:12:20.920><c> memory</c><00:12:21.160><c> address</c><00:12:21.580><c> of</c><00:12:21.610><c> my</c>

00:12:22.170 --> 00:12:22.180 align:start position:0%
that if I go to the memory address of my
 

00:12:22.180 --> 00:12:24.840 align:start position:0%
that if I go to the memory address of my
entity<00:12:22.510><c> I</c><00:12:22.900><c> don't</c><00:12:23.470><c> see</c><00:12:23.680><c> my</c><00:12:23.860><c> twos</c><00:12:24.100><c> there</c><00:12:24.340><c> at</c><00:12:24.610><c> all</c>

00:12:24.840 --> 00:12:24.850 align:start position:0%
entity I don't see my twos there at all
 

00:12:24.850 --> 00:12:27.000 align:start position:0%
entity I don't see my twos there at all
I<00:12:25.000><c> see</c><00:12:25.360><c> this</c><00:12:25.630><c> other</c><00:12:25.870><c> memory</c><00:12:26.410><c> address</c><00:12:26.680><c> which</c><00:12:26.710><c> of</c>

00:12:27.000 --> 00:12:27.010 align:start position:0%
I see this other memory address which of
 

00:12:27.010 --> 00:12:28.950 align:start position:0%
I see this other memory address which of
course<00:12:27.040><c> is</c><00:12:27.430><c> this</c><00:12:27.580><c> pointer</c><00:12:28.060><c> now</c><00:12:28.540><c> I</c><00:12:28.570><c> can</c><00:12:28.780><c> copy</c>

00:12:28.950 --> 00:12:28.960 align:start position:0%
course is this pointer now I can copy
 

00:12:28.960 --> 00:12:30.060 align:start position:0%
course is this pointer now I can copy
this<00:12:29.170><c> and</c><00:12:29.320><c> put</c><00:12:29.440><c> it</c><00:12:29.590><c> here</c><00:12:29.620><c> I'll</c><00:12:29.920><c> have</c><00:12:30.040><c> to</c>

00:12:30.060 --> 00:12:30.070 align:start position:0%
this and put it here I'll have to
 

00:12:30.070 --> 00:12:31.620 align:start position:0%
this and put it here I'll have to
reverse<00:12:30.400><c> it</c><00:12:30.550><c> because</c><00:12:30.640><c> at</c><00:12:30.880><c> the</c><00:12:30.970><c> end</c><00:12:31.000><c> Ian</c><00:12:31.420><c> nest</c>

00:12:31.620 --> 00:12:31.630 align:start position:0%
reverse it because at the end Ian nest
 

00:12:31.630 --> 00:12:33.810 align:start position:0%
reverse it because at the end Ian nest
though<00:12:31.840><c> this</c><00:12:32.410><c> will</c><00:12:32.560><c> actually</c><00:12:32.830><c> be</c><00:12:33.010><c> 0</c>

00:12:33.810 --> 00:12:33.820 align:start position:0%
though this will actually be 0
 

00:12:33.820 --> 00:12:39.720 align:start position:0%
though this will actually be 0
0-7<00:12:34.770><c> d5e</c><00:12:36.240><c> and</c><00:12:37.240><c> hit</c><00:12:37.420><c> enter</c><00:12:37.780><c> I</c><00:12:37.990><c> get</c><00:12:38.500><c> taken</c><00:12:38.710><c> to</c><00:12:39.220><c> my</c>

00:12:39.720 --> 00:12:39.730 align:start position:0%
0-7 d5e and hit enter I get taken to my
 

00:12:39.730 --> 00:12:42.000 align:start position:0%
0-7 d5e and hit enter I get taken to my
actual<00:12:40.030><c> data</c><00:12:40.300><c> so</c><00:12:41.020><c> there's</c><00:12:41.380><c> an</c><00:12:41.560><c> indirection</c>

00:12:42.000 --> 00:12:42.010 align:start position:0%
actual data so there's an indirection
 

00:12:42.010 --> 00:12:44.100 align:start position:0%
actual data so there's an indirection
again<00:12:42.310><c> what</c><00:12:42.820><c> we've</c><00:12:42.970><c> actually</c><00:12:43.180><c> got</c><00:12:43.540><c> the</c><00:12:43.750><c> memory</c>

00:12:44.100 --> 00:12:44.110 align:start position:0%
again what we've actually got the memory
 

00:12:44.110 --> 00:12:45.630 align:start position:0%
again what we've actually got the memory
address<00:12:44.320><c> of</c><00:12:44.350><c> a</c><00:12:44.620><c> week</c><00:12:44.860><c> and</c><00:12:45.160><c> another</c><00:12:45.370><c> memory</c>

00:12:45.630 --> 00:12:45.640 align:start position:0%
address of a week and another memory
 

00:12:45.640 --> 00:12:47.340 align:start position:0%
address of a week and another memory
address<00:12:45.850><c> to</c><00:12:46.030><c> where</c><00:12:46.360><c> our</c><00:12:46.420><c> actual</c><00:12:46.930><c> array</c><00:12:47.170><c> is</c>

00:12:47.340 --> 00:12:47.350 align:start position:0%
address to where our actual array is
 

00:12:47.350 --> 00:12:49.380 align:start position:0%
address to where our actual array is
which<00:12:47.860><c> means</c><00:12:48.070><c> that</c><00:12:48.280><c> when</c><00:12:48.490><c> we</c><00:12:48.520><c> want</c><00:12:48.820><c> to</c><00:12:48.940><c> access</c>

00:12:49.380 --> 00:12:49.390 align:start position:0%
which means that when we want to access
 

00:12:49.390 --> 00:12:51.060 align:start position:0%
which means that when we want to access
this<00:12:49.600><c> web</c><00:12:49.900><c> basically</c><00:12:50.320><c> jumping</c><00:12:50.740><c> all</c><00:12:51.010><c> around</c>

00:12:51.060 --> 00:12:51.070 align:start position:0%
this web basically jumping all around
 

00:12:51.070 --> 00:12:53.400 align:start position:0%
this web basically jumping all around
our<00:12:51.520><c> code</c><00:12:51.700><c> first</c><00:12:52.000><c> to</c><00:12:52.120><c> get</c><00:12:52.210><c> to</c><00:12:52.270><c> the</c><00:12:52.360><c> entity</c><00:12:52.750><c> then</c>

00:12:53.400 --> 00:12:53.410 align:start position:0%
our code first to get to the entity then
 

00:12:53.410 --> 00:12:55.890 align:start position:0%
our code first to get to the entity then
to<00:12:53.590><c> get</c><00:12:53.770><c> to</c><00:12:53.950><c> the</c><00:12:54.070><c> array</c><00:12:54.340><c> all</c><00:12:55.090><c> that</c><00:12:55.390><c> stuff</c><00:12:55.630><c> so</c><00:12:55.780><c> of</c>

00:12:55.890 --> 00:12:55.900 align:start position:0%
to get to the array all that stuff so of
 

00:12:55.900 --> 00:12:57.150 align:start position:0%
to get to the array all that stuff so of
course<00:12:56.020><c> whenever</c><00:12:56.350><c> possible</c><00:12:56.560><c> you</c><00:12:56.950><c> want</c><00:12:57.100><c> to</c>

00:12:57.150 --> 00:12:57.160 align:start position:0%
course whenever possible you want to
 

00:12:57.160 --> 00:12:58.770 align:start position:0%
course whenever possible you want to
create<00:12:57.250><c> your</c><00:12:57.430><c> array</c><00:12:57.640><c> on</c><00:12:57.850><c> the</c><00:12:57.880><c> stack</c><00:12:58.000><c> to</c><00:12:58.540><c> avoid</c>

00:12:58.770 --> 00:12:58.780 align:start position:0%
create your array on the stack to avoid
 

00:12:58.780 --> 00:13:00.840 align:start position:0%
create your array on the stack to avoid
that<00:12:58.960><c> because</c><00:12:59.350><c> jumping</c><00:13:00.190><c> around</c><00:13:00.280><c> memory</c><00:13:00.700><c> like</c>

00:13:00.840 --> 00:13:00.850 align:start position:0%
that because jumping around memory like
 

00:13:00.850 --> 00:13:02.850 align:start position:0%
that because jumping around memory like
that<00:13:00.880><c> is</c><00:13:01.270><c> definitely</c><00:13:02.080><c> a</c><00:13:02.110><c> performance</c><00:13:02.380><c> hit</c><00:13:02.650><c> now</c>

00:13:02.850 --> 00:13:02.860 align:start position:0%
that is definitely a performance hit now
 

00:13:02.860 --> 00:13:04.230 align:start position:0%
that is definitely a performance hit now
there's<00:13:03.130><c> one</c><00:13:03.370><c> more</c><00:13:03.400><c> thing</c><00:13:03.760><c> I</c><00:13:03.880><c> want</c><00:13:04.090><c> to</c><00:13:04.150><c> mention</c>

00:13:04.230 --> 00:13:04.240 align:start position:0%
there's one more thing I want to mention
 

00:13:04.240 --> 00:13:06.120 align:start position:0%
there's one more thing I want to mention
I<00:13:04.540><c> know</c><00:13:04.600><c> this</c><00:13:04.780><c> is</c><00:13:04.900><c> a</c><00:13:04.930><c> huge</c><00:13:05.290><c> video</c><00:13:05.650><c> if</c><00:13:05.950><c> you</c><00:13:06.040><c> guys</c>

00:13:06.120 --> 00:13:06.130 align:start position:0%
I know this is a huge video if you guys
 

00:13:06.130 --> 00:13:08.010 align:start position:0%
I know this is a huge video if you guys
like<00:13:06.400><c> these</c><00:13:06.550><c> kind</c><00:13:06.850><c> of</c><00:13:06.940><c> massive</c><00:13:07.450><c> video</c><00:13:07.660><c> then</c>

00:13:08.010 --> 00:13:08.020 align:start position:0%
like these kind of massive video then
 

00:13:08.020 --> 00:13:10.170 align:start position:0%
like these kind of massive video then
you<00:13:08.080><c> have</c><00:13:08.170><c> time</c><00:13:08.440><c> to</c><00:13:08.620><c> watch</c><00:13:08.800><c> them</c><00:13:09.010><c> but</c><00:13:09.370><c> I</c><00:13:09.670><c> want</c>

00:13:10.170 --> 00:13:10.180 align:start position:0%
you have time to watch them but I want
 

00:13:10.180 --> 00:13:12.120 align:start position:0%
you have time to watch them but I want
to<00:13:10.240><c> mention</c><00:13:10.360><c> arrays</c><00:13:10.840><c> instead</c><00:13:11.350><c> of</c><00:13:11.560><c> both</c><00:13:11.710><c> 11</c>

00:13:12.120 --> 00:13:12.130 align:start position:0%
to mention arrays instead of both 11
 

00:13:12.130 --> 00:13:13.620 align:start position:0%
to mention arrays instead of both 11
instead<00:13:12.400><c> of</c><00:13:12.670><c> 11</c><00:13:13.030><c> we've</c><00:13:13.150><c> got</c><00:13:13.270><c> something</c><00:13:13.480><c> called</c>

00:13:13.620 --> 00:13:13.630 align:start position:0%
instead of 11 we've got something called
 

00:13:13.630 --> 00:13:15.000 align:start position:0%
instead of 11 we've got something called
standard<00:13:13.870><c> array</c><00:13:14.320><c> which</c><00:13:14.560><c> is</c><00:13:14.650><c> an</c><00:13:14.770><c> actual</c>

00:13:15.000 --> 00:13:15.010 align:start position:0%
standard array which is an actual
 

00:13:15.010 --> 00:13:17.840 align:start position:0%
standard array which is an actual
inbuilt<00:13:15.760><c> data</c><00:13:16.270><c> structure</c><00:13:16.780><c> is</c><00:13:16.870><c> built</c><00:13:17.200><c> into</c><00:13:17.440><c> the</c>

00:13:17.840 --> 00:13:17.850 align:start position:0%
inbuilt data structure is built into the
 

00:13:17.850 --> 00:13:20.430 align:start position:0%
inbuilt data structure is built into the
11<00:13:18.850><c> library</c><00:13:19.330><c> a</c><00:13:19.540><c> lot</c><00:13:19.780><c> of</c><00:13:19.840><c> people</c><00:13:20.080><c> really</c><00:13:20.260><c> like</c>

00:13:20.430 --> 00:13:20.440 align:start position:0%
11 library a lot of people really like
 

00:13:20.440 --> 00:13:22.260 align:start position:0%
11 library a lot of people really like
using<00:13:20.680><c> it</c><00:13:20.920><c> over</c><00:13:21.100><c> the</c><00:13:21.370><c> raw</c><00:13:21.640><c> array</c><00:13:22.000><c> that</c><00:13:22.180><c> I've</c>

00:13:22.260 --> 00:13:22.270 align:start position:0%
using it over the raw array that I've
 

00:13:22.270 --> 00:13:23.670 align:start position:0%
using it over the raw array that I've
shown<00:13:22.540><c> you</c><00:13:22.570><c> here</c><00:13:22.930><c> because</c><00:13:23.170><c> it</c><00:13:23.380><c> offers</c><00:13:23.590><c> a</c>

00:13:23.670 --> 00:13:23.680 align:start position:0%
shown you here because it offers a
 

00:13:23.680 --> 00:13:25.950 align:start position:0%
shown you here because it offers a
number<00:13:23.800><c> of</c><00:13:23.980><c> advantages</c><00:13:24.480><c> namely</c><00:13:25.480><c> being</c><00:13:25.690><c> that</c>

00:13:25.950 --> 00:13:25.960 align:start position:0%
number of advantages namely being that
 

00:13:25.960 --> 00:13:27.990 align:start position:0%
number of advantages namely being that
it<00:13:26.140><c> includes</c><00:13:26.650><c> bounds</c><00:13:26.980><c> checking</c><00:13:27.160><c> and</c><00:13:27.520><c> it</c>

00:13:27.990 --> 00:13:28.000 align:start position:0%
it includes bounds checking and it
 

00:13:28.000 --> 00:13:29.280 align:start position:0%
it includes bounds checking and it
actually<00:13:28.120><c> keeps</c><00:13:28.360><c> track</c><00:13:28.480><c> of</c><00:13:28.630><c> the</c><00:13:28.750><c> size</c><00:13:29.020><c> of</c><00:13:29.170><c> our</c>

00:13:29.280 --> 00:13:29.290 align:start position:0%
actually keeps track of the size of our
 

00:13:29.290 --> 00:13:30.390 align:start position:0%
actually keeps track of the size of our
array<00:13:29.500><c> one</c><00:13:29.740><c> more</c><00:13:29.860><c> thing</c><00:13:29.980><c> that</c><00:13:30.100><c> I</c><00:13:30.160><c> didn't</c>

00:13:30.390 --> 00:13:30.400 align:start position:0%
array one more thing that I didn't
 

00:13:30.400 --> 00:13:31.980 align:start position:0%
array one more thing that I didn't
mention<00:13:30.460><c> is</c><00:13:30.880><c> that</c><00:13:31.330><c> there's</c><00:13:31.480><c> actually</c><00:13:31.720><c> no</c><00:13:31.870><c> way</c>

00:13:31.980 --> 00:13:31.990 align:start position:0%
mention is that there's actually no way
 

00:13:31.990 --> 00:13:34.350 align:start position:0%
mention is that there's actually no way
to<00:13:32.050><c> work</c><00:13:32.170><c> out</c><00:13:32.350><c> the</c><00:13:32.530><c> size</c><00:13:32.800><c> of</c><00:13:33.160><c> our</c><00:13:33.430><c> array</c><00:13:33.730><c> if</c><00:13:34.150><c> we</c>

00:13:34.350 --> 00:13:34.360 align:start position:0%
to work out the size of our array if we
 

00:13:34.360 --> 00:13:36.270 align:start position:0%
to work out the size of our array if we
allocate<00:13:34.840><c> an</c><00:13:34.960><c> array</c><00:13:35.050><c> on</c><00:13:35.260><c> the</c><00:13:35.500><c> heap</c><00:13:35.620><c> like</c><00:13:36.010><c> this</c>

00:13:36.270 --> 00:13:36.280 align:start position:0%
allocate an array on the heap like this
 

00:13:36.280 --> 00:13:39.000 align:start position:0%
allocate an array on the heap like this
we've<00:13:37.120><c> set</c><00:13:37.390><c> fire</c><00:13:37.600><c> to</c><00:13:37.630><c> be</c><00:13:37.870><c> 5</c><00:13:38.110><c> and</c><00:13:38.440><c> in</c><00:13:38.590><c> many</c><00:13:38.800><c> other</c>

00:13:39.000 --> 00:13:39.010 align:start position:0%
we've set fire to be 5 and in many other
 

00:13:39.010 --> 00:13:40.980 align:start position:0%
we've set fire to be 5 and in many other
languages<00:13:39.370><c> we</c><00:13:39.790><c> can</c><00:13:39.970><c> actually</c><00:13:40.390><c> write</c>

00:13:40.980 --> 00:13:40.990 align:start position:0%
languages we can actually write
 

00:13:40.990 --> 00:13:44.310 align:start position:0%
languages we can actually write
something<00:13:41.290><c> like</c><00:13:41.730><c> example</c><00:13:42.730><c> dot</c><00:13:43.150><c> size</c><00:13:43.600><c> you</c>

00:13:44.310 --> 00:13:44.320 align:start position:0%
something like example dot size you
 

00:13:44.320 --> 00:13:46.020 align:start position:0%
something like example dot size you
can't<00:13:44.620><c> do</c><00:13:44.770><c> that</c><00:13:44.950><c> in</c><00:13:45.100><c> people</c><00:13:45.370><c> but</c><00:13:45.550><c> there's</c><00:13:45.760><c> no</c>

00:13:46.020 --> 00:13:46.030 align:start position:0%
can't do that in people but there's no
 

00:13:46.030 --> 00:13:47.880 align:start position:0%
can't do that in people but there's no
way<00:13:46.270><c> for</c><00:13:46.570><c> you</c><00:13:46.780><c> to</c><00:13:46.840><c> actually</c><00:13:47.110><c> know</c><00:13:47.260><c> the</c><00:13:47.320><c> size</c><00:13:47.590><c> of</c>

00:13:47.880 --> 00:13:47.890 align:start position:0%
way for you to actually know the size of
 

00:13:47.890 --> 00:13:51.750 align:start position:0%
way for you to actually know the size of
an<00:13:48.280><c> array</c><00:13:48.490><c> now</c><00:13:48.940><c> I</c><00:13:49.300><c> say</c><00:13:50.110><c> no</c><00:13:50.290><c> way</c><00:13:50.760><c> obviously</c>

00:13:51.750 --> 00:13:51.760 align:start position:0%
an array now I say no way obviously
 

00:13:51.760 --> 00:13:54.690 align:start position:0%
an array now I say no way obviously
there<00:13:52.060><c> is</c><00:13:52.210><c> some</c><00:13:52.960><c> way</c><00:13:53.560><c> because</c><00:13:54.310><c> when</c><00:13:54.580><c> you</c>

00:13:54.690 --> 00:13:54.700 align:start position:0%
there is some way because when you
 

00:13:54.700 --> 00:13:58.650 align:start position:0%
there is some way because when you
delete<00:13:55.060><c> this</c><00:13:55.540><c> array</c><00:13:56.700><c> the</c><00:13:57.700><c> compiler</c><00:13:58.180><c> needs</c><00:13:58.510><c> to</c>

00:13:58.650 --> 00:13:58.660 align:start position:0%
delete this array the compiler needs to
 

00:13:58.660 --> 00:14:01.560 align:start position:0%
delete this array the compiler needs to
know<00:13:58.810><c> how</c><00:13:59.590><c> much</c><00:13:59.800><c> memory</c><00:14:00.040><c> to</c><00:14:00.340><c> actually</c><00:14:00.730><c> free</c><00:14:01.240><c> so</c>

00:14:01.560 --> 00:14:01.570 align:start position:0%
know how much memory to actually free so
 

00:14:01.570 --> 00:14:03.150 align:start position:0%
know how much memory to actually free so
yes<00:14:01.780><c> there</c><00:14:02.050><c> is</c><00:14:02.170><c> a</c><00:14:02.200><c> way</c><00:14:02.290><c> to</c><00:14:02.440><c> know</c><00:14:02.650><c> about</c><00:14:02.770><c> its</c>

00:14:03.150 --> 00:14:03.160 align:start position:0%
yes there is a way to know about its
 

00:14:03.160 --> 00:14:05.130 align:start position:0%
yes there is a way to know about its
compiler<00:14:03.550><c> dependent</c><00:14:04.120><c> it's</c><00:14:04.360><c> possibly</c>

00:14:05.130 --> 00:14:05.140 align:start position:0%
compiler dependent it's possibly
 

00:14:05.140 --> 00:14:07.140 align:start position:0%
compiler dependent it's possibly
sometimes<00:14:05.980><c> stored</c><00:14:06.280><c> at</c><00:14:06.490><c> a</c><00:14:06.520><c> negative</c><00:14:06.970><c> index</c>

00:14:07.140 --> 00:14:07.150 align:start position:0%
sometimes stored at a negative index
 

00:14:07.150 --> 00:14:09.330 align:start position:0%
sometimes stored at a negative index
inside<00:14:07.570><c> the</c><00:14:07.750><c> erase</c><00:14:08.020><c> like</c><00:14:08.410><c> index</c><00:14:08.890><c> negative</c><00:14:09.220><c> one</c>

00:14:09.330 --> 00:14:09.340 align:start position:0%
inside the erase like index negative one
 

00:14:09.340 --> 00:14:11.850 align:start position:0%
inside the erase like index negative one
it<00:14:09.550><c> depends</c><00:14:10.270><c> on</c><00:14:10.540><c> a</c><00:14:10.630><c> lot</c><00:14:11.050><c> of</c><00:14:11.080><c> things</c><00:14:11.350><c> and</c><00:14:11.590><c> it's</c>

00:14:11.850 --> 00:14:11.860 align:start position:0%
it depends on a lot of things and it's
 

00:14:11.860 --> 00:14:14.730 align:start position:0%
it depends on a lot of things and it's
very<00:14:12.160><c> very</c><00:14:12.960><c> contrasted</c><00:14:13.960><c> basically</c><00:14:14.410><c> so</c><00:14:14.620><c> you</c>

00:14:14.730 --> 00:14:14.740 align:start position:0%
very very contrasted basically so you
 

00:14:14.740 --> 00:14:17.040 align:start position:0%
very very contrasted basically so you
should<00:14:14.920><c> never</c><00:14:15.100><c> be</c><00:14:15.460><c> accessing</c><00:14:16.390><c> decide</c><00:14:16.870><c> an</c>

00:14:17.040 --> 00:14:17.050 align:start position:0%
should never be accessing decide an
 

00:14:17.050 --> 00:14:19.200 align:start position:0%
should never be accessing decide an
array<00:14:17.320><c> in</c><00:14:17.860><c> the</c><00:14:18.070><c> array</c><00:14:18.280><c> memory</c><00:14:18.640><c> itself</c><00:14:18.940><c> that's</c>

00:14:19.200 --> 00:14:19.210 align:start position:0%
array in the array memory itself that's
 

00:14:19.210 --> 00:14:21.180 align:start position:0%
array in the array memory itself that's
dangerous<00:14:19.960><c> if</c><00:14:20.140><c> you</c><00:14:20.320><c> allocate</c><00:14:20.590><c> an</c><00:14:20.770><c> array</c><00:14:20.830><c> on</c>

00:14:21.180 --> 00:14:21.190 align:start position:0%
dangerous if you allocate an array on
 

00:14:21.190 --> 00:14:23.280 align:start position:0%
dangerous if you allocate an array on
the<00:14:21.220><c> stack</c><00:14:21.340><c> so</c><00:14:21.940><c> if</c><00:14:22.090><c> I</c><00:14:22.240><c> write</c><00:14:22.480><c> in</c><00:14:22.720><c> a</c><00:14:22.990><c> and</c><00:14:23.200><c> in</c>

00:14:23.280 --> 00:14:23.290 align:start position:0%
the stack so if I write in a and in
 

00:14:23.290 --> 00:14:24.990 align:start position:0%
the stack so if I write in a and in
science<00:14:23.800><c> you</c><00:14:23.830><c> can</c><00:14:24.100><c> find</c><00:14:24.370><c> out</c><00:14:24.490><c> what</c><00:14:24.670><c> it</c><00:14:24.760><c> so</c><00:14:24.880><c> it's</c>

00:14:24.990 --> 00:14:25.000 align:start position:0%
science you can find out what it so it's
 

00:14:25.000 --> 00:14:26.460 align:start position:0%
science you can find out what it so it's
actually<00:14:25.120><c> insecured</c><00:14:25.810><c> of</c><00:14:25.960><c> course</c><00:14:26.140><c> it's</c>

00:14:26.460 --> 00:14:26.470 align:start position:0%
actually insecured of course it's
 

00:14:26.470 --> 00:14:27.660 align:start position:0%
actually insecured of course it's
allocated<00:14:26.920><c> on</c><00:14:26.980><c> the</c><00:14:27.010><c> stack</c><00:14:27.070><c> which</c><00:14:27.460><c> means</c>

00:14:27.660 --> 00:14:27.670 align:start position:0%
allocated on the stack which means
 

00:14:27.670 --> 00:14:29.160 align:start position:0%
allocated on the stack which means
because<00:14:27.850><c> the</c><00:14:28.150><c> stack</c><00:14:28.360><c> pointer</c><00:14:28.390><c> contains</c><00:14:29.050><c> the</c>

00:14:29.160 --> 00:14:29.170 align:start position:0%
because the stack pointer contains the
 

00:14:29.170 --> 00:14:30.780 align:start position:0%
because the stack pointer contains the
offset<00:14:29.470><c> basically</c><00:14:29.890><c> so</c><00:14:30.460><c> if</c><00:14:30.520><c> you're</c><00:14:30.670><c> right</c>

00:14:30.780 --> 00:14:30.790 align:start position:0%
offset basically so if you're right
 

00:14:30.790 --> 00:14:33.390 align:start position:0%
offset basically so if you're right
sides<00:14:31.090><c> of</c><00:14:31.420><c> and</c><00:14:31.930><c> what</c><00:14:32.380><c> you'll</c><00:14:32.530><c> actually</c><00:14:32.650><c> get</c><00:14:33.130><c> is</c>

00:14:33.390 --> 00:14:33.400 align:start position:0%
sides of and what you'll actually get is
 

00:14:33.400 --> 00:14:35.880 align:start position:0%
sides of and what you'll actually get is
the<00:14:33.910><c> size</c><00:14:34.120><c> of</c><00:14:34.480><c> the</c><00:14:34.750><c> array</c><00:14:34.960><c> and</c><00:14:35.170><c> by</c><00:14:35.290><c> so</c><00:14:35.710><c> in</c><00:14:35.800><c> this</c>

00:14:35.880 --> 00:14:35.890 align:start position:0%
the size of the array and by so in this
 

00:14:35.890 --> 00:14:38.220 align:start position:0%
the size of the array and by so in this
case<00:14:36.130><c> we</c><00:14:36.430><c> have</c><00:14:36.610><c> an</c><00:14:36.730><c> integer</c><00:14:36.970><c> which</c><00:14:37.420><c> is</c><00:14:37.570><c> 4</c><00:14:38.020><c> bytes</c>

00:14:38.220 --> 00:14:38.230 align:start position:0%
case we have an integer which is 4 bytes
 

00:14:38.230 --> 00:14:40.500 align:start position:0%
case we have an integer which is 4 bytes
we<00:14:38.470><c> have</c><00:14:38.620><c> 5</c><00:14:38.890><c> of</c><00:14:39.040><c> them</c><00:14:39.070><c> so</c><00:14:39.430><c> we</c><00:14:39.580><c> have</c><00:14:39.700><c> 25</c><00:14:40.210><c> this</c>

00:14:40.500 --> 00:14:40.510 align:start position:0%
we have 5 of them so we have 25 this
 

00:14:40.510 --> 00:14:42.810 align:start position:0%
we have 5 of them so we have 25 this
will<00:14:40.690><c> give</c><00:14:40.870><c> you</c><00:14:40.990><c> 20</c><00:14:41.440><c> bytes</c><00:14:41.650><c> so</c><00:14:42.430><c> if</c><00:14:42.550><c> you</c><00:14:42.640><c> want</c><00:14:42.760><c> to</c>

00:14:42.810 --> 00:14:42.820 align:start position:0%
will give you 20 bytes so if you want to
 

00:14:42.820 --> 00:14:44.350 align:start position:0%
will give you 20 bytes so if you want to
know<00:14:42.880><c> how</c><00:14:43.000><c> many</c><00:14:43.060><c> elements</c><00:14:43.390><c> are</c><00:14:43.570><c> in</c><00:14:43.630><c> there</c><00:14:43.870><c> you</c>

00:14:44.350 --> 00:14:44.360 align:start position:0%
know how many elements are in there you
 

00:14:44.360 --> 00:14:46.449 align:start position:0%
know how many elements are in there you
and<00:14:44.690><c> by</c><00:14:44.810><c> the</c><00:14:44.870><c> size</c><00:14:45.140><c> of</c><00:14:45.410><c> the</c><00:14:45.529><c> data</c><00:14:45.709><c> type</c><00:14:45.920><c> which</c>

00:14:46.449 --> 00:14:46.459 align:start position:0%
and by the size of the data type which
 

00:14:46.459 --> 00:14:49.180 align:start position:0%
and by the size of the data type which
is<00:14:46.640><c> in</c><00:14:46.910><c> so</c><00:14:47.570><c> this</c><00:14:47.810><c> code</c><00:14:48.110><c> will</c><00:14:48.680><c> actually</c><00:14:49.010><c> give</c>

00:14:49.180 --> 00:14:49.190 align:start position:0%
is in so this code will actually give
 

00:14:49.190 --> 00:14:51.490 align:start position:0%
is in so this code will actually give
you<00:14:49.339><c> the</c><00:14:49.370><c> account</c><00:14:49.910><c> in</c><00:14:50.209><c> terms</c><00:14:50.810><c> of</c><00:14:51.019><c> elements</c><00:14:51.440><c> I</c>

00:14:51.490 --> 00:14:51.500 align:start position:0%
you the account in terms of elements I
 

00:14:51.500 --> 00:14:53.110 align:start position:0%
you the account in terms of elements I
like<00:14:51.589><c> to</c><00:14:51.680><c> refer</c><00:14:51.800><c> this</c><00:14:52.070><c> accounts</c><00:14:52.640><c> not</c><00:14:52.820><c> size</c>

00:14:53.110 --> 00:14:53.120 align:start position:0%
like to refer this accounts not size
 

00:14:53.120 --> 00:14:54.880 align:start position:0%
like to refer this accounts not size
personally<00:14:54.050><c> when</c><00:14:54.170><c> I</c><00:14:54.200><c> deal</c><00:14:54.410><c> with</c><00:14:54.440><c> with</c><00:14:54.829><c> the</c>

00:14:54.880 --> 00:14:54.890 align:start position:0%
personally when I deal with with the
 

00:14:54.890 --> 00:14:56.650 align:start position:0%
personally when I deal with with the
word<00:14:55.070><c> size</c><00:14:55.399><c> I'm</c><00:14:55.670><c> talking</c><00:14:55.910><c> about</c><00:14:55.970><c> bytes</c><00:14:56.360><c> and</c>

00:14:56.650 --> 00:14:56.660 align:start position:0%
word size I'm talking about bytes and
 

00:14:56.660 --> 00:14:58.300 align:start position:0%
word size I'm talking about bytes and
one<00:14:56.810><c> idea</c><00:14:56.899><c> would</c><00:14:57.170><c> count</c><00:14:57.470><c> we're</c><00:14:57.980><c> talking</c><00:14:58.250><c> about</c>

00:14:58.300 --> 00:14:58.310 align:start position:0%
one idea would count we're talking about
 

00:14:58.310 --> 00:15:00.670 align:start position:0%
one idea would count we're talking about
number<00:14:58.940><c> of</c><00:14:59.060><c> elements</c><00:14:59.480><c> so</c><00:14:59.660><c> this</c><00:14:59.930><c> will</c><00:15:00.320><c> give</c><00:15:00.500><c> you</c>

00:15:00.670 --> 00:15:00.680 align:start position:0%
number of elements so this will give you
 

00:15:00.680 --> 00:15:03.160 align:start position:0%
number of elements so this will give you
five<00:15:01.220><c> which</c><00:15:02.089><c> is</c><00:15:02.120><c> the</c><00:15:02.540><c> number</c><00:15:02.990><c> of</c><00:15:03.019><c> elements</c>

00:15:03.160 --> 00:15:03.170 align:start position:0%
five which is the number of elements
 

00:15:03.170 --> 00:15:05.170 align:start position:0%
five which is the number of elements
that<00:15:03.440><c> we've</c><00:15:03.620><c> allocated</c><00:15:03.790><c> however</c><00:15:04.790><c> if</c><00:15:04.970><c> you</c><00:15:05.060><c> try</c>

00:15:05.170 --> 00:15:05.180 align:start position:0%
that we've allocated however if you try
 

00:15:05.180 --> 00:15:07.960 align:start position:0%
that we've allocated however if you try
the<00:15:05.300><c> same</c><00:15:05.390><c> thing</c><00:15:05.570><c> with</c><00:15:06.170><c> this</c><00:15:06.860><c> example</c><00:15:07.370><c> instead</c>

00:15:07.960 --> 00:15:07.970 align:start position:0%
the same thing with this example instead
 

00:15:07.970 --> 00:15:09.759 align:start position:0%
the same thing with this example instead
then<00:15:08.959><c> what</c><00:15:09.140><c> you're</c><00:15:09.260><c> actually</c><00:15:09.470><c> going</c><00:15:09.589><c> to</c><00:15:09.649><c> get</c>

00:15:09.759 --> 00:15:09.769 align:start position:0%
then what you're actually going to get
 

00:15:09.769 --> 00:15:12.430 align:start position:0%
then what you're actually going to get
here<00:15:10.100><c> is</c><00:15:10.370><c> the</c><00:15:10.700><c> size</c><00:15:10.940><c> of</c><00:15:11.240><c> an</c><00:15:11.450><c> integer</c><00:15:11.839><c> pointer</c>

00:15:12.430 --> 00:15:12.440 align:start position:0%
here is the size of an integer pointer
 

00:15:12.440 --> 00:15:14.019 align:start position:0%
here is the size of an integer pointer
which<00:15:12.709><c> is</c><00:15:12.860><c> four</c><00:15:13.130><c> wide</c><00:15:13.310><c> and</c><00:15:13.610><c> then</c><00:15:13.790><c> you're</c><00:15:13.910><c> going</c>

00:15:14.019 --> 00:15:14.029 align:start position:0%
which is four wide and then you're going
 

00:15:14.029 --> 00:15:16.180 align:start position:0%
which is four wide and then you're going
to<00:15:14.089><c> divide</c><00:15:14.180><c> it</c><00:15:14.450><c> by</c><00:15:14.600><c> five</c><00:15:15.110><c> which</c><00:15:15.800><c> will</c><00:15:15.950><c> give</c><00:15:16.070><c> you</c>

00:15:16.180 --> 00:15:16.190 align:start position:0%
to divide it by five which will give you
 

00:15:16.190 --> 00:15:18.160 align:start position:0%
to divide it by five which will give you
4/5<00:15:16.730><c> or</c><00:15:16.940><c> since</c><00:15:17.360><c> this</c><00:15:17.480><c> is</c><00:15:17.630><c> an</c><00:15:17.750><c> integer</c>

00:15:18.160 --> 00:15:18.170 align:start position:0%
4/5 or since this is an integer
 

00:15:18.170 --> 00:15:20.319 align:start position:0%
4/5 or since this is an integer
it<00:15:18.440><c> will</c><00:15:18.620><c> give</c><00:15:18.769><c> you</c><00:15:18.890><c> zero</c><00:15:19.130><c> or</c><00:15:19.190><c> nonzero</c><00:15:19.640><c> plane</c>

00:15:20.319 --> 00:15:20.329 align:start position:0%
it will give you zero or nonzero plane
 

00:15:20.329 --> 00:15:22.180 align:start position:0%
it will give you zero or nonzero plane
which<00:15:20.660><c> is</c><00:15:20.779><c> wrong</c><00:15:21.110><c> anyway</c><00:15:21.529><c> so</c><00:15:21.800><c> you</c><00:15:21.890><c> can</c><00:15:21.950><c> only</c>

00:15:22.180 --> 00:15:22.190 align:start position:0%
which is wrong anyway so you can only
 

00:15:22.190 --> 00:15:25.060 align:start position:0%
which is wrong anyway so you can only
use<00:15:22.310><c> this</c><00:15:22.640><c> trick</c><00:15:22.970><c> with</c><00:15:23.450><c> stack</c><00:15:24.230><c> out</c><00:15:24.529><c> at</c><00:15:24.769><c> arrays</c>

00:15:25.060 --> 00:15:25.070 align:start position:0%
use this trick with stack out at arrays
 

00:15:25.070 --> 00:15:27.130 align:start position:0%
use this trick with stack out at arrays
if<00:15:25.279><c> you</c><00:15:25.459><c> had</c><00:15:25.700><c> to</c><00:15:25.850><c> change</c><00:15:26.060><c> this</c><00:15:26.360><c> to</c><00:15:26.600><c> be</c><00:15:26.750><c> exact</c>

00:15:27.130 --> 00:15:27.140 align:start position:0%
if you had to change this to be exact
 

00:15:27.140 --> 00:15:29.740 align:start position:0%
if you had to change this to be exact
out<00:15:27.380><c> at</c><00:15:27.620><c> array</c><00:15:27.980><c> like</c><00:15:28.430><c> third</c><00:15:28.790><c> it</c><00:15:29.089><c> would</c><00:15:29.420><c> also</c>

00:15:29.740 --> 00:15:29.750 align:start position:0%
out at array like third it would also
 

00:15:29.750 --> 00:15:32.440 align:start position:0%
out at array like third it would also
work<00:15:30.200><c> that</c><00:15:30.709><c> would</c><00:15:30.890><c> also</c><00:15:31.190><c> be</c><00:15:31.399><c> fine</c><00:15:31.790><c> however</c><00:15:32.240><c> you</c>

00:15:32.440 --> 00:15:32.450 align:start position:0%
work that would also be fine however you
 

00:15:32.450 --> 00:15:34.420 align:start position:0%
work that would also be fine however you
really<00:15:32.720><c> can't</c><00:15:33.079><c> trust</c><00:15:33.380><c> it</c><00:15:33.589><c> and</c><00:15:33.829><c> of</c><00:15:34.070><c> course</c><00:15:34.279><c> as</c>

00:15:34.420 --> 00:15:34.430 align:start position:0%
really can't trust it and of course as
 

00:15:34.430 --> 00:15:35.980 align:start position:0%
really can't trust it and of course as
soon<00:15:34.579><c> as</c><00:15:34.760><c> you</c><00:15:34.850><c> decide</c><00:15:34.970><c> to</c><00:15:35.269><c> pass</c><00:15:35.480><c> this</c><00:15:35.690><c> into</c><00:15:35.959><c> a</c>

00:15:35.980 --> 00:15:35.990 align:start position:0%
soon as you decide to pass this into a
 

00:15:35.990 --> 00:15:37.600 align:start position:0%
soon as you decide to pass this into a
function<00:15:36.440><c> or</c><00:15:36.709><c> anything</c><00:15:37.010><c> it</c><00:15:37.190><c> becomes</c><00:15:37.490><c> an</c>

00:15:37.600 --> 00:15:37.610 align:start position:0%
function or anything it becomes an
 

00:15:37.610 --> 00:15:39.430 align:start position:0%
function or anything it becomes an
endpoint<00:15:37.850><c> err</c><00:15:38.300><c> and</c><00:15:38.480><c> then</c><00:15:39.050><c> you're</c><00:15:39.260><c> just</c>

00:15:39.430 --> 00:15:39.440 align:start position:0%
endpoint err and then you're just
 

00:15:39.440 --> 00:15:41.110 align:start position:0%
endpoint err and then you're just
screwed<00:15:40.220><c> so</c><00:15:40.459><c> what</c><00:15:40.610><c> you</c><00:15:40.700><c> have</c><00:15:40.790><c> to</c><00:15:40.880><c> do</c><00:15:40.970><c> instead</c>

00:15:41.110 --> 00:15:41.120 align:start position:0%
screwed so what you have to do instead
 

00:15:41.120 --> 00:15:43.090 align:start position:0%
screwed so what you have to do instead
is<00:15:41.329><c> actually</c><00:15:41.720><c> just</c><00:15:41.810><c> maintain</c><00:15:42.230><c> that</c><00:15:42.380><c> sign</c><00:15:42.620><c> by</c>

00:15:43.090 --> 00:15:43.100 align:start position:0%
is actually just maintain that sign by
 

00:15:43.100 --> 00:15:45.160 align:start position:0%
is actually just maintain that sign by
yourself<00:15:43.550><c> I</c><00:15:43.700><c> know</c><00:15:43.790><c> kind</c><00:15:44.209><c> of</c><00:15:44.390><c> stuck</c><00:15:44.690><c> in</c><00:15:44.930><c> that</c>

00:15:45.160 --> 00:15:45.170 align:start position:0%
yourself I know kind of stuck in that
 

00:15:45.170 --> 00:15:46.750 align:start position:0%
yourself I know kind of stuck in that
sense<00:15:45.470><c> but</c><00:15:45.769><c> it's</c><00:15:46.010><c> just</c><00:15:46.160><c> that's</c><00:15:46.339><c> just</c><00:15:46.610><c> how</c><00:15:46.730><c> a</c>

00:15:46.750 --> 00:15:46.760 align:start position:0%
sense but it's just that's just how a
 

00:15:46.760 --> 00:15:48.460 align:start position:0%
sense but it's just that's just how a
pop-up<00:15:47.240><c> works</c><00:15:47.390><c> you</c><00:15:47.570><c> have</c><00:15:47.600><c> to</c><00:15:47.839><c> maintain</c><00:15:48.110><c> it</c>

00:15:48.460 --> 00:15:48.470 align:start position:0%
pop-up works you have to maintain it
 

00:15:48.470 --> 00:15:49.780 align:start position:0%
pop-up works you have to maintain it
yourself<00:15:48.860><c> the</c><00:15:48.980><c> way</c><00:15:49.070><c> that</c><00:15:49.250><c> I</c><00:15:49.310><c> would</c><00:15:49.370><c> write</c><00:15:49.640><c> this</c>

00:15:49.780 --> 00:15:49.790 align:start position:0%
yourself the way that I would write this
 

00:15:49.790 --> 00:15:51.610 align:start position:0%
yourself the way that I would write this
code<00:15:50.060><c> personally</c><00:15:50.570><c> is</c><00:15:50.750><c> I</c><00:15:50.870><c> would</c><00:15:51.019><c> declare</c><00:15:51.380><c> a</c>

00:15:51.610 --> 00:15:51.620 align:start position:0%
code personally is I would declare a
 

00:15:51.620 --> 00:15:54.639 align:start position:0%
code personally is I would declare a
constant<00:15:51.980><c> size</c><00:15:52.730><c> to</c><00:15:53.420><c> be</c><00:15:53.540><c> five</c><00:15:53.779><c> and</c><00:15:54.110><c> then</c><00:15:54.560><c> I</c>

00:15:54.639 --> 00:15:54.649 align:start position:0%
constant size to be five and then I
 

00:15:54.649 --> 00:15:56.530 align:start position:0%
constant size to be five and then I
would<00:15:54.890><c> put</c><00:15:55.339><c> this</c><00:15:55.490><c> in</c><00:15:55.670><c> here</c><00:15:55.880><c> now</c><00:15:56.180><c> I</c><00:15:56.209><c> love</c><00:15:56.420><c> it</c>

00:15:56.530 --> 00:15:56.540 align:start position:0%
would put this in here now I love it
 

00:15:56.540 --> 00:15:58.360 align:start position:0%
would put this in here now I love it
this<00:15:56.630><c> gives</c><00:15:56.810><c> us</c><00:15:56.959><c> an</c><00:15:57.079><c> arrow</c><00:15:57.230><c> because</c><00:15:57.560><c> you</c><00:15:57.860><c> can't</c>

00:15:58.360 --> 00:15:58.370 align:start position:0%
this gives us an arrow because you can't
 

00:15:58.370 --> 00:15:59.800 align:start position:0%
this gives us an arrow because you can't
actually<00:15:58.490><c> do</c><00:15:58.730><c> that</c><00:15:58.940><c> when</c><00:15:59.180><c> you</c><00:15:59.269><c> allocate</c><00:15:59.630><c> an</c>

00:15:59.800 --> 00:15:59.810 align:start position:0%
actually do that when you allocate an
 

00:15:59.810 --> 00:16:01.030 align:start position:0%
actually do that when you allocate an
array<00:15:59.870><c> on</c><00:16:00.079><c> the</c><00:16:00.140><c> stack</c><00:16:00.199><c> it</c><00:16:00.560><c> has</c><00:16:00.740><c> to</c><00:16:00.890><c> be</c><00:16:01.010><c> a</c>

00:16:01.030 --> 00:16:01.040 align:start position:0%
array on the stack it has to be a
 

00:16:01.040 --> 00:16:04.030 align:start position:0%
array on the stack it has to be a
compile-time<00:16:01.760><c> known</c><00:16:02.570><c> constant</c><00:16:03.320><c> half</c><00:16:03.740><c> true</c>

00:16:04.030 --> 00:16:04.040 align:start position:0%
compile-time known constant half true
 

00:16:04.040 --> 00:16:05.439 align:start position:0%
compile-time known constant half true
with<00:16:04.250><c> an</c><00:16:04.339><c> asterisk</c><00:16:04.790><c> because</c><00:16:05.000><c> there's</c><00:16:05.360><c> a</c>

00:16:05.439 --> 00:16:05.449 align:start position:0%
with an asterisk because there's a
 

00:16:05.449 --> 00:16:07.600 align:start position:0%
with an asterisk because there's a
simple<00:16:05.779><c> slot</c><00:16:06.019><c> and</c><00:16:06.260><c> there</c><00:16:07.250><c> are</c><00:16:07.339><c> ways</c><00:16:07.490><c> around</c>

00:16:07.600 --> 00:16:07.610 align:start position:0%
simple slot and there are ways around
 

00:16:07.610 --> 00:16:08.980 align:start position:0%
simple slot and there are ways around
this<00:16:07.880><c> which</c><00:16:08.089><c> we'll</c><00:16:08.269><c> talk</c><00:16:08.360><c> about</c><00:16:08.420><c> in</c><00:16:08.630><c> a</c><00:16:08.870><c> later</c>

00:16:08.980 --> 00:16:08.990 align:start position:0%
this which we'll talk about in a later
 

00:16:08.990 --> 00:16:10.569 align:start position:0%
this which we'll talk about in a later
video<00:16:09.199><c> however</c><00:16:09.709><c> this</c><00:16:09.920><c> has</c><00:16:10.100><c> to</c><00:16:10.220><c> be</c><00:16:10.310><c> known</c><00:16:10.459><c> at</c>

00:16:10.569 --> 00:16:10.579 align:start position:0%
video however this has to be known at
 

00:16:10.579 --> 00:16:12.790 align:start position:0%
video however this has to be known at
compile<00:16:10.850><c> time</c><00:16:10.880><c> so</c><00:16:11.510><c> you</c><00:16:11.570><c> have</c><00:16:11.870><c> to</c><00:16:12.110><c> basically</c>

00:16:12.790 --> 00:16:12.800 align:start position:0%
compile time so you have to basically
 

00:16:12.800 --> 00:16:14.920 align:start position:0%
compile time so you have to basically
market<00:16:13.790><c> a</c><00:16:13.880><c> static</c><00:16:14.269><c> you</c><00:16:14.420><c> can</c><00:16:14.540><c> also</c><00:16:14.660><c> use</c><00:16:14.899><c> a</c>

00:16:14.920 --> 00:16:14.930 align:start position:0%
market a static you can also use a
 

00:16:14.930 --> 00:16:16.900 align:start position:0%
market a static you can also use a
constant<00:16:15.440><c> expression</c><00:16:15.920><c> here</c><00:16:16.100><c> constant</c>

00:16:16.900 --> 00:16:16.910 align:start position:0%
constant expression here constant
 

00:16:16.910 --> 00:16:18.280 align:start position:0%
constant expression here constant
expressions<00:16:17.329><c> of</c><00:16:17.390><c> cyclases</c><00:16:17.779><c> have</c><00:16:18.110><c> to</c><00:16:18.199><c> be</c>

00:16:18.280 --> 00:16:18.290 align:start position:0%
expressions of cyclases have to be
 

00:16:18.290 --> 00:16:20.110 align:start position:0%
expressions of cyclases have to be
static<00:16:18.529><c> anyway</c><00:16:19.040><c> as</c><00:16:19.100><c> you</c><00:16:19.220><c> can</c><00:16:19.279><c> see</c><00:16:19.579><c> another</c>

00:16:20.110 --> 00:16:20.120 align:start position:0%
static anyway as you can see another
 

00:16:20.120 --> 00:16:22.060 align:start position:0%
static anyway as you can see another
story<00:16:20.600><c> for</c><00:16:20.779><c> another</c><00:16:20.870><c> video</c><00:16:21.260><c> this</c><00:16:21.410><c> videos</c>

00:16:22.060 --> 00:16:22.070 align:start position:0%
story for another video this videos
 

00:16:22.070 --> 00:16:23.290 align:start position:0%
story for another video this videos
going<00:16:22.220><c> to</c><00:16:22.339><c> have</c><00:16:22.430><c> so</c><00:16:22.579><c> many</c><00:16:22.640><c> turn</c><00:16:22.940><c> offs</c><00:16:23.089><c> because</c>

00:16:23.290 --> 00:16:23.300 align:start position:0%
going to have so many turn offs because
 

00:16:23.300 --> 00:16:24.790 align:start position:0%
going to have so many turn offs because
we're<00:16:23.690><c> really</c><00:16:23.839><c> going</c><00:16:24.050><c> into</c><00:16:24.320><c> the</c><00:16:24.410><c> juicy</c><00:16:24.740><c> stuff</c>

00:16:24.790 --> 00:16:24.800 align:start position:0%
we're really going into the juicy stuff
 

00:16:24.800 --> 00:16:26.470 align:start position:0%
we're really going into the juicy stuff
now<00:16:25.130><c> hope</c><00:16:25.310><c> you</c><00:16:25.399><c> guys</c><00:16:25.550><c> are</c><00:16:25.790><c> excited</c><00:16:25.970><c> about</c><00:16:26.329><c> that</c>

00:16:26.470 --> 00:16:26.480 align:start position:0%
now hope you guys are excited about that
 

00:16:26.480 --> 00:16:28.030 align:start position:0%
now hope you guys are excited about that
so<00:16:26.870><c> we'll</c><00:16:26.990><c> just</c><00:16:27.079><c> make</c><00:16:27.199><c> it</c><00:16:27.260><c> static</c><00:16:27.589><c> and</c><00:16:27.890><c> we</c>

00:16:28.030 --> 00:16:28.040 align:start position:0%
so we'll just make it static and we
 

00:16:28.040 --> 00:16:29.170 align:start position:0%
so we'll just make it static and we
don't<00:16:28.220><c> really</c><00:16:28.399><c> need</c><00:16:28.579><c> this</c><00:16:28.730><c> a</c><00:16:28.850><c> big</c><00:16:29.000><c> heart</c>

00:16:29.170 --> 00:16:29.180 align:start position:0%
don't really need this a big heart
 

00:16:29.180 --> 00:16:31.840 align:start position:0%
don't really need this a big heart
expression<00:16:29.660><c> so</c><00:16:30.320><c> that's</c><00:16:31.040><c> really</c><00:16:31.370><c> how</c><00:16:31.579><c> you</c><00:16:31.640><c> deal</c>

00:16:31.840 --> 00:16:31.850 align:start position:0%
expression so that's really how you deal
 

00:16:31.850 --> 00:16:33.400 align:start position:0%
expression so that's really how you deal
with<00:16:31.910><c> this</c><00:16:32.089><c> and</c><00:16:32.240><c> that</c><00:16:32.360><c> in</c><00:16:32.480><c> this</c><00:16:32.600><c> case</c><00:16:32.660><c> telecoil</c>

00:16:33.400 --> 00:16:33.410 align:start position:0%
with this and that in this case telecoil
 

00:16:33.410 --> 00:16:35.170 align:start position:0%
with this and that in this case telecoil
is<00:16:33.589><c> something</c><00:16:33.920><c> like</c><00:16:34.010><c> example</c><00:16:34.430><c> size</c><00:16:34.760><c> because</c>

00:16:35.170 --> 00:16:35.180 align:start position:0%
is something like example size because
 

00:16:35.180 --> 00:16:37.090 align:start position:0%
is something like example size because
it's<00:16:35.329><c> dealing</c><00:16:35.510><c> with</c><00:16:35.660><c> the</c><00:16:36.199><c> example</c><00:16:36.800><c> array</c>

00:16:37.090 --> 00:16:37.100 align:start position:0%
it's dealing with the example array
 

00:16:37.100 --> 00:16:39.310 align:start position:0%
it's dealing with the example array
specifically<00:16:37.970><c> and</c><00:16:38.149><c> then</c><00:16:38.660><c> you</c><00:16:38.899><c> can</c><00:16:39.079><c> plug</c><00:16:39.199><c> this</c>

00:16:39.310 --> 00:16:39.320 align:start position:0%
specifically and then you can plug this
 

00:16:39.320 --> 00:16:40.780 align:start position:0%
specifically and then you can plug this
into<00:16:39.440><c> all</c><00:16:39.680><c> of</c><00:16:39.709><c> your</c><00:16:39.800><c> for</c><00:16:40.130><c> loops</c><00:16:40.310><c> and</c><00:16:40.519><c> all</c><00:16:40.610><c> that</c>

00:16:40.780 --> 00:16:40.790 align:start position:0%
into all of your for loops and all that
 

00:16:40.790 --> 00:16:42.430 align:start position:0%
into all of your for loops and all that
stuff<00:16:41.029><c> to</c><00:16:41.390><c> actually</c><00:16:41.810><c> notice</c><00:16:41.959><c> either</c><00:16:42.230><c> your</c>

00:16:42.430 --> 00:16:42.440 align:start position:0%
stuff to actually notice either your
 

00:16:42.440 --> 00:16:44.079 align:start position:0%
stuff to actually notice either your
array<00:16:42.649><c> that's</c><00:16:43.370><c> just</c><00:16:43.670><c> what</c><00:16:43.820><c> you're</c><00:16:43.940><c> going</c><00:16:43.970><c> to</c>

00:16:44.079 --> 00:16:44.089 align:start position:0%
array that's just what you're going to
 

00:16:44.089 --> 00:16:46.000 align:start position:0%
array that's just what you're going to
do<00:16:44.180><c> if</c><00:16:44.390><c> you</c><00:16:44.570><c> use</c><00:16:44.690><c> at</c><00:16:44.870><c> people</c><00:16:45.079><c> have</c><00:16:45.170><c> got</c><00:16:45.260><c> 11</c>

00:16:46.000 --> 00:16:46.010 align:start position:0%
do if you use at people have got 11
 

00:16:46.010 --> 00:16:48.250 align:start position:0%
do if you use at people have got 11
standard<00:16:46.519><c> array</c><00:16:46.760><c> here</c><00:16:47.329><c> on</c><00:16:47.449><c> how</c><00:16:47.570><c> to</c><00:16:47.630><c> offer</c><00:16:47.870><c> you</c>

00:16:48.250 --> 00:16:48.260 align:start position:0%
standard array here on how to offer you
 

00:16:48.260 --> 00:16:49.870 align:start position:0%
standard array here on how to offer you
guys<00:16:48.290><c> how</c><00:16:48.470><c> to</c><00:16:48.500><c> do</c><00:16:48.680><c> that</c><00:16:48.860><c> you</c><00:16:49.430><c> can</c><00:16:49.579><c> just</c><00:16:49.730><c> write</c>

00:16:49.870 --> 00:16:49.880 align:start position:0%
guys how to do that you can just write
 

00:16:49.880 --> 00:16:51.939 align:start position:0%
guys how to do that you can just write
FTD<00:16:50.420><c> array</c><00:16:50.870><c> we'll</c><00:16:51.470><c> make</c><00:16:51.620><c> sure</c><00:16:51.800><c> to</c><00:16:51.829><c> include</c>

00:16:51.939 --> 00:16:51.949 align:start position:0%
FTD array we'll make sure to include
 

00:16:51.949 --> 00:16:53.940 align:start position:0%
FTD array we'll make sure to include
this<00:16:52.370><c> as</c><00:16:52.730><c> well</c><00:16:52.970><c> just</c><00:16:53.420><c> Inc</c>

00:16:53.940 --> 00:16:53.950 align:start position:0%
this as well just Inc
 

00:16:53.950 --> 00:16:56.250 align:start position:0%
this as well just Inc
which<00:16:54.040><c> array</c><00:16:54.760><c> will</c><00:16:55.330><c> give</c><00:16:55.480><c> it</c><00:16:55.570><c> a</c><00:16:55.630><c> name</c><00:16:55.810><c> for</c>

00:16:56.250 --> 00:16:56.260 align:start position:0%
which array will give it a name for
 

00:16:56.260 --> 00:16:58.830 align:start position:0%
which array will give it a name for
example<00:16:56.490><c> another</c><00:16:57.490><c> and</c><00:16:57.850><c> we</c><00:16:58.120><c> basically</c><00:16:58.480><c> have</c><00:16:58.720><c> to</c>

00:16:58.830 --> 00:16:58.840 align:start position:0%
example another and we basically have to
 

00:16:58.840 --> 00:17:01.410 align:start position:0%
example another and we basically have to
give<00:16:59.020><c> it</c><00:16:59.140><c> a</c><00:16:59.350><c> type</c><00:16:59.860><c> and</c><00:17:00.190><c> account</c><00:17:00.850><c> if</c><00:17:01.060><c> we're</c><00:17:01.300><c> now</c>

00:17:01.410 --> 00:17:01.420 align:start position:0%
give it a type and account if we're now
 

00:17:01.420 --> 00:17:02.820 align:start position:0%
give it a type and account if we're now
you'll<00:17:01.570><c> bracket</c><00:17:01.870><c> here</c><00:17:02.020><c> it</c><00:17:02.110><c> says</c><00:17:02.290><c> we</c><00:17:02.440><c> need</c><00:17:02.590><c> the</c>

00:17:02.820 --> 00:17:02.830 align:start position:0%
you'll bracket here it says we need the
 

00:17:02.830 --> 00:17:04.770 align:start position:0%
you'll bracket here it says we need the
type<00:17:03.100><c> name</c><00:17:03.370><c> and</c><00:17:03.400><c> the</c><00:17:03.700><c> size</c><00:17:03.910><c> so</c><00:17:04.420><c> we'll</c><00:17:04.600><c> write</c>

00:17:04.770 --> 00:17:04.780 align:start position:0%
type name and the size so we'll write
 

00:17:04.780 --> 00:17:08.100 align:start position:0%
type name and the size so we'll write
int<00:17:05.110><c> as</c><00:17:05.320><c> the</c><00:17:05.530><c> type</c><00:17:05.740><c> comma</c><00:17:06.400><c> 5</c><00:17:07.000><c> as</c><00:17:07.329><c> the</c><00:17:07.600><c> size</c><00:17:07.810><c> and</c>

00:17:08.100 --> 00:17:08.110 align:start position:0%
int as the type comma 5 as the size and
 

00:17:08.110 --> 00:17:10.500 align:start position:0%
int as the type comma 5 as the size and
that's<00:17:08.650><c> it</c><00:17:08.890><c> with</c><00:17:09.040><c> credit</c><00:17:09.370><c> this</c><00:17:09.490><c> array</c><00:17:09.760><c> and</c><00:17:10.060><c> to</c>

00:17:10.500 --> 00:17:10.510 align:start position:0%
that's it with credit this array and to
 

00:17:10.510 --> 00:17:12.060 align:start position:0%
that's it with credit this array and to
fill<00:17:10.660><c> it</c><00:17:10.750><c> up</c><00:17:10.839><c> of</c><00:17:11.020><c> course</c><00:17:11.230><c> we</c><00:17:11.440><c> can</c><00:17:11.620><c> actually</c><00:17:11.770><c> do</c>

00:17:12.060 --> 00:17:12.070 align:start position:0%
fill it up of course we can actually do
 

00:17:12.070 --> 00:17:14.640 align:start position:0%
fill it up of course we can actually do
another<00:17:12.370><c> dot</c><00:17:12.910><c> size</c><00:17:13.300><c> and</c><00:17:13.660><c> there</c><00:17:14.020><c> we</c><00:17:14.110><c> go</c><00:17:14.260><c> we</c><00:17:14.500><c> have</c>

00:17:14.640 --> 00:17:14.650 align:start position:0%
another dot size and there we go we have
 

00:17:14.650 --> 00:17:16.079 align:start position:0%
another dot size and there we go we have
5<00:17:14.920><c> so</c><00:17:15.190><c> it's</c><00:17:15.310><c> an</c><00:17:15.400><c> easier</c><00:17:15.699><c> way</c><00:17:15.820><c> to</c><00:17:15.850><c> deal</c><00:17:16.060><c> with</c>

00:17:16.079 --> 00:17:16.089 align:start position:0%
5 so it's an easier way to deal with
 

00:17:16.089 --> 00:17:17.220 align:start position:0%
5 so it's an easier way to deal with
this<00:17:16.329><c> of</c><00:17:16.449><c> course</c><00:17:16.480><c> that</c><00:17:16.780><c> does</c><00:17:16.900><c> have</c><00:17:17.110><c> the</c>

00:17:17.220 --> 00:17:17.230 align:start position:0%
this of course that does have the
 

00:17:17.230 --> 00:17:19.290 align:start position:0%
this of course that does have the
overhead<00:17:17.680><c> because</c><00:17:18.130><c> it</c><00:17:18.610><c> does</c><00:17:18.820><c> all</c><00:17:19.000><c> of</c><00:17:19.030><c> the</c>

00:17:19.290 --> 00:17:19.300 align:start position:0%
overhead because it does all of the
 

00:17:19.300 --> 00:17:21.000 align:start position:0%
overhead because it does all of the
balance<00:17:19.810><c> checking</c><00:17:20.140><c> if</c><00:17:20.260><c> you</c><00:17:20.290><c> wanted</c><00:17:20.620><c> to</c><00:17:20.800><c> and</c>

00:17:21.000 --> 00:17:21.010 align:start position:0%
balance checking if you wanted to and
 

00:17:21.010 --> 00:17:23.060 align:start position:0%
balance checking if you wanted to and
also<00:17:21.370><c> it</c><00:17:21.610><c> actually</c><00:17:21.730><c> maintains</c><00:17:22.329><c> a</c><00:17:22.540><c> size</c>

00:17:23.060 --> 00:17:23.070 align:start position:0%
also it actually maintains a size
 

00:17:23.070 --> 00:17:25.319 align:start position:0%
also it actually maintains a size
integer<00:17:24.070><c> as</c><00:17:24.310><c> well</c><00:17:24.459><c> which</c><00:17:24.610><c> you</c><00:17:24.730><c> might</c><00:17:24.940><c> not</c><00:17:25.120><c> want</c>

00:17:25.319 --> 00:17:25.329 align:start position:0%
integer as well which you might not want
 

00:17:25.329 --> 00:17:27.360 align:start position:0%
integer as well which you might not want
so<00:17:25.810><c> there</c><00:17:25.930><c> is</c><00:17:26.020><c> a</c><00:17:26.050><c> bit</c><00:17:26.230><c> of</c><00:17:26.260><c> overhead</c><00:17:26.620><c> usually</c>

00:17:27.360 --> 00:17:27.370 align:start position:0%
so there is a bit of overhead usually
 

00:17:27.370 --> 00:17:29.850 align:start position:0%
so there is a bit of overhead usually
it's<00:17:27.459><c> worth</c><00:17:27.640><c> it</c><00:17:27.850><c> so</c><00:17:28.540><c> consider</c><00:17:29.410><c> using</c><00:17:29.530><c> this</c>

00:17:29.850 --> 00:17:29.860 align:start position:0%
it's worth it so consider using this
 

00:17:29.860 --> 00:17:31.230 align:start position:0%
it's worth it so consider using this
we'll<00:17:30.070><c> have</c><00:17:30.100><c> a</c><00:17:30.250><c> whole</c><00:17:30.430><c> video</c><00:17:30.640><c> on</c><00:17:30.940><c> how</c><00:17:31.090><c> that</c>

00:17:31.230 --> 00:17:31.240 align:start position:0%
we'll have a whole video on how that
 

00:17:31.240 --> 00:17:33.000 align:start position:0%
we'll have a whole video on how that
actually<00:17:31.390><c> works</c><00:17:31.690><c> and</c><00:17:31.810><c> all</c><00:17:31.900><c> that</c><00:17:32.050><c> drop</c><00:17:32.260><c> in</c><00:17:32.440><c> when</c>

00:17:33.000 --> 00:17:33.010 align:start position:0%
actually works and all that drop in when
 

00:17:33.010 --> 00:17:34.200 align:start position:0%
actually works and all that drop in when
we<00:17:33.130><c> finally</c><00:17:33.520><c> reached</c><00:17:33.700><c> our</c><00:17:33.850><c> two</c><00:17:33.970><c> structures</c>

00:17:34.200 --> 00:17:34.210 align:start position:0%
we finally reached our two structures
 

00:17:34.210 --> 00:17:36.120 align:start position:0%
we finally reached our two structures
and<00:17:34.480><c> start</c><00:17:34.660><c> talking</c><00:17:34.900><c> about</c><00:17:34.990><c> them</c><00:17:35.230><c> but</c><00:17:35.860><c> just</c>

00:17:36.120 --> 00:17:36.130 align:start position:0%
and start talking about them but just
 

00:17:36.130 --> 00:17:37.110 align:start position:0%
and start talking about them but just
something<00:17:36.280><c> to</c><00:17:36.730><c> think</c><00:17:36.760><c> about</c>

00:17:37.110 --> 00:17:37.120 align:start position:0%
something to think about
 

00:17:37.120 --> 00:17:39.240 align:start position:0%
something to think about
personally<00:17:37.600><c> I</c><00:17:37.690><c> use</c><00:17:37.900><c> raw</c><00:17:38.170><c> arrays</c><00:17:38.560><c> all</c><00:17:38.950><c> time</c>

00:17:39.240 --> 00:17:39.250 align:start position:0%
personally I use raw arrays all time
 

00:17:39.250 --> 00:17:41.100 align:start position:0%
personally I use raw arrays all time
most<00:17:39.550><c> people</c><00:17:39.610><c> probably</c><00:17:39.970><c> do</c><00:17:40.240><c> a</c><00:17:40.480><c> little</c><00:17:40.960><c> bit</c>

00:17:41.100 --> 00:17:41.110 align:start position:0%
most people probably do a little bit
 

00:17:41.110 --> 00:17:43.740 align:start position:0%
most people probably do a little bit
faster<00:17:41.530><c> and</c><00:17:41.740><c> I</c><00:17:42.130><c> personally</c><00:17:42.760><c> don't</c><00:17:43.000><c> really</c><00:17:43.300><c> run</c>

00:17:43.740 --> 00:17:43.750 align:start position:0%
faster and I personally don't really run
 

00:17:43.750 --> 00:17:46.050 align:start position:0%
faster and I personally don't really run
into<00:17:43.960><c> many</c><00:17:44.110><c> problems</c><00:17:44.230><c> with</c><00:17:44.590><c> them</c><00:17:44.710><c> but</c><00:17:45.280><c> again</c>

00:17:46.050 --> 00:17:46.060 align:start position:0%
into many problems with them but again
 

00:17:46.060 --> 00:17:48.210 align:start position:0%
into many problems with them but again
if<00:17:46.390><c> you're</c><00:17:46.540><c> being</c><00:17:46.720><c> super</c><00:17:46.990><c> safe</c><00:17:47.290><c> and</c><00:17:47.590><c> you</c><00:17:48.040><c> were</c>

00:17:48.210 --> 00:17:48.220 align:start position:0%
if you're being super safe and you were
 

00:17:48.220 --> 00:17:49.140 align:start position:0%
if you're being super safe and you were
probably<00:17:48.370><c> coming</c><00:17:48.550><c> from</c><00:17:48.700><c> another</c><00:17:48.910><c> language</c>

00:17:49.140 --> 00:17:49.150 align:start position:0%
probably coming from another language
 

00:17:49.150 --> 00:17:51.330 align:start position:0%
probably coming from another language
you<00:17:49.600><c> probably</c><00:17:50.500><c> do</c><00:17:50.680><c> want</c><00:17:50.860><c> to</c><00:17:50.890><c> use</c><00:17:51.010><c> standard</c>

00:17:51.330 --> 00:17:51.340 align:start position:0%
you probably do want to use standard
 

00:17:51.340 --> 00:17:53.700 align:start position:0%
you probably do want to use standard
array<00:17:51.520><c> I'm</c><00:17:51.730><c> being</c><00:17:51.910><c> completely</c><00:17:52.360><c> honest</c><00:17:52.780><c> it's</c><00:17:53.530><c> a</c>

00:17:53.700 --> 00:17:53.710 align:start position:0%
array I'm being completely honest it's a
 

00:17:53.710 --> 00:17:56.190 align:start position:0%
array I'm being completely honest it's a
lot<00:17:53.860><c> safer</c><00:17:54.100><c> to</c><00:17:54.580><c> use</c><00:17:54.700><c> standard</c><00:17:55.330><c> array</c><00:17:55.660><c> than</c><00:17:56.020><c> raw</c>

00:17:56.190 --> 00:17:56.200 align:start position:0%
lot safer to use standard array than raw
 

00:17:56.200 --> 00:17:58.020 align:start position:0%
lot safer to use standard array than raw
arrays<00:17:56.500><c> however</c><00:17:57.310><c> I</c><00:17:57.430><c> like</c><00:17:57.790><c> to</c><00:17:57.880><c> live</c>

00:17:58.020 --> 00:17:58.030 align:start position:0%
arrays however I like to live
 

00:17:58.030 --> 00:17:59.310 align:start position:0%
arrays however I like to live
dangerously<00:17:58.060><c> anyway</c><00:17:58.930><c> I</c><00:17:58.960><c> hope</c><00:17:59.080><c> you</c><00:17:59.200><c> guys</c>

00:17:59.310 --> 00:17:59.320 align:start position:0%
dangerously anyway I hope you guys
 

00:17:59.320 --> 00:18:00.630 align:start position:0%
dangerously anyway I hope you guys
enjoyed<00:17:59.560><c> this</c><00:17:59.650><c> video</c><00:17:59.860><c> if</c><00:18:00.160><c> you</c><00:18:00.250><c> did</c><00:18:00.400><c> you</c><00:18:00.520><c> can</c>

00:18:00.630 --> 00:18:00.640 align:start position:0%
enjoyed this video if you did you can
 

00:18:00.640 --> 00:18:02.280 align:start position:0%
enjoyed this video if you did you can
show<00:18:00.790><c> me</c><00:18:00.970><c> by</c><00:18:01.090><c> hitting</c><00:18:01.330><c> that</c><00:18:01.420><c> like</c><00:18:01.540><c> button</c><00:18:01.780><c> and</c>

00:18:02.280 --> 00:18:02.290 align:start position:0%
show me by hitting that like button and
 

00:18:02.290 --> 00:18:03.480 align:start position:0%
show me by hitting that like button and
if<00:18:02.320><c> you</c><00:18:02.500><c> really</c><00:18:02.770><c> want</c><00:18:03.010><c> to</c><00:18:03.130><c> pull</c><00:18:03.310><c> up</c><00:18:03.400><c> this</c>

00:18:03.480 --> 00:18:03.490 align:start position:0%
if you really want to pull up this
 

00:18:03.490 --> 00:18:05.220 align:start position:0%
if you really want to pull up this
series<00:18:03.880><c> and</c><00:18:04.060><c> see</c><00:18:04.240><c> more</c><00:18:04.450><c> great</c><00:18:04.630><c> episodes</c><00:18:05.050><c> like</c>

00:18:05.220 --> 00:18:05.230 align:start position:0%
series and see more great episodes like
 

00:18:05.230 --> 00:18:06.090 align:start position:0%
series and see more great episodes like
this<00:18:05.470><c> then</c><00:18:05.740><c> you</c><00:18:05.830><c> can</c><00:18:05.920><c> go</c><00:18:06.040><c> to</c>

00:18:06.090 --> 00:18:06.100 align:start position:0%
this then you can go to
 

00:18:06.100 --> 00:18:08.160 align:start position:0%
this then you can go to
patreon.com/scishow<00:18:06.850><c> know</c><00:18:07.570><c> you'll</c><00:18:08.020><c> get</c>

00:18:08.160 --> 00:18:08.170 align:start position:0%
patreon.com/scishow know you'll get
 

00:18:08.170 --> 00:18:09.420 align:start position:0%
patreon.com/scishow know you'll get
access<00:18:08.500><c> to</c><00:18:08.530><c> a</c><00:18:08.650><c> whole</c><00:18:08.680><c> bunch</c><00:18:08.800><c> of</c><00:18:09.040><c> rewards</c><00:18:09.400><c> for</c>

00:18:09.420 --> 00:18:09.430 align:start position:0%
access to a whole bunch of rewards for
 

00:18:09.430 --> 00:18:10.650 align:start position:0%
access to a whole bunch of rewards for
showing<00:18:09.700><c> your</c><00:18:09.820><c> support</c><00:18:09.880><c> there</c><00:18:10.210><c> and</c><00:18:10.390><c> it</c><00:18:10.510><c> really</c>

00:18:10.650 --> 00:18:10.660 align:start position:0%
showing your support there and it really
 

00:18:10.660 --> 00:18:12.780 align:start position:0%
showing your support there and it really
does<00:18:10.810><c> help</c><00:18:11.020><c> me</c><00:18:11.260><c> produce</c><00:18:11.470><c> these</c><00:18:12.040><c> videos</c><00:18:12.190><c> I'll</c>

00:18:12.780 --> 00:18:12.790 align:start position:0%
does help me produce these videos I'll
 

00:18:12.790 --> 00:18:15.450 align:start position:0%
does help me produce these videos I'll
see<00:18:12.970><c> you</c><00:18:13.030><c> guys</c><00:18:13.120><c> next</c><00:18:13.270><c> time</c><00:18:13.420><c> goodbye</c>

00:18:15.450 --> 00:18:15.460 align:start position:0%
see you guys next time goodbye
 

00:18:15.460 --> 00:18:21.039 align:start position:0%
see you guys next time goodbye
[Music]

00:18:21.039 --> 00:18:21.049 align:start position:0%
 
 

00:18:21.049 --> 00:18:22.940 align:start position:0%
 
you

00:18:22.940 --> 00:18:22.950 align:start position:0%
you
 

00:18:22.950 --> 00:18:29.980 align:start position:0%
you
[Music]

