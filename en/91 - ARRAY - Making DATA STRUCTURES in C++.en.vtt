WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.750 align:start position:0%
 
hey<00:00:00.160><c> what's</c><00:00:00.320><c> up</c><00:00:00.399><c> guys</c><00:00:00.640><c> my</c><00:00:00.799><c> name</c><00:00:01.040><c> is</c><00:00:01.199><c> the</c><00:00:01.360><c> churno</c>

00:00:01.750 --> 00:00:01.760 align:start position:0%
hey what's up guys my name is the churno
 

00:00:01.760 --> 00:00:03.990 align:start position:0%
hey what's up guys my name is the churno
welcome<00:00:02.080><c> back</c><00:00:02.240><c> to</c><00:00:02.399><c> my</c><00:00:02.720><c> c</c><00:00:02.879><c> plus</c><00:00:03.120><c> plus</c><00:00:03.360><c> series</c><00:00:03.760><c> so</c>

00:00:03.990 --> 00:00:04.000 align:start position:0%
welcome back to my c plus plus series so
 

00:00:04.000 --> 00:00:05.030 align:start position:0%
welcome back to my c plus plus series so
far<00:00:04.240><c> in</c><00:00:04.319><c> this</c><00:00:04.480><c> sequel</c>

00:00:05.030 --> 00:00:05.040 align:start position:0%
far in this sequel
 

00:00:05.040 --> 00:00:07.030 align:start position:0%
far in this sequel
series<00:00:05.279><c> we've</c><00:00:05.440><c> been</c><00:00:05.600><c> mostly</c><00:00:06.080><c> learning</c><00:00:06.560><c> about</c>

00:00:07.030 --> 00:00:07.040 align:start position:0%
series we've been mostly learning about
 

00:00:07.040 --> 00:00:09.430 align:start position:0%
series we've been mostly learning about
various<00:00:07.600><c> individual</c><00:00:08.320><c> language</c><00:00:08.800><c> constructs</c>

00:00:09.430 --> 00:00:09.440 align:start position:0%
various individual language constructs
 

00:00:09.440 --> 00:00:10.790 align:start position:0%
various individual language constructs
and<00:00:09.599><c> just</c><00:00:09.840><c> things</c><00:00:10.080><c> that</c><00:00:10.160><c> we</c><00:00:10.320><c> can</c><00:00:10.400><c> do</c><00:00:10.559><c> in</c><00:00:10.719><c> the</c>

00:00:10.790 --> 00:00:10.800 align:start position:0%
and just things that we can do in the
 

00:00:10.800 --> 00:00:11.430 align:start position:0%
and just things that we can do in the
language

00:00:11.430 --> 00:00:11.440 align:start position:0%
language
 

00:00:11.440 --> 00:00:13.589 align:start position:0%
language
and<00:00:11.599><c> how</c><00:00:11.759><c> the</c><00:00:11.920><c> language</c><00:00:12.400><c> itself</c><00:00:12.799><c> works</c><00:00:13.440><c> but</c>

00:00:13.589 --> 00:00:13.599 align:start position:0%
and how the language itself works but
 

00:00:13.599 --> 00:00:15.190 align:start position:0%
and how the language itself works but
now<00:00:13.840><c> it's</c><00:00:14.000><c> time</c><00:00:14.160><c> to</c><00:00:14.320><c> take</c><00:00:14.480><c> that</c><00:00:14.719><c> and</c><00:00:14.880><c> actually</c>

00:00:15.190 --> 00:00:15.200 align:start position:0%
now it's time to take that and actually
 

00:00:15.200 --> 00:00:16.710 align:start position:0%
now it's time to take that and actually
put<00:00:15.440><c> it</c><00:00:15.599><c> into</c><00:00:15.839><c> practice</c><00:00:16.320><c> and</c><00:00:16.400><c> the</c><00:00:16.480><c> way</c><00:00:16.640><c> that</c>

00:00:16.710 --> 00:00:16.720 align:start position:0%
put it into practice and the way that
 

00:00:16.720 --> 00:00:17.750 align:start position:0%
put it into practice and the way that
we'll<00:00:16.880><c> be</c><00:00:16.960><c> doing</c><00:00:17.199><c> that</c>

00:00:17.750 --> 00:00:17.760 align:start position:0%
we'll be doing that
 

00:00:17.760 --> 00:00:19.750 align:start position:0%
we'll be doing that
is<00:00:17.920><c> by</c><00:00:18.160><c> learning</c><00:00:18.480><c> about</c><00:00:18.800><c> how</c><00:00:19.039><c> to</c><00:00:19.199><c> write</c><00:00:19.439><c> our</c>

00:00:19.750 --> 00:00:19.760 align:start position:0%
is by learning about how to write our
 

00:00:19.760 --> 00:00:20.870 align:start position:0%
is by learning about how to write our
own<00:00:19.920><c> data</c><00:00:20.240><c> structures</c>

00:00:20.870 --> 00:00:20.880 align:start position:0%
own data structures
 

00:00:20.880 --> 00:00:22.710 align:start position:0%
own data structures
now<00:00:21.119><c> just</c><00:00:21.279><c> to</c><00:00:21.439><c> be</c><00:00:21.600><c> clear</c><00:00:21.840><c> by</c><00:00:22.080><c> data</c><00:00:22.320><c> structures</c>

00:00:22.710 --> 00:00:22.720 align:start position:0%
now just to be clear by data structures
 

00:00:22.720 --> 00:00:24.550 align:start position:0%
now just to be clear by data structures
i'm<00:00:22.800><c> talking</c><00:00:23.039><c> about</c><00:00:23.279><c> things</c><00:00:23.519><c> like</c><00:00:23.840><c> arrays</c>

00:00:24.550 --> 00:00:24.560 align:start position:0%
i'm talking about things like arrays
 

00:00:24.560 --> 00:00:27.910 align:start position:0%
i'm talking about things like arrays
lists<00:00:25.439><c> sets</c><00:00:26.080><c> maps</c><00:00:26.560><c> trees</c><00:00:27.119><c> that</c><00:00:27.279><c> kind</c><00:00:27.439><c> of</c><00:00:27.599><c> stuff</c>

00:00:27.910 --> 00:00:27.920 align:start position:0%
lists sets maps trees that kind of stuff
 

00:00:27.920 --> 00:00:29.669 align:start position:0%
lists sets maps trees that kind of stuff
whilst<00:00:28.240><c> the</c><00:00:28.320><c> c</c><00:00:28.480><c> plus</c><00:00:28.720><c> plus</c><00:00:28.960><c> standard</c><00:00:29.279><c> template</c>

00:00:29.669 --> 00:00:29.679 align:start position:0%
whilst the c plus plus standard template
 

00:00:29.679 --> 00:00:31.189 align:start position:0%
whilst the c plus plus standard template
library<00:00:30.000><c> comes</c><00:00:30.400><c> with</c>

00:00:31.189 --> 00:00:31.199 align:start position:0%
library comes with
 

00:00:31.199 --> 00:00:32.870 align:start position:0%
library comes with
most<00:00:31.439><c> of</c><00:00:31.599><c> these</c><00:00:31.760><c> data</c><00:00:32.079><c> structures</c><00:00:32.480><c> already</c>

00:00:32.870 --> 00:00:32.880 align:start position:0%
most of these data structures already
 

00:00:32.880 --> 00:00:34.389 align:start position:0%
most of these data structures already
implemented<00:00:33.600><c> for</c><00:00:33.840><c> you</c>

00:00:34.389 --> 00:00:34.399 align:start position:0%
implemented for you
 

00:00:34.399 --> 00:00:36.310 align:start position:0%
implemented for you
i<00:00:34.559><c> think</c><00:00:34.800><c> it's</c><00:00:34.960><c> very</c><00:00:35.280><c> valuable</c><00:00:35.680><c> to</c><00:00:35.920><c> try</c><00:00:36.160><c> and</c>

00:00:36.310 --> 00:00:36.320 align:start position:0%
i think it's very valuable to try and
 

00:00:36.320 --> 00:00:37.590 align:start position:0%
i think it's very valuable to try and
write<00:00:36.559><c> your</c><00:00:36.719><c> own</c><00:00:36.960><c> because</c><00:00:37.120><c> apart</c><00:00:37.360><c> from</c>

00:00:37.590 --> 00:00:37.600 align:start position:0%
write your own because apart from
 

00:00:37.600 --> 00:00:39.110 align:start position:0%
write your own because apart from
learning<00:00:37.920><c> more</c><00:00:38.160><c> deeply</c><00:00:38.480><c> about</c><00:00:38.719><c> how</c><00:00:38.960><c> these</c>

00:00:39.110 --> 00:00:39.120 align:start position:0%
learning more deeply about how these
 

00:00:39.120 --> 00:00:40.389 align:start position:0%
learning more deeply about how these
data<00:00:39.440><c> structures</c><00:00:39.920><c> actually</c>

00:00:40.389 --> 00:00:40.399 align:start position:0%
data structures actually
 

00:00:40.399 --> 00:00:42.630 align:start position:0%
data structures actually
work<00:00:40.960><c> and</c><00:00:41.280><c> why</c><00:00:41.520><c> they</c><00:00:41.680><c> might</c><00:00:41.920><c> be</c><00:00:42.079><c> more</c><00:00:42.320><c> useful</c>

00:00:42.630 --> 00:00:42.640 align:start position:0%
work and why they might be more useful
 

00:00:42.640 --> 00:00:43.990 align:start position:0%
work and why they might be more useful
than<00:00:42.879><c> other</c><00:00:43.040><c> data</c><00:00:43.360><c> structures</c>

00:00:43.990 --> 00:00:44.000 align:start position:0%
than other data structures
 

00:00:44.000 --> 00:00:45.350 align:start position:0%
than other data structures
you'll<00:00:44.239><c> also</c><00:00:44.559><c> learn</c><00:00:44.800><c> a</c><00:00:44.879><c> lot</c><00:00:45.039><c> about</c><00:00:45.280><c> the</c>

00:00:45.350 --> 00:00:45.360 align:start position:0%
you'll also learn a lot about the
 

00:00:45.360 --> 00:00:47.110 align:start position:0%
you'll also learn a lot about the
language<00:00:45.840><c> having</c><00:00:46.079><c> to</c><00:00:46.239><c> write</c><00:00:46.640><c> kind</c><00:00:46.879><c> of</c>

00:00:47.110 --> 00:00:47.120 align:start position:0%
language having to write kind of
 

00:00:47.120 --> 00:00:48.950 align:start position:0%
language having to write kind of
efficient<00:00:47.760><c> versions</c><00:00:48.239><c> of</c><00:00:48.399><c> these</c><00:00:48.640><c> data</c>

00:00:48.950 --> 00:00:48.960 align:start position:0%
efficient versions of these data
 

00:00:48.960 --> 00:00:49.590 align:start position:0%
efficient versions of these data
structures

00:00:49.590 --> 00:00:49.600 align:start position:0%
structures
 

00:00:49.600 --> 00:00:51.189 align:start position:0%
structures
along<00:00:49.920><c> with</c><00:00:50.160><c> data</c><00:00:50.480><c> structures</c><00:00:50.879><c> another</c>

00:00:51.189 --> 00:00:51.199 align:start position:0%
along with data structures another
 

00:00:51.199 --> 00:00:52.709 align:start position:0%
along with data structures another
really<00:00:51.440><c> important</c><00:00:52.079><c> part</c><00:00:52.399><c> of</c>

00:00:52.709 --> 00:00:52.719 align:start position:0%
really important part of
 

00:00:52.719 --> 00:00:55.029 align:start position:0%
really important part of
programming<00:00:53.440><c> is</c><00:00:53.680><c> of</c><00:00:53.760><c> course</c><00:00:54.079><c> the</c><00:00:54.320><c> patterns</c><00:00:54.879><c> or</c>

00:00:55.029 --> 00:00:55.039 align:start position:0%
programming is of course the patterns or
 

00:00:55.039 --> 00:00:56.150 align:start position:0%
programming is of course the patterns or
the<00:00:55.199><c> algorithms</c>

00:00:56.150 --> 00:00:56.160 align:start position:0%
the algorithms
 

00:00:56.160 --> 00:00:58.630 align:start position:0%
the algorithms
that<00:00:56.399><c> will</c><00:00:56.719><c> operate</c><00:00:57.440><c> upon</c><00:00:57.680><c> the</c><00:00:57.840><c> data</c><00:00:58.239><c> inside</c>

00:00:58.630 --> 00:00:58.640 align:start position:0%
that will operate upon the data inside
 

00:00:58.640 --> 00:00:59.990 align:start position:0%
that will operate upon the data inside
these<00:00:58.800><c> data</c><00:00:59.039><c> structures</c><00:00:59.520><c> and</c><00:00:59.600><c> that's</c><00:00:59.840><c> stuff</c>

00:00:59.990 --> 00:01:00.000 align:start position:0%
these data structures and that's stuff
 

00:01:00.000 --> 00:01:01.510 align:start position:0%
these data structures and that's stuff
that<00:01:00.160><c> we'll</c><00:01:00.320><c> be</c><00:01:00.399><c> covering</c><00:01:00.879><c> as</c><00:01:00.960><c> part</c><00:01:01.199><c> of</c><00:01:01.280><c> this</c>

00:01:01.510 --> 00:01:01.520 align:start position:0%
that we'll be covering as part of this
 

00:01:01.520 --> 00:01:02.150 align:start position:0%
that we'll be covering as part of this
series

00:01:02.150 --> 00:01:02.160 align:start position:0%
series
 

00:01:02.160 --> 00:01:03.750 align:start position:0%
series
a<00:01:02.320><c> little</c><00:01:02.480><c> bit</c><00:01:02.719><c> later</c><00:01:03.120><c> on</c><00:01:03.359><c> so</c><00:01:03.440><c> today</c><00:01:03.680><c> we're</c>

00:01:03.750 --> 00:01:03.760 align:start position:0%
a little bit later on so today we're
 

00:01:03.760 --> 00:01:04.950 align:start position:0%
a little bit later on so today we're
going<00:01:03.840><c> to</c><00:01:03.920><c> be</c><00:01:04.000><c> starting</c><00:01:04.239><c> with</c><00:01:04.400><c> talking</c><00:01:04.720><c> about</c>

00:01:04.950 --> 00:01:04.960 align:start position:0%
going to be starting with talking about
 

00:01:04.960 --> 00:01:05.670 align:start position:0%
going to be starting with talking about
arrays

00:01:05.670 --> 00:01:05.680 align:start position:0%
arrays
 

00:01:05.680 --> 00:01:07.109 align:start position:0%
arrays
and<00:01:05.840><c> we're</c><00:01:06.000><c> going</c><00:01:06.159><c> to</c><00:01:06.240><c> be</c><00:01:06.400><c> creating</c><00:01:06.720><c> a</c><00:01:06.880><c> very</c>

00:01:07.109 --> 00:01:07.119 align:start position:0%
and we're going to be creating a very
 

00:01:07.119 --> 00:01:09.270 align:start position:0%
and we're going to be creating a very
very<00:01:07.360><c> simple</c><00:01:08.080><c> array</c><00:01:08.560><c> just</c><00:01:08.799><c> a</c>

00:01:09.270 --> 00:01:09.280 align:start position:0%
very simple array just a
 

00:01:09.280 --> 00:01:11.910 align:start position:0%
very simple array just a
static<00:01:09.840><c> kind</c><00:01:10.080><c> of</c><00:01:10.400><c> stack</c><00:01:10.880><c> allocated</c><00:01:11.439><c> fixed</c>

00:01:11.910 --> 00:01:11.920 align:start position:0%
static kind of stack allocated fixed
 

00:01:11.920 --> 00:01:12.710 align:start position:0%
static kind of stack allocated fixed
size

00:01:12.710 --> 00:01:12.720 align:start position:0%
size
 

00:01:12.720 --> 00:01:15.510 align:start position:0%
size
array<00:01:13.200><c> something</c><00:01:13.680><c> that</c><00:01:14.000><c> can</c><00:01:14.240><c> hold</c><00:01:15.040><c> a</c><00:01:15.200><c> certain</c>

00:01:15.510 --> 00:01:15.520 align:start position:0%
array something that can hold a certain
 

00:01:15.520 --> 00:01:18.310 align:start position:0%
array something that can hold a certain
amount<00:01:15.840><c> of</c><00:01:16.080><c> elements</c><00:01:16.560><c> of</c><00:01:16.720><c> data</c><00:01:17.040><c> contiguously</c>

00:01:18.310 --> 00:01:18.320 align:start position:0%
amount of elements of data contiguously
 

00:01:18.320 --> 00:01:20.230 align:start position:0%
amount of elements of data contiguously
and<00:01:18.560><c> something</c><00:01:18.880><c> that</c><00:01:19.119><c> will</c><00:01:19.280><c> be</c><00:01:19.520><c> easy</c><00:01:19.840><c> for</c><00:01:20.080><c> us</c>

00:01:20.230 --> 00:01:20.240 align:start position:0%
and something that will be easy for us
 

00:01:20.240 --> 00:01:21.910 align:start position:0%
and something that will be easy for us
to<00:01:20.400><c> interface</c><00:01:20.960><c> with</c><00:01:21.200><c> and</c><00:01:21.360><c> use</c>

00:01:21.910 --> 00:01:21.920 align:start position:0%
to interface with and use
 

00:01:21.920 --> 00:01:24.630 align:start position:0%
to interface with and use
as<00:01:22.159><c> a</c><00:01:22.320><c> programmer</c><00:01:23.040><c> using</c><00:01:23.600><c> that</c><00:01:23.920><c> array</c><00:01:24.320><c> this</c><00:01:24.479><c> is</c>

00:01:24.630 --> 00:01:24.640 align:start position:0%
as a programmer using that array this is
 

00:01:24.640 --> 00:01:25.990 align:start position:0%
as a programmer using that array this is
basically<00:01:24.960><c> going</c><00:01:25.119><c> to</c><00:01:25.280><c> be</c><00:01:25.439><c> the</c><00:01:25.600><c> standard</c>

00:01:25.990 --> 00:01:26.000 align:start position:0%
basically going to be the standard
 

00:01:26.000 --> 00:01:27.670 align:start position:0%
basically going to be the standard
array<00:01:26.240><c> class</c><00:01:26.560><c> that</c><00:01:26.720><c> is</c><00:01:26.799><c> provided</c><00:01:27.119><c> to</c><00:01:27.280><c> us</c><00:01:27.439><c> by</c>

00:01:27.670 --> 00:01:27.680 align:start position:0%
array class that is provided to us by
 

00:01:27.680 --> 00:01:29.749 align:start position:0%
array class that is provided to us by
the<00:01:27.759><c> stl</c><00:01:28.400><c> in</c><00:01:28.560><c> my</c><00:01:28.799><c> experience</c><00:01:29.280><c> looking</c><00:01:29.600><c> through</c>

00:01:29.749 --> 00:01:29.759 align:start position:0%
the stl in my experience looking through
 

00:01:29.759 --> 00:01:31.270 align:start position:0%
the stl in my experience looking through
people's<00:01:30.079><c> code</c><00:01:30.320><c> particularly</c><00:01:30.799><c> people</c><00:01:31.040><c> who</c>

00:01:31.270 --> 00:01:31.280 align:start position:0%
people's code particularly people who
 

00:01:31.280 --> 00:01:31.670 align:start position:0%
people's code particularly people who
are

00:01:31.670 --> 00:01:31.680 align:start position:0%
are
 

00:01:31.680 --> 00:01:32.950 align:start position:0%
are
quite<00:01:31.920><c> new</c><00:01:32.079><c> to</c><00:01:32.240><c> language</c><00:01:32.560><c> or</c><00:01:32.640><c> learning</c><00:01:32.880><c> the</c>

00:01:32.950 --> 00:01:32.960 align:start position:0%
quite new to language or learning the
 

00:01:32.960 --> 00:01:34.550 align:start position:0%
quite new to language or learning the
language<00:01:33.280><c> even</c><00:01:33.520><c> some</c><00:01:33.759><c> people</c><00:01:34.079><c> who</c><00:01:34.320><c> have</c><00:01:34.400><c> been</c>

00:01:34.550 --> 00:01:34.560 align:start position:0%
language even some people who have been
 

00:01:34.560 --> 00:01:36.469 align:start position:0%
language even some people who have been
using<00:01:34.799><c> the</c><00:01:34.880><c> language</c><00:01:35.200><c> for</c><00:01:35.360><c> a</c><00:01:35.520><c> long</c><00:01:35.759><c> time</c>

00:01:36.469 --> 00:01:36.479 align:start position:0%
using the language for a long time
 

00:01:36.479 --> 00:01:38.870 align:start position:0%
using the language for a long time
this<00:01:36.799><c> is</c><00:01:37.040><c> not</c><00:01:37.280><c> something</c><00:01:37.920><c> that</c><00:01:38.240><c> a</c><00:01:38.400><c> lot</c><00:01:38.640><c> of</c>

00:01:38.870 --> 00:01:38.880 align:start position:0%
this is not something that a lot of
 

00:01:38.880 --> 00:01:40.710 align:start position:0%
this is not something that a lot of
people<00:01:39.360><c> use</c><00:01:39.680><c> a</c><00:01:39.840><c> lot</c><00:01:40.000><c> of</c><00:01:40.079><c> people</c><00:01:40.320><c> jump</c><00:01:40.560><c> into</c>

00:01:40.710 --> 00:01:40.720 align:start position:0%
people use a lot of people jump into
 

00:01:40.720 --> 00:01:41.670 align:start position:0%
people use a lot of people jump into
using<00:01:41.040><c> vectors</c>

00:01:41.670 --> 00:01:41.680 align:start position:0%
using vectors
 

00:01:41.680 --> 00:01:43.590 align:start position:0%
using vectors
straight<00:01:41.920><c> away</c><00:01:42.640><c> because</c><00:01:42.960><c> they're</c><00:01:43.119><c> dynamic</c>

00:01:43.590 --> 00:01:43.600 align:start position:0%
straight away because they're dynamic
 

00:01:43.600 --> 00:01:45.270 align:start position:0%
straight away because they're dynamic
they're<00:01:43.759><c> resizable</c><00:01:44.479><c> they're</c><00:01:44.720><c> great</c><00:01:45.040><c> aren't</c>

00:01:45.270 --> 00:01:45.280 align:start position:0%
they're resizable they're great aren't
 

00:01:45.280 --> 00:01:45.910 align:start position:0%
they're resizable they're great aren't
they

00:01:45.910 --> 00:01:45.920 align:start position:0%
they
 

00:01:45.920 --> 00:01:48.469 align:start position:0%
they
well<00:01:46.159><c> they</c><00:01:46.479><c> are</c><00:01:46.880><c> but</c><00:01:47.280><c> they're</c><00:01:47.600><c> also</c><00:01:47.920><c> allocated</c>

00:01:48.469 --> 00:01:48.479 align:start position:0%
well they are but they're also allocated
 

00:01:48.479 --> 00:01:49.990 align:start position:0%
well they are but they're also allocated
on<00:01:48.560><c> the</c><00:01:48.720><c> heap</c><00:01:49.040><c> and</c><00:01:49.200><c> that</c><00:01:49.280><c> can</c><00:01:49.439><c> tremendously</c>

00:01:49.990 --> 00:01:50.000 align:start position:0%
on the heap and that can tremendously
 

00:01:50.000 --> 00:01:52.069 align:start position:0%
on the heap and that can tremendously
slow<00:01:50.240><c> down</c><00:01:50.479><c> your</c><00:01:50.640><c> program</c><00:01:51.119><c> for</c><00:01:51.439><c> no</c><00:01:51.680><c> reason</c>

00:01:52.069 --> 00:01:52.079 align:start position:0%
slow down your program for no reason
 

00:01:52.079 --> 00:01:53.510 align:start position:0%
slow down your program for no reason
because<00:01:52.320><c> in</c><00:01:52.399><c> a</c><00:01:52.479><c> lot</c><00:01:52.640><c> of</c><00:01:52.799><c> cases</c>

00:01:53.510 --> 00:01:53.520 align:start position:0%
because in a lot of cases
 

00:01:53.520 --> 00:01:55.109 align:start position:0%
because in a lot of cases
you<00:01:53.759><c> could</c><00:01:53.920><c> have</c><00:01:54.000><c> gotten</c><00:01:54.320><c> away</c><00:01:54.560><c> with</c><00:01:54.720><c> using</c><00:01:55.040><c> a</c>

00:01:55.109 --> 00:01:55.119 align:start position:0%
you could have gotten away with using a
 

00:01:55.119 --> 00:01:56.709 align:start position:0%
you could have gotten away with using a
fixed<00:01:55.360><c> size</c><00:01:55.680><c> static</c><00:01:56.079><c> array</c>

00:01:56.709 --> 00:01:56.719 align:start position:0%
fixed size static array
 

00:01:56.719 --> 00:01:59.109 align:start position:0%
fixed size static array
no<00:01:56.960><c> problem</c><00:01:57.439><c> and</c><00:01:57.600><c> by</c><00:01:57.840><c> doing</c><00:01:58.159><c> so</c><00:01:58.560><c> in</c><00:01:58.719><c> the</c><00:01:58.880><c> right</c>

00:01:59.109 --> 00:01:59.119 align:start position:0%
no problem and by doing so in the right
 

00:01:59.119 --> 00:02:01.270 align:start position:0%
no problem and by doing so in the right
places<00:01:59.600><c> you</c><00:01:59.759><c> can</c><00:02:00.000><c> greatly</c><00:02:00.560><c> speed</c><00:02:00.960><c> up</c><00:02:01.119><c> the</c>

00:02:01.270 --> 00:02:01.280 align:start position:0%
places you can greatly speed up the
 

00:02:01.280 --> 00:02:02.230 align:start position:0%
places you can greatly speed up the
efficiency

00:02:02.230 --> 00:02:02.240 align:start position:0%
efficiency
 

00:02:02.240 --> 00:02:03.830 align:start position:0%
efficiency
of<00:02:02.399><c> your</c><00:02:02.640><c> program</c><00:02:03.119><c> so</c><00:02:03.280><c> i</c><00:02:03.360><c> think</c><00:02:03.600><c> this</c><00:02:03.759><c> is</c>

00:02:03.830 --> 00:02:03.840 align:start position:0%
of your program so i think this is
 

00:02:03.840 --> 00:02:05.350 align:start position:0%
of your program so i think this is
definitely<00:02:04.079><c> something</c><00:02:04.399><c> that</c><00:02:04.479><c> you</c><00:02:04.799><c> should</c><00:02:05.040><c> not</c>

00:02:05.350 --> 00:02:05.360 align:start position:0%
definitely something that you should not
 

00:02:05.360 --> 00:02:07.670 align:start position:0%
definitely something that you should not
underestimate<00:02:06.079><c> and</c><00:02:06.240><c> later</c><00:02:06.560><c> when</c><00:02:06.719><c> we</c><00:02:06.880><c> get</c><00:02:07.040><c> into</c>

00:02:07.670 --> 00:02:07.680 align:start position:0%
underestimate and later when we get into
 

00:02:07.680 --> 00:02:08.869 align:start position:0%
underestimate and later when we get into
algorithms<00:02:08.479><c> and</c>

00:02:08.869 --> 00:02:08.879 align:start position:0%
algorithms and
 

00:02:08.879 --> 00:02:11.029 align:start position:0%
algorithms and
stuff<00:02:09.200><c> like</c><00:02:09.440><c> search</c><00:02:09.840><c> algorithms</c><00:02:10.560><c> we</c><00:02:10.720><c> can</c>

00:02:11.029 --> 00:02:11.039 align:start position:0%
stuff like search algorithms we can
 

00:02:11.039 --> 00:02:12.550 align:start position:0%
stuff like search algorithms we can
greatly<00:02:11.440><c> improve</c><00:02:11.760><c> the</c><00:02:11.840><c> performance</c><00:02:12.319><c> of</c><00:02:12.480><c> our</c>

00:02:12.550 --> 00:02:12.560 align:start position:0%
greatly improve the performance of our
 

00:02:12.560 --> 00:02:13.270 align:start position:0%
greatly improve the performance of our
program

00:02:13.270 --> 00:02:13.280 align:start position:0%
program
 

00:02:13.280 --> 00:02:15.750 align:start position:0%
program
by<00:02:13.520><c> keeping</c><00:02:13.840><c> our</c><00:02:14.000><c> memory</c><00:02:14.640><c> local</c><00:02:15.120><c> on</c><00:02:15.200><c> the</c><00:02:15.360><c> stack</c>

00:02:15.750 --> 00:02:15.760 align:start position:0%
by keeping our memory local on the stack
 

00:02:15.760 --> 00:02:17.750 align:start position:0%
by keeping our memory local on the stack
instead<00:02:16.000><c> of</c><00:02:16.160><c> continually</c><00:02:16.720><c> going</c><00:02:16.959><c> to</c><00:02:17.120><c> the</c><00:02:17.200><c> heap</c>

00:02:17.750 --> 00:02:17.760 align:start position:0%
instead of continually going to the heap
 

00:02:17.760 --> 00:02:19.350 align:start position:0%
instead of continually going to the heap
as<00:02:18.000><c> you'll</c><00:02:18.160><c> see</c><00:02:18.400><c> in</c><00:02:18.480><c> the</c><00:02:18.640><c> future</c><00:02:18.959><c> but</c><00:02:19.120><c> first</c>

00:02:19.350 --> 00:02:19.360 align:start position:0%
as you'll see in the future but first
 

00:02:19.360 --> 00:02:20.949 align:start position:0%
as you'll see in the future but first
before<00:02:19.599><c> we</c><00:02:19.760><c> jump</c><00:02:20.000><c> into</c><00:02:20.319><c> actually</c><00:02:20.640><c> writing</c>

00:02:20.949 --> 00:02:20.959 align:start position:0%
before we jump into actually writing
 

00:02:20.959 --> 00:02:21.430 align:start position:0%
before we jump into actually writing
this

00:02:21.430 --> 00:02:21.440 align:start position:0%
this
 

00:02:21.440 --> 00:02:23.110 align:start position:0%
this
i<00:02:21.599><c> want</c><00:02:21.840><c> to</c><00:02:22.080><c> thank</c><00:02:22.319><c> skillshare</c><00:02:22.959><c> for</c>

00:02:23.110 --> 00:02:23.120 align:start position:0%
i want to thank skillshare for
 

00:02:23.120 --> 00:02:24.710 align:start position:0%
i want to thank skillshare for
sponsoring<00:02:23.680><c> this</c><00:02:23.920><c> video</c>

00:02:24.710 --> 00:02:24.720 align:start position:0%
sponsoring this video
 

00:02:24.720 --> 00:02:26.150 align:start position:0%
sponsoring this video
i've<00:02:24.959><c> been</c><00:02:25.040><c> working</c><00:02:25.280><c> with</c><00:02:25.440><c> skillshare</c><00:02:26.000><c> for</c>

00:02:26.150 --> 00:02:26.160 align:start position:0%
i've been working with skillshare for
 

00:02:26.160 --> 00:02:27.350 align:start position:0%
i've been working with skillshare for
quite<00:02:26.400><c> a</c><00:02:26.480><c> while</c><00:02:26.720><c> in</c><00:02:26.800><c> this</c><00:02:26.959><c> channel</c><00:02:27.200><c> as</c><00:02:27.280><c> you've</c>

00:02:27.350 --> 00:02:27.360 align:start position:0%
quite a while in this channel as you've
 

00:02:27.360 --> 00:02:29.030 align:start position:0%
quite a while in this channel as you've
probably<00:02:27.680><c> noticed</c><00:02:28.000><c> because</c><00:02:28.400><c> i</c><00:02:28.560><c> think</c><00:02:28.800><c> it's</c><00:02:28.959><c> a</c>

00:02:29.030 --> 00:02:29.040 align:start position:0%
probably noticed because i think it's a
 

00:02:29.040 --> 00:02:30.790 align:start position:0%
probably noticed because i think it's a
really<00:02:29.360><c> great</c><00:02:29.599><c> platform</c><00:02:30.160><c> it's</c><00:02:30.319><c> a</c><00:02:30.400><c> platform</c>

00:02:30.790 --> 00:02:30.800 align:start position:0%
really great platform it's a platform
 

00:02:30.800 --> 00:02:33.670 align:start position:0%
really great platform it's a platform
where<00:02:31.040><c> you</c><00:02:31.200><c> can</c><00:02:31.440><c> go</c><00:02:31.680><c> to</c><00:02:32.000><c> to</c><00:02:32.239><c> learn</c><00:02:32.560><c> a</c><00:02:32.720><c> new</c><00:02:32.959><c> skill</c>

00:02:33.670 --> 00:02:33.680 align:start position:0%
where you can go to to learn a new skill
 

00:02:33.680 --> 00:02:35.350 align:start position:0%
where you can go to to learn a new skill
and<00:02:33.840><c> it's</c><00:02:34.000><c> especially</c><00:02:34.560><c> useful</c><00:02:34.959><c> when</c><00:02:35.200><c> you</c>

00:02:35.350 --> 00:02:35.360 align:start position:0%
and it's especially useful when you
 

00:02:35.360 --> 00:02:37.430 align:start position:0%
and it's especially useful when you
don't<00:02:35.599><c> have</c><00:02:35.920><c> a</c><00:02:36.080><c> lot</c><00:02:36.319><c> of</c><00:02:36.560><c> time</c><00:02:36.959><c> the</c><00:02:37.120><c> thing</c><00:02:37.280><c> is</c>

00:02:37.430 --> 00:02:37.440 align:start position:0%
don't have a lot of time the thing is
 

00:02:37.440 --> 00:02:39.430 align:start position:0%
don't have a lot of time the thing is
skillshare<00:02:38.000><c> has</c><00:02:38.239><c> a</c><00:02:38.319><c> lot</c><00:02:38.560><c> of</c><00:02:38.720><c> courses</c><00:02:39.200><c> they</c>

00:02:39.430 --> 00:02:39.440 align:start position:0%
skillshare has a lot of courses they
 

00:02:39.440 --> 00:02:40.150 align:start position:0%
skillshare has a lot of courses they
have

00:02:40.150 --> 00:02:40.160 align:start position:0%
have
 

00:02:40.160 --> 00:02:42.070 align:start position:0%
have
they<00:02:40.319><c> have</c><00:02:40.720><c> courses</c><00:02:41.280><c> on</c><00:02:41.599><c> pretty</c><00:02:41.840><c> much</c>

00:02:42.070 --> 00:02:42.080 align:start position:0%
they have courses on pretty much
 

00:02:42.080 --> 00:02:43.830 align:start position:0%
they have courses on pretty much
anything<00:02:42.480><c> you</c><00:02:42.640><c> can</c><00:02:42.800><c> think</c><00:02:43.120><c> of</c><00:02:43.360><c> and</c><00:02:43.519><c> they're</c>

00:02:43.830 --> 00:02:43.840 align:start position:0%
anything you can think of and they're
 

00:02:43.840 --> 00:02:46.390 align:start position:0%
anything you can think of and they're
all<00:02:44.080><c> really</c><00:02:44.400><c> concise</c><00:02:45.040><c> and</c><00:02:45.280><c> well</c><00:02:45.599><c> put</c><00:02:45.840><c> together</c>

00:02:46.390 --> 00:02:46.400 align:start position:0%
all really concise and well put together
 

00:02:46.400 --> 00:02:47.830 align:start position:0%
all really concise and well put together
and<00:02:46.480><c> they</c><00:02:46.640><c> don't</c><00:02:46.879><c> contain</c><00:02:47.360><c> a</c><00:02:47.440><c> lot</c><00:02:47.599><c> of</c><00:02:47.680><c> flop</c>

00:02:47.830 --> 00:02:47.840 align:start position:0%
and they don't contain a lot of flop
 

00:02:47.840 --> 00:02:49.430 align:start position:0%
and they don't contain a lot of flop
they<00:02:48.000><c> don't</c><00:02:48.239><c> waste</c><00:02:48.560><c> your</c><00:02:48.879><c> time</c><00:02:49.120><c> they</c><00:02:49.280><c> just</c>

00:02:49.430 --> 00:02:49.440 align:start position:0%
they don't waste your time they just
 

00:02:49.440 --> 00:02:51.350 align:start position:0%
they don't waste your time they just
teach<00:02:49.680><c> you</c><00:02:49.920><c> what</c><00:02:50.080><c> you</c><00:02:50.239><c> need</c><00:02:50.480><c> to</c><00:02:50.640><c> know</c>

00:02:51.350 --> 00:02:51.360 align:start position:0%
teach you what you need to know
 

00:02:51.360 --> 00:02:53.750 align:start position:0%
teach you what you need to know
and<00:02:51.920><c> usually</c><00:02:52.480><c> they're</c><00:02:52.879><c> extremely</c><00:02:53.519><c> high</c>

00:02:53.750 --> 00:02:53.760 align:start position:0%
and usually they're extremely high
 

00:02:53.760 --> 00:02:55.750 align:start position:0%
and usually they're extremely high
quality<00:02:54.160><c> i</c><00:02:54.239><c> love</c><00:02:54.400><c> the</c><00:02:54.560><c> fact</c><00:02:54.800><c> that</c><00:02:54.959><c> skillshare</c>

00:02:55.750 --> 00:02:55.760 align:start position:0%
quality i love the fact that skillshare
 

00:02:55.760 --> 00:02:58.309 align:start position:0%
quality i love the fact that skillshare
has<00:02:56.000><c> a</c><00:02:56.160><c> lot</c><00:02:56.400><c> of</c><00:02:56.800><c> videos</c><00:02:57.360><c> about</c><00:02:57.760><c> things</c><00:02:58.080><c> like</c>

00:02:58.309 --> 00:02:58.319 align:start position:0%
has a lot of videos about things like
 

00:02:58.319 --> 00:02:59.990 align:start position:0%
has a lot of videos about things like
productivity<00:02:59.120><c> things</c><00:02:59.360><c> like</c>

00:02:59.990 --> 00:03:00.000 align:start position:0%
productivity things like
 

00:03:00.000 --> 00:03:01.910 align:start position:0%
productivity things like
marketing<00:03:00.560><c> i</c><00:03:00.720><c> love</c><00:03:00.959><c> their</c><00:03:01.200><c> art</c><00:03:01.440><c> related</c>

00:03:01.910 --> 00:03:01.920 align:start position:0%
marketing i love their art related
 

00:03:01.920 --> 00:03:03.350 align:start position:0%
marketing i love their art related
courses<00:03:02.319><c> and</c><00:03:02.480><c> especially</c>

00:03:03.350 --> 00:03:03.360 align:start position:0%
courses and especially
 

00:03:03.360 --> 00:03:06.070 align:start position:0%
courses and especially
this<00:03:03.680><c> one</c><00:03:04.080><c> about</c><00:03:04.560><c> how</c><00:03:04.800><c> you</c><00:03:04.959><c> can</c><00:03:05.280><c> relax</c><00:03:05.920><c> and</c>

00:03:06.070 --> 00:03:06.080 align:start position:0%
this one about how you can relax and
 

00:03:06.080 --> 00:03:07.509 align:start position:0%
this one about how you can relax and
just<00:03:06.319><c> take</c><00:03:06.560><c> a</c><00:03:06.720><c> break</c>

00:03:07.509 --> 00:03:07.519 align:start position:0%
just take a break
 

00:03:07.519 --> 00:03:09.830 align:start position:0%
just take a break
with<00:03:07.840><c> art</c><00:03:08.239><c> sometimes</c><00:03:08.720><c> the</c><00:03:08.879><c> programming</c><00:03:09.440><c> gets</c>

00:03:09.830 --> 00:03:09.840 align:start position:0%
with art sometimes the programming gets
 

00:03:09.840 --> 00:03:11.430 align:start position:0%
with art sometimes the programming gets
overwhelming<00:03:10.560><c> sometimes</c><00:03:11.040><c> you</c><00:03:11.200><c> don't</c>

00:03:11.430 --> 00:03:11.440 align:start position:0%
overwhelming sometimes you don't
 

00:03:11.440 --> 00:03:13.350 align:start position:0%
overwhelming sometimes you don't
understand<00:03:12.000><c> something</c><00:03:12.400><c> and</c><00:03:12.560><c> being</c><00:03:12.800><c> able</c><00:03:13.040><c> to</c>

00:03:13.350 --> 00:03:13.360 align:start position:0%
understand something and being able to
 

00:03:13.360 --> 00:03:15.589 align:start position:0%
understand something and being able to
find<00:03:14.000><c> a</c><00:03:14.319><c> different</c><00:03:14.720><c> creative</c><00:03:15.200><c> medium</c><00:03:15.519><c> in</c>

00:03:15.589 --> 00:03:15.599 align:start position:0%
find a different creative medium in
 

00:03:15.599 --> 00:03:17.910 align:start position:0%
find a different creative medium in
which<00:03:15.760><c> to</c><00:03:15.920><c> express</c><00:03:16.239><c> yourself</c><00:03:16.480><c> and</c><00:03:16.640><c> also</c><00:03:16.879><c> relax</c>

00:03:17.910 --> 00:03:17.920 align:start position:0%
which to express yourself and also relax
 

00:03:17.920 --> 00:03:18.470 align:start position:0%
which to express yourself and also relax
i<00:03:18.080><c> think</c>

00:03:18.470 --> 00:03:18.480 align:start position:0%
i think
 

00:03:18.480 --> 00:03:20.949 align:start position:0%
i think
is<00:03:18.800><c> really</c><00:03:19.360><c> really</c><00:03:19.760><c> cool</c><00:03:20.080><c> skillshare</c><00:03:20.720><c> comes</c>

00:03:20.949 --> 00:03:20.959 align:start position:0%
is really really cool skillshare comes
 

00:03:20.959 --> 00:03:22.790 align:start position:0%
is really really cool skillshare comes
in<00:03:21.120><c> at</c><00:03:21.280><c> less</c><00:03:21.440><c> than</c><00:03:21.680><c> ten</c><00:03:21.920><c> dollars</c><00:03:22.319><c> per</c><00:03:22.480><c> month</c>

00:03:22.790 --> 00:03:22.800 align:start position:0%
in at less than ten dollars per month
 

00:03:22.800 --> 00:03:24.309 align:start position:0%
in at less than ten dollars per month
for<00:03:22.959><c> an</c><00:03:23.120><c> annual</c><00:03:23.360><c> subscription</c>

00:03:24.309 --> 00:03:24.319 align:start position:0%
for an annual subscription
 

00:03:24.319 --> 00:03:26.550 align:start position:0%
for an annual subscription
and<00:03:24.480><c> the</c><00:03:24.640><c> first</c><00:03:25.040><c> 1000</c><00:03:25.599><c> people</c><00:03:25.920><c> who</c><00:03:26.159><c> sign</c><00:03:26.400><c> up</c>

00:03:26.550 --> 00:03:26.560 align:start position:0%
and the first 1000 people who sign up
 

00:03:26.560 --> 00:03:28.470 align:start position:0%
and the first 1000 people who sign up
using<00:03:26.879><c> my</c><00:03:27.120><c> link</c><00:03:27.440><c> in</c><00:03:27.519><c> the</c><00:03:27.599><c> description</c><00:03:28.080><c> below</c>

00:03:28.470 --> 00:03:28.480 align:start position:0%
using my link in the description below
 

00:03:28.480 --> 00:03:29.509 align:start position:0%
using my link in the description below
of<00:03:28.640><c> this</c><00:03:28.799><c> video</c>

00:03:29.509 --> 00:03:29.519 align:start position:0%
of this video
 

00:03:29.519 --> 00:03:32.550 align:start position:0%
of this video
will<00:03:29.760><c> get</c><00:03:30.159><c> two</c><00:03:30.400><c> months</c><00:03:31.040><c> of</c><00:03:31.280><c> free</c><00:03:31.840><c> skillshare</c>

00:03:32.550 --> 00:03:32.560 align:start position:0%
will get two months of free skillshare
 

00:03:32.560 --> 00:03:35.270 align:start position:0%
will get two months of free skillshare
premium<00:03:33.040><c> that's</c><00:03:33.360><c> two</c><00:03:33.840><c> months</c><00:03:34.560><c> to</c><00:03:34.879><c> learn</c>

00:03:35.270 --> 00:03:35.280 align:start position:0%
premium that's two months to learn
 

00:03:35.280 --> 00:03:36.149 align:start position:0%
premium that's two months to learn
something

00:03:36.149 --> 00:03:36.159 align:start position:0%
something
 

00:03:36.159 --> 00:03:37.270 align:start position:0%
something
you<00:03:36.319><c> should</c><00:03:36.480><c> be</c><00:03:36.640><c> able</c><00:03:36.799><c> to</c><00:03:36.879><c> learn</c><00:03:37.040><c> a</c><00:03:37.120><c> lot</c><00:03:37.200><c> of</c>

00:03:37.270 --> 00:03:37.280 align:start position:0%
you should be able to learn a lot of
 

00:03:37.280 --> 00:03:38.789 align:start position:0%
you should be able to learn a lot of
things<00:03:37.519><c> in</c><00:03:37.599><c> those</c><00:03:37.760><c> two</c><00:03:37.920><c> months</c><00:03:38.239><c> and</c><00:03:38.319><c> i</c><00:03:38.400><c> expect</c>

00:03:38.789 --> 00:03:38.799 align:start position:0%
things in those two months and i expect
 

00:03:38.799 --> 00:03:40.470 align:start position:0%
things in those two months and i expect
you<00:03:38.959><c> to</c><00:03:39.200><c> so</c><00:03:39.360><c> thank</c><00:03:39.519><c> you</c><00:03:39.680><c> skillshare</c><00:03:40.239><c> once</c>

00:03:40.470 --> 00:03:40.480 align:start position:0%
you to so thank you skillshare once
 

00:03:40.480 --> 00:03:42.149 align:start position:0%
you to so thank you skillshare once
again<00:03:40.799><c> for</c><00:03:40.959><c> sponsoring</c><00:03:41.519><c> this</c><00:03:41.680><c> video</c><00:03:42.000><c> and</c>

00:03:42.149 --> 00:03:42.159 align:start position:0%
again for sponsoring this video and
 

00:03:42.159 --> 00:03:43.589 align:start position:0%
again for sponsoring this video and
hooking<00:03:42.560><c> you</c><00:03:42.720><c> guys</c><00:03:43.040><c> up</c>

00:03:43.589 --> 00:03:43.599 align:start position:0%
hooking you guys up
 

00:03:43.599 --> 00:03:45.670 align:start position:0%
hooking you guys up
with<00:03:43.840><c> some</c><00:03:44.159><c> free</c><00:03:44.480><c> learning</c><00:03:44.959><c> if</c><00:03:45.040><c> you</c><00:03:45.200><c> need</c><00:03:45.519><c> to</c>

00:03:45.670 --> 00:03:45.680 align:start position:0%
with some free learning if you need to
 

00:03:45.680 --> 00:03:47.430 align:start position:0%
with some free learning if you need to
learn<00:03:46.080><c> something</c><00:03:46.560><c> other</c><00:03:46.799><c> than</c><00:03:47.040><c> c</c>

00:03:47.430 --> 00:03:47.440 align:start position:0%
learn something other than c
 

00:03:47.440 --> 00:03:49.509 align:start position:0%
learn something other than c
plus<00:03:47.680><c> or</c><00:03:47.840><c> programming</c><00:03:48.720><c> definitely</c><00:03:49.120><c> check</c><00:03:49.360><c> out</c>

00:03:49.509 --> 00:03:49.519 align:start position:0%
plus or programming definitely check out
 

00:03:49.519 --> 00:03:50.869 align:start position:0%
plus or programming definitely check out
skillshare<00:03:50.080><c> in</c><00:03:50.239><c> the</c><00:03:50.319><c> description</c>

00:03:50.869 --> 00:03:50.879 align:start position:0%
skillshare in the description
 

00:03:50.879 --> 00:03:52.630 align:start position:0%
skillshare in the description
below<00:03:51.360><c> and</c><00:03:51.519><c> speaking</c><00:03:51.840><c> of</c><00:03:52.000><c> learning</c><00:03:52.400><c> let's</c>

00:03:52.630 --> 00:03:52.640 align:start position:0%
below and speaking of learning let's
 

00:03:52.640 --> 00:03:53.990 align:start position:0%
below and speaking of learning let's
learn<00:03:52.959><c> how</c><00:03:53.120><c> to</c><00:03:53.360><c> write</c><00:03:53.680><c> a</c>

00:03:53.990 --> 00:03:54.000 align:start position:0%
learn how to write a
 

00:03:54.000 --> 00:03:56.869 align:start position:0%
learn how to write a
fixed<00:03:54.480><c> size</c><00:03:54.959><c> stack</c><00:03:55.360><c> allocated</c><00:03:56.000><c> array</c><00:03:56.560><c> data</c>

00:03:56.869 --> 00:03:56.879 align:start position:0%
fixed size stack allocated array data
 

00:03:56.879 --> 00:03:57.429 align:start position:0%
fixed size stack allocated array data
structure

00:03:57.429 --> 00:03:57.439 align:start position:0%
structure
 

00:03:57.439 --> 00:03:59.910 align:start position:0%
structure
in<00:03:57.760><c> c</c><00:03:58.319><c> plus</c><00:03:58.799><c> so</c><00:03:58.959><c> just</c><00:03:59.120><c> to</c><00:03:59.200><c> be</c><00:03:59.360><c> clear</c><00:03:59.599><c> here</c><00:03:59.760><c> what</c>

00:03:59.910 --> 00:03:59.920 align:start position:0%
in c plus so just to be clear here what
 

00:03:59.920 --> 00:04:00.949 align:start position:0%
in c plus so just to be clear here what
we're<00:04:00.080><c> trying</c><00:04:00.319><c> to</c><00:04:00.480><c> create</c>

00:04:00.949 --> 00:04:00.959 align:start position:0%
we're trying to create
 

00:04:00.959 --> 00:04:03.030 align:start position:0%
we're trying to create
is<00:04:01.120><c> a</c><00:04:01.360><c> stack</c><00:04:01.760><c> allocated</c><00:04:02.319><c> array</c><00:04:02.640><c> that</c><00:04:02.720><c> means</c><00:04:02.959><c> an</c>

00:04:03.030 --> 00:04:03.040 align:start position:0%
is a stack allocated array that means an
 

00:04:03.040 --> 00:04:05.190 align:start position:0%
is a stack allocated array that means an
array<00:04:03.360><c> that</c><00:04:03.599><c> exists</c><00:04:04.080><c> on</c><00:04:04.159><c> the</c><00:04:04.319><c> stack</c><00:04:04.799><c> not</c><00:04:05.040><c> the</c>

00:04:05.190 --> 00:04:05.200 align:start position:0%
array that exists on the stack not the
 

00:04:05.200 --> 00:04:05.830 align:start position:0%
array that exists on the stack not the
heap

00:04:05.830 --> 00:04:05.840 align:start position:0%
heap
 

00:04:05.840 --> 00:04:07.589 align:start position:0%
heap
let's<00:04:06.080><c> start</c><00:04:06.319><c> off</c><00:04:06.560><c> with</c><00:04:06.799><c> the</c><00:04:06.959><c> most</c><00:04:07.200><c> basic</c>

00:04:07.589 --> 00:04:07.599 align:start position:0%
let's start off with the most basic
 

00:04:07.599 --> 00:04:09.429 align:start position:0%
let's start off with the most basic
example<00:04:08.000><c> of</c><00:04:08.080><c> this</c><00:04:08.400><c> where</c><00:04:08.640><c> we</c><00:04:08.799><c> don't</c><00:04:09.040><c> have</c><00:04:09.360><c> a</c>

00:04:09.429 --> 00:04:09.439 align:start position:0%
example of this where we don't have a
 

00:04:09.439 --> 00:04:10.949 align:start position:0%
example of this where we don't have a
class<00:04:09.760><c> or</c><00:04:09.920><c> any</c><00:04:10.080><c> kind</c><00:04:10.159><c> of</c><00:04:10.239><c> helper</c><00:04:10.560><c> functions</c>

00:04:10.949 --> 00:04:10.959 align:start position:0%
class or any kind of helper functions
 

00:04:10.959 --> 00:04:11.830 align:start position:0%
class or any kind of helper functions
whatsoever

00:04:11.830 --> 00:04:11.840 align:start position:0%
whatsoever
 

00:04:11.840 --> 00:04:13.270 align:start position:0%
whatsoever
i'll<00:04:12.000><c> create</c><00:04:12.239><c> an</c><00:04:12.319><c> integer</c><00:04:12.720><c> array</c><00:04:12.959><c> here</c><00:04:13.120><c> i'll</c>

00:04:13.270 --> 00:04:13.280 align:start position:0%
i'll create an integer array here i'll
 

00:04:13.280 --> 00:04:14.710 align:start position:0%
i'll create an integer array here i'll
call<00:04:13.439><c> it</c><00:04:13.519><c> array</c><00:04:13.760><c> and</c><00:04:13.920><c> i'll</c><00:04:14.000><c> give</c><00:04:14.159><c> it</c><00:04:14.239><c> the</c><00:04:14.400><c> size</c>

00:04:14.710 --> 00:04:14.720 align:start position:0%
call it array and i'll give it the size
 

00:04:14.720 --> 00:04:15.589 align:start position:0%
call it array and i'll give it the size
of<00:04:14.959><c> five</c>

00:04:15.589 --> 00:04:15.599 align:start position:0%
of five
 

00:04:15.599 --> 00:04:17.110 align:start position:0%
of five
we<00:04:15.840><c> now</c><00:04:16.000><c> have</c><00:04:16.160><c> a</c><00:04:16.239><c> very</c><00:04:16.479><c> simple</c><00:04:16.799><c> stack</c>

00:04:17.110 --> 00:04:17.120 align:start position:0%
we now have a very simple stack
 

00:04:17.120 --> 00:04:19.590 align:start position:0%
we now have a very simple stack
allocated<00:04:17.680><c> array</c><00:04:18.320><c> this</c><00:04:18.639><c> is</c><00:04:18.880><c> what</c><00:04:19.120><c> forms</c><00:04:19.440><c> the</c>

00:04:19.590 --> 00:04:19.600 align:start position:0%
allocated array this is what forms the
 

00:04:19.600 --> 00:04:22.230 align:start position:0%
allocated array this is what forms the
basis<00:04:20.079><c> of</c><00:04:20.160><c> this</c><00:04:20.479><c> entire</c><00:04:21.040><c> data</c><00:04:21.440><c> structure</c>

00:04:22.230 --> 00:04:22.240 align:start position:0%
basis of this entire data structure
 

00:04:22.240 --> 00:04:23.909 align:start position:0%
basis of this entire data structure
a<00:04:22.400><c> heap</c><00:04:22.720><c> allocated</c><00:04:23.199><c> array</c><00:04:23.520><c> would</c><00:04:23.680><c> look</c>

00:04:23.909 --> 00:04:23.919 align:start position:0%
a heap allocated array would look
 

00:04:23.919 --> 00:04:25.590 align:start position:0%
a heap allocated array would look
something<00:04:24.240><c> like</c><00:04:24.479><c> this</c><00:04:24.720><c> i'll</c><00:04:24.880><c> call</c><00:04:25.120><c> it</c><00:04:25.199><c> heavy</c>

00:04:25.590 --> 00:04:25.600 align:start position:0%
something like this i'll call it heavy
 

00:04:25.600 --> 00:04:27.270 align:start position:0%
something like this i'll call it heavy
a<00:04:25.840><c> the</c><00:04:26.000><c> key</c><00:04:26.240><c> difference</c><00:04:26.639><c> here</c><00:04:26.880><c> is</c><00:04:26.960><c> that</c><00:04:27.040><c> we're</c>

00:04:27.270 --> 00:04:27.280 align:start position:0%
a the key difference here is that we're
 

00:04:27.280 --> 00:04:28.710 align:start position:0%
a the key difference here is that we're
actually<00:04:27.520><c> using</c><00:04:27.759><c> the</c><00:04:28.000><c> new</c><00:04:28.160><c> keyword</c><00:04:28.560><c> this</c>

00:04:28.710 --> 00:04:28.720 align:start position:0%
actually using the new keyword this
 

00:04:28.720 --> 00:04:30.150 align:start position:0%
actually using the new keyword this
means<00:04:28.960><c> that</c><00:04:29.040><c> this</c><00:04:29.199><c> memory</c><00:04:29.520><c> allocation</c>

00:04:30.150 --> 00:04:30.160 align:start position:0%
means that this memory allocation
 

00:04:30.160 --> 00:04:32.390 align:start position:0%
means that this memory allocation
occurs<00:04:30.560><c> on</c><00:04:30.639><c> the</c><00:04:30.800><c> heap</c><00:04:31.120><c> and</c><00:04:31.199><c> we're</c><00:04:31.360><c> explicitly</c>

00:04:32.390 --> 00:04:32.400 align:start position:0%
occurs on the heap and we're explicitly
 

00:04:32.400 --> 00:04:35.030 align:start position:0%
occurs on the heap and we're explicitly
using<00:04:32.880><c> a</c><00:04:33.040><c> pointer</c><00:04:33.600><c> to</c><00:04:33.840><c> address</c><00:04:34.240><c> it</c><00:04:34.479><c> that</c><00:04:34.720><c> part</c>

00:04:35.030 --> 00:04:35.040 align:start position:0%
using a pointer to address it that part
 

00:04:35.040 --> 00:04:36.710 align:start position:0%
using a pointer to address it that part
isn't<00:04:35.280><c> as</c><00:04:35.440><c> much</c><00:04:35.759><c> different</c><00:04:36.160><c> because</c><00:04:36.400><c> we</c><00:04:36.560><c> can</c>

00:04:36.710 --> 00:04:36.720 align:start position:0%
isn't as much different because we can
 

00:04:36.720 --> 00:04:37.909 align:start position:0%
isn't as much different because we can
also<00:04:36.960><c> use</c><00:04:37.199><c> a</c><00:04:37.280><c> pointer</c>

00:04:37.909 --> 00:04:37.919 align:start position:0%
also use a pointer
 

00:04:37.919 --> 00:04:39.510 align:start position:0%
also use a pointer
to<00:04:38.080><c> address</c><00:04:38.479><c> this</c><00:04:38.720><c> array</c><00:04:39.040><c> but</c><00:04:39.199><c> the</c><00:04:39.280><c> main</c>

00:04:39.510 --> 00:04:39.520 align:start position:0%
to address this array but the main
 

00:04:39.520 --> 00:04:40.710 align:start position:0%
to address this array but the main
difference<00:04:39.840><c> here</c><00:04:40.160><c> is</c><00:04:40.240><c> that</c><00:04:40.400><c> this</c><00:04:40.639><c> is</c>

00:04:40.710 --> 00:04:40.720 align:start position:0%
difference here is that this is
 

00:04:40.720 --> 00:04:42.150 align:start position:0%
difference here is that this is
allocated<00:04:41.360><c> on</c><00:04:41.440><c> the</c><00:04:41.600><c> heap</c>

00:04:42.150 --> 00:04:42.160 align:start position:0%
allocated on the heap
 

00:04:42.160 --> 00:04:44.070 align:start position:0%
allocated on the heap
as<00:04:42.400><c> such</c><00:04:42.880><c> it's</c><00:04:43.040><c> actually</c><00:04:43.440><c> possible</c><00:04:43.840><c> to</c>

00:04:44.070 --> 00:04:44.080 align:start position:0%
as such it's actually possible to
 

00:04:44.080 --> 00:04:45.909 align:start position:0%
as such it's actually possible to
dynamically<00:04:44.800><c> allocate</c><00:04:45.280><c> this</c><00:04:45.520><c> meaning</c><00:04:45.759><c> that</c>

00:04:45.909 --> 00:04:45.919 align:start position:0%
dynamically allocate this meaning that
 

00:04:45.919 --> 00:04:48.310 align:start position:0%
dynamically allocate this meaning that
the<00:04:46.080><c> size</c><00:04:46.400><c> does</c><00:04:46.560><c> not</c><00:04:46.720><c> have</c><00:04:46.880><c> to</c><00:04:47.040><c> be</c><00:04:47.280><c> specified</c>

00:04:48.310 --> 00:04:48.320 align:start position:0%
the size does not have to be specified
 

00:04:48.320 --> 00:04:50.390 align:start position:0%
the size does not have to be specified
at<00:04:48.560><c> compile</c><00:04:49.040><c> time</c><00:04:49.520><c> this</c><00:04:49.759><c> is</c><00:04:49.840><c> not</c><00:04:50.080><c> the</c><00:04:50.160><c> case</c>

00:04:50.390 --> 00:04:50.400 align:start position:0%
at compile time this is not the case
 

00:04:50.400 --> 00:04:52.230 align:start position:0%
at compile time this is not the case
with<00:04:50.639><c> a</c><00:04:50.720><c> stack</c><00:04:51.120><c> allocated</c><00:04:51.600><c> array</c><00:04:51.919><c> where</c><00:04:52.080><c> we</c>

00:04:52.230 --> 00:04:52.240 align:start position:0%
with a stack allocated array where we
 

00:04:52.240 --> 00:04:54.550 align:start position:0%
with a stack allocated array where we
need<00:04:52.479><c> to</c><00:04:52.720><c> specify</c><00:04:53.199><c> the</c><00:04:53.360><c> size</c><00:04:53.680><c> at</c><00:04:53.840><c> compile</c><00:04:54.240><c> time</c>

00:04:54.550 --> 00:04:54.560 align:start position:0%
need to specify the size at compile time
 

00:04:54.560 --> 00:04:55.030 align:start position:0%
need to specify the size at compile time
so

00:04:55.030 --> 00:04:55.040 align:start position:0%
so
 

00:04:55.040 --> 00:04:56.469 align:start position:0%
so
in<00:04:55.199><c> other</c><00:04:55.360><c> words</c><00:04:55.600><c> i</c><00:04:55.759><c> could</c><00:04:55.919><c> have</c><00:04:56.080><c> a</c><00:04:56.160><c> size</c>

00:04:56.469 --> 00:04:56.479 align:start position:0%
in other words i could have a size
 

00:04:56.479 --> 00:04:58.230 align:start position:0%
in other words i could have a size
variable<00:04:56.880><c> here</c><00:04:57.120><c> that</c><00:04:57.280><c> could</c><00:04:57.520><c> be</c><00:04:57.680><c> taken</c><00:04:58.080><c> in</c>

00:04:58.230 --> 00:04:58.240 align:start position:0%
variable here that could be taken in
 

00:04:58.240 --> 00:04:59.350 align:start position:0%
variable here that could be taken in
from<00:04:58.560><c> anywhere</c>

00:04:59.350 --> 00:04:59.360 align:start position:0%
from anywhere
 

00:04:59.360 --> 00:05:00.950 align:start position:0%
from anywhere
and<00:04:59.440><c> then</c><00:04:59.680><c> i</c><00:04:59.759><c> can</c><00:04:59.919><c> simply</c><00:05:00.240><c> use</c><00:05:00.479><c> that</c><00:05:00.639><c> size</c>

00:05:00.950 --> 00:05:00.960 align:start position:0%
and then i can simply use that size
 

00:05:00.960 --> 00:05:02.870 align:start position:0%
and then i can simply use that size
variable<00:05:01.440><c> in</c><00:05:01.600><c> this</c><00:05:01.759><c> allocation</c>

00:05:02.870 --> 00:05:02.880 align:start position:0%
variable in this allocation
 

00:05:02.880 --> 00:05:05.909 align:start position:0%
variable in this allocation
i<00:05:03.120><c> cannot</c><00:05:03.600><c> do</c><00:05:03.759><c> this</c><00:05:04.479><c> with</c><00:05:04.800><c> my</c><00:05:05.039><c> stack</c><00:05:05.360><c> allocated</c>

00:05:05.909 --> 00:05:05.919 align:start position:0%
i cannot do this with my stack allocated
 

00:05:05.919 --> 00:05:07.749 align:start position:0%
i cannot do this with my stack allocated
array<00:05:06.240><c> you</c><00:05:06.320><c> can</c><00:05:06.400><c> see</c><00:05:06.560><c> that</c><00:05:06.639><c> gives</c><00:05:06.880><c> us</c><00:05:07.039><c> an</c><00:05:07.199><c> error</c>

00:05:07.749 --> 00:05:07.759 align:start position:0%
array you can see that gives us an error
 

00:05:07.759 --> 00:05:09.909 align:start position:0%
array you can see that gives us an error
this<00:05:08.000><c> has</c><00:05:08.240><c> to</c><00:05:08.479><c> be</c><00:05:08.720><c> a</c><00:05:08.880><c> constant</c><00:05:09.280><c> that</c><00:05:09.520><c> is</c><00:05:09.600><c> known</c>

00:05:09.909 --> 00:05:09.919 align:start position:0%
this has to be a constant that is known
 

00:05:09.919 --> 00:05:12.150 align:start position:0%
this has to be a constant that is known
at<00:05:10.160><c> compile</c><00:05:10.560><c> time</c><00:05:10.880><c> because</c><00:05:11.199><c> the</c><00:05:11.440><c> size</c><00:05:11.840><c> of</c><00:05:11.919><c> this</c>

00:05:12.150 --> 00:05:12.160 align:start position:0%
at compile time because the size of this
 

00:05:12.160 --> 00:05:13.189 align:start position:0%
at compile time because the size of this
memory<00:05:12.560><c> allocation</c>

00:05:13.189 --> 00:05:13.199 align:start position:0%
memory allocation
 

00:05:13.199 --> 00:05:15.350 align:start position:0%
memory allocation
on<00:05:13.280><c> the</c><00:05:13.440><c> stack</c><00:05:14.240><c> has</c><00:05:14.400><c> to</c><00:05:14.560><c> be</c><00:05:14.720><c> known</c><00:05:15.039><c> by</c><00:05:15.199><c> the</c>

00:05:15.350 --> 00:05:15.360 align:start position:0%
on the stack has to be known by the
 

00:05:15.360 --> 00:05:17.029 align:start position:0%
on the stack has to be known by the
compiler<00:05:15.919><c> the</c><00:05:16.080><c> other</c><00:05:16.320><c> big</c><00:05:16.560><c> difference</c><00:05:16.960><c> of</c>

00:05:17.029 --> 00:05:17.039 align:start position:0%
compiler the other big difference of
 

00:05:17.039 --> 00:05:18.550 align:start position:0%
compiler the other big difference of
course<00:05:17.280><c> is</c><00:05:17.440><c> that</c><00:05:17.520><c> with</c><00:05:17.680><c> a</c><00:05:17.759><c> heap</c><00:05:18.080><c> allocated</c>

00:05:18.550 --> 00:05:18.560 align:start position:0%
course is that with a heap allocated
 

00:05:18.560 --> 00:05:19.510 align:start position:0%
course is that with a heap allocated
array<00:05:18.880><c> like</c><00:05:19.039><c> this</c>

00:05:19.510 --> 00:05:19.520 align:start position:0%
array like this
 

00:05:19.520 --> 00:05:21.110 align:start position:0%
array like this
we<00:05:19.680><c> need</c><00:05:19.840><c> to</c><00:05:20.000><c> make</c><00:05:20.160><c> sure</c><00:05:20.320><c> that</c><00:05:20.479><c> we</c><00:05:20.639><c> properly</c>

00:05:21.110 --> 00:05:21.120 align:start position:0%
we need to make sure that we properly
 

00:05:21.120 --> 00:05:22.629 align:start position:0%
we need to make sure that we properly
delete<00:05:21.520><c> it</c><00:05:21.680><c> this</c><00:05:21.840><c> is</c><00:05:21.919><c> not</c><00:05:22.160><c> the</c><00:05:22.240><c> case</c><00:05:22.479><c> for</c><00:05:22.560><c> a</c>

00:05:22.629 --> 00:05:22.639 align:start position:0%
delete it this is not the case for a
 

00:05:22.639 --> 00:05:24.070 align:start position:0%
delete it this is not the case for a
stack<00:05:22.960><c> allocated</c><00:05:23.440><c> array</c>

00:05:24.070 --> 00:05:24.080 align:start position:0%
stack allocated array
 

00:05:24.080 --> 00:05:26.070 align:start position:0%
stack allocated array
as<00:05:24.240><c> it</c><00:05:24.400><c> will</c><00:05:24.560><c> simply</c><00:05:24.960><c> get</c><00:05:25.120><c> removed</c><00:05:25.680><c> when</c><00:05:25.840><c> the</c>

00:05:26.070 --> 00:05:26.080 align:start position:0%
as it will simply get removed when the
 

00:05:26.080 --> 00:05:27.110 align:start position:0%
as it will simply get removed when the
stack<00:05:26.479><c> frame</c><00:05:26.800><c> is</c>

00:05:27.110 --> 00:05:27.120 align:start position:0%
stack frame is
 

00:05:27.120 --> 00:05:28.629 align:start position:0%
stack frame is
popped<00:05:27.520><c> which</c><00:05:27.680><c> in</c><00:05:27.759><c> this</c><00:05:27.919><c> case</c><00:05:28.080><c> will</c><00:05:28.240><c> happen</c><00:05:28.560><c> at</c>

00:05:28.629 --> 00:05:28.639 align:start position:0%
popped which in this case will happen at
 

00:05:28.639 --> 00:05:30.469 align:start position:0%
popped which in this case will happen at
the<00:05:28.800><c> end</c><00:05:29.039><c> of</c><00:05:29.199><c> this</c><00:05:29.440><c> function</c><00:05:29.840><c> here</c><00:05:30.160><c> i'm</c><00:05:30.320><c> not</c>

00:05:30.469 --> 00:05:30.479 align:start position:0%
the end of this function here i'm not
 

00:05:30.479 --> 00:05:31.990 align:start position:0%
the end of this function here i'm not
really<00:05:30.720><c> going</c><00:05:30.960><c> to</c><00:05:31.039><c> talk</c><00:05:31.280><c> about</c><00:05:31.440><c> the</c><00:05:31.600><c> benefits</c>

00:05:31.990 --> 00:05:32.000 align:start position:0%
really going to talk about the benefits
 

00:05:32.000 --> 00:05:33.430 align:start position:0%
really going to talk about the benefits
of<00:05:32.160><c> a</c><00:05:32.240><c> stack</c><00:05:32.479><c> allocated</c><00:05:32.880><c> array</c><00:05:33.120><c> like</c><00:05:33.280><c> this</c>

00:05:33.430 --> 00:05:33.440 align:start position:0%
of a stack allocated array like this
 

00:05:33.440 --> 00:05:35.029 align:start position:0%
of a stack allocated array like this
versus<00:05:33.759><c> a</c><00:05:33.840><c> heap</c><00:05:34.080><c> allocated</c><00:05:34.400><c> array</c><00:05:34.720><c> as</c><00:05:34.800><c> well</c><00:05:34.960><c> as</c>

00:05:35.029 --> 00:05:35.039 align:start position:0%
versus a heap allocated array as well as
 

00:05:35.039 --> 00:05:36.230 align:start position:0%
versus a heap allocated array as well as
all<00:05:35.199><c> of</c><00:05:35.280><c> the</c><00:05:35.440><c> drawbacks</c>

00:05:36.230 --> 00:05:36.240 align:start position:0%
all of the drawbacks
 

00:05:36.240 --> 00:05:38.070 align:start position:0%
all of the drawbacks
the<00:05:36.400><c> point</c><00:05:36.639><c> is</c><00:05:36.800><c> that</c><00:05:37.039><c> in</c><00:05:37.199><c> a</c><00:05:37.280><c> lot</c><00:05:37.440><c> of</c><00:05:37.520><c> cases</c><00:05:38.000><c> if</c>

00:05:38.070 --> 00:05:38.080 align:start position:0%
the point is that in a lot of cases if
 

00:05:38.080 --> 00:05:39.510 align:start position:0%
the point is that in a lot of cases if
you're<00:05:38.240><c> just</c><00:05:38.479><c> allocating</c><00:05:38.960><c> memory</c><00:05:39.280><c> for</c><00:05:39.440><c> a</c>

00:05:39.510 --> 00:05:39.520 align:start position:0%
you're just allocating memory for a
 

00:05:39.520 --> 00:05:40.469 align:start position:0%
you're just allocating memory for a
single<00:05:39.840><c> scope</c>

00:05:40.469 --> 00:05:40.479 align:start position:0%
single scope
 

00:05:40.479 --> 00:05:42.070 align:start position:0%
single scope
it's<00:05:40.639><c> a</c><00:05:40.720><c> lot</c><00:05:40.960><c> better</c><00:05:41.199><c> to</c><00:05:41.360><c> use</c><00:05:41.680><c> a</c><00:05:41.759><c> stack</c>

00:05:42.070 --> 00:05:42.080 align:start position:0%
it's a lot better to use a stack
 

00:05:42.080 --> 00:05:43.990 align:start position:0%
it's a lot better to use a stack
allocated<00:05:42.560><c> array</c><00:05:42.800><c> just</c><00:05:42.960><c> simply</c><00:05:43.360><c> because</c><00:05:43.759><c> that</c>

00:05:43.990 --> 00:05:44.000 align:start position:0%
allocated array just simply because that
 

00:05:44.000 --> 00:05:46.070 align:start position:0%
allocated array just simply because that
memory<00:05:44.400><c> will</c><00:05:44.560><c> be</c><00:05:44.720><c> right</c><00:05:44.960><c> there</c><00:05:45.280><c> on</c><00:05:45.360><c> the</c><00:05:45.520><c> stack</c>

00:05:46.070 --> 00:05:46.080 align:start position:0%
memory will be right there on the stack
 

00:05:46.080 --> 00:05:47.749 align:start position:0%
memory will be right there on the stack
there's<00:05:46.320><c> no</c><00:05:46.479><c> need</c><00:05:46.639><c> for</c><00:05:46.800><c> any</c><00:05:46.960><c> heap</c><00:05:47.199><c> allocations</c>

00:05:47.749 --> 00:05:47.759 align:start position:0%
there's no need for any heap allocations
 

00:05:47.759 --> 00:05:49.430 align:start position:0%
there's no need for any heap allocations
any<00:05:47.919><c> kind</c><00:05:48.080><c> of</c><00:05:48.240><c> indirection</c><00:05:48.880><c> everything</c><00:05:49.280><c> is</c>

00:05:49.430 --> 00:05:49.440 align:start position:0%
any kind of indirection everything is
 

00:05:49.440 --> 00:05:51.110 align:start position:0%
any kind of indirection everything is
right<00:05:49.680><c> there</c><00:05:49.919><c> available</c><00:05:50.320><c> for</c><00:05:50.560><c> you</c><00:05:50.720><c> and</c><00:05:50.880><c> in</c><00:05:51.039><c> a</c>

00:05:51.110 --> 00:05:51.120 align:start position:0%
right there available for you and in a
 

00:05:51.120 --> 00:05:52.390 align:start position:0%
right there available for you and in a
lot<00:05:51.280><c> of</c><00:05:51.440><c> cases</c><00:05:51.840><c> this</c><00:05:52.080><c> can</c>

00:05:52.390 --> 00:05:52.400 align:start position:0%
lot of cases this can
 

00:05:52.400 --> 00:05:54.469 align:start position:0%
lot of cases this can
greatly<00:05:52.880><c> improve</c><00:05:53.199><c> the</c><00:05:53.280><c> performance</c><00:05:54.000><c> of</c><00:05:54.160><c> your</c>

00:05:54.469 --> 00:05:54.479 align:start position:0%
greatly improve the performance of your
 

00:05:54.479 --> 00:05:56.150 align:start position:0%
greatly improve the performance of your
program<00:05:54.960><c> so</c><00:05:55.199><c> before</c><00:05:55.440><c> we</c><00:05:55.600><c> create</c><00:05:55.759><c> a</c><00:05:55.840><c> data</c>

00:05:56.150 --> 00:05:56.160 align:start position:0%
program so before we create a data
 

00:05:56.160 --> 00:05:57.350 align:start position:0%
program so before we create a data
structure<00:05:56.479><c> that</c><00:05:56.720><c> essentially</c>

00:05:57.350 --> 00:05:57.360 align:start position:0%
structure that essentially
 

00:05:57.360 --> 00:05:58.870 align:start position:0%
structure that essentially
wraps<00:05:57.759><c> this</c><00:05:58.000><c> and</c><00:05:58.080><c> makes</c><00:05:58.319><c> it</c><00:05:58.400><c> a</c><00:05:58.479><c> lot</c><00:05:58.639><c> more</c>

00:05:58.870 --> 00:05:58.880 align:start position:0%
wraps this and makes it a lot more
 

00:05:58.880 --> 00:06:00.629 align:start position:0%
wraps this and makes it a lot more
usable<00:05:59.280><c> for</c><00:05:59.520><c> us</c><00:05:59.840><c> let's</c><00:06:00.080><c> take</c><00:06:00.240><c> a</c><00:06:00.319><c> look</c><00:06:00.479><c> at</c><00:06:00.560><c> what</c>

00:06:00.629 --> 00:06:00.639 align:start position:0%
usable for us let's take a look at what
 

00:06:00.639 --> 00:06:01.350 align:start position:0%
usable for us let's take a look at what
the<00:06:00.800><c> c</c>

00:06:01.350 --> 00:06:01.360 align:start position:0%
the c
 

00:06:01.360 --> 00:06:03.029 align:start position:0%
the c
standard<00:06:01.680><c> library</c><00:06:02.000><c> provides</c><00:06:02.400><c> for</c><00:06:02.560><c> us</c><00:06:02.800><c> which</c>

00:06:03.029 --> 00:06:03.039 align:start position:0%
standard library provides for us which
 

00:06:03.039 --> 00:06:04.790 align:start position:0%
standard library provides for us which
is<00:06:03.520><c> this</c><00:06:03.840><c> standard</c><00:06:04.240><c> array</c><00:06:04.560><c> which</c><00:06:04.720><c> is</c>

00:06:04.790 --> 00:06:04.800 align:start position:0%
is this standard array which is
 

00:06:04.800 --> 00:06:06.070 align:start position:0%
is this standard array which is
available<00:06:05.199><c> since</c><00:06:05.520><c> c</c>

00:06:06.070 --> 00:06:06.080 align:start position:0%
available since c
 

00:06:06.080 --> 00:06:08.230 align:start position:0%
available since c
plus<00:06:06.479><c> 11.</c><00:06:06.960><c> i'll</c><00:06:07.120><c> create</c><00:06:07.440><c> this</c><00:06:07.680><c> standard</c><00:06:08.000><c> array</c>

00:06:08.230 --> 00:06:08.240 align:start position:0%
plus 11. i'll create this standard array
 

00:06:08.240 --> 00:06:10.230 align:start position:0%
plus 11. i'll create this standard array
here<00:06:08.400><c> with</c><00:06:08.560><c> the</c><00:06:08.639><c> name</c><00:06:08.800><c> collection</c><00:06:09.440><c> and</c><00:06:09.680><c> i</c><00:06:09.919><c> will</c>

00:06:10.230 --> 00:06:10.240 align:start position:0%
here with the name collection and i will
 

00:06:10.240 --> 00:06:11.990 align:start position:0%
here with the name collection and i will
also<00:06:10.479><c> add</c><00:06:10.720><c> in</c><00:06:10.880><c> the</c><00:06:10.960><c> required</c><00:06:11.440><c> include</c><00:06:11.840><c> here</c>

00:06:11.990 --> 00:06:12.000 align:start position:0%
also add in the required include here
 

00:06:12.000 --> 00:06:13.670 align:start position:0%
also add in the required include here
which<00:06:12.240><c> is</c><00:06:12.479><c> array</c><00:06:12.880><c> that's</c><00:06:13.120><c> where</c><00:06:13.280><c> this</c>

00:06:13.670 --> 00:06:13.680 align:start position:0%
which is array that's where this
 

00:06:13.680 --> 00:06:15.510 align:start position:0%
which is array that's where this
class<00:06:14.000><c> is</c><00:06:14.160><c> actually</c><00:06:14.400><c> contained</c><00:06:15.039><c> the</c><00:06:15.199><c> way</c><00:06:15.360><c> that</c>

00:06:15.510 --> 00:06:15.520 align:start position:0%
class is actually contained the way that
 

00:06:15.520 --> 00:06:17.590 align:start position:0%
class is actually contained the way that
we<00:06:15.680><c> use</c><00:06:15.919><c> this</c><00:06:16.240><c> is</c><00:06:16.400><c> primarily</c><00:06:16.880><c> using</c><00:06:17.120><c> template</c>

00:06:17.590 --> 00:06:17.600 align:start position:0%
we use this is primarily using template
 

00:06:17.600 --> 00:06:19.350 align:start position:0%
we use this is primarily using template
arguments<00:06:18.160><c> so</c><00:06:18.400><c> using</c><00:06:18.639><c> templates</c><00:06:19.039><c> we're</c><00:06:19.199><c> able</c>

00:06:19.350 --> 00:06:19.360 align:start position:0%
arguments so using templates we're able
 

00:06:19.360 --> 00:06:20.070 align:start position:0%
arguments so using templates we're able
to<00:06:19.520><c> specify</c>

00:06:20.070 --> 00:06:20.080 align:start position:0%
to specify
 

00:06:20.080 --> 00:06:22.870 align:start position:0%
to specify
the<00:06:20.240><c> type</c><00:06:20.560><c> here</c><00:06:20.880><c> as</c><00:06:21.039><c> well</c><00:06:21.360><c> as</c><00:06:21.600><c> the</c><00:06:21.840><c> size</c><00:06:22.560><c> so</c>

00:06:22.870 --> 00:06:22.880 align:start position:0%
the type here as well as the size so
 

00:06:22.880 --> 00:06:24.150 align:start position:0%
the type here as well as the size so
it's<00:06:23.039><c> interesting</c><00:06:23.360><c> to</c><00:06:23.440><c> note</c><00:06:23.680><c> here</c><00:06:23.840><c> that</c><00:06:24.000><c> the</c>

00:06:24.150 --> 00:06:24.160 align:start position:0%
it's interesting to note here that the
 

00:06:24.160 --> 00:06:25.909 align:start position:0%
it's interesting to note here that the
size<00:06:24.479><c> is</c><00:06:24.639><c> something</c><00:06:24.880><c> that</c><00:06:25.039><c> we</c><00:06:25.199><c> specify</c><00:06:25.680><c> as</c><00:06:25.840><c> a</c>

00:06:25.909 --> 00:06:25.919 align:start position:0%
size is something that we specify as a
 

00:06:25.919 --> 00:06:27.110 align:start position:0%
size is something that we specify as a
template<00:06:26.400><c> argument</c>

00:06:27.110 --> 00:06:27.120 align:start position:0%
template argument
 

00:06:27.120 --> 00:06:29.670 align:start position:0%
template argument
now<00:06:27.360><c> if</c><00:06:27.440><c> we</c><00:06:27.600><c> actually</c><00:06:28.000><c> open</c><00:06:28.319><c> this</c><00:06:28.720><c> array</c><00:06:29.360><c> file</c>

00:06:29.670 --> 00:06:29.680 align:start position:0%
now if we actually open this array file
 

00:06:29.680 --> 00:06:31.350 align:start position:0%
now if we actually open this array file
here<00:06:29.919><c> by</c><00:06:30.080><c> just</c><00:06:30.240><c> going</c><00:06:30.479><c> to</c><00:06:30.639><c> the</c><00:06:30.720><c> document</c>

00:06:31.350 --> 00:06:31.360 align:start position:0%
here by just going to the document
 

00:06:31.360 --> 00:06:33.189 align:start position:0%
here by just going to the document
you<00:06:31.520><c> can</c><00:06:31.600><c> see</c><00:06:31.759><c> the</c><00:06:32.000><c> entire</c><00:06:32.400><c> implementation</c>

00:06:33.189 --> 00:06:33.199 align:start position:0%
you can see the entire implementation
 

00:06:33.199 --> 00:06:34.950 align:start position:0%
you can see the entire implementation
because<00:06:33.520><c> this</c><00:06:33.759><c> is</c><00:06:33.919><c> completely</c><00:06:34.319><c> a</c><00:06:34.400><c> templated</c>

00:06:34.950 --> 00:06:34.960 align:start position:0%
because this is completely a templated
 

00:06:34.960 --> 00:06:35.909 align:start position:0%
because this is completely a templated
class<00:06:35.280><c> the</c><00:06:35.360><c> entire</c>

00:06:35.909 --> 00:06:35.919 align:start position:0%
class the entire
 

00:06:35.919 --> 00:06:37.749 align:start position:0%
class the entire
implementation<00:06:36.560><c> has</c><00:06:36.800><c> to</c><00:06:36.880><c> be</c><00:06:37.120><c> inside</c><00:06:37.520><c> this</c>

00:06:37.749 --> 00:06:37.759 align:start position:0%
implementation has to be inside this
 

00:06:37.759 --> 00:06:39.749 align:start position:0%
implementation has to be inside this
header<00:06:38.000><c> file</c><00:06:38.560><c> it</c><00:06:38.720><c> can't</c><00:06:38.960><c> be</c><00:06:39.120><c> compiled</c><00:06:39.520><c> into</c>

00:06:39.749 --> 00:06:39.759 align:start position:0%
header file it can't be compiled into
 

00:06:39.759 --> 00:06:41.510 align:start position:0%
header file it can't be compiled into
some<00:06:40.000><c> kind</c><00:06:40.160><c> of</c><00:06:40.240><c> library</c><00:06:40.639><c> in</c><00:06:40.800><c> fact</c><00:06:40.960><c> the</c><00:06:41.120><c> entire</c>

00:06:41.510 --> 00:06:41.520 align:start position:0%
some kind of library in fact the entire
 

00:06:41.520 --> 00:06:43.590 align:start position:0%
some kind of library in fact the entire
cpus<00:06:41.919><c> plus</c><00:06:42.160><c> standard</c><00:06:42.479><c> template</c><00:06:42.880><c> library</c><00:06:43.440><c> is</c>

00:06:43.590 --> 00:06:43.600 align:start position:0%
cpus plus standard template library is
 

00:06:43.600 --> 00:06:45.189 align:start position:0%
cpus plus standard template library is
actually<00:06:44.000><c> in</c><00:06:44.080><c> header</c><00:06:44.400><c> files</c><00:06:44.720><c> because</c><00:06:45.039><c> it's</c>

00:06:45.189 --> 00:06:45.199 align:start position:0%
actually in header files because it's
 

00:06:45.199 --> 00:06:46.469 align:start position:0%
actually in header files because it's
made<00:06:45.440><c> out</c><00:06:45.520><c> of</c><00:06:45.600><c> templates</c>

00:06:46.469 --> 00:06:46.479 align:start position:0%
made out of templates
 

00:06:46.479 --> 00:06:48.390 align:start position:0%
made out of templates
so<00:06:46.720><c> we'll</c><00:06:46.880><c> be</c><00:06:47.199><c> referring</c><00:06:47.680><c> to</c><00:06:47.840><c> this</c><00:06:48.080><c> quite</c><00:06:48.319><c> a</c>

00:06:48.390 --> 00:06:48.400 align:start position:0%
so we'll be referring to this quite a
 

00:06:48.400 --> 00:06:50.309 align:start position:0%
so we'll be referring to this quite a
bit<00:06:48.560><c> just</c><00:06:48.720><c> to</c><00:06:48.880><c> see</c><00:06:49.039><c> how</c><00:06:49.199><c> they</c><00:06:49.440><c> do</c><00:06:49.599><c> things</c>

00:06:50.309 --> 00:06:50.319 align:start position:0%
bit just to see how they do things
 

00:06:50.319 --> 00:06:52.070 align:start position:0%
bit just to see how they do things
whilst<00:06:50.639><c> also</c><00:06:51.199><c> writing</c><00:06:51.440><c> our</c><00:06:51.680><c> own</c><00:06:51.840><c> that</c><00:06:52.000><c> is</c>

00:06:52.070 --> 00:06:52.080 align:start position:0%
whilst also writing our own that is
 

00:06:52.080 --> 00:06:53.990 align:start position:0%
whilst also writing our own that is
going<00:06:52.240><c> to</c><00:06:52.400><c> look</c><00:06:52.639><c> a</c><00:06:52.800><c> lot</c><00:06:53.039><c> more</c><00:06:53.360><c> simple</c>

00:06:53.990 --> 00:06:54.000 align:start position:0%
going to look a lot more simple
 

00:06:54.000 --> 00:06:56.629 align:start position:0%
going to look a lot more simple
than<00:06:54.400><c> what</c><00:06:54.560><c> we</c><00:06:54.720><c> have</c><00:06:54.960><c> here</c><00:06:55.280><c> because</c><00:06:56.080><c> the</c><00:06:56.240><c> c</c>

00:06:56.629 --> 00:06:56.639 align:start position:0%
than what we have here because the c
 

00:06:56.639 --> 00:06:58.309 align:start position:0%
than what we have here because the c
plus<00:06:56.880><c> libraries</c><00:06:57.360><c> are</c><00:06:57.440><c> usually</c><00:06:57.840><c> written</c>

00:06:58.309 --> 00:06:58.319 align:start position:0%
plus libraries are usually written
 

00:06:58.319 --> 00:07:00.870 align:start position:0%
plus libraries are usually written
in<00:06:58.479><c> a</c><00:06:58.639><c> not</c><00:06:58.960><c> very</c><00:06:59.440><c> readable</c><00:07:00.160><c> way</c><00:07:00.479><c> once</c><00:07:00.720><c> we've</c>

00:07:00.870 --> 00:07:00.880 align:start position:0%
in a not very readable way once we've
 

00:07:00.880 --> 00:07:02.550 align:start position:0%
in a not very readable way once we've
got<00:07:01.039><c> that</c><00:07:01.280><c> the</c><00:07:01.360><c> primary</c><00:07:01.759><c> benefit</c><00:07:02.160><c> here</c><00:07:02.479><c> is</c>

00:07:02.550 --> 00:07:02.560 align:start position:0%
got that the primary benefit here is
 

00:07:02.560 --> 00:07:03.510 align:start position:0%
got that the primary benefit here is
that<00:07:02.720><c> we</c><00:07:02.880><c> can</c><00:07:03.120><c> in</c><00:07:03.199><c> fact</c>

00:07:03.510 --> 00:07:03.520 align:start position:0%
that we can in fact
 

00:07:03.520 --> 00:07:05.189 align:start position:0%
that we can in fact
easily<00:07:03.840><c> check</c><00:07:04.080><c> what</c><00:07:04.240><c> the</c><00:07:04.479><c> size</c><00:07:04.800><c> is</c><00:07:04.960><c> of</c><00:07:05.039><c> the</c>

00:07:05.189 --> 00:07:05.199 align:start position:0%
easily check what the size is of the
 

00:07:05.199 --> 00:07:06.870 align:start position:0%
easily check what the size is of the
array<00:07:05.520><c> we</c><00:07:05.680><c> can</c><00:07:05.840><c> easily</c><00:07:06.240><c> obtain</c><00:07:06.639><c> an</c>

00:07:06.870 --> 00:07:06.880 align:start position:0%
array we can easily obtain an
 

00:07:06.880 --> 00:07:08.629 align:start position:0%
array we can easily obtain an
iterator<00:07:07.440><c> to</c><00:07:07.599><c> the</c><00:07:07.759><c> array</c><00:07:08.000><c> so</c><00:07:08.160><c> in</c><00:07:08.240><c> other</c><00:07:08.400><c> words</c>

00:07:08.629 --> 00:07:08.639 align:start position:0%
iterator to the array so in other words
 

00:07:08.639 --> 00:07:10.230 align:start position:0%
iterator to the array so in other words
if<00:07:08.720><c> i</c><00:07:08.800><c> wanted</c><00:07:09.039><c> to</c><00:07:09.120><c> iterate</c><00:07:09.599><c> through</c>

00:07:10.230 --> 00:07:10.240 align:start position:0%
if i wanted to iterate through
 

00:07:10.240 --> 00:07:11.909 align:start position:0%
if i wanted to iterate through
every<00:07:10.479><c> single</c><00:07:10.880><c> integer</c><00:07:11.360><c> inside</c><00:07:11.759><c> this</c>

00:07:11.909 --> 00:07:11.919 align:start position:0%
every single integer inside this
 

00:07:11.919 --> 00:07:13.749 align:start position:0%
every single integer inside this
collection<00:07:12.400><c> i</c><00:07:12.560><c> have</c><00:07:12.720><c> a</c><00:07:12.800><c> very</c><00:07:13.039><c> easy</c><00:07:13.280><c> way</c><00:07:13.440><c> to</c><00:07:13.520><c> do</c>

00:07:13.749 --> 00:07:13.759 align:start position:0%
collection i have a very easy way to do
 

00:07:13.759 --> 00:07:14.230 align:start position:0%
collection i have a very easy way to do
this

00:07:14.230 --> 00:07:14.240 align:start position:0%
this
 

00:07:14.240 --> 00:07:16.710 align:start position:0%
this
i<00:07:14.400><c> can</c><00:07:14.639><c> also</c><00:07:15.280><c> use</c><00:07:15.520><c> a</c><00:07:15.680><c> traditional</c><00:07:16.240><c> for</c><00:07:16.479><c> loop</c>

00:07:16.710 --> 00:07:16.720 align:start position:0%
i can also use a traditional for loop
 

00:07:16.720 --> 00:07:18.150 align:start position:0%
i can also use a traditional for loop
here<00:07:17.199><c> like</c><00:07:17.440><c> so</c><00:07:17.759><c> and</c><00:07:17.840><c> then</c>

00:07:18.150 --> 00:07:18.160 align:start position:0%
here like so and then
 

00:07:18.160 --> 00:07:20.230 align:start position:0%
here like so and then
simply<00:07:18.720><c> use</c><00:07:18.960><c> it</c><00:07:19.120><c> as</c><00:07:19.280><c> if</c><00:07:19.440><c> it</c><00:07:19.520><c> was</c><00:07:19.759><c> any</c><00:07:20.000><c> other</c>

00:07:20.230 --> 00:07:20.240 align:start position:0%
simply use it as if it was any other
 

00:07:20.240 --> 00:07:22.070 align:start position:0%
simply use it as if it was any other
array<00:07:20.639><c> by</c><00:07:20.800><c> like</c><00:07:21.039><c> printing</c><00:07:21.360><c> the</c><00:07:21.520><c> value</c><00:07:21.919><c> or</c>

00:07:22.070 --> 00:07:22.080 align:start position:0%
array by like printing the value or
 

00:07:22.080 --> 00:07:23.350 align:start position:0%
array by like printing the value or
doing<00:07:22.400><c> something</c><00:07:22.800><c> like</c><00:07:23.039><c> this</c>

00:07:23.350 --> 00:07:23.360 align:start position:0%
doing something like this
 

00:07:23.360 --> 00:07:25.029 align:start position:0%
doing something like this
doesn't<00:07:23.599><c> really</c><00:07:23.840><c> matter</c><00:07:24.319><c> this</c><00:07:24.560><c> is</c><00:07:24.639><c> basically</c>

00:07:25.029 --> 00:07:25.039 align:start position:0%
doesn't really matter this is basically
 

00:07:25.039 --> 00:07:26.870 align:start position:0%
doesn't really matter this is basically
what<00:07:25.199><c> the</c><00:07:25.360><c> api</c><00:07:25.919><c> for</c><00:07:26.080><c> this</c><00:07:26.240><c> standard</c><00:07:26.560><c> array</c>

00:07:26.870 --> 00:07:26.880 align:start position:0%
what the api for this standard array
 

00:07:26.880 --> 00:07:28.070 align:start position:0%
what the api for this standard array
class<00:07:27.120><c> looks</c><00:07:27.280><c> like</c><00:07:27.520><c> and</c><00:07:27.599><c> that's</c><00:07:27.840><c> what</c><00:07:27.919><c> we'll</c>

00:07:28.070 --> 00:07:28.080 align:start position:0%
class looks like and that's what we'll
 

00:07:28.080 --> 00:07:29.029 align:start position:0%
class looks like and that's what we'll
be<00:07:28.240><c> creating</c><00:07:28.639><c> today</c>

00:07:29.029 --> 00:07:29.039 align:start position:0%
be creating today
 

00:07:29.039 --> 00:07:30.390 align:start position:0%
be creating today
okay<00:07:29.280><c> so</c><00:07:29.360><c> now</c><00:07:29.520><c> that</c><00:07:29.599><c> we've</c><00:07:29.759><c> done</c><00:07:30.000><c> a</c><00:07:30.080><c> little</c><00:07:30.240><c> bit</c>

00:07:30.390 --> 00:07:30.400 align:start position:0%
okay so now that we've done a little bit
 

00:07:30.400 --> 00:07:32.309 align:start position:0%
okay so now that we've done a little bit
of<00:07:30.560><c> research</c><00:07:31.280><c> let's</c><00:07:31.520><c> dive</c><00:07:31.840><c> in</c><00:07:31.919><c> and</c><00:07:32.080><c> take</c><00:07:32.240><c> a</c>

00:07:32.309 --> 00:07:32.319 align:start position:0%
of research let's dive in and take a
 

00:07:32.319 --> 00:07:34.150 align:start position:0%
of research let's dive in and take a
look<00:07:32.560><c> at</c><00:07:32.639><c> how</c><00:07:32.800><c> we</c><00:07:32.960><c> can</c><00:07:33.120><c> make</c><00:07:33.280><c> this</c><00:07:33.520><c> ourselves</c>

00:07:34.150 --> 00:07:34.160 align:start position:0%
look at how we can make this ourselves
 

00:07:34.160 --> 00:07:35.589 align:start position:0%
look at how we can make this ourselves
what<00:07:34.319><c> i</c><00:07:34.400><c> want</c><00:07:34.560><c> to</c><00:07:34.639><c> do</c><00:07:34.800><c> is</c><00:07:35.039><c> start</c><00:07:35.280><c> with</c><00:07:35.440><c> the</c>

00:07:35.589 --> 00:07:35.599 align:start position:0%
what i want to do is start with the
 

00:07:35.599 --> 00:07:37.270 align:start position:0%
what i want to do is start with the
first<00:07:35.840><c> iteration</c><00:07:36.319><c> of</c><00:07:36.400><c> this</c><00:07:36.639><c> how</c><00:07:36.800><c> do</c><00:07:36.880><c> we</c><00:07:37.039><c> do</c>

00:07:37.270 --> 00:07:37.280 align:start position:0%
first iteration of this how do we do
 

00:07:37.280 --> 00:07:37.589 align:start position:0%
first iteration of this how do we do
this

00:07:37.589 --> 00:07:37.599 align:start position:0%
this
 

00:07:37.599 --> 00:07:39.670 align:start position:0%
this
just<00:07:37.840><c> templates</c><00:07:38.319><c> aside</c><00:07:38.800><c> the</c><00:07:38.960><c> simple</c><00:07:39.360><c> kind</c><00:07:39.520><c> of</c>

00:07:39.670 --> 00:07:39.680 align:start position:0%
just templates aside the simple kind of
 

00:07:39.680 --> 00:07:40.870 align:start position:0%
just templates aside the simple kind of
beginner's<00:07:40.160><c> version</c>

00:07:40.870 --> 00:07:40.880 align:start position:0%
beginner's version
 

00:07:40.880 --> 00:07:43.110 align:start position:0%
beginner's version
of<00:07:41.039><c> having</c><00:07:41.360><c> a</c><00:07:41.440><c> stack</c><00:07:41.759><c> allocated</c><00:07:42.319><c> array</c><00:07:42.880><c> that</c>

00:07:43.110 --> 00:07:43.120 align:start position:0%
of having a stack allocated array that
 

00:07:43.120 --> 00:07:45.589 align:start position:0%
of having a stack allocated array that
is<00:07:43.360><c> wrapped</c><00:07:43.840><c> inside</c><00:07:44.400><c> a</c><00:07:44.560><c> class</c><00:07:45.039><c> well</c><00:07:45.280><c> i'll</c><00:07:45.440><c> make</c>

00:07:45.589 --> 00:07:45.599 align:start position:0%
is wrapped inside a class well i'll make
 

00:07:45.599 --> 00:07:47.270 align:start position:0%
is wrapped inside a class well i'll make
a<00:07:45.759><c> class</c><00:07:46.080><c> called</c><00:07:46.319><c> array</c><00:07:46.720><c> and</c><00:07:46.800><c> then</c><00:07:46.960><c> i'm</c><00:07:47.120><c> going</c>

00:07:47.270 --> 00:07:47.280 align:start position:0%
a class called array and then i'm going
 

00:07:47.280 --> 00:07:49.350 align:start position:0%
a class called array and then i'm going
to<00:07:47.360><c> decide</c><00:07:47.840><c> what</c><00:07:48.080><c> kind</c><00:07:48.319><c> of</c><00:07:48.479><c> type</c><00:07:48.800><c> of</c><00:07:48.879><c> data</c><00:07:49.199><c> this</c>

00:07:49.350 --> 00:07:49.360 align:start position:0%
to decide what kind of type of data this
 

00:07:49.360 --> 00:07:50.869 align:start position:0%
to decide what kind of type of data this
array<00:07:49.599><c> is</c><00:07:49.680><c> going</c><00:07:49.759><c> to</c><00:07:49.840><c> hold</c><00:07:50.240><c> so</c><00:07:50.479><c> we'll</c><00:07:50.639><c> go</c><00:07:50.800><c> with</c>

00:07:50.869 --> 00:07:50.879 align:start position:0%
array is going to hold so we'll go with
 

00:07:50.879 --> 00:07:51.990 align:start position:0%
array is going to hold so we'll go with
an<00:07:51.039><c> integer</c>

00:07:51.990 --> 00:07:52.000 align:start position:0%
an integer
 

00:07:52.000 --> 00:07:54.710 align:start position:0%
an integer
i'll<00:07:52.240><c> now</c><00:07:52.720><c> make</c><00:07:53.039><c> an</c><00:07:53.280><c> actual</c><00:07:53.840><c> stack</c><00:07:54.160><c> allocated</c>

00:07:54.710 --> 00:07:54.720 align:start position:0%
i'll now make an actual stack allocated
 

00:07:54.720 --> 00:07:56.869 align:start position:0%
i'll now make an actual stack allocated
array<00:07:55.039><c> here</c><00:07:55.280><c> with</c><00:07:55.520><c> a</c><00:07:55.680><c> particular</c><00:07:56.240><c> size</c>

00:07:56.869 --> 00:07:56.879 align:start position:0%
array here with a particular size
 

00:07:56.879 --> 00:07:58.550 align:start position:0%
array here with a particular size
now<00:07:57.039><c> this</c><00:07:57.199><c> is</c><00:07:57.280><c> where</c><00:07:57.440><c> our</c><00:07:57.599><c> problem</c><00:07:57.919><c> comes</c><00:07:58.240><c> in</c>

00:07:58.550 --> 00:07:58.560 align:start position:0%
now this is where our problem comes in
 

00:07:58.560 --> 00:08:00.309 align:start position:0%
now this is where our problem comes in
we<00:07:58.720><c> can't</c><00:07:59.039><c> really</c><00:07:59.599><c> simply</c><00:08:00.000><c> make</c><00:08:00.240><c> a</c>

00:08:00.309 --> 00:08:00.319 align:start position:0%
we can't really simply make a
 

00:08:00.319 --> 00:08:01.430 align:start position:0%
we can't really simply make a
constructor<00:08:00.960><c> here</c>

00:08:01.430 --> 00:08:01.440 align:start position:0%
constructor here
 

00:08:01.440 --> 00:08:03.749 align:start position:0%
constructor here
that<00:08:01.599><c> takes</c><00:08:01.919><c> in</c><00:08:02.080><c> a</c><00:08:02.240><c> size</c><00:08:02.800><c> like</c><00:08:03.039><c> this</c><00:08:03.520><c> because</c>

00:08:03.749 --> 00:08:03.759 align:start position:0%
that takes in a size like this because
 

00:08:03.759 --> 00:08:05.589 align:start position:0%
that takes in a size like this because
if<00:08:03.919><c> we</c><00:08:04.080><c> did</c><00:08:04.240><c> that</c><00:08:04.479><c> we</c><00:08:04.639><c> would</c><00:08:04.800><c> have</c><00:08:04.960><c> to</c><00:08:05.199><c> somehow</c>

00:08:05.589 --> 00:08:05.599 align:start position:0%
if we did that we would have to somehow
 

00:08:05.599 --> 00:08:07.350 align:start position:0%
if we did that we would have to somehow
allocate<00:08:06.000><c> this</c><00:08:06.240><c> memory</c><00:08:06.720><c> it's</c><00:08:06.879><c> not</c><00:08:07.039><c> going</c><00:08:07.280><c> to</c>

00:08:07.350 --> 00:08:07.360 align:start position:0%
allocate this memory it's not going to
 

00:08:07.360 --> 00:08:08.710 align:start position:0%
allocate this memory it's not going to
be<00:08:07.520><c> possible</c><00:08:07.919><c> to</c><00:08:08.000><c> do</c><00:08:08.160><c> this</c><00:08:08.319><c> for</c><00:08:08.479><c> the</c><00:08:08.560><c> same</c>

00:08:08.710 --> 00:08:08.720 align:start position:0%
be possible to do this for the same
 

00:08:08.720 --> 00:08:10.629 align:start position:0%
be possible to do this for the same
reason<00:08:09.120><c> why</c><00:08:09.360><c> i</c><00:08:09.520><c> can't</c><00:08:09.759><c> have</c><00:08:10.000><c> an</c><00:08:10.160><c> array</c><00:08:10.479><c> over</c>

00:08:10.629 --> 00:08:10.639 align:start position:0%
reason why i can't have an array over
 

00:08:10.639 --> 00:08:11.189 align:start position:0%
reason why i can't have an array over
here

00:08:11.189 --> 00:08:11.199 align:start position:0%
here
 

00:08:11.199 --> 00:08:13.029 align:start position:0%
here
that<00:08:11.440><c> is</c><00:08:11.599><c> initialized</c><00:08:12.240><c> by</c><00:08:12.400><c> a</c><00:08:12.560><c> particular</c>

00:08:13.029 --> 00:08:13.039 align:start position:0%
that is initialized by a particular
 

00:08:13.039 --> 00:08:14.710 align:start position:0%
that is initialized by a particular
variable<00:08:13.919><c> like</c><00:08:14.240><c> this</c>

00:08:14.710 --> 00:08:14.720 align:start position:0%
variable like this
 

00:08:14.720 --> 00:08:16.550 align:start position:0%
variable like this
you<00:08:14.879><c> just</c><00:08:15.120><c> can't</c><00:08:15.360><c> do</c><00:08:15.599><c> that</c><00:08:15.840><c> because</c><00:08:16.160><c> this</c><00:08:16.479><c> is</c>

00:08:16.550 --> 00:08:16.560 align:start position:0%
you just can't do that because this is
 

00:08:16.560 --> 00:08:18.230 align:start position:0%
you just can't do that because this is
not<00:08:16.800><c> a</c><00:08:16.960><c> constant</c><00:08:17.440><c> expression</c><00:08:17.919><c> it's</c><00:08:18.080><c> not</c>

00:08:18.230 --> 00:08:18.240 align:start position:0%
not a constant expression it's not
 

00:08:18.240 --> 00:08:20.150 align:start position:0%
not a constant expression it's not
something<00:08:18.560><c> that</c><00:08:18.720><c> is</c><00:08:18.800><c> known</c><00:08:19.039><c> at</c><00:08:19.120><c> compile</c><00:08:19.520><c> time</c>

00:08:20.150 --> 00:08:20.160 align:start position:0%
something that is known at compile time
 

00:08:20.160 --> 00:08:22.309 align:start position:0%
something that is known at compile time
so<00:08:20.319><c> we</c><00:08:20.560><c> can't</c><00:08:20.879><c> have</c><00:08:21.039><c> an</c><00:08:21.199><c> array</c><00:08:21.520><c> whose</c><00:08:21.840><c> size</c><00:08:22.160><c> is</c>

00:08:22.309 --> 00:08:22.319 align:start position:0%
so we can't have an array whose size is
 

00:08:22.319 --> 00:08:23.270 align:start position:0%
so we can't have an array whose size is
specified<00:08:22.960><c> at</c>

00:08:23.270 --> 00:08:23.280 align:start position:0%
specified at
 

00:08:23.280 --> 00:08:25.029 align:start position:0%
specified at
runtime<00:08:23.759><c> so</c><00:08:23.919><c> in</c><00:08:24.000><c> other</c><00:08:24.160><c> words</c><00:08:24.479><c> we</c><00:08:24.639><c> need</c><00:08:24.800><c> to</c>

00:08:25.029 --> 00:08:25.039 align:start position:0%
runtime so in other words we need to
 

00:08:25.039 --> 00:08:26.629 align:start position:0%
runtime so in other words we need to
actually<00:08:25.599><c> insert</c><00:08:26.240><c> a</c>

00:08:26.629 --> 00:08:26.639 align:start position:0%
actually insert a
 

00:08:26.639 --> 00:08:28.390 align:start position:0%
actually insert a
number<00:08:27.120><c> into</c><00:08:27.520><c> here</c><00:08:27.919><c> and</c><00:08:28.000><c> this</c><00:08:28.240><c> is</c>

00:08:28.390 --> 00:08:28.400 align:start position:0%
number into here and this is
 

00:08:28.400 --> 00:08:30.390 align:start position:0%
number into here and this is
specifically<00:08:29.120><c> where</c><00:08:29.360><c> it</c><00:08:29.520><c> gets</c><00:08:29.840><c> difficult</c>

00:08:30.390 --> 00:08:30.400 align:start position:0%
specifically where it gets difficult
 

00:08:30.400 --> 00:08:31.990 align:start position:0%
specifically where it gets difficult
because<00:08:30.639><c> if</c><00:08:30.800><c> we're</c><00:08:31.039><c> trying</c><00:08:31.360><c> to</c><00:08:31.440><c> do</c><00:08:31.599><c> something</c>

00:08:31.990 --> 00:08:32.000 align:start position:0%
because if we're trying to do something
 

00:08:32.000 --> 00:08:33.190 align:start position:0%
because if we're trying to do something
like<00:08:32.240><c> this</c>

00:08:33.190 --> 00:08:33.200 align:start position:0%
like this
 

00:08:33.200 --> 00:08:35.589 align:start position:0%
like this
how<00:08:33.360><c> do</c><00:08:33.519><c> we</c><00:08:33.680><c> control</c><00:08:34.159><c> this</c><00:08:34.560><c> how</c><00:08:34.800><c> can</c><00:08:35.039><c> i</c><00:08:35.360><c> at</c><00:08:35.519><c> the</c>

00:08:35.589 --> 00:08:35.599 align:start position:0%
how do we control this how can i at the
 

00:08:35.599 --> 00:08:37.350 align:start position:0%
how do we control this how can i at the
time<00:08:35.839><c> of</c><00:08:36.000><c> instantiating</c><00:08:36.719><c> this</c><00:08:36.959><c> class</c><00:08:37.200><c> and</c>

00:08:37.350 --> 00:08:37.360 align:start position:0%
time of instantiating this class and
 

00:08:37.360 --> 00:08:38.149 align:start position:0%
time of instantiating this class and
using<00:08:37.760><c> it</c>

00:08:38.149 --> 00:08:38.159 align:start position:0%
using it
 

00:08:38.159 --> 00:08:39.909 align:start position:0%
using it
how<00:08:38.320><c> can</c><00:08:38.479><c> i</c><00:08:38.640><c> tell</c><00:08:38.880><c> it</c><00:08:38.959><c> how</c><00:08:39.200><c> big</c><00:08:39.360><c> i</c><00:08:39.519><c> want</c><00:08:39.680><c> my</c>

00:08:39.909 --> 00:08:39.919 align:start position:0%
how can i tell it how big i want my
 

00:08:39.919 --> 00:08:41.750 align:start position:0%
how can i tell it how big i want my
static<00:08:40.320><c> array</c><00:08:40.560><c> to</c><00:08:40.719><c> be</c><00:08:41.039><c> that's</c><00:08:41.360><c> why</c>

00:08:41.750 --> 00:08:41.760 align:start position:0%
static array to be that's why
 

00:08:41.760 --> 00:08:43.829 align:start position:0%
static array to be that's why
the<00:08:41.919><c> standard</c><00:08:42.320><c> array</c><00:08:42.560><c> class</c><00:08:42.959><c> uses</c><00:08:43.200><c> a</c><00:08:43.360><c> template</c>

00:08:43.829 --> 00:08:43.839 align:start position:0%
the standard array class uses a template
 

00:08:43.839 --> 00:08:45.350 align:start position:0%
the standard array class uses a template
now<00:08:44.080><c> as</c><00:08:44.240><c> a</c><00:08:44.399><c> side</c><00:08:44.720><c> note</c><00:08:44.959><c> i</c><00:08:45.040><c> just</c><00:08:45.200><c> want</c><00:08:45.279><c> to</c>

00:08:45.350 --> 00:08:45.360 align:start position:0%
now as a side note i just want to
 

00:08:45.360 --> 00:08:46.949 align:start position:0%
now as a side note i just want to
mention<00:08:45.680><c> that</c><00:08:45.920><c> yes</c><00:08:46.240><c> i</c><00:08:46.320><c> did</c><00:08:46.560><c> say</c><00:08:46.720><c> that</c>

00:08:46.949 --> 00:08:46.959 align:start position:0%
mention that yes i did say that
 

00:08:46.959 --> 00:08:48.470 align:start position:0%
mention that yes i did say that
technically<00:08:47.440><c> you</c><00:08:47.600><c> cannot</c><00:08:47.920><c> have</c><00:08:48.080><c> a</c><00:08:48.160><c> stack</c>

00:08:48.470 --> 00:08:48.480 align:start position:0%
technically you cannot have a stack
 

00:08:48.480 --> 00:08:50.470 align:start position:0%
technically you cannot have a stack
allocated<00:08:48.959><c> array</c><00:08:49.279><c> with</c><00:08:49.440><c> a</c><00:08:49.519><c> dynamic</c><00:08:50.000><c> size</c>

00:08:50.470 --> 00:08:50.480 align:start position:0%
allocated array with a dynamic size
 

00:08:50.480 --> 00:08:52.230 align:start position:0%
allocated array with a dynamic size
that's<00:08:50.720><c> not</c><00:08:50.959><c> strictly</c><00:08:51.440><c> true</c><00:08:51.760><c> because</c><00:08:52.000><c> it</c><00:08:52.160><c> is</c>

00:08:52.230 --> 00:08:52.240 align:start position:0%
that's not strictly true because it is
 

00:08:52.240 --> 00:08:54.310 align:start position:0%
that's not strictly true because it is
possible<00:08:52.640><c> to</c><00:08:52.720><c> allocate</c><00:08:53.120><c> memory</c><00:08:53.600><c> on</c><00:08:53.760><c> the</c><00:08:53.920><c> stack</c>

00:08:54.310 --> 00:08:54.320 align:start position:0%
possible to allocate memory on the stack
 

00:08:54.320 --> 00:08:55.269 align:start position:0%
possible to allocate memory on the stack
dynamically

00:08:55.269 --> 00:08:55.279 align:start position:0%
dynamically
 

00:08:55.279 --> 00:08:57.190 align:start position:0%
dynamically
we<00:08:55.440><c> can</c><00:08:55.600><c> do</c><00:08:55.760><c> that</c><00:08:55.920><c> by</c><00:08:56.240><c> turning</c><00:08:56.560><c> this</c><00:08:56.800><c> into</c><00:08:57.040><c> a</c>

00:08:57.190 --> 00:08:57.200 align:start position:0%
we can do that by turning this into a
 

00:08:57.200 --> 00:08:59.350 align:start position:0%
we can do that by turning this into a
pointer<00:08:58.000><c> and</c><00:08:58.080><c> then</c><00:08:58.320><c> simply</c><00:08:58.720><c> saying</c><00:08:58.959><c> that</c><00:08:59.120><c> m</c>

00:08:59.350 --> 00:08:59.360 align:start position:0%
pointer and then simply saying that m
 

00:08:59.360 --> 00:09:01.110 align:start position:0%
pointer and then simply saying that m
data<00:08:59.760><c> is</c><00:08:59.920><c> equal</c><00:09:00.240><c> to</c>

00:09:01.110 --> 00:09:01.120 align:start position:0%
data is equal to
 

00:09:01.120 --> 00:09:04.710 align:start position:0%
data is equal to
endpointer<00:09:02.000><c> allocate</c><00:09:03.040><c> size</c><00:09:04.080><c> allocate</c><00:09:04.560><c> is</c><00:09:04.640><c> a</c>

00:09:04.710 --> 00:09:04.720 align:start position:0%
endpointer allocate size allocate is a
 

00:09:04.720 --> 00:09:06.470 align:start position:0%
endpointer allocate size allocate is a
function<00:09:05.040><c> that</c><00:09:05.200><c> lets</c><00:09:05.440><c> us</c><00:09:05.600><c> allocate</c><00:09:06.000><c> memory</c><00:09:06.399><c> on</c>

00:09:06.470 --> 00:09:06.480 align:start position:0%
function that lets us allocate memory on
 

00:09:06.480 --> 00:09:07.990 align:start position:0%
function that lets us allocate memory on
the<00:09:06.640><c> stack</c><00:09:07.040><c> this</c><00:09:07.200><c> would</c><00:09:07.440><c> successfully</c>

00:09:07.990 --> 00:09:08.000 align:start position:0%
the stack this would successfully
 

00:09:08.000 --> 00:09:10.310 align:start position:0%
the stack this would successfully
allow<00:09:08.399><c> us</c><00:09:08.560><c> to</c><00:09:08.720><c> instantiate</c><00:09:09.440><c> our</c><00:09:09.600><c> array</c><00:09:09.920><c> here</c>

00:09:10.310 --> 00:09:10.320 align:start position:0%
allow us to instantiate our array here
 

00:09:10.320 --> 00:09:12.230 align:start position:0%
allow us to instantiate our array here
with<00:09:10.480><c> an</c><00:09:10.640><c> actual</c><00:09:11.040><c> runtime</c><00:09:11.519><c> value</c><00:09:11.839><c> here</c><00:09:12.080><c> so</c>

00:09:12.230 --> 00:09:12.240 align:start position:0%
with an actual runtime value here so
 

00:09:12.240 --> 00:09:13.430 align:start position:0%
with an actual runtime value here so
this<00:09:12.399><c> could</c><00:09:12.560><c> be</c><00:09:12.800><c> of</c><00:09:12.880><c> course</c>

00:09:13.430 --> 00:09:13.440 align:start position:0%
this could be of course
 

00:09:13.440 --> 00:09:15.030 align:start position:0%
this could be of course
a<00:09:13.600><c> variable</c><00:09:14.000><c> that</c><00:09:14.160><c> was</c><00:09:14.320><c> set</c><00:09:14.480><c> to</c><00:09:14.640><c> something</c><00:09:14.959><c> and</c>

00:09:15.030 --> 00:09:15.040 align:start position:0%
a variable that was set to something and
 

00:09:15.040 --> 00:09:16.470 align:start position:0%
a variable that was set to something and
you<00:09:15.200><c> can</c><00:09:15.279><c> see</c><00:09:15.440><c> that</c><00:09:15.600><c> it</c><00:09:15.680><c> works</c><00:09:15.920><c> here</c><00:09:16.160><c> fine</c>

00:09:16.470 --> 00:09:16.480 align:start position:0%
you can see that it works here fine
 

00:09:16.480 --> 00:09:18.310 align:start position:0%
you can see that it works here fine
because<00:09:16.720><c> this</c><00:09:16.959><c> just</c><00:09:17.120><c> takes</c><00:09:17.360><c> in</c><00:09:17.519><c> an</c><00:09:17.680><c> integer</c>

00:09:18.310 --> 00:09:18.320 align:start position:0%
because this just takes in an integer
 

00:09:18.320 --> 00:09:20.389 align:start position:0%
because this just takes in an integer
and<00:09:18.399><c> we're</c><00:09:18.640><c> allocating</c><00:09:19.279><c> the</c><00:09:19.440><c> right</c><00:09:19.839><c> thing</c><00:09:20.160><c> now</c>

00:09:20.389 --> 00:09:20.399 align:start position:0%
and we're allocating the right thing now
 

00:09:20.399 --> 00:09:21.590 align:start position:0%
and we're allocating the right thing now
there<00:09:20.640><c> are</c><00:09:20.959><c> certain</c>

00:09:21.590 --> 00:09:21.600 align:start position:0%
there are certain
 

00:09:21.600 --> 00:09:23.910 align:start position:0%
there are certain
caveats<00:09:22.160><c> to</c><00:09:22.399><c> using</c><00:09:22.880><c> allokay</c><00:09:23.440><c> whilst</c><00:09:23.760><c> this</c>

00:09:23.910 --> 00:09:23.920 align:start position:0%
caveats to using allokay whilst this
 

00:09:23.920 --> 00:09:25.509 align:start position:0%
caveats to using allokay whilst this
memory<00:09:24.240><c> is</c><00:09:24.399><c> technically</c><00:09:24.800><c> allocated</c><00:09:25.279><c> on</c><00:09:25.360><c> the</c>

00:09:25.509 --> 00:09:25.519 align:start position:0%
memory is technically allocated on the
 

00:09:25.519 --> 00:09:25.990 align:start position:0%
memory is technically allocated on the
stack

00:09:25.990 --> 00:09:26.000 align:start position:0%
stack
 

00:09:26.000 --> 00:09:27.670 align:start position:0%
stack
the<00:09:26.160><c> compiler</c><00:09:26.640><c> doesn't</c><00:09:26.800><c> really</c><00:09:27.040><c> know</c><00:09:27.279><c> how</c><00:09:27.440><c> big</c>

00:09:27.670 --> 00:09:27.680 align:start position:0%
the compiler doesn't really know how big
 

00:09:27.680 --> 00:09:29.350 align:start position:0%
the compiler doesn't really know how big
the<00:09:27.839><c> size</c><00:09:28.080><c> will</c><00:09:28.240><c> be</c><00:09:28.480><c> that</c><00:09:28.640><c> can</c><00:09:28.800><c> lead</c><00:09:29.040><c> to</c>

00:09:29.350 --> 00:09:29.360 align:start position:0%
the size will be that can lead to
 

00:09:29.360 --> 00:09:31.190 align:start position:0%
the size will be that can lead to
problems<00:09:30.000><c> and</c><00:09:30.160><c> also</c><00:09:30.399><c> lack</c><00:09:30.640><c> of</c><00:09:30.720><c> compiler</c>

00:09:31.190 --> 00:09:31.200 align:start position:0%
problems and also lack of compiler
 

00:09:31.200 --> 00:09:33.590 align:start position:0%
problems and also lack of compiler
optimization<00:09:31.920><c> so</c><00:09:32.240><c> technically</c><00:09:32.959><c> speaking</c><00:09:33.360><c> you</c>

00:09:33.590 --> 00:09:33.600 align:start position:0%
optimization so technically speaking you
 

00:09:33.600 --> 00:09:35.509 align:start position:0%
optimization so technically speaking you
probably<00:09:33.920><c> want</c><00:09:34.080><c> to</c><00:09:34.240><c> avoid</c><00:09:34.560><c> lk</c><00:09:34.880><c> especially</c><00:09:35.440><c> in</c>

00:09:35.509 --> 00:09:35.519 align:start position:0%
probably want to avoid lk especially in
 

00:09:35.519 --> 00:09:35.829 align:start position:0%
probably want to avoid lk especially in
this

00:09:35.829 --> 00:09:35.839 align:start position:0%
this
 

00:09:35.839 --> 00:09:37.670 align:start position:0%
this
instance<00:09:36.399><c> i</c><00:09:36.640><c> definitely</c><00:09:37.040><c> won't</c><00:09:37.279><c> tell</c><00:09:37.440><c> you</c><00:09:37.600><c> to</c>

00:09:37.670 --> 00:09:37.680 align:start position:0%
instance i definitely won't tell you to
 

00:09:37.680 --> 00:09:39.509 align:start position:0%
instance i definitely won't tell you to
avoid<00:09:38.000><c> allocate</c><00:09:38.480><c> in</c><00:09:38.560><c> life</c><00:09:38.880><c> in</c><00:09:38.959><c> general</c><00:09:39.360><c> just</c>

00:09:39.509 --> 00:09:39.519 align:start position:0%
avoid allocate in life in general just
 

00:09:39.519 --> 00:09:41.190 align:start position:0%
avoid allocate in life in general just
because<00:09:39.760><c> it</c><00:09:39.920><c> is</c><00:09:40.080><c> extremely</c><00:09:40.640><c> useful</c><00:09:41.040><c> and</c><00:09:41.120><c> it</c>

00:09:41.190 --> 00:09:41.200 align:start position:0%
because it is extremely useful and it
 

00:09:41.200 --> 00:09:42.790 align:start position:0%
because it is extremely useful and it
can<00:09:41.440><c> definitely</c><00:09:41.839><c> benefit</c><00:09:42.240><c> the</c><00:09:42.320><c> performance</c>

00:09:42.790 --> 00:09:42.800 align:start position:0%
can definitely benefit the performance
 

00:09:42.800 --> 00:09:44.630 align:start position:0%
can definitely benefit the performance
of<00:09:42.880><c> your</c><00:09:43.120><c> program</c><00:09:43.519><c> but</c><00:09:43.760><c> it's</c><00:09:44.000><c> totally</c>

00:09:44.630 --> 00:09:44.640 align:start position:0%
of your program but it's totally
 

00:09:44.640 --> 00:09:46.070 align:start position:0%
of your program but it's totally
outside<00:09:44.880><c> of</c><00:09:45.040><c> the</c><00:09:45.120><c> scope</c><00:09:45.360><c> of</c><00:09:45.440><c> this</c><00:09:45.600><c> tutorial</c><00:09:45.920><c> so</c>

00:09:46.070 --> 00:09:46.080 align:start position:0%
outside of the scope of this tutorial so
 

00:09:46.080 --> 00:09:47.750 align:start position:0%
outside of the scope of this tutorial so
we're<00:09:46.240><c> not</c><00:09:46.320><c> going</c><00:09:46.399><c> to</c><00:09:46.480><c> talk</c><00:09:46.640><c> about</c><00:09:46.880><c> it</c><00:09:46.959><c> here</c><00:09:47.519><c> at</c>

00:09:47.750 --> 00:09:47.760 align:start position:0%
we're not going to talk about it here at
 

00:09:47.760 --> 00:09:49.030 align:start position:0%
we're not going to talk about it here at
all<00:09:47.920><c> so</c><00:09:48.080><c> going</c><00:09:48.320><c> back</c><00:09:48.480><c> to</c><00:09:48.640><c> this</c>

00:09:49.030 --> 00:09:49.040 align:start position:0%
all so going back to this
 

00:09:49.040 --> 00:09:51.509 align:start position:0%
all so going back to this
what<00:09:49.279><c> are</c><00:09:49.519><c> our</c><00:09:49.839><c> options</c><00:09:50.399><c> if</c><00:09:50.560><c> we</c><00:09:50.720><c> simply</c><00:09:51.120><c> have</c><00:09:51.440><c> a</c>

00:09:51.509 --> 00:09:51.519 align:start position:0%
what are our options if we simply have a
 

00:09:51.519 --> 00:09:52.630 align:start position:0%
what are our options if we simply have a
declaration<00:09:52.160><c> like</c><00:09:52.320><c> this</c>

00:09:52.630 --> 00:09:52.640 align:start position:0%
declaration like this
 

00:09:52.640 --> 00:09:54.470 align:start position:0%
declaration like this
and<00:09:52.720><c> the</c><00:09:52.880><c> only</c><00:09:53.120><c> thing</c><00:09:53.279><c> we</c><00:09:53.440><c> can</c><00:09:53.600><c> really</c><00:09:53.920><c> do</c><00:09:54.240><c> is</c>

00:09:54.470 --> 00:09:54.480 align:start position:0%
and the only thing we can really do is
 

00:09:54.480 --> 00:09:56.230 align:start position:0%
and the only thing we can really do is
by<00:09:54.720><c> using</c><00:09:55.120><c> a</c><00:09:55.279><c> template</c><00:09:55.760><c> unless</c><00:09:56.000><c> we</c><00:09:56.080><c> want</c><00:09:56.160><c> to</c>

00:09:56.230 --> 00:09:56.240 align:start position:0%
by using a template unless we want to
 

00:09:56.240 --> 00:09:57.110 align:start position:0%
by using a template unless we want to
have<00:09:56.399><c> a</c><00:09:56.560><c> fixed</c>

00:09:57.110 --> 00:09:57.120 align:start position:0%
have a fixed
 

00:09:57.120 --> 00:09:59.430 align:start position:0%
have a fixed
size<00:09:57.680><c> array</c><00:09:58.240><c> which</c><00:09:58.480><c> means</c><00:09:58.720><c> that</c><00:09:58.880><c> we</c><00:09:59.040><c> just</c><00:09:59.200><c> have</c>

00:09:59.430 --> 00:09:59.440 align:start position:0%
size array which means that we just have
 

00:09:59.440 --> 00:10:01.509 align:start position:0%
size array which means that we just have
a<00:09:59.600><c> size</c><00:09:59.920><c> of</c><00:10:00.080><c> 10</c><00:10:00.320><c> and</c><00:10:00.399><c> that</c><00:10:00.640><c> is</c><00:10:00.800><c> just</c><00:10:01.040><c> like</c>

00:10:01.509 --> 00:10:01.519 align:start position:0%
a size of 10 and that is just like
 

00:10:01.519 --> 00:10:03.430 align:start position:0%
a size of 10 and that is just like
this<00:10:01.680><c> is</c><00:10:01.839><c> my</c><00:10:02.079><c> array</c><00:10:02.399><c> that</c><00:10:02.560><c> is</c><00:10:02.720><c> 10</c><00:10:03.040><c> integers</c>

00:10:03.430 --> 00:10:03.440 align:start position:0%
this is my array that is 10 integers
 

00:10:03.440 --> 00:10:05.030 align:start position:0%
this is my array that is 10 integers
large<00:10:03.839><c> or</c><00:10:03.920><c> something</c><00:10:04.240><c> like</c><00:10:04.399><c> that</c><00:10:04.640><c> which</c><00:10:04.880><c> is</c>

00:10:05.030 --> 00:10:05.040 align:start position:0%
large or something like that which is
 

00:10:05.040 --> 00:10:05.910 align:start position:0%
large or something like that which is
ridiculous

00:10:05.910 --> 00:10:05.920 align:start position:0%
ridiculous
 

00:10:05.920 --> 00:10:07.910 align:start position:0%
ridiculous
we<00:10:06.079><c> need</c><00:10:06.320><c> to</c><00:10:06.480><c> template</c><00:10:06.959><c> this</c><00:10:07.279><c> so</c><00:10:07.519><c> it's</c><00:10:07.680><c> really</c>

00:10:07.910 --> 00:10:07.920 align:start position:0%
we need to template this so it's really
 

00:10:07.920 --> 00:10:09.190 align:start position:0%
we need to template this so it's really
easy<00:10:08.160><c> to</c><00:10:08.240><c> write</c><00:10:08.480><c> this</c><00:10:08.640><c> if</c><00:10:08.800><c> you're</c><00:10:08.959><c> new</c><00:10:09.120><c> to</c>

00:10:09.190 --> 00:10:09.200 align:start position:0%
easy to write this if you're new to
 

00:10:09.200 --> 00:10:10.710 align:start position:0%
easy to write this if you're new to
templates<00:10:09.680><c> check</c><00:10:09.920><c> out</c><00:10:10.000><c> my</c><00:10:10.160><c> video</c><00:10:10.399><c> in</c><00:10:10.480><c> the</c><00:10:10.560><c> top</c>

00:10:10.710 --> 00:10:10.720 align:start position:0%
templates check out my video in the top
 

00:10:10.720 --> 00:10:12.550 align:start position:0%
templates check out my video in the top
right<00:10:10.959><c> corner</c><00:10:11.279><c> about</c><00:10:11.600><c> templates</c><00:10:12.079><c> but</c><00:10:12.320><c> all</c><00:10:12.399><c> we</c>

00:10:12.550 --> 00:10:12.560 align:start position:0%
right corner about templates but all we
 

00:10:12.560 --> 00:10:14.310 align:start position:0%
right corner about templates but all we
really<00:10:12.800><c> have</c><00:10:12.959><c> to</c><00:10:13.120><c> write</c><00:10:13.360><c> here</c><00:10:13.600><c> is</c><00:10:13.760><c> template</c>

00:10:14.310 --> 00:10:14.320 align:start position:0%
really have to write here is template
 

00:10:14.320 --> 00:10:15.269 align:start position:0%
really have to write here is template
size<00:10:14.720><c> t</c>

00:10:15.269 --> 00:10:15.279 align:start position:0%
size t
 

00:10:15.279 --> 00:10:18.389 align:start position:0%
size t
and<00:10:15.519><c> we'll</c><00:10:15.680><c> call</c><00:10:15.839><c> it</c><00:10:16.160><c> s</c><00:10:16.640><c> now</c><00:10:17.120><c> this</c><00:10:17.600><c> can</c><00:10:18.000><c> be</c>

00:10:18.389 --> 00:10:18.399 align:start position:0%
and we'll call it s now this can be
 

00:10:18.399 --> 00:10:20.790 align:start position:0%
and we'll call it s now this can be
you<00:10:18.560><c> can</c><00:10:18.720><c> write</c><00:10:18.880><c> this</c><00:10:19.120><c> as</c><00:10:19.279><c> an</c><00:10:19.440><c> int</c><00:10:20.240><c> usually</c><00:10:20.640><c> in</c>

00:10:20.790 --> 00:10:20.800 align:start position:0%
you can write this as an int usually in
 

00:10:20.800 --> 00:10:22.550 align:start position:0%
you can write this as an int usually in
c<00:10:21.200><c> plus</c><00:10:21.440><c> if</c><00:10:21.519><c> you're</c><00:10:21.680><c> referring</c><00:10:22.000><c> to</c><00:10:22.160><c> sizes</c><00:10:22.480><c> you</c>

00:10:22.550 --> 00:10:22.560 align:start position:0%
c plus if you're referring to sizes you
 

00:10:22.560 --> 00:10:23.590 align:start position:0%
c plus if you're referring to sizes you
want<00:10:22.720><c> to</c><00:10:22.800><c> use</c><00:10:22.959><c> the</c><00:10:23.120><c> size</c><00:10:23.360><c> t</c>

00:10:23.590 --> 00:10:23.600 align:start position:0%
want to use the size t
 

00:10:23.600 --> 00:10:25.670 align:start position:0%
want to use the size t
that's<00:10:23.839><c> certainly</c><00:10:24.320><c> what</c><00:10:24.560><c> the</c><00:10:24.720><c> entire</c><00:10:25.040><c> library</c>

00:10:25.670 --> 00:10:25.680 align:start position:0%
that's certainly what the entire library
 

00:10:25.680 --> 00:10:27.269 align:start position:0%
that's certainly what the entire library
uses<00:10:26.079><c> for</c><00:10:26.240><c> all</c><00:10:26.320><c> of</c><00:10:26.399><c> the</c><00:10:26.480><c> like</c><00:10:26.720><c> c</c><00:10:26.880><c> plus</c><00:10:27.040><c> plus</c>

00:10:27.269 --> 00:10:27.279 align:start position:0%
uses for all of the like c plus plus
 

00:10:27.279 --> 00:10:28.630 align:start position:0%
uses for all of the like c plus plus
internal<00:10:27.680><c> stuff</c><00:10:27.920><c> okay</c><00:10:28.160><c> so</c><00:10:28.320><c> now</c><00:10:28.399><c> that</c><00:10:28.560><c> we've</c>

00:10:28.630 --> 00:10:28.640 align:start position:0%
internal stuff okay so now that we've
 

00:10:28.640 --> 00:10:30.470 align:start position:0%
internal stuff okay so now that we've
got<00:10:28.880><c> that</c><00:10:29.040><c> we</c><00:10:29.200><c> can</c><00:10:29.360><c> simply</c><00:10:29.680><c> replace</c><00:10:30.000><c> this</c><00:10:30.240><c> 10</c>

00:10:30.470 --> 00:10:30.480 align:start position:0%
got that we can simply replace this 10
 

00:10:30.480 --> 00:10:31.430 align:start position:0%
got that we can simply replace this 10
with<00:10:30.640><c> the</c><00:10:30.880><c> size</c>

00:10:31.430 --> 00:10:31.440 align:start position:0%
with the size
 

00:10:31.440 --> 00:10:33.910 align:start position:0%
with the size
and<00:10:31.600><c> now</c><00:10:31.920><c> if</c><00:10:32.000><c> we</c><00:10:32.240><c> work</c><00:10:32.480><c> to</c><00:10:32.640><c> create</c><00:10:33.040><c> this</c><00:10:33.279><c> array</c>

00:10:33.910 --> 00:10:33.920 align:start position:0%
and now if we work to create this array
 

00:10:33.920 --> 00:10:35.269 align:start position:0%
and now if we work to create this array
instead<00:10:34.240><c> of</c><00:10:34.320><c> having</c><00:10:34.560><c> to</c><00:10:34.720><c> write</c><00:10:34.880><c> this</c><00:10:35.040><c> size</c>

00:10:35.269 --> 00:10:35.279 align:start position:0%
instead of having to write this size
 

00:10:35.279 --> 00:10:37.430 align:start position:0%
instead of having to write this size
here<00:10:35.519><c> what</c><00:10:35.680><c> we</c><00:10:35.839><c> need</c><00:10:36.000><c> to</c><00:10:36.079><c> do</c><00:10:36.320><c> is</c><00:10:36.560><c> specify</c><00:10:37.200><c> a</c>

00:10:37.430 --> 00:10:37.440 align:start position:0%
here what we need to do is specify a
 

00:10:37.440 --> 00:10:38.069 align:start position:0%
here what we need to do is specify a
size

00:10:38.069 --> 00:10:38.079 align:start position:0%
size
 

00:10:38.079 --> 00:10:40.230 align:start position:0%
size
like<00:10:38.320><c> 5</c><00:10:38.959><c> as</c><00:10:39.120><c> part</c><00:10:39.360><c> of</c><00:10:39.440><c> the</c><00:10:39.600><c> type</c><00:10:39.839><c> so</c><00:10:40.000><c> now</c><00:10:40.160><c> we</c>

00:10:40.230 --> 00:10:40.240 align:start position:0%
like 5 as part of the type so now we
 

00:10:40.240 --> 00:10:42.150 align:start position:0%
like 5 as part of the type so now we
have<00:10:40.399><c> a</c><00:10:40.560><c> templated</c><00:10:41.120><c> class</c><00:10:41.519><c> meaning</c><00:10:41.839><c> a</c><00:10:41.920><c> new</c>

00:10:42.150 --> 00:10:42.160 align:start position:0%
have a templated class meaning a new
 

00:10:42.160 --> 00:10:43.910 align:start position:0%
have a templated class meaning a new
version<00:10:42.560><c> of</c><00:10:42.640><c> this</c><00:10:42.880><c> class</c><00:10:43.200><c> will</c><00:10:43.360><c> physically</c><00:10:43.760><c> be</c>

00:10:43.910 --> 00:10:43.920 align:start position:0%
version of this class will physically be
 

00:10:43.920 --> 00:10:45.590 align:start position:0%
version of this class will physically be
created<00:10:44.240><c> by</c><00:10:44.399><c> the</c><00:10:44.560><c> compiler</c><00:10:45.120><c> with</c><00:10:45.360><c> our</c>

00:10:45.590 --> 00:10:45.600 align:start position:0%
created by the compiler with our
 

00:10:45.600 --> 00:10:46.069 align:start position:0%
created by the compiler with our
argument

00:10:46.069 --> 00:10:46.079 align:start position:0%
argument
 

00:10:46.079 --> 00:10:49.430 align:start position:0%
argument
every<00:10:46.399><c> time</c><00:10:46.720><c> we</c><00:10:46.880><c> create</c><00:10:47.279><c> a</c><00:10:47.440><c> new</c><00:10:48.160><c> array</c><00:10:48.880><c> type</c>

00:10:49.430 --> 00:10:49.440 align:start position:0%
every time we create a new array type
 

00:10:49.440 --> 00:10:51.750 align:start position:0%
every time we create a new array type
okay<00:10:49.760><c> cool</c><00:10:50.160><c> so</c><00:10:50.320><c> now</c><00:10:50.480><c> that</c><00:10:50.640><c> we've</c><00:10:51.120><c> got</c><00:10:51.360><c> a</c>

00:10:51.750 --> 00:10:51.760 align:start position:0%
okay cool so now that we've got a
 

00:10:51.760 --> 00:10:52.630 align:start position:0%
okay cool so now that we've got a
dynamic

00:10:52.630 --> 00:10:52.640 align:start position:0%
dynamic
 

00:10:52.640 --> 00:10:54.630 align:start position:0%
dynamic
ish<00:10:53.040><c> size</c><00:10:53.360><c> going</c><00:10:53.680><c> on</c><00:10:53.760><c> here</c><00:10:54.160><c> it's</c><00:10:54.240><c> not</c><00:10:54.399><c> really</c>

00:10:54.630 --> 00:10:54.640 align:start position:0%
ish size going on here it's not really
 

00:10:54.640 --> 00:10:56.230 align:start position:0%
ish size going on here it's not really
dynamic<00:10:55.040><c> we</c><00:10:55.200><c> still</c><00:10:55.360><c> have</c><00:10:55.440><c> to</c><00:10:55.600><c> specify</c><00:10:56.000><c> this</c><00:10:56.160><c> at</c>

00:10:56.230 --> 00:10:56.240 align:start position:0%
dynamic we still have to specify this at
 

00:10:56.240 --> 00:10:57.110 align:start position:0%
dynamic we still have to specify this at
compile<00:10:56.640><c> time</c>

00:10:57.110 --> 00:10:57.120 align:start position:0%
compile time
 

00:10:57.120 --> 00:10:58.550 align:start position:0%
compile time
there's<00:10:57.279><c> no</c><00:10:57.440><c> way</c><00:10:57.600><c> for</c><00:10:57.760><c> us</c><00:10:57.920><c> to</c><00:10:58.000><c> do</c><00:10:58.160><c> something</c>

00:10:58.550 --> 00:10:58.560 align:start position:0%
there's no way for us to do something
 

00:10:58.560 --> 00:11:00.790 align:start position:0%
there's no way for us to do something
like<00:10:58.880><c> this</c><00:10:59.279><c> at</c><00:10:59.440><c> least</c><00:10:59.920><c> unless</c><00:11:00.399><c> it's</c><00:11:00.560><c> a</c>

00:11:00.790 --> 00:11:00.800 align:start position:0%
like this at least unless it's a
 

00:11:00.800 --> 00:11:02.470 align:start position:0%
like this at least unless it's a
constant<00:11:01.200><c> expression</c><00:11:01.760><c> but</c><00:11:01.920><c> we're</c><00:11:02.079><c> not</c><00:11:02.240><c> really</c>

00:11:02.470 --> 00:11:02.480 align:start position:0%
constant expression but we're not really
 

00:11:02.480 --> 00:11:03.750 align:start position:0%
constant expression but we're not really
going<00:11:02.640><c> to</c><00:11:02.800><c> talk</c><00:11:02.959><c> about</c><00:11:03.200><c> that</c>

00:11:03.750 --> 00:11:03.760 align:start position:0%
going to talk about that
 

00:11:03.760 --> 00:11:06.230 align:start position:0%
going to talk about that
here<00:11:04.320><c> right</c><00:11:04.560><c> now</c><00:11:04.959><c> we</c><00:11:05.120><c> still</c><00:11:05.360><c> have</c><00:11:05.600><c> to</c><00:11:06.000><c> write</c>

00:11:06.230 --> 00:11:06.240 align:start position:0%
here right now we still have to write
 

00:11:06.240 --> 00:11:07.990 align:start position:0%
here right now we still have to write
the<00:11:06.399><c> size</c><00:11:06.640><c> of</c><00:11:06.800><c> our</c><00:11:06.959><c> array</c><00:11:07.360><c> up</c><00:11:07.519><c> front</c>

00:11:07.990 --> 00:11:08.000 align:start position:0%
the size of our array up front
 

00:11:08.000 --> 00:11:09.829 align:start position:0%
the size of our array up front
during<00:11:08.240><c> the</c><00:11:08.399><c> compilation</c><00:11:08.959><c> time</c><00:11:09.279><c> like</c><00:11:09.600><c> this</c>

00:11:09.829 --> 00:11:09.839 align:start position:0%
during the compilation time like this
 

00:11:09.839 --> 00:11:11.430 align:start position:0%
during the compilation time like this
which<00:11:10.000><c> is</c><00:11:10.160><c> usually</c><00:11:10.480><c> fine</c><00:11:10.800><c> because</c><00:11:11.120><c> of</c><00:11:11.200><c> course</c>

00:11:11.430 --> 00:11:11.440 align:start position:0%
which is usually fine because of course
 

00:11:11.440 --> 00:11:12.310 align:start position:0%
which is usually fine because of course
if<00:11:11.519><c> we're</c><00:11:11.680><c> making</c><00:11:12.000><c> sac</c>

00:11:12.310 --> 00:11:12.320 align:start position:0%
if we're making sac
 

00:11:12.320 --> 00:11:14.949 align:start position:0%
if we're making sac
allocated<00:11:12.880><c> arrays</c><00:11:13.279><c> anyway</c><00:11:14.079><c> we</c><00:11:14.320><c> just</c><00:11:14.560><c> simply</c>

00:11:14.949 --> 00:11:14.959 align:start position:0%
allocated arrays anyway we just simply
 

00:11:14.959 --> 00:11:15.829 align:start position:0%
allocated arrays anyway we just simply
write<00:11:15.200><c> the</c><00:11:15.360><c> size</c>

00:11:15.829 --> 00:11:15.839 align:start position:0%
write the size
 

00:11:15.839 --> 00:11:17.509 align:start position:0%
write the size
and<00:11:15.920><c> so</c><00:11:16.079><c> we're</c><00:11:16.240><c> used</c><00:11:16.480><c> to</c><00:11:16.560><c> that</c><00:11:16.720><c> that's</c><00:11:17.040><c> fine</c>

00:11:17.509 --> 00:11:17.519 align:start position:0%
and so we're used to that that's fine
 

00:11:17.519 --> 00:11:19.430 align:start position:0%
and so we're used to that that's fine
that's<00:11:17.760><c> what</c><00:11:17.920><c> a</c><00:11:18.079><c> fixed</c><00:11:18.320><c> size</c><00:11:18.640><c> stack</c><00:11:18.959><c> allocated</c>

00:11:19.430 --> 00:11:19.440 align:start position:0%
that's what a fixed size stack allocated
 

00:11:19.440 --> 00:11:21.110 align:start position:0%
that's what a fixed size stack allocated
array<00:11:19.760><c> is</c><00:11:20.000><c> all</c><00:11:20.079><c> about</c><00:11:20.399><c> which</c><00:11:20.640><c> is</c><00:11:20.720><c> what</c><00:11:20.880><c> this</c>

00:11:21.110 --> 00:11:21.120 align:start position:0%
array is all about which is what this
 

00:11:21.120 --> 00:11:22.790 align:start position:0%
array is all about which is what this
data<00:11:21.360><c> structure</c><00:11:21.760><c> is</c><00:11:22.000><c> so</c><00:11:22.160><c> now</c><00:11:22.320><c> how</c><00:11:22.480><c> do</c><00:11:22.560><c> we</c><00:11:22.640><c> make</c>

00:11:22.790 --> 00:11:22.800 align:start position:0%
data structure is so now how do we make
 

00:11:22.800 --> 00:11:24.710 align:start position:0%
data structure is so now how do we make
this<00:11:22.959><c> not</c><00:11:23.200><c> specific</c><00:11:23.600><c> to</c><00:11:23.760><c> integers</c><00:11:24.320><c> well</c><00:11:24.560><c> we</c>

00:11:24.710 --> 00:11:24.720 align:start position:0%
this not specific to integers well we
 

00:11:24.720 --> 00:11:25.990 align:start position:0%
this not specific to integers well we
just<00:11:24.880><c> need</c><00:11:25.040><c> to</c><00:11:25.120><c> add</c><00:11:25.279><c> another</c><00:11:25.519><c> template</c>

00:11:25.990 --> 00:11:26.000 align:start position:0%
just need to add another template
 

00:11:26.000 --> 00:11:26.630 align:start position:0%
just need to add another template
argument

00:11:26.630 --> 00:11:26.640 align:start position:0%
argument
 

00:11:26.640 --> 00:11:28.550 align:start position:0%
argument
so<00:11:26.800><c> i'll</c><00:11:26.959><c> write</c><00:11:27.200><c> in</c><00:11:27.360><c> type</c><00:11:27.600><c> name</c><00:11:27.920><c> t</c><00:11:28.320><c> at</c><00:11:28.399><c> the</c>

00:11:28.550 --> 00:11:28.560 align:start position:0%
so i'll write in type name t at the
 

00:11:28.560 --> 00:11:30.389 align:start position:0%
so i'll write in type name t at the
front<00:11:28.800><c> of</c><00:11:28.880><c> this</c><00:11:29.120><c> so</c><00:11:29.279><c> we</c><00:11:29.440><c> have</c><00:11:29.600><c> two</c><00:11:29.920><c> arguments</c>

00:11:30.389 --> 00:11:30.399 align:start position:0%
front of this so we have two arguments
 

00:11:30.399 --> 00:11:30.870 align:start position:0%
front of this so we have two arguments
here

00:11:30.870 --> 00:11:30.880 align:start position:0%
here
 

00:11:30.880 --> 00:11:33.030 align:start position:0%
here
type<00:11:31.200><c> name</c><00:11:31.440><c> t</c><00:11:31.760><c> which</c><00:11:32.000><c> is</c><00:11:32.079><c> going</c><00:11:32.320><c> to</c><00:11:32.480><c> be</c><00:11:32.800><c> the</c>

00:11:33.030 --> 00:11:33.040 align:start position:0%
type name t which is going to be the
 

00:11:33.040 --> 00:11:35.030 align:start position:0%
type name t which is going to be the
actual<00:11:33.519><c> type</c><00:11:33.760><c> of</c><00:11:33.920><c> data</c><00:11:34.240><c> that</c><00:11:34.320><c> we</c><00:11:34.480><c> store</c>

00:11:35.030 --> 00:11:35.040 align:start position:0%
actual type of data that we store
 

00:11:35.040 --> 00:11:37.590 align:start position:0%
actual type of data that we store
and<00:11:35.120><c> then</c><00:11:35.440><c> size</c><00:11:35.760><c> t</c><00:11:36.240><c> s</c><00:11:36.560><c> which</c><00:11:36.800><c> is</c><00:11:36.880><c> going</c><00:11:37.120><c> to</c><00:11:37.200><c> be</c>

00:11:37.590 --> 00:11:37.600 align:start position:0%
and then size t s which is going to be
 

00:11:37.600 --> 00:11:38.630 align:start position:0%
and then size t s which is going to be
the<00:11:38.000><c> number</c><00:11:38.399><c> of</c>

00:11:38.630 --> 00:11:38.640 align:start position:0%
the number of
 

00:11:38.640 --> 00:11:40.389 align:start position:0%
the number of
elements<00:11:39.040><c> that</c><00:11:39.200><c> we</c><00:11:39.279><c> have</c><00:11:39.519><c> here</c><00:11:39.760><c> or</c><00:11:39.839><c> the</c><00:11:40.079><c> count</c>

00:11:40.389 --> 00:11:40.399 align:start position:0%
elements that we have here or the count
 

00:11:40.399 --> 00:11:41.670 align:start position:0%
elements that we have here or the count
so<00:11:40.640><c> over</c><00:11:40.880><c> here</c><00:11:41.200><c> instead</c><00:11:41.440><c> of</c>

00:11:41.670 --> 00:11:41.680 align:start position:0%
so over here instead of
 

00:11:41.680 --> 00:11:43.670 align:start position:0%
so over here instead of
int<00:11:41.920><c> i'm</c><00:11:42.079><c> going</c><00:11:42.320><c> to</c><00:11:42.399><c> replace</c><00:11:42.800><c> this</c><00:11:42.959><c> with</c><00:11:43.200><c> t</c><00:11:43.519><c> so</c>

00:11:43.670 --> 00:11:43.680 align:start position:0%
int i'm going to replace this with t so
 

00:11:43.680 --> 00:11:45.110 align:start position:0%
int i'm going to replace this with t so
now<00:11:43.839><c> what</c><00:11:44.000><c> happens</c><00:11:44.320><c> is</c><00:11:44.480><c> when</c><00:11:44.640><c> i</c><00:11:44.720><c> make</c><00:11:44.880><c> this</c>

00:11:45.110 --> 00:11:45.120 align:start position:0%
now what happens is when i make this
 

00:11:45.120 --> 00:11:46.470 align:start position:0%
now what happens is when i make this
array<00:11:45.440><c> i</c><00:11:45.519><c> need</c><00:11:45.680><c> to</c><00:11:45.760><c> specify</c>

00:11:46.470 --> 00:11:46.480 align:start position:0%
array i need to specify
 

00:11:46.480 --> 00:11:49.829 align:start position:0%
array i need to specify
the<00:11:46.880><c> type</c><00:11:47.360><c> first</c><00:11:48.079><c> and</c><00:11:48.240><c> then</c><00:11:48.640><c> the</c><00:11:48.880><c> actual</c><00:11:49.440><c> size</c>

00:11:49.829 --> 00:11:49.839 align:start position:0%
the type first and then the actual size
 

00:11:49.839 --> 00:11:51.910 align:start position:0%
the type first and then the actual size
so<00:11:50.000><c> what</c><00:11:50.079><c> this</c><00:11:50.240><c> will</c><00:11:50.480><c> do</c><00:11:50.639><c> is</c><00:11:50.880><c> create</c><00:11:51.279><c> a</c><00:11:51.519><c> version</c>

00:11:51.910 --> 00:11:51.920 align:start position:0%
so what this will do is create a version
 

00:11:51.920 --> 00:11:53.110 align:start position:0%
so what this will do is create a version
of<00:11:52.079><c> this</c><00:11:52.320><c> class</c>

00:11:53.110 --> 00:11:53.120 align:start position:0%
of this class
 

00:11:53.120 --> 00:11:56.310 align:start position:0%
of this class
which<00:11:53.519><c> has</c><00:11:54.320><c> t</c><00:11:54.639><c> set</c><00:11:54.880><c> to</c><00:11:55.040><c> an</c><00:11:55.279><c> int</c><00:11:55.600><c> and</c><00:11:55.760><c> size</c><00:11:56.079><c> set</c>

00:11:56.310 --> 00:11:56.320 align:start position:0%
which has t set to an int and size set
 

00:11:56.320 --> 00:11:57.190 align:start position:0%
which has t set to an int and size set
to<00:11:56.560><c> five</c>

00:11:57.190 --> 00:11:57.200 align:start position:0%
to five
 

00:11:57.200 --> 00:11:59.350 align:start position:0%
to five
and<00:11:57.360><c> this</c><00:11:57.600><c> is</c><00:11:57.760><c> the</c><00:11:57.839><c> class</c><00:11:58.320><c> that</c><00:11:58.560><c> i</c><00:11:58.800><c> end</c><00:11:59.040><c> up</c><00:11:59.120><c> with</c>

00:11:59.350 --> 00:11:59.360 align:start position:0%
and this is the class that i end up with
 

00:11:59.360 --> 00:12:01.670 align:start position:0%
and this is the class that i end up with
when<00:11:59.519><c> i</c><00:11:59.680><c> compile</c><00:12:00.240><c> this</c><00:12:00.399><c> template</c><00:12:00.959><c> okay</c><00:12:01.279><c> cool</c>

00:12:01.670 --> 00:12:01.680 align:start position:0%
when i compile this template okay cool
 

00:12:01.680 --> 00:12:03.350 align:start position:0%
when i compile this template okay cool
so<00:12:01.839><c> now</c><00:12:02.000><c> that</c><00:12:02.079><c> i've</c><00:12:02.240><c> got</c><00:12:02.480><c> that</c><00:12:02.880><c> let's</c><00:12:03.120><c> take</c><00:12:03.279><c> a</c>

00:12:03.350 --> 00:12:03.360 align:start position:0%
so now that i've got that let's take a
 

00:12:03.360 --> 00:12:04.870 align:start position:0%
so now that i've got that let's take a
look<00:12:03.519><c> at</c><00:12:03.600><c> some</c><00:12:03.760><c> of</c><00:12:03.839><c> the</c><00:12:04.000><c> more</c><00:12:04.160><c> useful</c><00:12:04.480><c> features</c>

00:12:04.870 --> 00:12:04.880 align:start position:0%
look at some of the more useful features
 

00:12:04.880 --> 00:12:06.069 align:start position:0%
look at some of the more useful features
we<00:12:04.959><c> can</c><00:12:05.120><c> actually</c><00:12:05.360><c> add</c><00:12:05.519><c> to</c><00:12:05.680><c> this</c><00:12:05.839><c> class</c>

00:12:06.069 --> 00:12:06.079 align:start position:0%
we can actually add to this class
 

00:12:06.079 --> 00:12:07.350 align:start position:0%
we can actually add to this class
because<00:12:06.240><c> at</c><00:12:06.320><c> the</c><00:12:06.480><c> moment</c><00:12:06.800><c> it's</c><00:12:06.959><c> literally</c>

00:12:07.350 --> 00:12:07.360 align:start position:0%
because at the moment it's literally
 

00:12:07.360 --> 00:12:08.710 align:start position:0%
because at the moment it's literally
just<00:12:07.600><c> a</c><00:12:07.680><c> wrapper</c><00:12:08.079><c> over</c><00:12:08.320><c> what</c><00:12:08.480><c> we</c><00:12:08.560><c> could</c><00:12:08.639><c> have</c>

00:12:08.710 --> 00:12:08.720 align:start position:0%
just a wrapper over what we could have
 

00:12:08.720 --> 00:12:10.310 align:start position:0%
just a wrapper over what we could have
done<00:12:08.880><c> without</c><00:12:09.120><c> the</c><00:12:09.279><c> class</c><00:12:09.600><c> anyway</c>

00:12:10.310 --> 00:12:10.320 align:start position:0%
done without the class anyway
 

00:12:10.320 --> 00:12:11.590 align:start position:0%
done without the class anyway
now<00:12:10.480><c> one</c><00:12:10.560><c> of</c><00:12:10.720><c> the</c><00:12:10.800><c> most</c><00:12:10.959><c> useful</c><00:12:11.279><c> things</c><00:12:11.519><c> that</c>

00:12:11.590 --> 00:12:11.600 align:start position:0%
now one of the most useful things that
 

00:12:11.600 --> 00:12:13.750 align:start position:0%
now one of the most useful things that
we<00:12:11.760><c> can</c><00:12:11.839><c> do</c><00:12:12.079><c> here</c><00:12:12.320><c> is</c><00:12:12.480><c> actually</c><00:12:12.800><c> keep</c><00:12:13.040><c> track</c><00:12:13.360><c> of</c>

00:12:13.750 --> 00:12:13.760 align:start position:0%
we can do here is actually keep track of
 

00:12:13.760 --> 00:12:16.389 align:start position:0%
we can do here is actually keep track of
this<00:12:14.320><c> size</c><00:12:14.720><c> so</c><00:12:14.959><c> i</c><00:12:15.040><c> can</c><00:12:15.120><c> have</c><00:12:15.360><c> a</c><00:12:15.440><c> function</c><00:12:15.839><c> here</c>

00:12:16.389 --> 00:12:16.399 align:start position:0%
this size so i can have a function here
 

00:12:16.399 --> 00:12:17.590 align:start position:0%
this size so i can have a function here
that<00:12:16.560><c> returns</c><00:12:16.959><c> the</c><00:12:17.120><c> size</c>

00:12:17.590 --> 00:12:17.600 align:start position:0%
that returns the size
 

00:12:17.600 --> 00:12:19.670 align:start position:0%
that returns the size
i'll<00:12:17.760><c> just</c><00:12:18.079><c> call</c><00:12:18.320><c> it</c><00:12:18.480><c> size</c><00:12:18.959><c> i'll</c><00:12:19.120><c> label</c><00:12:19.440><c> it</c><00:12:19.519><c> as</c>

00:12:19.670 --> 00:12:19.680 align:start position:0%
i'll just call it size i'll label it as
 

00:12:19.680 --> 00:12:20.790 align:start position:0%
i'll just call it size i'll label it as
const<00:12:20.000><c> here</c><00:12:20.160><c> because</c><00:12:20.320><c> it's</c><00:12:20.399><c> not</c><00:12:20.560><c> going</c><00:12:20.720><c> to</c>

00:12:20.790 --> 00:12:20.800 align:start position:0%
const here because it's not going to
 

00:12:20.800 --> 00:12:22.710 align:start position:0%
const here because it's not going to
modify<00:12:21.200><c> this</c><00:12:21.360><c> class</c><00:12:21.760><c> and</c><00:12:21.920><c> it's</c><00:12:22.079><c> just</c><00:12:22.320><c> going</c><00:12:22.560><c> to</c>

00:12:22.710 --> 00:12:22.720 align:start position:0%
modify this class and it's just going to
 

00:12:22.720 --> 00:12:23.430 align:start position:0%
modify this class and it's just going to
return

00:12:23.430 --> 00:12:23.440 align:start position:0%
return
 

00:12:23.440 --> 00:12:25.990 align:start position:0%
return
s<00:12:24.079><c> now</c><00:12:24.240><c> this</c><00:12:24.480><c> is</c><00:12:24.639><c> interesting</c><00:12:25.120><c> because</c><00:12:25.760><c> keep</c>

00:12:25.990 --> 00:12:26.000 align:start position:0%
s now this is interesting because keep
 

00:12:26.000 --> 00:12:27.670 align:start position:0%
s now this is interesting because keep
in<00:12:26.079><c> mind</c><00:12:26.320><c> we're</c><00:12:26.480><c> not</c><00:12:26.720><c> actually</c><00:12:27.120><c> storing</c><00:12:27.519><c> the</c>

00:12:27.670 --> 00:12:27.680 align:start position:0%
in mind we're not actually storing the
 

00:12:27.680 --> 00:12:29.590 align:start position:0%
in mind we're not actually storing the
size<00:12:28.000><c> anyway</c><00:12:28.399><c> there</c><00:12:28.560><c> is</c><00:12:28.720><c> no</c><00:12:28.959><c> additional</c>

00:12:29.590 --> 00:12:29.600 align:start position:0%
size anyway there is no additional
 

00:12:29.600 --> 00:12:30.710 align:start position:0%
size anyway there is no additional
variable<00:12:30.079><c> here</c><00:12:30.399><c> called</c>

00:12:30.710 --> 00:12:30.720 align:start position:0%
variable here called
 

00:12:30.720 --> 00:12:33.269 align:start position:0%
variable here called
size<00:12:31.040><c> which</c><00:12:31.279><c> is</c><00:12:31.360><c> like</c><00:12:31.600><c> set</c><00:12:31.839><c> to</c><00:12:32.000><c> 5</c><00:12:32.399><c> or</c><00:12:32.880><c> set</c><00:12:33.040><c> to</c><00:12:33.200><c> a</c>

00:12:33.269 --> 00:12:33.279 align:start position:0%
size which is like set to 5 or set to a
 

00:12:33.279 --> 00:12:34.870 align:start position:0%
size which is like set to 5 or set to a
value<00:12:33.600><c> that</c><00:12:33.680><c> we</c><00:12:33.839><c> take</c><00:12:34.079><c> in</c><00:12:34.240><c> in</c><00:12:34.320><c> the</c><00:12:34.399><c> constructor</c>

00:12:34.870 --> 00:12:34.880 align:start position:0%
value that we take in in the constructor
 

00:12:34.880 --> 00:12:35.990 align:start position:0%
value that we take in in the constructor
during<00:12:35.200><c> runtime</c>

00:12:35.990 --> 00:12:36.000 align:start position:0%
during runtime
 

00:12:36.000 --> 00:12:38.870 align:start position:0%
during runtime
there<00:12:36.320><c> is</c><00:12:36.639><c> no</c><00:12:37.120><c> storage</c><00:12:37.519><c> for</c><00:12:37.680><c> this</c><00:12:37.920><c> whatsoever</c>

00:12:38.870 --> 00:12:38.880 align:start position:0%
there is no storage for this whatsoever
 

00:12:38.880 --> 00:12:39.350 align:start position:0%
there is no storage for this whatsoever
what<00:12:39.040><c> this</c>

00:12:39.350 --> 00:12:39.360 align:start position:0%
what this
 

00:12:39.360 --> 00:12:41.670 align:start position:0%
what this
actually<00:12:39.760><c> is</c><00:12:40.160><c> is</c><00:12:40.320><c> just</c><00:12:40.800><c> this</c><00:12:41.120><c> templated</c>

00:12:41.670 --> 00:12:41.680 align:start position:0%
actually is is just this templated
 

00:12:41.680 --> 00:12:43.030 align:start position:0%
actually is is just this templated
argument<00:12:42.079><c> meaning</c><00:12:42.320><c> that</c><00:12:42.480><c> when</c><00:12:42.720><c> this</c>

00:12:43.030 --> 00:12:43.040 align:start position:0%
argument meaning that when this
 

00:12:43.040 --> 00:12:44.389 align:start position:0%
argument meaning that when this
actually<00:12:43.360><c> when</c><00:12:43.519><c> this</c><00:12:43.600><c> template</c><00:12:44.079><c> actually</c>

00:12:44.389 --> 00:12:44.399 align:start position:0%
actually when this template actually
 

00:12:44.399 --> 00:12:46.710 align:start position:0%
actually when this template actually
gets<00:12:44.720><c> created</c><00:12:45.440><c> this</c><00:12:45.760><c> s</c><00:12:45.920><c> gets</c><00:12:46.160><c> replaced</c><00:12:46.560><c> with</c>

00:12:46.710 --> 00:12:46.720 align:start position:0%
gets created this s gets replaced with
 

00:12:46.720 --> 00:12:48.710 align:start position:0%
gets created this s gets replaced with
five<00:12:46.959><c> so</c><00:12:47.120><c> we</c><00:12:47.279><c> literally</c><00:12:47.680><c> have</c><00:12:47.839><c> a</c><00:12:48.000><c> function</c>

00:12:48.710 --> 00:12:48.720 align:start position:0%
five so we literally have a function
 

00:12:48.720 --> 00:12:50.790 align:start position:0%
five so we literally have a function
whose<00:12:48.959><c> sole</c><00:12:49.279><c> job</c><00:12:49.600><c> is</c><00:12:49.760><c> to</c><00:12:49.839><c> return</c><00:12:50.240><c> a</c><00:12:50.320><c> constant</c>

00:12:50.790 --> 00:12:50.800 align:start position:0%
whose sole job is to return a constant
 

00:12:50.800 --> 00:12:53.030 align:start position:0%
whose sole job is to return a constant
value<00:12:51.279><c> of</c><00:12:51.680><c> 5</c><00:12:52.079><c> and</c><00:12:52.240><c> that's</c><00:12:52.560><c> it</c>

00:12:53.030 --> 00:12:53.040 align:start position:0%
value of 5 and that's it
 

00:12:53.040 --> 00:12:54.790 align:start position:0%
value of 5 and that's it
there's<00:12:53.279><c> no</c><00:12:53.600><c> additional</c><00:12:54.079><c> storage</c><00:12:54.560><c> and</c><00:12:54.639><c> that's</c>

00:12:54.790 --> 00:12:54.800 align:start position:0%
there's no additional storage and that's
 

00:12:54.800 --> 00:12:56.310 align:start position:0%
there's no additional storage and that's
one<00:12:54.959><c> of</c><00:12:55.040><c> the</c><00:12:55.120><c> cool</c><00:12:55.360><c> things</c><00:12:55.600><c> about</c><00:12:55.760><c> this</c><00:12:56.000><c> class</c>

00:12:56.310 --> 00:12:56.320 align:start position:0%
one of the cool things about this class
 

00:12:56.320 --> 00:12:57.990 align:start position:0%
one of the cool things about this class
as<00:12:56.399><c> well</c><00:12:56.639><c> and</c><00:12:56.800><c> by</c><00:12:56.959><c> using</c><00:12:57.279><c> templates</c>

00:12:57.990 --> 00:12:58.000 align:start position:0%
as well and by using templates
 

00:12:58.000 --> 00:13:00.150 align:start position:0%
as well and by using templates
we're<00:12:58.240><c> able</c><00:12:58.480><c> to</c><00:12:58.639><c> actually</c><00:12:59.120><c> hard</c><00:12:59.440><c> code</c><00:12:59.839><c> this</c>

00:13:00.150 --> 00:13:00.160 align:start position:0%
we're able to actually hard code this
 

00:13:00.160 --> 00:13:01.990 align:start position:0%
we're able to actually hard code this
particular<00:13:00.959><c> function</c><00:13:01.360><c> these</c><00:13:01.519><c> particular</c>

00:13:01.990 --> 00:13:02.000 align:start position:0%
particular function these particular
 

00:13:02.000 --> 00:13:03.350 align:start position:0%
particular function these particular
machine<00:13:02.320><c> instructions</c><00:13:02.800><c> to</c><00:13:02.880><c> just</c><00:13:03.040><c> simply</c>

00:13:03.350 --> 00:13:03.360 align:start position:0%
machine instructions to just simply
 

00:13:03.360 --> 00:13:04.150 align:start position:0%
machine instructions to just simply
return<00:13:03.760><c> 5</c>

00:13:04.150 --> 00:13:04.160 align:start position:0%
return 5
 

00:13:04.160 --> 00:13:06.470 align:start position:0%
return 5
every<00:13:04.480><c> time</c><00:13:04.880><c> which</c><00:13:05.120><c> is</c><00:13:05.360><c> super</c><00:13:05.680><c> nice</c><00:13:06.079><c> because</c>

00:13:06.470 --> 00:13:06.480 align:start position:0%
every time which is super nice because
 

00:13:06.480 --> 00:13:08.150 align:start position:0%
every time which is super nice because
we're<00:13:06.639><c> not</c><00:13:06.800><c> using</c><00:13:07.120><c> additional</c><00:13:07.600><c> memory</c><00:13:08.000><c> to</c>

00:13:08.150 --> 00:13:08.160 align:start position:0%
we're not using additional memory to
 

00:13:08.160 --> 00:13:08.710 align:start position:0%
we're not using additional memory to
store

00:13:08.710 --> 00:13:08.720 align:start position:0%
store
 

00:13:08.720 --> 00:13:10.310 align:start position:0%
store
that<00:13:09.040><c> now</c><00:13:09.200><c> this</c><00:13:09.440><c> is</c><00:13:09.519><c> great</c><00:13:09.760><c> because</c><00:13:10.000><c> it</c><00:13:10.079><c> lets</c>

00:13:10.310 --> 00:13:10.320 align:start position:0%
that now this is great because it lets
 

00:13:10.320 --> 00:13:12.230 align:start position:0%
that now this is great because it lets
us<00:13:10.560><c> actually</c><00:13:10.959><c> check</c><00:13:11.120><c> the</c><00:13:11.279><c> size</c><00:13:11.600><c> of</c><00:13:11.760><c> this</c><00:13:11.920><c> array</c>

00:13:12.230 --> 00:13:12.240 align:start position:0%
us actually check the size of this array
 

00:13:12.240 --> 00:13:12.790 align:start position:0%
us actually check the size of this array
we<00:13:12.320><c> can</c><00:13:12.480><c> now</c>

00:13:12.790 --> 00:13:12.800 align:start position:0%
we can now
 

00:13:12.800 --> 00:13:15.590 align:start position:0%
we can now
call<00:13:13.120><c> data.size</c><00:13:14.079><c> and</c><00:13:14.399><c> immediately</c><00:13:15.040><c> this</c><00:13:15.279><c> is</c>

00:13:15.590 --> 00:13:15.600 align:start position:0%
call data.size and immediately this is
 

00:13:15.600 --> 00:13:17.590 align:start position:0%
call data.size and immediately this is
already<00:13:16.160><c> better</c><00:13:16.399><c> than</c><00:13:16.639><c> just</c><00:13:16.880><c> having</c><00:13:17.200><c> a</c><00:13:17.279><c> stack</c>

00:13:17.590 --> 00:13:17.600 align:start position:0%
already better than just having a stack
 

00:13:17.600 --> 00:13:19.350 align:start position:0%
already better than just having a stack
allocated<00:13:18.079><c> array</c><00:13:18.399><c> because</c><00:13:18.639><c> we</c><00:13:18.800><c> now</c><00:13:18.959><c> know</c><00:13:19.200><c> the</c>

00:13:19.350 --> 00:13:19.360 align:start position:0%
allocated array because we now know the
 

00:13:19.360 --> 00:13:20.069 align:start position:0%
allocated array because we now know the
size

00:13:20.069 --> 00:13:20.079 align:start position:0%
size
 

00:13:20.079 --> 00:13:21.670 align:start position:0%
size
of<00:13:20.240><c> this</c><00:13:20.480><c> array</c><00:13:20.720><c> at</c><00:13:20.800><c> any</c><00:13:20.959><c> given</c><00:13:21.200><c> time</c><00:13:21.440><c> i</c><00:13:21.519><c> could</c>

00:13:21.670 --> 00:13:21.680 align:start position:0%
of this array at any given time i could
 

00:13:21.680 --> 00:13:23.670 align:start position:0%
of this array at any given time i could
simply<00:13:22.399><c> pair</c><00:13:22.560><c> this</c><00:13:22.720><c> with</c><00:13:22.959><c> a</c><00:13:23.040><c> for</c><00:13:23.200><c> loop</c><00:13:23.519><c> like</c>

00:13:23.670 --> 00:13:23.680 align:start position:0%
simply pair this with a for loop like
 

00:13:23.680 --> 00:13:24.389 align:start position:0%
simply pair this with a for loop like
this<00:13:24.000><c> to</c>

00:13:24.389 --> 00:13:24.399 align:start position:0%
this to
 

00:13:24.399 --> 00:13:26.550 align:start position:0%
this to
iterate<00:13:24.959><c> through</c><00:13:25.279><c> all</c><00:13:25.440><c> of</c><00:13:25.519><c> the</c><00:13:25.680><c> members</c><00:13:26.399><c> of</c>

00:13:26.550 --> 00:13:26.560 align:start position:0%
iterate through all of the members of
 

00:13:26.560 --> 00:13:27.590 align:start position:0%
iterate through all of the members of
this<00:13:26.800><c> actual</c><00:13:27.200><c> array</c>

00:13:27.590 --> 00:13:27.600 align:start position:0%
this actual array
 

00:13:27.600 --> 00:13:29.430 align:start position:0%
this actual array
simple<00:13:28.000><c> as</c><00:13:28.160><c> that</c><00:13:28.399><c> however</c><00:13:28.880><c> there</c><00:13:29.120><c> are</c><00:13:29.200><c> some</c>

00:13:29.430 --> 00:13:29.440 align:start position:0%
simple as that however there are some
 

00:13:29.440 --> 00:13:30.870 align:start position:0%
simple as that however there are some
improvements<00:13:29.920><c> we</c><00:13:30.000><c> can</c><00:13:30.160><c> actually</c><00:13:30.480><c> make</c><00:13:30.720><c> to</c>

00:13:30.870 --> 00:13:30.880 align:start position:0%
improvements we can actually make to
 

00:13:30.880 --> 00:13:32.790 align:start position:0%
improvements we can actually make to
this<00:13:31.120><c> function</c><00:13:31.519><c> namely</c><00:13:31.839><c> the</c><00:13:32.000><c> fact</c><00:13:32.320><c> that</c>

00:13:32.790 --> 00:13:32.800 align:start position:0%
this function namely the fact that
 

00:13:32.800 --> 00:13:34.710 align:start position:0%
this function namely the fact that
this<00:13:33.040><c> is</c><00:13:33.120><c> clearly</c><00:13:33.519><c> a</c><00:13:33.600><c> value</c><00:13:34.000><c> that</c><00:13:34.160><c> we</c><00:13:34.240><c> know</c><00:13:34.560><c> at</c>

00:13:34.710 --> 00:13:34.720 align:start position:0%
this is clearly a value that we know at
 

00:13:34.720 --> 00:13:36.389 align:start position:0%
this is clearly a value that we know at
compile<00:13:35.120><c> time</c><00:13:35.440><c> so</c><00:13:35.600><c> why</c><00:13:35.839><c> not</c><00:13:36.079><c> let</c>

00:13:36.389 --> 00:13:36.399 align:start position:0%
compile time so why not let
 

00:13:36.399 --> 00:13:38.949 align:start position:0%
compile time so why not let
other<00:13:36.639><c> compile</c><00:13:37.120><c> time</c><00:13:37.440><c> tasks</c><00:13:38.160><c> be</c><00:13:38.320><c> able</c><00:13:38.560><c> to</c><00:13:38.720><c> take</c>

00:13:38.949 --> 00:13:38.959 align:start position:0%
other compile time tasks be able to take
 

00:13:38.959 --> 00:13:40.389 align:start position:0%
other compile time tasks be able to take
advantage<00:13:39.440><c> of</c><00:13:39.519><c> that</c><00:13:39.760><c> value</c>

00:13:40.389 --> 00:13:40.399 align:start position:0%
advantage of that value
 

00:13:40.399 --> 00:13:42.949 align:start position:0%
advantage of that value
one<00:13:40.639><c> example</c><00:13:41.120><c> is</c><00:13:41.279><c> a</c><00:13:41.360><c> static</c><00:13:41.760><c> assert</c><00:13:42.480><c> maybe</c><00:13:42.800><c> i</c>

00:13:42.949 --> 00:13:42.959 align:start position:0%
one example is a static assert maybe i
 

00:13:42.959 --> 00:13:43.670 align:start position:0%
one example is a static assert maybe i
don't<00:13:43.279><c> want</c>

00:13:43.670 --> 00:13:43.680 align:start position:0%
don't want
 

00:13:43.680 --> 00:13:46.069 align:start position:0%
don't want
these<00:13:43.920><c> arrays</c><00:13:44.240><c> to</c><00:13:44.399><c> be</c><00:13:44.639><c> above</c><00:13:44.959><c> a</c><00:13:45.040><c> certain</c><00:13:45.600><c> size</c>

00:13:46.069 --> 00:13:46.079 align:start position:0%
these arrays to be above a certain size
 

00:13:46.079 --> 00:13:47.030 align:start position:0%
these arrays to be above a certain size
for<00:13:46.240><c> some</c><00:13:46.480><c> reason</c>

00:13:47.030 --> 00:13:47.040 align:start position:0%
for some reason
 

00:13:47.040 --> 00:13:48.870 align:start position:0%
for some reason
so<00:13:47.199><c> i</c><00:13:47.279><c> could</c><00:13:47.519><c> add</c><00:13:47.600><c> a</c><00:13:47.760><c> static</c><00:13:48.079><c> assert</c><00:13:48.720><c> that</c>

00:13:48.870 --> 00:13:48.880 align:start position:0%
so i could add a static assert that
 

00:13:48.880 --> 00:13:50.550 align:start position:0%
so i could add a static assert that
simply<00:13:49.199><c> checks</c><00:13:49.519><c> to</c><00:13:49.600><c> make</c><00:13:49.760><c> sure</c><00:13:50.000><c> that</c><00:13:50.160><c> the</c><00:13:50.320><c> size</c>

00:13:50.550 --> 00:13:50.560 align:start position:0%
simply checks to make sure that the size
 

00:13:50.560 --> 00:13:51.269 align:start position:0%
simply checks to make sure that the size
of<00:13:50.639><c> this</c><00:13:50.800><c> array</c>

00:13:51.269 --> 00:13:51.279 align:start position:0%
of this array
 

00:13:51.279 --> 00:13:53.269 align:start position:0%
of this array
is<00:13:51.519><c> less</c><00:13:51.760><c> than</c><00:13:52.000><c> 10</c><00:13:52.320><c> and</c><00:13:52.480><c> i</c><00:13:52.560><c> can</c><00:13:52.720><c> write</c><00:13:52.959><c> it</c><00:13:53.040><c> like</c>

00:13:53.269 --> 00:13:53.279 align:start position:0%
is less than 10 and i can write it like
 

00:13:53.279 --> 00:13:55.030 align:start position:0%
is less than 10 and i can write it like
this<00:13:53.600><c> i'll</c><00:13:53.760><c> add</c><00:13:53.920><c> a</c><00:13:54.079><c> little</c><00:13:54.320><c> message</c><00:13:54.639><c> here</c><00:13:54.880><c> as</c>

00:13:55.030 --> 00:13:55.040 align:start position:0%
this i'll add a little message here as
 

00:13:55.040 --> 00:13:55.430 align:start position:0%
this i'll add a little message here as
well

00:13:55.430 --> 00:13:55.440 align:start position:0%
well
 

00:13:55.440 --> 00:13:57.269 align:start position:0%
well
and<00:13:55.600><c> a</c><00:13:55.760><c> static</c><00:13:56.079><c> assert</c><00:13:56.480><c> is</c><00:13:56.639><c> an</c><00:13:56.720><c> assert</c><00:13:57.040><c> that</c>

00:13:57.269 --> 00:13:57.279 align:start position:0%
and a static assert is an assert that
 

00:13:57.279 --> 00:13:59.430 align:start position:0%
and a static assert is an assert that
actually<00:13:57.600><c> gets</c><00:13:57.839><c> evaluated</c><00:13:58.480><c> at</c><00:13:58.639><c> compile</c><00:13:59.199><c> time</c>

00:13:59.430 --> 00:13:59.440 align:start position:0%
actually gets evaluated at compile time
 

00:13:59.440 --> 00:14:01.509 align:start position:0%
actually gets evaluated at compile time
this<00:13:59.760><c> theoretically</c><00:14:00.480><c> should</c><00:14:00.720><c> work</c><00:14:01.040><c> because</c><00:14:01.440><c> i</c>

00:14:01.509 --> 00:14:01.519 align:start position:0%
this theoretically should work because i
 

00:14:01.519 --> 00:14:03.350 align:start position:0%
this theoretically should work because i
mean<00:14:01.680><c> we</c><00:14:01.839><c> know</c><00:14:02.000><c> the</c><00:14:02.240><c> size</c><00:14:02.560><c> at</c><00:14:02.720><c> compile</c><00:14:03.120><c> time</c>

00:14:03.350 --> 00:14:03.360 align:start position:0%
mean we know the size at compile time
 

00:14:03.360 --> 00:14:04.949 align:start position:0%
mean we know the size at compile time
we're<00:14:03.519><c> forced</c><00:14:03.839><c> to</c><00:14:03.920><c> specify</c><00:14:04.480><c> the</c><00:14:04.639><c> size</c><00:14:04.880><c> of</c>

00:14:04.949 --> 00:14:04.959 align:start position:0%
we're forced to specify the size of
 

00:14:04.959 --> 00:14:05.990 align:start position:0%
we're forced to specify the size of
compile<00:14:05.440><c> time</c>

00:14:05.990 --> 00:14:06.000 align:start position:0%
compile time
 

00:14:06.000 --> 00:14:07.269 align:start position:0%
compile time
however<00:14:06.320><c> you</c><00:14:06.480><c> can</c><00:14:06.560><c> see</c><00:14:06.720><c> here</c><00:14:06.880><c> that</c><00:14:07.040><c> it</c><00:14:07.120><c> says</c>

00:14:07.269 --> 00:14:07.279 align:start position:0%
however you can see here that it says
 

00:14:07.279 --> 00:14:09.189 align:start position:0%
however you can see here that it says
that<00:14:07.440><c> the</c><00:14:07.519><c> expression</c><00:14:08.000><c> must</c><00:14:08.320><c> have</c><00:14:08.480><c> a</c><00:14:08.639><c> constant</c>

00:14:09.189 --> 00:14:09.199 align:start position:0%
that the expression must have a constant
 

00:14:09.199 --> 00:14:11.110 align:start position:0%
that the expression must have a constant
value<00:14:09.600><c> and</c><00:14:09.680><c> that's</c><00:14:09.920><c> because</c><00:14:10.320><c> this</c><00:14:10.800><c> size</c>

00:14:11.110 --> 00:14:11.120 align:start position:0%
value and that's because this size
 

00:14:11.120 --> 00:14:12.310 align:start position:0%
value and that's because this size
function<00:14:11.680><c> simply</c>

00:14:12.310 --> 00:14:12.320 align:start position:0%
function simply
 

00:14:12.320 --> 00:14:14.790 align:start position:0%
function simply
returns<00:14:13.120><c> an</c><00:14:13.279><c> integer</c><00:14:13.839><c> what</c><00:14:14.000><c> it</c><00:14:14.160><c> should</c><00:14:14.320><c> return</c>

00:14:14.790 --> 00:14:14.800 align:start position:0%
returns an integer what it should return
 

00:14:14.800 --> 00:14:15.829 align:start position:0%
returns an integer what it should return
is<00:14:15.120><c> a</c><00:14:15.279><c> constant</c>

00:14:15.829 --> 00:14:15.839 align:start position:0%
is a constant
 

00:14:15.839 --> 00:14:17.750 align:start position:0%
is a constant
expression<00:14:16.480><c> by</c><00:14:16.639><c> adding</c><00:14:16.880><c> the</c><00:14:17.040><c> const</c><00:14:17.440><c> x</c><00:14:17.600><c> per</c>

00:14:17.750 --> 00:14:17.760 align:start position:0%
expression by adding the const x per
 

00:14:17.760 --> 00:14:19.590 align:start position:0%
expression by adding the const x per
keyword<00:14:18.160><c> here</c><00:14:18.399><c> we're</c><00:14:18.639><c> specifying</c><00:14:19.199><c> that</c><00:14:19.360><c> this</c>

00:14:19.590 --> 00:14:19.600 align:start position:0%
keyword here we're specifying that this
 

00:14:19.600 --> 00:14:20.550 align:start position:0%
keyword here we're specifying that this
actual<00:14:20.000><c> function</c>

00:14:20.550 --> 00:14:20.560 align:start position:0%
actual function
 

00:14:20.560 --> 00:14:22.790 align:start position:0%
actual function
can<00:14:20.800><c> be</c><00:14:20.959><c> evaluated</c><00:14:21.760><c> at</c><00:14:21.920><c> compile</c><00:14:22.320><c> time</c><00:14:22.639><c> and</c>

00:14:22.790 --> 00:14:22.800 align:start position:0%
can be evaluated at compile time and
 

00:14:22.800 --> 00:14:23.750 align:start position:0%
can be evaluated at compile time and
since<00:14:23.040><c> it</c><00:14:23.199><c> can</c>

00:14:23.750 --> 00:14:23.760 align:start position:0%
since it can
 

00:14:23.760 --> 00:14:26.069 align:start position:0%
since it can
you<00:14:23.920><c> can</c><00:14:24.079><c> see</c><00:14:24.320><c> the</c><00:14:24.560><c> assert</c><00:14:24.959><c> here</c><00:14:25.360><c> works</c><00:14:25.760><c> fine</c>

00:14:26.069 --> 00:14:26.079 align:start position:0%
you can see the assert here works fine
 

00:14:26.079 --> 00:14:28.389 align:start position:0%
you can see the assert here works fine
it<00:14:26.240><c> also</c><00:14:26.560><c> lets</c><00:14:26.800><c> us</c><00:14:27.040><c> create</c><00:14:27.360><c> new</c><00:14:27.680><c> arrays</c>

00:14:28.389 --> 00:14:28.399 align:start position:0%
it also lets us create new arrays
 

00:14:28.399 --> 00:14:31.269 align:start position:0%
it also lets us create new arrays
from<00:14:28.720><c> the</c><00:14:28.959><c> size</c><00:14:29.440><c> of</c><00:14:29.680><c> that</c><00:14:30.320><c> first</c><00:14:30.720><c> array</c>

00:14:31.269 --> 00:14:31.279 align:start position:0%
from the size of that first array
 

00:14:31.279 --> 00:14:31.990 align:start position:0%
from the size of that first array
because<00:14:31.519><c> again</c>

00:14:31.990 --> 00:14:32.000 align:start position:0%
because again
 

00:14:32.000 --> 00:14:33.910 align:start position:0%
because again
data.size<00:14:32.880><c> is</c><00:14:33.040><c> a</c><00:14:33.120><c> function</c><00:14:33.519><c> that</c><00:14:33.680><c> can</c>

00:14:33.910 --> 00:14:33.920 align:start position:0%
data.size is a function that can
 

00:14:33.920 --> 00:14:36.470 align:start position:0%
data.size is a function that can
actually<00:14:34.399><c> be</c><00:14:34.560><c> evaluated</c><00:14:35.440><c> completely</c>

00:14:36.470 --> 00:14:36.480 align:start position:0%
actually be evaluated completely
 

00:14:36.480 --> 00:14:38.790 align:start position:0%
actually be evaluated completely
during<00:14:36.800><c> compile</c><00:14:37.279><c> time</c><00:14:37.839><c> and</c><00:14:38.000><c> that's</c><00:14:38.240><c> also</c><00:14:38.639><c> the</c>

00:14:38.790 --> 00:14:38.800 align:start position:0%
during compile time and that's also the
 

00:14:38.800 --> 00:14:39.990 align:start position:0%
during compile time and that's also the
reason<00:14:39.199><c> why</c><00:14:39.440><c> inside</c>

00:14:39.990 --> 00:14:40.000 align:start position:0%
reason why inside
 

00:14:40.000 --> 00:14:42.470 align:start position:0%
reason why inside
the<00:14:40.320><c> c</c><00:14:40.480><c> plus</c><00:14:40.720><c> plus</c><00:14:41.040><c> array</c><00:14:41.360><c> function</c><00:14:41.920><c> lots</c><00:14:42.320><c> of</c>

00:14:42.470 --> 00:14:42.480 align:start position:0%
the c plus plus array function lots of
 

00:14:42.480 --> 00:14:43.990 align:start position:0%
the c plus plus array function lots of
their<00:14:42.639><c> functions</c><00:14:43.120><c> here</c><00:14:43.279><c> as</c><00:14:43.440><c> you</c><00:14:43.519><c> can</c><00:14:43.600><c> see</c>

00:14:43.990 --> 00:14:44.000 align:start position:0%
their functions here as you can see
 

00:14:44.000 --> 00:14:45.990 align:start position:0%
their functions here as you can see
actually<00:14:44.399><c> returns</c><00:14:44.800><c> a</c><00:14:44.880><c> constant</c><00:14:45.360><c> expression</c>

00:14:45.990 --> 00:14:46.000 align:start position:0%
actually returns a constant expression
 

00:14:46.000 --> 00:14:47.430 align:start position:0%
actually returns a constant expression
or<00:14:46.160><c> rather</c><00:14:46.480><c> most</c><00:14:46.720><c> of</c><00:14:46.800><c> these</c><00:14:46.959><c> functions</c>

00:14:47.430 --> 00:14:47.440 align:start position:0%
or rather most of these functions
 

00:14:47.440 --> 00:14:49.350 align:start position:0%
or rather most of these functions
are<00:14:47.680><c> constant</c><00:14:48.160><c> expressions</c><00:14:48.800><c> okay</c><00:14:49.040><c> so</c><00:14:49.199><c> now</c>

00:14:49.350 --> 00:14:49.360 align:start position:0%
are constant expressions okay so now
 

00:14:49.360 --> 00:14:50.710 align:start position:0%
are constant expressions okay so now
that<00:14:49.519><c> we've</c><00:14:49.760><c> done</c><00:14:50.079><c> this</c>

00:14:50.710 --> 00:14:50.720 align:start position:0%
that we've done this
 

00:14:50.720 --> 00:14:52.150 align:start position:0%
that we've done this
how<00:14:50.880><c> do</c><00:14:50.959><c> we</c><00:14:51.199><c> iterate</c><00:14:51.519><c> through</c><00:14:51.680><c> this</c><00:14:51.839><c> array</c><00:14:52.079><c> and</c>

00:14:52.150 --> 00:14:52.160 align:start position:0%
how do we iterate through this array and
 

00:14:52.160 --> 00:14:53.670 align:start position:0%
how do we iterate through this array and
actually<00:14:52.399><c> pull</c><00:14:52.639><c> out</c><00:14:52.720><c> the</c><00:14:52.800><c> values</c><00:14:53.120><c> because</c><00:14:53.519><c> at</c>

00:14:53.670 --> 00:14:53.680 align:start position:0%
actually pull out the values because at
 

00:14:53.680 --> 00:14:54.310 align:start position:0%
actually pull out the values because at
the<00:14:53.839><c> moment</c>

00:14:54.310 --> 00:14:54.320 align:start position:0%
the moment
 

00:14:54.320 --> 00:14:55.670 align:start position:0%
the moment
even<00:14:54.480><c> though</c><00:14:54.639><c> i've</c><00:14:54.800><c> got</c><00:14:55.040><c> all</c><00:14:55.199><c> of</c><00:14:55.279><c> this</c><00:14:55.440><c> stuff</c>

00:14:55.670 --> 00:14:55.680 align:start position:0%
even though i've got all of this stuff
 

00:14:55.680 --> 00:14:57.670 align:start position:0%
even though i've got all of this stuff
going<00:14:56.000><c> on</c><00:14:56.399><c> there's</c><00:14:56.720><c> no</c><00:14:56.959><c> way</c><00:14:57.120><c> for</c><00:14:57.279><c> me</c><00:14:57.440><c> to</c>

00:14:57.670 --> 00:14:57.680 align:start position:0%
going on there's no way for me to
 

00:14:57.680 --> 00:14:58.230 align:start position:0%
going on there's no way for me to
actually

00:14:58.230 --> 00:14:58.240 align:start position:0%
actually
 

00:14:58.240 --> 00:15:00.710 align:start position:0%
actually
index<00:14:58.959><c> this</c><00:14:59.440><c> data</c><00:15:00.079><c> now</c><00:15:00.240><c> i</c><00:15:00.320><c> could</c><00:15:00.480><c> simply</c>

00:15:00.710 --> 00:15:00.720 align:start position:0%
index this data now i could simply
 

00:15:00.720 --> 00:15:02.550 align:start position:0%
index this data now i could simply
return<00:15:01.120><c> a</c><00:15:01.199><c> pointer</c><00:15:01.680><c> to</c><00:15:01.839><c> this</c><00:15:02.000><c> data</c><00:15:02.320><c> but</c><00:15:02.480><c> a</c>

00:15:02.550 --> 00:15:02.560 align:start position:0%
return a pointer to this data but a
 

00:15:02.560 --> 00:15:04.150 align:start position:0%
return a pointer to this data but a
better<00:15:02.800><c> way</c><00:15:02.959><c> to</c><00:15:03.120><c> do</c><00:15:03.279><c> this</c><00:15:03.519><c> is</c><00:15:03.600><c> to</c><00:15:03.760><c> implement</c>

00:15:04.150 --> 00:15:04.160 align:start position:0%
better way to do this is to implement
 

00:15:04.160 --> 00:15:05.509 align:start position:0%
better way to do this is to implement
the<00:15:04.399><c> index</c><00:15:04.880><c> operator</c>

00:15:05.509 --> 00:15:05.519 align:start position:0%
the index operator
 

00:15:05.519 --> 00:15:07.030 align:start position:0%
the index operator
and<00:15:05.600><c> i</c><00:15:05.680><c> can</c><00:15:05.839><c> write</c><00:15:06.000><c> a</c><00:15:06.079><c> simple</c><00:15:06.399><c> version</c><00:15:06.720><c> of</c><00:15:06.800><c> this</c>

00:15:07.030 --> 00:15:07.040 align:start position:0%
and i can write a simple version of this
 

00:15:07.040 --> 00:15:09.269 align:start position:0%
and i can write a simple version of this
by<00:15:07.199><c> just</c><00:15:07.440><c> writing</c><00:15:07.839><c> t</c><00:15:08.240><c> then</c><00:15:08.480><c> operator</c>

00:15:09.269 --> 00:15:09.279 align:start position:0%
by just writing t then operator
 

00:15:09.279 --> 00:15:11.829 align:start position:0%
by just writing t then operator
open<00:15:09.519><c> and</c><00:15:09.680><c> close</c><00:15:10.079><c> square</c><00:15:10.399><c> bracket</c><00:15:10.959><c> then</c><00:15:11.360><c> int</c>

00:15:11.829 --> 00:15:11.839 align:start position:0%
open and close square bracket then int
 

00:15:11.839 --> 00:15:13.750 align:start position:0%
open and close square bracket then int
index<00:15:12.399><c> and</c><00:15:12.480><c> then</c><00:15:12.720><c> i'll</c><00:15:12.880><c> simply</c><00:15:13.279><c> return</c>

00:15:13.750 --> 00:15:13.760 align:start position:0%
index and then i'll simply return
 

00:15:13.760 --> 00:15:16.230 align:start position:0%
index and then i'll simply return
m<00:15:14.000><c> data</c><00:15:14.480><c> at</c><00:15:14.800><c> that</c><00:15:15.040><c> index</c><00:15:15.600><c> so</c><00:15:15.760><c> this</c><00:15:15.920><c> is</c><00:15:16.000><c> kind</c><00:15:16.160><c> of</c>

00:15:16.230 --> 00:15:16.240 align:start position:0%
m data at that index so this is kind of
 

00:15:16.240 --> 00:15:16.790 align:start position:0%
m data at that index so this is kind of
like<00:15:16.480><c> the</c>

00:15:16.790 --> 00:15:16.800 align:start position:0%
like the
 

00:15:16.800 --> 00:15:18.870 align:start position:0%
like the
most<00:15:17.040><c> simple</c><00:15:17.440><c> straightforward</c><00:15:18.079><c> way</c><00:15:18.399><c> it</c><00:15:18.560><c> has</c><00:15:18.800><c> a</c>

00:15:18.870 --> 00:15:18.880 align:start position:0%
most simple straightforward way it has a
 

00:15:18.880 --> 00:15:20.150 align:start position:0%
most simple straightforward way it has a
number<00:15:19.120><c> of</c><00:15:19.199><c> problems</c><00:15:19.519><c> which</c><00:15:19.760><c> we'll</c><00:15:19.839><c> address</c>

00:15:20.150 --> 00:15:20.160 align:start position:0%
number of problems which we'll address
 

00:15:20.160 --> 00:15:20.949 align:start position:0%
number of problems which we'll address
in<00:15:20.240><c> a</c><00:15:20.320><c> moment</c>

00:15:20.949 --> 00:15:20.959 align:start position:0%
in a moment
 

00:15:20.959 --> 00:15:23.430 align:start position:0%
in a moment
but<00:15:21.120><c> that's</c><00:15:21.360><c> basically</c><00:15:22.160><c> the</c><00:15:22.560><c> idea</c><00:15:23.120><c> so</c><00:15:23.279><c> now</c>

00:15:23.430 --> 00:15:23.440 align:start position:0%
but that's basically the idea so now
 

00:15:23.440 --> 00:15:24.790 align:start position:0%
but that's basically the idea so now
that<00:15:23.519><c> we've</c><00:15:23.680><c> written</c><00:15:23.920><c> this</c><00:15:24.160><c> we</c><00:15:24.320><c> can</c><00:15:24.480><c> simply</c>

00:15:24.790 --> 00:15:24.800 align:start position:0%
that we've written this we can simply
 

00:15:24.800 --> 00:15:25.509 align:start position:0%
that we've written this we can simply
specify

00:15:25.509 --> 00:15:25.519 align:start position:0%
specify
 

00:15:25.519 --> 00:15:27.110 align:start position:0%
specify
the<00:15:25.760><c> index</c><00:15:26.079><c> of</c><00:15:26.160><c> the</c><00:15:26.320><c> data</c><00:15:26.560><c> that</c><00:15:26.720><c> we</c><00:15:26.800><c> want</c><00:15:26.959><c> to</c>

00:15:27.110 --> 00:15:27.120 align:start position:0%
the index of the data that we want to
 

00:15:27.120 --> 00:15:28.790 align:start position:0%
the index of the data that we want to
read<00:15:27.600><c> and</c><00:15:27.760><c> you</c><00:15:27.839><c> can</c><00:15:28.000><c> see</c><00:15:28.160><c> we</c><00:15:28.320><c> now</c><00:15:28.480><c> have</c><00:15:28.720><c> the</c>

00:15:28.790 --> 00:15:28.800 align:start position:0%
read and you can see we now have the
 

00:15:28.800 --> 00:15:30.790 align:start position:0%
read and you can see we now have the
ability<00:15:29.279><c> to</c><00:15:29.440><c> read</c><00:15:29.600><c> this</c><00:15:29.839><c> data</c><00:15:30.160><c> and</c><00:15:30.320><c> in</c><00:15:30.399><c> fact</c><00:15:30.639><c> we</c>

00:15:30.790 --> 00:15:30.800 align:start position:0%
ability to read this data and in fact we
 

00:15:30.800 --> 00:15:32.629 align:start position:0%
ability to read this data and in fact we
can<00:15:30.959><c> even</c><00:15:31.120><c> print</c><00:15:31.440><c> it</c><00:15:31.519><c> to</c><00:15:31.600><c> the</c><00:15:31.759><c> console</c>

00:15:32.629 --> 00:15:32.639 align:start position:0%
can even print it to the console
 

00:15:32.639 --> 00:15:35.269 align:start position:0%
can even print it to the console
if<00:15:32.800><c> we</c><00:15:32.959><c> want</c><00:15:33.199><c> to</c><00:15:33.600><c> okay</c><00:15:33.920><c> great</c><00:15:34.320><c> so</c><00:15:34.880><c> what</c><00:15:35.040><c> are</c><00:15:35.120><c> the</c>

00:15:35.269 --> 00:15:35.279 align:start position:0%
if we want to okay great so what are the
 

00:15:35.279 --> 00:15:35.910 align:start position:0%
if we want to okay great so what are the
problems

00:15:35.910 --> 00:15:35.920 align:start position:0%
problems
 

00:15:35.920 --> 00:15:37.990 align:start position:0%
problems
well<00:15:36.160><c> first</c><00:15:36.399><c> of</c><00:15:36.480><c> all</c><00:15:36.800><c> t</c><00:15:37.120><c> is</c><00:15:37.199><c> being</c><00:15:37.440><c> returned</c><00:15:37.759><c> by</c>

00:15:37.990 --> 00:15:38.000 align:start position:0%
well first of all t is being returned by
 

00:15:38.000 --> 00:15:39.670 align:start position:0%
well first of all t is being returned by
value<00:15:38.399><c> this</c><00:15:38.560><c> may</c><00:15:38.720><c> or</c><00:15:38.880><c> may</c><00:15:39.040><c> not</c><00:15:39.199><c> be</c><00:15:39.360><c> what</c><00:15:39.519><c> you</c>

00:15:39.670 --> 00:15:39.680 align:start position:0%
value this may or may not be what you
 

00:15:39.680 --> 00:15:39.990 align:start position:0%
value this may or may not be what you
want

00:15:39.990 --> 00:15:40.000 align:start position:0%
want
 

00:15:40.000 --> 00:15:41.670 align:start position:0%
want
the<00:15:40.160><c> reason</c><00:15:40.480><c> it</c><00:15:40.560><c> may</c><00:15:40.800><c> not</c><00:15:40.959><c> be</c><00:15:41.120><c> what</c><00:15:41.279><c> you</c><00:15:41.360><c> want</c>

00:15:41.670 --> 00:15:41.680 align:start position:0%
the reason it may not be what you want
 

00:15:41.680 --> 00:15:42.949 align:start position:0%
the reason it may not be what you want
is<00:15:41.839><c> because</c><00:15:42.079><c> in</c><00:15:42.160><c> this</c><00:15:42.320><c> case</c><00:15:42.639><c> we're</c><00:15:42.800><c> just</c>

00:15:42.949 --> 00:15:42.959 align:start position:0%
is because in this case we're just
 

00:15:42.959 --> 00:15:44.069 align:start position:0%
is because in this case we're just
returning<00:15:43.360><c> integers</c>

00:15:44.069 --> 00:15:44.079 align:start position:0%
returning integers
 

00:15:44.079 --> 00:15:45.910 align:start position:0%
returning integers
but<00:15:44.240><c> what</c><00:15:44.399><c> if</c><00:15:44.560><c> we</c><00:15:44.720><c> had</c><00:15:44.880><c> a</c><00:15:45.040><c> string</c><00:15:45.600><c> would</c><00:15:45.839><c> we</c>

00:15:45.910 --> 00:15:45.920 align:start position:0%
but what if we had a string would we
 

00:15:45.920 --> 00:15:47.509 align:start position:0%
but what if we had a string would we
really<00:15:46.240><c> want</c><00:15:46.399><c> to</c><00:15:46.560><c> completely</c><00:15:47.040><c> copy</c><00:15:47.360><c> the</c>

00:15:47.509 --> 00:15:47.519 align:start position:0%
really want to completely copy the
 

00:15:47.519 --> 00:15:48.949 align:start position:0%
really want to completely copy the
string<00:15:47.839><c> out</c><00:15:48.079><c> every</c><00:15:48.320><c> time</c><00:15:48.560><c> we</c>

00:15:48.949 --> 00:15:48.959 align:start position:0%
string out every time we
 

00:15:48.959 --> 00:15:51.189 align:start position:0%
string out every time we
use<00:15:49.199><c> this</c><00:15:49.600><c> index</c><00:15:49.920><c> operator</c><00:15:50.480><c> probably</c><00:15:50.800><c> not</c><00:15:51.040><c> we</c>

00:15:51.189 --> 00:15:51.199 align:start position:0%
use this index operator probably not we
 

00:15:51.199 --> 00:15:53.269 align:start position:0%
use this index operator probably not we
simply<00:15:51.519><c> want</c><00:15:51.759><c> a</c><00:15:51.839><c> read</c><00:15:52.079><c> only</c><00:15:52.399><c> reference</c><00:15:52.959><c> to</c><00:15:53.120><c> it</c>

00:15:53.269 --> 00:15:53.279 align:start position:0%
simply want a read only reference to it
 

00:15:53.279 --> 00:15:54.069 align:start position:0%
simply want a read only reference to it
the<00:15:53.440><c> other</c><00:15:53.680><c> problem</c>

00:15:54.069 --> 00:15:54.079 align:start position:0%
the other problem
 

00:15:54.079 --> 00:15:56.069 align:start position:0%
the other problem
here<00:15:54.480><c> is</c><00:15:54.639><c> that</c><00:15:54.880><c> since</c><00:15:55.199><c> this</c><00:15:55.440><c> does</c><00:15:55.759><c> actually</c>

00:15:56.069 --> 00:15:56.079 align:start position:0%
here is that since this does actually
 

00:15:56.079 --> 00:15:58.310 align:start position:0%
here is that since this does actually
return<00:15:56.720><c> by</c><00:15:56.959><c> value</c><00:15:57.279><c> and</c><00:15:57.360><c> it</c><00:15:57.440><c> makes</c><00:15:57.600><c> a</c><00:15:57.680><c> new</c><00:15:57.839><c> copy</c>

00:15:58.310 --> 00:15:58.320 align:start position:0%
return by value and it makes a new copy
 

00:15:58.320 --> 00:16:01.350 align:start position:0%
return by value and it makes a new copy
i<00:15:58.560><c> can't</c><00:15:58.800><c> do</c><00:15:59.120><c> things</c><00:15:59.519><c> like</c><00:15:59.759><c> this</c><00:16:00.240><c> because</c><00:16:01.120><c> this</c>

00:16:01.350 --> 00:16:01.360 align:start position:0%
i can't do things like this because this
 

00:16:01.360 --> 00:16:03.670 align:start position:0%
i can't do things like this because this
isn't<00:16:01.680><c> a</c><00:16:01.759><c> modifiable</c><00:16:02.560><c> l</c><00:16:02.800><c> value</c><00:16:03.199><c> we're</c><00:16:03.360><c> simply</c>

00:16:03.670 --> 00:16:03.680 align:start position:0%
isn't a modifiable l value we're simply
 

00:16:03.680 --> 00:16:06.310 align:start position:0%
isn't a modifiable l value we're simply
returning<00:16:04.160><c> a</c><00:16:04.320><c> brand</c><00:16:04.639><c> new</c><00:16:04.959><c> copy</c><00:16:05.360><c> of</c><00:16:05.680><c> an</c><00:16:05.920><c> integer</c>

00:16:06.310 --> 00:16:06.320 align:start position:0%
returning a brand new copy of an integer
 

00:16:06.320 --> 00:16:07.910 align:start position:0%
returning a brand new copy of an integer
here<00:16:06.639><c> there's</c><00:16:06.880><c> nothing</c><00:16:07.120><c> to</c><00:16:07.279><c> assign</c><00:16:07.680><c> to</c>

00:16:07.910 --> 00:16:07.920 align:start position:0%
here there's nothing to assign to
 

00:16:07.920 --> 00:16:10.069 align:start position:0%
here there's nothing to assign to
there's<00:16:08.079><c> no</c><00:16:08.320><c> storage</c><00:16:08.880><c> so</c><00:16:09.120><c> because</c><00:16:09.360><c> of</c><00:16:09.440><c> that</c>

00:16:10.069 --> 00:16:10.079 align:start position:0%
there's no storage so because of that
 

00:16:10.079 --> 00:16:13.030 align:start position:0%
there's no storage so because of that
we<00:16:10.399><c> want</c><00:16:10.560><c> to</c><00:16:10.800><c> return</c><00:16:11.680><c> a</c><00:16:11.920><c> reference</c><00:16:12.639><c> to</c><00:16:12.800><c> this</c>

00:16:13.030 --> 00:16:13.040 align:start position:0%
we want to return a reference to this
 

00:16:13.040 --> 00:16:13.990 align:start position:0%
we want to return a reference to this
actual<00:16:13.519><c> type</c>

00:16:13.990 --> 00:16:14.000 align:start position:0%
actual type
 

00:16:14.000 --> 00:16:15.430 align:start position:0%
actual type
even<00:16:14.240><c> if</c><00:16:14.320><c> it</c><00:16:14.480><c> is</c><00:16:14.560><c> something</c><00:16:14.880><c> like</c><00:16:15.040><c> an</c><00:16:15.199><c> end</c>

00:16:15.430 --> 00:16:15.440 align:start position:0%
even if it is something like an end
 

00:16:15.440 --> 00:16:17.430 align:start position:0%
even if it is something like an end
because<00:16:15.839><c> even</c><00:16:16.079><c> though</c><00:16:16.240><c> we</c><00:16:16.560><c> we're</c><00:16:16.720><c> not</c><00:16:16.880><c> really</c>

00:16:17.430 --> 00:16:17.440 align:start position:0%
because even though we we're not really
 

00:16:17.440 --> 00:16:18.870 align:start position:0%
because even though we we're not really
interested<00:16:17.839><c> in</c><00:16:17.920><c> preventing</c><00:16:18.320><c> copies</c><00:16:18.720><c> for</c>

00:16:18.870 --> 00:16:18.880 align:start position:0%
interested in preventing copies for
 

00:16:18.880 --> 00:16:20.870 align:start position:0%
interested in preventing copies for
integers<00:16:19.440><c> we</c><00:16:19.600><c> might</c><00:16:19.920><c> be</c><00:16:20.079><c> for</c><00:16:20.240><c> the</c><00:16:20.399><c> potential</c>

00:16:20.870 --> 00:16:20.880 align:start position:0%
integers we might be for the potential
 

00:16:20.880 --> 00:16:21.990 align:start position:0%
integers we might be for the potential
other<00:16:21.120><c> data</c><00:16:21.440><c> types</c>

00:16:21.990 --> 00:16:22.000 align:start position:0%
other data types
 

00:16:22.000 --> 00:16:23.990 align:start position:0%
other data types
but<00:16:22.160><c> also</c><00:16:22.480><c> by</c><00:16:22.639><c> returning</c><00:16:23.040><c> a</c><00:16:23.199><c> reference</c><00:16:23.839><c> it</c>

00:16:23.990 --> 00:16:24.000 align:start position:0%
but also by returning a reference it
 

00:16:24.000 --> 00:16:25.509 align:start position:0%
but also by returning a reference it
lets<00:16:24.320><c> us</c><00:16:24.480><c> actually</c><00:16:24.880><c> assign</c>

00:16:25.509 --> 00:16:25.519 align:start position:0%
lets us actually assign
 

00:16:25.519 --> 00:16:27.110 align:start position:0%
lets us actually assign
into<00:16:25.839><c> that</c><00:16:26.079><c> index</c><00:16:26.399><c> which</c><00:16:26.639><c> is</c><00:16:26.720><c> something</c><00:16:27.040><c> that</c>

00:16:27.110 --> 00:16:27.120 align:start position:0%
into that index which is something that
 

00:16:27.120 --> 00:16:28.629 align:start position:0%
into that index which is something that
we<00:16:27.360><c> typically</c><00:16:27.759><c> want</c><00:16:27.920><c> to</c><00:16:28.079><c> do</c>

00:16:28.629 --> 00:16:28.639 align:start position:0%
we typically want to do
 

00:16:28.639 --> 00:16:30.790 align:start position:0%
we typically want to do
with<00:16:28.800><c> an</c><00:16:28.959><c> array</c><00:16:29.360><c> such</c><00:16:29.680><c> as</c><00:16:29.839><c> this</c><00:16:30.160><c> this</c><00:16:30.399><c> poses</c>

00:16:30.790 --> 00:16:30.800 align:start position:0%
with an array such as this this poses
 

00:16:30.800 --> 00:16:32.389 align:start position:0%
with an array such as this this poses
another<00:16:31.120><c> problem</c><00:16:31.440><c> though</c><00:16:31.680><c> if</c><00:16:31.839><c> this</c><00:16:32.079><c> array</c>

00:16:32.389 --> 00:16:32.399 align:start position:0%
another problem though if this array
 

00:16:32.399 --> 00:16:34.629 align:start position:0%
another problem though if this array
happens<00:16:32.720><c> to</c><00:16:32.880><c> be</c><00:16:33.120><c> const</c><00:16:33.600><c> for</c><00:16:33.759><c> whatever</c><00:16:34.240><c> reason</c>

00:16:34.629 --> 00:16:34.639 align:start position:0%
happens to be const for whatever reason
 

00:16:34.639 --> 00:16:35.430 align:start position:0%
happens to be const for whatever reason
maybe<00:16:35.040><c> we're</c>

00:16:35.430 --> 00:16:35.440 align:start position:0%
maybe we're
 

00:16:35.440 --> 00:16:37.350 align:start position:0%
maybe we're
assigning<00:16:35.920><c> it</c><00:16:36.000><c> to</c><00:16:36.160><c> like</c><00:16:36.399><c> a</c><00:16:36.480><c> const</c><00:16:36.800><c> reference</c>

00:16:37.350 --> 00:16:37.360 align:start position:0%
assigning it to like a const reference
 

00:16:37.360 --> 00:16:38.949 align:start position:0%
assigning it to like a const reference
or<00:16:37.440><c> something</c><00:16:37.759><c> like</c><00:16:38.000><c> that</c><00:16:38.160><c> we</c><00:16:38.320><c> have</c><00:16:38.560><c> our</c>

00:16:38.949 --> 00:16:38.959 align:start position:0%
or something like that we have our
 

00:16:38.959 --> 00:16:40.870 align:start position:0%
or something like that we have our
array<00:16:39.519><c> reference</c><00:16:39.920><c> maybe</c><00:16:40.160><c> we're</c><00:16:40.399><c> passing</c><00:16:40.720><c> it</c>

00:16:40.870 --> 00:16:40.880 align:start position:0%
array reference maybe we're passing it
 

00:16:40.880 --> 00:16:41.990 align:start position:0%
array reference maybe we're passing it
into<00:16:41.120><c> a</c><00:16:41.199><c> function</c>

00:16:41.990 --> 00:16:42.000 align:start position:0%
into a function
 

00:16:42.000 --> 00:16:43.590 align:start position:0%
into a function
and<00:16:42.160><c> if</c><00:16:42.320><c> we</c><00:16:42.480><c> have</c><00:16:42.639><c> this</c><00:16:42.880><c> kind</c><00:16:43.120><c> of</c><00:16:43.279><c> const</c>

00:16:43.590 --> 00:16:43.600 align:start position:0%
and if we have this kind of const
 

00:16:43.600 --> 00:16:45.269 align:start position:0%
and if we have this kind of const
reference<00:16:43.920><c> here</c><00:16:44.079><c> for</c><00:16:44.240><c> the</c><00:16:44.399><c> array</c>

00:16:45.269 --> 00:16:45.279 align:start position:0%
reference here for the array
 

00:16:45.279 --> 00:16:47.189 align:start position:0%
reference here for the array
we<00:16:45.519><c> obviously</c><00:16:46.160><c> can't</c><00:16:46.480><c> do</c><00:16:46.639><c> this</c><00:16:46.959><c> and</c><00:16:47.120><c> we</c>

00:16:47.189 --> 00:16:47.199 align:start position:0%
we obviously can't do this and we
 

00:16:47.199 --> 00:16:48.470 align:start position:0%
we obviously can't do this and we
wouldn't<00:16:47.440><c> expect</c><00:16:47.680><c> to</c><00:16:47.759><c> be</c><00:16:47.920><c> able</c><00:16:48.000><c> to</c><00:16:48.079><c> do</c><00:16:48.240><c> this</c>

00:16:48.470 --> 00:16:48.480 align:start position:0%
wouldn't expect to be able to do this
 

00:16:48.480 --> 00:16:50.230 align:start position:0%
wouldn't expect to be able to do this
because<00:16:48.720><c> this</c><00:16:48.959><c> is</c><00:16:49.040><c> modifying</c><00:16:49.600><c> the</c><00:16:49.759><c> array</c><00:16:50.079><c> and</c>

00:16:50.230 --> 00:16:50.240 align:start position:0%
because this is modifying the array and
 

00:16:50.240 --> 00:16:51.670 align:start position:0%
because this is modifying the array and
it's<00:16:50.399><c> constant</c><00:16:50.800><c> so</c><00:16:50.959><c> we</c><00:16:51.040><c> shouldn't</c><00:16:51.279><c> be</c><00:16:51.440><c> doing</c>

00:16:51.670 --> 00:16:51.680 align:start position:0%
it's constant so we shouldn't be doing
 

00:16:51.680 --> 00:16:52.150 align:start position:0%
it's constant so we shouldn't be doing
that

00:16:52.150 --> 00:16:52.160 align:start position:0%
that
 

00:16:52.160 --> 00:16:53.509 align:start position:0%
that
however<00:16:52.480><c> you</c><00:16:52.639><c> can</c><00:16:52.720><c> see</c><00:16:52.880><c> that</c><00:16:52.959><c> we</c><00:16:53.040><c> also</c><00:16:53.279><c> can't</c>

00:16:53.509 --> 00:16:53.519 align:start position:0%
however you can see that we also can't
 

00:16:53.519 --> 00:16:55.350 align:start position:0%
however you can see that we also can't
access<00:16:54.000><c> it</c><00:16:54.160><c> which</c><00:16:54.399><c> is</c><00:16:54.560><c> kind</c><00:16:54.720><c> of</c><00:16:54.880><c> a</c><00:16:54.959><c> problem</c>

00:16:55.350 --> 00:16:55.360 align:start position:0%
access it which is kind of a problem
 

00:16:55.360 --> 00:16:56.310 align:start position:0%
access it which is kind of a problem
because

00:16:56.310 --> 00:16:56.320 align:start position:0%
because
 

00:16:56.320 --> 00:16:58.310 align:start position:0%
because
const<00:16:56.639><c> implies</c><00:16:57.199><c> that</c><00:16:57.360><c> it's</c><00:16:57.600><c> read</c><00:16:57.839><c> only</c><00:16:58.160><c> we</c>

00:16:58.310 --> 00:16:58.320 align:start position:0%
const implies that it's read only we
 

00:16:58.320 --> 00:17:00.069 align:start position:0%
const implies that it's read only we
should<00:16:58.480><c> still</c><00:16:58.639><c> be</c><00:16:58.800><c> able</c><00:16:58.959><c> to</c><00:16:59.120><c> read</c><00:16:59.360><c> the</c><00:16:59.519><c> data</c>

00:17:00.069 --> 00:17:00.079 align:start position:0%
should still be able to read the data
 

00:17:00.079 --> 00:17:02.470 align:start position:0%
should still be able to read the data
but<00:17:00.240><c> not</c><00:17:00.480><c> necessarily</c><00:17:01.199><c> write</c><00:17:01.680><c> the</c><00:17:01.839><c> data</c><00:17:02.320><c> this</c>

00:17:02.470 --> 00:17:02.480 align:start position:0%
but not necessarily write the data this
 

00:17:02.480 --> 00:17:04.949 align:start position:0%
but not necessarily write the data this
we<00:17:02.639><c> can</c><00:17:02.800><c> easily</c><00:17:03.120><c> fix</c><00:17:03.440><c> by</c><00:17:03.600><c> just</c><00:17:03.839><c> adding</c><00:17:04.240><c> another</c>

00:17:04.949 --> 00:17:04.959 align:start position:0%
we can easily fix by just adding another
 

00:17:04.959 --> 00:17:07.350 align:start position:0%
we can easily fix by just adding another
version<00:17:05.439><c> of</c><00:17:05.520><c> this</c><00:17:05.760><c> function</c><00:17:06.480><c> which</c><00:17:06.640><c> returns</c><00:17:07.120><c> a</c>

00:17:07.350 --> 00:17:07.360 align:start position:0%
version of this function which returns a
 

00:17:07.360 --> 00:17:08.150 align:start position:0%
version of this function which returns a
const

00:17:08.150 --> 00:17:08.160 align:start position:0%
const
 

00:17:08.160 --> 00:17:11.429 align:start position:0%
const
t<00:17:08.400><c> reference</c><00:17:09.280><c> and</c><00:17:09.520><c> is</c><00:17:09.760><c> also</c><00:17:10.079><c> marked</c><00:17:10.400><c> as</c><00:17:10.799><c> const</c>

00:17:11.429 --> 00:17:11.439 align:start position:0%
t reference and is also marked as const
 

00:17:11.439 --> 00:17:13.270 align:start position:0%
t reference and is also marked as const
this<00:17:11.679><c> const</c><00:17:12.079><c> over</c><00:17:12.240><c> here</c><00:17:12.559><c> means</c><00:17:12.799><c> that</c><00:17:12.959><c> we</c><00:17:13.039><c> can</c>

00:17:13.270 --> 00:17:13.280 align:start position:0%
this const over here means that we can
 

00:17:13.280 --> 00:17:15.110 align:start position:0%
this const over here means that we can
actually<00:17:13.919><c> call</c><00:17:14.160><c> this</c><00:17:14.400><c> function</c>

00:17:15.110 --> 00:17:15.120 align:start position:0%
actually call this function
 

00:17:15.120 --> 00:17:17.829 align:start position:0%
actually call this function
if<00:17:15.520><c> the</c><00:17:15.760><c> instance</c><00:17:16.240><c> of</c><00:17:16.480><c> array</c><00:17:17.039><c> is</c><00:17:17.280><c> constant</c>

00:17:17.829 --> 00:17:17.839 align:start position:0%
if the instance of array is constant
 

00:17:17.839 --> 00:17:19.429 align:start position:0%
if the instance of array is constant
like<00:17:18.079><c> it</c><00:17:18.240><c> is</c><00:17:18.400><c> for</c><00:17:18.559><c> array</c><00:17:18.880><c> reference</c>

00:17:19.429 --> 00:17:19.439 align:start position:0%
like it is for array reference
 

00:17:19.439 --> 00:17:21.270 align:start position:0%
like it is for array reference
so<00:17:19.679><c> this</c><00:17:19.919><c> does</c><00:17:20.160><c> not</c><00:17:20.400><c> work</c><00:17:20.720><c> which</c><00:17:20.959><c> is</c><00:17:21.039><c> what</c><00:17:21.199><c> we</c>

00:17:21.270 --> 00:17:21.280 align:start position:0%
so this does not work which is what we
 

00:17:21.280 --> 00:17:22.949 align:start position:0%
so this does not work which is what we
would<00:17:21.520><c> expect</c><00:17:22.000><c> but</c><00:17:22.160><c> this</c><00:17:22.480><c> does</c>

00:17:22.949 --> 00:17:22.959 align:start position:0%
would expect but this does
 

00:17:22.959 --> 00:17:24.470 align:start position:0%
would expect but this does
and<00:17:23.120><c> if</c><00:17:23.199><c> we</c><00:17:23.360><c> of</c><00:17:23.439><c> course</c><00:17:23.760><c> use</c><00:17:24.000><c> the</c><00:17:24.079><c> original</c>

00:17:24.470 --> 00:17:24.480 align:start position:0%
and if we of course use the original
 

00:17:24.480 --> 00:17:25.990 align:start position:0%
and if we of course use the original
data<00:17:24.799><c> which</c><00:17:24.959><c> is</c><00:17:25.120><c> not</c><00:17:25.360><c> const</c>

00:17:25.990 --> 00:17:26.000 align:start position:0%
data which is not const
 

00:17:26.000 --> 00:17:28.069 align:start position:0%
data which is not const
then<00:17:26.480><c> everything</c><00:17:26.880><c> works</c><00:17:27.199><c> fine</c><00:17:27.520><c> the</c><00:17:27.679><c> final</c>

00:17:28.069 --> 00:17:28.079 align:start position:0%
then everything works fine the final
 

00:17:28.079 --> 00:17:29.510 align:start position:0%
then everything works fine the final
real<00:17:28.319><c> problem</c><00:17:28.720><c> here</c><00:17:28.880><c> is</c><00:17:29.039><c> that</c><00:17:29.120><c> we're</c><00:17:29.280><c> using</c>

00:17:29.510 --> 00:17:29.520 align:start position:0%
real problem here is that we're using
 

00:17:29.520 --> 00:17:30.710 align:start position:0%
real problem here is that we're using
int<00:17:29.840><c> as</c><00:17:29.919><c> the</c><00:17:30.080><c> index</c>

00:17:30.710 --> 00:17:30.720 align:start position:0%
int as the index
 

00:17:30.720 --> 00:17:32.549 align:start position:0%
int as the index
this<00:17:30.880><c> lets</c><00:17:31.120><c> us</c><00:17:31.280><c> use</c><00:17:31.520><c> negative</c><00:17:31.919><c> numbers</c><00:17:32.400><c> and</c>

00:17:32.549 --> 00:17:32.559 align:start position:0%
this lets us use negative numbers and
 

00:17:32.559 --> 00:17:34.310 align:start position:0%
this lets us use negative numbers and
also<00:17:32.880><c> might</c><00:17:33.039><c> not</c><00:17:33.200><c> be</c><00:17:33.360><c> the</c><00:17:33.440><c> same</c><00:17:33.679><c> size</c><00:17:34.000><c> on</c><00:17:34.160><c> all</c>

00:17:34.310 --> 00:17:34.320 align:start position:0%
also might not be the same size on all
 

00:17:34.320 --> 00:17:36.390 align:start position:0%
also might not be the same size on all
platforms<00:17:34.799><c> so</c><00:17:34.960><c> typically</c><00:17:35.440><c> the</c><00:17:35.600><c> sql</c><00:17:36.080><c> standard</c>

00:17:36.390 --> 00:17:36.400 align:start position:0%
platforms so typically the sql standard
 

00:17:36.400 --> 00:17:37.909 align:start position:0%
platforms so typically the sql standard
library<00:17:36.799><c> likes</c><00:17:37.039><c> to</c><00:17:37.120><c> use</c><00:17:37.360><c> size</c><00:17:37.679><c> t</c>

00:17:37.909 --> 00:17:37.919 align:start position:0%
library likes to use size t
 

00:17:37.919 --> 00:17:39.990 align:start position:0%
library likes to use size t
for<00:17:38.080><c> these</c><00:17:38.240><c> things</c><00:17:38.960><c> if</c><00:17:39.039><c> you</c><00:17:39.200><c> go</c><00:17:39.360><c> into</c><00:17:39.600><c> array</c>

00:17:39.990 --> 00:17:40.000 align:start position:0%
for these things if you go into array
 

00:17:40.000 --> 00:17:41.510 align:start position:0%
for these things if you go into array
and<00:17:40.080><c> you</c><00:17:40.240><c> take</c><00:17:40.480><c> a</c><00:17:40.559><c> look</c><00:17:40.720><c> at</c><00:17:40.799><c> their</c><00:17:41.120><c> index</c>

00:17:41.510 --> 00:17:41.520 align:start position:0%
and you take a look at their index
 

00:17:41.520 --> 00:17:42.230 align:start position:0%
and you take a look at their index
operator

00:17:42.230 --> 00:17:42.240 align:start position:0%
operator
 

00:17:42.240 --> 00:17:44.470 align:start position:0%
operator
you<00:17:42.400><c> can</c><00:17:42.559><c> see</c><00:17:42.799><c> that</c><00:17:42.960><c> they</c><00:17:43.200><c> also</c><00:17:43.440><c> use</c><00:17:43.919><c> size</c><00:17:44.240><c> type</c>

00:17:44.470 --> 00:17:44.480 align:start position:0%
you can see that they also use size type
 

00:17:44.480 --> 00:17:46.390 align:start position:0%
you can see that they also use size type
here<00:17:44.720><c> and</c><00:17:44.960><c> size</c><00:17:45.280><c> type</c><00:17:45.520><c> is</c><00:17:45.760><c> equal</c><00:17:46.080><c> to</c>

00:17:46.390 --> 00:17:46.400 align:start position:0%
here and size type is equal to
 

00:17:46.400 --> 00:17:48.710 align:start position:0%
here and size type is equal to
size<00:17:46.799><c> t</c><00:17:47.360><c> they</c><00:17:47.520><c> have</c><00:17:47.919><c> a</c><00:17:48.000><c> lot</c><00:17:48.160><c> of</c><00:17:48.240><c> their</c><00:17:48.559><c> own</c>

00:17:48.710 --> 00:17:48.720 align:start position:0%
size t they have a lot of their own
 

00:17:48.720 --> 00:17:50.150 align:start position:0%
size t they have a lot of their own
definitions<00:17:49.280><c> for</c><00:17:49.360><c> a</c><00:17:49.440><c> lot</c><00:17:49.520><c> of</c><00:17:49.600><c> these</c><00:17:49.760><c> things</c><00:17:50.000><c> at</c>

00:17:50.150 --> 00:17:50.160 align:start position:0%
definitions for a lot of these things at
 

00:17:50.160 --> 00:17:52.230 align:start position:0%
definitions for a lot of these things at
least<00:17:50.400><c> msvc's</c><00:17:51.280><c> stl</c><00:17:51.760><c> which</c><00:17:51.919><c> is</c><00:17:52.000><c> what</c><00:17:52.080><c> we're</c>

00:17:52.230 --> 00:17:52.240 align:start position:0%
least msvc's stl which is what we're
 

00:17:52.240 --> 00:17:53.029 align:start position:0%
least msvc's stl which is what we're
looking<00:17:52.480><c> at</c><00:17:52.640><c> here</c>

00:17:53.029 --> 00:17:53.039 align:start position:0%
looking at here
 

00:17:53.039 --> 00:17:54.630 align:start position:0%
looking at here
has<00:17:53.280><c> all</c><00:17:53.440><c> of</c><00:17:53.520><c> these</c><00:17:53.679><c> various</c><00:17:54.000><c> definitions</c>

00:17:54.630 --> 00:17:54.640 align:start position:0%
has all of these various definitions
 

00:17:54.640 --> 00:17:56.230 align:start position:0%
has all of these various definitions
which<00:17:54.880><c> just</c><00:17:55.120><c> add</c><00:17:55.200><c> a</c><00:17:55.280><c> little</c><00:17:55.440><c> bit</c><00:17:55.600><c> of</c><00:17:55.840><c> noise</c><00:17:56.160><c> in</c>

00:17:56.230 --> 00:17:56.240 align:start position:0%
which just add a little bit of noise in
 

00:17:56.240 --> 00:17:57.990 align:start position:0%
which just add a little bit of noise in
my<00:17:56.400><c> opinion</c><00:17:56.880><c> as</c><00:17:56.960><c> to</c><00:17:57.120><c> what</c><00:17:57.360><c> is</c><00:17:57.520><c> actually</c><00:17:57.760><c> going</c>

00:17:57.990 --> 00:17:58.000 align:start position:0%
my opinion as to what is actually going
 

00:17:58.000 --> 00:17:59.430 align:start position:0%
my opinion as to what is actually going
on<00:17:58.160><c> here</c><00:17:58.320><c> since</c><00:17:58.559><c> you</c><00:17:58.640><c> always</c><00:17:58.880><c> have</c><00:17:59.039><c> to</c><00:17:59.120><c> look</c><00:17:59.360><c> at</c>

00:17:59.430 --> 00:17:59.440 align:start position:0%
on here since you always have to look at
 

00:17:59.440 --> 00:18:00.150 align:start position:0%
on here since you always have to look at
what<00:17:59.600><c> these</c>

00:18:00.150 --> 00:18:00.160 align:start position:0%
what these
 

00:18:00.160 --> 00:18:02.310 align:start position:0%
what these
are<00:18:00.400><c> actually</c><00:18:01.039><c> set</c><00:18:01.360><c> to</c><00:18:01.600><c> okay</c><00:18:01.840><c> so</c><00:18:01.919><c> now</c><00:18:02.080><c> we</c><00:18:02.240><c> have</c>

00:18:02.310 --> 00:18:02.320 align:start position:0%
are actually set to okay so now we have
 

00:18:02.320 --> 00:18:03.990 align:start position:0%
are actually set to okay so now we have
a<00:18:02.400><c> pretty</c><00:18:02.640><c> good</c><00:18:02.799><c> version</c><00:18:03.200><c> of</c><00:18:03.360><c> this</c>

00:18:03.990 --> 00:18:04.000 align:start position:0%
a pretty good version of this
 

00:18:04.000 --> 00:18:05.909 align:start position:0%
a pretty good version of this
if<00:18:04.080><c> we</c><00:18:04.240><c> take</c><00:18:04.400><c> a</c><00:18:04.480><c> look</c><00:18:04.720><c> at</c><00:18:04.880><c> the</c><00:18:05.039><c> version</c><00:18:05.440><c> inside</c>

00:18:05.909 --> 00:18:05.919 align:start position:0%
if we take a look at the version inside
 

00:18:05.919 --> 00:18:07.510 align:start position:0%
if we take a look at the version inside
array<00:18:06.320><c> though</c><00:18:06.720><c> you'll</c><00:18:06.880><c> see</c><00:18:07.039><c> that</c><00:18:07.200><c> there</c><00:18:07.360><c> is</c>

00:18:07.510 --> 00:18:07.520 align:start position:0%
array though you'll see that there is
 

00:18:07.520 --> 00:18:09.590 align:start position:0%
array though you'll see that there is
also<00:18:07.919><c> one</c><00:18:08.240><c> other</c><00:18:08.480><c> thing</c><00:18:08.640><c> i</c><00:18:08.720><c> mean</c><00:18:08.960><c> largely</c><00:18:09.440><c> it's</c>

00:18:09.590 --> 00:18:09.600 align:start position:0%
also one other thing i mean largely it's
 

00:18:09.600 --> 00:18:11.350 align:start position:0%
also one other thing i mean largely it's
the<00:18:09.760><c> same</c><00:18:10.080><c> as</c><00:18:10.320><c> our</c><00:18:10.559><c> function</c><00:18:10.960><c> i</c><00:18:11.039><c> mean</c><00:18:11.200><c> it's</c>

00:18:11.350 --> 00:18:11.360 align:start position:0%
the same as our function i mean it's
 

00:18:11.360 --> 00:18:13.110 align:start position:0%
the same as our function i mean it's
also<00:18:11.600><c> marked</c><00:18:11.919><c> with</c><00:18:12.080><c> no</c><00:18:12.240><c> accept</c><00:18:12.720><c> and</c>

00:18:13.110 --> 00:18:13.120 align:start position:0%
also marked with no accept and
 

00:18:13.120 --> 00:18:14.950 align:start position:0%
also marked with no accept and
you<00:18:13.280><c> know</c><00:18:13.440><c> there's</c><00:18:13.600><c> a</c><00:18:13.679><c> few</c><00:18:13.919><c> other</c><00:18:14.559><c> various</c>

00:18:14.950 --> 00:18:14.960 align:start position:0%
you know there's a few other various
 

00:18:14.960 --> 00:18:16.630 align:start position:0%
you know there's a few other various
flags<00:18:15.280><c> going</c><00:18:15.520><c> on</c><00:18:15.600><c> here</c><00:18:16.000><c> that</c><00:18:16.160><c> we</c><00:18:16.320><c> don't</c><00:18:16.400><c> really</c>

00:18:16.630 --> 00:18:16.640 align:start position:0%
flags going on here that we don't really
 

00:18:16.640 --> 00:18:17.190 align:start position:0%
flags going on here that we don't really
care<00:18:16.799><c> about</c>

00:18:17.190 --> 00:18:17.200 align:start position:0%
care about
 

00:18:17.200 --> 00:18:19.590 align:start position:0%
care about
at<00:18:17.360><c> least</c><00:18:17.600><c> for</c><00:18:17.760><c> our</c><00:18:18.000><c> basic</c><00:18:18.320><c> example</c><00:18:19.039><c> and</c><00:18:19.200><c> then</c>

00:18:19.590 --> 00:18:19.600 align:start position:0%
at least for our basic example and then
 

00:18:19.600 --> 00:18:20.710 align:start position:0%
at least for our basic example and then
this<00:18:19.840><c> is</c><00:18:20.160><c> this</c><00:18:20.400><c> is</c>

00:18:20.710 --> 00:18:20.720 align:start position:0%
this is this is
 

00:18:20.720 --> 00:18:22.230 align:start position:0%
this is this is
identical<00:18:21.280><c> however</c><00:18:21.600><c> we</c><00:18:21.760><c> have</c><00:18:21.919><c> this</c>

00:18:22.230 --> 00:18:22.240 align:start position:0%
identical however we have this
 

00:18:22.240 --> 00:18:23.990 align:start position:0%
identical however we have this
preprocessor<00:18:23.039><c> statement</c><00:18:23.440><c> here</c><00:18:23.600><c> the</c><00:18:23.760><c> checks</c>

00:18:23.990 --> 00:18:24.000 align:start position:0%
preprocessor statement here the checks
 

00:18:24.000 --> 00:18:25.750 align:start position:0%
preprocessor statement here the checks
to<00:18:24.160><c> see</c><00:18:24.320><c> if</c><00:18:24.480><c> the</c><00:18:24.559><c> container</c><00:18:24.880><c> debug</c><00:18:25.280><c> level</c>

00:18:25.750 --> 00:18:25.760 align:start position:0%
to see if the container debug level
 

00:18:25.760 --> 00:18:27.110 align:start position:0%
to see if the container debug level
is<00:18:25.919><c> greater</c><00:18:26.240><c> than</c><00:18:26.320><c> zero</c><00:18:26.559><c> and</c><00:18:26.640><c> if</c><00:18:26.799><c> it</c><00:18:26.880><c> is</c><00:18:27.039><c> it</c>

00:18:27.110 --> 00:18:27.120 align:start position:0%
is greater than zero and if it is it
 

00:18:27.120 --> 00:18:29.430 align:start position:0%
is greater than zero and if it is it
runs<00:18:27.360><c> this</c><00:18:27.520><c> stl</c><00:18:27.919><c> verify</c><00:18:28.400><c> thing</c><00:18:28.640><c> that</c><00:18:28.799><c> checks</c>

00:18:29.430 --> 00:18:29.440 align:start position:0%
runs this stl verify thing that checks
 

00:18:29.440 --> 00:18:32.470 align:start position:0%
runs this stl verify thing that checks
the<00:18:29.679><c> position</c><00:18:30.320><c> versus</c><00:18:30.799><c> the</c><00:18:31.120><c> size</c><00:18:32.000><c> so</c><00:18:32.240><c> what</c>

00:18:32.470 --> 00:18:32.480 align:start position:0%
the position versus the size so what
 

00:18:32.480 --> 00:18:33.270 align:start position:0%
the position versus the size so what
this<00:18:32.799><c> is</c>

00:18:33.270 --> 00:18:33.280 align:start position:0%
this is
 

00:18:33.280 --> 00:18:35.990 align:start position:0%
this is
is<00:18:33.600><c> essentially</c><00:18:34.160><c> an</c><00:18:34.400><c> assert</c><00:18:35.039><c> that</c><00:18:35.360><c> checks</c><00:18:35.760><c> to</c>

00:18:35.990 --> 00:18:36.000 align:start position:0%
is essentially an assert that checks to
 

00:18:36.000 --> 00:18:37.190 align:start position:0%
is essentially an assert that checks to
see<00:18:36.240><c> that</c><00:18:36.400><c> this</c><00:18:36.720><c> index</c>

00:18:37.190 --> 00:18:37.200 align:start position:0%
see that this index
 

00:18:37.200 --> 00:18:39.350 align:start position:0%
see that this index
is<00:18:37.440><c> within</c><00:18:37.840><c> the</c><00:18:38.000><c> accepted</c><00:18:38.559><c> range</c><00:18:38.960><c> so</c><00:18:39.120><c> if</c><00:18:39.200><c> we</c>

00:18:39.350 --> 00:18:39.360 align:start position:0%
is within the accepted range so if we
 

00:18:39.360 --> 00:18:40.630 align:start position:0%
is within the accepted range so if we
were<00:18:39.520><c> to</c><00:18:39.600><c> add</c><00:18:39.840><c> something</c><00:18:40.080><c> like</c><00:18:40.320><c> this</c>

00:18:40.630 --> 00:18:40.640 align:start position:0%
were to add something like this
 

00:18:40.640 --> 00:18:42.470 align:start position:0%
were to add something like this
it<00:18:40.720><c> would</c><00:18:40.960><c> look</c><00:18:41.280><c> like</c><00:18:41.520><c> an</c><00:18:41.679><c> if</c><00:18:41.840><c> statement</c><00:18:42.240><c> that</c>

00:18:42.470 --> 00:18:42.480 align:start position:0%
it would look like an if statement that
 

00:18:42.480 --> 00:18:43.990 align:start position:0%
it would look like an if statement that
basically<00:18:42.960><c> checks</c><00:18:43.200><c> to</c><00:18:43.360><c> see</c>

00:18:43.990 --> 00:18:44.000 align:start position:0%
basically checks to see
 

00:18:44.000 --> 00:18:46.870 align:start position:0%
basically checks to see
whether<00:18:44.320><c> or</c><00:18:44.480><c> not</c><00:18:44.880><c> index</c><00:18:45.600><c> is</c><00:18:45.840><c> less</c><00:18:46.320><c> than</c><00:18:46.720><c> the</c>

00:18:46.870 --> 00:18:46.880 align:start position:0%
whether or not index is less than the
 

00:18:46.880 --> 00:18:48.390 align:start position:0%
whether or not index is less than the
actual<00:18:47.200><c> size</c><00:18:47.440><c> of</c><00:18:47.520><c> the</c><00:18:47.679><c> array</c><00:18:48.000><c> which</c><00:18:48.160><c> is</c>

00:18:48.390 --> 00:18:48.400 align:start position:0%
actual size of the array which is
 

00:18:48.400 --> 00:18:51.350 align:start position:0%
actual size of the array which is
s<00:18:49.120><c> and</c><00:18:49.440><c> if</c><00:18:49.760><c> this</c><00:18:50.000><c> assert</c><00:18:50.480><c> fails</c><00:18:50.880><c> then</c><00:18:51.039><c> we</c><00:18:51.200><c> need</c>

00:18:51.350 --> 00:18:51.360 align:start position:0%
s and if this assert fails then we need
 

00:18:51.360 --> 00:18:53.029 align:start position:0%
s and if this assert fails then we need
to<00:18:51.440><c> do</c><00:18:51.600><c> something</c><00:18:52.000><c> like</c><00:18:52.240><c> break</c><00:18:52.480><c> the</c><00:18:52.559><c> compiler</c>

00:18:53.029 --> 00:18:53.039 align:start position:0%
to do something like break the compiler
 

00:18:53.039 --> 00:18:55.110 align:start position:0%
to do something like break the compiler
on<00:18:53.120><c> this</c><00:18:53.280><c> line</c><00:18:53.600><c> this</c><00:18:53.760><c> is</c><00:18:53.840><c> an</c><00:18:54.000><c> msvc</c><00:18:54.640><c> way</c><00:18:54.880><c> of</c>

00:18:55.110 --> 00:18:55.120 align:start position:0%
on this line this is an msvc way of
 

00:18:55.120 --> 00:18:56.870 align:start position:0%
on this line this is an msvc way of
doing<00:18:55.360><c> that</c><00:18:55.600><c> this</c><00:18:55.840><c> protects</c><00:18:56.320><c> us</c><00:18:56.480><c> because</c><00:18:56.799><c> if</c>

00:18:56.870 --> 00:18:56.880 align:start position:0%
doing that this protects us because if
 

00:18:56.880 --> 00:18:58.549 align:start position:0%
doing that this protects us because if
we<00:18:57.120><c> accidentally</c><00:18:57.760><c> loop</c><00:18:58.080><c> over</c>

00:18:58.549 --> 00:18:58.559 align:start position:0%
we accidentally loop over
 

00:18:58.559 --> 00:19:00.470 align:start position:0%
we accidentally loop over
something<00:18:58.960><c> like</c><00:18:59.200><c> this</c><00:18:59.520><c> and</c><00:18:59.600><c> we</c><00:18:59.760><c> run</c><00:19:00.000><c> the</c><00:19:00.080><c> code</c>

00:19:00.470 --> 00:19:00.480 align:start position:0%
something like this and we run the code
 

00:19:00.480 --> 00:19:01.830 align:start position:0%
something like this and we run the code
then<00:19:00.640><c> it's</c><00:19:00.799><c> actually</c><00:19:01.039><c> going</c><00:19:01.200><c> to</c><00:19:01.360><c> break</c><00:19:01.679><c> the</c>

00:19:01.830 --> 00:19:01.840 align:start position:0%
then it's actually going to break the
 

00:19:01.840 --> 00:19:04.070 align:start position:0%
then it's actually going to break the
debugger<00:19:02.400><c> on</c><00:19:02.480><c> this</c><00:19:02.720><c> line</c><00:19:02.960><c> and</c><00:19:03.120><c> tell</c><00:19:03.360><c> us</c><00:19:03.520><c> that</c>

00:19:04.070 --> 00:19:04.080 align:start position:0%
debugger on this line and tell us that
 

00:19:04.080 --> 00:19:05.430 align:start position:0%
debugger on this line and tell us that
well<00:19:04.320><c> we've</c><00:19:04.480><c> done</c><00:19:04.720><c> something</c><00:19:05.039><c> wrong</c><00:19:05.200><c> so</c><00:19:05.360><c> that</c>

00:19:05.430 --> 00:19:05.440 align:start position:0%
well we've done something wrong so that
 

00:19:05.440 --> 00:19:07.510 align:start position:0%
well we've done something wrong so that
we<00:19:05.600><c> can</c><00:19:05.679><c> debug</c><00:19:06.080><c> the</c><00:19:06.240><c> state</c><00:19:06.480><c> of</c><00:19:06.640><c> our</c><00:19:06.799><c> program</c>

00:19:07.510 --> 00:19:07.520 align:start position:0%
we can debug the state of our program
 

00:19:07.520 --> 00:19:08.870 align:start position:0%
we can debug the state of our program
this<00:19:07.760><c> is</c><00:19:07.919><c> not</c><00:19:08.080><c> something</c><00:19:08.400><c> that</c><00:19:08.559><c> typically</c>

00:19:08.870 --> 00:19:08.880 align:start position:0%
this is not something that typically
 

00:19:08.880 --> 00:19:10.549 align:start position:0%
this is not something that typically
gets<00:19:09.120><c> included</c><00:19:09.520><c> in</c><00:19:09.679><c> release</c><00:19:10.000><c> mode</c><00:19:10.320><c> because</c>

00:19:10.549 --> 00:19:10.559 align:start position:0%
gets included in release mode because
 

00:19:10.559 --> 00:19:11.590 align:start position:0%
gets included in release mode because
this<00:19:10.799><c> extra</c><00:19:11.120><c> check</c>

00:19:11.590 --> 00:19:11.600 align:start position:0%
this extra check
 

00:19:11.600 --> 00:19:13.110 align:start position:0%
this extra check
just<00:19:11.760><c> slows</c><00:19:12.080><c> down</c><00:19:12.240><c> our</c><00:19:12.400><c> program</c><00:19:12.880><c> and</c><00:19:12.960><c> is</c>

00:19:13.110 --> 00:19:13.120 align:start position:0%
just slows down our program and is
 

00:19:13.120 --> 00:19:14.710 align:start position:0%
just slows down our program and is
something<00:19:13.360><c> that</c><00:19:13.520><c> we</c><00:19:13.679><c> would</c><00:19:13.840><c> expect</c><00:19:14.160><c> to</c><00:19:14.320><c> catch</c>

00:19:14.710 --> 00:19:14.720 align:start position:0%
something that we would expect to catch
 

00:19:14.720 --> 00:19:17.029 align:start position:0%
something that we would expect to catch
in<00:19:14.880><c> debug</c><00:19:15.280><c> mode</c><00:19:15.679><c> anyway</c><00:19:16.400><c> so</c><00:19:16.559><c> that's</c><00:19:16.799><c> that's</c>

00:19:17.029 --> 00:19:17.039 align:start position:0%
in debug mode anyway so that's that's
 

00:19:17.039 --> 00:19:19.430 align:start position:0%
in debug mode anyway so that's that's
the<00:19:17.200><c> extra</c><00:19:17.520><c> check</c><00:19:17.760><c> that</c><00:19:17.840><c> we</c><00:19:18.000><c> have</c><00:19:18.320><c> in</c><00:19:18.640><c> the</c><00:19:18.880><c> stl</c>

00:19:19.430 --> 00:19:19.440 align:start position:0%
the extra check that we have in the stl
 

00:19:19.440 --> 00:19:20.390 align:start position:0%
the extra check that we have in the stl
version<00:19:19.840><c> of</c>

00:19:20.390 --> 00:19:20.400 align:start position:0%
version of
 

00:19:20.400 --> 00:19:22.230 align:start position:0%
version of
the<00:19:20.559><c> array</c><00:19:20.960><c> class</c><00:19:21.360><c> and</c><00:19:21.520><c> something</c><00:19:21.840><c> of</c><00:19:22.000><c> course</c>

00:19:22.230 --> 00:19:22.240 align:start position:0%
the array class and something of course
 

00:19:22.240 --> 00:19:23.909 align:start position:0%
the array class and something of course
that<00:19:22.400><c> you</c><00:19:22.480><c> might</c><00:19:22.720><c> want</c><00:19:22.960><c> to</c><00:19:23.120><c> use</c><00:19:23.360><c> however</c><00:19:23.760><c> you</c>

00:19:23.909 --> 00:19:23.919 align:start position:0%
that you might want to use however you
 

00:19:23.919 --> 00:19:25.430 align:start position:0%
that you might want to use however you
can<00:19:24.000><c> see</c><00:19:24.160><c> that</c><00:19:24.240><c> this</c><00:19:24.400><c> container</c><00:19:24.799><c> debug</c><00:19:25.200><c> level</c>

00:19:25.430 --> 00:19:25.440 align:start position:0%
can see that this container debug level
 

00:19:25.440 --> 00:19:27.110 align:start position:0%
can see that this container debug level
macro<00:19:25.919><c> actually</c><00:19:26.160><c> makes</c><00:19:26.400><c> sure</c><00:19:26.559><c> that</c><00:19:26.720><c> this</c><00:19:26.880><c> does</c>

00:19:27.110 --> 00:19:27.120 align:start position:0%
macro actually makes sure that this does
 

00:19:27.120 --> 00:19:27.750 align:start position:0%
macro actually makes sure that this does
not<00:19:27.360><c> happen</c>

00:19:27.750 --> 00:19:27.760 align:start position:0%
not happen
 

00:19:27.760 --> 00:19:29.830 align:start position:0%
not happen
in<00:19:27.919><c> release</c><00:19:28.320><c> mode</c><00:19:28.640><c> okay</c><00:19:28.880><c> cool</c><00:19:29.200><c> so</c><00:19:29.360><c> we'll</c><00:19:29.679><c> we'll</c>

00:19:29.830 --> 00:19:29.840 align:start position:0%
in release mode okay cool so we'll we'll
 

00:19:29.840 --> 00:19:30.950 align:start position:0%
in release mode okay cool so we'll we'll
just<00:19:30.080><c> ignore</c><00:19:30.320><c> that</c><00:19:30.559><c> part</c>

00:19:30.950 --> 00:19:30.960 align:start position:0%
just ignore that part
 

00:19:30.960 --> 00:19:33.909 align:start position:0%
just ignore that part
now<00:19:31.200><c> size</c><00:19:31.600><c> should</c><00:19:31.919><c> also</c><00:19:32.400><c> return</c><00:19:32.799><c> a</c><00:19:32.960><c> size</c><00:19:33.280><c> t</c><00:19:33.760><c> and</c>

00:19:33.909 --> 00:19:33.919 align:start position:0%
now size should also return a size t and
 

00:19:33.919 --> 00:19:35.590 align:start position:0%
now size should also return a size t and
because<00:19:34.240><c> it</c><00:19:34.320><c> returns</c><00:19:34.720><c> a</c><00:19:34.799><c> size</c><00:19:35.120><c> t</c>

00:19:35.590 --> 00:19:35.600 align:start position:0%
because it returns a size t
 

00:19:35.600 --> 00:19:37.350 align:start position:0%
because it returns a size t
we<00:19:35.760><c> should</c><00:19:35.919><c> also</c><00:19:36.160><c> make</c><00:19:36.400><c> sure</c><00:19:36.720><c> that</c><00:19:36.960><c> our</c><00:19:37.120><c> for</c>

00:19:37.350 --> 00:19:37.360 align:start position:0%
we should also make sure that our for
 

00:19:37.360 --> 00:19:39.029 align:start position:0%
we should also make sure that our for
loop<00:19:37.760><c> actually</c><00:19:38.160><c> set</c><00:19:38.320><c> to</c><00:19:38.480><c> a</c><00:19:38.559><c> size</c><00:19:38.799><c> t</c>

00:19:39.029 --> 00:19:39.039 align:start position:0%
loop actually set to a size t
 

00:19:39.039 --> 00:19:40.950 align:start position:0%
loop actually set to a size t
just<00:19:39.200><c> to</c><00:19:39.440><c> avoid</c><00:19:39.919><c> some</c><00:19:40.160><c> compiler</c><00:19:40.640><c> warnings</c>

00:19:40.950 --> 00:19:40.960 align:start position:0%
just to avoid some compiler warnings
 

00:19:40.960 --> 00:19:42.549 align:start position:0%
just to avoid some compiler warnings
i'll<00:19:41.120><c> get</c><00:19:41.280><c> rid</c><00:19:41.440><c> of</c><00:19:41.520><c> this</c><00:19:41.840><c> and</c><00:19:42.000><c> i'll</c><00:19:42.160><c> clean</c><00:19:42.400><c> up</c>

00:19:42.549 --> 00:19:42.559 align:start position:0%
i'll get rid of this and i'll clean up
 

00:19:42.559 --> 00:19:44.150 align:start position:0%
i'll get rid of this and i'll clean up
our<00:19:42.720><c> code</c><00:19:43.039><c> a</c><00:19:43.120><c> little</c><00:19:43.280><c> bit</c><00:19:43.520><c> more</c><00:19:43.760><c> one</c><00:19:44.000><c> other</c>

00:19:44.150 --> 00:19:44.160 align:start position:0%
our code a little bit more one other
 

00:19:44.160 --> 00:19:45.669 align:start position:0%
our code a little bit more one other
thing<00:19:44.320><c> that</c><00:19:44.400><c> this</c><00:19:44.559><c> class</c><00:19:44.799><c> really</c><00:19:45.039><c> needs</c><00:19:45.360><c> is</c><00:19:45.520><c> a</c>

00:19:45.669 --> 00:19:45.679 align:start position:0%
thing that this class really needs is a
 

00:19:45.679 --> 00:19:47.830 align:start position:0%
thing that this class really needs is a
way<00:19:45.919><c> to</c><00:19:46.160><c> actually</c><00:19:46.640><c> access</c><00:19:47.120><c> the</c><00:19:47.280><c> data</c><00:19:47.520><c> within</c>

00:19:47.830 --> 00:19:47.840 align:start position:0%
way to actually access the data within
 

00:19:47.840 --> 00:19:49.110 align:start position:0%
way to actually access the data within
it<00:19:48.000><c> so</c><00:19:48.160><c> in</c><00:19:48.240><c> other</c><00:19:48.400><c> words</c><00:19:48.559><c> this</c><00:19:48.720><c> will</c><00:19:48.880><c> just</c>

00:19:49.110 --> 00:19:49.120 align:start position:0%
it so in other words this will just
 

00:19:49.120 --> 00:19:49.830 align:start position:0%
it so in other words this will just
return

00:19:49.830 --> 00:19:49.840 align:start position:0%
return
 

00:19:49.840 --> 00:19:51.590 align:start position:0%
return
mdata<00:19:50.400><c> and</c><00:19:50.559><c> it</c><00:19:50.640><c> will</c><00:19:50.720><c> just</c><00:19:50.880><c> return</c><00:19:51.200><c> a</c><00:19:51.280><c> pointer</c>

00:19:51.590 --> 00:19:51.600 align:start position:0%
mdata and it will just return a pointer
 

00:19:51.600 --> 00:19:53.669 align:start position:0%
mdata and it will just return a pointer
to<00:19:51.760><c> it</c><00:19:52.160><c> you</c><00:19:52.320><c> could</c><00:19:52.559><c> also</c><00:19:52.799><c> add</c><00:19:52.960><c> a</c><00:19:53.039><c> const</c><00:19:53.360><c> version</c>

00:19:53.669 --> 00:19:53.679 align:start position:0%
to it you could also add a const version
 

00:19:53.679 --> 00:19:55.270 align:start position:0%
to it you could also add a const version
of<00:19:53.760><c> this</c><00:19:54.000><c> that</c><00:19:54.160><c> returns</c><00:19:54.480><c> the</c><00:19:54.640><c> data</c><00:19:55.039><c> if</c><00:19:55.120><c> you</c>

00:19:55.270 --> 00:19:55.280 align:start position:0%
of this that returns the data if you
 

00:19:55.280 --> 00:19:56.710 align:start position:0%
of this that returns the data if you
wanted<00:19:55.520><c> to</c><00:19:55.679><c> and</c><00:19:55.760><c> it</c><00:19:55.840><c> would</c><00:19:56.000><c> look</c><00:19:56.160><c> something</c>

00:19:56.710 --> 00:19:56.720 align:start position:0%
wanted to and it would look something
 

00:19:56.720 --> 00:19:59.110 align:start position:0%
wanted to and it would look something
like<00:19:56.960><c> that</c><00:19:57.280><c> what</c><00:19:57.440><c> this</c><00:19:57.600><c> enables</c><00:19:58.000><c> you</c><00:19:58.080><c> to</c><00:19:58.240><c> do</c><00:19:58.559><c> is</c>

00:19:59.110 --> 00:19:59.120 align:start position:0%
like that what this enables you to do is
 

00:19:59.120 --> 00:20:01.190 align:start position:0%
like that what this enables you to do is
quickly<00:19:59.520><c> for</c><00:19:59.679><c> example</c><00:20:00.160><c> set</c><00:20:00.400><c> the</c><00:20:00.480><c> memory</c><00:20:00.880><c> to</c><00:20:01.039><c> be</c>

00:20:01.190 --> 00:20:01.200 align:start position:0%
quickly for example set the memory to be
 

00:20:01.200 --> 00:20:04.070 align:start position:0%
quickly for example set the memory to be
0<00:20:01.600><c> by</c><00:20:01.760><c> just</c><00:20:02.000><c> calling</c><00:20:02.320><c> data.data</c><00:20:03.280><c> writing</c><00:20:03.600><c> 0</c><00:20:03.919><c> as</c>

00:20:04.070 --> 00:20:04.080 align:start position:0%
0 by just calling data.data writing 0 as
 

00:20:04.080 --> 00:20:05.270 align:start position:0%
0 by just calling data.data writing 0 as
your<00:20:04.240><c> value</c><00:20:04.720><c> and</c><00:20:04.880><c> then</c>

00:20:05.270 --> 00:20:05.280 align:start position:0%
your value and then
 

00:20:05.280 --> 00:20:06.870 align:start position:0%
your value and then
the<00:20:05.440><c> size</c><00:20:05.760><c> of</c><00:20:05.840><c> the</c><00:20:06.000><c> array</c><00:20:06.400><c> which</c><00:20:06.559><c> is</c><00:20:06.640><c> going</c><00:20:06.799><c> to</c>

00:20:06.870 --> 00:20:06.880 align:start position:0%
the size of the array which is going to
 

00:20:06.880 --> 00:20:08.789 align:start position:0%
the size of the array which is going to
be<00:20:06.960><c> data.size</c><00:20:07.919><c> times</c>

00:20:08.789 --> 00:20:08.799 align:start position:0%
be data.size times
 

00:20:08.799 --> 00:20:11.190 align:start position:0%
be data.size times
size<00:20:09.280><c> of</c><00:20:09.760><c> int</c><00:20:10.080><c> because</c><00:20:10.320><c> that's</c><00:20:10.640><c> the</c><00:20:10.720><c> data</c><00:20:11.039><c> type</c>

00:20:11.190 --> 00:20:11.200 align:start position:0%
size of int because that's the data type
 

00:20:11.200 --> 00:20:12.710 align:start position:0%
size of int because that's the data type
that<00:20:11.360><c> we've</c><00:20:11.520><c> selected</c><00:20:11.919><c> here</c><00:20:12.080><c> this</c><00:20:12.240><c> will</c><00:20:12.400><c> set</c>

00:20:12.710 --> 00:20:12.720 align:start position:0%
that we've selected here this will set
 

00:20:12.720 --> 00:20:14.710 align:start position:0%
that we've selected here this will set
all<00:20:12.880><c> of</c><00:20:12.960><c> the</c><00:20:13.200><c> integers</c><00:20:13.679><c> inside</c><00:20:14.080><c> our</c><00:20:14.240><c> array</c><00:20:14.559><c> to</c>

00:20:14.710 --> 00:20:14.720 align:start position:0%
all of the integers inside our array to
 

00:20:14.720 --> 00:20:16.390 align:start position:0%
all of the integers inside our array to
be<00:20:14.880><c> zero</c><00:20:15.200><c> by</c><00:20:15.360><c> just</c><00:20:15.520><c> simply</c><00:20:15.919><c> setting</c>

00:20:16.390 --> 00:20:16.400 align:start position:0%
be zero by just simply setting
 

00:20:16.400 --> 00:20:18.950 align:start position:0%
be zero by just simply setting
all<00:20:16.559><c> of</c><00:20:16.640><c> their</c><00:20:16.880><c> memory</c><00:20:17.520><c> to</c><00:20:18.000><c> zero</c><00:20:18.480><c> this</c><00:20:18.720><c> isn't</c>

00:20:18.950 --> 00:20:18.960 align:start position:0%
all of their memory to zero this isn't
 

00:20:18.960 --> 00:20:20.789 align:start position:0%
all of their memory to zero this isn't
really<00:20:19.200><c> 100</c><00:20:19.840><c> required</c><00:20:20.320><c> because</c><00:20:20.559><c> you</c><00:20:20.640><c> could</c>

00:20:20.789 --> 00:20:20.799 align:start position:0%
really 100 required because you could
 

00:20:20.799 --> 00:20:21.590 align:start position:0%
really 100 required because you could
always

00:20:21.590 --> 00:20:21.600 align:start position:0%
always
 

00:20:21.600 --> 00:20:23.590 align:start position:0%
always
just<00:20:21.840><c> simply</c><00:20:22.159><c> take</c><00:20:22.400><c> the</c><00:20:22.640><c> first</c><00:20:22.960><c> index</c><00:20:23.360><c> of</c><00:20:23.440><c> the</c>

00:20:23.590 --> 00:20:23.600 align:start position:0%
just simply take the first index of the
 

00:20:23.600 --> 00:20:25.430 align:start position:0%
just simply take the first index of the
array<00:20:23.919><c> and</c><00:20:24.000><c> then</c><00:20:24.240><c> grab</c><00:20:24.400><c> the</c><00:20:24.640><c> address</c><00:20:25.120><c> of</c>

00:20:25.430 --> 00:20:25.440 align:start position:0%
array and then grab the address of
 

00:20:25.440 --> 00:20:27.510 align:start position:0%
array and then grab the address of
that<00:20:25.840><c> since</c><00:20:26.080><c> this</c><00:20:26.400><c> stack</c><00:20:26.720><c> allocated</c><00:20:27.200><c> array</c><00:20:27.440><c> of</c>

00:20:27.510 --> 00:20:27.520 align:start position:0%
that since this stack allocated array of
 

00:20:27.520 --> 00:20:28.950 align:start position:0%
that since this stack allocated array of
course<00:20:27.840><c> is</c><00:20:28.000><c> guaranteed</c><00:20:28.480><c> to</c><00:20:28.640><c> be</c>

00:20:28.950 --> 00:20:28.960 align:start position:0%
course is guaranteed to be
 

00:20:28.960 --> 00:20:31.590 align:start position:0%
course is guaranteed to be
contiguous<00:20:29.760><c> in</c><00:20:30.000><c> memory</c><00:20:30.480><c> so</c><00:20:30.640><c> finally</c><00:20:31.200><c> let's</c>

00:20:31.590 --> 00:20:31.600 align:start position:0%
contiguous in memory so finally let's
 

00:20:31.600 --> 00:20:33.190 align:start position:0%
contiguous in memory so finally let's
see<00:20:31.760><c> this</c><00:20:32.080><c> in</c><00:20:32.240><c> action</c><00:20:32.559><c> what</c><00:20:32.720><c> i'll</c><00:20:32.880><c> do</c>

00:20:33.190 --> 00:20:33.200 align:start position:0%
see this in action what i'll do
 

00:20:33.200 --> 00:20:36.470 align:start position:0%
see this in action what i'll do
is<00:20:33.600><c> print</c><00:20:34.000><c> every</c><00:20:34.240><c> single</c><00:20:34.559><c> index</c><00:20:35.360><c> of</c><00:20:35.600><c> our</c><00:20:35.919><c> array</c>

00:20:36.470 --> 00:20:36.480 align:start position:0%
is print every single index of our array
 

00:20:36.480 --> 00:20:39.110 align:start position:0%
is print every single index of our array
like<00:20:36.799><c> so</c><00:20:37.440><c> let's</c><00:20:37.679><c> try</c><00:20:37.919><c> it</c><00:20:38.080><c> without</c><00:20:38.320><c> the</c><00:20:38.559><c> mem</c><00:20:38.799><c> set</c>

00:20:39.110 --> 00:20:39.120 align:start position:0%
like so let's try it without the mem set
 

00:20:39.120 --> 00:20:40.870 align:start position:0%
like so let's try it without the mem set
first<00:20:39.440><c> to</c><00:20:39.679><c> see</c><00:20:39.840><c> the</c><00:20:40.000><c> effect</c><00:20:40.320><c> of</c><00:20:40.480><c> that</c>

00:20:40.870 --> 00:20:40.880 align:start position:0%
first to see the effect of that
 

00:20:40.880 --> 00:20:43.029 align:start position:0%
first to see the effect of that
all<00:20:41.120><c> right</c><00:20:41.360><c> cn.yet</c><00:20:42.159><c> so</c><00:20:42.320><c> that</c><00:20:42.400><c> we</c><00:20:42.640><c> pause</c><00:20:42.880><c> our</c>

00:20:43.029 --> 00:20:43.039 align:start position:0%
all right cn.yet so that we pause our
 

00:20:43.039 --> 00:20:44.789 align:start position:0%
all right cn.yet so that we pause our
console<00:20:43.600><c> you</c><00:20:43.679><c> can</c><00:20:43.840><c> see</c><00:20:44.000><c> we</c><00:20:44.080><c> have</c><00:20:44.320><c> just</c><00:20:44.480><c> a</c><00:20:44.559><c> bunch</c>

00:20:44.789 --> 00:20:44.799 align:start position:0%
console you can see we have just a bunch
 

00:20:44.799 --> 00:20:46.630 align:start position:0%
console you can see we have just a bunch
of<00:20:44.960><c> uninitialized</c><00:20:45.679><c> memory</c><00:20:46.080><c> here</c><00:20:46.320><c> pretty</c>

00:20:46.630 --> 00:20:46.640 align:start position:0%
of uninitialized memory here pretty
 

00:20:46.640 --> 00:20:48.390 align:start position:0%
of uninitialized memory here pretty
boring<00:20:47.120><c> let's</c><00:20:47.360><c> bring</c><00:20:47.600><c> in</c><00:20:47.840><c> the</c><00:20:48.080><c> mem</c>

00:20:48.390 --> 00:20:48.400 align:start position:0%
boring let's bring in the mem
 

00:20:48.400 --> 00:20:50.630 align:start position:0%
boring let's bring in the mem
set<00:20:48.880><c> now</c><00:20:49.120><c> all</c><00:20:49.360><c> of</c><00:20:49.440><c> the</c><00:20:49.840><c> values</c><00:20:50.240><c> inside</c><00:20:50.559><c> our</c>

00:20:50.630 --> 00:20:50.640 align:start position:0%
set now all of the values inside our
 

00:20:50.640 --> 00:20:52.630 align:start position:0%
set now all of the values inside our
array<00:20:51.120><c> are</c><00:20:51.280><c> set</c><00:20:51.520><c> to</c><00:20:51.679><c> zero</c>

00:20:52.630 --> 00:20:52.640 align:start position:0%
array are set to zero
 

00:20:52.640 --> 00:20:56.549 align:start position:0%
array are set to zero
finally<00:20:53.120><c> i'll</c><00:20:53.440><c> maybe</c><00:20:53.840><c> set</c><00:20:54.159><c> index</c><00:20:54.720><c> 1</c><00:20:55.039><c> to</c><00:20:55.360><c> b5</c><00:20:56.240><c> and</c>

00:20:56.549 --> 00:20:56.559 align:start position:0%
finally i'll maybe set index 1 to b5 and
 

00:20:56.559 --> 00:20:57.350 align:start position:0%
finally i'll maybe set index 1 to b5 and
index

00:20:57.350 --> 00:20:57.360 align:start position:0%
index
 

00:20:57.360 --> 00:21:00.549 align:start position:0%
index
4<00:20:57.760><c> to</c><00:20:58.000><c> b8</c><00:20:59.280><c> so</c><00:20:59.440><c> if</c><00:20:59.520><c> we</c><00:20:59.679><c> run</c><00:20:59.840><c> this</c><00:21:00.080><c> again</c>

00:21:00.549 --> 00:21:00.559 align:start position:0%
4 to b8 so if we run this again
 

00:21:00.559 --> 00:21:02.549 align:start position:0%
4 to b8 so if we run this again
you<00:21:00.720><c> can</c><00:21:00.799><c> see</c><00:21:00.960><c> we</c><00:21:01.120><c> have</c><00:21:01.280><c> zero</c><00:21:01.600><c> five</c><00:21:01.919><c> zero</c><00:21:02.240><c> zero</c>

00:21:02.549 --> 00:21:02.559 align:start position:0%
you can see we have zero five zero zero
 

00:21:02.559 --> 00:21:04.390 align:start position:0%
you can see we have zero five zero zero
eight<00:21:02.960><c> so</c><00:21:03.120><c> this</c><00:21:03.440><c> seems</c><00:21:03.760><c> to</c><00:21:03.919><c> work</c><00:21:04.159><c> and</c><00:21:04.320><c> of</c>

00:21:04.390 --> 00:21:04.400 align:start position:0%
eight so this seems to work and of
 

00:21:04.400 --> 00:21:05.590 align:start position:0%
eight so this seems to work and of
course<00:21:04.640><c> if</c><00:21:04.720><c> we</c><00:21:04.799><c> wanted</c><00:21:05.120><c> to</c>

00:21:05.590 --> 00:21:05.600 align:start position:0%
course if we wanted to
 

00:21:05.600 --> 00:21:07.510 align:start position:0%
course if we wanted to
we<00:21:05.760><c> could</c><00:21:06.000><c> create</c><00:21:06.320><c> an</c><00:21:06.640><c> entirely</c><00:21:07.120><c> different</c>

00:21:07.510 --> 00:21:07.520 align:start position:0%
we could create an entirely different
 

00:21:07.520 --> 00:21:09.029 align:start position:0%
we could create an entirely different
array<00:21:08.159><c> that</c><00:21:08.320><c> maybe</c><00:21:08.640><c> had</c>

00:21:09.029 --> 00:21:09.039 align:start position:0%
array that maybe had
 

00:21:09.039 --> 00:21:11.430 align:start position:0%
array that maybe had
two<00:21:09.360><c> strings</c><00:21:10.240><c> string</c><00:21:10.559><c> one</c><00:21:10.799><c> we</c><00:21:10.960><c> could</c><00:21:11.120><c> set</c>

00:21:11.430 --> 00:21:11.440 align:start position:0%
two strings string one we could set
 

00:21:11.440 --> 00:21:12.630 align:start position:0%
two strings string one we could set
equal<00:21:11.760><c> to</c>

00:21:12.630 --> 00:21:12.640 align:start position:0%
equal to
 

00:21:12.640 --> 00:21:15.350 align:start position:0%
equal to
journal<00:21:13.440><c> like</c><00:21:13.760><c> so</c><00:21:14.159><c> and</c><00:21:14.240><c> then</c><00:21:14.480><c> string</c><00:21:14.880><c> two</c><00:21:15.120><c> we</c>

00:21:15.350 --> 00:21:15.360 align:start position:0%
journal like so and then string two we
 

00:21:15.360 --> 00:21:15.990 align:start position:0%
journal like so and then string two we
could<00:21:15.600><c> set</c>

00:21:15.990 --> 00:21:16.000 align:start position:0%
could set
 

00:21:16.000 --> 00:21:19.110 align:start position:0%
could set
equal<00:21:16.400><c> to</c><00:21:17.120><c> c</c><00:21:17.360><c> plus</c><00:21:17.679><c> plus</c><00:21:18.159><c> and</c><00:21:18.320><c> then</c><00:21:18.559><c> if</c><00:21:18.720><c> we</c>

00:21:19.110 --> 00:21:19.120 align:start position:0%
equal to c plus plus and then if we
 

00:21:19.120 --> 00:21:20.870 align:start position:0%
equal to c plus plus and then if we
basically<00:21:19.520><c> have</c><00:21:19.679><c> this</c><00:21:19.919><c> exact</c><00:21:20.240><c> same</c><00:21:20.480><c> for</c><00:21:20.640><c> loop</c>

00:21:20.870 --> 00:21:20.880 align:start position:0%
basically have this exact same for loop
 

00:21:20.880 --> 00:21:22.789 align:start position:0%
basically have this exact same for loop
that<00:21:21.039><c> we</c><00:21:21.120><c> had</c><00:21:21.360><c> before</c><00:21:22.000><c> you</c><00:21:22.159><c> can</c><00:21:22.240><c> see</c><00:21:22.400><c> that</c><00:21:22.559><c> this</c>

00:21:22.789 --> 00:21:22.799 align:start position:0%
that we had before you can see that this
 

00:21:22.799 --> 00:21:24.149 align:start position:0%
that we had before you can see that this
array<00:21:23.280><c> also</c><00:21:23.600><c> works</c>

00:21:24.149 --> 00:21:24.159 align:start position:0%
array also works
 

00:21:24.159 --> 00:21:27.110 align:start position:0%
array also works
with<00:21:24.799><c> strings</c><00:21:25.440><c> so</c><00:21:25.600><c> that</c><00:21:25.919><c> is</c><00:21:26.159><c> our</c><00:21:26.400><c> basic</c><00:21:26.880><c> array</c>

00:21:27.110 --> 00:21:27.120 align:start position:0%
with strings so that is our basic array
 

00:21:27.120 --> 00:21:27.669 align:start position:0%
with strings so that is our basic array
class

00:21:27.669 --> 00:21:27.679 align:start position:0%
class
 

00:21:27.679 --> 00:21:29.669 align:start position:0%
class
you<00:21:27.760><c> can</c><00:21:27.919><c> see</c><00:21:28.240><c> it's</c><00:21:28.559><c> really</c><00:21:28.960><c> tiny</c><00:21:29.280><c> there</c><00:21:29.520><c> are</c>

00:21:29.669 --> 00:21:29.679 align:start position:0%
you can see it's really tiny there are
 

00:21:29.679 --> 00:21:31.510 align:start position:0%
you can see it's really tiny there are
still<00:21:30.159><c> a</c><00:21:30.320><c> lot</c><00:21:30.559><c> of</c><00:21:30.720><c> features</c><00:21:31.120><c> that</c><00:21:31.280><c> we</c><00:21:31.360><c> would</c>

00:21:31.510 --> 00:21:31.520 align:start position:0%
still a lot of features that we would
 

00:21:31.520 --> 00:21:32.789 align:start position:0%
still a lot of features that we would
want<00:21:31.760><c> to</c><00:21:31.840><c> add</c><00:21:32.080><c> to</c><00:21:32.240><c> this</c>

00:21:32.789 --> 00:21:32.799 align:start position:0%
want to add to this
 

00:21:32.799 --> 00:21:34.630 align:start position:0%
want to add to this
namely<00:21:33.120><c> the</c><00:21:33.360><c> the</c><00:21:33.520><c> biggest</c><00:21:33.840><c> feature</c><00:21:34.159><c> i</c><00:21:34.320><c> think</c>

00:21:34.630 --> 00:21:34.640 align:start position:0%
namely the the biggest feature i think
 

00:21:34.640 --> 00:21:35.990 align:start position:0%
namely the the biggest feature i think
is<00:21:34.960><c> iterators</c>

00:21:35.990 --> 00:21:36.000 align:start position:0%
is iterators
 

00:21:36.000 --> 00:21:37.669 align:start position:0%
is iterators
so<00:21:36.400><c> at</c><00:21:36.480><c> the</c><00:21:36.640><c> moment</c><00:21:36.880><c> we're</c><00:21:37.039><c> having</c><00:21:37.280><c> to</c><00:21:37.440><c> write</c><00:21:37.600><c> a</c>

00:21:37.669 --> 00:21:37.679 align:start position:0%
so at the moment we're having to write a
 

00:21:37.679 --> 00:21:39.029 align:start position:0%
so at the moment we're having to write a
for<00:21:37.919><c> loop</c><00:21:38.159><c> like</c><00:21:38.320><c> this</c><00:21:38.480><c> but</c><00:21:38.640><c> it</c><00:21:38.720><c> would</c><00:21:38.880><c> be</c>

00:21:39.029 --> 00:21:39.039 align:start position:0%
for loop like this but it would be
 

00:21:39.039 --> 00:21:40.789 align:start position:0%
for loop like this but it would be
really<00:21:39.280><c> nice</c><00:21:39.600><c> if</c><00:21:39.679><c> we</c><00:21:39.840><c> could</c><00:21:40.000><c> simply</c>

00:21:40.789 --> 00:21:40.799 align:start position:0%
really nice if we could simply
 

00:21:40.799 --> 00:21:42.630 align:start position:0%
really nice if we could simply
have<00:21:41.039><c> a</c><00:21:41.200><c> for</c><00:21:41.360><c> loop</c><00:21:41.600><c> that</c><00:21:41.760><c> looks</c><00:21:42.000><c> something</c>

00:21:42.630 --> 00:21:42.640 align:start position:0%
have a for loop that looks something
 

00:21:42.640 --> 00:21:44.070 align:start position:0%
have a for loop that looks something
like<00:21:43.039><c> this</c><00:21:43.360><c> where</c><00:21:43.520><c> we</c><00:21:43.679><c> could</c>

00:21:44.070 --> 00:21:44.080 align:start position:0%
like this where we could
 

00:21:44.080 --> 00:21:46.549 align:start position:0%
like this where we could
get<00:21:44.320><c> through</c><00:21:44.720><c> our</c><00:21:45.039><c> entire</c><00:21:45.440><c> array</c><00:21:46.159><c> just</c><00:21:46.400><c> by</c>

00:21:46.549 --> 00:21:46.559 align:start position:0%
get through our entire array just by
 

00:21:46.559 --> 00:21:48.390 align:start position:0%
get through our entire array just by
using<00:21:46.799><c> a</c><00:21:46.880><c> range</c><00:21:47.280><c> based</c><00:21:47.520><c> for</c><00:21:47.760><c> loop</c><00:21:48.000><c> like</c><00:21:48.159><c> this</c>

00:21:48.390 --> 00:21:48.400 align:start position:0%
using a range based for loop like this
 

00:21:48.400 --> 00:21:49.750 align:start position:0%
using a range based for loop like this
and<00:21:48.480><c> to</c><00:21:48.559><c> make</c><00:21:48.720><c> that</c><00:21:48.880><c> happen</c><00:21:49.200><c> we</c><00:21:49.360><c> actually</c><00:21:49.600><c> need</c>

00:21:49.750 --> 00:21:49.760 align:start position:0%
and to make that happen we actually need
 

00:21:49.760 --> 00:21:51.590 align:start position:0%
and to make that happen we actually need
to<00:21:49.919><c> write</c><00:21:50.159><c> an</c><00:21:50.320><c> iterator</c><00:21:50.799><c> which</c><00:21:50.960><c> is</c><00:21:51.039><c> a</c><00:21:51.120><c> topic</c>

00:21:51.590 --> 00:21:51.600 align:start position:0%
to write an iterator which is a topic
 

00:21:51.600 --> 00:21:53.510 align:start position:0%
to write an iterator which is a topic
for<00:21:51.840><c> another</c><00:21:52.320><c> video</c><00:21:52.799><c> there</c><00:21:52.960><c> are</c><00:21:53.039><c> also</c><00:21:53.360><c> some</c>

00:21:53.510 --> 00:21:53.520 align:start position:0%
for another video there are also some
 

00:21:53.520 --> 00:21:55.350 align:start position:0%
for another video there are also some
other<00:21:53.760><c> utility</c><00:21:54.240><c> functions</c><00:21:54.640><c> such</c><00:21:54.880><c> as</c><00:21:55.039><c> fill</c>

00:21:55.350 --> 00:21:55.360 align:start position:0%
other utility functions such as fill
 

00:21:55.360 --> 00:21:56.870 align:start position:0%
other utility functions such as fill
and<00:21:55.520><c> swab</c><00:21:55.840><c> which</c><00:21:55.919><c> we</c><00:21:56.080><c> would</c><00:21:56.159><c> probably</c><00:21:56.480><c> want</c><00:21:56.640><c> to</c>

00:21:56.870 --> 00:21:56.880 align:start position:0%
and swab which we would probably want to
 

00:21:56.880 --> 00:21:58.710 align:start position:0%
and swab which we would probably want to
implement<00:21:57.280><c> just</c><00:21:57.440><c> to</c><00:21:57.600><c> make</c><00:21:57.919><c> dealing</c><00:21:58.320><c> with</c><00:21:58.480><c> our</c>

00:21:58.710 --> 00:21:58.720 align:start position:0%
implement just to make dealing with our
 

00:21:58.720 --> 00:21:59.430 align:start position:0%
implement just to make dealing with our
array

00:21:59.430 --> 00:21:59.440 align:start position:0%
array
 

00:21:59.440 --> 00:22:01.190 align:start position:0%
array
slightly<00:22:00.000><c> easier</c><00:22:00.400><c> but</c><00:22:00.559><c> that's</c><00:22:00.799><c> going</c><00:22:00.880><c> to</c><00:22:00.960><c> be</c>

00:22:01.190 --> 00:22:01.200 align:start position:0%
slightly easier but that's going to be
 

00:22:01.200 --> 00:22:02.470 align:start position:0%
slightly easier but that's going to be
it<00:22:01.520><c> for</c><00:22:01.760><c> today's</c>

00:22:02.470 --> 00:22:02.480 align:start position:0%
it for today's
 

00:22:02.480 --> 00:22:05.190 align:start position:0%
it for today's
video<00:22:04.000><c> okay</c><00:22:04.240><c> so</c><00:22:04.400><c> i</c><00:22:04.400><c> hope</c><00:22:04.559><c> you</c><00:22:04.640><c> guys</c><00:22:04.880><c> enjoyed</c>

00:22:05.190 --> 00:22:05.200 align:start position:0%
video okay so i hope you guys enjoyed
 

00:22:05.200 --> 00:22:06.390 align:start position:0%
video okay so i hope you guys enjoyed
this<00:22:05.360><c> video</c><00:22:05.679><c> if</c><00:22:05.840><c> you</c><00:22:05.919><c> did</c><00:22:06.000><c> please</c><00:22:06.240><c> don't</c>

00:22:06.390 --> 00:22:06.400 align:start position:0%
this video if you did please don't
 

00:22:06.400 --> 00:22:07.590 align:start position:0%
this video if you did please don't
forget<00:22:06.559><c> to</c><00:22:06.640><c> hit</c><00:22:06.799><c> the</c><00:22:06.880><c> like</c><00:22:07.039><c> button</c>

00:22:07.590 --> 00:22:07.600 align:start position:0%
forget to hit the like button
 

00:22:07.600 --> 00:22:09.990 align:start position:0%
forget to hit the like button
below<00:22:08.640><c> obviously</c><00:22:09.039><c> there's</c><00:22:09.360><c> a</c><00:22:09.440><c> lot</c><00:22:09.679><c> of</c><00:22:09.840><c> other</c>

00:22:09.990 --> 00:22:10.000 align:start position:0%
below obviously there's a lot of other
 

00:22:10.000 --> 00:22:11.909 align:start position:0%
below obviously there's a lot of other
things<00:22:10.240><c> we</c><00:22:10.400><c> could</c><00:22:10.640><c> add</c><00:22:10.880><c> to</c><00:22:11.039><c> this</c><00:22:11.280><c> array</c><00:22:11.600><c> class</c>

00:22:11.909 --> 00:22:11.919 align:start position:0%
things we could add to this array class
 

00:22:11.919 --> 00:22:13.669 align:start position:0%
things we could add to this array class
and<00:22:12.000><c> we</c><00:22:12.159><c> will</c><00:22:12.320><c> probably</c><00:22:12.720><c> end</c><00:22:12.960><c> up</c><00:22:13.120><c> extending</c><00:22:13.520><c> it</c>

00:22:13.669 --> 00:22:13.679 align:start position:0%
and we will probably end up extending it
 

00:22:13.679 --> 00:22:15.830 align:start position:0%
and we will probably end up extending it
in<00:22:13.760><c> some</c><00:22:13.919><c> future</c><00:22:14.240><c> videos</c><00:22:14.720><c> like</c><00:22:14.960><c> the</c><00:22:15.200><c> iterators</c>

00:22:15.830 --> 00:22:15.840 align:start position:0%
in some future videos like the iterators
 

00:22:15.840 --> 00:22:17.270 align:start position:0%
in some future videos like the iterators
and<00:22:16.000><c> stuff</c><00:22:16.320><c> like</c><00:22:16.480><c> that</c>

00:22:17.270 --> 00:22:17.280 align:start position:0%
and stuff like that
 

00:22:17.280 --> 00:22:19.750 align:start position:0%
and stuff like that
the<00:22:17.520><c> core</c><00:22:17.919><c> mechanics</c><00:22:18.559><c> of</c><00:22:18.799><c> a</c><00:22:18.880><c> stack</c><00:22:19.280><c> allocated</c>

00:22:19.750 --> 00:22:19.760 align:start position:0%
the core mechanics of a stack allocated
 

00:22:19.760 --> 00:22:21.430 align:start position:0%
the core mechanics of a stack allocated
array<00:22:20.159><c> are</c><00:22:20.320><c> quite</c><00:22:20.640><c> simple</c><00:22:21.039><c> as</c><00:22:21.200><c> you</c><00:22:21.280><c> can</c>

00:22:21.430 --> 00:22:21.440 align:start position:0%
array are quite simple as you can
 

00:22:21.440 --> 00:22:22.549 align:start position:0%
array are quite simple as you can
probably<00:22:21.919><c> see</c><00:22:22.159><c> and</c>

00:22:22.549 --> 00:22:22.559 align:start position:0%
probably see and
 

00:22:22.559 --> 00:22:24.390 align:start position:0%
probably see and
this<00:22:22.880><c> in</c><00:22:23.120><c> and</c><00:22:23.280><c> of</c><00:22:23.440><c> itself</c><00:22:23.919><c> is</c><00:22:24.159><c> quite</c><00:22:24.320><c> a</c>

00:22:24.390 --> 00:22:24.400 align:start position:0%
this in and of itself is quite a
 

00:22:24.400 --> 00:22:25.750 align:start position:0%
this in and of itself is quite a
powerful<00:22:24.799><c> data</c><00:22:25.120><c> structure</c>

00:22:25.750 --> 00:22:25.760 align:start position:0%
powerful data structure
 

00:22:25.760 --> 00:22:28.070 align:start position:0%
powerful data structure
that<00:22:25.919><c> you</c><00:22:26.080><c> can</c><00:22:26.320><c> and</c><00:22:26.480><c> should</c><00:22:26.880><c> use</c><00:22:27.360><c> frequently</c>

00:22:28.070 --> 00:22:28.080 align:start position:0%
that you can and should use frequently
 

00:22:28.080 --> 00:22:29.909 align:start position:0%
that you can and should use frequently
throughout<00:22:28.640><c> your</c><00:22:28.880><c> code</c><00:22:29.280><c> if</c><00:22:29.440><c> you</c><00:22:29.520><c> have</c><00:22:29.679><c> any</c>

00:22:29.909 --> 00:22:29.919 align:start position:0%
throughout your code if you have any
 

00:22:29.919 --> 00:22:31.270 align:start position:0%
throughout your code if you have any
other<00:22:30.080><c> suggestions</c><00:22:30.640><c> for</c><00:22:30.720><c> data</c><00:22:31.039><c> structures</c>

00:22:31.270 --> 00:22:31.280 align:start position:0%
other suggestions for data structures
 

00:22:31.280 --> 00:22:32.870 align:start position:0%
other suggestions for data structures
for<00:22:31.440><c> me</c><00:22:31.520><c> to</c><00:22:31.600><c> cover</c><00:22:31.840><c> obviously</c><00:22:32.159><c> i</c><00:22:32.320><c> have</c><00:22:32.480><c> a</c><00:22:32.640><c> long</c>

00:22:32.870 --> 00:22:32.880 align:start position:0%
for me to cover obviously i have a long
 

00:22:32.880 --> 00:22:34.549 align:start position:0%
for me to cover obviously i have a long
list<00:22:33.200><c> of</c><00:22:33.360><c> all</c><00:22:33.520><c> of</c><00:22:33.600><c> the</c><00:22:33.679><c> popular</c><00:22:34.080><c> ones</c><00:22:34.320><c> but</c><00:22:34.480><c> if</c>

00:22:34.549 --> 00:22:34.559 align:start position:0%
list of all of the popular ones but if
 

00:22:34.559 --> 00:22:35.990 align:start position:0%
list of all of the popular ones but if
there's<00:22:34.720><c> something</c><00:22:35.039><c> specific</c><00:22:35.600><c> that</c><00:22:35.679><c> you</c><00:22:35.840><c> want</c>

00:22:35.990 --> 00:22:36.000 align:start position:0%
there's something specific that you want
 

00:22:36.000 --> 00:22:37.430 align:start position:0%
there's something specific that you want
me<00:22:36.159><c> to</c><00:22:36.240><c> cover</c><00:22:36.559><c> or</c><00:22:36.799><c> a</c><00:22:36.880><c> different</c><00:22:37.120><c> data</c>

00:22:37.430 --> 00:22:37.440 align:start position:0%
me to cover or a different data
 

00:22:37.440 --> 00:22:38.070 align:start position:0%
me to cover or a different data
structure

00:22:38.070 --> 00:22:38.080 align:start position:0%
structure
 

00:22:38.080 --> 00:22:39.350 align:start position:0%
structure
that<00:22:38.240><c> you</c><00:22:38.320><c> want</c><00:22:38.480><c> me</c><00:22:38.640><c> to</c><00:22:38.720><c> cover</c><00:22:38.960><c> next</c><00:22:39.200><c> please</c>

00:22:39.350 --> 00:22:39.360 align:start position:0%
that you want me to cover next please
 

00:22:39.360 --> 00:22:40.950 align:start position:0%
that you want me to cover next please
let<00:22:39.520><c> me</c><00:22:39.600><c> know</c><00:22:39.840><c> in</c><00:22:39.919><c> the</c><00:22:40.080><c> comment</c><00:22:40.480><c> section</c><00:22:40.720><c> below</c>

00:22:40.950 --> 00:22:40.960 align:start position:0%
let me know in the comment section below
 

00:22:40.960 --> 00:22:42.310 align:start position:0%
let me know in the comment section below
i'll<00:22:41.120><c> take</c><00:22:41.280><c> a</c><00:22:41.360><c> list</c><00:22:41.600><c> probably</c>

00:22:42.310 --> 00:22:42.320 align:start position:0%
i'll take a list probably
 

00:22:42.320 --> 00:22:44.390 align:start position:0%
i'll take a list probably
of<00:22:42.480><c> all</c><00:22:42.640><c> of</c><00:22:42.720><c> your</c><00:22:42.960><c> suggestions</c><00:22:43.919><c> and</c><00:22:44.080><c> we'll</c><00:22:44.240><c> get</c>

00:22:44.390 --> 00:22:44.400 align:start position:0%
of all of your suggestions and we'll get
 

00:22:44.400 --> 00:22:46.070 align:start position:0%
of all of your suggestions and we'll get
around<00:22:44.640><c> to</c><00:22:44.799><c> doing</c><00:22:44.960><c> them</c><00:22:45.200><c> as</c><00:22:45.360><c> soon</c><00:22:45.600><c> as</c><00:22:45.679><c> possible</c>

00:22:46.070 --> 00:22:46.080 align:start position:0%
around to doing them as soon as possible
 

00:22:46.080 --> 00:22:47.830 align:start position:0%
around to doing them as soon as possible
thank<00:22:46.240><c> you</c><00:22:46.400><c> guys</c><00:22:46.640><c> once</c><00:22:46.880><c> again</c><00:22:47.280><c> for</c><00:22:47.440><c> watching</c>

00:22:47.830 --> 00:22:47.840 align:start position:0%
thank you guys once again for watching
 

00:22:47.840 --> 00:22:49.750 align:start position:0%
thank you guys once again for watching
do<00:22:48.000><c> not</c><00:22:48.159><c> forget</c><00:22:48.559><c> to</c><00:22:48.720><c> check</c><00:22:48.960><c> out</c><00:22:49.120><c> skillshare's</c>

00:22:49.750 --> 00:22:49.760 align:start position:0%
do not forget to check out skillshare's
 

00:22:49.760 --> 00:22:50.549 align:start position:0%
do not forget to check out skillshare's
two<00:22:49.919><c> months</c>

00:22:50.549 --> 00:22:50.559 align:start position:0%
two months
 

00:22:50.559 --> 00:22:52.390 align:start position:0%
two months
of<00:22:50.799><c> free</c><00:22:51.039><c> premium</c><00:22:51.600><c> using</c><00:22:51.840><c> my</c><00:22:52.000><c> link</c><00:22:52.240><c> in</c><00:22:52.320><c> the</c>

00:22:52.390 --> 00:22:52.400 align:start position:0%
of free premium using my link in the
 

00:22:52.400 --> 00:22:53.990 align:start position:0%
of free premium using my link in the
description<00:22:52.799><c> below</c><00:22:53.440><c> and</c><00:22:53.600><c> i</c><00:22:53.679><c> will</c><00:22:53.760><c> see</c>

00:22:53.990 --> 00:22:54.000 align:start position:0%
description below and i will see
 

00:22:54.000 --> 00:23:13.750 align:start position:0%
description below and i will see
you<00:22:54.080><c> next</c><00:22:54.320><c> time</c><00:23:06.840><c> goodbye</c>

00:23:13.750 --> 00:23:13.760 align:start position:0%
 
 

00:23:13.760 --> 00:23:17.990 align:start position:0%
 
[Music]

00:23:17.990 --> 00:23:18.000 align:start position:0%
[Music]
 

00:23:18.000 --> 00:23:20.080 align:start position:0%
[Music]
you

