WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.910 align:start position:0%
 
hey<00:00:00.210><c> what's</c><00:00:00.510><c> up</c><00:00:00.570><c> guys</c><00:00:00.719><c> my</c><00:00:01.199><c> name</c><00:00:01.380><c> is</c><00:00:01.410><c> the</c><00:00:01.680><c> chana</c>

00:00:01.910 --> 00:00:01.920 align:start position:0%
hey what's up guys my name is the chana
 

00:00:01.920 --> 00:00:04.220 align:start position:0%
hey what's up guys my name is the chana
welcome<00:00:02.340><c> back</c><00:00:02.490><c> to</c><00:00:02.669><c> my</c><00:00:02.820><c> C++</c><00:00:03.480><c> series</c><00:00:03.899><c> today</c>

00:00:04.220 --> 00:00:04.230 align:start position:0%
welcome back to my C++ series today
 

00:00:04.230 --> 00:00:05.420 align:start position:0%
welcome back to my C++ series today
we're<00:00:04.319><c> gonna</c><00:00:04.410><c> be</c><00:00:04.500><c> talking</c><00:00:04.620><c> all</c><00:00:04.830><c> about</c><00:00:04.920><c> copying</c>

00:00:05.420 --> 00:00:05.430 align:start position:0%
we're gonna be talking all about copying
 

00:00:05.430 --> 00:00:07.099 align:start position:0%
we're gonna be talking all about copying
and<00:00:05.670><c> what</c><00:00:05.819><c> a</c><00:00:05.850><c> copy</c><00:00:06.089><c> constructor</c><00:00:06.629><c> is</c><00:00:06.810><c> the</c><00:00:07.049><c> in</c>

00:00:07.099 --> 00:00:07.109 align:start position:0%
and what a copy constructor is the in
 

00:00:07.109 --> 00:00:10.070 align:start position:0%
and what a copy constructor is the in
C++<00:00:07.740><c> so</c><00:00:08.099><c> copying</c><00:00:08.490><c> refers</c><00:00:08.760><c> to</c><00:00:08.790><c> us</c><00:00:09.120><c> copying</c><00:00:09.750><c> data</c>

00:00:10.070 --> 00:00:10.080 align:start position:0%
C++ so copying refers to us copying data
 

00:00:10.080 --> 00:00:12.259 align:start position:0%
C++ so copying refers to us copying data
copying<00:00:10.710><c> memory</c><00:00:11.219><c> when</c><00:00:11.429><c> we</c><00:00:11.519><c> literally</c><00:00:11.849><c> want</c><00:00:12.150><c> to</c>

00:00:12.259 --> 00:00:12.269 align:start position:0%
copying memory when we literally want to
 

00:00:12.269 --> 00:00:14.600 align:start position:0%
copying memory when we literally want to
copy<00:00:12.570><c> one</c><00:00:12.870><c> object</c><00:00:13.440><c> or</c><00:00:13.590><c> primitive</c><00:00:13.889><c> or</c><00:00:14.280><c> just</c><00:00:14.490><c> a</c>

00:00:14.600 --> 00:00:14.610 align:start position:0%
copy one object or primitive or just a
 

00:00:14.610 --> 00:00:16.460 align:start position:0%
copy one object or primitive or just a
piece<00:00:14.820><c> of</c><00:00:14.849><c> data</c><00:00:15.179><c> from</c><00:00:15.570><c> kind</c><00:00:16.080><c> of</c><00:00:16.139><c> one</c><00:00:16.289><c> place</c>

00:00:16.460 --> 00:00:16.470 align:start position:0%
piece of data from kind of one place
 

00:00:16.470 --> 00:00:17.990 align:start position:0%
piece of data from kind of one place
into<00:00:16.740><c> another</c><00:00:16.980><c> so</c><00:00:17.310><c> that</c><00:00:17.430><c> we</c><00:00:17.490><c> literally</c><00:00:17.760><c> have</c>

00:00:17.990 --> 00:00:18.000 align:start position:0%
into another so that we literally have
 

00:00:18.000 --> 00:00:20.060 align:start position:0%
into another so that we literally have
two<00:00:18.570><c> copies</c><00:00:18.990><c> of</c><00:00:19.109><c> it</c><00:00:19.170><c> a</c><00:00:19.410><c> lot</c><00:00:19.590><c> of</c><00:00:19.680><c> the</c><00:00:19.740><c> time</c><00:00:19.920><c> we</c>

00:00:20.060 --> 00:00:20.070 align:start position:0%
two copies of it a lot of the time we
 

00:00:20.070 --> 00:00:21.890 align:start position:0%
two copies of it a lot of the time we
want<00:00:20.250><c> to</c><00:00:20.340><c> copy</c><00:00:20.580><c> objects</c><00:00:21.150><c> that</c><00:00:21.359><c> we</c><00:00:21.449><c> can</c><00:00:21.600><c> modify</c>

00:00:21.890 --> 00:00:21.900 align:start position:0%
want to copy objects that we can modify
 

00:00:21.900 --> 00:00:23.960 align:start position:0%
want to copy objects that we can modify
them<00:00:22.140><c> in</c><00:00:22.199><c> certain</c><00:00:22.619><c> ways</c><00:00:22.769><c> but</c><00:00:23.070><c> if</c><00:00:23.310><c> if</c><00:00:23.640><c> we</c><00:00:23.820><c> can</c>

00:00:23.960 --> 00:00:23.970 align:start position:0%
them in certain ways but if if we can
 

00:00:23.970 --> 00:00:25.429 align:start position:0%
them in certain ways but if if we can
avoid<00:00:24.210><c> copying</c><00:00:24.720><c> if</c><00:00:24.810><c> we</c><00:00:24.930><c> can</c><00:00:25.080><c> avoid</c>

00:00:25.429 --> 00:00:25.439 align:start position:0%
avoid copying if we can avoid
 

00:00:25.439 --> 00:00:27.109 align:start position:0%
avoid copying if we can avoid
unnecessary<00:00:26.070><c> copying</c><00:00:26.460><c> because</c><00:00:26.580><c> we</c><00:00:26.820><c> just</c><00:00:26.970><c> want</c>

00:00:27.109 --> 00:00:27.119 align:start position:0%
unnecessary copying because we just want
 

00:00:27.119 --> 00:00:28.849 align:start position:0%
unnecessary copying because we just want
to<00:00:27.180><c> read</c><00:00:27.359><c> the</c><00:00:27.510><c> value</c><00:00:27.869><c> or</c><00:00:27.990><c> we</c><00:00:28.109><c> want</c><00:00:28.320><c> to</c><00:00:28.439><c> actually</c>

00:00:28.849 --> 00:00:28.859 align:start position:0%
to read the value or we want to actually
 

00:00:28.859 --> 00:00:31.310 align:start position:0%
to read the value or we want to actually
modify<00:00:29.099><c> an</c><00:00:29.369><c> existing</c><00:00:29.460><c> object</c><00:00:29.939><c> we</c><00:00:30.750><c> absolutely</c>

00:00:31.310 --> 00:00:31.320 align:start position:0%
modify an existing object we absolutely
 

00:00:31.320 --> 00:00:33.560 align:start position:0%
modify an existing object we absolutely
want<00:00:31.740><c> to</c><00:00:31.830><c> do</c><00:00:31.920><c> that</c><00:00:32.070><c> because</c><00:00:32.309><c> copying</c><00:00:33.300><c> takes</c>

00:00:33.560 --> 00:00:33.570 align:start position:0%
want to do that because copying takes
 

00:00:33.570 --> 00:00:35.450 align:start position:0%
want to do that because copying takes
time<00:00:33.840><c> so</c><00:00:34.170><c> copying</c><00:00:34.530><c> can</c><00:00:34.710><c> be</c><00:00:34.829><c> both</c><00:00:35.070><c> a</c><00:00:35.190><c> really</c>

00:00:35.450 --> 00:00:35.460 align:start position:0%
time so copying can be both a really
 

00:00:35.460 --> 00:00:37.190 align:start position:0%
time so copying can be both a really
useful<00:00:35.880><c> thing</c><00:00:36.059><c> that</c><00:00:36.090><c> we</c><00:00:36.300><c> actually</c><00:00:36.420><c> need</c><00:00:36.930><c> to</c>

00:00:37.190 --> 00:00:37.200 align:start position:0%
useful thing that we actually need to
 

00:00:37.200 --> 00:00:38.660 align:start position:0%
useful thing that we actually need to
make<00:00:37.230><c> our</c><00:00:37.500><c> program</c><00:00:37.860><c> work</c><00:00:38.100><c> the</c><00:00:38.340><c> way</c><00:00:38.460><c> that</c><00:00:38.489><c> we</c>

00:00:38.660 --> 00:00:38.670 align:start position:0%
make our program work the way that we
 

00:00:38.670 --> 00:00:40.209 align:start position:0%
make our program work the way that we
wanted<00:00:39.059><c> to</c><00:00:39.120><c> but</c><00:00:39.719><c> on</c><00:00:39.840><c> the</c><00:00:39.930><c> flip</c><00:00:40.110><c> side</c>

00:00:40.209 --> 00:00:40.219 align:start position:0%
wanted to but on the flip side
 

00:00:40.219 --> 00:00:42.799 align:start position:0%
wanted to but on the flip side
unnecessary<00:00:41.219><c> copying</c><00:00:41.670><c> is</c><00:00:41.910><c> bad</c><00:00:42.329><c> and</c><00:00:42.570><c> we</c><00:00:42.629><c> want</c>

00:00:42.799 --> 00:00:42.809 align:start position:0%
unnecessary copying is bad and we want
 

00:00:42.809 --> 00:00:43.910 align:start position:0%
unnecessary copying is bad and we want
to<00:00:42.899><c> avoid</c><00:00:43.140><c> that</c><00:00:43.350><c> as</c><00:00:43.469><c> much</c><00:00:43.620><c> as</c><00:00:43.649><c> possible</c>

00:00:43.910 --> 00:00:43.920 align:start position:0%
to avoid that as much as possible
 

00:00:43.920 --> 00:00:46.430 align:start position:0%
to avoid that as much as possible
because<00:00:44.340><c> it</c><00:00:44.700><c> wastes</c><00:00:45.510><c> performance</c><00:00:46.079><c> so</c>

00:00:46.430 --> 00:00:46.440 align:start position:0%
because it wastes performance so
 

00:00:46.440 --> 00:00:48.080 align:start position:0%
because it wastes performance so
understanding<00:00:47.039><c> how</c><00:00:47.070><c> copying</c><00:00:47.610><c> actually</c><00:00:47.850><c> works</c>

00:00:48.080 --> 00:00:48.090 align:start position:0%
understanding how copying actually works
 

00:00:48.090 --> 00:00:50.660 align:start position:0%
understanding how copying actually works
in<00:00:48.300><c> C++</c><00:00:48.840><c> and</c><00:00:49.079><c> how</c><00:00:49.620><c> to</c><00:00:49.680><c> get</c><00:00:49.950><c> it</c><00:00:50.100><c> to</c><00:00:50.219><c> work</c><00:00:50.370><c> and</c>

00:00:50.660 --> 00:00:50.670 align:start position:0%
in C++ and how to get it to work and
 

00:00:50.670 --> 00:00:52.939 align:start position:0%
in C++ and how to get it to work and
also<00:00:50.910><c> how</c><00:00:51.059><c> to</c><00:00:51.120><c> avoid</c><00:00:51.539><c> getting</c><00:00:52.170><c> it</c><00:00:52.440><c> to</c><00:00:52.590><c> work</c><00:00:52.770><c> or</c>

00:00:52.939 --> 00:00:52.949 align:start position:0%
also how to avoid getting it to work or
 

00:00:52.949 --> 00:00:54.500 align:start position:0%
also how to avoid getting it to work or
avoid<00:00:53.250><c> copying</c><00:00:53.670><c> when</c><00:00:53.820><c> you</c><00:00:53.910><c> don't</c><00:00:54.120><c> want</c><00:00:54.390><c> to</c>

00:00:54.500 --> 00:00:54.510 align:start position:0%
avoid copying when you don't want to
 

00:00:54.510 --> 00:00:56.689 align:start position:0%
avoid copying when you don't want to
copy<00:00:54.750><c> is</c><00:00:55.079><c> very</c><00:00:55.500><c> important</c><00:00:56.010><c> to</c><00:00:56.190><c> understanding</c>

00:00:56.689 --> 00:00:56.699 align:start position:0%
copy is very important to understanding
 

00:00:56.699 --> 00:00:58.340 align:start position:0%
copy is very important to understanding
the<00:00:56.760><c> language</c><00:00:56.969><c> and</c><00:00:57.270><c> being</c><00:00:57.570><c> able</c><00:00:57.660><c> to</c><00:00:57.809><c> write</c><00:00:58.020><c> C++</c>

00:00:58.340 --> 00:00:58.350 align:start position:0%
the language and being able to write C++
 

00:00:58.350 --> 00:01:01.099 align:start position:0%
the language and being able to write C++
code<00:00:58.829><c> efficiently</c><00:00:59.760><c> and</c><00:00:59.940><c> correctly</c><00:01:00.390><c> so</c><00:01:00.899><c> to</c>

00:01:01.099 --> 00:01:01.109 align:start position:0%
code efficiently and correctly so to
 

00:01:01.109 --> 00:01:02.930 align:start position:0%
code efficiently and correctly so to
demonstrate<00:01:01.559><c> this</c><00:01:01.680><c> in</c><00:01:01.859><c> an</c><00:01:02.250><c> effective</c><00:01:02.640><c> way</c><00:01:02.670><c> I'm</c>

00:01:02.930 --> 00:01:02.940 align:start position:0%
demonstrate this in an effective way I'm
 

00:01:02.940 --> 00:01:04.070 align:start position:0%
demonstrate this in an effective way I'm
actually<00:01:03.059><c> going</c><00:01:03.329><c> to</c><00:01:03.420><c> write</c><00:01:03.719><c> a</c><00:01:03.750><c> full</c><00:01:03.960><c> on</c>

00:01:04.070 --> 00:01:04.080 align:start position:0%
actually going to write a full on
 

00:01:04.080 --> 00:01:05.600 align:start position:0%
actually going to write a full on
example<00:01:04.559><c> window</c><00:01:04.769><c> write</c><00:01:04.890><c> a</c><00:01:04.920><c> class</c><00:01:05.189><c> it's</c><00:01:05.519><c> gonna</c>

00:01:05.600 --> 00:01:05.610 align:start position:0%
example window write a class it's gonna
 

00:01:05.610 --> 00:01:07.160 align:start position:0%
example window write a class it's gonna
be<00:01:05.760><c> a</c><00:01:05.790><c> string</c><00:01:06.030><c> class</c><00:01:06.240><c> and</c><00:01:06.869><c> we're</c><00:01:06.960><c> gonna</c><00:01:07.049><c> talk</c>

00:01:07.160 --> 00:01:07.170 align:start position:0%
be a string class and we're gonna talk
 

00:01:07.170 --> 00:01:09.320 align:start position:0%
be a string class and we're gonna talk
about<00:01:07.260><c> how</c><00:01:07.530><c> copying</c><00:01:07.950><c> affects</c><00:01:08.400><c> that</c><00:01:08.610><c> and</c><00:01:09.000><c> what</c>

00:01:09.320 --> 00:01:09.330 align:start position:0%
about how copying affects that and what
 

00:01:09.330 --> 00:01:11.899 align:start position:0%
about how copying affects that and what
we<00:01:09.450><c> can</c><00:01:09.600><c> do</c><00:01:09.750><c> to</c><00:01:09.930><c> to</c><00:01:10.439><c> both</c><00:01:10.590><c> remove</c><00:01:11.400><c> copying</c><00:01:11.790><c> when</c>

00:01:11.899 --> 00:01:11.909 align:start position:0%
we can do to to both remove copying when
 

00:01:11.909 --> 00:01:14.060 align:start position:0%
we can do to to both remove copying when
we<00:01:11.970><c> don't</c><00:01:12.150><c> want</c><00:01:12.299><c> copying</c><00:01:12.630><c> but</c><00:01:12.960><c> also</c><00:01:13.110><c> even</c><00:01:13.380><c> you</c>

00:01:14.060 --> 00:01:14.070 align:start position:0%
we don't want copying but also even you
 

00:01:14.070 --> 00:01:15.380 align:start position:0%
we don't want copying but also even you
know<00:01:14.159><c> add</c><00:01:14.310><c> copying</c><00:01:14.760><c> so</c><00:01:14.880><c> that</c><00:01:15.000><c> we</c><00:01:15.090><c> can</c><00:01:15.210><c> copy</c>

00:01:15.380 --> 00:01:15.390 align:start position:0%
know add copying so that we can copy
 

00:01:15.390 --> 00:01:17.149 align:start position:0%
know add copying so that we can copy
correctly<00:01:15.869><c> so</c><00:01:16.049><c> first</c><00:01:16.259><c> of</c><00:01:16.380><c> all</c><00:01:16.470><c> let's</c><00:01:17.009><c> jump</c>

00:01:17.149 --> 00:01:17.159 align:start position:0%
correctly so first of all let's jump
 

00:01:17.159 --> 00:01:18.380 align:start position:0%
correctly so first of all let's jump
into<00:01:17.310><c> the</c><00:01:17.400><c> code</c><00:01:17.549><c> and</c><00:01:17.820><c> take</c><00:01:17.970><c> a</c><00:01:18.030><c> look</c><00:01:18.150><c> at</c><00:01:18.240><c> what</c>

00:01:18.380 --> 00:01:18.390 align:start position:0%
into the code and take a look at what
 

00:01:18.390 --> 00:01:20.120 align:start position:0%
into the code and take a look at what
copying<00:01:18.689><c> looks</c><00:01:18.840><c> like</c><00:01:19.020><c> so</c><00:01:19.229><c> if</c><00:01:19.710><c> I</c><00:01:19.860><c> declare</c><00:01:20.100><c> a</c>

00:01:20.120 --> 00:01:20.130 align:start position:0%
copying looks like so if I declare a
 

00:01:20.130 --> 00:01:21.890 align:start position:0%
copying looks like so if I declare a
variable<00:01:20.340><c> a</c><00:01:20.700><c> primitive</c><00:01:21.090><c> type</c><00:01:21.270><c> like</c><00:01:21.450><c> a</c><00:01:21.600><c> and</c>

00:01:21.890 --> 00:01:21.900 align:start position:0%
variable a primitive type like a and
 

00:01:21.900 --> 00:01:23.359 align:start position:0%
variable a primitive type like a and
then<00:01:22.320><c> I</c><00:01:22.380><c> declare</c><00:01:22.530><c> another</c><00:01:22.770><c> primitive</c><00:01:23.220><c> type</c>

00:01:23.359 --> 00:01:23.369 align:start position:0%
then I declare another primitive type
 

00:01:23.369 --> 00:01:25.789 align:start position:0%
then I declare another primitive type
called<00:01:23.610><c> B</c><00:01:23.820><c> and</c><00:01:24.270><c> I</c><00:01:24.390><c> assign</c><00:01:24.659><c> it</c><00:01:24.689><c> to</c><00:01:24.840><c> a</c><00:01:24.960><c> and</c><00:01:25.680><c> what</c>

00:01:25.789 --> 00:01:25.799 align:start position:0%
called B and I assign it to a and what
 

00:01:25.799 --> 00:01:26.899 align:start position:0%
called B and I assign it to a and what
I'm<00:01:25.890><c> actually</c><00:01:25.950><c> doing</c><00:01:26.159><c> is</c><00:01:26.369><c> I'm</c><00:01:26.520><c> creating</c><00:01:26.850><c> a</c>

00:01:26.899 --> 00:01:26.909 align:start position:0%
I'm actually doing is I'm creating a
 

00:01:26.909 --> 00:01:28.880 align:start position:0%
I'm actually doing is I'm creating a
copy<00:01:27.150><c> of</c><00:01:27.330><c> it</c><00:01:27.479><c> so</c><00:01:27.659><c> a</c><00:01:27.689><c> and</c><00:01:27.960><c> B</c><00:01:28.110><c> are</c><00:01:28.320><c> two</c><00:01:28.530><c> separate</c>

00:01:28.880 --> 00:01:28.890 align:start position:0%
copy of it so a and B are two separate
 

00:01:28.890 --> 00:01:30.230 align:start position:0%
copy of it so a and B are two separate
variables<00:01:29.310><c> which</c><00:01:29.460><c> have</c><00:01:29.490><c> different</c><00:01:29.820><c> memory</c>

00:01:30.230 --> 00:01:30.240 align:start position:0%
variables which have different memory
 

00:01:30.240 --> 00:01:32.179 align:start position:0%
variables which have different memory
addresses<00:01:30.720><c> because</c><00:01:31.020><c> of</c><00:01:31.320><c> this</c><00:01:31.439><c> if</c><00:01:31.590><c> I</c><00:01:31.710><c> change</c><00:01:31.979><c> B</c>

00:01:32.179 --> 00:01:32.189 align:start position:0%
addresses because of this if I change B
 

00:01:32.189 --> 00:01:34.640 align:start position:0%
addresses because of this if I change B
to<00:01:32.250><c> three</c><00:01:32.610><c> a</c><00:01:32.820><c> will</c><00:01:33.240><c> remain</c><00:01:33.600><c> at</c><00:01:33.869><c> -</c><00:01:34.140><c> I</c><00:01:34.170><c> literally</c>

00:01:34.640 --> 00:01:34.650 align:start position:0%
to three a will remain at - I literally
 

00:01:34.650 --> 00:01:36.890 align:start position:0%
to three a will remain at - I literally
have<00:01:34.799><c> two</c><00:01:35.310><c> different</c><00:01:35.759><c> values</c><00:01:35.909><c> in</c><00:01:36.360><c> my</c><00:01:36.540><c> memory</c>

00:01:36.890 --> 00:01:36.900 align:start position:0%
have two different values in my memory
 

00:01:36.900 --> 00:01:38.840 align:start position:0%
have two different values in my memory
with<00:01:37.229><c> classes</c><00:01:37.680><c> this</c><00:01:37.860><c> works</c><00:01:38.070><c> the</c><00:01:38.220><c> same</c><00:01:38.400><c> way</c><00:01:38.610><c> if</c>

00:01:38.840 --> 00:01:38.850 align:start position:0%
with classes this works the same way if
 

00:01:38.850 --> 00:01:40.370 align:start position:0%
with classes this works the same way if
I<00:01:38.970><c> just</c><00:01:39.119><c> have</c><00:01:39.270><c> a</c><00:01:39.299><c> struct</c><00:01:39.659><c> maybe</c><00:01:39.960><c> that's</c><00:01:40.229><c> going</c>

00:01:40.370 --> 00:01:40.380 align:start position:0%
I just have a struct maybe that's going
 

00:01:40.380 --> 00:01:42.920 align:start position:0%
I just have a struct maybe that's going
to<00:01:40.560><c> be</c><00:01:40.680><c> a</c><00:01:40.710><c> two</c><00:01:40.890><c> component</c><00:01:41.340><c> vector</c><00:01:41.420><c> float</c><00:01:42.420><c> X</c><00:01:42.689><c> Y</c>

00:01:42.920 --> 00:01:42.930 align:start position:0%
to be a two component vector float X Y
 

00:01:42.930 --> 00:01:44.929 align:start position:0%
to be a two component vector float X Y
whatever<00:01:43.290><c> if</c><00:01:43.740><c> I</c><00:01:43.890><c> have</c><00:01:44.070><c> one</c><00:01:44.310><c> back</c><00:01:44.549><c> to</c><00:01:44.700><c> here</c>

00:01:44.929 --> 00:01:44.939 align:start position:0%
whatever if I have one back to here
 

00:01:44.939 --> 00:01:48.200 align:start position:0%
whatever if I have one back to here
which<00:01:45.659><c> is</c><00:01:45.689><c> set</c><00:01:46.020><c> to</c><00:01:46.259><c> two</c><00:01:46.920><c> and</c><00:01:47.130><c> three</c><00:01:47.430><c> and</c><00:01:47.729><c> I</c><00:01:48.000><c> then</c>

00:01:48.200 --> 00:01:48.210 align:start position:0%
which is set to two and three and I then
 

00:01:48.210 --> 00:01:49.819 align:start position:0%
which is set to two and three and I then
create<00:01:48.509><c> another</c><00:01:48.720><c> vector</c><00:01:48.990><c> called</c><00:01:49.470><c> me</c><00:01:49.680><c> and</c>

00:01:49.819 --> 00:01:49.829 align:start position:0%
create another vector called me and
 

00:01:49.829 --> 00:01:52.219 align:start position:0%
create another vector called me and
assign<00:01:50.070><c> it</c><00:01:50.189><c> to</c><00:01:50.220><c> a</c><00:01:50.430><c> if</c><00:01:51.000><c> I</c><00:01:51.180><c> start</c><00:01:51.479><c> modifying</c><00:01:51.720><c> B</c>

00:01:52.219 --> 00:01:52.229 align:start position:0%
assign it to a if I start modifying B
 

00:01:52.229 --> 00:01:55.069 align:start position:0%
assign it to a if I start modifying B
and<00:01:52.590><c> set</c><00:01:52.950><c> the</c><00:01:53.100><c> X</c><00:01:53.250><c> to</c><00:01:53.399><c> 5</c><00:01:53.640><c> then</c><00:01:54.060><c> a</c><00:01:54.270><c> dot</c><00:01:54.479><c> X</c><00:01:54.720><c> is</c><00:01:54.869><c> still</c>

00:01:55.069 --> 00:01:55.079 align:start position:0%
and set the X to 5 then a dot X is still
 

00:01:55.079 --> 00:01:56.749 align:start position:0%
and set the X to 5 then a dot X is still
actually<00:01:55.200><c> going</c><00:01:55.500><c> to</c><00:01:55.649><c> remain</c><00:01:55.860><c> it</c><00:01:56.009><c> too</c><00:01:56.219><c> because</c>

00:01:56.749 --> 00:01:56.759 align:start position:0%
actually going to remain it too because
 

00:01:56.759 --> 00:01:58.730 align:start position:0%
actually going to remain it too because
by<00:01:57.030><c> doing</c><00:01:57.090><c> something</c><00:01:57.600><c> like</c><00:01:57.630><c> this</c><00:01:57.899><c> I'm</c><00:01:58.200><c> copying</c>

00:01:58.730 --> 00:01:58.740 align:start position:0%
by doing something like this I'm copying
 

00:01:58.740 --> 00:02:01.910 align:start position:0%
by doing something like this I'm copying
the<00:01:59.189><c> value</c><00:01:59.340><c> I'm</c><00:01:59.820><c> copying</c><00:02:00.329><c> what</c><00:02:00.750><c> a</c><00:02:00.960><c> is</c><00:02:01.229><c> into</c><00:02:01.710><c> B</c>

00:02:01.910 --> 00:02:01.920 align:start position:0%
the value I'm copying what a is into B
 

00:02:01.920 --> 00:02:03.889 align:start position:0%
the value I'm copying what a is into B
just<00:02:02.549><c> like</c><00:02:02.610><c> with</c><00:02:02.909><c> that</c><00:02:03.030><c> integer</c><00:02:03.299><c> example</c>

00:02:03.889 --> 00:02:03.899 align:start position:0%
just like with that integer example
 

00:02:03.899 --> 00:02:05.359 align:start position:0%
just like with that integer example
there<00:02:04.049><c> going</c><00:02:04.200><c> to</c><00:02:04.229><c> be</c><00:02:04.320><c> two</c><00:02:04.560><c> separate</c><00:02:04.860><c> variables</c>

00:02:05.359 --> 00:02:05.369 align:start position:0%
there going to be two separate variables
 

00:02:05.369 --> 00:02:07.039 align:start position:0%
there going to be two separate variables
which<00:02:05.549><c> occupy</c><00:02:06.060><c> two</c><00:02:06.329><c> different</c><00:02:06.750><c> memory</c>

00:02:07.039 --> 00:02:07.049 align:start position:0%
which occupy two different memory
 

00:02:07.049 --> 00:02:09.589 align:start position:0%
which occupy two different memory
addresses<00:02:07.500><c> now</c><00:02:07.860><c> if</c><00:02:08.160><c> you</c><00:02:08.340><c> must</c><00:02:08.520><c> use</c><00:02:08.910><c> the</c><00:02:09.420><c> new</c>

00:02:09.589 --> 00:02:09.599 align:start position:0%
addresses now if you must use the new
 

00:02:09.599 --> 00:02:11.449 align:start position:0%
addresses now if you must use the new
keyword<00:02:09.840><c> here</c><00:02:10.259><c> in</c><00:02:10.379><c> heap</c><00:02:10.560><c> allocate</c><00:02:10.979><c> this</c><00:02:11.190><c> so</c>

00:02:11.449 --> 00:02:11.459 align:start position:0%
keyword here in heap allocate this so
 

00:02:11.459 --> 00:02:12.590 align:start position:0%
keyword here in heap allocate this so
I'll<00:02:11.610><c> do</c><00:02:11.910><c> something</c><00:02:12.150><c> like</c>

00:02:12.590 --> 00:02:12.600 align:start position:0%
I'll do something like
 

00:02:12.600 --> 00:02:15.110 align:start position:0%
I'll do something like
Victor<00:02:12.840><c> 2a</c><00:02:13.050><c> equals</c><00:02:13.260><c> new</c><00:02:13.860><c> vector2</c><00:02:14.340><c> we're</c>

00:02:15.110 --> 00:02:15.120 align:start position:0%
Victor 2a equals new vector2 we're
 

00:02:15.120 --> 00:02:16.220 align:start position:0%
Victor 2a equals new vector2 we're
actually<00:02:15.210><c> going</c><00:02:15.480><c> to</c><00:02:15.600><c> need</c><00:02:15.690><c> to</c><00:02:15.810><c> either</c><00:02:15.990><c> define</c>

00:02:16.220 --> 00:02:16.230 align:start position:0%
actually going to need to either define
 

00:02:16.230 --> 00:02:17.930 align:start position:0%
actually going to need to either define
a<00:02:16.260><c> constructor</c><00:02:16.470><c> or</c><00:02:16.860><c> in</c><00:02:16.980><c> this</c><00:02:17.070><c> case</c><00:02:17.280><c> well</c><00:02:17.700><c> it</c>

00:02:17.930 --> 00:02:17.940 align:start position:0%
a constructor or in this case well it
 

00:02:17.940 --> 00:02:19.910 align:start position:0%
a constructor or in this case well it
will<00:02:18.030><c> be</c><00:02:18.120><c> empty</c><00:02:18.300><c> if</c><00:02:18.780><c> I</c><00:02:18.990><c> then</c><00:02:19.260><c> try</c><00:02:19.620><c> and</c><00:02:19.680><c> do</c>

00:02:19.910 --> 00:02:19.920 align:start position:0%
will be empty if I then try and do
 

00:02:19.920 --> 00:02:23.090 align:start position:0%
will be empty if I then try and do
something<00:02:20.340><c> like</c><00:02:20.490><c> a</c><00:02:20.670><c> sine</c><00:02:20.970><c> B</c><00:02:21.660><c> with</c><00:02:21.960><c> with</c><00:02:22.290><c> a</c><00:02:22.500><c> this</c>

00:02:23.090 --> 00:02:23.100 align:start position:0%
something like a sine B with with a this
 

00:02:23.100 --> 00:02:24.050 align:start position:0%
something like a sine B with with a this
is<00:02:23.160><c> going</c><00:02:23.460><c> to</c><00:02:23.550><c> be</c><00:02:23.670><c> something</c><00:02:23.940><c> completely</c>

00:02:24.050 --> 00:02:24.060 align:start position:0%
is going to be something completely
 

00:02:24.060 --> 00:02:25.850 align:start position:0%
is going to be something completely
different<00:02:24.720><c> because</c><00:02:24.930><c> the</c><00:02:25.200><c> vector</c><00:02:25.350><c> two</c><00:02:25.650><c> right</c>

00:02:25.850 --> 00:02:25.860 align:start position:0%
different because the vector two right
 

00:02:25.860 --> 00:02:27.890 align:start position:0%
different because the vector two right
now<00:02:26.040><c> is</c><00:02:26.250><c> a</c><00:02:26.280><c> pointer</c><00:02:27.000><c> which</c><00:02:27.450><c> means</c><00:02:27.660><c> that</c><00:02:27.780><c> by</c>

00:02:27.890 --> 00:02:27.900 align:start position:0%
now is a pointer which means that by
 

00:02:27.900 --> 00:02:30.470 align:start position:0%
now is a pointer which means that by
writing<00:02:28.230><c> back</c><00:02:28.410><c> to</c><00:02:28.440><c> point</c><00:02:28.740><c> a</c><00:02:28.920><c> B</c><00:02:29.070><c> equals</c><00:02:29.550><c> a</c><00:02:29.700><c> what</c>

00:02:30.470 --> 00:02:30.480 align:start position:0%
writing back to point a B equals a what
 

00:02:30.480 --> 00:02:32.750 align:start position:0%
writing back to point a B equals a what
I'm<00:02:30.600><c> still</c><00:02:31.290><c> copying</c><00:02:31.740><c> something</c><00:02:32.190><c> but</c><00:02:32.550><c> I'm</c><00:02:32.640><c> not</c>

00:02:32.750 --> 00:02:32.760 align:start position:0%
I'm still copying something but I'm not
 

00:02:32.760 --> 00:02:34.340 align:start position:0%
I'm still copying something but I'm not
copying<00:02:33.000><c> the</c><00:02:33.240><c> actual</c><00:02:33.630><c> vector</c><00:02:34.020><c> which</c><00:02:34.170><c> can</c>

00:02:34.340 --> 00:02:34.350 align:start position:0%
copying the actual vector which can
 

00:02:34.350 --> 00:02:35.810 align:start position:0%
copying the actual vector which can
track<00:02:34.590><c> it</c><00:02:34.740><c> which</c><00:02:34.830><c> contains</c><00:02:35.220><c> the</c><00:02:35.370><c> x</c><00:02:35.520><c> and</c><00:02:35.700><c> y</c>

00:02:35.810 --> 00:02:35.820 align:start position:0%
track it which contains the x and y
 

00:02:35.820 --> 00:02:37.520 align:start position:0%
track it which contains the x and y
variables<00:02:35.880><c> I'm</c><00:02:36.540><c> actually</c><00:02:36.930><c> copying</c><00:02:37.410><c> the</c>

00:02:37.520 --> 00:02:37.530 align:start position:0%
variables I'm actually copying the
 

00:02:37.530 --> 00:02:40.430 align:start position:0%
variables I'm actually copying the
pointer<00:02:37.920><c> so</c><00:02:38.400><c> now</c><00:02:38.520><c> I</c><00:02:38.550><c> have</c><00:02:38.850><c> two</c><00:02:39.300><c> pointers</c><00:02:39.720><c> which</c>

00:02:40.430 --> 00:02:40.440 align:start position:0%
pointer so now I have two pointers which
 

00:02:40.440 --> 00:02:42.380 align:start position:0%
pointer so now I have two pointers which
essentially<00:02:41.220><c> have</c><00:02:41.610><c> the</c><00:02:41.730><c> same</c><00:02:41.940><c> value</c><00:02:42.300><c> of</c>

00:02:42.380 --> 00:02:42.390 align:start position:0%
essentially have the same value of
 

00:02:42.390 --> 00:02:43.640 align:start position:0%
essentially have the same value of
course<00:02:42.600><c> because</c><00:02:42.780><c> they're</c><00:02:42.930><c> copies</c><00:02:43.260><c> they</c><00:02:43.410><c> point</c>

00:02:43.640 --> 00:02:43.650 align:start position:0%
course because they're copies they point
 

00:02:43.650 --> 00:02:45.050 align:start position:0%
course because they're copies they point
to<00:02:43.710><c> different</c><00:02:43.830><c> things</c><00:02:44.040><c> find</c><00:02:44.820><c> it</c><00:02:44.910><c> something</c>

00:02:45.050 --> 00:02:45.060 align:start position:0%
to different things find it something
 

00:02:45.060 --> 00:02:46.850 align:start position:0%
to different things find it something
like<00:02:45.240><c> B</c><00:02:45.390><c> plus</c><00:02:45.630><c> plus</c><00:02:45.870><c> or</c><00:02:46.080><c> whatever</c><00:02:46.350><c> to</c><00:02:46.500><c> modify</c>

00:02:46.850 --> 00:02:46.860 align:start position:0%
like B plus plus or whatever to modify
 

00:02:46.860 --> 00:02:48.830 align:start position:0%
like B plus plus or whatever to modify
the<00:02:46.920><c> pointer</c><00:02:47.370><c> my</c><00:02:47.790><c> a</c><00:02:47.820><c> pointer</c><00:02:48.360><c> would</c><00:02:48.510><c> still</c><00:02:48.690><c> be</c>

00:02:48.830 --> 00:02:48.840 align:start position:0%
the pointer my a pointer would still be
 

00:02:48.840 --> 00:02:51.800 align:start position:0%
the pointer my a pointer would still be
intact<00:02:49.140><c> but</c><00:02:49.470><c> if</c><00:02:49.980><c> I</c><00:02:50.130><c> access</c><00:02:50.820><c> the</c><00:02:51.240><c> memory</c><00:02:51.570><c> at</c>

00:02:51.800 --> 00:02:51.810 align:start position:0%
intact but if I access the memory at
 

00:02:51.810 --> 00:02:53.780 align:start position:0%
intact but if I access the memory at
that<00:02:52.140><c> address</c><00:02:52.500><c> and</c><00:02:52.740><c> set</c><00:02:52.920><c> it</c><00:02:53.040><c> to</c><00:02:53.130><c> something</c><00:02:53.340><c> in</c>

00:02:53.780 --> 00:02:53.790 align:start position:0%
that address and set it to something in
 

00:02:53.790 --> 00:02:55.550 align:start position:0%
that address and set it to something in
this<00:02:54.090><c> case</c><00:02:54.360><c> is</c><00:02:54.600><c> kind</c><00:02:54.780><c> of</c><00:02:54.900><c> going</c><00:02:55.110><c> to</c><00:02:55.200><c> affect</c>

00:02:55.550 --> 00:02:55.560 align:start position:0%
this case is kind of going to affect
 

00:02:55.560 --> 00:02:57.740 align:start position:0%
this case is kind of going to affect
both<00:02:55.620><c> a</c><00:02:55.950><c> and</c><00:02:55.980><c> B</c><00:02:56.250><c> because</c><00:02:56.580><c> at</c><00:02:56.730><c> the</c><00:02:56.820><c> moment</c><00:02:56.850><c> a</c><00:02:57.330><c> and</c>

00:02:57.740 --> 00:02:57.750 align:start position:0%
both a and B because at the moment a and
 

00:02:57.750 --> 00:02:59.630 align:start position:0%
both a and B because at the moment a and
B<00:02:57.930><c> are</c><00:02:58.050><c> both</c><00:02:58.200><c> pointing</c><00:02:58.530><c> to</c><00:02:59.010><c> the</c><00:02:59.100><c> same</c><00:02:59.280><c> memory</c>

00:02:59.630 --> 00:02:59.640 align:start position:0%
B are both pointing to the same memory
 

00:02:59.640 --> 00:03:01.130 align:start position:0%
B are both pointing to the same memory
address<00:02:59.940><c> and</c><00:03:00.090><c> what</c><00:03:00.510><c> I'm</c><00:03:00.600><c> doing</c><00:03:00.810><c> here</c><00:03:00.990><c> is</c><00:03:01.050><c> I'm</c>

00:03:01.130 --> 00:03:01.140 align:start position:0%
address and what I'm doing here is I'm
 

00:03:01.140 --> 00:03:03.080 align:start position:0%
address and what I'm doing here is I'm
not<00:03:01.350><c> affecting</c><00:03:01.770><c> the</c><00:03:01.800><c> pointer</c><00:03:02.250><c> I'm</c><00:03:02.520><c> affecting</c>

00:03:03.080 --> 00:03:03.090 align:start position:0%
not affecting the pointer I'm affecting
 

00:03:03.090 --> 00:03:04.370 align:start position:0%
not affecting the pointer I'm affecting
the<00:03:03.150><c> memory</c><00:03:03.450><c> address</c><00:03:03.720><c> so</c><00:03:04.050><c> that's</c><00:03:04.230><c> just</c>

00:03:04.370 --> 00:03:04.380 align:start position:0%
the memory address so that's just
 

00:03:04.380 --> 00:03:05.600 align:start position:0%
the memory address so that's just
something<00:03:04.590><c> important</c><00:03:05.070><c> to</c><00:03:05.130><c> note</c><00:03:05.280><c> when</c><00:03:05.520><c> you</c>

00:03:05.600 --> 00:03:05.610 align:start position:0%
something important to note when you
 

00:03:05.610 --> 00:03:08.120 align:start position:0%
something important to note when you
actually<00:03:05.820><c> do</c><00:03:06.360><c> write</c><00:03:07.080><c> any</c><00:03:07.560><c> equals</c><00:03:07.890><c> when</c><00:03:08.040><c> you</c>

00:03:08.120 --> 00:03:08.130 align:start position:0%
actually do write any equals when you
 

00:03:08.130 --> 00:03:09.230 align:start position:0%
actually do write any equals when you
write<00:03:08.310><c> when</c><00:03:08.430><c> you</c><00:03:08.490><c> use</c><00:03:08.670><c> the</c><00:03:08.820><c> assignment</c>

00:03:09.230 --> 00:03:09.240 align:start position:0%
write when you use the assignment
 

00:03:09.240 --> 00:03:11.270 align:start position:0%
write when you use the assignment
operator<00:03:09.330><c> and</c><00:03:09.750><c> you</c><00:03:09.810><c> set</c><00:03:10.110><c> a</c><00:03:10.320><c> variable</c><00:03:10.680><c> equal</c><00:03:11.130><c> to</c>

00:03:11.270 --> 00:03:11.280 align:start position:0%
operator and you set a variable equal to
 

00:03:11.280 --> 00:03:14.330 align:start position:0%
operator and you set a variable equal to
another<00:03:11.430><c> variable</c><00:03:11.880><c> you</c><00:03:12.360><c> are</c><00:03:12.390><c> always</c><00:03:13.340><c> well</c>

00:03:14.330 --> 00:03:14.340 align:start position:0%
another variable you are always well
 

00:03:14.340 --> 00:03:16.550 align:start position:0%
another variable you are always well
always<00:03:14.670><c> asterisk</c><00:03:15.300><c> you're</c><00:03:15.510><c> always</c><00:03:16.020><c> copying</c>

00:03:16.550 --> 00:03:16.560 align:start position:0%
always asterisk you're always copying
 

00:03:16.560 --> 00:03:18.650 align:start position:0%
always asterisk you're always copying
the<00:03:17.100><c> value</c><00:03:17.220><c> the</c><00:03:17.790><c> asterisk</c><00:03:18.180><c> was</c><00:03:18.330><c> there</c><00:03:18.480><c> for</c>

00:03:18.650 --> 00:03:18.660 align:start position:0%
the value the asterisk was there for
 

00:03:18.660 --> 00:03:20.360 align:start position:0%
the value the asterisk was there for
references<00:03:19.110><c> because</c><00:03:19.410><c> with</c><00:03:19.650><c> references</c><00:03:20.250><c> if</c>

00:03:20.360 --> 00:03:20.370 align:start position:0%
references because with references if
 

00:03:20.370 --> 00:03:21.790 align:start position:0%
references because with references if
you<00:03:20.490><c> assign</c><00:03:20.730><c> a</c><00:03:20.790><c> reference</c><00:03:21.210><c> to</c><00:03:21.270><c> something</c><00:03:21.480><c> else</c>

00:03:21.790 --> 00:03:21.800 align:start position:0%
you assign a reference to something else
 

00:03:21.800 --> 00:03:24.350 align:start position:0%
you assign a reference to something else
you<00:03:22.800><c> can't</c><00:03:23.010><c> reassign</c><00:03:23.340><c> references</c><00:03:24.120><c> when</c><00:03:24.270><c> you</c>

00:03:24.350 --> 00:03:24.360 align:start position:0%
you can't reassign references when you
 

00:03:24.360 --> 00:03:26.360 align:start position:0%
you can't reassign references when you
copy<00:03:24.810><c> I</c><00:03:25.020><c> guess</c><00:03:25.320><c> a</c><00:03:25.350><c> reference</c><00:03:25.890><c> or</c><00:03:26.010><c> you</c><00:03:26.070><c> assign</c>

00:03:26.360 --> 00:03:26.370 align:start position:0%
copy I guess a reference or you assign
 

00:03:26.370 --> 00:03:27.770 align:start position:0%
copy I guess a reference or you assign
one<00:03:26.610><c> reference</c><00:03:26.970><c> to</c><00:03:27.150><c> another</c><00:03:27.420><c> reference</c>

00:03:27.770 --> 00:03:27.780 align:start position:0%
one reference to another reference
 

00:03:27.780 --> 00:03:29.530 align:start position:0%
one reference to another reference
you're<00:03:28.260><c> actually</c><00:03:28.530><c> changing</c><00:03:28.920><c> the</c><00:03:29.010><c> underlying</c>

00:03:29.530 --> 00:03:29.540 align:start position:0%
you're actually changing the underlying
 

00:03:29.540 --> 00:03:31.490 align:start position:0%
you're actually changing the underlying
thing<00:03:30.540><c> that's</c><00:03:30.780><c> pointing</c><00:03:31.230><c> to</c><00:03:31.350><c> because</c>

00:03:31.490 --> 00:03:31.500 align:start position:0%
thing that's pointing to because
 

00:03:31.500 --> 00:03:33.440 align:start position:0%
thing that's pointing to because
references<00:03:32.130><c> are</c><00:03:32.250><c> just</c><00:03:32.400><c> aliases</c><00:03:32.940><c> so</c><00:03:33.090><c> kind</c><00:03:33.330><c> of</c>

00:03:33.440 --> 00:03:33.450 align:start position:0%
references are just aliases so kind of
 

00:03:33.450 --> 00:03:35.570 align:start position:0%
references are just aliases so kind of
with<00:03:34.410><c> the</c><00:03:34.530><c> exception</c><00:03:34.890><c> of</c><00:03:34.950><c> references</c>

00:03:35.570 --> 00:03:35.580 align:start position:0%
with the exception of references
 

00:03:35.580 --> 00:03:37.940 align:start position:0%
with the exception of references
whenever<00:03:36.030><c> you</c><00:03:36.210><c> write</c><00:03:36.450><c> code</c><00:03:36.900><c> where</c><00:03:37.740><c> one</c>

00:03:37.940 --> 00:03:37.950 align:start position:0%
whenever you write code where one
 

00:03:37.950 --> 00:03:39.740 align:start position:0%
whenever you write code where one
variable<00:03:38.340><c> is</c><00:03:38.520><c> assigned</c><00:03:38.640><c> another</c><00:03:39.270><c> variable</c>

00:03:39.740 --> 00:03:39.750 align:start position:0%
variable is assigned another variable
 

00:03:39.750 --> 00:03:41.510 align:start position:0%
variable is assigned another variable
you<00:03:39.840><c> are</c><00:03:39.870><c> always</c><00:03:40.200><c> copying</c><00:03:40.950><c> it</c><00:03:41.040><c> it's</c><00:03:41.250><c> just</c><00:03:41.400><c> with</c>

00:03:41.510 --> 00:03:41.520 align:start position:0%
you are always copying it it's just with
 

00:03:41.520 --> 00:03:43.310 align:start position:0%
you are always copying it it's just with
the<00:03:41.610><c> case</c><00:03:41.760><c> of</c><00:03:41.940><c> pointers</c><00:03:42.360><c> you're</c><00:03:42.870><c> copying</c><00:03:43.080><c> the</c>

00:03:43.310 --> 00:03:43.320 align:start position:0%
the case of pointers you're copying the
 

00:03:43.320 --> 00:03:45.320 align:start position:0%
the case of pointers you're copying the
pointer<00:03:43.770><c> that</c><00:03:44.040><c> that</c><00:03:44.400><c> memory</c><00:03:44.700><c> address</c><00:03:44.940><c> then</c>

00:03:45.320 --> 00:03:45.330 align:start position:0%
pointer that that memory address then
 

00:03:45.330 --> 00:03:46.910 align:start position:0%
pointer that that memory address then
muted<00:03:45.600><c> the</c><00:03:45.690><c> numeric</c><00:03:46.200><c> memory</c><00:03:46.560><c> address</c><00:03:46.770><c> the</c>

00:03:46.910 --> 00:03:46.920 align:start position:0%
muted the numeric memory address the
 

00:03:46.920 --> 00:03:49.220 align:start position:0%
muted the numeric memory address the
number<00:03:47.310><c> rather</c><00:03:47.820><c> than</c><00:03:48.030><c> the</c><00:03:48.120><c> actual</c><00:03:48.480><c> memory</c><00:03:48.900><c> at</c>

00:03:49.220 --> 00:03:49.230 align:start position:0%
number rather than the actual memory at
 

00:03:49.230 --> 00:03:51.110 align:start position:0%
number rather than the actual memory at
the<00:03:49.530><c> pointer</c><00:03:49.920><c> if</c><00:03:50.100><c> that</c><00:03:50.310><c> makes</c><00:03:50.490><c> sense</c><00:03:50.700><c> so</c><00:03:50.970><c> with</c>

00:03:51.110 --> 00:03:51.120 align:start position:0%
the pointer if that makes sense so with
 

00:03:51.120 --> 00:03:53.060 align:start position:0%
the pointer if that makes sense so with
that<00:03:51.240><c> in</c><00:03:51.420><c> mind</c><00:03:51.450><c> let's</c><00:03:52.110><c> write</c><00:03:52.350><c> a</c><00:03:52.380><c> string</c><00:03:52.830><c> class</c>

00:03:53.060 --> 00:03:53.070 align:start position:0%
that in mind let's write a string class
 

00:03:53.070 --> 00:03:55.310 align:start position:0%
that in mind let's write a string class
and<00:03:53.430><c> see</c><00:03:54.060><c> about</c><00:03:54.180><c> how</c><00:03:54.570><c> we</c><00:03:54.630><c> can</c><00:03:54.960><c> make</c><00:03:55.140><c> that</c>

00:03:55.310 --> 00:03:55.320 align:start position:0%
and see about how we can make that
 

00:03:55.320 --> 00:03:57.290 align:start position:0%
and see about how we can make that
copyable<00:03:55.860><c> and</c><00:03:56.220><c> what</c><00:03:56.550><c> challenges</c><00:03:56.790><c> we</c><00:03:57.150><c> might</c>

00:03:57.290 --> 00:03:57.300 align:start position:0%
copyable and what challenges we might
 

00:03:57.300 --> 00:03:58.880 align:start position:0%
copyable and what challenges we might
face<00:03:57.510><c> with</c><00:03:57.720><c> that</c><00:03:57.870><c> so</c><00:03:58.410><c> I'm</c><00:03:58.470><c> going</c><00:03:58.650><c> to</c><00:03:58.710><c> write</c><00:03:58.860><c> a</c>

00:03:58.880 --> 00:03:58.890 align:start position:0%
face with that so I'm going to write a
 

00:03:58.890 --> 00:04:00.650 align:start position:0%
face with that so I'm going to write a
class<00:03:59.130><c> called</c><00:03:59.460><c> string</c><00:03:59.850><c> now</c><00:04:00.240><c> I'm</c><00:04:00.390><c> going</c><00:04:00.570><c> to</c>

00:04:00.650 --> 00:04:00.660 align:start position:0%
class called string now I'm going to
 

00:04:00.660 --> 00:04:02.000 align:start position:0%
class called string now I'm going to
write<00:04:00.810><c> this</c><00:04:00.900><c> string</c><00:04:01.200><c> class</c><00:04:01.380><c> in</c><00:04:01.590><c> a</c><00:04:01.650><c> very</c><00:04:01.800><c> kind</c>

00:04:02.000 --> 00:04:02.010 align:start position:0%
write this string class in a very kind
 

00:04:02.010 --> 00:04:03.830 align:start position:0%
write this string class in a very kind
of<00:04:02.190><c> well</c><00:04:02.790><c> I</c><00:04:02.820><c> guess</c><00:04:03.150><c> also</c><00:04:03.330><c> called</c><00:04:03.630><c> primitive</c>

00:04:03.830 --> 00:04:03.840 align:start position:0%
of well I guess also called primitive
 

00:04:03.840 --> 00:04:05.600 align:start position:0%
of well I guess also called primitive
C++<00:04:04.470><c> way</c><00:04:04.590><c> I'm</c><00:04:04.650><c> not</c><00:04:04.740><c> going</c><00:04:04.860><c> to</c><00:04:04.950><c> be</c><00:04:05.010><c> using</c><00:04:05.340><c> like</c>

00:04:05.600 --> 00:04:05.610 align:start position:0%
C++ way I'm not going to be using like
 

00:04:05.610 --> 00:04:07.370 align:start position:0%
C++ way I'm not going to be using like
STD<00:04:06.090><c> vector</c><00:04:06.480><c> or</c><00:04:06.600><c> anything</c><00:04:06.780><c> like</c><00:04:06.960><c> that</c><00:04:07.020><c> or</c>

00:04:07.370 --> 00:04:07.380 align:start position:0%
STD vector or anything like that or
 

00:04:07.380 --> 00:04:09.230 align:start position:0%
STD vector or anything like that or
smart<00:04:07.830><c> pointers</c><00:04:08.250><c> I'm</c><00:04:08.370><c> just</c><00:04:08.550><c> going</c><00:04:08.700><c> to</c><00:04:08.820><c> write</c><00:04:09.000><c> a</c>

00:04:09.230 --> 00:04:09.240 align:start position:0%
smart pointers I'm just going to write a
 

00:04:09.240 --> 00:04:11.300 align:start position:0%
smart pointers I'm just going to write a
base<00:04:09.660><c> kind</c><00:04:09.990><c> of</c><00:04:10.110><c> string</c><00:04:10.440><c> class</c><00:04:10.650><c> implementation</c>

00:04:11.300 --> 00:04:11.310 align:start position:0%
base kind of string class implementation
 

00:04:11.310 --> 00:04:13.790 align:start position:0%
base kind of string class implementation
that<00:04:11.940><c> is</c><00:04:12.090><c> using</c><00:04:12.450><c> just</c><00:04:12.690><c> the</c><00:04:12.900><c> raw</c><00:04:13.080><c> metal</c><00:04:13.500><c> kind</c><00:04:13.680><c> of</c>

00:04:13.790 --> 00:04:13.800 align:start position:0%
that is using just the raw metal kind of
 

00:04:13.800 --> 00:04:15.440 align:start position:0%
that is using just the raw metal kind of
C++<00:04:13.980><c> features</c><00:04:14.640><c> and</c><00:04:14.790><c> that's</c><00:04:14.910><c> necessary</c>

00:04:15.440 --> 00:04:15.450 align:start position:0%
C++ features and that's necessary
 

00:04:15.450 --> 00:04:18.530 align:start position:0%
C++ features and that's necessary
because<00:04:15.690><c> if</c><00:04:16.410><c> I</c><00:04:16.650><c> start</c><00:04:16.950><c> using</c><00:04:17.040><c> modern</c><00:04:17.609><c> modern</c>

00:04:18.530 --> 00:04:18.540 align:start position:0%
because if I start using modern modern
 

00:04:18.540 --> 00:04:20.510 align:start position:0%
because if I start using modern modern
kind<00:04:18.780><c> of</c><00:04:18.870><c> C++</c><00:04:19.080><c> features</c><00:04:19.739><c> to</c><00:04:19.920><c> write</c><00:04:20.100><c> this</c><00:04:20.280><c> bus</c>

00:04:20.510 --> 00:04:20.520 align:start position:0%
kind of C++ features to write this bus
 

00:04:20.520 --> 00:04:22.010 align:start position:0%
kind of C++ features to write this bus
then<00:04:20.760><c> it</c><00:04:20.850><c> is</c><00:04:20.940><c> actually</c><00:04:21.239><c> going</c><00:04:21.359><c> to</c><00:04:21.450><c> automate</c><00:04:21.810><c> a</c>

00:04:22.010 --> 00:04:22.020 align:start position:0%
then it is actually going to automate a
 

00:04:22.020 --> 00:04:24.230 align:start position:0%
then it is actually going to automate a
lot<00:04:22.200><c> of</c><00:04:22.410><c> this</c><00:04:22.560><c> stuff</c><00:04:22.770><c> for</c><00:04:22.979><c> me</c><00:04:23.040><c> and</c><00:04:23.370><c> in</c><00:04:23.850><c> this</c>

00:04:24.230 --> 00:04:24.240 align:start position:0%
lot of this stuff for me and in this
 

00:04:24.240 --> 00:04:24.990 align:start position:0%
lot of this stuff for me and in this
case<00:04:24.479><c> it's</c><00:04:24.690><c> not</c><00:04:24.810><c> going</c>

00:04:24.990 --> 00:04:25.000 align:start position:0%
case it's not going
 

00:04:25.000 --> 00:04:26.520 align:start position:0%
case it's not going
demonstrate<00:04:25.420><c> my</c><00:04:25.540><c> point</c><00:04:25.720><c> about</c><00:04:25.870><c> copying</c><00:04:26.350><c> very</c>

00:04:26.520 --> 00:04:26.530 align:start position:0%
demonstrate my point about copying very
 

00:04:26.530 --> 00:04:27.870 align:start position:0%
demonstrate my point about copying very
well<00:04:26.740><c> so</c><00:04:27.010><c> just</c><00:04:27.160><c> keep</c><00:04:27.310><c> that</c><00:04:27.340><c> in</c><00:04:27.610><c> mind</c><00:04:27.790><c> this</c>

00:04:27.870 --> 00:04:27.880 align:start position:0%
well so just keep that in mind this
 

00:04:27.880 --> 00:04:29.280 align:start position:0%
well so just keep that in mind this
isn't<00:04:28.180><c> how</c><00:04:28.270><c> I</c><00:04:28.300><c> would</c><00:04:28.540><c> necessarily</c><00:04:28.690><c> write</c><00:04:29.260><c> a</c>

00:04:29.280 --> 00:04:29.290 align:start position:0%
isn't how I would necessarily write a
 

00:04:29.290 --> 00:04:31.710 align:start position:0%
isn't how I would necessarily write a
string<00:04:29.620><c> class</c><00:04:29.860><c> nowadays</c><00:04:30.430><c> but</c><00:04:31.030><c> it</c><00:04:31.150><c> is</c><00:04:31.270><c> a</c><00:04:31.450><c> way</c><00:04:31.660><c> to</c>

00:04:31.710 --> 00:04:31.720 align:start position:0%
string class nowadays but it is a way to
 

00:04:31.720 --> 00:04:33.450 align:start position:0%
string class nowadays but it is a way to
do<00:04:31.900><c> it</c><00:04:32.050><c> and</c><00:04:32.200><c> it's</c><00:04:32.410><c> going</c><00:04:32.620><c> to</c><00:04:32.740><c> be</c><00:04:32.950><c> a</c><00:04:32.980><c> kind</c><00:04:33.370><c> of</c>

00:04:33.450 --> 00:04:33.460 align:start position:0%
do it and it's going to be a kind of
 

00:04:33.460 --> 00:04:35.640 align:start position:0%
do it and it's going to be a kind of
nice<00:04:33.880><c> bare</c><00:04:34.270><c> metal</c><00:04:34.480><c> Wayne</c><00:04:34.780><c> is</c><00:04:34.960><c> certainly</c><00:04:35.440><c> not</c>

00:04:35.640 --> 00:04:35.650 align:start position:0%
nice bare metal Wayne is certainly not
 

00:04:35.650 --> 00:04:37.320 align:start position:0%
nice bare metal Wayne is certainly not
going<00:04:35.800><c> to</c><00:04:35.860><c> be</c><00:04:36.010><c> slow</c><00:04:36.610><c> and</c><00:04:36.940><c> if</c><00:04:37.030><c> I</c><00:04:37.060><c> don't</c><00:04:37.150><c> probably</c>

00:04:37.320 --> 00:04:37.330 align:start position:0%
going to be slow and if I don't probably
 

00:04:37.330 --> 00:04:39.660 align:start position:0%
going to be slow and if I don't probably
be<00:04:37.510><c> faster</c><00:04:38.080><c> than</c><00:04:38.650><c> if</c><00:04:38.860><c> I</c><00:04:38.980><c> was</c><00:04:39.130><c> to</c><00:04:39.280><c> use</c><00:04:39.430><c> modern</c>

00:04:39.660 --> 00:04:39.670 align:start position:0%
be faster than if I was to use modern
 

00:04:39.670 --> 00:04:41.580 align:start position:0%
be faster than if I was to use modern
see<00:04:39.880><c> what</c><00:04:40.030><c> boss</c><00:04:40.150><c> pages</c><00:04:40.540><c> so</c><00:04:40.840><c> a</c><00:04:40.870><c> string</c><00:04:41.170><c> is</c><00:04:41.410><c> made</c>

00:04:41.580 --> 00:04:41.590 align:start position:0%
see what boss pages so a string is made
 

00:04:41.590 --> 00:04:43.260 align:start position:0%
see what boss pages so a string is made
up<00:04:41.740><c> of</c><00:04:41.950><c> an</c><00:04:42.220><c> array</c><00:04:42.430><c> of</c><00:04:42.460><c> characters</c><00:04:42.760><c> so</c><00:04:43.060><c> the</c>

00:04:43.260 --> 00:04:43.270 align:start position:0%
up of an array of characters so the
 

00:04:43.270 --> 00:04:44.850 align:start position:0%
up of an array of characters so the
first<00:04:43.480><c> thing</c><00:04:43.690><c> that</c><00:04:43.870><c> I'm</c><00:04:43.990><c> going</c><00:04:44.200><c> to</c><00:04:44.320><c> do</c><00:04:44.440><c> is</c>

00:04:44.850 --> 00:04:44.860 align:start position:0%
first thing that I'm going to do is
 

00:04:44.860 --> 00:04:47.070 align:start position:0%
first thing that I'm going to do is
place<00:04:45.520><c> down</c><00:04:45.790><c> an</c><00:04:46.060><c> array</c><00:04:46.360><c> of</c><00:04:46.390><c> characters</c><00:04:46.630><c> I'm</c>

00:04:47.070 --> 00:04:47.080 align:start position:0%
place down an array of characters I'm
 

00:04:47.080 --> 00:04:48.420 align:start position:0%
place down an array of characters I'm
going<00:04:47.260><c> to</c><00:04:47.320><c> write</c><00:04:47.470><c> a</c><00:04:47.500><c> char</c><00:04:47.740><c> pointer</c><00:04:48.130><c> that's</c>

00:04:48.420 --> 00:04:48.430 align:start position:0%
going to write a char pointer that's
 

00:04:48.430 --> 00:04:50.100 align:start position:0%
going to write a char pointer that's
called<00:04:48.700><c> M</c><00:04:48.940><c> buffer</c><00:04:49.330><c> and</c><00:04:49.510><c> this</c><00:04:49.660><c> was</c><00:04:49.810><c> going</c><00:04:49.990><c> to</c>

00:04:50.100 --> 00:04:50.110 align:start position:0%
called M buffer and this was going to
 

00:04:50.110 --> 00:04:53.070 align:start position:0%
called M buffer and this was going to
point<00:04:50.470><c> to</c><00:04:51.070><c> my</c><00:04:51.250><c> buffer</c><00:04:51.640><c> of</c><00:04:51.820><c> chars</c><00:04:52.480><c> I'm</c><00:04:52.930><c> also</c>

00:04:53.070 --> 00:04:53.080 align:start position:0%
point to my buffer of chars I'm also
 

00:04:53.080 --> 00:04:54.420 align:start position:0%
point to my buffer of chars I'm also
going<00:04:53.290><c> to</c><00:04:53.380><c> keep</c><00:04:53.560><c> track</c><00:04:53.740><c> of</c><00:04:53.920><c> how</c><00:04:54.040><c> big</c><00:04:54.280><c> the</c>

00:04:54.420 --> 00:04:54.430 align:start position:0%
going to keep track of how big the
 

00:04:54.430 --> 00:04:56.610 align:start position:0%
going to keep track of how big the
string<00:04:54.670><c> is</c><00:04:54.820><c> by</c><00:04:55.420><c> writing</c><00:04:55.690><c> a</c><00:04:55.960><c> variable</c><00:04:56.410><c> called</c>

00:04:56.610 --> 00:04:56.620 align:start position:0%
string is by writing a variable called
 

00:04:56.620 --> 00:04:59.070 align:start position:0%
string is by writing a variable called
size<00:04:56.860><c> here</c><00:04:57.220><c> okay</c><00:04:57.820><c> that</c><00:04:58.000><c> should</c><00:04:58.240><c> be</c><00:04:58.360><c> enough</c><00:04:58.570><c> so</c>

00:04:59.070 --> 00:04:59.080 align:start position:0%
size here okay that should be enough so
 

00:04:59.080 --> 00:05:00.720 align:start position:0%
size here okay that should be enough so
the<00:04:59.230><c> constructor</c><00:04:59.650><c> for</c><00:04:59.770><c> string</c><00:05:00.160><c> is</c><00:05:00.460><c> going</c><00:05:00.640><c> to</c>

00:05:00.720 --> 00:05:00.730 align:start position:0%
the constructor for string is going to
 

00:05:00.730 --> 00:05:02.850 align:start position:0%
the constructor for string is going to
take<00:05:01.000><c> in</c><00:05:01.180><c> a</c><00:05:01.240><c> constant</c><00:05:01.840><c> char</c><00:05:02.080><c> which</c><00:05:02.560><c> we'll</c><00:05:02.740><c> call</c>

00:05:02.850 --> 00:05:02.860 align:start position:0%
take in a constant char which we'll call
 

00:05:02.860 --> 00:05:04.680 align:start position:0%
take in a constant char which we'll call
string<00:05:03.190><c> constant</c><00:05:03.910><c> a</c><00:05:03.970><c> pointer</c><00:05:04.270><c> called</c><00:05:04.300><c> string</c>

00:05:04.680 --> 00:05:04.690 align:start position:0%
string constant a pointer called string
 

00:05:04.690 --> 00:05:05.700 align:start position:0%
string constant a pointer called string
first<00:05:05.050><c> thing</c><00:05:05.169><c> we're</c><00:05:05.290><c> going</c><00:05:05.410><c> to</c><00:05:05.470><c> do</c><00:05:05.590><c> is</c>

00:05:05.700 --> 00:05:05.710 align:start position:0%
first thing we're going to do is
 

00:05:05.710 --> 00:05:07.440 align:start position:0%
first thing we're going to do is
calculate<00:05:05.919><c> how</c><00:05:06.310><c> long</c><00:05:06.580><c> the</c><00:05:06.790><c> string</c><00:05:07.060><c> is</c><00:05:07.180><c> so</c><00:05:07.330><c> that</c>

00:05:07.440 --> 00:05:07.450 align:start position:0%
calculate how long the string is so that
 

00:05:07.450 --> 00:05:08.970 align:start position:0%
calculate how long the string is so that
we<00:05:07.540><c> can</c><00:05:07.690><c> copy</c><00:05:07.900><c> the</c><00:05:08.110><c> data</c><00:05:08.320><c> from</c><00:05:08.590><c> the</c><00:05:08.680><c> string</c>

00:05:08.970 --> 00:05:08.980 align:start position:0%
we can copy the data from the string
 

00:05:08.980 --> 00:05:10.980 align:start position:0%
we can copy the data from the string
into<00:05:09.550><c> our</c><00:05:09.669><c> buffer</c><00:05:10.090><c> so</c><00:05:10.390><c> I'm</c><00:05:10.450><c> just</c><00:05:10.570><c> going</c><00:05:10.750><c> to</c><00:05:10.810><c> use</c>

00:05:10.980 --> 00:05:10.990 align:start position:0%
into our buffer so I'm just going to use
 

00:05:10.990 --> 00:05:12.870 align:start position:0%
into our buffer so I'm just going to use
a<00:05:11.020><c> see</c><00:05:11.290><c> function</c><00:05:11.500><c> called</c><00:05:11.919><c> sterlin</c><00:05:12.460><c> or</c><00:05:12.610><c> string</c>

00:05:12.870 --> 00:05:12.880 align:start position:0%
a see function called sterlin or string
 

00:05:12.880 --> 00:05:15.180 align:start position:0%
a see function called sterlin or string
length<00:05:13.090><c> to</c><00:05:13.660><c> actually</c><00:05:13.990><c> get</c><00:05:14.200><c> the</c><00:05:14.320><c> size</c><00:05:14.530><c> of</c><00:05:14.860><c> this</c>

00:05:15.180 --> 00:05:15.190 align:start position:0%
length to actually get the size of this
 

00:05:15.190 --> 00:05:16.860 align:start position:0%
length to actually get the size of this
string<00:05:15.520><c> now</c><00:05:15.880><c> that</c><00:05:16.030><c> I've</c><00:05:16.150><c> got</c><00:05:16.300><c> the</c><00:05:16.390><c> size</c><00:05:16.600><c> I</c><00:05:16.810><c> know</c>

00:05:16.860 --> 00:05:16.870 align:start position:0%
string now that I've got the size I know
 

00:05:16.870 --> 00:05:18.540 align:start position:0%
string now that I've got the size I know
how<00:05:17.080><c> big</c><00:05:17.290><c> I</c><00:05:17.380><c> want</c><00:05:17.560><c> my</c><00:05:17.650><c> buffer</c><00:05:18.010><c> it's</c><00:05:18.160><c> going</c><00:05:18.430><c> to</c>

00:05:18.540 --> 00:05:18.550 align:start position:0%
how big I want my buffer it's going to
 

00:05:18.550 --> 00:05:21.120 align:start position:0%
how big I want my buffer it's going to
be<00:05:18.700><c> these</c><00:05:18.970><c> size</c><00:05:19.360><c> of</c><00:05:19.570><c> the</c><00:05:19.690><c> string</c><00:05:19.990><c> so</c><00:05:20.290><c> new</c><00:05:20.860><c> char</c>

00:05:21.120 --> 00:05:21.130 align:start position:0%
be these size of the string so new char
 

00:05:21.130 --> 00:05:23.250 align:start position:0%
be these size of the string so new char
em<00:05:21.400><c> size</c><00:05:21.669><c> now</c><00:05:22.480><c> we</c><00:05:22.540><c> actually</c><00:05:22.690><c> have</c><00:05:22.870><c> to</c><00:05:23.050><c> allow</c>

00:05:23.250 --> 00:05:23.260 align:start position:0%
em size now we actually have to allow
 

00:05:23.260 --> 00:05:24.960 align:start position:0%
em size now we actually have to allow
for<00:05:23.290><c> the</c><00:05:23.650><c> null</c><00:05:23.919><c> termination</c><00:05:24.400><c> character</c><00:05:24.700><c> as</c>

00:05:24.960 --> 00:05:24.970 align:start position:0%
for the null termination character as
 

00:05:24.970 --> 00:05:26.670 align:start position:0%
for the null termination character as
well<00:05:25.150><c> so</c><00:05:25.300><c> this</c><00:05:25.419><c> should</c><00:05:25.630><c> be</c><00:05:25.660><c> +1</c><00:05:25.960><c> but</c><00:05:26.470><c> I'm</c>

00:05:26.670 --> 00:05:26.680 align:start position:0%
well so this should be +1 but I'm
 

00:05:26.680 --> 00:05:28.110 align:start position:0%
well so this should be +1 but I'm
deliberately<00:05:27.040><c> not</c><00:05:27.310><c> going</c><00:05:27.460><c> to</c><00:05:27.520><c> write</c><00:05:27.669><c> that</c><00:05:27.910><c> so</c>

00:05:28.110 --> 00:05:28.120 align:start position:0%
deliberately not going to write that so
 

00:05:28.120 --> 00:05:29.520 align:start position:0%
deliberately not going to write that so
that<00:05:28.270><c> you</c><00:05:28.330><c> guys</c><00:05:28.480><c> can</c><00:05:28.720><c> see</c><00:05:28.870><c> what</c><00:05:29.020><c> happens</c><00:05:29.320><c> so</c>

00:05:29.520 --> 00:05:29.530 align:start position:0%
that you guys can see what happens so
 

00:05:29.530 --> 00:05:31.170 align:start position:0%
that you guys can see what happens so
the<00:05:29.740><c> next</c><00:05:29.919><c> step</c><00:05:30.130><c> is</c><00:05:30.250><c> going</c><00:05:30.400><c> to</c><00:05:30.490><c> be</c><00:05:30.550><c> copy</c><00:05:30.910><c> the</c>

00:05:31.170 --> 00:05:31.180 align:start position:0%
the next step is going to be copy the
 

00:05:31.180 --> 00:05:32.940 align:start position:0%
the next step is going to be copy the
value<00:05:31.479><c> from</c><00:05:31.570><c> this</c><00:05:31.720><c> pointer</c><00:05:32.110><c> into</c><00:05:32.380><c> our</c><00:05:32.770><c> actual</c>

00:05:32.940 --> 00:05:32.950 align:start position:0%
value from this pointer into our actual
 

00:05:32.950 --> 00:05:34.740 align:start position:0%
value from this pointer into our actual
buffer<00:05:33.400><c> so</c><00:05:33.550><c> that</c><00:05:33.700><c> our</c><00:05:33.790><c> buffer</c><00:05:34.090><c> is</c><00:05:34.210><c> populated</c>

00:05:34.740 --> 00:05:34.750 align:start position:0%
buffer so that our buffer is populated
 

00:05:34.750 --> 00:05:36.990 align:start position:0%
buffer so that our buffer is populated
with<00:05:35.350><c> all</c><00:05:35.530><c> our</c><00:05:35.740><c> characters</c><00:05:36.010><c> I</c><00:05:36.310><c> could</c><00:05:36.550><c> write</c><00:05:36.970><c> a</c>

00:05:36.990 --> 00:05:37.000 align:start position:0%
with all our characters I could write a
 

00:05:37.000 --> 00:05:38.430 align:start position:0%
with all our characters I could write a
for<00:05:37.270><c> loop</c><00:05:37.390><c> here</c><00:05:37.600><c> just</c><00:05:37.840><c> to</c><00:05:37.930><c> keep</c><00:05:38.080><c> it</c><00:05:38.229><c> really</c>

00:05:38.430 --> 00:05:38.440 align:start position:0%
for loop here just to keep it really
 

00:05:38.440 --> 00:05:40.050 align:start position:0%
for loop here just to keep it really
simple<00:05:38.470><c> something</c><00:05:39.190><c> like</c><00:05:39.400><c> this</c><00:05:39.520><c> really</c><00:05:39.790><c> simple</c>

00:05:40.050 --> 00:05:40.060 align:start position:0%
simple something like this really simple
 

00:05:40.060 --> 00:05:41.400 align:start position:0%
simple something like this really simple
to<00:05:40.150><c> go</c><00:05:40.270><c> through</c><00:05:40.540><c> every</c><00:05:40.810><c> character</c><00:05:41.169><c> that</c><00:05:41.290><c> we</c>

00:05:41.400 --> 00:05:41.410 align:start position:0%
to go through every character that we
 

00:05:41.410 --> 00:05:43.080 align:start position:0%
to go through every character that we
have<00:05:41.620><c> in</c><00:05:41.770><c> here</c><00:05:41.979><c> and</c><00:05:42.100><c> copies</c><00:05:42.400><c> at</c><00:05:42.550><c> one</c><00:05:42.729><c> by</c><00:05:42.880><c> one</c>

00:05:43.080 --> 00:05:43.090 align:start position:0%
have in here and copies at one by one
 

00:05:43.090 --> 00:05:45.360 align:start position:0%
have in here and copies at one by one
like<00:05:43.720><c> so</c><00:05:43.990><c> however</c><00:05:44.260><c> a</c><00:05:44.500><c> much</c><00:05:44.770><c> cleaner</c><00:05:45.100><c> way</c><00:05:45.220><c> to</c>

00:05:45.360 --> 00:05:45.370 align:start position:0%
like so however a much cleaner way to
 

00:05:45.370 --> 00:05:46.860 align:start position:0%
like so however a much cleaner way to
write<00:05:45.610><c> this</c><00:05:45.820><c> is</c><00:05:45.970><c> just</c><00:05:46.150><c> to</c><00:05:46.270><c> use</c><00:05:46.419><c> mem</c><00:05:46.660><c> copy</c>

00:05:46.860 --> 00:05:46.870 align:start position:0%
write this is just to use mem copy
 

00:05:46.870 --> 00:05:49.380 align:start position:0%
write this is just to use mem copy
someone<00:05:47.650><c> to</c><00:05:47.710><c> type</c><00:05:47.800><c> in</c><00:05:47.919><c> mem</c><00:05:48.070><c> copy</c><00:05:48.390><c> the</c>

00:05:49.380 --> 00:05:49.390 align:start position:0%
someone to type in mem copy the
 

00:05:49.390 --> 00:05:50.730 align:start position:0%
someone to type in mem copy the
parameters<00:05:49.750><c> for</c><00:05:49.870><c> this</c><00:05:49.930><c> is</c><00:05:50.080><c> the</c><00:05:50.169><c> other</c>

00:05:50.730 --> 00:05:50.740 align:start position:0%
parameters for this is the other
 

00:05:50.740 --> 00:05:52.920 align:start position:0%
parameters for this is the other
destination<00:05:51.430><c> that</c><00:05:51.610><c> goes</c><00:05:51.940><c> first</c><00:05:52.240><c> so</c><00:05:52.600><c> don't</c>

00:05:52.920 --> 00:05:52.930 align:start position:0%
destination that goes first so don't
 

00:05:52.930 --> 00:05:55.020 align:start position:0%
destination that goes first so don't
screw<00:05:53.200><c> that</c><00:05:53.350><c> up</c><00:05:53.410><c> the</c><00:05:53.979><c> destination</c><00:05:54.490><c> the</c><00:05:54.790><c> source</c>

00:05:55.020 --> 00:05:55.030 align:start position:0%
screw that up the destination the source
 

00:05:55.030 --> 00:05:57.420 align:start position:0%
screw that up the destination the source
and<00:05:55.270><c> the</c><00:05:55.450><c> size</c><00:05:55.690><c> so</c><00:05:56.500><c> the</c><00:05:56.590><c> destination</c><00:05:56.740><c> is</c><00:05:57.220><c> going</c>

00:05:57.420 --> 00:05:57.430 align:start position:0%
and the size so the destination is going
 

00:05:57.430 --> 00:05:59.610 align:start position:0%
and the size so the destination is going
to<00:05:57.550><c> be</c><00:05:57.669><c> M</c><00:05:57.850><c> buffer</c><00:05:58.240><c> the</c><00:05:58.780><c> source</c><00:05:59.140><c> is</c><00:05:59.320><c> going</c><00:05:59.350><c> to</c><00:05:59.560><c> be</c>

00:05:59.610 --> 00:05:59.620 align:start position:0%
to be M buffer the source is going to be
 

00:05:59.620 --> 00:06:01.950 align:start position:0%
to be M buffer the source is going to be
string<00:06:00.010><c> and</c><00:06:00.220><c> the</c><00:06:00.340><c> size</c><00:06:00.580><c> is</c><00:06:00.940><c> in</c><00:06:01.210><c> bytes</c><00:06:01.479><c> so</c><00:06:01.840><c> how</c>

00:06:01.950 --> 00:06:01.960 align:start position:0%
string and the size is in bytes so how
 

00:06:01.960 --> 00:06:03.600 align:start position:0%
string and the size is in bytes so how
many<00:06:02.110><c> bytes</c><00:06:02.260><c> do</c><00:06:02.380><c> we</c><00:06:02.470><c> want</c><00:06:02.620><c> to</c><00:06:02.680><c> copy</c><00:06:02.800><c> m</c><00:06:03.130><c> size</c>

00:06:03.600 --> 00:06:03.610 align:start position:0%
many bytes do we want to copy m size
 

00:06:03.610 --> 00:06:05.460 align:start position:0%
many bytes do we want to copy m size
because<00:06:03.940><c> at</c><00:06:04.060><c> the</c><00:06:04.120><c> moment</c><00:06:04.150><c> each</c><00:06:04.780><c> character</c><00:06:05.320><c> is</c>

00:06:05.460 --> 00:06:05.470 align:start position:0%
because at the moment each character is
 

00:06:05.470 --> 00:06:06.960 align:start position:0%
because at the moment each character is
one<00:06:05.710><c> byte</c><00:06:05.890><c> of</c><00:06:05.919><c> memory</c><00:06:06.010><c> now</c><00:06:06.520><c> we</c><00:06:06.580><c> are</c><00:06:06.729><c> missing</c>

00:06:06.960 --> 00:06:06.970 align:start position:0%
one byte of memory now we are missing
 

00:06:06.970 --> 00:06:08.130 align:start position:0%
one byte of memory now we are missing
that<00:06:07.060><c> null</c><00:06:07.240><c> termination</c><00:06:07.570><c> character</c><00:06:07.810><c> keep</c>

00:06:08.130 --> 00:06:08.140 align:start position:0%
that null termination character keep
 

00:06:08.140 --> 00:06:09.420 align:start position:0%
that null termination character keep
that<00:06:08.320><c> in</c><00:06:08.440><c> mind</c><00:06:08.620><c> but</c><00:06:08.770><c> let's</c><00:06:08.979><c> write</c><00:06:09.160><c> something</c>

00:06:09.420 --> 00:06:09.430 align:start position:0%
that in mind but let's write something
 

00:06:09.430 --> 00:06:10.860 align:start position:0%
that in mind but let's write something
that<00:06:09.700><c> can</c><00:06:09.790><c> at</c><00:06:09.880><c> least</c><00:06:09.970><c> print</c><00:06:10.330><c> our</c><00:06:10.479><c> string</c><00:06:10.840><c> and</c>

00:06:10.860 --> 00:06:10.870 align:start position:0%
that can at least print our string and
 

00:06:10.870 --> 00:06:12.990 align:start position:0%
that can at least print our string and
something<00:06:11.650><c> that</c><00:06:11.800><c> will</c><00:06:11.950><c> they</c><00:06:12.520><c> will</c><00:06:12.669><c> be</c><00:06:12.790><c> able</c><00:06:12.880><c> to</c>

00:06:12.990 --> 00:06:13.000 align:start position:0%
something that will they will be able to
 

00:06:13.000 --> 00:06:14.940 align:start position:0%
something that will they will be able to
use<00:06:13.240><c> to</c><00:06:13.510><c> print</c><00:06:13.870><c> our</c><00:06:14.050><c> spring</c><00:06:14.320><c> so</c><00:06:14.590><c> I</c><00:06:14.620><c> want</c><00:06:14.830><c> to</c><00:06:14.860><c> be</c>

00:06:14.940 --> 00:06:14.950 align:start position:0%
use to print our spring so I want to be
 

00:06:14.950 --> 00:06:16.530 align:start position:0%
use to print our spring so I want to be
able<00:06:15.010><c> to</c><00:06:15.130><c> use</c><00:06:15.280><c> this</c><00:06:15.400><c> with</c><00:06:15.610><c> standard</c><00:06:16.150><c> that</c><00:06:16.270><c> C</c>

00:06:16.530 --> 00:06:16.540 align:start position:0%
able to use this with standard that C
 

00:06:16.540 --> 00:06:19.140 align:start position:0%
able to use this with standard that C
out<00:06:16.780><c> so</c><00:06:17.260><c> what</c><00:06:17.410><c> I'm</c><00:06:17.500><c> going</c><00:06:17.650><c> to</c><00:06:17.740><c> do</c><00:06:17.919><c> is</c><00:06:18.220><c> write</c><00:06:18.729><c> an</c>

00:06:19.140 --> 00:06:19.150 align:start position:0%
out so what I'm going to do is write an
 

00:06:19.150 --> 00:06:20.760 align:start position:0%
out so what I'm going to do is write an
overload<00:06:19.720><c> for</c><00:06:19.870><c> that</c><00:06:19.990><c> operator</c><00:06:20.380><c> so</c><00:06:20.620><c> we'll</c>

00:06:20.760 --> 00:06:20.770 align:start position:0%
overload for that operator so we'll
 

00:06:20.770 --> 00:06:24.240 align:start position:0%
overload for that operator so we'll
write<00:06:21.070><c> STD</c><00:06:21.610><c> outlet</c><00:06:21.910><c> stream</c><00:06:22.470><c> operator</c><00:06:23.470><c> shift</c>

00:06:24.240 --> 00:06:24.250 align:start position:0%
write STD outlet stream operator shift
 

00:06:24.250 --> 00:06:28.830 align:start position:0%
write STD outlet stream operator shift
left<00:06:25.020><c> STD</c><00:06:26.020><c> output</c><00:06:26.410><c> stream</c><00:06:26.740><c> stream</c><00:06:27.520><c> our</c><00:06:28.450><c> string</c>

00:06:28.830 --> 00:06:28.840 align:start position:0%
left STD output stream stream our string
 

00:06:28.840 --> 00:06:30.540 align:start position:0%
left STD output stream stream our string
classes<00:06:29.320><c> will</c><00:06:29.500><c> be</c><00:06:29.590><c> a</c><00:06:29.620><c> constant</c><00:06:30.010><c> string</c>

00:06:30.540 --> 00:06:30.550 align:start position:0%
classes will be a constant string
 

00:06:30.550 --> 00:06:33.240 align:start position:0%
classes will be a constant string
reference<00:06:31.110><c> string</c><00:06:32.110><c> is</c><00:06:32.440><c> going</c><00:06:32.800><c> to</c><00:06:32.890><c> return</c><00:06:33.190><c> our</c>

00:06:33.240 --> 00:06:33.250 align:start position:0%
reference string is going to return our
 

00:06:33.250 --> 00:06:35.190 align:start position:0%
reference string is going to return our
stream<00:06:33.729><c> and</c><00:06:34.090><c> before</c><00:06:34.419><c> it</c><00:06:34.510><c> does</c><00:06:34.660><c> that</c><00:06:34.870><c> is</c><00:06:34.990><c> just</c>

00:06:35.190 --> 00:06:35.200 align:start position:0%
stream and before it does that is just
 

00:06:35.200 --> 00:06:36.320 align:start position:0%
stream and before it does that is just
going<00:06:35.320><c> to</c><00:06:35.500><c> show</c>

00:06:36.320 --> 00:06:36.330 align:start position:0%
going to show
 

00:06:36.330 --> 00:06:38.520 align:start position:0%
going to show
stringbuffer<00:06:37.330><c> which</c><00:06:37.660><c> is</c><00:06:37.780><c> a</c><00:06:37.810><c> method</c><00:06:38.170><c> I'm</c><00:06:38.290><c> just</c>

00:06:38.520 --> 00:06:38.530 align:start position:0%
stringbuffer which is a method I'm just
 

00:06:38.530 --> 00:06:40.170 align:start position:0%
stringbuffer which is a method I'm just
about<00:06:38.710><c> a</c><00:06:38.770><c> ride</c><00:06:39.010><c> into</c><00:06:39.460><c> there</c><00:06:39.730><c> we</c><00:06:39.850><c> could</c><00:06:40.030><c> also</c>

00:06:40.170 --> 00:06:40.180 align:start position:0%
about a ride into there we could also
 

00:06:40.180 --> 00:06:42.210 align:start position:0%
about a ride into there we could also
make<00:06:40.450><c> this</c><00:06:40.660><c> operator</c><00:06:41.020><c> a</c><00:06:41.320><c> friend</c><00:06:41.770><c> of</c><00:06:41.980><c> this</c>

00:06:42.210 --> 00:06:42.220 align:start position:0%
make this operator a friend of this
 

00:06:42.220 --> 00:06:43.680 align:start position:0%
make this operator a friend of this
class<00:06:42.490><c> and</c><00:06:42.790><c> then</c><00:06:42.910><c> we'd</c><00:06:43.060><c> be</c><00:06:43.150><c> able</c><00:06:43.180><c> to</c><00:06:43.330><c> call</c><00:06:43.510><c> em</c>

00:06:43.680 --> 00:06:43.690 align:start position:0%
class and then we'd be able to call em
 

00:06:43.690 --> 00:06:45.930 align:start position:0%
class and then we'd be able to call em
buffer<00:06:44.020><c> from</c><00:06:44.320><c> this</c><00:06:44.590><c> function</c><00:06:45.400><c> because</c><00:06:45.850><c> it</c>

00:06:45.930 --> 00:06:45.940 align:start position:0%
buffer from this function because it
 

00:06:45.940 --> 00:06:47.460 align:start position:0%
buffer from this function because it
would<00:06:46.030><c> be</c><00:06:46.120><c> a</c><00:06:46.150><c> friend</c><00:06:46.510><c> in</c><00:06:46.870><c> fact</c><00:06:47.080><c> I</c><00:06:47.260><c> think</c><00:06:47.320><c> I</c>

00:06:47.460 --> 00:06:47.470 align:start position:0%
would be a friend in fact I think I
 

00:06:47.470 --> 00:06:48.360 align:start position:0%
would be a friend in fact I think I
might<00:06:47.620><c> do</c><00:06:47.740><c> it</c><00:06:47.830><c> that</c><00:06:47.950><c> way</c><00:06:48.070><c> instead</c><00:06:48.160><c> of</c><00:06:48.280><c> doing</c>

00:06:48.360 --> 00:06:48.370 align:start position:0%
might do it that way instead of doing
 

00:06:48.370 --> 00:06:50.400 align:start position:0%
might do it that way instead of doing
get<00:06:48.700><c> buffer</c><00:06:49.090><c> I</c><00:06:49.330><c> might</c><00:06:49.750><c> just</c><00:06:49.960><c> copy</c><00:06:50.170><c> this</c>

00:06:50.400 --> 00:06:50.410 align:start position:0%
get buffer I might just copy this
 

00:06:50.410 --> 00:06:52.800 align:start position:0%
get buffer I might just copy this
declaration<00:06:51.370><c> pop</c><00:06:51.640><c> it</c><00:06:51.760><c> in</c><00:06:51.880><c> here</c><00:06:51.910><c> name</c><00:06:52.510><c> it</c><00:06:52.690><c> a</c>

00:06:52.800 --> 00:06:52.810 align:start position:0%
declaration pop it in here name it a
 

00:06:52.810 --> 00:06:55.440 align:start position:0%
declaration pop it in here name it a
friend<00:06:53.260><c> like</c><00:06:53.710><c> so</c><00:06:54.010><c> and</c><00:06:54.370><c> what</c><00:06:54.760><c> that</c><00:06:54.940><c> means</c><00:06:55.210><c> is</c>

00:06:55.440 --> 00:06:55.450 align:start position:0%
friend like so and what that means is
 

00:06:55.450 --> 00:06:57.570 align:start position:0%
friend like so and what that means is
that<00:06:55.480><c> I'll</c><00:06:55.750><c> actually</c><00:06:55.930><c> be</c><00:06:56.290><c> able</c><00:06:56.320><c> to</c><00:06:56.770><c> write</c><00:06:57.310><c> code</c>

00:06:57.570 --> 00:06:57.580 align:start position:0%
that I'll actually be able to write code
 

00:06:57.580 --> 00:06:58.800 align:start position:0%
that I'll actually be able to write code
such<00:06:57.850><c> as</c><00:06:57.940><c> this</c><00:06:58.120><c> so</c><00:06:58.390><c> you</c><00:06:58.480><c> can</c><00:06:58.570><c> see</c><00:06:58.600><c> I'm</c>

00:06:58.800 --> 00:06:58.810 align:start position:0%
such as this so you can see I'm
 

00:06:58.810 --> 00:07:00.510 align:start position:0%
such as this so you can see I'm
accessing<00:06:59.110><c> a</c><00:06:59.350><c> private</c><00:06:59.740><c> member</c><00:07:00.010><c> if</c><00:07:00.160><c> this</c><00:07:00.310><c> code</c>

00:07:00.510 --> 00:07:00.520 align:start position:0%
accessing a private member if this code
 

00:07:00.520 --> 00:07:02.400 align:start position:0%
accessing a private member if this code
wasn't<00:07:00.760><c> present</c><00:07:01.210><c> here</c><00:07:01.420><c> that</c><00:07:01.630><c> wouldn't</c><00:07:02.320><c> be</c>

00:07:02.400 --> 00:07:02.410 align:start position:0%
wasn't present here that wouldn't be
 

00:07:02.410 --> 00:07:04.770 align:start position:0%
wasn't present here that wouldn't be
acceptable<00:07:02.530><c> because</c><00:07:03.130><c> M</c><00:07:03.550><c> buffer</c><00:07:03.940><c> is</c><00:07:04.060><c> a</c><00:07:04.090><c> private</c>

00:07:04.770 --> 00:07:04.780 align:start position:0%
acceptable because M buffer is a private
 

00:07:04.780 --> 00:07:06.930 align:start position:0%
acceptable because M buffer is a private
member<00:07:05.590><c> of</c><00:07:05.740><c> the</c><00:07:05.860><c> string</c><00:07:06.100><c> class</c><00:07:06.280><c> but</c><00:07:06.670><c> since</c>

00:07:06.930 --> 00:07:06.940 align:start position:0%
member of the string class but since
 

00:07:06.940 --> 00:07:08.640 align:start position:0%
member of the string class but since
we've<00:07:07.090><c> declared</c><00:07:07.360><c> this</c><00:07:07.570><c> operator</c><00:07:07.990><c> as</c><00:07:08.170><c> a</c><00:07:08.200><c> friend</c>

00:07:08.640 --> 00:07:08.650 align:start position:0%
we've declared this operator as a friend
 

00:07:08.650 --> 00:07:10.380 align:start position:0%
we've declared this operator as a friend
we<00:07:09.280><c> can</c><00:07:09.430><c> now</c><00:07:09.550><c> write</c><00:07:09.760><c> code</c><00:07:10.030><c> like</c><00:07:10.210><c> this</c>

00:07:10.380 --> 00:07:10.390 align:start position:0%
we can now write code like this
 

00:07:10.390 --> 00:07:12.060 align:start position:0%
we can now write code like this
beautiful<00:07:10.750><c> so</c><00:07:11.170><c> if</c><00:07:11.260><c> I</c><00:07:11.320><c> go</c><00:07:11.440><c> back</c><00:07:11.470><c> to</c><00:07:11.620><c> men</c><00:07:11.860><c> and</c><00:07:12.040><c> I</c>

00:07:12.060 --> 00:07:12.070 align:start position:0%
beautiful so if I go back to men and I
 

00:07:12.070 --> 00:07:13.890 align:start position:0%
beautiful so if I go back to men and I
write<00:07:12.250><c> my</c><00:07:12.370><c> string</c><00:07:12.610><c> variable</c><00:07:12.970><c> here</c><00:07:13.210><c> I'll</c><00:07:13.630><c> just</c>

00:07:13.890 --> 00:07:13.900 align:start position:0%
write my string variable here I'll just
 

00:07:13.900 --> 00:07:17.160 align:start position:0%
write my string variable here I'll just
set<00:07:14.380><c> it</c><00:07:14.470><c> equal</c><00:07:14.530><c> to</c><00:07:14.710><c> shadow</c><00:07:15.670><c> and</c><00:07:16.050><c> then</c><00:07:17.050><c> I'll</c>

00:07:17.160 --> 00:07:17.170 align:start position:0%
set it equal to shadow and then I'll
 

00:07:17.170 --> 00:07:20.270 align:start position:0%
set it equal to shadow and then I'll
just<00:07:17.410><c> pop</c><00:07:17.770><c> it</c><00:07:17.890><c> in</c><00:07:18.010><c> to</c><00:07:18.040><c> see</c><00:07:18.340><c> house</c><00:07:18.630><c> like</c><00:07:19.630><c> that</c>

00:07:20.270 --> 00:07:20.280 align:start position:0%
just pop it in to see house like that
 

00:07:20.280 --> 00:07:22.950 align:start position:0%
just pop it in to see house like that
all<00:07:21.280><c> right</c><00:07:21.430><c> looks</c><00:07:21.760><c> pretty</c><00:07:21.820><c> good</c><00:07:22.090><c> hit</c><00:07:22.300><c> f5</c><00:07:22.660><c> and</c>

00:07:22.950 --> 00:07:22.960 align:start position:0%
all right looks pretty good hit f5 and
 

00:07:22.960 --> 00:07:24.750 align:start position:0%
all right looks pretty good hit f5 and
there<00:07:23.320><c> we</c><00:07:23.410><c> have</c><00:07:23.590><c> our</c><00:07:23.860><c> shadows</c><00:07:24.370><c> string</c>

00:07:24.750 --> 00:07:24.760 align:start position:0%
there we have our shadows string
 

00:07:24.760 --> 00:07:26.070 align:start position:0%
there we have our shadows string
printing<00:07:25.120><c> you</c><00:07:25.240><c> can</c><00:07:25.270><c> see</c><00:07:25.510><c> it's</c><00:07:25.630><c> accompanied</c><00:07:26.050><c> by</c>

00:07:26.070 --> 00:07:26.080 align:start position:0%
printing you can see it's accompanied by
 

00:07:26.080 --> 00:07:28.500 align:start position:0%
printing you can see it's accompanied by
a<00:07:26.230><c> lot</c><00:07:26.830><c> of</c><00:07:26.860><c> other</c><00:07:27.070><c> random</c><00:07:27.550><c> characters</c><00:07:28.180><c> because</c>

00:07:28.500 --> 00:07:28.510 align:start position:0%
a lot of other random characters because
 

00:07:28.510 --> 00:07:29.760 align:start position:0%
a lot of other random characters because
we<00:07:28.660><c> don't</c><00:07:28.840><c> have</c><00:07:28.990><c> that</c><00:07:29.170><c> null</c><00:07:29.350><c> termination</c>

00:07:29.760 --> 00:07:29.770 align:start position:0%
we don't have that null termination
 

00:07:29.770 --> 00:07:31.380 align:start position:0%
we don't have that null termination
character<00:07:30.040><c> so</c><00:07:30.670><c> let's</c><00:07:30.820><c> go</c><00:07:30.910><c> ahead</c><00:07:31.030><c> and</c><00:07:31.150><c> add</c><00:07:31.360><c> that</c>

00:07:31.380 --> 00:07:31.390 align:start position:0%
character so let's go ahead and add that
 

00:07:31.390 --> 00:07:33.390 align:start position:0%
character so let's go ahead and add that
in<00:07:31.780><c> the</c><00:07:32.170><c> way</c><00:07:32.290><c> I'm</c><00:07:32.380><c> going</c><00:07:32.560><c> to</c><00:07:32.650><c> do</c><00:07:32.770><c> that</c><00:07:32.920><c> is</c><00:07:33.130><c> just</c>

00:07:33.390 --> 00:07:33.400 align:start position:0%
in the way I'm going to do that is just
 

00:07:33.400 --> 00:07:35.340 align:start position:0%
in the way I'm going to do that is just
when<00:07:33.850><c> I</c><00:07:33.880><c> allocates</c><00:07:34.360><c> a</c><00:07:34.450><c> buffer</c><00:07:34.780><c> I'm</c><00:07:34.960><c> going</c><00:07:35.230><c> to</c>

00:07:35.340 --> 00:07:35.350 align:start position:0%
when I allocates a buffer I'm going to
 

00:07:35.350 --> 00:07:37.020 align:start position:0%
when I allocates a buffer I'm going to
do<00:07:35.500><c> M</c><00:07:35.710><c> size</c><00:07:35.950><c> plus</c><00:07:36.160><c> 1</c><00:07:36.400><c> you</c><00:07:36.520><c> could</c><00:07:36.670><c> also</c><00:07:36.790><c> use</c>

00:07:37.020 --> 00:07:37.030 align:start position:0%
do M size plus 1 you could also use
 

00:07:37.030 --> 00:07:38.580 align:start position:0%
do M size plus 1 you could also use
string<00:07:37.300><c> copy</c><00:07:37.510><c> which</c><00:07:38.080><c> one</c><00:07:38.230><c> I'm</c><00:07:38.290><c> going</c><00:07:38.380><c> to</c><00:07:38.470><c> talk</c>

00:07:38.580 --> 00:07:38.590 align:start position:0%
string copy which one I'm going to talk
 

00:07:38.590 --> 00:07:39.930 align:start position:0%
string copy which one I'm going to talk
about<00:07:38.620><c> for</c><00:07:39.070><c> now</c><00:07:39.160><c> but</c><00:07:39.400><c> I'm</c><00:07:39.550><c> just</c><00:07:39.670><c> gonna</c>

00:07:39.930 --> 00:07:39.940 align:start position:0%
about for now but I'm just gonna
 

00:07:39.940 --> 00:07:41.640 align:start position:0%
about for now but I'm just gonna
allocate<00:07:40.150><c> m</c><00:07:40.450><c> /</c><00:07:40.630><c> +</c><00:07:40.810><c> 1</c><00:07:41.020><c> to</c><00:07:41.140><c> make</c><00:07:41.290><c> room</c><00:07:41.470><c> for</c><00:07:41.500><c> that</c>

00:07:41.640 --> 00:07:41.650 align:start position:0%
allocate m / + 1 to make room for that
 

00:07:41.650 --> 00:07:44.250 align:start position:0%
allocate m / + 1 to make room for that
we<00:07:42.490><c> know</c><00:07:42.700><c> that</c><00:07:43.150><c> this</c><00:07:43.270><c> string</c><00:07:43.570><c> does</c><00:07:43.930><c> have</c><00:07:44.230><c> a</c>

00:07:44.250 --> 00:07:44.260 align:start position:0%
we know that this string does have a
 

00:07:44.260 --> 00:07:45.600 align:start position:0%
we know that this string does have a
null<00:07:44.440><c> termination</c><00:07:44.770><c> character</c><00:07:45.010><c> so</c><00:07:45.370><c> to</c><00:07:45.430><c> make</c>

00:07:45.600 --> 00:07:45.610 align:start position:0%
null termination character so to make
 

00:07:45.610 --> 00:07:47.280 align:start position:0%
null termination character so to make
this<00:07:45.700><c> easy</c><00:07:45.910><c> I</c><00:07:46.060><c> could</c><00:07:46.240><c> write</c><00:07:46.630><c> code</c><00:07:46.870><c> like</c><00:07:46.900><c> this</c>

00:07:47.280 --> 00:07:47.290 align:start position:0%
this easy I could write code like this
 

00:07:47.290 --> 00:07:49.170 align:start position:0%
this easy I could write code like this
which<00:07:47.560><c> kind</c><00:07:47.830><c> of</c><00:07:47.890><c> seems</c><00:07:48.190><c> to</c><00:07:48.490><c> copy</c><00:07:48.700><c> over</c><00:07:49.090><c> the</c>

00:07:49.170 --> 00:07:49.180 align:start position:0%
which kind of seems to copy over the
 

00:07:49.180 --> 00:07:51.810 align:start position:0%
which kind of seems to copy over the
length<00:07:49.330><c> of</c><00:07:49.540><c> this</c><00:07:49.690><c> if</c><00:07:50.350><c> I</c><00:07:50.470><c> hit</c><00:07:50.650><c> at</c><00:07:50.770><c> 5</c><00:07:51.040><c> this</c><00:07:51.520><c> will</c>

00:07:51.810 --> 00:07:51.820 align:start position:0%
length of this if I hit at 5 this will
 

00:07:51.820 --> 00:07:53.430 align:start position:0%
length of this if I hit at 5 this will
work<00:07:52.060><c> but</c><00:07:52.450><c> this</c><00:07:52.540><c> is</c><00:07:52.600><c> working</c><00:07:53.110><c> under</c><00:07:53.320><c> the</c>

00:07:53.430 --> 00:07:53.440 align:start position:0%
work but this is working under the
 

00:07:53.440 --> 00:07:55.050 align:start position:0%
work but this is working under the
assumption<00:07:53.740><c> that</c><00:07:53.950><c> this</c><00:07:54.190><c> string</c><00:07:54.580><c> that</c><00:07:54.880><c> this</c>

00:07:55.050 --> 00:07:55.060 align:start position:0%
assumption that this string that this
 

00:07:55.060 --> 00:07:57.060 align:start position:0%
assumption that this string that this
child<00:07:55.420><c> pointer</c><00:07:55.810><c> is</c><00:07:55.990><c> actually</c><00:07:56.440><c> properly</c><00:07:56.830><c> not</c>

00:07:57.060 --> 00:07:57.070 align:start position:0%
child pointer is actually properly not
 

00:07:57.070 --> 00:07:59.420 align:start position:0%
child pointer is actually properly not
terminated<00:07:57.610><c> if</c><00:07:58.060><c> we</c><00:07:58.240><c> can't</c><00:07:58.420><c> guarantee</c><00:07:58.630><c> that</c>

00:07:59.420 --> 00:07:59.430 align:start position:0%
terminated if we can't guarantee that
 

00:07:59.430 --> 00:08:01.830 align:start position:0%
terminated if we can't guarantee that
just<00:08:00.430><c> to</c><00:08:00.550><c> be</c><00:08:00.580><c> a</c><00:08:00.730><c> bit</c><00:08:00.910><c> safe</c><00:08:01.180><c> I'm</c><00:08:01.390><c> just</c><00:08:01.630><c> going</c><00:08:01.780><c> to</c>

00:08:01.830 --> 00:08:01.840 align:start position:0%
just to be a bit safe I'm just going to
 

00:08:01.840 --> 00:08:05.040 align:start position:0%
just to be a bit safe I'm just going to
set<00:08:02.080><c> m</c><00:08:02.230><c> buffer</c><00:08:02.650><c> m</c><00:08:02.800><c> size</c><00:08:03.130><c> here</c><00:08:03.460><c> equal</c><00:08:04.210><c> to</c><00:08:04.390><c> 0</c><00:08:04.750><c> like</c>

00:08:05.040 --> 00:08:05.050 align:start position:0%
set m buffer m size here equal to 0 like
 

00:08:05.050 --> 00:08:06.420 align:start position:0%
set m buffer m size here equal to 0 like
this<00:08:05.080><c> manually</c><00:08:05.740><c> adding</c><00:08:05.950><c> my</c><00:08:06.070><c> own</c><00:08:06.100><c> null</c>

00:08:06.420 --> 00:08:06.430 align:start position:0%
this manually adding my own null
 

00:08:06.430 --> 00:08:07.980 align:start position:0%
this manually adding my own null
termination<00:08:06.790><c> character</c><00:08:07.060><c> at</c><00:08:07.420><c> the</c><00:08:07.570><c> end</c><00:08:07.600><c> of</c><00:08:07.840><c> this</c>

00:08:07.980 --> 00:08:07.990 align:start position:0%
termination character at the end of this
 

00:08:07.990 --> 00:08:10.830 align:start position:0%
termination character at the end of this
hit<00:08:08.530><c> f5</c><00:08:08.920><c> and</c><00:08:09.250><c> we</c><00:08:09.730><c> should</c><00:08:09.910><c> be</c><00:08:10.030><c> good</c><00:08:10.210><c> and</c><00:08:10.420><c> you</c><00:08:10.510><c> can</c>

00:08:10.830 --> 00:08:10.840 align:start position:0%
hit f5 and we should be good and you can
 

00:08:10.840 --> 00:08:12.300 align:start position:0%
hit f5 and we should be good and you can
see<00:08:10.990><c> that</c><00:08:11.140><c> we</c><00:08:11.230><c> are</c><00:08:11.260><c> well</c><00:08:11.650><c> finally</c><00:08:12.070><c> writing</c>

00:08:12.300 --> 00:08:12.310 align:start position:0%
see that we are well finally writing
 

00:08:12.310 --> 00:08:13.560 align:start position:0%
see that we are well finally writing
some<00:08:12.430><c> actual</c><00:08:12.730><c> code</c><00:08:12.880><c> in</c><00:08:13.060><c> this</c><00:08:13.150><c> series</c><00:08:13.450><c> really</c>

00:08:13.560 --> 00:08:13.570 align:start position:0%
some actual code in this series really
 

00:08:13.570 --> 00:08:14.730 align:start position:0%
some actual code in this series really
excited<00:08:13.930><c> about</c><00:08:14.020><c> that</c><00:08:14.110><c> hope</c><00:08:14.410><c> I'm</c><00:08:14.500><c> not</c><00:08:14.590><c> going</c>

00:08:14.730 --> 00:08:14.740 align:start position:0%
excited about that hope I'm not going
 

00:08:14.740 --> 00:08:15.960 align:start position:0%
excited about that hope I'm not going
too<00:08:14.860><c> fast</c><00:08:15.220><c> I'm</c><00:08:15.400><c> kind</c><00:08:15.550><c> of</c><00:08:15.610><c> trying</c><00:08:15.760><c> to</c><00:08:15.790><c> rush</c>

00:08:15.960 --> 00:08:15.970 align:start position:0%
too fast I'm kind of trying to rush
 

00:08:15.970 --> 00:08:17.820 align:start position:0%
too fast I'm kind of trying to rush
through<00:08:16.150><c> this</c><00:08:16.330><c> this</c><00:08:16.810><c> is</c><00:08:16.930><c> mostly</c><00:08:17.200><c> basic</c><00:08:17.620><c> kind</c>

00:08:17.820 --> 00:08:17.830 align:start position:0%
through this this is mostly basic kind
 

00:08:17.830 --> 00:08:19.470 align:start position:0%
through this this is mostly basic kind
of<00:08:17.920><c> there's</c><00:08:18.310><c> me</c><00:08:18.490><c> kind</c><00:08:18.910><c> of</c><00:08:18.970><c> setting</c><00:08:19.210><c> up</c><00:08:19.300><c> the</c>

00:08:19.470 --> 00:08:19.480 align:start position:0%
of there's me kind of setting up the
 

00:08:19.480 --> 00:08:20.760 align:start position:0%
of there's me kind of setting up the
string<00:08:19.690><c> class</c><00:08:19.870><c> so</c><00:08:20.050><c> that</c><00:08:20.080><c> I</c><00:08:20.200><c> can</c><00:08:20.380><c> actually</c><00:08:20.500><c> show</c>

00:08:20.760 --> 00:08:20.770 align:start position:0%
string class so that I can actually show
 

00:08:20.770 --> 00:08:21.750 align:start position:0%
string class so that I can actually show
you<00:08:20.800><c> the</c><00:08:20.950><c> copying</c><00:08:21.340><c> which</c><00:08:21.460><c> is</c><00:08:21.580><c> what</c><00:08:21.700><c> this</c>

00:08:21.750 --> 00:08:21.760 align:start position:0%
you the copying which is what this
 

00:08:21.760 --> 00:08:24.090 align:start position:0%
you the copying which is what this
videos<00:08:22.030><c> about</c><00:08:22.060><c> so</c><00:08:22.680><c> if</c><00:08:23.680><c> you</c><00:08:23.830><c> have</c><00:08:23.920><c> any</c>

00:08:24.090 --> 00:08:24.100 align:start position:0%
videos about so if you have any
 

00:08:24.100 --> 00:08:25.770 align:start position:0%
videos about so if you have any
questions<00:08:24.490><c> about</c><00:08:24.580><c> anything</c><00:08:24.850><c> I</c><00:08:25.060><c> wrote</c><00:08:25.270><c> in</c><00:08:25.540><c> this</c>

00:08:25.770 --> 00:08:25.780 align:start position:0%
questions about anything I wrote in this
 

00:08:25.780 --> 00:08:28.590 align:start position:0%
questions about anything I wrote in this
kind<00:08:26.350><c> of</c><00:08:26.470><c> segment</c><00:08:26.980><c> or</c><00:08:27.130><c> another</c><00:08:27.520><c> I</c><00:08:27.880><c> guess</c><00:08:27.940><c> maybe</c>

00:08:28.590 --> 00:08:28.600 align:start position:0%
kind of segment or another I guess maybe
 

00:08:28.600 --> 00:08:30.000 align:start position:0%
kind of segment or another I guess maybe
other<00:08:28.870><c> sections</c><00:08:29.320><c> of</c><00:08:29.380><c> this</c><00:08:29.500><c> video</c><00:08:29.650><c> where</c><00:08:29.980><c> I</c>

00:08:30.000 --> 00:08:30.010 align:start position:0%
other sections of this video where I
 

00:08:30.010 --> 00:08:32.310 align:start position:0%
other sections of this video where I
rush<00:08:30.220><c> through</c><00:08:30.520><c> things</c><00:08:30.760><c> the</c><00:08:31.660><c> best</c><00:08:31.870><c> place</c><00:08:32.110><c> to</c>

00:08:32.310 --> 00:08:32.320 align:start position:0%
rush through things the best place to
 

00:08:32.320 --> 00:08:33.660 align:start position:0%
rush through things the best place to
ask<00:08:32.440><c> these</c><00:08:32.650><c> questions</c><00:08:32.710><c> is</c><00:08:33.220><c> to</c><00:08:33.340><c> join</c><00:08:33.490><c> my</c>

00:08:33.660 --> 00:08:33.670 align:start position:0%
ask these questions is to join my
 

00:08:33.670 --> 00:08:34.710 align:start position:0%
ask these questions is to join my
discord<00:08:34.150><c> server</c>

00:08:34.710 --> 00:08:34.720 align:start position:0%
discord server
 

00:08:34.720 --> 00:08:35.850 align:start position:0%
discord server
there'll<00:08:34.930><c> be</c><00:08:34.960><c> a</c><00:08:35.050><c> link</c><00:08:35.229><c> in</c><00:08:35.320><c> description</c><00:08:35.710><c> if</c><00:08:35.800><c> you</c>

00:08:35.850 --> 00:08:35.860 align:start position:0%
there'll be a link in description if you
 

00:08:35.860 --> 00:08:37.380 align:start position:0%
there'll be a link in description if you
just<00:08:36.010><c> go</c><00:08:36.130><c> to</c><00:08:36.190><c> the</c><00:08:36.610><c> channel</c><00:08:36.910><c> to</c><00:08:36.940><c> calm</c><00:08:37.180><c> slash</c>

00:08:37.380 --> 00:08:37.390 align:start position:0%
just go to the channel to calm slash
 

00:08:37.390 --> 00:08:39.570 align:start position:0%
just go to the channel to calm slash
discord<00:08:38.020><c> then</c><00:08:38.590><c> you'll</c><00:08:38.710><c> be</c><00:08:38.830><c> able</c><00:08:38.920><c> to</c><00:08:39.130><c> join</c><00:08:39.370><c> that</c>

00:08:39.570 --> 00:08:39.580 align:start position:0%
discord then you'll be able to join that
 

00:08:39.580 --> 00:08:41.850 align:start position:0%
discord then you'll be able to join that
server<00:08:39.940><c> and</c><00:08:40.060><c> you</c><00:08:40.510><c> can</c><00:08:40.630><c> talk</c><00:08:40.810><c> to</c><00:08:41.080><c> a</c><00:08:41.320><c> lot</c><00:08:41.740><c> of</c>

00:08:41.850 --> 00:08:41.860 align:start position:0%
server and you can talk to a lot of
 

00:08:41.860 --> 00:08:44.190 align:start position:0%
server and you can talk to a lot of
people<00:08:42.160><c> about</c><00:08:42.490><c> how</c><00:08:42.790><c> all</c><00:08:43.000><c> this</c><00:08:43.240><c> works</c><00:08:43.450><c> and</c><00:08:43.780><c> I'll</c>

00:08:44.190 --> 00:08:44.200 align:start position:0%
people about how all this works and I'll
 

00:08:44.200 --> 00:08:45.300 align:start position:0%
people about how all this works and I'll
be<00:08:44.290><c> there</c><00:08:44.410><c> as</c><00:08:44.530><c> well</c><00:08:44.680><c> to</c><00:08:44.770><c> explain</c><00:08:44.980><c> this</c><00:08:45.160><c> stuff</c>

00:08:45.300 --> 00:08:45.310 align:start position:0%
be there as well to explain this stuff
 

00:08:45.310 --> 00:08:46.410 align:start position:0%
be there as well to explain this stuff
too<00:08:45.490><c> if</c><00:08:45.730><c> you</c><00:08:45.820><c> don't</c><00:08:46.000><c> get</c><00:08:46.150><c> it</c>

00:08:46.410 --> 00:08:46.420 align:start position:0%
too if you don't get it
 

00:08:46.420 --> 00:08:47.850 align:start position:0%
too if you don't get it
okay<00:08:46.570><c> so</c><00:08:46.630><c> we've</c><00:08:46.839><c> got</c><00:08:46.870><c> a</c><00:08:46.990><c> basic</c><00:08:47.200><c> set</c><00:08:47.529><c> up</c><00:08:47.620><c> here</c>

00:08:47.850 --> 00:08:47.860 align:start position:0%
okay so we've got a basic set up here
 

00:08:47.860 --> 00:08:48.960 align:start position:0%
okay so we've got a basic set up here
and<00:08:48.070><c> everything</c><00:08:48.310><c> looks</c><00:08:48.459><c> pretty</c><00:08:48.550><c> good</c><00:08:48.700><c> we've</c>

00:08:48.960 --> 00:08:48.970 align:start position:0%
and everything looks pretty good we've
 

00:08:48.970 --> 00:08:50.310 align:start position:0%
and everything looks pretty good we've
actually<00:08:49.089><c> got</c><00:08:49.329><c> a</c><00:08:49.360><c> bit</c><00:08:49.510><c> of</c><00:08:49.600><c> a</c><00:08:49.660><c> memory</c><00:08:49.930><c> leak</c><00:08:50.079><c> here</c>

00:08:50.310 --> 00:08:50.320 align:start position:0%
actually got a bit of a memory leak here
 

00:08:50.320 --> 00:08:51.660 align:start position:0%
actually got a bit of a memory leak here
that<00:08:50.470><c> we</c><00:08:50.560><c> should</c><00:08:50.589><c> really</c><00:08:50.950><c> fix</c><00:08:51.220><c> and</c><00:08:51.459><c> that</c><00:08:51.579><c> is</c>

00:08:51.660 --> 00:08:51.670 align:start position:0%
that we should really fix and that is
 

00:08:51.670 --> 00:08:53.250 align:start position:0%
that we should really fix and that is
when<00:08:51.820><c> we</c><00:08:51.850><c> allocate</c><00:08:52.329><c> this</c><00:08:52.480><c> new</c><00:08:52.720><c> char</c><00:08:53.230><c> right</c>

00:08:53.250 --> 00:08:53.260 align:start position:0%
when we allocate this new char right
 

00:08:53.260 --> 00:08:55.800 align:start position:0%
when we allocate this new char right
here<00:08:53.649><c> we</c><00:08:53.829><c> never</c><00:08:54.010><c> delete</c><00:08:54.490><c> it</c><00:08:54.700><c> if</c><00:08:55.360><c> we</c><00:08:55.630><c> use</c><00:08:55.779><c> a</c>

00:08:55.800 --> 00:08:55.810 align:start position:0%
here we never delete it if we use a
 

00:08:55.810 --> 00:08:57.420 align:start position:0%
here we never delete it if we use a
smart<00:08:56.139><c> pointer</c><00:08:56.500><c> or</c><00:08:56.560><c> a</c><00:08:56.649><c> vector</c><00:08:56.860><c> we</c><00:08:57.160><c> wouldn't</c>

00:08:57.420 --> 00:08:57.430 align:start position:0%
smart pointer or a vector we wouldn't
 

00:08:57.430 --> 00:08:59.190 align:start position:0%
smart pointer or a vector we wouldn't
need<00:08:57.550><c> to</c><00:08:57.610><c> but</c><00:08:58.029><c> since</c><00:08:58.180><c> we're</c><00:08:58.420><c> using</c><00:08:58.450><c> the</c><00:08:59.050><c> new</c>

00:08:59.190 --> 00:08:59.200 align:start position:0%
need to but since we're using the new
 

00:08:59.200 --> 00:09:01.259 align:start position:0%
need to but since we're using the new
keyword<00:08:59.410><c> and</c><00:08:59.800><c> we're</c><00:08:59.950><c> allocating</c><00:09:00.459><c> a</c><00:09:00.550><c> raw</c><00:09:00.820><c> array</c>

00:09:01.259 --> 00:09:01.269 align:start position:0%
keyword and we're allocating a raw array
 

00:09:01.269 --> 00:09:03.269 align:start position:0%
keyword and we're allocating a raw array
we<00:09:01.839><c> have</c><00:09:01.990><c> to</c><00:09:02.139><c> actually</c><00:09:02.440><c> delete</c><00:09:02.709><c> it</c><00:09:02.860><c> over</c><00:09:03.070><c> here</c>

00:09:03.269 --> 00:09:03.279 align:start position:0%
we have to actually delete it over here
 

00:09:03.279 --> 00:09:04.980 align:start position:0%
we have to actually delete it over here
by<00:09:03.639><c> calling</c><00:09:04.000><c> delete</c><00:09:04.240><c> buffer</c><00:09:04.600><c> in</c><00:09:04.810><c> the</c>

00:09:04.980 --> 00:09:04.990 align:start position:0%
by calling delete buffer in the
 

00:09:04.990 --> 00:09:07.319 align:start position:0%
by calling delete buffer in the
destructor<00:09:05.649><c> okay</c><00:09:06.310><c> fantastic</c><00:09:06.519><c> so</c><00:09:07.089><c> if</c><00:09:07.180><c> we</c>

00:09:07.319 --> 00:09:07.329 align:start position:0%
destructor okay fantastic so if we
 

00:09:07.329 --> 00:09:09.090 align:start position:0%
destructor okay fantastic so if we
launch<00:09:07.750><c> this</c><00:09:07.930><c> code</c><00:09:08.199><c> we'll</c><00:09:08.589><c> just</c><00:09:08.709><c> verify</c><00:09:08.860><c> that</c>

00:09:09.090 --> 00:09:09.100 align:start position:0%
launch this code we'll just verify that
 

00:09:09.100 --> 00:09:10.710 align:start position:0%
launch this code we'll just verify that
our<00:09:09.220><c> program</c><00:09:09.610><c> Gemini</c><00:09:10.089><c> successful</c><00:09:10.570><c> and</c><00:09:10.660><c> you</c>

00:09:10.710 --> 00:09:10.720 align:start position:0%
our program Gemini successful and you
 

00:09:10.720 --> 00:09:12.600 align:start position:0%
our program Gemini successful and you
can<00:09:10.870><c> see</c><00:09:10.990><c> it</c><00:09:11.050><c> does</c><00:09:11.230><c> now</c><00:09:11.529><c> let's</c><00:09:11.800><c> try</c><00:09:12.070><c> to</c><00:09:12.100><c> copy</c>

00:09:12.600 --> 00:09:12.610 align:start position:0%
can see it does now let's try to copy
 

00:09:12.610 --> 00:09:14.699 align:start position:0%
can see it does now let's try to copy
this<00:09:12.880><c> string</c><00:09:13.149><c> so</c><00:09:13.389><c> the</c><00:09:13.750><c> way</c><00:09:13.870><c> so</c><00:09:14.230><c> in</c><00:09:14.529><c> this</c>

00:09:14.699 --> 00:09:14.709 align:start position:0%
this string so the way so in this
 

00:09:14.709 --> 00:09:16.439 align:start position:0%
this string so the way so in this
scenario<00:09:14.889><c> maybe</c><00:09:15.370><c> I</c><00:09:15.519><c> want</c><00:09:15.790><c> to</c><00:09:15.880><c> print</c><00:09:16.149><c> out</c><00:09:16.240><c> this</c>

00:09:16.439 --> 00:09:16.449 align:start position:0%
scenario maybe I want to print out this
 

00:09:16.449 --> 00:09:18.930 align:start position:0%
scenario maybe I want to print out this
string<00:09:16.779><c> and</c><00:09:17.050><c> then</c><00:09:17.529><c> later</c><00:09:17.800><c> on</c><00:09:17.949><c> I</c><00:09:18.310><c> actually</c><00:09:18.519><c> want</c>

00:09:18.930 --> 00:09:18.940 align:start position:0%
string and then later on I actually want
 

00:09:18.940 --> 00:09:20.610 align:start position:0%
string and then later on I actually want
to<00:09:19.000><c> print</c><00:09:19.300><c> I</c><00:09:19.540><c> want</c><00:09:19.810><c> to</c><00:09:19.870><c> make</c><00:09:19.990><c> an</c><00:09:20.110><c> adjustment</c><00:09:20.170><c> to</c>

00:09:20.610 --> 00:09:20.620 align:start position:0%
to print I want to make an adjustment to
 

00:09:20.620 --> 00:09:21.990 align:start position:0%
to print I want to make an adjustment to
this<00:09:20.800><c> string</c><00:09:21.010><c> I'll</c><00:09:21.130><c> just</c><00:09:21.250><c> call</c><00:09:21.399><c> this</c><00:09:21.550><c> second</c>

00:09:21.990 --> 00:09:22.000 align:start position:0%
this string I'll just call this second
 

00:09:22.000 --> 00:09:23.550 align:start position:0%
this string I'll just call this second
for<00:09:22.209><c> this</c><00:09:22.300><c> our</c><00:09:22.449><c> second</c><00:09:22.810><c> string</c><00:09:23.019><c> let's</c><00:09:23.350><c> assign</c>

00:09:23.550 --> 00:09:23.560 align:start position:0%
for this our second string let's assign
 

00:09:23.560 --> 00:09:26.610 align:start position:0%
for this our second string let's assign
this<00:09:23.740><c> to</c><00:09:24.070><c> this</c><00:09:24.760><c> string</c><00:09:25.000><c> for</c><00:09:25.209><c> now</c><00:09:25.329><c> and</c><00:09:25.630><c> let's</c>

00:09:26.610 --> 00:09:26.620 align:start position:0%
this to this string for now and let's
 

00:09:26.620 --> 00:09:28.550 align:start position:0%
this to this string for now and let's
try<00:09:26.829><c> some</c><00:09:27.040><c> code</c><00:09:27.220><c> that</c><00:09:27.250><c> prints</c><00:09:27.639><c> both</c><00:09:27.850><c> of</c><00:09:27.970><c> these</c>

00:09:28.550 --> 00:09:28.560 align:start position:0%
try some code that prints both of these
 

00:09:28.560 --> 00:09:31.350 align:start position:0%
try some code that prints both of these
okay<00:09:29.560><c> let's</c><00:09:29.860><c> hit</c><00:09:29.980><c> f5</c><00:09:30.339><c> you</c><00:09:30.820><c> can</c><00:09:30.970><c> see</c><00:09:31.120><c> that</c><00:09:31.269><c> we</c>

00:09:31.350 --> 00:09:31.360 align:start position:0%
okay let's hit f5 you can see that we
 

00:09:31.360 --> 00:09:32.850 align:start position:0%
okay let's hit f5 you can see that we
get<00:09:31.690><c> channel</c><00:09:32.050><c> pretty</c><00:09:32.139><c> twice</c><00:09:32.529><c> which</c><00:09:32.769><c> is</c>

00:09:32.850 --> 00:09:32.860 align:start position:0%
get channel pretty twice which is
 

00:09:32.860 --> 00:09:34.680 align:start position:0%
get channel pretty twice which is
exactly<00:09:33.250><c> what</c><00:09:33.459><c> we</c><00:09:33.579><c> expect</c><00:09:33.970><c> everything</c><00:09:34.420><c> seems</c>

00:09:34.680 --> 00:09:34.690 align:start position:0%
exactly what we expect everything seems
 

00:09:34.690 --> 00:09:36.960 align:start position:0%
exactly what we expect everything seems
to<00:09:34.750><c> be</c><00:09:34.810><c> working</c><00:09:34.899><c> once</c><00:09:35.350><c> hit</c><00:09:35.529><c> enter</c><00:09:35.860><c> to</c><00:09:36.250><c> proceed</c>

00:09:36.960 --> 00:09:36.970 align:start position:0%
to be working once hit enter to proceed
 

00:09:36.970 --> 00:09:38.550 align:start position:0%
to be working once hit enter to proceed
past<00:09:37.149><c> this</c><00:09:37.360><c> scene</c><00:09:37.570><c> get</c><00:09:37.959><c> and</c><00:09:38.199><c> terminate</c><00:09:38.529><c> our</c>

00:09:38.550 --> 00:09:38.560 align:start position:0%
past this scene get and terminate our
 

00:09:38.560 --> 00:09:40.590 align:start position:0%
past this scene get and terminate our
application<00:09:39.070><c> oh</c><00:09:39.250><c> look</c><00:09:39.519><c> at</c><00:09:39.639><c> that</c><00:09:39.670><c> it</c><00:09:40.149><c> crashed</c>

00:09:40.590 --> 00:09:40.600 align:start position:0%
application oh look at that it crashed
 

00:09:40.600 --> 00:09:42.240 align:start position:0%
application oh look at that it crashed
and<00:09:40.779><c> if</c><00:09:40.899><c> you</c><00:09:40.990><c> look</c><00:09:41.170><c> at</c><00:09:41.290><c> the</c><00:09:41.380><c> Cole</c><00:09:41.589><c> stack</c><00:09:41.889><c> which</c>

00:09:42.240 --> 00:09:42.250 align:start position:0%
and if you look at the Cole stack which
 

00:09:42.250 --> 00:09:43.949 align:start position:0%
and if you look at the Cole stack which
I'm<00:09:42.399><c> going</c><00:09:42.610><c> to</c><00:09:42.730><c> bring</c><00:09:43.000><c> over</c><00:09:43.240><c> here</c><00:09:43.630><c> so</c><00:09:43.779><c> that</c><00:09:43.810><c> you</c>

00:09:43.949 --> 00:09:43.959 align:start position:0%
I'm going to bring over here so that you
 

00:09:43.959 --> 00:09:46.110 align:start position:0%
I'm going to bring over here so that you
can<00:09:44.050><c> actually</c><00:09:44.199><c> see</c><00:09:44.500><c> it</c><00:09:44.649><c> it</c><00:09:45.459><c> looks</c><00:09:45.519><c> kind</c><00:09:46.060><c> of</c>

00:09:46.110 --> 00:09:46.120 align:start position:0%
can actually see it it looks kind of
 

00:09:46.120 --> 00:09:48.300 align:start position:0%
can actually see it it looks kind of
cryptic<00:09:46.480><c> isn't</c><00:09:46.779><c> it's</c><00:09:46.959><c> inside</c><00:09:47.320><c> anti</c><00:09:47.680><c> DLL</c><00:09:48.070><c> since</c>

00:09:48.300 --> 00:09:48.310 align:start position:0%
cryptic isn't it's inside anti DLL since
 

00:09:48.310 --> 00:09:51.000 align:start position:0%
cryptic isn't it's inside anti DLL since
I've<00:09:48.459><c> kernel32.dll</c><00:09:49.240><c> well</c><00:09:50.230><c> we</c><00:09:50.649><c> don't</c><00:09:50.769><c> know</c>

00:09:51.000 --> 00:09:51.010 align:start position:0%
I've kernel32.dll well we don't know
 

00:09:51.010 --> 00:09:52.050 align:start position:0%
I've kernel32.dll well we don't know
what's<00:09:51.160><c> going</c><00:09:51.370><c> on</c><00:09:51.490><c> it</c><00:09:51.670><c> looks</c><00:09:51.820><c> a</c><00:09:51.880><c> bit</c><00:09:51.910><c> weird</c>

00:09:52.050 --> 00:09:52.060 align:start position:0%
what's going on it looks a bit weird
 

00:09:52.060 --> 00:09:54.420 align:start position:0%
what's going on it looks a bit weird
what<00:09:52.750><c> on</c><00:09:52.899><c> earth</c><00:09:53.110><c> happened</c><00:09:53.380><c> so</c><00:09:53.920><c> if</c><00:09:54.010><c> I</c><00:09:54.100><c> terminate</c>

00:09:54.420 --> 00:09:54.430 align:start position:0%
what on earth happened so if I terminate
 

00:09:54.430 --> 00:09:55.230 align:start position:0%
what on earth happened so if I terminate
my<00:09:54.550><c> application</c>

00:09:55.230 --> 00:09:55.240 align:start position:0%
my application
 

00:09:55.240 --> 00:09:57.569 align:start position:0%
my application
let's<00:09:55.630><c> talk</c><00:09:55.839><c> about</c><00:09:55.990><c> this</c><00:09:56.290><c> what</c><00:09:57.040><c> we</c><00:09:57.160><c> did</c><00:09:57.339><c> here</c>

00:09:57.569 --> 00:09:57.579 align:start position:0%
let's talk about this what we did here
 

00:09:57.579 --> 00:09:59.550 align:start position:0%
let's talk about this what we did here
is<00:09:57.760><c> we</c><00:09:57.790><c> copied</c><00:09:58.329><c> the</c><00:09:58.449><c> string</c><00:09:58.750><c> and</c><00:09:58.990><c> when</c><00:09:59.230><c> we</c><00:09:59.350><c> copy</c>

00:09:59.550 --> 00:09:59.560 align:start position:0%
is we copied the string and when we copy
 

00:09:59.560 --> 00:10:01.500 align:start position:0%
is we copied the string and when we copy
the<00:09:59.740><c> string</c><00:10:00.100><c> what</c><00:10:00.430><c> C++</c><00:10:00.970><c> does</c><00:10:01.149><c> for</c><00:10:01.420><c> us</c>

00:10:01.500 --> 00:10:01.510 align:start position:0%
the string what C++ does for us
 

00:10:01.510 --> 00:10:03.540 align:start position:0%
the string what C++ does for us
automatically<00:10:02.110><c> is</c><00:10:02.440><c> it</c><00:10:02.829><c> just</c><00:10:02.980><c> takes</c><00:10:03.250><c> whatever</c>

00:10:03.540 --> 00:10:03.550 align:start position:0%
automatically is it just takes whatever
 

00:10:03.550 --> 00:10:04.949 align:start position:0%
automatically is it just takes whatever
members<00:10:04.000><c> there</c><00:10:04.209><c> are</c><00:10:04.360><c> here</c><00:10:04.630><c> which</c><00:10:04.810><c> is</c>

00:10:04.949 --> 00:10:04.959 align:start position:0%
members there are here which is
 

00:10:04.959 --> 00:10:06.509 align:start position:0%
members there are here which is
basically<00:10:05.110><c> what</c><00:10:05.500><c> what</c><00:10:05.829><c> this</c><00:10:05.980><c> class</c><00:10:06.160><c> is</c><00:10:06.220><c> made</c>

00:10:06.509 --> 00:10:06.519 align:start position:0%
basically what what this class is made
 

00:10:06.519 --> 00:10:08.100 align:start position:0%
basically what what this class is made
up<00:10:06.670><c> it's</c><00:10:06.880><c> made</c><00:10:07.029><c> but</c><00:10:07.149><c> it's</c><00:10:07.329><c> made</c><00:10:07.510><c> up</c><00:10:07.630><c> of</c><00:10:07.720><c> a</c><00:10:07.839><c> child</c>

00:10:08.100 --> 00:10:08.110 align:start position:0%
up it's made but it's made up of a child
 

00:10:08.110 --> 00:10:10.590 align:start position:0%
up it's made but it's made up of a child
pointer<00:10:08.529><c> and</c><00:10:08.709><c> an</c><00:10:09.100><c> on</c><00:10:09.190><c> side</c><00:10:09.430><c> end</c><00:10:09.730><c> and</c><00:10:09.940><c> it</c><00:10:10.390><c> takes</c>

00:10:10.590 --> 00:10:10.600 align:start position:0%
pointer and an on side end and it takes
 

00:10:10.600 --> 00:10:12.389 align:start position:0%
pointer and an on side end and it takes
those<00:10:10.779><c> values</c><00:10:11.230><c> and</c><00:10:11.410><c> it</c><00:10:11.529><c> copies</c><00:10:11.860><c> them</c><00:10:12.040><c> into</c><00:10:12.370><c> a</c>

00:10:12.389 --> 00:10:12.399 align:start position:0%
those values and it copies them into a
 

00:10:12.399 --> 00:10:14.610 align:start position:0%
those values and it copies them into a
new<00:10:12.610><c> memory</c><00:10:12.790><c> address</c><00:10:13.180><c> which</c><00:10:13.720><c> contains</c><00:10:14.140><c> this</c>

00:10:14.610 --> 00:10:14.620 align:start position:0%
new memory address which contains this
 

00:10:14.620 --> 00:10:17.189 align:start position:0%
new memory address which contains this
string<00:10:15.399><c> the</c><00:10:15.910><c> second</c><00:10:16.360><c> string</c><00:10:16.420><c> of</c><00:10:16.750><c> ours</c><00:10:16.899><c> now</c>

00:10:17.189 --> 00:10:17.199 align:start position:0%
string the second string of ours now
 

00:10:17.199 --> 00:10:19.230 align:start position:0%
string the second string of ours now
here's<00:10:17.410><c> the</c><00:10:17.529><c> problem</c><00:10:17.649><c> what</c><00:10:18.399><c> we</c><00:10:18.550><c> have</c><00:10:18.699><c> now</c><00:10:18.910><c> in</c>

00:10:19.230 --> 00:10:19.240 align:start position:0%
here's the problem what we have now in
 

00:10:19.240 --> 00:10:22.139 align:start position:0%
here's the problem what we have now in
memory<00:10:19.959><c> is</c><00:10:20.350><c> two</c><00:10:20.800><c> strings</c><00:10:21.160><c> and</c><00:10:21.399><c> since</c><00:10:21.910><c> they</c><00:10:22.029><c> did</c>

00:10:22.139 --> 00:10:22.149 align:start position:0%
memory is two strings and since they did
 

00:10:22.149 --> 00:10:23.939 align:start position:0%
memory is two strings and since they did
it<00:10:22.240><c> did</c><00:10:22.540><c> a</c><00:10:22.570><c> direct</c><00:10:22.810><c> copy</c><00:10:23.290><c> something</c><00:10:23.620><c> called</c><00:10:23.890><c> a</c>

00:10:23.939 --> 00:10:23.949 align:start position:0%
it did a direct copy something called a
 

00:10:23.949 --> 00:10:26.160 align:start position:0%
it did a direct copy something called a
shallow<00:10:24.190><c> copy</c><00:10:24.519><c> what</c><00:10:25.300><c> it</c><00:10:25.420><c> did</c><00:10:25.570><c> is</c><00:10:25.690><c> it</c><00:10:25.720><c> copied</c>

00:10:26.160 --> 00:10:26.170 align:start position:0%
shallow copy what it did is it copied
 

00:10:26.170 --> 00:10:28.590 align:start position:0%
shallow copy what it did is it copied
this<00:10:26.380><c> pointer</c><00:10:26.920><c> so</c><00:10:27.130><c> we</c><00:10:27.339><c> have</c><00:10:27.579><c> two</c><00:10:28.149><c> strings</c><00:10:28.449><c> in</c>

00:10:28.590 --> 00:10:28.600 align:start position:0%
this pointer so we have two strings in
 

00:10:28.600 --> 00:10:30.660 align:start position:0%
this pointer so we have two strings in
memory<00:10:28.959><c> which</c><00:10:29.620><c> of</c><00:10:29.769><c> course</c><00:10:29.800><c> have</c><00:10:30.130><c> the</c><00:10:30.310><c> exact</c>

00:10:30.660 --> 00:10:30.670 align:start position:0%
memory which of course have the exact
 

00:10:30.670 --> 00:10:33.329 align:start position:0%
memory which of course have the exact
same<00:10:30.850><c> child</c><00:10:31.690><c> pointer</c><00:10:32.019><c> value</c><00:10:32.140><c> in</c><00:10:32.949><c> other</c><00:10:33.069><c> words</c>

00:10:33.329 --> 00:10:33.339 align:start position:0%
same child pointer value in other words
 

00:10:33.339 --> 00:10:35.639 align:start position:0%
same child pointer value in other words
the<00:10:33.519><c> memory</c><00:10:33.880><c> address</c><00:10:34.180><c> the</c><00:10:34.930><c> memory</c><00:10:35.319><c> address</c><00:10:35.620><c> of</c>

00:10:35.639 --> 00:10:35.649 align:start position:0%
the memory address the memory address of
 

00:10:35.649 --> 00:10:38.160 align:start position:0%
the memory address the memory address of
this<00:10:35.890><c> buffer</c><00:10:36.399><c> is</c><00:10:36.910><c> the</c><00:10:37.240><c> same</c><00:10:37.510><c> for</c><00:10:38.019><c> both</c><00:10:38.050><c> of</c>

00:10:38.160 --> 00:10:38.170 align:start position:0%
this buffer is the same for both of
 

00:10:38.170 --> 00:10:38.970 align:start position:0%
this buffer is the same for both of
these<00:10:38.440><c> strings</c>

00:10:38.970 --> 00:10:38.980 align:start position:0%
these strings
 

00:10:38.980 --> 00:10:40.710 align:start position:0%
these strings
and<00:10:39.100><c> we</c><00:10:39.339><c> get</c><00:10:39.490><c> the</c><00:10:39.610><c> crash</c><00:10:39.850><c> because</c><00:10:40.209><c> when</c><00:10:40.600><c> we</c>

00:10:40.710 --> 00:10:40.720 align:start position:0%
and we get the crash because when we
 

00:10:40.720 --> 00:10:42.240 align:start position:0%
and we get the crash because when we
come<00:10:40.870><c> over</c><00:10:41.110><c> here</c><00:10:41.350><c> to</c><00:10:41.589><c> the</c><00:10:41.680><c> end</c><00:10:41.800><c> of</c><00:10:41.920><c> this</c><00:10:42.010><c> scope</c>

00:10:42.240 --> 00:10:42.250 align:start position:0%
come over here to the end of this scope
 

00:10:42.250 --> 00:10:43.980 align:start position:0%
come over here to the end of this scope
and<00:10:42.519><c> both</c><00:10:42.699><c> of</c><00:10:42.730><c> these</c><00:10:42.940><c> strings</c><00:10:43.269><c> get</c><00:10:43.510><c> destroyed</c>

00:10:43.980 --> 00:10:43.990 align:start position:0%
and both of these strings get destroyed
 

00:10:43.990 --> 00:10:46.889 align:start position:0%
and both of these strings get destroyed
the<00:10:44.769><c> destructor</c><00:10:45.220><c> gets</c><00:10:45.399><c> called</c><00:10:45.639><c> and</c><00:10:45.880><c> we</c><00:10:46.600><c> end</c><00:10:46.750><c> up</c>

00:10:46.889 --> 00:10:46.899 align:start position:0%
the destructor gets called and we end up
 

00:10:46.899 --> 00:10:48.210 align:start position:0%
the destructor gets called and we end up
deleting<00:10:47.110><c> this</c><00:10:47.319><c> buffer</c><00:10:47.649><c> twice</c><00:10:47.889><c> so</c><00:10:48.100><c> we're</c>

00:10:48.210 --> 00:10:48.220 align:start position:0%
deleting this buffer twice so we're
 

00:10:48.220 --> 00:10:49.769 align:start position:0%
deleting this buffer twice so we're
trying<00:10:48.430><c> to</c><00:10:48.579><c> free</c><00:10:48.940><c> the</c><00:10:49.060><c> same</c><00:10:49.269><c> block</c><00:10:49.480><c> of</c><00:10:49.630><c> memory</c>

00:10:49.769 --> 00:10:49.779 align:start position:0%
trying to free the same block of memory
 

00:10:49.779 --> 00:10:51.809 align:start position:0%
trying to free the same block of memory
twice<00:10:50.170><c> that's</c><00:10:50.829><c> why</c><00:10:51.010><c> we</c><00:10:51.130><c> get</c><00:10:51.250><c> a</c><00:10:51.279><c> crash</c><00:10:51.519><c> because</c>

00:10:51.809 --> 00:10:51.819 align:start position:0%
twice that's why we get a crash because
 

00:10:51.819 --> 00:10:53.280 align:start position:0%
twice that's why we get a crash because
the<00:10:52.060><c> memory</c><00:10:52.300><c> has</c><00:10:52.389><c> already</c><00:10:52.600><c> been</c><00:10:52.720><c> freed</c><00:10:53.019><c> it's</c>

00:10:53.280 --> 00:10:53.290 align:start position:0%
the memory has already been freed it's
 

00:10:53.290 --> 00:10:53.819 align:start position:0%
the memory has already been freed it's
not<00:10:53.440><c> ours</c>

00:10:53.819 --> 00:10:53.829 align:start position:0%
not ours
 

00:10:53.829 --> 00:10:55.530 align:start position:0%
not ours
we<00:10:53.949><c> can't</c><00:10:54.190><c> free</c><00:10:54.490><c> it</c><00:10:54.579><c> again</c><00:10:54.819><c> so</c><00:10:55.060><c> perhaps</c><00:10:55.269><c> a</c>

00:10:55.530 --> 00:10:55.540 align:start position:0%
we can't free it again so perhaps a
 

00:10:55.540 --> 00:10:57.120 align:start position:0%
we can't free it again so perhaps a
better<00:10:55.569><c> example</c><00:10:56.260><c> to</c><00:10:56.290><c> demonstrate</c><00:10:56.800><c> how</c><00:10:56.980><c> this</c>

00:10:57.120 --> 00:10:57.130 align:start position:0%
better example to demonstrate how this
 

00:10:57.130 --> 00:10:58.440 align:start position:0%
better example to demonstrate how this
really<00:10:57.339><c> is</c><00:10:57.640><c> the</c><00:10:57.850><c> same</c>

00:10:58.440 --> 00:10:58.450 align:start position:0%
really is the same
 

00:10:58.450 --> 00:11:00.150 align:start position:0%
really is the same
I'm<00:10:58.750><c> just</c><00:10:58.990><c> putting</c><00:10:59.410><c> a</c><00:10:59.470><c> breakpoint</c><00:10:59.710><c> here</c>

00:11:00.150 --> 00:11:00.160 align:start position:0%
I'm just putting a breakpoint here
 

00:11:00.160 --> 00:11:02.550 align:start position:0%
I'm just putting a breakpoint here
hitting<00:11:00.490><c> f5</c><00:11:01.000><c> and</c><00:11:01.300><c> then</c><00:11:01.630><c> being</c><00:11:01.810><c> able</c><00:11:01.960><c> to</c><00:11:02.110><c> mouse</c>

00:11:02.550 --> 00:11:02.560 align:start position:0%
hitting f5 and then being able to mouse
 

00:11:02.560 --> 00:11:04.080 align:start position:0%
hitting f5 and then being able to mouse
over<00:11:02.800><c> both</c><00:11:03.160><c> of</c><00:11:03.190><c> these</c><00:11:03.430><c> you'll</c><00:11:03.670><c> see</c><00:11:03.700><c> that</c><00:11:03.970><c> in</c>

00:11:04.080 --> 00:11:04.090 align:start position:0%
over both of these you'll see that in
 

00:11:04.090 --> 00:11:05.790 align:start position:0%
over both of these you'll see that in
this<00:11:04.180><c> case</c><00:11:04.360><c> M</c><00:11:04.600><c> buffer</c><00:11:04.990><c> has</c><00:11:05.140><c> a</c><00:11:05.200><c> memory</c><00:11:05.440><c> address</c>

00:11:05.790 --> 00:11:05.800 align:start position:0%
this case M buffer has a memory address
 

00:11:05.800 --> 00:11:11.280 align:start position:0%
this case M buffer has a memory address
ae<00:11:06.010><c> 0</c><00:11:06.610><c> 4</c><00:11:06.970><c> 4</c><00:11:07.150><c> 0</c><00:11:07.180><c> &amp;</c><00:11:07.780><c> 4</c><00:11:08.590><c> second</c><00:11:09.040><c> we</c><00:11:09.700><c> also</c><00:11:09.850><c> have</c><00:11:10.180><c> a</c><00:11:10.480><c> e0</c>

00:11:11.280 --> 00:11:11.290 align:start position:0%
ae 0 4 4 0 &amp; 4 second we also have a e0
 

00:11:11.290 --> 00:11:13.470 align:start position:0%
ae 0 4 4 0 &amp; 4 second we also have a e0
4<00:11:11.590><c> 4</c><00:11:11.770><c> 0</c><00:11:11.800><c> so</c><00:11:12.220><c> clearly</c><00:11:12.460><c> the</c><00:11:12.610><c> pointer</c><00:11:12.940><c> is</c><00:11:13.060><c> the</c><00:11:13.240><c> same</c>

00:11:13.470 --> 00:11:13.480 align:start position:0%
4 4 0 so clearly the pointer is the same
 

00:11:13.480 --> 00:11:15.630 align:start position:0%
4 4 0 so clearly the pointer is the same
apart<00:11:13.990><c> from</c><00:11:14.110><c> doing</c><00:11:14.260><c> that</c><00:11:14.560><c> let's</c><00:11:15.190><c> say</c><00:11:15.370><c> that</c><00:11:15.550><c> we</c>

00:11:15.630 --> 00:11:15.640 align:start position:0%
apart from doing that let's say that we
 

00:11:15.640 --> 00:11:17.850 align:start position:0%
apart from doing that let's say that we
actually<00:11:15.820><c> want</c><00:11:16.180><c> to</c><00:11:16.300><c> modify</c><00:11:16.720><c> the</c><00:11:17.500><c> second</c>

00:11:17.850 --> 00:11:17.860 align:start position:0%
actually want to modify the second
 

00:11:17.860 --> 00:11:19.950 align:start position:0%
actually want to modify the second
string<00:11:18.190><c> so</c><00:11:18.430><c> I</c><00:11:18.460><c> maybe</c><00:11:18.790><c> instead</c><00:11:19.210><c> of</c><00:11:19.360><c> I'll</c><00:11:19.690><c> change</c>

00:11:19.950 --> 00:11:19.960 align:start position:0%
string so I maybe instead of I'll change
 

00:11:19.960 --> 00:11:22.230 align:start position:0%
string so I maybe instead of I'll change
the<00:11:20.170><c> third</c><00:11:20.770><c> character</c><00:11:21.220><c> from</c><00:11:21.400><c> E</c><00:11:21.520><c> to</c><00:11:21.550><c> a</c><00:11:21.790><c> to</c><00:11:21.940><c> get</c>

00:11:22.230 --> 00:11:22.240 align:start position:0%
the third character from E to a to get
 

00:11:22.240 --> 00:11:24.600 align:start position:0%
the third character from E to a to get
China<00:11:22.510><c> which</c><00:11:23.260><c> which</c><00:11:23.650><c> you</c><00:11:23.680><c> guys</c><00:11:23.950><c> love</c><00:11:24.220><c> will</c>

00:11:24.600 --> 00:11:24.610 align:start position:0%
China which which you guys love will
 

00:11:24.610 --> 00:11:26.100 align:start position:0%
China which which you guys love will
access<00:11:24.910><c> the</c><00:11:25.000><c> second</c><00:11:25.270><c> index</c><00:11:25.570><c> and</c><00:11:25.780><c> assign</c><00:11:25.990><c> it</c><00:11:26.080><c> to</c>

00:11:26.100 --> 00:11:26.110 align:start position:0%
access the second index and assign it to
 

00:11:26.110 --> 00:11:28.110 align:start position:0%
access the second index and assign it to
a<00:11:26.250><c> of</c><00:11:27.250><c> course</c><00:11:27.520><c> in</c><00:11:27.640><c> order</c><00:11:27.730><c> to</c><00:11:27.880><c> get</c><00:11:28.030><c> this</c>

00:11:28.110 --> 00:11:28.120 align:start position:0%
a of course in order to get this
 

00:11:28.120 --> 00:11:29.430 align:start position:0%
a of course in order to get this
operator<00:11:28.540><c> to</c><00:11:28.690><c> work</c><00:11:28.810><c> for</c><00:11:29.020><c> the</c><00:11:29.080><c> string</c><00:11:29.290><c> class</c>

00:11:29.430 --> 00:11:29.440 align:start position:0%
operator to work for the string class
 

00:11:29.440 --> 00:11:31.230 align:start position:0%
operator to work for the string class
we'll<00:11:29.650><c> have</c><00:11:29.740><c> to</c><00:11:29.860><c> write</c><00:11:30.040><c> it</c><00:11:30.190><c> so</c><00:11:30.760><c> here</c><00:11:31.090><c> I'm</c><00:11:31.180><c> just</c>

00:11:31.230 --> 00:11:31.240 align:start position:0%
we'll have to write it so here I'm just
 

00:11:31.240 --> 00:11:32.940 align:start position:0%
we'll have to write it so here I'm just
going<00:11:31.540><c> to</c><00:11:31.600><c> write</c><00:11:31.840><c> something</c><00:11:32.170><c> that</c><00:11:32.320><c> returns</c><00:11:32.710><c> a</c>

00:11:32.940 --> 00:11:32.950 align:start position:0%
going to write something that returns a
 

00:11:32.950 --> 00:11:35.370 align:start position:0%
going to write something that returns a
char<00:11:33.250><c> reference</c><00:11:33.730><c> operator</c><00:11:34.630><c> index</c><00:11:35.140><c> operator</c>

00:11:35.370 --> 00:11:35.380 align:start position:0%
char reference operator index operator
 

00:11:35.380 --> 00:11:38.400 align:start position:0%
char reference operator index operator
unsigned<00:11:36.130><c> int</c><00:11:37.000><c> index</c><00:11:37.450><c> we're</c><00:11:38.080><c> not</c><00:11:38.170><c> going</c><00:11:38.290><c> to</c><00:11:38.320><c> do</c>

00:11:38.400 --> 00:11:38.410 align:start position:0%
unsigned int index we're not going to do
 

00:11:38.410 --> 00:11:39.720 align:start position:0%
unsigned int index we're not going to do
any<00:11:38.560><c> kind</c><00:11:38.710><c> of</c><00:11:38.830><c> safety</c><00:11:39.040><c> checks</c><00:11:39.400><c> to</c><00:11:39.550><c> make</c><00:11:39.580><c> sure</c>

00:11:39.720 --> 00:11:39.730 align:start position:0%
any kind of safety checks to make sure
 

00:11:39.730 --> 00:11:41.340 align:start position:0%
any kind of safety checks to make sure
we're<00:11:40.030><c> inside</c><00:11:40.300><c> the</c><00:11:40.420><c> bounds</c><00:11:40.810><c> we're</c><00:11:40.960><c> just</c><00:11:41.140><c> going</c>

00:11:41.340 --> 00:11:41.350 align:start position:0%
we're inside the bounds we're just going
 

00:11:41.350 --> 00:11:44.820 align:start position:0%
we're inside the bounds we're just going
to<00:11:41.470><c> return</c><00:11:41.770><c> and</c><00:11:42.280><c> buffer</c><00:11:42.970><c> at</c><00:11:43.210><c> index</c><00:11:44.050><c> to</c><00:11:44.530><c> keep</c><00:11:44.680><c> it</c>

00:11:44.820 --> 00:11:44.830 align:start position:0%
to return and buffer at index to keep it
 

00:11:44.830 --> 00:11:47.190 align:start position:0%
to return and buffer at index to keep it
nice<00:11:44.950><c> and</c><00:11:45.010><c> simple</c><00:11:45.310><c> ok</c><00:11:45.970><c> this</c><00:11:46.270><c> works</c><00:11:46.510><c> let's</c><00:11:47.050><c> hit</c>

00:11:47.190 --> 00:11:47.200 align:start position:0%
nice and simple ok this works let's hit
 

00:11:47.200 --> 00:11:50.190 align:start position:0%
nice and simple ok this works let's hit
f5<00:11:47.530><c> and</c><00:11:47.770><c> check</c><00:11:48.550><c> this</c><00:11:48.670><c> out</c><00:11:48.970><c> there</c><00:11:49.180><c> boys</c><00:11:49.450><c> charnot</c>

00:11:50.190 --> 00:11:50.200 align:start position:0%
f5 and check this out there boys charnot
 

00:11:50.200 --> 00:11:52.920 align:start position:0%
f5 and check this out there boys charnot
so<00:11:50.710><c> why</c><00:11:51.130><c> why</c><00:11:51.880><c> is</c><00:11:51.940><c> that</c><00:11:52.180><c> happy</c><00:11:52.420><c> and</c><00:11:52.450><c> we</c><00:11:52.660><c> get</c><00:11:52.750><c> and</c>

00:11:52.920 --> 00:11:52.930 align:start position:0%
so why why is that happy and we get and
 

00:11:52.930 --> 00:11:54.900 align:start position:0%
so why why is that happy and we get and
of<00:11:53.260><c> course</c><00:11:53.440><c> we</c><00:11:53.560><c> also</c><00:11:53.650><c> get</c><00:11:53.920><c> the</c><00:11:53.980><c> crash</c><00:11:54.190><c> so</c><00:11:54.760><c> why</c>

00:11:54.900 --> 00:11:54.910 align:start position:0%
of course we also get the crash so why
 

00:11:54.910 --> 00:11:56.040 align:start position:0%
of course we also get the crash so why
is<00:11:54.970><c> this</c><00:11:55.090><c> happening</c><00:11:55.480><c> it</c><00:11:55.600><c> looks</c><00:11:55.750><c> like</c><00:11:55.900><c> we've</c>

00:11:56.040 --> 00:11:56.050 align:start position:0%
is this happening it looks like we've
 

00:11:56.050 --> 00:11:57.780 align:start position:0%
is this happening it looks like we've
copied<00:11:56.230><c> it</c><00:11:56.470><c> but</c><00:11:56.500><c> we</c><00:11:56.770><c> haven't</c><00:11:56.980><c> what</c><00:11:57.670><c> we</c>

00:11:57.780 --> 00:11:57.790 align:start position:0%
copied it but we haven't what we
 

00:11:57.790 --> 00:12:00.570 align:start position:0%
copied it but we haven't what we
actually<00:11:58.120><c> need</c><00:11:58.300><c> to</c><00:11:58.330><c> do</c><00:11:58.540><c> is</c><00:11:59.130><c> allocate</c><00:12:00.130><c> a</c><00:12:00.430><c> new</c>

00:12:00.570 --> 00:12:00.580 align:start position:0%
actually need to do is allocate a new
 

00:12:00.580 --> 00:12:03.330 align:start position:0%
actually need to do is allocate a new
char<00:12:01.450><c> array</c><00:12:01.630><c> to</c><00:12:02.050><c> store</c><00:12:02.080><c> the</c><00:12:02.650><c> copied</c><00:12:02.980><c> string</c>

00:12:03.330 --> 00:12:03.340 align:start position:0%
char array to store the copied string
 

00:12:03.340 --> 00:12:04.680 align:start position:0%
char array to store the copied string
right<00:12:03.850><c> because</c><00:12:04.090><c> what</c><00:12:04.240><c> we're</c><00:12:04.360><c> doing</c><00:12:04.390><c> now</c><00:12:04.660><c> is</c>

00:12:04.680 --> 00:12:04.690 align:start position:0%
right because what we're doing now is
 

00:12:04.690 --> 00:12:07.140 align:start position:0%
right because what we're doing now is
we're<00:12:04.960><c> copying</c><00:12:05.380><c> the</c><00:12:05.830><c> the</c><00:12:06.100><c> pointer</c><00:12:06.520><c> and</c><00:12:07.000><c> what</c>

00:12:07.140 --> 00:12:07.150 align:start position:0%
we're copying the the pointer and what
 

00:12:07.150 --> 00:12:09.060 align:start position:0%
we're copying the the pointer and what
we<00:12:07.210><c> have</c><00:12:07.390><c> is</c><00:12:07.540><c> two</c><00:12:07.720><c> string</c><00:12:07.990><c> objects</c><00:12:08.350><c> pointing</c>

00:12:09.060 --> 00:12:09.070 align:start position:0%
we have is two string objects pointing
 

00:12:09.070 --> 00:12:11.760 align:start position:0%
we have is two string objects pointing
to<00:12:09.190><c> the</c><00:12:09.310><c> exact</c><00:12:09.610><c> same</c><00:12:09.880><c> buffer</c><00:12:10.660><c> of</c><00:12:10.780><c> memory</c><00:12:11.110><c> which</c>

00:12:11.760 --> 00:12:11.770 align:start position:0%
to the exact same buffer of memory which
 

00:12:11.770 --> 00:12:13.440 align:start position:0%
to the exact same buffer of memory which
means<00:12:11.800><c> that</c><00:12:12.220><c> when</c><00:12:12.520><c> we</c><00:12:12.670><c> either</c><00:12:12.820><c> try</c><00:12:13.120><c> and</c><00:12:13.270><c> change</c>

00:12:13.440 --> 00:12:13.450 align:start position:0%
means that when we either try and change
 

00:12:13.450 --> 00:12:15.180 align:start position:0%
means that when we either try and change
one<00:12:13.780><c> of</c><00:12:13.900><c> them</c><00:12:14.080><c> it</c><00:12:14.500><c> changes</c><00:12:14.770><c> both</c><00:12:14.920><c> of</c><00:12:15.100><c> them</c>

00:12:15.180 --> 00:12:15.190 align:start position:0%
one of them it changes both of them
 

00:12:15.190 --> 00:12:16.230 align:start position:0%
one of them it changes both of them
because<00:12:15.400><c> they're</c><00:12:15.580><c> pointing</c><00:12:15.880><c> to</c><00:12:15.970><c> the</c><00:12:16.060><c> same</c>

00:12:16.230 --> 00:12:16.240 align:start position:0%
because they're pointing to the same
 

00:12:16.240 --> 00:12:18.210 align:start position:0%
because they're pointing to the same
block<00:12:16.390><c> of</c><00:12:16.540><c> memory</c><00:12:16.690><c> or</c><00:12:17.170><c> when</c><00:12:17.590><c> we</c><00:12:17.680><c> delete</c><00:12:17.980><c> one</c><00:12:18.190><c> of</c>

00:12:18.210 --> 00:12:18.220 align:start position:0%
block of memory or when we delete one of
 

00:12:18.220 --> 00:12:19.590 align:start position:0%
block of memory or when we delete one of
them<00:12:18.400><c> it's</c><00:12:18.520><c> gonna</c><00:12:18.640><c> delete</c><00:12:19.090><c> both</c><00:12:19.300><c> of</c><00:12:19.480><c> them</c>

00:12:19.590 --> 00:12:19.600 align:start position:0%
them it's gonna delete both of them
 

00:12:19.600 --> 00:12:20.970 align:start position:0%
them it's gonna delete both of them
because<00:12:19.930><c> well</c><00:12:20.290><c> they're</c><00:12:20.530><c> pointing</c><00:12:20.830><c> to</c><00:12:20.890><c> the</c>

00:12:20.970 --> 00:12:20.980 align:start position:0%
because well they're pointing to the
 

00:12:20.980 --> 00:12:22.650 align:start position:0%
because well they're pointing to the
same<00:12:21.130><c> block</c><00:12:21.310><c> of</c><00:12:21.340><c> memory</c><00:12:21.550><c> we</c><00:12:22.150><c> want</c><00:12:22.330><c> to</c><00:12:22.390><c> actually</c>

00:12:22.650 --> 00:12:22.660 align:start position:0%
same block of memory we want to actually
 

00:12:22.660 --> 00:12:24.090 align:start position:0%
same block of memory we want to actually
copy<00:12:22.870><c> that</c><00:12:23.170><c> block</c><00:12:23.350><c> of</c><00:12:23.470><c> memory</c><00:12:23.740><c> we</c><00:12:23.860><c> want</c><00:12:24.010><c> the</c>

00:12:24.090 --> 00:12:24.100 align:start position:0%
copy that block of memory we want the
 

00:12:24.100 --> 00:12:26.670 align:start position:0%
copy that block of memory we want the
second<00:12:24.550><c> string</c><00:12:24.910><c> to</c><00:12:25.360><c> have</c><00:12:25.480><c> its</c><00:12:25.630><c> own</c><00:12:25.750><c> pointer</c><00:12:26.530><c> to</c>

00:12:26.670 --> 00:12:26.680 align:start position:0%
second string to have its own pointer to
 

00:12:26.680 --> 00:12:28.110 align:start position:0%
second string to have its own pointer to
have<00:12:26.800><c> its</c><00:12:26.920><c> own</c><00:12:27.130><c> unique</c><00:12:27.160><c> block</c><00:12:27.820><c> of</c><00:12:27.940><c> memory</c>

00:12:28.110 --> 00:12:28.120 align:start position:0%
have its own unique block of memory
 

00:12:28.120 --> 00:12:29.970 align:start position:0%
have its own unique block of memory
that's<00:12:28.420><c> pointing</c><00:12:28.870><c> to</c><00:12:29.050><c> so</c><00:12:29.620><c> that</c><00:12:29.740><c> when</c><00:12:29.860><c> we</c>

00:12:29.970 --> 00:12:29.980 align:start position:0%
that's pointing to so that when we
 

00:12:29.980 --> 00:12:31.590 align:start position:0%
that's pointing to so that when we
either<00:12:30.160><c> modify</c><00:12:30.520><c> or</c><00:12:30.820><c> delete</c><00:12:30.970><c> the</c><00:12:31.270><c> second</c>

00:12:31.590 --> 00:12:31.600 align:start position:0%
either modify or delete the second
 

00:12:31.600 --> 00:12:33.090 align:start position:0%
either modify or delete the second
string<00:12:31.780><c> it</c><00:12:31.900><c> doesn't</c><00:12:32.200><c> touch</c><00:12:32.320><c> the</c><00:12:32.530><c> first</c><00:12:32.800><c> string</c>

00:12:33.090 --> 00:12:33.100 align:start position:0%
string it doesn't touch the first string
 

00:12:33.100 --> 00:12:35.010 align:start position:0%
string it doesn't touch the first string
and<00:12:33.280><c> vice</c><00:12:33.760><c> versa</c><00:12:34.060><c> and</c><00:12:34.360><c> the</c><00:12:34.450><c> way</c><00:12:34.600><c> that</c><00:12:34.780><c> we</c><00:12:34.870><c> can</c>

00:12:35.010 --> 00:12:35.020 align:start position:0%
and vice versa and the way that we can
 

00:12:35.020 --> 00:12:36.510 align:start position:0%
and vice versa and the way that we can
do<00:12:35.170><c> that</c><00:12:35.350><c> is</c><00:12:35.590><c> by</c><00:12:35.950><c> performing</c><00:12:36.370><c> something</c>

00:12:36.510 --> 00:12:36.520 align:start position:0%
do that is by performing something
 

00:12:36.520 --> 00:12:37.920 align:start position:0%
do that is by performing something
called<00:12:36.760><c> a</c><00:12:36.850><c> deep</c><00:12:37.090><c> copy</c><00:12:37.420><c> meaning</c><00:12:37.840><c> we're</c>

00:12:37.920 --> 00:12:37.930 align:start position:0%
called a deep copy meaning we're
 

00:12:37.930 --> 00:12:39.510 align:start position:0%
called a deep copy meaning we're
actually<00:12:38.200><c> copying</c><00:12:38.500><c> the</c><00:12:38.650><c> entire</c><00:12:38.740><c> object</c><00:12:39.130><c> not</c>

00:12:39.510 --> 00:12:39.520 align:start position:0%
actually copying the entire object not
 

00:12:39.520 --> 00:12:42.390 align:start position:0%
actually copying the entire object not
just<00:12:39.730><c> the</c><00:12:39.970><c> kind</c><00:12:40.300><c> of</c><00:12:40.390><c> shallow</c><00:12:40.920><c> like</c><00:12:41.920><c> features</c>

00:12:42.390 --> 00:12:42.400 align:start position:0%
just the kind of shallow like features
 

00:12:42.400 --> 00:12:45.060 align:start position:0%
just the kind of shallow like features
that<00:12:42.520><c> we</c><00:12:42.670><c> see</c><00:12:42.910><c> on</c><00:12:43.120><c> the</c><00:12:43.600><c> very</c><00:12:43.780><c> top</c><00:12:44.020><c> such</c><00:12:44.350><c> as</c><00:12:44.530><c> what</c>

00:12:45.060 --> 00:12:45.070 align:start position:0%
that we see on the very top such as what
 

00:12:45.070 --> 00:12:47.160 align:start position:0%
that we see on the very top such as what
actually<00:12:45.460><c> makes</c><00:12:46.030><c> up</c><00:12:46.210><c> the</c><00:12:46.360><c> object</c><00:12:46.750><c> because</c><00:12:47.050><c> if</c>

00:12:47.160 --> 00:12:47.170 align:start position:0%
actually makes up the object because if
 

00:12:47.170 --> 00:12:48.930 align:start position:0%
actually makes up the object because if
you<00:12:47.260><c> look</c><00:12:47.440><c> at</c><00:12:47.530><c> the</c><00:12:47.620><c> object</c><00:12:47.920><c> in</c><00:12:47.980><c> memory</c><00:12:48.100><c> it's</c><00:12:48.790><c> a</c>

00:12:48.930 --> 00:12:48.940 align:start position:0%
you look at the object in memory it's a
 

00:12:48.940 --> 00:12:51.120 align:start position:0%
you look at the object in memory it's a
pointer<00:12:49.360><c> and</c><00:12:49.510><c> an</c><00:12:49.840><c> int</c><00:12:50.080><c> that's</c><00:12:50.440><c> all</c><00:12:50.620><c> it</c><00:12:50.770><c> is</c><00:12:50.800><c> but</c>

00:12:51.120 --> 00:12:51.130 align:start position:0%
pointer and an int that's all it is but
 

00:12:51.130 --> 00:12:53.460 align:start position:0%
pointer and an int that's all it is but
a<00:12:51.880><c> shallow</c><00:12:52.240><c> copy</c><00:12:52.480><c> is</c><00:12:52.660><c> not</c><00:12:52.690><c> gonna</c><00:12:52.870><c> go</c><00:12:53.080><c> to</c><00:12:53.140><c> the</c>

00:12:53.460 --> 00:12:53.470 align:start position:0%
a shallow copy is not gonna go to the
 

00:12:53.470 --> 00:12:55.200 align:start position:0%
a shallow copy is not gonna go to the
contents<00:12:54.160><c> of</c><00:12:54.250><c> the</c><00:12:54.370><c> pointer</c><00:12:54.670><c> or</c><00:12:54.820><c> where</c><00:12:55.060><c> the</c>

00:12:55.200 --> 00:12:55.210 align:start position:0%
contents of the pointer or where the
 

00:12:55.210 --> 00:12:57.240 align:start position:0%
contents of the pointer or where the
point<00:12:55.420><c> is</c><00:12:55.540><c> pointing</c><00:12:55.990><c> to</c><00:12:56.200><c> and</c><00:12:56.410><c> actually</c><00:12:56.830><c> copy</c>

00:12:57.240 --> 00:12:57.250 align:start position:0%
point is pointing to and actually copy
 

00:12:57.250 --> 00:13:00.060 align:start position:0%
point is pointing to and actually copy
that<00:12:57.610><c> as</c><00:12:57.820><c> well</c><00:12:58.060><c> a</c><00:12:58.090><c> deep</c><00:12:58.420><c> copy</c><00:12:58.690><c> is</c><00:12:59.170><c> by</c>

00:13:00.060 --> 00:13:00.070 align:start position:0%
that as well a deep copy is by
 

00:13:00.070 --> 00:13:02.130 align:start position:0%
that as well a deep copy is by
definition<00:13:00.280><c> going</c><00:13:00.700><c> to</c><00:13:01.150><c> copy</c><00:13:01.360><c> the</c><00:13:01.600><c> object</c><00:13:01.720><c> in</c>

00:13:02.130 --> 00:13:02.140 align:start position:0%
definition going to copy the object in
 

00:13:02.140 --> 00:13:04.320 align:start position:0%
definition going to copy the object in
its<00:13:02.350><c> entirety</c><00:13:02.890><c> so</c><00:13:03.490><c> how</c><00:13:03.610><c> do</c><00:13:03.670><c> we</c><00:13:03.760><c> make</c><00:13:03.910><c> a</c><00:13:03.970><c> perform</c>

00:13:04.320 --> 00:13:04.330 align:start position:0%
its entirety so how do we make a perform
 

00:13:04.330 --> 00:13:06.090 align:start position:0%
its entirety so how do we make a perform
a<00:13:04.390><c> deep</c><00:13:04.570><c> copy</c><00:13:04.810><c> well</c><00:13:05.500><c> of</c><00:13:05.590><c> course</c><00:13:05.620><c> we</c><00:13:05.920><c> could</c>

00:13:06.090 --> 00:13:06.100 align:start position:0%
a deep copy well of course we could
 

00:13:06.100 --> 00:13:08.460 align:start position:0%
a deep copy well of course we could
write<00:13:06.310><c> our</c><00:13:06.520><c> own</c><00:13:06.640><c> clone</c><00:13:07.090><c> like</c><00:13:07.870><c> method</c><00:13:08.350><c> or</c>

00:13:08.460 --> 00:13:08.470 align:start position:0%
write our own clone like method or
 

00:13:08.470 --> 00:13:09.220 align:start position:0%
write our own clone like method or
function<00:13:08.650><c> on</c><00:13:08.950><c> it</c>

00:13:09.220 --> 00:13:09.230 align:start position:0%
function on it
 

00:13:09.230 --> 00:13:11.110 align:start position:0%
function on it
that<00:13:09.410><c> and</c><00:13:09.620><c> have</c><00:13:10.100><c> it</c><00:13:10.220><c> just</c><00:13:10.250><c> returned</c><00:13:10.820><c> a</c><00:13:10.850><c> new</c>

00:13:11.110 --> 00:13:11.120 align:start position:0%
that and have it just returned a new
 

00:13:11.120 --> 00:13:12.820 align:start position:0%
that and have it just returned a new
string<00:13:11.450><c> which</c><00:13:11.690><c> contains</c><00:13:11.720><c> anyway</c><00:13:12.410><c> that's</c><00:13:12.590><c> I</c>

00:13:12.820 --> 00:13:12.830 align:start position:0%
string which contains anyway that's I
 

00:13:12.830 --> 00:13:14.050 align:start position:0%
string which contains anyway that's I
don't<00:13:13.010><c> even</c><00:13:13.160><c> want</c><00:13:13.310><c> to</c><00:13:13.340><c> explain</c><00:13:13.580><c> that</c><00:13:13.640><c> because</c>

00:13:14.050 --> 00:13:14.060 align:start position:0%
don't even want to explain that because
 

00:13:14.060 --> 00:13:16.480 align:start position:0%
don't even want to explain that because
that's<00:13:14.420><c> not</c><00:13:14.510><c> the</c><00:13:14.690><c> way</c><00:13:14.780><c> you</c><00:13:14.810><c> do</c><00:13:15.050><c> it</c><00:13:15.370><c> the</c><00:13:16.370><c> way</c>

00:13:16.480 --> 00:13:16.490 align:start position:0%
that's not the way you do it the way
 

00:13:16.490 --> 00:13:18.400 align:start position:0%
that's not the way you do it the way
that<00:13:16.670><c> you</c><00:13:16.760><c> do</c><00:13:16.940><c> it</c><00:13:17.120><c> is</c><00:13:17.270><c> you</c><00:13:17.720><c> write</c><00:13:17.930><c> a</c><00:13:17.960><c> copy</c>

00:13:18.400 --> 00:13:18.410 align:start position:0%
that you do it is you write a copy
 

00:13:18.410 --> 00:13:20.800 align:start position:0%
that you do it is you write a copy
constructor<00:13:19.100><c> and</c><00:13:19.250><c> a</c><00:13:19.580><c> copy</c><00:13:19.850><c> constructor</c><00:13:20.570><c> is</c><00:13:20.750><c> a</c>

00:13:20.800 --> 00:13:20.810 align:start position:0%
constructor and a copy constructor is a
 

00:13:20.810 --> 00:13:23.080 align:start position:0%
constructor and a copy constructor is a
constructor<00:13:21.620><c> that</c><00:13:21.920><c> gets</c><00:13:22.130><c> called</c><00:13:22.400><c> for</c><00:13:22.940><c> that</c>

00:13:23.080 --> 00:13:23.090 align:start position:0%
constructor that gets called for that
 

00:13:23.090 --> 00:13:25.900 align:start position:0%
constructor that gets called for that
second<00:13:23.510><c> string</c><00:13:23.780><c> when</c><00:13:24.470><c> you</c><00:13:24.500><c> actually</c><00:13:25.190><c> copy</c><00:13:25.550><c> it</c>

00:13:25.900 --> 00:13:25.910 align:start position:0%
second string when you actually copy it
 

00:13:25.910 --> 00:13:29.050 align:start position:0%
second string when you actually copy it
so<00:13:26.480><c> when</c><00:13:26.660><c> you</c><00:13:26.780><c> assign</c><00:13:27.140><c> a</c><00:13:27.170><c> string</c><00:13:27.530><c> to</c><00:13:28.370><c> an</c><00:13:28.520><c> object</c>

00:13:29.050 --> 00:13:29.060 align:start position:0%
so when you assign a string to an object
 

00:13:29.060 --> 00:13:31.000 align:start position:0%
so when you assign a string to an object
that<00:13:29.270><c> is</c><00:13:29.480><c> also</c><00:13:29.720><c> a</c><00:13:29.870><c> string</c><00:13:30.260><c> when</c><00:13:30.740><c> you</c><00:13:30.830><c> try</c><00:13:30.980><c> to</c>

00:13:31.000 --> 00:13:31.010 align:start position:0%
that is also a string when you try to
 

00:13:31.010 --> 00:13:32.350 align:start position:0%
that is also a string when you try to
create<00:13:31.190><c> a</c><00:13:31.310><c> new</c><00:13:31.340><c> variable</c><00:13:31.640><c> and</c><00:13:31.880><c> you</c><00:13:32.030><c> assign</c><00:13:32.330><c> it</c>

00:13:32.350 --> 00:13:32.360 align:start position:0%
create a new variable and you assign it
 

00:13:32.360 --> 00:13:34.180 align:start position:0%
create a new variable and you assign it
with<00:13:32.570><c> another</c><00:13:32.930><c> variable</c><00:13:33.260><c> which</c><00:13:33.440><c> has</c><00:13:33.560><c> the</c><00:13:33.860><c> same</c>

00:13:34.180 --> 00:13:34.190 align:start position:0%
with another variable which has the same
 

00:13:34.190 --> 00:13:36.400 align:start position:0%
with another variable which has the same
type<00:13:34.580><c> as</c><00:13:34.850><c> a</c><00:13:35.210><c> variable</c><00:13:35.780><c> that</c><00:13:35.810><c> you're</c><00:13:36.050><c> actually</c>

00:13:36.400 --> 00:13:36.410 align:start position:0%
type as a variable that you're actually
 

00:13:36.410 --> 00:13:38.680 align:start position:0%
type as a variable that you're actually
creating<00:13:36.620><c> you're</c><00:13:37.520><c> copying</c><00:13:37.850><c> that</c><00:13:38.240><c> variable</c>

00:13:38.680 --> 00:13:38.690 align:start position:0%
creating you're copying that variable
 

00:13:38.690 --> 00:13:40.360 align:start position:0%
creating you're copying that variable
and<00:13:38.900><c> thus</c><00:13:39.200><c> you're</c><00:13:39.470><c> calling</c><00:13:39.800><c> something</c><00:13:40.010><c> called</c>

00:13:40.360 --> 00:13:40.370 align:start position:0%
and thus you're calling something called
 

00:13:40.370 --> 00:13:43.030 align:start position:0%
and thus you're calling something called
the<00:13:40.520><c> copy</c><00:13:40.820><c> constructor</c><00:13:41.630><c> let's</c><00:13:42.560><c> write</c><00:13:42.770><c> one</c><00:13:42.950><c> of</c>

00:13:43.030 --> 00:13:43.040 align:start position:0%
the copy constructor let's write one of
 

00:13:43.040 --> 00:13:45.190 align:start position:0%
the copy constructor let's write one of
these<00:13:43.190><c> now</c><00:13:43.520><c> C++</c><00:13:44.030><c> by</c><00:13:44.210><c> default</c><00:13:44.570><c> will</c><00:13:44.870><c> actually</c>

00:13:45.190 --> 00:13:45.200 align:start position:0%
these now C++ by default will actually
 

00:13:45.200 --> 00:13:46.990 align:start position:0%
these now C++ by default will actually
provide<00:13:45.500><c> you</c><00:13:45.740><c> with</c><00:13:45.950><c> a</c><00:13:46.070><c> copy</c><00:13:46.280><c> constructor</c><00:13:46.910><c> you</c>

00:13:46.990 --> 00:13:47.000 align:start position:0%
provide you with a copy constructor you
 

00:13:47.000 --> 00:13:48.190 align:start position:0%
provide you with a copy constructor you
can<00:13:47.120><c> do</c><00:13:47.210><c> several</c><00:13:47.420><c> things</c><00:13:47.540><c> with</c><00:13:47.870><c> this</c><00:13:47.960><c> copy</c>

00:13:48.190 --> 00:13:48.200 align:start position:0%
can do several things with this copy
 

00:13:48.200 --> 00:13:49.750 align:start position:0%
can do several things with this copy
constructor<00:13:48.740><c> the</c><00:13:48.890><c> definition</c><00:13:49.580><c> or</c><00:13:49.730><c> the</c>

00:13:49.750 --> 00:13:49.760 align:start position:0%
constructor the definition or the
 

00:13:49.760 --> 00:13:51.670 align:start position:0%
constructor the definition or the
declaration<00:13:50.600><c> for</c><00:13:50.840><c> this</c><00:13:50.960><c> copy</c><00:13:51.140><c> constructor</c>

00:13:51.670 --> 00:13:51.680 align:start position:0%
declaration for this copy constructor
 

00:13:51.680 --> 00:13:53.410 align:start position:0%
declaration for this copy constructor
the<00:13:51.800><c> signature</c><00:13:52.310><c> is</c><00:13:52.520><c> a</c><00:13:52.580><c> constructor</c><00:13:53.240><c> that</c>

00:13:53.410 --> 00:13:53.420 align:start position:0%
the signature is a constructor that
 

00:13:53.420 --> 00:13:56.050 align:start position:0%
the signature is a constructor that
takes<00:13:53.540><c> in</c><00:13:53.990><c> a</c><00:13:54.230><c> reference</c><00:13:55.010><c> a</c><00:13:55.130><c> const</c><00:13:55.550><c> reference</c>

00:13:56.050 --> 00:13:56.060 align:start position:0%
takes in a reference a const reference
 

00:13:56.060 --> 00:14:00.070 align:start position:0%
takes in a reference a const reference
to<00:13:56.840><c> the</c><00:13:57.380><c> same</c><00:13:57.620><c> class</c><00:13:57.950><c> so</c><00:13:58.490><c> string</c><00:13:59.180><c> costs</c><00:13:59.720><c> string</c>

00:14:00.070 --> 00:14:00.080 align:start position:0%
to the same class so string costs string
 

00:14:00.080 --> 00:14:01.480 align:start position:0%
to the same class so string costs string
reference<00:14:00.470><c> and</c><00:14:00.740><c> then</c><00:14:01.040><c> you</c><00:14:01.130><c> can</c><00:14:01.250><c> call</c><00:14:01.400><c> it</c>

00:14:01.480 --> 00:14:01.490 align:start position:0%
reference and then you can call it
 

00:14:01.490 --> 00:14:02.740 align:start position:0%
reference and then you can call it
something<00:14:01.610><c> like</c><00:14:01.790><c> other</c><00:14:02.060><c> because</c><00:14:02.510><c> that's</c><00:14:02.600><c> a</c>

00:14:02.740 --> 00:14:02.750 align:start position:0%
something like other because that's a
 

00:14:02.750 --> 00:14:04.480 align:start position:0%
something like other because that's a
sensible<00:14:03.080><c> name</c><00:14:03.320><c> so</c><00:14:03.680><c> as</c><00:14:03.830><c> i</c><00:14:03.950><c> say</c><00:14:04.100><c> this</c><00:14:04.220><c> a</c><00:14:04.340><c> plus</c>

00:14:04.480 --> 00:14:04.490 align:start position:0%
sensible name so as i say this a plus
 

00:14:04.490 --> 00:14:05.950 align:start position:0%
sensible name so as i say this a plus
plus<00:14:04.700><c> actually</c><00:14:05.060><c> supplies</c><00:14:05.420><c> you</c><00:14:05.600><c> with</c><00:14:05.750><c> one</c><00:14:05.870><c> of</c>

00:14:05.950 --> 00:14:05.960 align:start position:0%
plus actually supplies you with one of
 

00:14:05.960 --> 00:14:07.570 align:start position:0%
plus actually supplies you with one of
these<00:14:06.050><c> automatically</c><00:14:06.650><c> and</c><00:14:06.950><c> what</c><00:14:07.160><c> that</c><00:14:07.340><c> does</c>

00:14:07.570 --> 00:14:07.580 align:start position:0%
these automatically and what that does
 

00:14:07.580 --> 00:14:09.250 align:start position:0%
these automatically and what that does
is<00:14:07.850><c> literally</c><00:14:08.300><c> a</c><00:14:08.330><c> mem</c><00:14:08.540><c> copy</c><00:14:08.750><c> it's</c><00:14:08.990><c> just</c><00:14:09.110><c> going</c>

00:14:09.250 --> 00:14:09.260 align:start position:0%
is literally a mem copy it's just going
 

00:14:09.260 --> 00:14:12.460 align:start position:0%
is literally a mem copy it's just going
to<00:14:09.410><c> copy</c><00:14:09.650><c> the</c><00:14:10.160><c> memory</c><00:14:10.340><c> of</c><00:14:10.700><c> the</c><00:14:10.880><c> other</c><00:14:11.320><c> object</c><00:14:12.320><c> a</c>

00:14:12.460 --> 00:14:12.470 align:start position:0%
to copy the memory of the other object a
 

00:14:12.470 --> 00:14:15.250 align:start position:0%
to copy the memory of the other object a
shallow<00:14:12.770><c> copy</c><00:14:13.040><c> into</c><00:14:13.580><c> these</c><00:14:14.120><c> members</c><00:14:14.630><c> so</c><00:14:15.140><c> in</c>

00:14:15.250 --> 00:14:15.260 align:start position:0%
shallow copy into these members so in
 

00:14:15.260 --> 00:14:17.740 align:start position:0%
shallow copy into these members so in
other<00:14:15.350><c> words</c><00:14:15.560><c> if</c><00:14:15.680><c> we</c><00:14:15.830><c> were</c><00:14:16.070><c> to</c><00:14:16.340><c> write</c><00:14:16.520><c> a</c><00:14:16.760><c> one</c><00:14:17.660><c> of</c>

00:14:17.740 --> 00:14:17.750 align:start position:0%
other words if we were to write a one of
 

00:14:17.750 --> 00:14:19.000 align:start position:0%
other words if we were to write a one of
these<00:14:17.840><c> constructors</c><00:14:18.290><c> ourselves</c><00:14:18.830><c> it</c><00:14:18.950><c> would</c>

00:14:19.000 --> 00:14:19.010 align:start position:0%
these constructors ourselves it would
 

00:14:19.010 --> 00:14:20.290 align:start position:0%
these constructors ourselves it would
probably<00:14:19.160><c> look</c><00:14:19.430><c> something</c><00:14:19.610><c> like</c><00:14:19.790><c> this</c><00:14:20.060><c> and</c>

00:14:20.290 --> 00:14:20.300 align:start position:0%
probably look something like this and
 

00:14:20.300 --> 00:14:22.690 align:start position:0%
probably look something like this and
buffer<00:14:20.990><c> other</c><00:14:21.410><c> door</c><00:14:21.620><c> and</c><00:14:21.740><c> buffer</c><00:14:22.070><c> and</c><00:14:22.250><c> then</c>

00:14:22.690 --> 00:14:22.700 align:start position:0%
buffer other door and buffer and then
 

00:14:22.700 --> 00:14:25.570 align:start position:0%
buffer other door and buffer and then
emphasize<00:14:23.540><c> other</c><00:14:23.900><c> door</c><00:14:24.170><c> size</c><00:14:24.410><c> okay</c><00:14:25.100><c> that's</c>

00:14:25.570 --> 00:14:25.580 align:start position:0%
emphasize other door size okay that's
 

00:14:25.580 --> 00:14:27.430 align:start position:0%
emphasize other door size okay that's
pretty<00:14:25.820><c> much</c><00:14:26.000><c> that</c><00:14:26.270><c> is</c><00:14:26.360><c> exactly</c><00:14:26.810><c> what</c><00:14:27.110><c> it</c><00:14:27.350><c> was</c>

00:14:27.430 --> 00:14:27.440 align:start position:0%
pretty much that is exactly what it was
 

00:14:27.440 --> 00:14:33.260 align:start position:0%
pretty much that is exactly what it was
cost<00:14:27.680><c> kind</c><00:14:27.920><c> of</c><00:14:27.980><c> supplies</c><00:14:28.280><c> us</c><00:14:28.460><c> with</c>

00:14:33.260 --> 00:14:33.270 align:start position:0%
 
 

00:14:33.270 --> 00:14:35.560 align:start position:0%
 
so<00:14:33.870><c> that's</c><00:14:34.350><c> not</c><00:14:34.500><c> gonna</c><00:14:34.649><c> cut</c><00:14:34.920><c> it</c><00:14:34.950><c> here</c>

00:14:35.560 --> 00:14:35.570 align:start position:0%
so that's not gonna cut it here
 

00:14:35.570 --> 00:14:37.090 align:start position:0%
so that's not gonna cut it here
we<00:14:35.720><c> don't</c><00:14:35.900><c> just</c><00:14:36.110><c> want</c><00:14:36.170><c> to</c><00:14:36.320><c> copy</c><00:14:36.470><c> the</c><00:14:36.680><c> pointer</c>

00:14:37.090 --> 00:14:37.100 align:start position:0%
we don't just want to copy the pointer
 

00:14:37.100 --> 00:14:38.950 align:start position:0%
we don't just want to copy the pointer
we<00:14:37.520><c> want</c><00:14:37.700><c> to</c><00:14:37.790><c> copy</c><00:14:37.940><c> the</c><00:14:38.150><c> memory</c><00:14:38.480><c> at</c><00:14:38.660><c> the</c>

00:14:38.950 --> 00:14:38.960 align:start position:0%
we want to copy the memory at the
 

00:14:38.960 --> 00:14:40.930 align:start position:0%
we want to copy the memory at the
pointer<00:14:39.380><c> now</c><00:14:39.980><c> if</c><00:14:40.070><c> we</c><00:14:40.190><c> decide</c><00:14:40.490><c> that</c><00:14:40.520><c> we</c><00:14:40.760><c> don't</c>

00:14:40.930 --> 00:14:40.940 align:start position:0%
pointer now if we decide that we don't
 

00:14:40.940 --> 00:14:43.030 align:start position:0%
pointer now if we decide that we don't
want<00:14:41.270><c> a</c><00:14:41.540><c> copy</c><00:14:42.080><c> constructed</c><00:14:42.620><c> because</c><00:14:42.710><c> we</c><00:14:42.890><c> don't</c>

00:14:43.030 --> 00:14:43.040 align:start position:0%
want a copy constructed because we don't
 

00:14:43.040 --> 00:14:44.770 align:start position:0%
want a copy constructed because we don't
want<00:14:43.220><c> to</c><00:14:43.310><c> allow</c><00:14:43.460><c> copying</c><00:14:44.000><c> we</c><00:14:44.480><c> can</c><00:14:44.630><c> just</c>

00:14:44.770 --> 00:14:44.780 align:start position:0%
want to allow copying we can just
 

00:14:44.780 --> 00:14:46.660 align:start position:0%
want to allow copying we can just
declare<00:14:44.900><c> this</c><00:14:45.140><c> copy</c><00:14:45.380><c> constructor</c><00:14:45.920><c> as</c><00:14:46.070><c> equals</c>

00:14:46.660 --> 00:14:46.670 align:start position:0%
declare this copy constructor as equals
 

00:14:46.670 --> 00:14:48.250 align:start position:0%
declare this copy constructor as equals
delete<00:14:46.940><c> and</c><00:14:47.390><c> you</c><00:14:47.480><c> can</c><00:14:47.630><c> see</c><00:14:47.750><c> down</c><00:14:47.900><c> over</c><00:14:48.110><c> here</c>

00:14:48.250 --> 00:14:48.260 align:start position:0%
delete and you can see down over here
 

00:14:48.260 --> 00:14:49.870 align:start position:0%
delete and you can see down over here
this<00:14:48.530><c> code</c><00:14:48.770><c> will</c><00:14:48.920><c> not</c><00:14:49.040><c> compile</c><00:14:49.340><c> anymore</c>

00:14:49.870 --> 00:14:49.880 align:start position:0%
this code will not compile anymore
 

00:14:49.880 --> 00:14:51.670 align:start position:0%
this code will not compile anymore
this<00:14:50.150><c> is</c><00:14:50.300><c> exactly</c><00:14:50.720><c> what</c><00:14:50.960><c> unique</c><00:14:51.260><c> point</c><00:14:51.560><c> it</c>

00:14:51.670 --> 00:14:51.680 align:start position:0%
this is exactly what unique point it
 

00:14:51.680 --> 00:14:53.710 align:start position:0%
this is exactly what unique point it
does<00:14:51.830><c> if</c><00:14:52.040><c> you</c><00:14:52.310><c> look</c><00:14:52.460><c> at</c><00:14:52.790><c> my</c><00:14:53.060><c> other</c><00:14:53.330><c> video</c><00:14:53.660><c> on</c>

00:14:53.710 --> 00:14:53.720 align:start position:0%
does if you look at my other video on
 

00:14:53.720 --> 00:14:55.150 align:start position:0%
does if you look at my other video on
smart<00:14:54.200><c> pointers</c><00:14:54.500><c> that</c><00:14:54.530><c> are</c><00:14:54.680><c> released</c><00:14:54.950><c> like</c>

00:14:55.150 --> 00:14:55.160 align:start position:0%
smart pointers that are released like
 

00:14:55.160 --> 00:14:55.900 align:start position:0%
smart pointers that are released like
two<00:14:55.340><c> days</c><00:14:55.490><c> ago</c>

00:14:55.900 --> 00:14:55.910 align:start position:0%
two days ago
 

00:14:55.910 --> 00:14:58.690 align:start position:0%
two days ago
linked<00:14:56.120><c> up</c><00:14:56.360><c> there</c><00:14:57.070><c> you</c><00:14:58.070><c> saw</c><00:14:58.280><c> this</c><00:14:58.370><c> in</c><00:14:58.520><c> action</c>

00:14:58.690 --> 00:14:58.700 align:start position:0%
linked up there you saw this in action
 

00:14:58.700 --> 00:15:00.310 align:start position:0%
linked up there you saw this in action
when<00:14:58.940><c> we</c><00:14:59.030><c> talked</c><00:14:59.210><c> about</c><00:14:59.330><c> unique</c><00:14:59.690><c> pointers</c><00:15:00.050><c> so</c>

00:15:00.310 --> 00:15:00.320 align:start position:0%
when we talked about unique pointers so
 

00:15:00.320 --> 00:15:01.960 align:start position:0%
when we talked about unique pointers so
that's<00:15:00.500><c> how</c><00:15:00.680><c> we</c><00:15:00.740><c> kind</c><00:15:00.980><c> of</c><00:15:01.100><c> disable</c><00:15:01.520><c> that</c><00:15:01.670><c> but</c>

00:15:01.960 --> 00:15:01.970 align:start position:0%
that's how we kind of disable that but
 

00:15:01.970 --> 00:15:03.790 align:start position:0%
that's how we kind of disable that but
what<00:15:02.210><c> we</c><00:15:02.330><c> want</c><00:15:02.510><c> to</c><00:15:02.600><c> do</c><00:15:02.750><c> here</c><00:15:03.020><c> is</c><00:15:03.080><c> to</c><00:15:03.410><c> find</c><00:15:03.590><c> our</c>

00:15:03.790 --> 00:15:03.800 align:start position:0%
what we want to do here is to find our
 

00:15:03.800 --> 00:15:05.500 align:start position:0%
what we want to do here is to find our
own<00:15:03.920><c> copying</c><00:15:04.370><c> instructor</c><00:15:04.790><c> which</c><00:15:05.000><c> does</c><00:15:05.270><c> that</c>

00:15:05.500 --> 00:15:05.510 align:start position:0%
own copying instructor which does that
 

00:15:05.510 --> 00:15:07.720 align:start position:0%
own copying instructor which does that
deep<00:15:05.840><c> copy</c><00:15:06.080><c> so</c><00:15:06.770><c> what</c><00:15:06.920><c> I'll</c><00:15:07.010><c> do</c><00:15:07.130><c> over</c><00:15:07.310><c> here</c><00:15:07.340><c> is</c>

00:15:07.720 --> 00:15:07.730 align:start position:0%
deep copy so what I'll do over here is
 

00:15:07.730 --> 00:15:10.960 align:start position:0%
deep copy so what I'll do over here is
I'll<00:15:08.000><c> copy</c><00:15:08.210><c> size</c><00:15:08.510><c> because</c><00:15:09.020><c> well</c><00:15:09.470><c> that</c><00:15:10.100><c> is</c><00:15:10.430><c> that</c>

00:15:10.960 --> 00:15:10.970 align:start position:0%
I'll copy size because well that is that
 

00:15:10.970 --> 00:15:12.610 align:start position:0%
I'll copy size because well that is that
is<00:15:11.090><c> an</c><00:15:11.210><c> integer</c><00:15:11.480><c> we</c><00:15:11.780><c> can</c><00:15:11.930><c> just</c><00:15:12.110><c> shallow</c><00:15:12.350><c> copy</c>

00:15:12.610 --> 00:15:12.620 align:start position:0%
is an integer we can just shallow copy
 

00:15:12.620 --> 00:15:14.230 align:start position:0%
is an integer we can just shallow copy
that<00:15:12.860><c> and</c><00:15:13.070><c> then</c><00:15:13.280><c> over</c><00:15:13.460><c> here</c><00:15:13.490><c> what</c><00:15:14.090><c> I'm</c><00:15:14.210><c> going</c>

00:15:14.230 --> 00:15:14.240 align:start position:0%
that and then over here what I'm going
 

00:15:14.240 --> 00:15:16.300 align:start position:0%
that and then over here what I'm going
to<00:15:14.450><c> do</c><00:15:14.660><c> is</c><00:15:14.900><c> just</c><00:15:15.200><c> simply</c><00:15:15.380><c> allocate</c><00:15:15.980><c> a</c><00:15:16.010><c> new</c>

00:15:16.300 --> 00:15:16.310 align:start position:0%
to do is just simply allocate a new
 

00:15:16.310 --> 00:15:18.100 align:start position:0%
to do is just simply allocate a new
buffer<00:15:16.520><c> we</c><00:15:17.030><c> already</c><00:15:17.330><c> know</c><00:15:17.450><c> how</c><00:15:17.630><c> big</c><00:15:17.810><c> it</c><00:15:17.840><c> needs</c>

00:15:18.100 --> 00:15:18.110 align:start position:0%
buffer we already know how big it needs
 

00:15:18.110 --> 00:15:20.140 align:start position:0%
buffer we already know how big it needs
to<00:15:18.290><c> be</c><00:15:18.440><c> it</c><00:15:18.830><c> needs</c><00:15:18.860><c> to</c><00:15:19.160><c> be</c><00:15:19.280><c> M</c><00:15:19.430><c> size</c><00:15:19.730><c> which</c><00:15:20.000><c> we've</c>

00:15:20.140 --> 00:15:20.150 align:start position:0%
to be it needs to be M size which we've
 

00:15:20.150 --> 00:15:22.480 align:start position:0%
to be it needs to be M size which we've
already<00:15:20.330><c> signed</c><00:15:20.720><c> up</c><00:15:20.930><c> here</c><00:15:21.200><c> plus</c><00:15:21.590><c> one</c><00:15:21.830><c> we</c><00:15:22.280><c> know</c>

00:15:22.480 --> 00:15:22.490 align:start position:0%
already signed up here plus one we know
 

00:15:22.490 --> 00:15:23.950 align:start position:0%
already signed up here plus one we know
that<00:15:22.790><c> we're</c><00:15:22.910><c> copying</c><00:15:23.120><c> from</c><00:15:23.330><c> another</c><00:15:23.660><c> string</c>

00:15:23.950 --> 00:15:23.960 align:start position:0%
that we're copying from another string
 

00:15:23.960 --> 00:15:26.170 align:start position:0%
that we're copying from another string
object<00:15:24.320><c> so</c><00:15:24.560><c> what</c><00:15:25.100><c> we</c><00:15:25.250><c> really</c><00:15:25.520><c> need</c><00:15:25.550><c> to</c><00:15:25.700><c> do</c><00:15:25.880><c> here</c>

00:15:26.170 --> 00:15:26.180 align:start position:0%
object so what we really need to do here
 

00:15:26.180 --> 00:15:28.870 align:start position:0%
object so what we really need to do here
is<00:15:26.360><c> simply</c><00:15:27.050><c> copy</c><00:15:27.350><c> the</c><00:15:27.710><c> other</c><00:15:27.740><c> buffer</c><00:15:28.400><c> so</c>

00:15:28.870 --> 00:15:28.880 align:start position:0%
is simply copy the other buffer so
 

00:15:28.880 --> 00:15:31.090 align:start position:0%
is simply copy the other buffer so
Arthur<00:15:29.390><c> dot</c><00:15:29.600><c> M</c><00:15:29.780><c> buffer</c><00:15:30.200><c> into</c><00:15:30.710><c> the</c><00:15:30.800><c> buffer</c><00:15:31.070><c> for</c>

00:15:31.090 --> 00:15:31.100 align:start position:0%
Arthur dot M buffer into the buffer for
 

00:15:31.100 --> 00:15:33.130 align:start position:0%
Arthur dot M buffer into the buffer for
this<00:15:31.430><c> string</c><00:15:31.760><c> class</c><00:15:32.000><c> and</c><00:15:32.270><c> then</c><00:15:32.780><c> we'll</c><00:15:32.930><c> set</c>

00:15:33.130 --> 00:15:33.140 align:start position:0%
this string class and then we'll set
 

00:15:33.140 --> 00:15:34.810 align:start position:0%
this string class and then we'll set
this<00:15:33.230><c> to</c><00:15:33.380><c> be</c><00:15:33.470><c> precise</c><00:15:33.860><c> plus</c><00:15:34.130><c> one</c><00:15:34.310><c> over</c><00:15:34.460><c> here</c><00:15:34.760><c> I</c>

00:15:34.810 --> 00:15:34.820 align:start position:0%
this to be precise plus one over here I
 

00:15:34.820 --> 00:15:36.490 align:start position:0%
this to be precise plus one over here I
can<00:15:35.090><c> just</c><00:15:35.120><c> write</c><00:15:35.420><c> this</c><00:15:35.630><c> because</c><00:15:35.780><c> I</c><00:15:35.960><c> know</c><00:15:36.080><c> that</c>

00:15:36.490 --> 00:15:36.500 align:start position:0%
can just write this because I know that
 

00:15:36.500 --> 00:15:38.080 align:start position:0%
can just write this because I know that
the<00:15:36.590><c> other</c><00:15:36.710><c> size</c><00:15:37.010><c> the</c><00:15:37.520><c> other</c><00:15:37.700><c> string</c><00:15:37.970><c> is</c>

00:15:38.080 --> 00:15:38.090 align:start position:0%
the other size the other string is
 

00:15:38.090 --> 00:15:39.490 align:start position:0%
the other size the other string is
already<00:15:38.360><c> gonna</c><00:15:38.480><c> have</c><00:15:38.570><c> that</c><00:15:38.930><c> null</c><00:15:39.140><c> termination</c>

00:15:39.490 --> 00:15:39.500 align:start position:0%
already gonna have that null termination
 

00:15:39.500 --> 00:15:41.110 align:start position:0%
already gonna have that null termination
character<00:15:39.800><c> because</c><00:15:40.340><c> it's</c><00:15:40.520><c> a</c><00:15:40.640><c> string</c><00:15:40.880><c> and</c><00:15:41.030><c> it</c>

00:15:41.110 --> 00:15:41.120 align:start position:0%
character because it's a string and it
 

00:15:41.120 --> 00:15:42.970 align:start position:0%
character because it's a string and it
has<00:15:41.330><c> to</c><00:15:41.540><c> and</c><00:15:41.780><c> that's</c><00:15:41.990><c> it</c><00:15:42.290><c> that's</c><00:15:42.470><c> all</c><00:15:42.710><c> the</c><00:15:42.860><c> code</c>

00:15:42.970 --> 00:15:42.980 align:start position:0%
has to and that's it that's all the code
 

00:15:42.980 --> 00:15:44.410 align:start position:0%
has to and that's it that's all the code
that<00:15:43.160><c> I</c><00:15:43.220><c> have</c><00:15:43.400><c> to</c><00:15:43.520><c> write</c><00:15:43.730><c> to</c><00:15:43.760><c> perform</c><00:15:44.330><c> an</c>

00:15:44.410 --> 00:15:44.420 align:start position:0%
that I have to write to perform an
 

00:15:44.420 --> 00:15:47.740 align:start position:0%
that I have to write to perform an
actual<00:15:44.780><c> deep</c><00:15:45.350><c> copy</c><00:15:45.710><c> in</c><00:15:46.400><c> this</c><00:15:46.670><c> case</c><00:15:46.910><c> so</c><00:15:47.270><c> now</c><00:15:47.480><c> if</c>

00:15:47.740 --> 00:15:47.750 align:start position:0%
actual deep copy in this case so now if
 

00:15:47.750 --> 00:15:49.720 align:start position:0%
actual deep copy in this case so now if
I<00:15:47.870><c> scroll</c><00:15:48.080><c> down</c><00:15:48.140><c> here</c><00:15:48.530><c> to</c><00:15:48.920><c> my</c><00:15:49.070><c> code</c><00:15:49.280><c> and</c><00:15:49.430><c> I</c><00:15:49.520><c> hit</c>

00:15:49.720 --> 00:15:49.730 align:start position:0%
I scroll down here to my code and I hit
 

00:15:49.730 --> 00:15:51.730 align:start position:0%
I scroll down here to my code and I hit
f5<00:15:50.060><c> to</c><00:15:50.360><c> run</c><00:15:50.480><c> my</c><00:15:50.630><c> code</c><00:15:50.810><c> the</c><00:15:51.170><c> first</c><00:15:51.410><c> thing</c><00:15:51.590><c> you'll</c>

00:15:51.730 --> 00:15:51.740 align:start position:0%
f5 to run my code the first thing you'll
 

00:15:51.740 --> 00:15:53.590 align:start position:0%
f5 to run my code the first thing you'll
notice<00:15:51.860><c> is</c><00:15:52.130><c> that</c><00:15:52.190><c> I</c><00:15:52.370><c> actually</c><00:15:52.610><c> have</c><00:15:52.940><c> China</c><00:15:53.270><c> and</c>

00:15:53.590 --> 00:15:53.600 align:start position:0%
notice is that I actually have China and
 

00:15:53.600 --> 00:15:55.600 align:start position:0%
notice is that I actually have China and
China<00:15:53.960><c> written</c><00:15:54.410><c> here</c><00:15:54.590><c> so</c><00:15:54.680><c> the</c><00:15:55.040><c> first</c><00:15:55.310><c> string</c>

00:15:55.600 --> 00:15:55.610 align:start position:0%
China written here so the first string
 

00:15:55.610 --> 00:15:57.610 align:start position:0%
China written here so the first string
did<00:15:56.180><c> not</c><00:15:56.330><c> change</c><00:15:56.570><c> how</c><00:15:56.960><c> awesome</c><00:15:57.230><c> is</c><00:15:57.350><c> that</c><00:15:57.380><c> when</c>

00:15:57.610 --> 00:15:57.620 align:start position:0%
did not change how awesome is that when
 

00:15:57.620 --> 00:15:59.530 align:start position:0%
did not change how awesome is that when
we<00:15:57.710><c> change</c><00:15:57.950><c> the</c><00:15:58.040><c> second</c><00:15:58.430><c> string</c><00:15:58.730><c> it</c><00:15:59.240><c> didn't</c>

00:15:59.530 --> 00:15:59.540 align:start position:0%
we change the second string it didn't
 

00:15:59.540 --> 00:16:00.940 align:start position:0%
we change the second string it didn't
change<00:15:59.570><c> our</c><00:15:59.960><c> first</c><00:16:00.200><c> string</c><00:16:00.440><c> that's</c><00:16:00.710><c> pretty</c>

00:16:00.940 --> 00:16:00.950 align:start position:0%
change our first string that's pretty
 

00:16:00.950 --> 00:16:03.670 align:start position:0%
change our first string that's pretty
cool<00:16:01.160><c> and</c><00:16:01.460><c> then</c><00:16:02.120><c> when</c><00:16:02.270><c> I</c><00:16:02.300><c> hit</c><00:16:02.510><c> enter</c><00:16:02.720><c> it</c>

00:16:03.670 --> 00:16:03.680 align:start position:0%
cool and then when I hit enter it
 

00:16:03.680 --> 00:16:05.260 align:start position:0%
cool and then when I hit enter it
doesn't<00:16:04.040><c> crash</c><00:16:04.250><c> our</c><00:16:04.490><c> program</c><00:16:04.850><c> terminates</c>

00:16:05.260 --> 00:16:05.270 align:start position:0%
doesn't crash our program terminates
 

00:16:05.270 --> 00:16:07.510 align:start position:0%
doesn't crash our program terminates
successfully<00:16:05.900><c> so</c><00:16:06.170><c> as</c><00:16:06.320><c> we</c><00:16:06.500><c> discussed</c><00:16:06.920><c> if</c><00:16:07.370><c> you</c>

00:16:07.510 --> 00:16:07.520 align:start position:0%
successfully so as we discussed if you
 

00:16:07.520 --> 00:16:08.890 align:start position:0%
successfully so as we discussed if you
write<00:16:07.670><c> code</c><00:16:07.880><c> like</c><00:16:07.910><c> this</c><00:16:08.210><c> it</c><00:16:08.480><c> will</c><00:16:08.750><c> of</c><00:16:08.870><c> course</c>

00:16:08.890 --> 00:16:08.900 align:start position:0%
write code like this it will of course
 

00:16:08.900 --> 00:16:11.140 align:start position:0%
write code like this it will of course
copy<00:16:09.440><c> your</c><00:16:09.680><c> string</c><00:16:09.980><c> if</c><00:16:10.160><c> you</c><00:16:10.310><c> decide</c><00:16:10.760><c> to</c>

00:16:11.140 --> 00:16:11.150 align:start position:0%
copy your string if you decide to
 

00:16:11.150 --> 00:16:13.150 align:start position:0%
copy your string if you decide to
actually<00:16:11.690><c> write</c><00:16:12.020><c> a</c><00:16:12.050><c> function</c><00:16:12.320><c> here</c><00:16:12.710><c> that</c>

00:16:13.150 --> 00:16:13.160 align:start position:0%
actually write a function here that
 

00:16:13.160 --> 00:16:14.710 align:start position:0%
actually write a function here that
prints<00:16:13.610><c> our</c><00:16:13.760><c> string</c><00:16:14.120><c> so</c><00:16:14.360><c> I'll</c><00:16:14.420><c> just</c><00:16:14.570><c> write</c>

00:16:14.710 --> 00:16:14.720 align:start position:0%
prints our string so I'll just write
 

00:16:14.720 --> 00:16:16.330 align:start position:0%
prints our string so I'll just write
void<00:16:14.990><c> print</c><00:16:15.350><c> string</c><00:16:15.650><c> I'll</c><00:16:15.800><c> pass</c><00:16:16.070><c> in</c><00:16:16.250><c> a</c><00:16:16.310><c> string</c>

00:16:16.330 --> 00:16:16.340 align:start position:0%
void print string I'll pass in a string
 

00:16:16.340 --> 00:16:18.960 align:start position:0%
void print string I'll pass in a string
like<00:16:16.790><c> this</c><00:16:16.820><c> and</c><00:16:17.300><c> I'll</c><00:16:17.420><c> just</c><00:16:17.630><c> call</c><00:16:17.810><c> STD</c><00:16:18.350><c> C</c><00:16:18.620><c> out</c>

00:16:18.960 --> 00:16:18.970 align:start position:0%
like this and I'll just call STD C out
 

00:16:18.970 --> 00:16:22.630 align:start position:0%
like this and I'll just call STD C out
string<00:16:19.970><c> and</c><00:16:20.210><c> we</c><00:16:20.510><c> end</c><00:16:20.690><c> up</c><00:16:20.840><c> using</c><00:16:21.100><c> this</c><00:16:22.100><c> function</c>

00:16:22.630 --> 00:16:22.640 align:start position:0%
string and we end up using this function
 

00:16:22.640 --> 00:16:24.880 align:start position:0%
string and we end up using this function
instead<00:16:23.090><c> of</c><00:16:23.480><c> these</c><00:16:23.660><c> C</c><00:16:24.140><c> outs</c><00:16:24.320><c> I'll</c><00:16:24.560><c> get</c><00:16:24.740><c> rid</c><00:16:24.830><c> of</c>

00:16:24.880 --> 00:16:24.890 align:start position:0%
instead of these C outs I'll get rid of
 

00:16:24.890 --> 00:16:26.680 align:start position:0%
instead of these C outs I'll get rid of
these<00:16:25.010><c> C</c><00:16:25.280><c> outs</c><00:16:25.430><c> and</c><00:16:25.760><c> I'll</c><00:16:25.970><c> just</c><00:16:26.150><c> call</c><00:16:26.330><c> print</c>

00:16:26.680 --> 00:16:26.690 align:start position:0%
these C outs and I'll just call print
 

00:16:26.690 --> 00:16:31.840 align:start position:0%
these C outs and I'll just call print
string<00:16:26.990><c> string</c><00:16:27.950><c> and</c><00:16:28.420><c> print</c><00:16:29.420><c> string</c><00:16:29.780><c> second</c><00:16:30.850><c> if</c>

00:16:31.840 --> 00:16:31.850 align:start position:0%
string string and print string second if
 

00:16:31.850 --> 00:16:34.060 align:start position:0%
string string and print string second if
I<00:16:31.940><c> hit</c><00:16:32.090><c> f5</c><00:16:32.390><c> everything</c><00:16:33.110><c> appears</c><00:16:33.470><c> to</c><00:16:33.500><c> work</c><00:16:33.800><c> but</c>

00:16:34.060 --> 00:16:34.070 align:start position:0%
I hit f5 everything appears to work but
 

00:16:34.070 --> 00:16:35.620 align:start position:0%
I hit f5 everything appears to work but
what<00:16:34.220><c> what</c><00:16:34.640><c> we're</c><00:16:34.760><c> actually</c><00:16:34.880><c> doing</c><00:16:35.330><c> is</c><00:16:35.450><c> we're</c>

00:16:35.620 --> 00:16:35.630 align:start position:0%
what what we're actually doing is we're
 

00:16:35.630 --> 00:16:38.230 align:start position:0%
what what we're actually doing is we're
actually<00:16:35.750><c> needlessly</c><00:16:36.740><c> copying</c><00:16:37.310><c> this</c><00:16:37.490><c> if</c><00:16:37.700><c> we</c>

00:16:38.230 --> 00:16:38.240 align:start position:0%
actually needlessly copying this if we
 

00:16:38.240 --> 00:16:40.150 align:start position:0%
actually needlessly copying this if we
come<00:16:38.420><c> over</c><00:16:38.450><c> here</c><00:16:38.690><c> to</c><00:16:39.230><c> the</c><00:16:39.320><c> copy</c><00:16:39.500><c> constructor</c>

00:16:40.150 --> 00:16:40.160 align:start position:0%
come over here to the copy constructor
 

00:16:40.160 --> 00:16:41.929 align:start position:0%
come over here to the copy constructor
and<00:16:40.340><c> just</c><00:16:40.790><c> write</c><00:16:40.940><c> a</c><00:16:40.970><c> quick</c><00:16:41.180><c> message</c><00:16:41.390><c> here</c>

00:16:41.929 --> 00:16:41.939 align:start position:0%
and just write a quick message here
 

00:16:41.939 --> 00:16:44.869 align:start position:0%
and just write a quick message here
says<00:16:42.209><c> copied</c><00:16:42.720><c> string</c><00:16:43.220><c> it</c><00:16:44.220><c> kind</c><00:16:44.519><c> of</c><00:16:44.579><c> looks</c><00:16:44.789><c> like</c>

00:16:44.869 --> 00:16:44.879 align:start position:0%
says copied string it kind of looks like
 

00:16:44.879 --> 00:16:46.909 align:start position:0%
says copied string it kind of looks like
maybe<00:16:45.209><c> we're</c><00:16:45.449><c> doing</c><00:16:45.689><c> one</c><00:16:45.899><c> copy</c><00:16:46.169><c> over</c><00:16:46.470><c> here</c><00:16:46.709><c> but</c>

00:16:46.909 --> 00:16:46.919 align:start position:0%
maybe we're doing one copy over here but
 

00:16:46.919 --> 00:16:48.229 align:start position:0%
maybe we're doing one copy over here but
we're<00:16:47.069><c> actually</c><00:16:47.189><c> doing</c><00:16:47.519><c> two</c><00:16:47.669><c> more</c><00:16:47.970><c> when</c><00:16:48.149><c> we</c>

00:16:48.229 --> 00:16:48.239 align:start position:0%
we're actually doing two more when we
 

00:16:48.239 --> 00:16:49.460 align:start position:0%
we're actually doing two more when we
pass<00:16:48.449><c> it</c><00:16:48.599><c> into</c><00:16:48.720><c> this</c><00:16:48.869><c> function</c><00:16:49.259><c> and</c><00:16:49.349><c> we</c><00:16:49.439><c> can</c>

00:16:49.460 --> 00:16:49.470 align:start position:0%
pass it into this function and we can
 

00:16:49.470 --> 00:16:51.469 align:start position:0%
pass it into this function and we can
prove<00:16:49.739><c> it</c><00:16:49.919><c> by</c><00:16:50.009><c> hitting</c><00:16:50.189><c> out</c><00:16:50.369><c> five</c><00:16:50.639><c> you</c><00:16:51.209><c> can</c><00:16:51.359><c> see</c>

00:16:51.469 --> 00:16:51.479 align:start position:0%
prove it by hitting out five you can see
 

00:16:51.479 --> 00:16:53.089 align:start position:0%
prove it by hitting out five you can see
that<00:16:51.629><c> we</c><00:16:51.720><c> get</c><00:16:51.899><c> three</c><00:16:52.289><c> string</c><00:16:52.709><c> copies</c>

00:16:53.089 --> 00:16:53.099 align:start position:0%
that we get three string copies
 

00:16:53.099 --> 00:16:55.669 align:start position:0%
that we get three string copies
happening<00:16:53.639><c> ridiculous</c><00:16:54.419><c> because</c><00:16:54.809><c> when</c><00:16:55.289><c> we</c>

00:16:55.669 --> 00:16:55.679 align:start position:0%
happening ridiculous because when we
 

00:16:55.679 --> 00:16:57.049 align:start position:0%
happening ridiculous because when we
don't<00:16:55.889><c> want</c><00:16:56.069><c> to</c><00:16:56.129><c> be</c><00:16:56.220><c> doing</c><00:16:56.399><c> that</c><00:16:56.729><c> what's</c>

00:16:57.049 --> 00:16:57.059 align:start position:0%
don't want to be doing that what's
 

00:16:57.059 --> 00:16:58.759 align:start position:0%
don't want to be doing that what's
actually<00:16:57.269><c> happening</c><00:16:57.869><c> is</c><00:16:58.019><c> every</c><00:16:58.259><c> time</c><00:16:58.409><c> we</c><00:16:58.470><c> copy</c>

00:16:58.759 --> 00:16:58.769 align:start position:0%
actually happening is every time we copy
 

00:16:58.769 --> 00:17:01.009 align:start position:0%
actually happening is every time we copy
a<00:16:58.889><c> string</c><00:16:59.220><c> we</c><00:16:59.699><c> allocate</c><00:17:00.149><c> memory</c><00:17:00.389><c> on</c><00:17:00.839><c> the</c><00:17:00.989><c> heap</c>

00:17:01.009 --> 00:17:01.019 align:start position:0%
a string we allocate memory on the heap
 

00:17:01.019 --> 00:17:03.409 align:start position:0%
a string we allocate memory on the heap
copy<00:17:01.769><c> all</c><00:17:02.039><c> that</c><00:17:02.069><c> memory</c><00:17:02.489><c> and</c><00:17:02.939><c> then</c><00:17:03.179><c> at</c><00:17:03.299><c> the</c><00:17:03.389><c> end</c>

00:17:03.409 --> 00:17:03.419 align:start position:0%
copy all that memory and then at the end
 

00:17:03.419 --> 00:17:05.149 align:start position:0%
copy all that memory and then at the end
of<00:17:03.629><c> it</c><00:17:03.749><c> we</c><00:17:03.959><c> free</c><00:17:04.259><c> it</c><00:17:04.409><c> that's</c><00:17:04.679><c> completely</c>

00:17:05.149 --> 00:17:05.159 align:start position:0%
of it we free it that's completely
 

00:17:05.159 --> 00:17:07.189 align:start position:0%
of it we free it that's completely
unnecessary<00:17:05.419><c> what</c><00:17:06.419><c> we</c><00:17:06.539><c> actually</c><00:17:06.870><c> want</c><00:17:07.019><c> to</c><00:17:07.049><c> do</c>

00:17:07.189 --> 00:17:07.199 align:start position:0%
unnecessary what we actually want to do
 

00:17:07.199 --> 00:17:08.990 align:start position:0%
unnecessary what we actually want to do
is<00:17:07.319><c> just</c><00:17:07.500><c> pass</c><00:17:07.679><c> the</c><00:17:07.949><c> existing</c><00:17:08.429><c> string</c><00:17:08.759><c> into</c>

00:17:08.990 --> 00:17:09.000 align:start position:0%
is just pass the existing string into
 

00:17:09.000 --> 00:17:10.639 align:start position:0%
is just pass the existing string into
this<00:17:09.149><c> print</c><00:17:09.389><c> string</c><00:17:09.629><c> function</c><00:17:10.019><c> because</c><00:17:10.620><c> we</c>

00:17:10.639 --> 00:17:10.649 align:start position:0%
this print string function because we
 

00:17:10.649 --> 00:17:11.960 align:start position:0%
this print string function because we
know<00:17:10.889><c> that</c><00:17:11.069><c> we're</c><00:17:11.189><c> not</c><00:17:11.220><c> going</c><00:17:11.519><c> to</c><00:17:11.610><c> need</c><00:17:11.759><c> to</c>

00:17:11.960 --> 00:17:11.970 align:start position:0%
know that we're not going to need to
 

00:17:11.970 --> 00:17:13.669 align:start position:0%
know that we're not going to need to
copy<00:17:12.149><c> we</c><00:17:12.419><c> don't</c><00:17:12.569><c> need</c><00:17:12.659><c> another</c><00:17:12.870><c> copy</c><00:17:13.169><c> of</c><00:17:13.350><c> it</c><00:17:13.559><c> we</c>

00:17:13.669 --> 00:17:13.679 align:start position:0%
copy we don't need another copy of it we
 

00:17:13.679 --> 00:17:15.679 align:start position:0%
copy we don't need another copy of it we
can<00:17:13.829><c> just</c><00:17:13.860><c> reference</c><00:17:14.399><c> the</c><00:17:14.610><c> existing</c><00:17:15.329><c> one</c><00:17:15.480><c> and</c>

00:17:15.679 --> 00:17:15.689 align:start position:0%
can just reference the existing one and
 

00:17:15.689 --> 00:17:17.059 align:start position:0%
can just reference the existing one and
the<00:17:15.809><c> way</c><00:17:15.899><c> that</c><00:17:16.019><c> we</c><00:17:16.110><c> do</c><00:17:16.230><c> that</c><00:17:16.409><c> is</c><00:17:16.589><c> by</c><00:17:16.740><c> passing</c>

00:17:17.059 --> 00:17:17.069 align:start position:0%
the way that we do that is by passing
 

00:17:17.069 --> 00:17:18.470 align:start position:0%
the way that we do that is by passing
this<00:17:17.189><c> by</c><00:17:17.370><c> reference</c><00:17:17.939><c> which</c><00:17:18.089><c> we</c><00:17:18.209><c> can</c><00:17:18.329><c> do</c><00:17:18.449><c> by</c>

00:17:18.470 --> 00:17:18.480 align:start position:0%
this by reference which we can do by
 

00:17:18.480 --> 00:17:21.470 align:start position:0%
this by reference which we can do by
staking<00:17:18.929><c> a</c><00:17:19.019><c> reference</c><00:17:19.439><c> here</c><00:17:19.500><c> now</c><00:17:20.250><c> this</c><00:17:21.000><c> class</c>

00:17:21.470 --> 00:17:21.480 align:start position:0%
staking a reference here now this class
 

00:17:21.480 --> 00:17:23.449 align:start position:0%
staking a reference here now this class
will<00:17:22.079><c> actually</c><00:17:22.110><c> not</c><00:17:22.589><c> be</c><00:17:22.799><c> modifying</c><00:17:23.309><c> the</c>

00:17:23.449 --> 00:17:23.459 align:start position:0%
will actually not be modifying the
 

00:17:23.459 --> 00:17:25.970 align:start position:0%
will actually not be modifying the
string<00:17:23.759><c> so</c><00:17:24.269><c> what</c><00:17:24.419><c> we</c><00:17:24.569><c> should</c><00:17:24.629><c> do</c><00:17:25.110><c> really</c><00:17:25.470><c> is</c>

00:17:25.970 --> 00:17:25.980 align:start position:0%
string so what we should do really is
 

00:17:25.980 --> 00:17:27.799 align:start position:0%
string so what we should do really is
market<00:17:26.429><c> as</c><00:17:26.519><c> a</c><00:17:26.549><c> Const</c><00:17:26.939><c> reference</c><00:17:27.299><c> if</c><00:17:27.449><c> we</c><00:17:27.569><c> don't</c>

00:17:27.799 --> 00:17:27.809 align:start position:0%
market as a Const reference if we don't
 

00:17:27.809 --> 00:17:29.810 align:start position:0%
market as a Const reference if we don't
mark<00:17:28.019><c> it</c><00:17:28.139><c> as</c><00:17:28.230><c> Const</c><00:17:28.710><c> not</c><00:17:29.039><c> only</c><00:17:29.340><c> does</c><00:17:29.460><c> that</c><00:17:29.580><c> mean</c>

00:17:29.810 --> 00:17:29.820 align:start position:0%
mark it as Const not only does that mean
 

00:17:29.820 --> 00:17:31.519 align:start position:0%
mark it as Const not only does that mean
that<00:17:30.000><c> we</c><00:17:30.090><c> can</c><00:17:30.269><c> actually</c><00:17:30.419><c> edit</c><00:17:30.779><c> this</c><00:17:31.110><c> so</c><00:17:31.440><c> in</c>

00:17:31.519 --> 00:17:31.529 align:start position:0%
that we can actually edit this so in
 

00:17:31.529 --> 00:17:33.860 align:start position:0%
that we can actually edit this so in
other<00:17:31.590><c> words</c><00:17:31.860><c> I</c><00:17:32.009><c> can</c><00:17:32.340><c> just</c><00:17:32.669><c> do</c><00:17:33.179><c> write</c><00:17:33.600><c> code</c>

00:17:33.860 --> 00:17:33.870 align:start position:0%
other words I can just do write code
 

00:17:33.870 --> 00:17:35.659 align:start position:0%
other words I can just do write code
like<00:17:34.080><c> this</c><00:17:34.289><c> if</c><00:17:34.500><c> it</c><00:17:34.620><c> wasn't</c><00:17:34.889><c> marked</c><00:17:34.980><c> as</c><00:17:35.220><c> Const</c>

00:17:35.659 --> 00:17:35.669 align:start position:0%
like this if it wasn't marked as Const
 

00:17:35.669 --> 00:17:37.730 align:start position:0%
like this if it wasn't marked as Const
maybe<00:17:36.389><c> let's</c><00:17:36.600><c> make</c><00:17:36.690><c> us</c><00:17:36.899><c> a</c><00:17:36.929><c> character</c><00:17:37.320><c> just</c><00:17:37.500><c> so</c>

00:17:37.730 --> 00:17:37.740 align:start position:0%
maybe let's make us a character just so
 

00:17:37.740 --> 00:17:40.159 align:start position:0%
maybe let's make us a character just so
it's<00:17:37.860><c> clearer</c><00:17:38.129><c> but</c><00:17:38.539><c> because</c><00:17:39.539><c> if</c><00:17:39.690><c> it</c><00:17:39.899><c> if</c><00:17:40.019><c> it's</c>

00:17:40.159 --> 00:17:40.169 align:start position:0%
it's clearer but because if it if it's
 

00:17:40.169 --> 00:17:42.230 align:start position:0%
it's clearer but because if it if it's
not<00:17:40.289><c> constant</c><00:17:40.769><c> I</c><00:17:40.799><c> can</c><00:17:40.830><c> actually</c><00:17:41.129><c> edit</c><00:17:41.519><c> the</c>

00:17:42.230 --> 00:17:42.240 align:start position:0%
not constant I can actually edit the
 

00:17:42.240 --> 00:17:44.629 align:start position:0%
not constant I can actually edit the
existing<00:17:42.389><c> string</c><00:17:42.870><c> and</c><00:17:43.860><c> if</c><00:17:43.980><c> it's</c><00:17:44.129><c> constant</c><00:17:44.309><c> con</c>

00:17:44.629 --> 00:17:44.639 align:start position:0%
existing string and if it's constant con
 

00:17:44.639 --> 00:17:47.180 align:start position:0%
existing string and if it's constant con
means<00:17:45.389><c> that</c><00:17:45.600><c> we</c><00:17:45.690><c> can't</c><00:17:45.899><c> pass</c><00:17:46.110><c> temporary</c><00:17:46.889><c> our</c>

00:17:47.180 --> 00:17:47.190 align:start position:0%
means that we can't pass temporary our
 

00:17:47.190 --> 00:17:49.669 align:start position:0%
means that we can't pass temporary our
values<00:17:47.759><c> into</c><00:17:48.269><c> the</c><00:17:48.450><c> actual</c><00:17:48.779><c> function</c><00:17:49.379><c> we'll</c>

00:17:49.669 --> 00:17:49.679 align:start position:0%
values into the actual function we'll
 

00:17:49.679 --> 00:17:51.529 align:start position:0%
values into the actual function we'll
talk<00:17:49.830><c> about</c><00:17:49.950><c> L</c><00:17:50.250><c> values</c><00:17:50.639><c> and</c><00:17:50.789><c> our</c><00:17:50.879><c> values</c><00:17:51.269><c> soon</c>

00:17:51.529 --> 00:17:51.539 align:start position:0%
talk about L values and our values soon
 

00:17:51.539 --> 00:17:53.899 align:start position:0%
talk about L values and our values soon
I<00:17:52.070><c> don't</c><00:17:53.070><c> even</c><00:17:53.250><c> want</c><00:17:53.429><c> to</c><00:17:53.460><c> get</c><00:17:53.580><c> into</c><00:17:53.759><c> them</c><00:17:53.879><c> now</c>

00:17:53.899 --> 00:17:53.909 align:start position:0%
I don't even want to get into them now
 

00:17:53.909 --> 00:17:55.190 align:start position:0%
I don't even want to get into them now
because<00:17:54.120><c> it's</c><00:17:54.330><c> actually</c><00:17:54.539><c> quite</c><00:17:54.840><c> a</c><00:17:54.870><c> complex</c>

00:17:55.190 --> 00:17:55.200 align:start position:0%
because it's actually quite a complex
 

00:17:55.200 --> 00:17:56.840 align:start position:0%
because it's actually quite a complex
topic<00:17:55.409><c> and</c><00:17:55.769><c> this</c><00:17:56.009><c> isn't</c><00:17:56.190><c> meant</c><00:17:56.460><c> to</c><00:17:56.519><c> be</c><00:17:56.700><c> about</c>

00:17:56.840 --> 00:17:56.850 align:start position:0%
topic and this isn't meant to be about
 

00:17:56.850 --> 00:17:59.240 align:start position:0%
topic and this isn't meant to be about
that<00:17:57.059><c> but</c><00:17:57.450><c> eventually</c><00:17:58.110><c> all</c><00:17:58.769><c> I'm</c><00:17:58.919><c> saying</c><00:17:59.190><c> here</c>

00:17:59.240 --> 00:17:59.250 align:start position:0%
that but eventually all I'm saying here
 

00:17:59.250 --> 00:18:01.009 align:start position:0%
that but eventually all I'm saying here
is<00:17:59.519><c> that</c><00:17:59.549><c> if</c><00:17:59.850><c> we</c><00:17:59.970><c> change</c><00:18:00.299><c> this</c><00:18:00.570><c> function</c>

00:18:01.009 --> 00:18:01.019 align:start position:0%
is that if we change this function
 

00:18:01.019 --> 00:18:03.320 align:start position:0%
is that if we change this function
signature<00:18:01.320><c> to</c><00:18:01.620><c> accept</c><00:18:02.250><c> a</c><00:18:02.340><c> cost</c><00:18:02.549><c> reference</c><00:18:03.179><c> of</c>

00:18:03.320 --> 00:18:03.330 align:start position:0%
signature to accept a cost reference of
 

00:18:03.330 --> 00:18:05.360 align:start position:0%
signature to accept a cost reference of
a<00:18:03.389><c> string</c><00:18:03.659><c> rather</c><00:18:03.899><c> than</c><00:18:04.080><c> just</c><00:18:04.409><c> a</c><00:18:04.559><c> string</c><00:18:04.860><c> then</c>

00:18:05.360 --> 00:18:05.370 align:start position:0%
a string rather than just a string then
 

00:18:05.370 --> 00:18:08.360 align:start position:0%
a string rather than just a string then
if<00:18:05.610><c> I</c><00:18:05.730><c> hit</c><00:18:05.879><c> f5</c><00:18:06.360><c> you</c><00:18:07.049><c> can</c><00:18:07.230><c> see</c><00:18:07.440><c> we</c><00:18:07.590><c> only</c><00:18:07.620><c> have</c><00:18:08.100><c> one</c>

00:18:08.360 --> 00:18:08.370 align:start position:0%
if I hit f5 you can see we only have one
 

00:18:08.370 --> 00:18:11.210 align:start position:0%
if I hit f5 you can see we only have one
copy<00:18:08.669><c> and</c><00:18:09.059><c> that</c><00:18:09.240><c> one</c><00:18:09.509><c> copy</c><00:18:09.779><c> happens</c><00:18:10.259><c> over</c><00:18:10.980><c> here</c>

00:18:11.210 --> 00:18:11.220 align:start position:0%
copy and that one copy happens over here
 

00:18:11.220 --> 00:18:13.129 align:start position:0%
copy and that one copy happens over here
when<00:18:11.370><c> we</c><00:18:11.490><c> assign</c><00:18:11.879><c> a</c><00:18:11.909><c> second</c><00:18:12.570><c> with</c><00:18:12.779><c> the</c><00:18:12.899><c> value</c>

00:18:13.129 --> 00:18:13.139 align:start position:0%
when we assign a second with the value
 

00:18:13.139 --> 00:18:14.509 align:start position:0%
when we assign a second with the value
of<00:18:13.230><c> string</c><00:18:13.500><c> because</c><00:18:13.769><c> that</c><00:18:13.919><c> actually</c><00:18:14.159><c> needs</c><00:18:14.399><c> to</c>

00:18:14.509 --> 00:18:14.519 align:start position:0%
of string because that actually needs to
 

00:18:14.519 --> 00:18:16.249 align:start position:0%
of string because that actually needs to
be<00:18:14.669><c> a</c><00:18:14.700><c> copy</c><00:18:14.970><c> because</c><00:18:15.090><c> we're</c><00:18:15.389><c> trying</c><00:18:15.720><c> to</c><00:18:15.990><c> create</c>

00:18:16.249 --> 00:18:16.259 align:start position:0%
be a copy because we're trying to create
 

00:18:16.259 --> 00:18:18.110 align:start position:0%
be a copy because we're trying to create
two<00:18:16.379><c> different</c><00:18:16.679><c> strings</c><00:18:16.889><c> if</c><00:18:17.190><c> we</c><00:18:17.909><c> suddenly</c>

00:18:18.110 --> 00:18:18.120 align:start position:0%
two different strings if we suddenly
 

00:18:18.120 --> 00:18:20.060 align:start position:0%
two different strings if we suddenly
decide<00:18:18.629><c> in</c><00:18:18.929><c> the</c><00:18:19.110><c> print</c><00:18:19.350><c> string</c><00:18:19.529><c> function</c><00:18:19.950><c> oh</c>

00:18:20.060 --> 00:18:20.070 align:start position:0%
decide in the print string function oh
 

00:18:20.070 --> 00:18:22.580 align:start position:0%
decide in the print string function oh
actually<00:18:20.220><c> I</c><00:18:20.429><c> do</c><00:18:20.519><c> want</c><00:18:20.730><c> to</c><00:18:20.789><c> copy</c><00:18:20.970><c> guess</c><00:18:21.750><c> what</c><00:18:21.990><c> we</c>

00:18:22.580 --> 00:18:22.590 align:start position:0%
actually I do want to copy guess what we
 

00:18:22.590 --> 00:18:24.470 align:start position:0%
actually I do want to copy guess what we
can<00:18:22.769><c> actually</c><00:18:22.950><c> do</c><00:18:23.279><c> that</c><00:18:23.460><c> just</c><00:18:23.850><c> by</c><00:18:24.029><c> typing</c><00:18:24.210><c> in</c>

00:18:24.470 --> 00:18:24.480 align:start position:0%
can actually do that just by typing in
 

00:18:24.480 --> 00:18:26.029 align:start position:0%
can actually do that just by typing in
code<00:18:24.690><c> like</c><00:18:24.870><c> this</c><00:18:25.110><c> so</c><00:18:25.590><c> what</c><00:18:25.710><c> I'm</c><00:18:25.799><c> trying</c><00:18:25.889><c> to</c>

00:18:26.029 --> 00:18:26.039 align:start position:0%
code like this so what I'm trying to
 

00:18:26.039 --> 00:18:28.310 align:start position:0%
code like this so what I'm trying to
tell<00:18:26.190><c> you</c><00:18:26.340><c> is</c><00:18:26.490><c> always</c><00:18:27.360><c> pass</c><00:18:27.600><c> your</c><00:18:27.809><c> objects</c><00:18:28.169><c> by</c>

00:18:28.310 --> 00:18:28.320 align:start position:0%
tell you is always pass your objects by
 

00:18:28.320 --> 00:18:30.769 align:start position:0%
tell you is always pass your objects by
constant<00:18:28.679><c> reference</c><00:18:29.240><c> always</c><00:18:30.240><c> we'll</c><00:18:30.629><c> talk</c>

00:18:30.769 --> 00:18:30.779 align:start position:0%
constant reference always we'll talk
 

00:18:30.779 --> 00:18:32.090 align:start position:0%
constant reference always we'll talk
about<00:18:30.990><c> really</c><00:18:31.409><c> kind</c><00:18:31.710><c> of</c><00:18:31.799><c> being</c><00:18:31.860><c> depth</c>

00:18:32.090 --> 00:18:32.100 align:start position:0%
about really kind of being depth
 

00:18:32.100 --> 00:18:33.440 align:start position:0%
about really kind of being depth
optimization<00:18:32.700><c> about</c><00:18:32.879><c> that</c><00:18:33.029><c> in</c><00:18:33.149><c> the</c><00:18:33.240><c> future</c>

00:18:33.440 --> 00:18:33.450 align:start position:0%
optimization about that in the future
 

00:18:33.450 --> 00:18:36.049 align:start position:0%
optimization about that in the future
because<00:18:33.870><c> maybe</c><00:18:34.590><c> in</c><00:18:34.950><c> some</c><00:18:35.159><c> situations</c><00:18:35.850><c> it</c>

00:18:36.049 --> 00:18:36.059 align:start position:0%
because maybe in some situations it
 

00:18:36.059 --> 00:18:38.600 align:start position:0%
because maybe in some situations it
actually<00:18:36.419><c> might</c><00:18:36.570><c> be</c><00:18:36.600><c> faster</c><00:18:37.019><c> to</c><00:18:37.049><c> copy</c><00:18:37.350><c> but</c><00:18:37.610><c> for</c>

00:18:38.600 --> 00:18:38.610 align:start position:0%
actually might be faster to copy but for
 

00:18:38.610 --> 00:18:39.889 align:start position:0%
actually might be faster to copy but for
all<00:18:38.700><c> intents</c><00:18:38.909><c> and</c><00:18:39.029><c> purposes</c><00:18:39.120><c> is</c><00:18:39.570><c> better</c><00:18:39.750><c> than</c>

00:18:39.889 --> 00:18:39.899 align:start position:0%
all intents and purposes is better than
 

00:18:39.899 --> 00:18:42.649 align:start position:0%
all intents and purposes is better than
a<00:18:39.929><c> basic</c><00:18:40.320><c> level</c><00:18:40.500><c> always</c><00:18:41.070><c> pass</c><00:18:42.029><c> your</c><00:18:42.240><c> objects</c>

00:18:42.649 --> 00:18:42.659 align:start position:0%
a basic level always pass your objects
 

00:18:42.659 --> 00:18:44.690 align:start position:0%
a basic level always pass your objects
by<00:18:42.990><c> constant</c><00:18:43.409><c> reference</c><00:18:43.769><c> because</c><00:18:44.429><c> the</c>

00:18:44.690 --> 00:18:44.700 align:start position:0%
by constant reference because the
 

00:18:44.700 --> 00:18:46.519 align:start position:0%
by constant reference because the
function<00:18:45.059><c> itself</c><00:18:45.360><c> that</c><00:18:45.570><c> you're</c><00:18:45.659><c> writing</c><00:18:46.139><c> you</c>

00:18:46.519 --> 00:18:46.529 align:start position:0%
function itself that you're writing you
 

00:18:46.529 --> 00:18:48.110 align:start position:0%
function itself that you're writing you
can<00:18:46.559><c> decide</c><00:18:47.009><c> if</c><00:18:47.039><c> you</c><00:18:47.250><c> want</c><00:18:47.399><c> to</c><00:18:47.490><c> copy</c><00:18:47.639><c> in</c><00:18:47.940><c> that</c>

00:18:48.110 --> 00:18:48.120 align:start position:0%
can decide if you want to copy in that
 

00:18:48.120 --> 00:18:50.029 align:start position:0%
can decide if you want to copy in that
function<00:18:48.360><c> but</c><00:18:48.960><c> there's</c><00:18:49.200><c> no</c><00:18:49.379><c> reason</c><00:18:49.799><c> for</c><00:18:49.830><c> you</c>

00:18:50.029 --> 00:18:50.039 align:start position:0%
function but there's no reason for you
 

00:18:50.039 --> 00:18:51.710 align:start position:0%
function but there's no reason for you
just<00:18:50.279><c> to</c><00:18:50.369><c> be</c><00:18:50.519><c> throwing</c><00:18:51.029><c> around</c><00:18:51.119><c> copies</c><00:18:51.600><c> all</c>

00:18:51.710 --> 00:18:51.720 align:start position:0%
just to be throwing around copies all
 

00:18:51.720 --> 00:18:53.580 align:start position:0%
just to be throwing around copies all
the<00:18:51.809><c> time</c><00:18:51.990><c> that's</c><00:18:52.169><c> close</c><00:18:52.409><c> it</c><00:18:52.590><c> program</c><00:18:52.950><c> down</c>

00:18:53.580 --> 00:18:53.590 align:start position:0%
the time that's close it program down
 

00:18:53.590 --> 00:18:55.560 align:start position:0%
the time that's close it program down
it's<00:18:53.710><c> stupid</c><00:18:54.309><c> whenever</c><00:18:54.850><c> you</c><00:18:54.940><c> pass</c><00:18:55.090><c> a</c><00:18:55.150><c> string</c>

00:18:55.560 --> 00:18:55.570 align:start position:0%
it's stupid whenever you pass a string
 

00:18:55.570 --> 00:18:56.850 align:start position:0%
it's stupid whenever you pass a string
doesn't<00:18:55.990><c> matter</c><00:18:56.110><c> if</c><00:18:56.230><c> it's</c><00:18:56.380><c> your</c><00:18:56.409><c> own</c><00:18:56.529><c> string</c>

00:18:56.850 --> 00:18:56.860 align:start position:0%
doesn't matter if it's your own string
 

00:18:56.860 --> 00:18:58.529 align:start position:0%
doesn't matter if it's your own string
class<00:18:57.010><c> or</c><00:18:57.220><c> if</c><00:18:57.309><c> this</c><00:18:57.400><c> is</c><00:18:57.520><c> just</c><00:18:57.610><c> STD</c><00:18:58.179><c> string</c>

00:18:58.529 --> 00:18:58.539 align:start position:0%
class or if this is just STD string
 

00:18:58.539 --> 00:19:01.560 align:start position:0%
class or if this is just STD string
always<00:18:59.289><c> always</c><00:18:59.770><c> plus</c><00:19:00.490><c> that</c><00:19:00.669><c> by</c><00:19:00.850><c> constants</c>

00:19:01.560 --> 00:19:01.570 align:start position:0%
always always plus that by constants
 

00:19:01.570 --> 00:19:02.880 align:start position:0%
always always plus that by constants
sometime<00:19:02.080><c> in</c><00:19:02.200><c> the</c><00:19:02.260><c> future</c><00:19:02.500><c> I</c><00:19:02.559><c> want</c><00:19:02.650><c> to</c><00:19:02.770><c> make</c><00:19:02.860><c> a</c>

00:19:02.880 --> 00:19:02.890 align:start position:0%
sometime in the future I want to make a
 

00:19:02.890 --> 00:19:04.230 align:start position:0%
sometime in the future I want to make a
quick<00:19:03.100><c> video</c><00:19:03.460><c> that</c><00:19:03.520><c> actually</c><00:19:03.909><c> talks</c><00:19:04.120><c> about</c>

00:19:04.230 --> 00:19:04.240 align:start position:0%
quick video that actually talks about
 

00:19:04.240 --> 00:19:05.789 align:start position:0%
quick video that actually talks about
passing<00:19:04.750><c> by</c><00:19:04.840><c> Const</c><00:19:05.140><c> reference</c><00:19:05.500><c> and</c><00:19:05.650><c> a</c><00:19:05.679><c> lot</c>

00:19:05.789 --> 00:19:05.799 align:start position:0%
passing by Const reference and a lot
 

00:19:05.799 --> 00:19:07.980 align:start position:0%
passing by Const reference and a lot
more<00:19:05.830><c> detail</c><00:19:06.429><c> and</c><00:19:06.640><c> what</c><00:19:07.059><c> advantages</c><00:19:07.539><c> it</c><00:19:07.809><c> gives</c>

00:19:07.980 --> 00:19:07.990 align:start position:0%
more detail and what advantages it gives
 

00:19:07.990 --> 00:19:10.169 align:start position:0%
more detail and what advantages it gives
us<00:19:08.169><c> apart</c><00:19:08.500><c> from</c><00:19:08.620><c> reducing</c><00:19:09.039><c> copies</c><00:19:09.400><c> but</c><00:19:09.909><c> for</c>

00:19:10.169 --> 00:19:10.179 align:start position:0%
us apart from reducing copies but for
 

00:19:10.179 --> 00:19:11.940 align:start position:0%
us apart from reducing copies but for
now<00:19:10.270><c> just</c><00:19:10.600><c> kind</c><00:19:10.900><c> of</c><00:19:10.990><c> keep</c><00:19:11.200><c> that</c><00:19:11.380><c> in</c><00:19:11.590><c> mind</c>

00:19:11.940 --> 00:19:11.950 align:start position:0%
now just kind of keep that in mind
 

00:19:11.950 --> 00:19:13.169 align:start position:0%
now just kind of keep that in mind
anyway<00:19:12.429><c> I</c><00:19:12.490><c> hope</c><00:19:12.580><c> you</c><00:19:12.700><c> guys</c><00:19:12.820><c> enjoyed</c><00:19:13.090><c> this</c>

00:19:13.169 --> 00:19:13.179 align:start position:0%
anyway I hope you guys enjoyed this
 

00:19:13.179 --> 00:19:14.640 align:start position:0%
anyway I hope you guys enjoyed this
video<00:19:13.390><c> about</c><00:19:13.510><c> copying</c><00:19:14.080><c> hopefully</c><00:19:14.409><c> you</c><00:19:14.529><c> guys</c>

00:19:14.640 --> 00:19:14.650 align:start position:0%
video about copying hopefully you guys
 

00:19:14.650 --> 00:19:17.340 align:start position:0%
video about copying hopefully you guys
are<00:19:14.710><c> experts</c><00:19:15.279><c> now</c><00:19:15.490><c> on</c><00:19:15.760><c> how</c><00:19:16.240><c> copying</c><00:19:16.750><c> actually</c>

00:19:17.340 --> 00:19:17.350 align:start position:0%
are experts now on how copying actually
 

00:19:17.350 --> 00:19:18.810 align:start position:0%
are experts now on how copying actually
works<00:19:17.529><c> and</c><00:19:17.710><c> say</c><00:19:17.799><c> bus</c><00:19:17.950><c> blast</c><00:19:18.190><c> went</c><00:19:18.429><c> to</c><00:19:18.520><c> use</c><00:19:18.669><c> it</c>

00:19:18.810 --> 00:19:18.820 align:start position:0%
works and say bus blast went to use it
 

00:19:18.820 --> 00:19:20.010 align:start position:0%
works and say bus blast went to use it
how<00:19:18.940><c> to</c><00:19:18.970><c> write</c><00:19:19.150><c> a</c><00:19:19.179><c> class</c><00:19:19.360><c> that</c><00:19:19.570><c> supports</c>

00:19:20.010 --> 00:19:20.020 align:start position:0%
how to write a class that supports
 

00:19:20.020 --> 00:19:21.960 align:start position:0%
how to write a class that supports
copying<00:19:20.409><c> correctly</c><00:19:20.980><c> you</c><00:19:21.159><c> need</c><00:19:21.400><c> to</c><00:19:21.549><c> specify</c>

00:19:21.960 --> 00:19:21.970 align:start position:0%
copying correctly you need to specify
 

00:19:21.970 --> 00:19:23.850 align:start position:0%
copying correctly you need to specify
that<00:19:22.000><c> copy</c><00:19:22.360><c> constructor</c><00:19:22.900><c> and</c><00:19:23.080><c> hopefully</c><00:19:23.679><c> you</c>

00:19:23.850 --> 00:19:23.860 align:start position:0%
that copy constructor and hopefully you
 

00:19:23.860 --> 00:19:26.850 align:start position:0%
that copy constructor and hopefully you
also<00:19:24.039><c> know</c><00:19:24.340><c> what</c><00:19:24.640><c> copying</c><00:19:25.360><c> does</c><00:19:25.690><c> now</c><00:19:26.350><c> and</c><00:19:26.380><c> how</c>

00:19:26.850 --> 00:19:26.860 align:start position:0%
also know what copying does now and how
 

00:19:26.860 --> 00:19:28.560 align:start position:0%
also know what copying does now and how
you<00:19:26.919><c> can</c><00:19:27.220><c> and</c><00:19:27.490><c> help</c><00:19:27.610><c> preventing</c><00:19:28.149><c> it</c><00:19:28.299><c> or</c><00:19:28.419><c> how</c>

00:19:28.560 --> 00:19:28.570 align:start position:0%
you can and help preventing it or how
 

00:19:28.570 --> 00:19:30.480 align:start position:0%
you can and help preventing it or how
mitigating<00:19:29.200><c> it</c><00:19:29.320><c> can</c><00:19:29.830><c> kind</c><00:19:30.039><c> of</c><00:19:30.100><c> make</c><00:19:30.340><c> your</c>

00:19:30.480 --> 00:19:30.490 align:start position:0%
mitigating it can kind of make your
 

00:19:30.490 --> 00:19:31.950 align:start position:0%
mitigating it can kind of make your
program<00:19:30.789><c> run</c><00:19:30.940><c> a</c><00:19:30.970><c> lot</c><00:19:31.149><c> faster</c><00:19:31.570><c> because</c><00:19:31.840><c> it's</c>

00:19:31.950 --> 00:19:31.960 align:start position:0%
program run a lot faster because it's
 

00:19:31.960 --> 00:19:34.049 align:start position:0%
program run a lot faster because it's
not<00:19:32.110><c> just</c><00:19:32.320><c> copying</c><00:19:32.679><c> data</c><00:19:32.860><c> and</c><00:19:33.279><c> wasting</c><00:19:33.700><c> CPU</c>

00:19:34.049 --> 00:19:34.059 align:start position:0%
not just copying data and wasting CPU
 

00:19:34.059 --> 00:19:36.330 align:start position:0%
not just copying data and wasting CPU
cycles<00:19:34.480><c> is</c><00:19:34.600><c> doing</c><00:19:34.840><c> that</c><00:19:34.990><c> for</c><00:19:35.200><c> absolutely</c><00:19:35.770><c> no</c>

00:19:36.330 --> 00:19:36.340 align:start position:0%
cycles is doing that for absolutely no
 

00:19:36.340 --> 00:19:37.860 align:start position:0%
cycles is doing that for absolutely no
reason<00:19:36.370><c> at</c><00:19:36.940><c> all</c><00:19:37.000><c> if</c><00:19:37.299><c> you</c><00:19:37.419><c> guys</c><00:19:37.510><c> liked</c><00:19:37.720><c> this</c>

00:19:37.860 --> 00:19:37.870 align:start position:0%
reason at all if you guys liked this
 

00:19:37.870 --> 00:19:39.120 align:start position:0%
reason at all if you guys liked this
series<00:19:38.049><c> and</c><00:19:38.289><c> you</c><00:19:38.350><c> want</c><00:19:38.500><c> to</c><00:19:38.559><c> support</c><00:19:38.860><c> it</c><00:19:38.980><c> and</c>

00:19:39.120 --> 00:19:39.130 align:start position:0%
series and you want to support it and
 

00:19:39.130 --> 00:19:40.440 align:start position:0%
series and you want to support it and
you<00:19:39.190><c> want</c><00:19:39.309><c> to</c><00:19:39.399><c> see</c><00:19:39.549><c> more</c><00:19:39.820><c> episodes</c><00:19:39.940><c> and</c><00:19:40.330><c> you</c>

00:19:40.440 --> 00:19:40.450 align:start position:0%
you want to see more episodes and you
 

00:19:40.450 --> 00:19:42.570 align:start position:0%
you want to see more episodes and you
can<00:19:40.600><c> do</c><00:19:40.690><c> so</c><00:19:40.870><c> by</c><00:19:41.020><c> going</c><00:19:41.049><c> to</c><00:19:41.350><c> patreon.com</c><00:19:41.770><c> 4/2</c>

00:19:42.570 --> 00:19:42.580 align:start position:0%
can do so by going to patreon.com 4/2
 

00:19:42.580 --> 00:19:44.549 align:start position:0%
can do so by going to patreon.com 4/2
Cherno<00:19:42.789><c> you'll</c><00:19:43.390><c> be</c><00:19:43.539><c> able</c><00:19:43.630><c> to</c><00:19:43.870><c> see</c><00:19:44.049><c> episodes</c>

00:19:44.549 --> 00:19:44.559 align:start position:0%
Cherno you'll be able to see episodes
 

00:19:44.559 --> 00:19:45.840 align:start position:0%
Cherno you'll be able to see episodes
earlier<00:19:44.919><c> for</c><00:19:45.070><c> example</c><00:19:45.100><c> i</c><00:19:45.370><c> think</c><00:19:45.549><c> this</c><00:19:45.669><c> video</c>

00:19:45.840 --> 00:19:45.850 align:start position:0%
earlier for example i think this video
 

00:19:45.850 --> 00:19:47.639 align:start position:0%
earlier for example i think this video
is<00:19:46.029><c> probably</c><00:19:46.360><c> gonna</c><00:19:46.450><c> get</c><00:19:46.659><c> out</c><00:19:46.809><c> a</c><00:19:46.840><c> day</c><00:19:47.169><c> earlier</c>

00:19:47.639 --> 00:19:47.649 align:start position:0%
is probably gonna get out a day earlier
 

00:19:47.649 --> 00:19:49.529 align:start position:0%
is probably gonna get out a day earlier
for<00:19:47.950><c> patrons</c><00:19:48.610><c> than</c><00:19:48.730><c> it</c><00:19:48.850><c> is</c><00:19:48.940><c> for</c><00:19:49.120><c> anyone</c><00:19:49.299><c> else</c>

00:19:49.529 --> 00:19:49.539 align:start position:0%
for patrons than it is for anyone else
 

00:19:49.539 --> 00:19:51.180 align:start position:0%
for patrons than it is for anyone else
you'll<00:19:49.870><c> also</c><00:19:49.990><c> get</c><00:19:50.230><c> access</c><00:19:50.350><c> to</c><00:19:50.649><c> a</c><00:19:50.679><c> private</c><00:19:50.860><c> disc</c>

00:19:51.180 --> 00:19:51.190 align:start position:0%
you'll also get access to a private disc
 

00:19:51.190 --> 00:19:52.380 align:start position:0%
you'll also get access to a private disc
or<00:19:51.399><c> channel</c><00:19:51.730><c> where</c><00:19:51.880><c> we</c><00:19:51.970><c> kind</c><00:19:52.149><c> of</c><00:19:52.210><c> talk</c><00:19:52.360><c> about</c>

00:19:52.380 --> 00:19:52.390 align:start position:0%
or channel where we kind of talk about
 

00:19:52.390 --> 00:19:53.970 align:start position:0%
or channel where we kind of talk about
these<00:19:52.630><c> episodes</c><00:19:52.929><c> and</c><00:19:53.260><c> what</c><00:19:53.409><c> goes</c><00:19:53.559><c> into</c><00:19:53.830><c> them</c>

00:19:53.970 --> 00:19:53.980 align:start position:0%
these episodes and what goes into them
 

00:19:53.980 --> 00:19:56.039 align:start position:0%
these episodes and what goes into them
and<00:19:54.159><c> plan</c><00:19:54.789><c> them</c><00:19:54.970><c> and</c><00:19:55.090><c> all</c><00:19:55.179><c> that</c><00:19:55.360><c> fun</c><00:19:55.570><c> stuff</c><00:19:55.630><c> I</c>

00:19:56.039 --> 00:19:56.049 align:start position:0%
and plan them and all that fun stuff I
 

00:19:56.049 --> 00:19:57.360 align:start position:0%
and plan them and all that fun stuff I
think<00:19:56.289><c> this</c><00:19:56.409><c> was</c><00:19:56.529><c> kind</c><00:19:56.740><c> of</c><00:19:56.770><c> the</c><00:19:56.860><c> first</c><00:19:57.070><c> video</c>

00:19:57.360 --> 00:19:57.370 align:start position:0%
think this was kind of the first video
 

00:19:57.370 --> 00:19:58.799 align:start position:0%
think this was kind of the first video
where<00:19:57.549><c> we</c><00:19:57.610><c> actually</c><00:19:57.730><c> wrote</c><00:19:58.120><c> quite</c><00:19:58.510><c> a</c><00:19:58.539><c> bit</c><00:19:58.720><c> of</c>

00:19:58.799 --> 00:19:58.809 align:start position:0%
where we actually wrote quite a bit of
 

00:19:58.809 --> 00:20:00.960 align:start position:0%
where we actually wrote quite a bit of
code<00:19:58.990><c> and</c><00:19:59.260><c> got</c><00:19:59.950><c> some</c><00:20:00.159><c> stuff</c><00:20:00.399><c> done</c><00:20:00.580><c> so</c><00:20:00.640><c> I</c><00:20:00.820><c> hope</c>

00:20:00.960 --> 00:20:00.970 align:start position:0%
code and got some stuff done so I hope
 

00:20:00.970 --> 00:20:03.690 align:start position:0%
code and got some stuff done so I hope
you<00:20:01.120><c> enjoy</c><00:20:01.510><c> videos</c><00:20:01.870><c> like</c><00:20:02.049><c> this</c><00:20:02.200><c> because</c><00:20:02.700><c> now</c>

00:20:03.690 --> 00:20:03.700 align:start position:0%
you enjoy videos like this because now
 

00:20:03.700 --> 00:20:05.730 align:start position:0%
you enjoy videos like this because now
that<00:20:03.909><c> we</c><00:20:04.029><c> kind</c><00:20:04.299><c> of</c><00:20:04.360><c> know</c><00:20:04.480><c> the</c><00:20:04.600><c> basics</c><00:20:05.020><c> of</c><00:20:05.140><c> C++</c>

00:20:05.730 --> 00:20:05.740 align:start position:0%
that we kind of know the basics of C++
 

00:20:05.740 --> 00:20:08.010 align:start position:0%
that we kind of know the basics of C++
apart<00:20:06.399><c> from</c><00:20:06.520><c> little</c><00:20:06.850><c> tips</c><00:20:07.090><c> and</c><00:20:07.330><c> tricks</c><00:20:07.539><c> I</c>

00:20:08.010 --> 00:20:08.020 align:start position:0%
apart from little tips and tricks I
 

00:20:08.020 --> 00:20:09.539 align:start position:0%
apart from little tips and tricks I
guess<00:20:08.169><c> here</c><00:20:08.409><c> and</c><00:20:08.529><c> there</c><00:20:08.710><c> we're</c><00:20:09.220><c> gonna</c><00:20:09.340><c> be</c>

00:20:09.539 --> 00:20:09.549 align:start position:0%
guess here and there we're gonna be
 

00:20:09.549 --> 00:20:11.010 align:start position:0%
guess here and there we're gonna be
actually<00:20:10.090><c> writing</c><00:20:10.270><c> code</c><00:20:10.390><c> now</c><00:20:10.720><c> and</c><00:20:10.899><c> especially</c>

00:20:11.010 --> 00:20:11.020 align:start position:0%
actually writing code now and especially
 

00:20:11.020 --> 00:20:13.110 align:start position:0%
actually writing code now and especially
when<00:20:11.470><c> I</c><00:20:11.500><c> start</c><00:20:11.830><c> the</c><00:20:12.340><c> new</c><00:20:12.490><c> series</c><00:20:12.880><c> that</c><00:20:13.029><c> I'm</c>

00:20:13.110 --> 00:20:13.120 align:start position:0%
when I start the new series that I'm
 

00:20:13.120 --> 00:20:14.159 align:start position:0%
when I start the new series that I'm
going<00:20:13.299><c> to</c><00:20:13.419><c> if</c><00:20:13.480><c> you</c><00:20:13.570><c> guys</c><00:20:13.659><c> haven't</c><00:20:13.870><c> seen</c><00:20:14.110><c> the</c>

00:20:14.159 --> 00:20:14.169 align:start position:0%
going to if you guys haven't seen the
 

00:20:14.169 --> 00:20:15.899 align:start position:0%
going to if you guys haven't seen the
video<00:20:14.559><c> I</c><00:20:14.590><c> made</c><00:20:14.890><c> on</c><00:20:14.919><c> the</c><00:20:15.159><c> weekend</c><00:20:15.580><c> about</c><00:20:15.760><c> the</c>

00:20:15.899 --> 00:20:15.909 align:start position:0%
video I made on the weekend about the
 

00:20:15.909 --> 00:20:18.060 align:start position:0%
video I made on the weekend about the
new<00:20:16.179><c> series</c><00:20:16.570><c> I'm</c><00:20:16.720><c> starting</c><00:20:17.110><c> check</c><00:20:17.679><c> that</c><00:20:17.919><c> out</c>

00:20:18.060 --> 00:20:18.070 align:start position:0%
new series I'm starting check that out
 

00:20:18.070 --> 00:20:20.760 align:start position:0%
new series I'm starting check that out
for<00:20:18.399><c> sure</c><00:20:18.669><c> link</c><00:20:18.970><c> up</c><00:20:19.120><c> there</c><00:20:19.390><c> but</c><00:20:20.260><c> when</c><00:20:20.380><c> we</c><00:20:20.500><c> start</c>

00:20:20.760 --> 00:20:20.770 align:start position:0%
for sure link up there but when we start
 

00:20:20.770 --> 00:20:22.590 align:start position:0%
for sure link up there but when we start
those<00:20:20.919><c> series</c><00:20:21.370><c> this</c><00:20:21.909><c> is</c><00:20:22.179><c> what</c><00:20:22.330><c> they're</c><00:20:22.480><c> gonna</c>

00:20:22.590 --> 00:20:22.600 align:start position:0%
those series this is what they're gonna
 

00:20:22.600 --> 00:20:24.330 align:start position:0%
those series this is what they're gonna
be<00:20:22.779><c> like</c><00:20:23.020><c> so</c><00:20:23.260><c> if</c><00:20:23.350><c> you're</c><00:20:23.500><c> excited</c><00:20:23.770><c> about</c><00:20:23.980><c> that</c>

00:20:24.330 --> 00:20:24.340 align:start position:0%
be like so if you're excited about that
 

00:20:24.340 --> 00:20:26.700 align:start position:0%
be like so if you're excited about that
hit<00:20:24.850><c> the</c><00:20:24.970><c> like</c><00:20:25.149><c> button</c><00:20:25.510><c> support</c><00:20:26.169><c> this</c><00:20:26.320><c> series</c>

00:20:26.700 --> 00:20:26.710 align:start position:0%
hit the like button support this series
 

00:20:26.710 --> 00:20:28.320 align:start position:0%
hit the like button support this series
and<00:20:26.890><c> not</c><00:20:26.980><c> and</c><00:20:27.220><c> everything</c><00:20:27.580><c> I</c><00:20:27.669><c> do</c><00:20:27.730><c> on</c><00:20:27.940><c> patreon</c>

00:20:28.320 --> 00:20:28.330 align:start position:0%
and not and everything I do on patreon
 

00:20:28.330 --> 00:20:29.580 align:start position:0%
and not and everything I do on patreon
because<00:20:28.510><c> that's</c><00:20:28.840><c> gonna</c><00:20:28.990><c> be</c><00:20:29.140><c> sure</c><00:20:29.320><c> that</c><00:20:29.500><c> I</c><00:20:29.529><c> can</c>

00:20:29.580 --> 00:20:29.590 align:start position:0%
because that's gonna be sure that I can
 

00:20:29.590 --> 00:20:32.399 align:start position:0%
because that's gonna be sure that I can
make<00:20:29.860><c> more</c><00:20:30.070><c> videos</c><00:20:30.429><c> and</c><00:20:30.720><c> I</c><00:20:31.720><c> will</c><00:20:31.899><c> see</c><00:20:32.200><c> you</c><00:20:32.289><c> guys</c>

00:20:32.399 --> 00:20:32.409 align:start position:0%
make more videos and I will see you guys
 

00:20:32.409 --> 00:20:35.290 align:start position:0%
make more videos and I will see you guys
in<00:20:32.710><c> the</c><00:20:32.799><c> next</c><00:20:32.919><c> episode</c><00:20:33.130><c> goodbye</c>

00:20:35.290 --> 00:20:35.300 align:start position:0%
in the next episode goodbye
 

00:20:35.300 --> 00:20:47.270 align:start position:0%
in the next episode goodbye
[Music]

00:20:47.270 --> 00:20:47.280 align:start position:0%
 
 

00:20:47.280 --> 00:20:50.480 align:start position:0%
 
[Music]

